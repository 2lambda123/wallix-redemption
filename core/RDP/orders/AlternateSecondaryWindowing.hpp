/*
    This program is free software; you can redistribute it and/or modify it
     under the terms of the GNU General Public License as published by the
     Free Software Foundation; either version 2 of the License, or (at your
     option) any later version.

    This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
     Public License for more details.

    You should have received a copy of the GNU General Public License along
     with this program; if not, write to the Free Software Foundation, Inc.,
     675 Mass Ave, Cambridge, MA 02139, USA.

    Product name: redemption, a FLOSS RDP proxy
    Copyright (C) Wallix 2015
    Author(s): Christophe Grosjean, Raphael Zhou
*/

#ifndef _REDEMPTION_CORE_RDP_ORDERS_ALTERNATESECONDARYWINDOWING_HPP_
#define _REDEMPTION_CORE_RDP_ORDERS_ALTERNATESECONDARYWINDOWING_HPP_

#include "log.hpp"
#include "stream.hpp"

// [MS-RDPERP] - 2.2.1.3.1.1 Common Header (TS_WINDOW_ORDER_HEADER)
// ================================================================

// The TS_WINDOW_ORDER_HEADER packet contains information common to every
//  Windowing Alternate Secondary Drawing Order describing a window.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |     Header    |           OrderSize           | FieldsPresent |
// |               |                               |     Flags     |
// +---------------+-------------------------------+---------------+
// |                      ...                      |    WindowId   |
// +---------------+-------------------------------+---------------+
// |                      ...                      |
// +-----------------------------------------------+

// Header (1 byte): An unsigned 8-bit integer. An Alternate Secondary Order
//  Header, as specified in [MS-RDPEGDI] section 2.2.2.2.1.3.1.1. The
//  embedded orderType field MUST be set to 0x0B (TS_ALTSEC_WINDOW).

// OrderSize (2 bytes): An unsigned 16-bit integer. The size of the entire
//  packet, in bytes.

// FieldsPresentFlags (4 bytes): An unsigned 32-bit integer. The flags
//  indicating which fields are present in the packet. See Orders.

// WindowId (4 bytes): An unsigned 32-bit integer. The ID of the window being
//  described in the drawing order. It is generated by the server and is
//  unique for every window in the session.

class WindowInformationCommonHeader_Recv {
    uint16_t OrderSize_;
    uint32_t FieldsPresentFlags_;
    uint32_t WindowId_;

public:
    WindowInformationCommonHeader_Recv(Stream & stream) {
        {
            const unsigned expected =
                10;  // OrderSize(2) + FieldsPresentFlags(4) + WindowId(4)

            if (!stream.in_check_rem(expected)) {
                LOG(LOG_ERR,
                    "Truncated Window Information Common Header: "
                        "expected=%u remains=%u",
                    expected, stream.in_remain());
                throw Error(ERR_RAIL_PDU_TRUNCATED);
            }
        }

        this->OrderSize_          = stream.in_uint16_le();
        this->FieldsPresentFlags_ = stream.in_uint32_le();
        this->WindowId_           = stream.in_uint32_le();
    }

    uint16_t OrderSize() const { return this->OrderSize_; }

    uint32_t FieldsPresentFlags() const { return this->FieldsPresentFlags_; }

    uint32_t WindowId() const { return this->WindowId_; }
};

class WindowInformationCommonHeader_Send {
    Stream & stream;

    uint32_t offset_of_OrderSize;

public:
    WindowInformationCommonHeader_Send(Stream & stream) : stream(stream),
        offset_of_OrderSize(0) {}

    void emit_begin(uint32_t FieldsPresentFlags, uint32_t WindowId) {
        this->offset_of_OrderSize = this->stream.get_offset();
        this->stream.out_skip_bytes(2); // OrderSize(2)

        this->stream.out_uint32_le(FieldsPresentFlags);
        this->stream.out_uint32_le(WindowId);

        this->stream.mark_end();
    }

    void emit_end() {
        this->stream.set_out_uint16_le(
            this->stream.get_offset() - this->offset_of_OrderSize,
            this->offset_of_OrderSize);
    }
};


enum { WINDOW_ORDER_TYPE_WINDOW = 0x01000000 };

#endif  // #ifndef _REDEMPTION_CORE_RDP_ORDERS_ALTERNATESECONDARYWINDOWING_HPP_
