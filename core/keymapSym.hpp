#if !defined(__KEYMAPSYM__)
#define __KEYMAPSYM__

#include <stdio.h>
#include "constants.hpp"
#include <string.h>
#include <string>

using namespace std;

struct KeymapSym {

    enum {
           KBDFLAGS_EXTENDED = 0x0100
         , KBDFLAGS_DOWN     = 0x4000
         , KBDFLAGS_RELEASE  = 0x8000
         };


    enum {
           SCROLLLOCK  = 0x01
         , NUMLOCK     = 0x02
         , CAPSLOCK    = 0x04
         , FLG_SHIFT   = 0x08
         , FLG_CTRL    = 0x10
         , FLG_ALT     = 0x20
         , FLG_WINDOWS = 0x40
         , FLG_ALTGR   = 0x80
    };

    enum {
           LEFT_SHIFT  = 0x36
         , RIGHT_SHIFT = 0x2A
         , LEFT_CTRL   = 0x1D
         , RIGHT_CTRL  = 0x9D
         , LEFT_ALT    = 0x38
         , RIGHT_ALT   = 0xB8
    };

    // keyboard info
    int keys_down[256];  // key states 0 up 1 down (0..127 plain keys, 128..255 extended keys)

    int key_flags;          // scroll_lock = 1, num_lock = 2, caps_lock = 4,
                            // shift = 8, ctrl = 16, Alt = 32,
                            // Windows = 64, AltGr = 128

    enum {
        SIZE_KEYBUF = 20
    };

    enum {
        SIZE_KEYBUF_SYM = 20
    };

    enum {
        SIZE_KEYBUF_KEVENT = 20
    };

    enum {
        KEVENT_KEY,
        KEVENT_TAB,
        KEVENT_BACKTAB,
        KEVENT_ENTER,
        KEVENT_ESC,
        KEVENT_DELETE,
        KEVENT_BACKSPACE,
        KEVENT_LEFT_ARROW,
        KEVENT_RIGHT_ARROW,
        KEVENT_UP_ARROW,
        KEVENT_DOWN_ARROW,
        KEVENT_HOME,
        KEVENT_END,
        KEVENT_PGUP,
        KEVENT_PGDOWN,
    };

    uint32_t ibuf; // first free position in char buffer
    uint32_t nbuf; // number of char in char buffer
    uint32_t buffer[SIZE_KEYBUF]; // actual char buffer

    uint32_t ibuf_sym; // first free position
    uint32_t nbuf_sym; // number of char in char buffer
    uint32_t buffer_sym[SIZE_KEYBUF_SYM]; // actual char buffer

    uint32_t ibuf_kevent; // first free position
    uint32_t nbuf_kevent; // number of char in char buffer
    uint32_t buffer_kevent[SIZE_KEYBUF_KEVENT]; // actual char buffer

    uint8_t dead_key;

    enum {
        DEADKEY_NONE,
        DEADKEY_CIRC,
        DEADKEY_UML,
        DEADKEY_GRAVE,
        DEADKEY_TILDE
    };


    uint32_t verbose;

    int last_sym;

    typedef int KeyLayout_t[128];

    // keylayout working tables (X11 mode : begins in 8e position.)
    KeyLayout_t keylayout_WORK_noshift_sym;
    KeyLayout_t keylayout_WORK_shift_sym;
    KeyLayout_t keylayout_WORK_altgr_sym;
    KeyLayout_t keylayout_WORK_capslock_sym;
    KeyLayout_t keylayout_WORK_shiftcapslock_sym;

    // constructor
// ################################################################
    KeymapSym(int verbose = 0)
    : ibuf(0)
    , nbuf(0)
    , ibuf_kevent(0)
    , nbuf_kevent(0)
    , dead_key(DEADKEY_NONE)
    , verbose(verbose)
    {
// ################################################################
        memset(this->keys_down, 0, 256 * sizeof(int));

        memset(&this->keylayout_WORK_noshift_sym,       0, 128 * sizeof(int));
        memset(&this->keylayout_WORK_shift_sym,         0, 128 * sizeof(int));
        memset(&this->keylayout_WORK_altgr_sym,         0, 128 * sizeof(int));
        memset(&this->keylayout_WORK_capslock_sym,      0, 128 * sizeof(int));
        memset(&this->keylayout_WORK_shiftcapslock_sym, 0, 128 * sizeof(int));

        this->key_flags = 0;
//        this->last_chr_unicode = 0;
        this->last_sym = 0;
    }

    void synchronize(uint16_t param1){
        this->key_flags = param1 & 0x07;
        // non sticky keys are forced to be UP
        this->keys_down[LEFT_SHIFT] = 0;
        this->keys_down[RIGHT_SHIFT] = 0;
        this->keys_down[LEFT_CTRL] = 0;
        this->keys_down[RIGHT_CTRL] = 0;
        this->keys_down[LEFT_ALT] = 0;
        this->keys_down[RIGHT_ALT] = 0;
    }

// ################################################################

// The TS_KEYBOARD_EVENT structure is a standard T.128 Keyboard Event (see [T128] section
// 8.18.2). RDP keyboard input is restricted to keyboard scancodes, unlike the code-point or virtual
// codes supported in T.128 (a scancode is an 8-bit value specifying a key location on the keyboard).
// The server accepts a scancode value and translates it into the correct character depending on the
// language locale and keyboard layout used in the session.

// keyboardFlags (2 bytes): A 16-bit, unsigned integer. The flags describing the keyboard event.

// +--------------------------+------------------------------------------------+
// | 0x0100 KBDFLAGS_EXTENDED | The keystroke message contains an extended     |
// |                          | scancode. For enhanced 101-key and 102-key     |
// |                          | keyboards, extended keys include the right     |
// |                          | ALT and right CTRL keys on the main section    |
// |                          | of the keyboard; the INS, DEL, HOME, END,      |
// |                          | PAGE UP, PAGE DOWN and ARROW keys in the       |
// |                          | clusters to the left of the numeric keypad;    |
// |                          | and the Divide ("/") and ENTER keys in the     |
// |                          | numeric keypad.                                |
// +--------------------------+------------------------------------------------+
// | 0x4000 KBDFLAGS_DOWN     | Indicates that the key was down prior to this  |
// |                          | event.                                         |
// +--------------------------+------------------------------------------------+
// | 0x8000 KBDFLAGS_RELEASE  | The absence of this flag indicates a key-down  |
// |                          | event, while its presence indicates a          |
// |                          | key-release event.                             |
// +--------------------------+------------------------------------------------+

// keyCode (2 bytes): A 16-bit, unsigned integer. The scancode of the key which
// triggered the event.

    void event(const uint16_t keyboardFlags, const uint16_t keyCode)
    {
        // The scancode and its extended nature are merged in a new variable (whose most significant bit indicates the extended nature)
        uint8_t extendedKeyCode = keyCode|((keyboardFlags >> 1)&0x80);
        // The state of that key is updated in the Keyboard status array (1=Make ; 0=Break)
        this->keys_down[extendedKeyCode] = !(keyboardFlags & KBDFLAGS_RELEASE);

        switch (extendedKeyCode){
        //================
        // Lock keys
        //================
            case 0x3A: // capslock
                if (this->keys_down[extendedKeyCode]){
                    this->key_flags ^= CAPSLOCK;
                }
                break;
            case 0x45: // numlock
                if (this->keys_down[extendedKeyCode]){
                    this->key_flags ^= NUMLOCK;
                }
                break;
            case 0x46: // scrolllock
                if (this->keys_down[extendedKeyCode]){
                    this->key_flags ^= SCROLLLOCK;
                }
                break;
        //================
        // Modifier keys
        //================
            case LEFT_SHIFT:   // left shift
            case RIGHT_SHIFT: // right shift
            case LEFT_CTRL:   // left ctrl
            case RIGHT_CTRL:  // right ctrl
            case LEFT_ALT:    // left alt
            case RIGHT_ALT:   // right alt
                break;
        //================
        // All other keys
        //================
            default: // all other codes
//====================================================================
                // This table translates the RDP scanodes to X11 scandodes :
                //  - the fist block (0-127) simply applies the +8 Windows to X11 translation and forces some 0 values
                //  - the second block (128-255) give codes for the extended keys that have a meaningful one
                uint8_t map[256] =  {
                    0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, // 0x00 - 0x07
                    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, // 0x08 - 0x0f
                    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, // 0x10 - 0x17
                    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, // 0x18 - 0x1f
                    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, // 0x20 - 0x27
                    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, // 0x28 - 0x2f
                    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, // 0x30 - 0x37
                    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, // 0x38 - 0x3f
                    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, // 0x40 - 0x47
                    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, // 0x48 - 0x4f
                    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, // 0x50 - 0x57
                    0x60, 0x61, 0x62, 0x00, 0x00, 0x00, 0x66, 0x67, // 0x58 - 0x5f
                    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, // 0x60 - 0x67
                    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, // 0x68 - 0x6f
                    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, // 0x70 - 0x77
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x78 - 0x7f

                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x80 - 0x87
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x88 - 0x8f
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x90 - 0x97
                    0x00, 0x00, 0x00, 0x00, 0x6c, 0x6d, 0x00, 0x00, // 0x98 - 0x9f
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xa0 - 0xa7
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xa8 - 0xaf
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x6f, // 0xb0 - 0xb7
                    0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xb8 - 0xbf
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, // 0xc0 - 0xc7
                    0x62, 0x63, 0x00, 0x64, 0x00, 0x66, 0x00, 0x67, // 0xc8 - 0xcf
                    0x68, 0x69, 0x6a, 0x6b, 0x00, 0x00, 0x00, 0x00, // 0xd0 - 0xd7
                    0x00, 0x00, 0x00, 0x73, 0x74, 0x75, 0x00, 0x00, // 0xd8 - 0xdf
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xe0 - 0xe7
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xe8 - 0xef
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xf0 - 0xf7
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // 0xf8 - 0xff
                } ;
                // if event is a Make
                if (this->keys_down[extendedKeyCode])
                {
                    const KeyLayout_t * layout = &keylayout_WORK_noshift_sym;
//                        this->last_char_key = extendedKeyCode;
                    //=========================================================================
                    // KEYPAD : Keypad keys whose meanings depends on Numlock are handled apart
                    //=========================================================================
                    if ( ( (extendedKeyCode >= 0x47) && (extendedKeyCode <= 0x49) )
                      || ( (extendedKeyCode >= 0x4b) && (extendedKeyCode <= 0x4d) )
                      || ( (extendedKeyCode >= 0x4f) && (extendedKeyCode <= 0x53) )
                       ){
                        // if numlock is activated, keys are printable characters (logical SHIFT mode)
                        if ((this->key_flags & NUMLOCK)) {
                            layout = &this->keylayout_WORK_shift_sym;
                            // Translate the scancode to an unicode char
                            uint8_t sym = map[extendedKeyCode];
//                            uint32_t uchar = (*layout)[sym];
//                           this->push(uchar);
                            uint32_t ksym = (*layout)[sym];
                            this->push_sym(ksym);
                        } // if numlock ON
                        // if numlock is not activated, keys are NOT printable characters (logical NO SHIFT mode)
                        else {
                            ;
                            switch (extendedKeyCode){
                               /* kEYPAD LEFT ARROW */
                                case 0x4b:
                                     this->push_sym(0xFF51);
                                    break;
                                /* kEYPAD UP ARROW */
                                case 0x48:
                                    this->push_sym(0xFF52);
                                    break;
                                /* kEYPAD RIGHT ARROW */
                                case 0x4d:
                                    this->push_sym(0xFF53);
                                    break;
                                /* kEYPAD DOWN ARROW */
                                case 0x50:
                                    this->push_sym(0xFF54);
                                    break;
                                /* kEYPAD HOME */
                                case 0x47:
                                    this->push_sym(0xFF50);
                                    break;
                                /* kEYPAD PGUP */
                                case 0x49:
                                    this->push_sym(0xFF55);
                                    break;
                                /* kEYPAD PGDOWN */
                                case 0x51:
                                    this->push_sym(0xFF56);
                                    break;
                                /* kEYPAD END */
                                case 0x4F:
                                    this->push_sym(0xFF57);
                                    break;
                                /* kEYPAD DELETE */
                                case 0x53:
                                    this->push_sym(0xFFFF);
                                default:
                                    break;
                            }

                        } // if numlock ON
                    }
                    else {
                    //========================================
                    // NOT KEYPAD Specific
                    //========================================
                        if (this->verbose){
                            LOG(LOG_INFO, "Key not from keypad: %#x", extendedKeyCode);
                        }
                        if (this->is_ctrl_pressed() && this->is_alt_pressed()){
                            layout = &this->keylayout_WORK_altgr_sym;
                        }
                        else if (this->is_shift_pressed() && this->is_caps_locked()){
                            layout = &this->keylayout_WORK_shiftcapslock_sym;
                        }
                        else if (this->is_shift_pressed()){
                            layout = &this->keylayout_WORK_shift_sym;
                        }
                        else if (this->is_caps_locked()) {
                            layout = &this->keylayout_WORK_capslock_sym;
                        }
                        // Translate the scancode to an unicode char
                        uint8_t sym = map[extendedKeyCode];
                        uint32_t ksym = (*layout)[sym];
                        if (this->verbose){
                            LOG(LOG_INFO, "ksym=%x", ksym);
                        }
                        //==============================================
                        // ksym is in Printable character range.
                        //==============================================
                        // That is :
                        //  * Not a dead key (0xxFE52 (^), 0xFE57 ("), 0x60 (`), 0x7E (~) )
                        if ((ksym != 0xFE52) && (ksym != 0xFE57) && (ksym != 0x60) && (ksym != 0x7E)){

                            // If previous key was a dead key, push a translated unicode char
                            if (this->dead_key != DEADKEY_NONE){
                                switch (dead_key){
                                    case DEADKEY_CIRC:
                                        switch (ksym){
                                            case 'a':
                                                this->push_sym(0xE2); // unicode for â (acirc)
                                                break;
                                            case 'A':
                                                this->push_sym(0xC2); // unicode for Â (Acirc)
                                                break;
                                            case 'e':
                                                this->push_sym(0xEA); // unicode for ê (ecirc)
                                                break;
                                            case 'E':
                                                this->push_sym(0xCA); // unicode for Ê (Ecirc)
                                                break;
                                            case 'i':
                                                this->push_sym(0xEE); // unicode for î (icirc)
                                                break;
                                            case 'I':
                                                this->push_sym(0xCE); // unicode for Î (Icirc)
                                                break;
                                            case 'o':
                                                this->push_sym(0xF4); // unicode for ô (ocirc)
                                                break;
                                            case 'O':
                                                this->push_sym(0xD4); // unicode for Ô (Ocirc)
                                                break;
                                            case 'u':
                                                this->push_sym(0xFB); // unicode for û (ucirc)
                                                break;
                                            case 'U':
                                                this->push_sym(0xDB); // unicode for Û (Ucirc)
                                                break;
                                            case ' ':
                                                this->push_sym(0x5E); // unicode for ^ (caret)
                                                break;
                                            default:
                                                this->push_sym(ksym); // unmodified unicode
                                                break;
                                        }
                                        break;

                                    case DEADKEY_UML:
                                        switch (ksym){
                                            case 'a':
                                                this->push_sym(0xE4); // unicode for ä (auml)
                                                break;
                                            case 'A':
                                                this->push_sym(0xC4); // unicode for Ä (Auml)
                                                break;
                                            case 'e':
                                                this->push_sym(0xEB); // unicode for ë (euml)
                                                break;
                                            case 'E':
                                                this->push_sym(0xCB); // unicode for Ë (Euml)
                                                break;
                                            case 'i':
                                                this->push_sym(0xEF); // unicode for ï (iuml)
                                                break;
                                            case 'I':
                                                this->push_sym(0xCF); // unicode for Ï (Iuml)
                                                break;
                                            case 'o':
                                                this->push_sym(0xF6); // unicode for ö (ouml)
                                                break;
                                            case 'O':
                                                this->push_sym(0xD6); // unicode for Ö (Ouml)
                                                break;
                                            case 'u':
                                                this->push_sym(0xFC); // unicode for ü (uuml)
                                                break;
                                            case 'U':
                                                this->push_sym(0xDC); // unicode for Ü (Uuml)
                                                break;
                                            case ' ':
                                                this->push_sym(0xA8); // unicode for " (umlaut)
                                                break;
                                            default:
                                                this->push_sym(ksym); // unmodified unicode
                                                break;
                                        }
                                        break;
                                    case DEADKEY_GRAVE:
                                        switch (ksym){
                                            case 'a':
                                                this->push_sym(0xE0); // unicode for à (agrave)
                                                break;
                                            case 'A':
                                                this->push_sym(0xC0); // unicode for À (Agrave)
                                                break;
                                            case 'e':
                                                this->push_sym(0xE8); // unicode for è (egrave)
                                                break;
                                            case 'E':
                                                this->push_sym(0xC8); // unicode for È (Egrave)
                                                break;
                                            case 'i':
                                                this->push_sym(0xEC); // unicode for ì (igrave)
                                                break;
                                            case 'I':
                                                this->push_sym(0xCC); // unicode for Ì (Igrave)
                                                break;
                                            case 'o':
                                                this->push_sym(0xF2); // unicode for ò (ograve)
                                                break;
                                            case 'O':
                                                this->push_sym(0xD2); // unicode for Ò (Ograve)
                                                break;
                                            case 'u':
                                                this->push_sym(0xF9); // unicode for ù (ugrave)
                                                break;
                                            case 'U':
                                                this->push_sym(0xD9); // unicode for Ù (Ugrave)
                                                break;
                                            case ' ':
                                                this->push_sym(0x60); // unicode for ` (backcote)
                                                break;
                                            default:
                                                this->push_sym(ksym); // unmodified unicode
                                                break;
                                        }
                                        break;
                                    case DEADKEY_TILDE:
                                        switch (ksym){
                                            case 'n':
                                                this->push_sym(0xF1); // unicode for ~n (ntilde)
                                                break;
                                            case 'N':
                                                this->push_sym(0xD1); // unicode for ~N (Ntilde)
                                                break;
                                            case ' ':
                                                this->push_sym(0x7E); // unicode for ~ (tilde)
                                                break;
                                            default:
                                                this->push_sym(ksym); // unmodified unicode
                                                break;
                                        }
                                        break;
                                    default:
                                        this->push_sym(ksym); // unmodified unicode
                                        break;
                                } // Switch DEAD_KEY
                                this->dead_key = DEADKEY_NONE;
                            } // Is a dead Key
                            else {
                                // If previous key wasn't a dead key, simply push
                                this->push_sym(ksym);
                            }
                        }
                        else {
                            //=================================================
                            // ksym is NOT in Printable unicode character range
                            //=================================================
                            switch (extendedKeyCode){
                                case 0x1A:
                                    this->is_shift_pressed() ? this->dead_key = DEADKEY_UML : this->dead_key = DEADKEY_CIRC;
                                    break;
                                case 0x08:
                                    this->dead_key = DEADKEY_GRAVE;
                                    break;
                                case 0x03:
                                    this->dead_key = DEADKEY_TILDE;
                                    break;
                                default:
                                    break;
                            } // Switch extendedKeyCode
                        } // END if PRINTABLE / else
                    } // END if KEYPAD specific / else
                } // END if Keydown
                else {
                }
            break;
        } // END SWITCH : ExtendedKeyCode

    } // END FUNCT : event


    // Push only sym
    void push_sym(uint32_t sym)
    {
        if (this->nbuf_sym < SIZE_KEYBUF_SYM){
            this->buffer_sym[this->ibuf_sym] = sym;
            this->ibuf_sym++;
            if (this->ibuf_sym >= SIZE_KEYBUF_SYM){
                this->ibuf_sym = 0;
            }
            this->nbuf_sym++;
        }
    }

    uint32_t get_sym()
    {
        if (this->nbuf_sym > 0){
            uint32_t res = this->buffer_sym[(SIZE_KEYBUF_SYM + this->ibuf_sym - this->nbuf_sym) % SIZE_KEYBUF_SYM];

            if (this->nbuf_sym > 0){
                this->nbuf_sym--;
            }
            return res;
        }
        return 0;
    }

    // head of keyboard buffer (or keyboard buffer of size 1)
    uint32_t top_sym() const
    {
        return this->buffer_sym[this->ibuf_sym?this->ibuf_sym-1:SIZE_KEYBUF_SYM-1];
    }

    uint32_t nb_sym_available() const
    {
        return this->nbuf_sym;
    }

    bool is_caps_locked() const
    {
        return this->key_flags & CAPSLOCK;
    }

    bool is_scroll_locked() const
    {
        return this->key_flags & SCROLLLOCK;
    }

    bool is_num_locked() const
    {
        return this->key_flags & NUMLOCK;
    }

    bool is_left_shift_pressed() const
    {
        return this->keys_down[LEFT_SHIFT];
    }

    bool is_right_shift_pressed() const
    {
        return this->keys_down[RIGHT_SHIFT];
    }

    bool is_shift_pressed() const
    {
        return this->is_left_shift_pressed() || this->is_right_shift_pressed();
    }

    bool is_left_ctrl_pressed() const
    {
        return this->keys_down[LEFT_CTRL];
    }

    bool is_right_ctrl_pressed() const
    {
        return this->keys_down[RIGHT_CTRL];
    }

    bool is_ctrl_pressed() const
    {
        return is_right_ctrl_pressed() || is_left_ctrl_pressed();
    }

    bool is_left_alt_pressed() const
    {
        return this->keys_down[LEFT_ALT];
    }

    bool is_right_alt_pressed() const // altgr
    {
        return this->keys_down[RIGHT_ALT];
    }

    bool is_alt_pressed() const
    {
        return is_right_alt_pressed() || is_left_alt_pressed();
    }


// ################################################################
    void init_layout_sym(int keyb)
    {
        // %s/^[^"]*"[^"]*"[^"]*"\([^:]*\):.*$/\1/

        // DEFAULT KEYMAP
        const KeyLayout_t DEFAULT_noshift_sym = {
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                0x37,    0x38,    0x39,    0x30,    0xdf,  0xfe51,  0xff08,  0xff09,
                0x71,    0x77,    0x65,    0x72,    0x74,    0x7a,    0x75,    0x69,
                0x6f,    0x70,    0xfc,    0x2b,  0xff0d,  0xffe3,    0x61,    0x73,
                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6,
                0xe4,  0xfe52,  0xffe1,    0x23,    0x79,    0x78,    0x63,    0x76,
                0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
        } ;

        const KeyLayout_t DEFAULT_shift_sym = {
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,  0xff1b,    0x21,    0x22,    0xa7,    0x24,    0x25,    0x26,
                0x2f,    0x28,    0x29,    0x3d,    0x3f,  0xfe50,  0xff08,  0xfe20,
                0x51,    0x57,    0x45,    0x52,    0x54,    0x5a,    0x55,    0x49,
                0x4f,    0x50,    0xdc,    0x2a,  0xff0d,  0xffe3,    0x41,    0x53,
                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd6,
                0xc4,    0xb0,  0xffe1,    0x27,    0x59,    0x58,    0x43,    0x56,
                0x42,    0x4e,    0x4d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8,
              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
        } ;

        const KeyLayout_t DEFAULT_altgr_sym = {
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,  0xff1b,    0xb9,    0xb2,    0xb3,    0xbc,    0xbd,    0xac,
                0x7b,    0x5b,    0x5d,    0x7d,    0x5c,  0xfe5b,  0xff08,  0xff09,
                0x40,   0x1b3,  0x20ac,    0xb6,   0x3bc,   0x8fb,   0x8fe,   0x8fd,
                0xf8,    0xfe,  0xfe57,  0xfe53,  0xff0d,  0xffe3,    0xe6,    0xdf,
                0xf0,   0x1f0,   0x3bf,   0x2b1,    0x6a,   0x3a2,   0x1b3,  0xfe59,
              0xfe52,    0xac,  0xffe1,  0xfe50,    0xab,    0xbb,    0xa2,   0xad2,
               0xad3,    0x6e,    0xb5,   0x8a3,    0xb7,  0xfe60,  0xffe2,  0xffaa,
              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
        } ;

        const KeyLayout_t DEFAULT_capslock_sym = {
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                0x37,    0x38,    0x39,    0x30,    0xdf,  0xfe51,  0xff08,  0xff09,
                0x51,    0x57,    0x45,    0x52,    0x54,    0x5a,    0x55,    0x49,
                0x4f,    0x50,    0xdc,    0x2b,  0xff0d,  0xffe3,    0x41,    0x53,
                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd6,
                0xc4,  0xfe52,  0xffe1,    0x23,    0x59,    0x58,    0x43,    0x56,
                0x42,    0x4e,    0x4d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
        } ;

        const KeyLayout_t DEFAULT_shiftcapslock_sym = {
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
        } ;

        // Intialize the WORK tables
        for(int i=0 ; i < 128 ; i++) {
            keylayout_WORK_noshift_sym[i] = DEFAULT_noshift_sym[i] ;
            keylayout_WORK_shift_sym[i] = DEFAULT_shift_sym[i] ;
            keylayout_WORK_altgr_sym[i] = DEFAULT_altgr_sym[i] ;
            keylayout_WORK_capslock_sym[i] = DEFAULT_capslock_sym[i] ;
            keylayout_WORK_shiftcapslock_sym[i] = DEFAULT_shiftcapslock_sym[i] ;
        }

        switch (keyb){

            case 0x0407: // GERMAN
            {
                    const KeyLayout_t x0407_noshift_sym = {
                                     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 00 - 07
                                     0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36, // 08 - 0F
                                    0x37,    0x38,    0x39,    0x30,    0xdf,  0xfe51,  0xff08,  0xff09, // 10 - 17
                                    0x71,    0x77,    0x65,    0x72,    0x74,    0x7a,    0x75,    0x69, // 18 - 1F
                                    0x6f,    0x70,    0xfc,    0x2b,  0xff0d,  0xffe3,    0x61,    0x73, // 20 - 27
                                    0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6, // 28 - 2F
                                    0xe4,  0xfe52,  0xffe1,    0x23,    0x79,    0x78,    0x63,    0x76, // 30 - 37
                                    0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa, // 38 - 3F
                                  0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2, // 40 - 47
                                  0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95, // 48 - 4F
                                  0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c, // 50 - 57
                                  0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8, // 58 - 5F
                                  0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57, // 60 - 67
                                  0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61, // 68 - 6F
                                  0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0, // 70 - 77
                                     0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0, // 78 - 7F
//                                     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 80 - 87
                    };
                    const KeyLayout_t x0407_shift_sym = {
                                     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 00 - 07
                                     0x0,  0xff1b,    0x21,    0x22,    0xa7,    0x24,    0x25,    0x26, // 08 - 0F
                                    0x2f,    0x28,    0x29,    0x3d,    0x3f,  0xfe50,  0xff08,  0xfe20, // 10 - 17
                                    0x51,    0x57,    0x45,    0x52,    0x54,    0x5a,    0x55,    0x49, // 18 - 1F
                                    0x4f,    0x50,    0xdc,    0x2a,  0xff0d,  0xffe3,    0x41,    0x53, // 20 - 27
                                    0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd6, // 28 - 2F
                                    0xc4,    0xb0,  0xffe1,    0x27,    0x59,    0x58,    0x43,    0x56, // 30 - 37
                                    0x42,    0x4e,    0x4d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa, // 38 - 3F
                                  0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2, // 40 - 47
                                  0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7, // 48 - 4F
                                  0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1, // 50 - 57
                                  0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8, // 58 - 5F
                                  0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57, // 60 - 67
                                  0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61, // 68 - 6F
                                  0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0, // 70 - 77
                                     0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb, // 78 - 7F
//                                  0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 80 - 87
                    };
                    const KeyLayout_t x0407_altgr_sym = {
                                     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 00 - 07
                                     0x0,  0xff1b,    0xb9,    0xb2,    0xb3,    0xbc,    0xbd,    0xac, // 08 - 0F
                                    0x7b,    0x5b,    0x5d,    0x7d,    0x5c,  0xfe5b,  0xff08,  0xff09, // 10 - 17
                                    0x40,   0x1b3,  0x20ac,    0xb6,   0x3bc,   0x8fb,   0x8fe,   0x8fd, // 18 - 1F
                                    0xf8,    0xfe,  0xfe57,  0xfe53,  0xff0d,  0xffe3,    0xe6,    0xdf, // 20 - 27
                                    0xf0,   0x1f0,   0x3bf,   0x2b1,    0x6a,   0x3a2,   0x1b3,  0xfe59, // 28 - 2F
                                  0xfe52,    0xac,  0xffe1,  0xfe50,    0xab,    0xbb,    0xa2,   0xad2, // 30 - 37
                                   0xad3,    0x6e,    0xb5,   0x8a3,    0xb7,  0xfe60,  0xffe2,  0xffaa, // 38 - 3F
                                  0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2, // 40 - 47
                                  0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95, // 48 - 4F
                                  0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c, // 50 - 57
                                  0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8, // 58 - 5F
                                  0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57, // 60 - 67
                                  0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0, // 68 - 6F
                                  0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0, // 70 - 77
                                     0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0, // 78 - 7F
//                                     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 80 - 87
                    };
                    const KeyLayout_t x0407_capslock_sym = {
                                     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 00 - 07
                                     0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36, // 08 - 0F
                                    0x37,    0x38,    0x39,    0x30,    0xdf,  0xfe51,  0xff08,  0xff09, // 10 - 17
                                    0x51,    0x57,    0x45,    0x52,    0x54,    0x5a,    0x55,    0x49, // 18 - 1F
                                    0x4f,    0x50,    0xdc,    0x2b,  0xff0d,  0xffe3,    0x41,    0x53, // 20 - 27
                                    0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd6, // 28 - 2F
                                    0xc4,  0xfe52,  0xffe1,    0x23,    0x59,    0x58,    0x43,    0x56, // 30 - 37
                                    0x42,    0x4e,    0x4d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa, // 38 - 3F
                                  0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2, // 40 - 47
                                  0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95, // 48 - 4F
                                  0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c, // 50 - 57
                                  0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8, // 58 - 5F
                                  0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57, // 60 - 67
                                  0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61, // 68 - 6F
                                  0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0, // 70 - 77
                                     0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0, // 78 - 7F
//                                     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 80 - 87
                    };
                    const KeyLayout_t x0407_shiftcapslock_sym = {
                                     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 00 - 07
                                     0x0,  0xff1b,    0x21,    0x22,    0xa7,    0x24,    0x25,    0x26, // 08 - 0F
                                    0x2f,    0x28,    0x29,    0x3d,    0x3f,  0xfe50,  0xff08,  0xfe20, // 10 - 17
                                    0x71,    0x77,    0x65,    0x72,    0x74,    0x7a,    0x75,    0x69, // 18 - 1F
                                    0x6f,    0x70,    0xfc,    0x2a,  0xff0d,  0xffe3,    0x61,    0x73, // 20 - 27
                                    0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6, // 28 - 2F
                                    0xe4,    0xb0,  0xffe1,    0x27,    0x79,    0x78,    0x63,    0x76, // 30 - 37
                                    0x62,    0x6e,    0x6d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa, // 38 - 3F
                                  0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2, // 40 - 47
                                  0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7, // 48 - 4F
                                  0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1, // 50 - 57
                                  0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8, // 58 - 5F
                                  0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57, // 60 - 67
                                  0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61, // 68 - 6F
                                  0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0, // 70 - 77
                                     0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb, // 78 - 7F
//                                  0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 80 - 87
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x0407_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x0407_noshift_sym[i] ;
                        }
                        if (x0407_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x0407_shift_sym[i] ;
                        }
                        if (x0407_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x0407_altgr_sym[i] ;
                        }
                        if (x0407_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x0407_capslock_sym[i] ;
                        }
                        if (x0407_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x0407_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x0409: // United States
            {
                    const KeyLayout_t x0409_noshift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2d,    0x3d,  0xff08,  0xff09,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,    0x5b,    0x5d,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x3b,
                                0x27,    0x60,  0xffe1,    0x5c,    0x7a,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2f,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffea,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0409_shift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x40,    0x23,    0x24,    0x25,    0x5e,
                                0x26,    0x2a,    0x28,    0x29,    0x5f,    0x2b,  0xff08,  0xfe20,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,    0x7b,    0x7d,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x3a,
                                0x22,    0x7e,  0xffe1,    0x7c,    0x5a,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x3c,    0x3e,    0x3f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffe8,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0409_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2d,    0x3d,  0xff08,  0xff09,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,    0x5b,    0x5d,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x3b,
                                0x27,    0x60,  0xffe1,    0x5c,    0x7a,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2f,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xffea,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0409_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2d,    0x3d,  0xff08,  0xff09,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,    0x5b,    0x5d,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x3b,
                                0x27,    0x60,  0xffe1,    0x5c,    0x5a,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x2c,    0x2e,    0x2f,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffea,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0409_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x40,    0x23,    0x24,    0x25,    0x5e,
                                0x26,    0x2a,    0x28,    0x29,    0x5f,    0x2b,  0xff08,  0xfe20,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,    0x7b,    0x7d,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x3a,
                                0x22,    0x7e,  0xffe1,    0x7c,    0x7a,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x3c,    0x3e,    0x3f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffe8,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x0409_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x0409_noshift_sym[i] ;
                        }
                        if (x0409_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x0409_shift_sym[i] ;
                        }
                        if (x0409_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x0409_altgr_sym[i] ;
                        }
                        if (x0409_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x0409_capslock_sym[i] ;
                        }
                        if (x0409_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x0409_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x040c: // French
            {
// +----+  +----+----+----+----+  +----+----+----+----+  +----+----+----+----+  +----+----+-------+
// | 01 |  | 3B | 3C | 3D | 3E |  | 3F | 40 | 41 | 42 |  | 43 | 44 | 57 | 58 |  | 37 | 46 | 1D+45 |
// +----+  +----+----+----+----+  +----+----+----+----+  +----+----+----+----+  +----+----+-------+
//                                     ***  keycodes suffixed by 'x' are extended ***
// +----+----+----+----+----+----+----+----+----+----+----+----+----+--------+  +----+----+----+  +--------------------+
// | 29 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 0A | 0B | 0C | 0D |   0E   |  | 52x| 47x| 49x|  | 45 | 35x| 37 | 4A  |
// +-------------------------------------------------------------------------+  +----+----+----+  +----+----+----+-----+
// |  0F  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 1A | 1B |      |  | 53x| 4Fx| 51x|  | 47 | 48 | 49 |     |
// +------------------------------------------------------------------+  1C  |  +----+----+----+  +----+----+----| 4E  |
// |  3A   | 1E | 1F | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 2B |     |                    | 4B | 4C | 4D |     |
// +-------------------------------------------------------------------------+       +----+       +----+----+----+-----+
// |  2A | 56 | 2C | 2D | 2E | 2F | 30 | 31 | 32 | 33 | 34 | 35 |     36     |       | 48x|       | 4F | 50 | 51 |     |
// +-------------------------------------------------------------------------+  +----+----+----+  +---------+----| 1Cx |
// |  1D  |  5Bx | 38 |           39           |  38x  |  5Cx |  5Dx |  1Dx  |  | 4Bx| 50x| 4Dx|  |    52   | 53 |     |
// +------+------+----+------------------------+-------+------+------+-------+  +----+----+----+  +---------+----+-----+

                    const KeyLayout_t x040c_noshift_sym = {
                                     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, // 00 - 07
                                     0x0,  0xff1b,    0x26,    0xe9,    0x22,    0x27,    0x28,    0x2d, // 08 - 0F
                                    0xe8,    0x5f,    0xe7,    0xe0,    0x29,    0x3d,  0xff08,  0xff09, // 10 - 17
                                    0x61,    0x7a,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69, // 18 - 1F
                                    0x6f,    0x70,  0xfe52,    0x24,  0xff0d,  0xffe3,    0x71,    0x73, // 20 - 27
                                    0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x6d, // 28 - 2F
                                    0xf9,    0xb2,  0xffe1,    0x2a,    0x77,    0x78,    0x63,    0x76, // 30 - 37
                                    0x62,    0x6e,    0x2c,    0x3b,    0x3a,    0x21,  0xffe2,  0xffaa, // 38 - 3F
                                  0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2, // 40 - 47
                                  0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95, // 48 - 4F
                                  0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c, // 50 - 57
                                  0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8, // 58 - 5F
                                  0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57, // 60 - 67
                                  0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61, // 68 - 6F
                                  0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0, // 70 - 77
                                     0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0, // 78 - 7F
                    };
                    const KeyLayout_t x040c_shift_sym = {
                                     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0, //
                                     0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                    0x37,    0x38,    0x39,    0x30,    0xb0,    0x2b,  0xff08,  0xfe20,
                                    0x41,    0x5a,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                    0x4f,    0x50,  0xfe57,    0xa3,  0xff0d,  0xffe3,    0x51,    0x53,
                                    0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x4d,
                                    0x25,    0x7e,  0xffe1,    0xb5,    0x57,    0x58,    0x43,    0x56,
                                    0x42,    0x4e,    0x3f,    0x2e,    0x2f,    0xa7,  0xffe2,  0xffaa,
                                  0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                                  0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                                  0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                                  0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                                  0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                                  0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                                  0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                     0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
                    };
                    const KeyLayout_t x040c_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x26,    0xc9,    0x22,    0x27,    0x28,    0x2d,
                                0xc8,    0x5f,    0xc7,    0xc0,    0x29,    0x3d,  0xff08,  0xff09,
                                0x41,    0x5a,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,  0xfe52,    0x24,  0xff0d,  0xffe3,    0x51,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x4d,
                                0xd9,    0xb2,  0xffe1,    0x2a,    0x57,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x2c,    0x3b,    0x3a,    0x21,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
                    };
                    const KeyLayout_t x040c_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0xb9,    0x7e,    0x23,    0x7b,    0x5b,    0x7c,
                                0x60,    0x5c,    0x5e,    0x40,    0x5d,    0x7d,  0xff08,  0xff09,
                                0xe6,    0xab,  0x20ac,    0xb6,   0x3bc,   0x8fb,   0x8fe,   0x8fd,
                                0xf8,    0xfe,  0xfe57,    0xa4,  0xff0d,  0xffe3,    0x40,    0xdf,
                                0xf0,   0x1f0,   0x3bf,   0x2b1,    0x6a,   0x3a2,   0x1b3,    0xb5,
                              0xfe52,    0xac,  0xffe1,  0xfe50,   0x1b3,    0xbb,    0xa2,   0xad2,
                               0xad3,    0x6e,  0xfe51,   0x8a3,    0xb7,  0xfe60,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
                    };
                    const KeyLayout_t x040c_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0xb0,    0x2b,  0xff08,  0xfe20,
                                0x61,    0x7a,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,  0xfe57,    0xa3,  0xff0d,  0xffe3,    0x71,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x6d,
                                0x25,    0x7e,  0xffe1,   0x39c,    0x77,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x3f,    0x2e,    0x2f,    0xa7,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x040c_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x040c_noshift_sym[i] ;
                        }
                        if (x040c_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x040c_shift_sym[i] ;
                        }
                        if (x040c_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x040c_altgr_sym[i] ;
                        }
                        if (x040c_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x040c_capslock_sym[i] ;
                        }
                        if (x040c_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x040c_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x0410: // Italian
            {
                    const KeyLayout_t x0410_noshift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x27,    0xec,  0xff08,  0xff09,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,    0xe8,    0x2b,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf2,
                                0xe0,    0x5c,  0xffe1,    0xf9,    0x7a,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0410_shift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x22,    0xa3,    0x24,    0x25,    0x26,
                                0x2f,    0x28,    0x29,    0x3d,    0x3f,    0x5e,  0xff08,  0xfe20,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,    0xe9,    0x2a,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xe7,
                                0xb0,    0x7c,  0xffe1,    0xa7,    0x5a,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0410_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0xb9,    0xb2,    0xb3,    0xbc,    0xbd,    0xac,
                                0x7b,    0x5b,    0x5d,    0x7d,    0x60,    0x7e,  0xff08,  0xff09,
                                0x40,   0x1b3,  0x20ac,    0xb6,   0x3bc,   0x8fb,   0x8fe,   0x8fd,
                                0xf8,    0xfe,    0x5b,    0x5d,  0xff0d,  0xffe3,    0xe6,    0xdf,
                                0xf0,   0x1f0,   0x3bf,   0x2b1,    0x6a,   0x3a2,   0x1b3,    0x40,
                                0x23,    0xac,  0xffe1,  0xfe50,    0xab,    0xbb,    0xa2,   0xad2,
                               0xad3,    0xf1,    0xb5,  0xfe51,    0xb7,  0xfe54,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0xab,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0410_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x27,    0xcc,  0xff08,  0xff09,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,    0xc8,    0x2b,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd2,
                                0xc0,    0x5c,  0xffe1,    0xd9,    0x5a,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0410_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x22,    0xa3,    0x24,    0x25,    0x26,
                                0x2f,    0x28,    0x29,    0x3d,    0x3f,    0x5e,  0xff08,  0xfe20,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,    0xc9,    0x2a,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xc7,
                                0xb0,    0x7c,  0xffe1,    0xa7,    0x7a,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x0410_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x0410_noshift_sym[i] ;
                        }
                        if (x0410_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x0410_shift_sym[i] ;
                        }
                        if (x0410_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x0410_altgr_sym[i] ;
                        }
                        if (x0410_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x0410_capslock_sym[i] ;
                        }
                        if (x0410_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x0410_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x0419: // Russian
            {
                    const KeyLayout_t x0419_noshift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2d,    0x3d,  0xff08,  0xff09,
                               0x6ca,   0x6c3,   0x6d5,   0x6cb,   0x6c5,   0x6ce,   0x6c7,   0x6db,
                               0x6dd,   0x6da,   0x6c8,   0x6df,  0xff0d,  0xffe3,   0x6c6,   0x6d9,
                               0x6d7,   0x6c1,   0x6d0,   0x6d2,   0x6cf,   0x6cc,   0x6c4,   0x6d6,
                               0x6dc,   0x6a3,  0xffe1,    0x5c,   0x6d1,   0x6de,   0x6d3,   0x6cd,
                               0x6c9,   0x6d4,   0x6d8,   0x6c2,   0x6c0,    0x2f,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x2f,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffea,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0419_shift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x22,    0x23,    0x2a,    0x3a,    0x2c,
                                0x2e,    0x3b,    0x28,    0x29,    0x5f,    0x2b,  0xff08,  0xfe20,
                               0x6ea,   0x6e3,   0x6f5,   0x6eb,   0x6e5,   0x6ee,   0x6e7,   0x6fb,
                               0x6fd,   0x6fa,   0x6e8,   0x6ff,  0xff0d,  0xffe3,   0x6e6,   0x6f9,
                               0x6f7,   0x6e1,   0x6f0,   0x6f2,   0x6ef,   0x6ec,   0x6e4,   0x6f6,
                               0x6fc,   0x6b3,  0xffe1,    0x7c,   0x6f1,   0x6fe,   0x6f3,   0x6ed,
                               0x6e9,   0x6f4,   0x6f8,   0x6e2,   0x6e0,    0x3f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffe8,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0419_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2d,    0x3d,  0xff08,  0xff09,
                               0x6ca,   0x6c3,   0x6d5,   0x6cb,   0x6c5,   0x6ce,   0x6c7,   0x6db,
                               0x6dd,   0x6da,   0x6c8,   0x6df,  0xff0d,  0xffe3,   0x6c6,   0x6d9,
                               0x6d7,   0x6c1,   0x6d0,   0x6d2,   0x6cf,   0x6cc,   0x6c4,   0x6d6,
                               0x6dc,   0x6a3,  0xffe1,    0x5c,   0x6d1,   0x6de,   0x6d3,   0x6cd,
                               0x6c9,   0x6d4,   0x6d8,   0x6c2,   0x6c0,    0x2f,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xffea,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0419_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2d,    0x3d,  0xff08,  0xff09,
                               0x6ea,   0x6e3,   0x6f5,   0x6eb,   0x6e5,   0x6ee,   0x6e7,   0x6fb,
                               0x6fd,   0x6fa,   0x6e8,   0x6ff,  0xff0d,  0xffe3,   0x6e6,   0x6f9,
                               0x6f7,   0x6e1,   0x6f0,   0x6f2,   0x6ef,   0x6ec,   0x6e4,   0x6f6,
                               0x6fc,   0x6b3,  0xffe1,    0x5c,   0x6f1,   0x6fe,   0x6f3,   0x6ed,
                               0x6e9,   0x6f4,   0x6f8,   0x6e2,   0x6e0,    0x2f,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x2f,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffea,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0419_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x22,    0x23,    0x2a,    0x3a,    0x2c,
                                0x2e,    0x3b,    0x28,    0x29,    0x5f,    0x2b,  0xff08,  0xfe20,
                               0x6ca,   0x6c3,   0x6d5,   0x6cb,   0x6c5,   0x6ce,   0x6c7,   0x6db,
                               0x6dd,   0x6da,   0x6c8,   0x6df,  0xff0d,  0xffe3,   0x6c6,   0x6d9,
                               0x6d7,   0x6c1,   0x6d0,   0x6d2,   0x6cf,   0x6cc,   0x6c4,   0x6d6,
                               0x6dc,   0x6a3,  0xffe1,    0x7c,   0x6d1,   0x6de,   0x6d3,   0x6cd,
                               0x6c9,   0x6d4,   0x6d8,   0x6c2,   0x6c0,    0x3f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffe8,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x0419_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x0419_noshift_sym[i] ;
                        }
                        if (x0419_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x0419_shift_sym[i] ;
                        }
                        if (x0419_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x0419_altgr_sym[i] ;
                        }
                        if (x0419_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x0419_capslock_sym[i] ;
                        }
                        if (x0419_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x0419_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x041d: // Swedish
            {
                    const KeyLayout_t x041d_noshift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2b,  0xfe51,  0xff08,  0xff09,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,    0xe5,  0xfe57,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6,
                                0xe4,    0xa7,  0xffe1,    0x27,    0x7a,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x041d_shift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x22,    0x23,    0xa4,    0x25,    0x26,
                                0x2f,    0x28,    0x29,    0x3d,    0x3f,  0xfe50,  0xff08,  0xfe20,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,    0xc5,  0xfe52,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd6,
                                0xc4,    0xbd,  0xffe1,    0x2a,    0x5a,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x041d_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0xa1,    0x40,    0xa3,    0x24,  0x20ac,    0xa5,
                                0x7b,    0x5b,    0x5d,    0x7d,    0x5c,    0xb1,  0xff08,  0xff09,
                                0x40,   0x1b3,  0x20ac,    0xae,    0xfe,   0x8fb,   0x8fe,   0x8fd,
                              0x13bd,    0xfe,  0xfe57,  0xfe53,  0xff0d,  0xffe3,    0xaa,    0xdf,
                                0xf0,   0x1f0,   0x3bf,   0x2b1,    0x6a,   0x3a2,   0x1b3,    0xf8,
                                0xe6,    0xb6,  0xffe1,    0xb4,    0xab,    0xbb,    0xa9,   0xad2,
                               0xad3,    0x6e,    0xb5,  0xfe5b,    0xb7,  0xfe60,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x041d_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2b,  0xfe51,  0xff08,  0xff09,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,    0xc5,  0xfe57,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd6,
                                0xc4,    0xa7,  0xffe1,    0x27,    0x5a,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x041d_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x22,    0x23,    0xa4,    0x25,    0x26,
                                0x2f,    0x28,    0x29,    0x3d,    0x3f,  0xfe50,  0xff08,  0xfe20,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,    0xe5,  0xfe52,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6,
                                0xe4,    0xbd,  0xffe1,    0x2a,    0x7a,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x041d_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x041d_noshift_sym[i] ;
                        }
                        if (x041d_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x041d_shift_sym[i] ;
                        }
                        if (x041d_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x041d_altgr_sym[i] ;
                        }
                        if (x041d_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x041d_capslock_sym[i] ;
                        }
                        if (x041d_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x041d_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x046e: // Luxemburgish
            {
                    const KeyLayout_t x046e_noshift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x27,    0x5e,  0xff08,  0xff09,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x7a,    0x75,    0x69,
                                0x6f,    0x70,    0x5b,    0x5d,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6,
                                0xe4,    0x5f,  0xffe1,    0x24,    0x79,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x046e_shift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x2b,    0x22,    0x2a,     0x0,    0x25,    0x26,
                                0x2f,    0x28,    0x29,    0x3d,    0x3f,    0x60,  0xff08,  0xfe20,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x5a,    0x55,    0x49,
                                0x4f,    0x50,    0x7b,    0x21,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x3a,
                                0x22,     0x0,     0x0,    0x23,    0x5a,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x046e_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x7e,    0x23,    0x7b,    0x5b,    0x7c,    0x60,
                                0x5c,    0x5e,    0x40,    0x5d,    0x7d,    0x3d,  0xff08,  0xff09,
                                0x40,   0x1b3,  0x20ac,    0xb6,   0x3bc,   0x8fb,   0x8fe,   0x8fd,
                                0xf8,    0xfe,  0xfe57,  0xfe53,  0xff0d,  0xffe3,    0xe6,    0xdf,
                                0xf0,   0x1f0,   0x3bf,   0x2b1,    0x6a,   0x3a2,   0x1b3,  0xfe59,
                              0xfe52,    0xac,  0xffe1,    0x5c,    0xab,    0xbb,    0xa2,   0xad2,
                               0xad3,    0x6e,    0xb5,   0x8a3,    0xb7,  0xfe60,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x046e_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0xdf,  0xfe51,  0xff08,  0xff09,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x5a,    0x55,    0x49,
                                0x4f,    0x50,    0xdc,    0x2b,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd6,
                                0xc4,  0xfe52,  0xffe1,    0x23,    0x59,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x046e_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x22,    0xa7,    0x24,    0x25,    0x26,
                                0x2f,    0x28,    0x29,    0x3d,    0x3f,  0xfe50,  0xff08,  0xfe20,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x7a,    0x75,    0x69,
                                0x6f,    0x70,    0xfc,    0x2a,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6,
                                0xe4,    0xb0,  0xffe1,    0x27,    0x79,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x046e_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x046e_noshift_sym[i] ;
                        }
                        if (x046e_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x046e_shift_sym[i] ;
                        }
                        if (x046e_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x046e_altgr_sym[i] ;
                        }
                        if (x046e_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x046e_capslock_sym[i] ;
                        }
                        if (x046e_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x046e_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x0807: // German Swizerland
            {
                    const KeyLayout_t x0807_noshift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0xdf,  0xfe51,  0xff08,  0xff09,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x7a,    0x75,    0x69,
                                0x6f,    0x70,    0xfc,    0x2b,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6,
                                0xe4,  0xfe52,  0xffe1,    0x23,    0x79,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0807_shift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x22,    0xa7,    0x24,    0x25,    0x26,
                                0x2f,    0x28,    0x29,    0x3d,    0x3f,  0xfe50,  0xff08,  0xfe20,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x5a,    0x55,    0x49,
                                0x4f,    0x50,    0xdc,    0x2a,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd6,
                                0xc4,    0xb0,  0xffe1,    0x27,    0x59,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0807_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x7c,    0x40,    0x23,     0x0,     0x0,     0x0,
                                0x7c,     0x0,     0x0,    0x5d,    0x60,    0x7e,  0xff08,  0xff09,
                                0x40,   0x1b3,  0x20ac,    0xb6,   0x3bc,   0x8fb,   0x8fe,   0x8fd,
                                0x5b,    0x5b,    0x5b,    0x5d,  0xff0d,  0xffe3,    0xe6,    0xdf,
                                0xf0,   0x1f0,   0x3bf,   0x2b1,    0x6a,   0x3a2,   0x1b3,  0xfe59,
                                0x7b,    0xac,  0xffe1,    0x7d,    0xab,    0xbb,    0xa2,   0xad2,
                               0xad3,    0x6e,    0xb5,   0x8a3,    0xb7,  0xfe60,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0807_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0xdf,  0xfe51,  0xff08,  0xff09,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x5a,    0x55,    0x49,
                                0x4f,    0x50,    0xdc,    0x2b,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd6,
                                0xc4,  0xfe52,  0xffe1,    0x23,    0x59,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0807_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x22,    0xa7,    0x24,    0x25,    0x26,
                                0x2f,    0x28,    0x29,    0x3d,    0x3f,  0xfe50,  0xff08,  0xfe20,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x7a,    0x75,    0x69,
                                0x6f,    0x70,    0xfc,    0x2a,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6,
                                0xe4,    0xb0,  0xffe1,    0x27,    0x79,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x0807_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x0807_noshift_sym[i] ;
                        }
                        if (x0807_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x0807_shift_sym[i] ;
                        }
                        if (x0807_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x0807_altgr_sym[i] ;
                        }
                        if (x0807_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x0807_capslock_sym[i] ;
                        }
                        if (x0807_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x0807_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x0809: // English UK
            {
                    const KeyLayout_t x0809_noshift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2d,    0x3d,  0xff08,  0xff09,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,    0x5b,    0x5d,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x3b,
                                0x27,    0x60,  0xffe1,    0x5c,    0x7a,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2f,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffea,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0809_shift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x40,    0x23,    0x24,    0x25,    0x5e,
                                0x26,    0x2a,    0x28,    0x29,    0x5f,    0x2b,  0xff08,  0xfe20,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,    0x7b,    0x7d,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x3a,
                                0x22,    0x7e,  0xffe1,    0x7c,    0x5a,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x3c,    0x3e,    0x3f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffe8,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0809_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2d,    0x3d,  0xff08,  0xff09,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,    0x5b,    0x5d,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x3b,
                                0x27,    0x60,  0xffe1,    0x5c,    0x7a,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2f,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xffea,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0809_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x2d,    0x3d,  0xff08,  0xff09,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,    0x5b,    0x5d,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x3b,
                                0x27,    0x60,  0xffe1,    0x5c,    0x5a,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x2c,    0x2e,    0x2f,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffea,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0809_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x40,    0x23,    0x24,    0x25,    0x5e,
                                0x26,    0x2a,    0x28,    0x29,    0x5f,    0x2b,  0xff08,  0xfe20,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,    0x7b,    0x7d,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x3a,
                                0x22,    0x7e,  0xffe1,    0x7c,    0x7a,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x3c,    0x3e,    0x3f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xffe8,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x0809_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x0809_noshift_sym[i] ;
                        }
                        if (x0809_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x0809_shift_sym[i] ;
                        }
                        if (x0809_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x0809_altgr_sym[i] ;
                        }
                        if (x0809_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x0809_capslock_sym[i] ;
                        }
                        if (x0809_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x0809_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x080c: // French Belgium
            {
                    const KeyLayout_t x080c_noshift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x26,    0xe9,    0x22,    0x27,    0x28,    0x2d,
                                0xe8,    0x5f,    0xe7,    0xe0,    0x29,    0x3d,  0xff08,  0xff09,
                                0x61,    0x7a,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,  0xfe52,    0x24,  0xff0d,  0xffe3,    0x71,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x6d,
                                0xf9,    0xb2,  0xffe1,    0x2a,    0x77,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x2c,    0x3b,    0x3a,    0x21,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x080c_shift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0xb0,    0x2b,  0xff08,  0xfe20,
                                0x41,    0x5a,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,  0xfe57,    0xa3,  0xff0d,  0xffe3,    0x51,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x4d,
                                0x25,    0x7e,  0xffe1,    0xb5,    0x57,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x3f,    0x2e,    0x2f,    0xa7,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x080c_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0xb9,    0x7e,    0x23,    0x7b,    0x5b,    0x7c,
                                0x60,    0x5c,    0x5e,    0x40,    0x5d,    0x7d,  0xff08,  0xff09,
                                0xe6,    0xab,  0x20ac,    0xb6,   0x3bc,   0x8fb,   0x8fe,   0x8fd,
                                0xf8,    0xfe,  0xfe57,    0xa4,  0xff0d,  0xffe3,    0x40,    0xdf,
                                0xf0,   0x1f0,   0x3bf,   0x2b1,    0x6a,   0x3a2,   0x1b3,    0xb5,
                              0xfe52,    0xac,  0xffe1,  0xfe50,   0x1b3,    0xbb,    0xa2,   0xad2,
                               0xad3,    0x6e,  0xfe51,   0x8a3,    0xb7,  0xfe60,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x080c_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x26,    0xc9,    0x22,    0x27,    0x28,    0x2d,
                                0xc8,    0x5f,    0xc7,    0xc0,    0x29,    0x3d,  0xff08,  0xff09,
                                0x41,    0x5a,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,  0xfe52,    0x24,  0xff0d,  0xffe3,    0x51,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x4d,
                                0xd9,    0xb2,  0xffe1,    0x2a,    0x57,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x2c,    0x3b,    0x3a,    0x21,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x080c_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0xb0,    0x2b,  0xff08,  0xfe20,
                                0x61,    0x7a,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,  0xfe57,    0xa3,  0xff0d,  0xffe3,    0x71,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x6d,
                                0x25,    0x7e,  0xffe1,   0x39c,    0x77,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x3f,    0x2e,    0x2f,    0xa7,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x080c_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x080c_noshift_sym[i] ;
                        }
                        if (x080c_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x080c_shift_sym[i] ;
                        }
                        if (x080c_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x080c_altgr_sym[i] ;
                        }
                        if (x080c_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x080c_capslock_sym[i] ;
                        }
                        if (x080c_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x080c_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x0813: // Dutch Belgium
            {
                    const KeyLayout_t x0813_noshift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x26,    0xe9,    0x22,    0x27,    0x28,    0x2d,
                                0xe8,    0x21,    0xe7,    0xe0,    0x29,    0x2d,  0xff08,  0xff09,
                                0x61,    0x7a,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,  0xfe52,    0x24,  0xff0d,  0xffe3,    0x71,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x6d,
                                0xf9,    0xb2,  0xffe1,    0x2a,    0x77,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x2c,    0x3b,    0x3a,    0x3d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0813_shift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0xb0,    0x5f,  0xff08,  0xfe20,
                                0x41,    0x5a,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,  0xfe57,    0xa3,  0xff0d,  0xffe3,    0x51,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x4d,
                                0x25,    0x7e,  0xffe1,    0xb5,    0x57,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x3f,    0x2e,    0x2f,    0x2b,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0813_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0xb9,    0x40,    0x23,    0x7b,    0x5b,    0x5e,
                                 0x0,     0x0,    0x7b,    0x7d,     0x0,     0x0,  0xff08,  0xff09,
                                0xe6,    0xab,  0x20ac,    0xb6,   0x3bc,   0x8fb,   0x8fe,   0x8fd,
                                0xf8,    0xfe,    0x5b,    0x5d,  0xff0d,  0xffe3,    0x40,    0xdf,
                                0xf0,   0x1f0,   0x3bf,   0x2b1,    0x6a,   0x3a2,   0x1b3,    0xb5,
                                0x27,    0x60,  0xffe1,  0xfe50,   0x1b3,    0xbb,    0xa2,   0xad2,
                               0xad3,    0x6e,  0xfe51,   0x8a3,    0xb7,    0x7e,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0813_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x26,    0xc9,    0x22,    0x27,    0x28,    0x2d,
                                0xc8,    0x5f,    0xc7,    0xc0,    0x29,    0x3d,  0xff08,  0xff09,
                                0x41,    0x5a,    0x45,    0x52,    0x54,    0x59,    0x55,    0x49,
                                0x4f,    0x50,  0xfe52,    0x24,  0xff0d,  0xffe3,    0x51,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x4d,
                                0xd9,    0xb2,  0xffe1,    0x2a,    0x57,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x2c,    0x3b,    0x3a,    0x21,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x0813_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0xb0,    0x2b,  0xff08,  0xfe20,
                                0x61,    0x7a,    0x65,    0x72,    0x74,    0x79,    0x75,    0x69,
                                0x6f,    0x70,  0xfe57,    0xa3,  0xff0d,  0xffe3,    0x71,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0x6d,
                                0x25,    0x7e,  0xffe1,   0x39c,    0x77,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x3f,    0x2e,    0x2f,    0xa7,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffae,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x0813_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x0813_noshift_sym[i] ;
                        }
                        if (x0813_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x0813_shift_sym[i] ;
                        }
                        if (x0813_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x0813_altgr_sym[i] ;
                        }
                        if (x0813_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x0813_capslock_sym[i] ;
                        }
                        if (x0813_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x0813_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            case 0x100c: // French Swizerland
            {
                    const KeyLayout_t x100c_noshift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0x27,    0x3d,  0xff08,  0xff09,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x7a,    0x75,    0x69,
                                0x6f,    0x70,    0x5b,    0x5d,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6,
                                0xe4,    0x5f,  0xffe1,    0x24,    0x79,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x100c_shift_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x2b,    0x22,    0x2a,     0x0,    0x25,    0x26,
                                0x2f,    0x28,    0x29,    0x3d,    0x3f,  0xfe50,  0xff08,  0xfe20,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x5a,    0x55,    0x49,
                                0x4f,    0x50,    0x7b,    0x21,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0x3a,
                                0x22,     0x0,     0x0,    0x23,    0x5a,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x100c_altgr_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x7c,    0x40,    0x23,     0x0,     0x0,     0x0,
                                 0x0,    0x7c,     0x0,    0x5d,    0x60,    0x7e,  0xff08,  0xff09,
                                0x40,   0x1b3,  0x20ac,    0xb6,   0x3bc,   0x8fb,   0x8fe,   0x8fd,
                                 0x0,     0x0,    0x5b,    0x5d,  0xff0d,  0xffe3,    0xe6,    0xdf,
                                0xf0,   0x1f0,   0x3bf,   0x2b1,    0x6a,   0x3a2,   0x1b3,  0xfe59,
                                0x7b,    0xac,  0xffe1,    0x7d,    0xab,    0xbb,    0xa2,   0xad2,
                               0xad3,    0x6e,    0xb5,   0x8a3,    0xb7,  0xfe60,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x7c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,     0x0,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x100c_capslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x31,    0x32,    0x33,    0x34,    0x35,    0x36,
                                0x37,    0x38,    0x39,    0x30,    0xdf,  0xfe51,  0xff08,  0xff09,
                                0x51,    0x57,    0x45,    0x52,    0x54,    0x5a,    0x55,    0x49,
                                0x4f,    0x50,    0xdc,    0x2b,  0xff0d,  0xffe3,    0x41,    0x53,
                                0x44,    0x46,    0x47,    0x48,    0x4a,    0x4b,    0x4c,    0xd6,
                                0xc4,  0xfe52,  0xffe1,    0x23,    0x59,    0x58,    0x43,    0x56,
                                0x42,    0x4e,    0x4d,    0x2c,    0x2e,    0x2d,  0xffe2,  0xffaa,
                              0xffe9,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xff7f,  0xff14,  0xff95,
                              0xff97,  0xff9a,  0xffad,  0xff96,  0xff9d,  0xff98,  0xffab,  0xff9c,
                              0xff99,  0xff9b,  0xff9e,  0xff9f,     0x0,  0xff7e,    0x3c,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,     0x0,  0xffbd,     0x0,
//                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };
                    const KeyLayout_t x100c_shiftcapslock_sym = {
                                 0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                                 0x0,  0xff1b,    0x21,    0x22,    0xa7,    0x24,    0x25,    0x26,
                                0x2f,    0x28,    0x29,    0x3d,    0x3f,  0xfe50,  0xff08,  0xfe20,
                                0x71,    0x77,    0x65,    0x72,    0x74,    0x7a,    0x75,    0x69,
                                0x6f,    0x70,    0xfc,    0x2a,  0xff0d,  0xffe3,    0x61,    0x73,
                                0x64,    0x66,    0x67,    0x68,    0x6a,    0x6b,    0x6c,    0xf6,
                                0xe4,    0xb0,  0xffe1,    0x27,    0x79,    0x78,    0x63,    0x76,
                                0x62,    0x6e,    0x6d,    0x3b,    0x3a,    0x5f,  0xffe2,  0xffaa,
                              0xffe7,    0x20,  0xffe5,  0xffbe,  0xffbf,  0xffc0,  0xffc1,  0xffc2,
                              0xffc3,  0xffc4,  0xffc5,  0xffc6,  0xffc7,  0xfef9,  0xff14,  0xffb7,
                              0xffb8,  0xffb9,  0xffad,  0xffb4,  0xffb5,  0xffb6,  0xffab,  0xffb1,
                              0xffb2,  0xffb3,  0xffb0,  0xffac,     0x0,  0xff7e,    0x3e,  0xffc8,
                              0xffc9,  0xff50,  0xff52,  0xff55,  0xff51,     0x0,  0xff53,  0xff57,
                              0xff54,  0xff56,  0xff63,  0xffff,  0xff8d,  0xffe4,  0xff13,  0xff61,
                              0xffaf,  0xfe03,     0x0,  0xffeb,  0xffec,  0xff67,     0x0,     0x0,
                                 0x0,     0x0,     0x0,     0x0,  0xfe03,  0xffe9,  0xffbd,  0xffeb,
//                              0xffed,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,     0x0,
                    };

                    for(size_t i = 0 ; i < 128 ; i++) {
                        if (x100c_noshift_sym[i]){
                            keylayout_WORK_noshift_sym[i] = x100c_noshift_sym[i] ;
                        }
                        if (x100c_shift_sym[i]){
                            keylayout_WORK_shift_sym[i] = x100c_shift_sym[i] ;
                        }
                        if (x100c_altgr_sym[i]){
                            keylayout_WORK_altgr_sym[i] = x100c_altgr_sym[i] ;
                        }
                        if (x100c_capslock_sym[i]){
                            keylayout_WORK_capslock_sym[i] = x100c_capslock_sym[i] ;
                        }
                        if (x100c_shiftcapslock_sym[i]){
                            keylayout_WORK_shiftcapslock_sym[i] = x100c_shiftcapslock_sym[i] ;
                        }
                    }
                }
                break;

            default:
                break;
        }

    } // KeymapSym::init_layout

};


#endif
