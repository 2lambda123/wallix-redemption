#if !defined(__KEYMAP__)
#define __KEYMAP__

#include <stdio.h>
#include "constants.hpp"
#include <string.h>
#include <string>

using namespace std;

//##############################################################################
struct Keymap2 {
//##############################################################################

    enum {
           KBDFLAGS_EXTENDED = 0x0100
         , KBDFLAGS_DOWN     = 0x4000
         , KBDFLAGS_RELEASE  = 0x8000
         };

    enum {
           SCROLLLOCK  = 0x01
         , NUMLOCK     = 0x02
         , CAPSLOCK    = 0x04
         , FLG_SHIFT   = 0x08
         , FLG_CTRL    = 0x10
         , FLG_ALT     = 0x20
         , FLG_WINDOWS = 0x40
         , FLG_ALTGR   = 0x80
    };

    enum {
           LEFT_SHIFT  = 0x36
         , RIGHT_SHIFT = 0x2A
         , LEFT_CTRL   = 0x1D
         , RIGHT_CTRL  = 0x9D
         , LEFT_ALT    = 0x38
         , RIGHT_ALT   = 0xB8
    };

    // keyboard info
    int keys_down[256];  // key states 0 up 1 down (0..127 plain keys, 128..255 extended keys)

    int key_flags;          // scroll_lock = 1, num_lock = 2, caps_lock = 4,
                            // shift = 8, ctrl = 16, Alt = 32,
                            // Windows = 64, AltGr = 128

    enum {
        SIZE_KEYBUF = 20
    };

    enum {
        SIZE_KEYBUF_KEVENT = 20
    };

    enum {
          KEVENT_KEY = 0x01
        , KEVENT_TAB = 0x02
        , KEVENT_BACKTAB = 0x3
        , KEVENT_ENTER = 0x04
        , KEVENT_ESC = 0x05
        , KEVENT_DELETE = 0x06
        , KEVENT_BACKSPACE = 0x07
        , KEVENT_LEFT_ARROW = 0x08
        , KEVENT_RIGHT_ARROW = 0x09
        , KEVENT_UP_ARROW = 0x0A
        , KEVENT_DOWN_ARROW = 0x0B
        , KEVENT_HOME = 0x0C
        , KEVENT_END = 0x0D
        , KEVENT_PGUP = 0x0E
        , KEVENT_PGDOWN = 0x0F
    };

    uint32_t ibuf; // first free position in char buffer
    uint32_t nbuf; // number of char in char buffer
    uint32_t buffer[SIZE_KEYBUF]; // actual char buffer

    uint32_t ibuf_kevent; // first free position
    uint32_t nbuf_kevent; // number of char in char buffer
    uint32_t buffer_kevent[SIZE_KEYBUF_KEVENT]; // actual char buffer

    uint32_t last_char_key;

    int last_chr_unicode;

    typedef int KeyLayout_t[128];

    // keylayout working tables (X11 mode : begins in 8e position.)
    KeyLayout_t keylayout_WORK_noshift;
    KeyLayout_t keylayout_WORK_shift;
    KeyLayout_t keylayout_WORK_altgr;
    KeyLayout_t keylayout_WORK_capslock;
    KeyLayout_t keylayout_WORK_shiftcapslock;

    uint8_t dead_key;

    enum {
          DEADKEY_NONE
        , DEADKEY_CIRC
        , DEADKEY_UML
        , DEADKEY_GRAVE
        , DEADKEY_ACUTE
        , DEADKEY_TILDE
    };

    enum {
          MAX_DEADKEYS = 5
        , MAX_SECOND_KEYS = 15
    };

    typedef struct dkk {    // Struture holding :
        uint8_t secondKey;    // an unicode code point (the second key that comes after a deadkey)
        uint8_t modifiedKey;  // the new unicode code point composed of the one above and the deadkey
    } dkey_key_t;

    typedef struct dk { // Struture holding a deadkey and the rules to apply to available second keys.
         uint32_t   uchar;                            // unicode code point
         uint8_t    extendedKeyCode;                  // scancode + extended bit
         uint8_t    deadKeyTag;                       // Deadkey tag from enum above
         uint8_t    nbSecondKeys;                     // number of second keys available for that deadkey
         dkey_key_t secondKeys[MAX_SECOND_KEYS];      // couples second key/modified key
    } dkey_t;

    dkey_t keylayout_WORK_deadkeys[5];

    uint32_t verbose;

    // constructor
    //==============================================================================
    Keymap2(uint32_t verbose = 0)
        : ibuf(0)
        , nbuf(0)
        , ibuf_kevent(0)
        , nbuf_kevent(0)
        , dead_key(DEADKEY_NONE)
        , verbose(verbose) {
    //==============================================================================

        memset(this->keys_down, 0, 256 * sizeof(int));
        memset(this->keys_down, 0, SIZE_KEYBUF * sizeof(uint32_t));

        memset(&this->keylayout_WORK_noshift,       0, 128 * sizeof(int));
        memset(&this->keylayout_WORK_shift,         0, 128 * sizeof(int));
        memset(&this->keylayout_WORK_altgr,         0, 128 * sizeof(int));
        memset(&this->keylayout_WORK_capslock,      0, 128 * sizeof(int));
        memset(&this->keylayout_WORK_shiftcapslock, 0, 128 * sizeof(int));
        memset(&this->keylayout_WORK_deadkeys, 0, sizeof(this->keylayout_WORK_deadkeys));

        this->key_flags = 0;
        this->last_chr_unicode = 0;

    } // END CONSTRUCTOR

    //==============================================================================
    void synchronize(uint16_t param1){
    //==============================================================================
        this->key_flags = param1 & 0x07;
        // non sticky keys are forced to be UP
        this->keys_down[LEFT_SHIFT] = 0;
        this->keys_down[RIGHT_SHIFT] = 0;
        this->keys_down[LEFT_CTRL] = 0;
        this->keys_down[RIGHT_CTRL] = 0;
        this->keys_down[LEFT_ALT] = 0;
        this->keys_down[RIGHT_ALT] = 0;

    } // END METHOD : synchronize


    //==============================================================================
    void update_keys_flags(int key_state)
    //==============================================================================
    {}

    //==============================================================================
    void update_chr_unicode(int key_state, int device_flags)
    //==============================================================================
    {}

// The TS_KEYBOARD_EVENT structure is a standard T.128 Keyboard Event (see [T128] section
// 8.18.2). RDP keyboard input is restricted to keyboard scancodes, unlike the code-point or virtual
// codes supported in T.128 (a scancode is an 8-bit value specifying a key location on the keyboard).
// The server accepts a scancode value and translates it into the correct character depending on the
// language locale and keyboard layout used in the session.

// keyboardFlags (2 bytes): A 16-bit, unsigned integer. The flags describing the keyboard event.

// +--------------------------+------------------------------------------------+
// | 0x0100 KBDFLAGS_EXTENDED | The keystroke message contains an extended     |
// |                          | scancode. For enhanced 101-key and 102-key     |
// |                          | keyboards, extended keys include the right     |
// |                          | ALT and right CTRL keys on the main section    |
// |                          | of the keyboard; the INS, DEL, HOME, END,      |
// |                          | PAGE UP, PAGE DOWN and ARROW keys in the       |
// |                          | clusters to the left of the numeric keypad;    |
// |                          | and the Divide ("/") and ENTER keys in the     |
// |                          | numeric keypad.                                |
// +--------------------------+------------------------------------------------+
// | 0x4000 KBDFLAGS_DOWN     | Indicates that the key was down prior to this  |
// |                          | event.                                         |
// +--------------------------+------------------------------------------------+
// | 0x8000 KBDFLAGS_RELEASE  | The absence of this flag indicates a key-down  |
// |                          | event, while its presence indicates a          |
// |                          | key-release event.                             |
// +--------------------------+------------------------------------------------+

// keyCode (2 bytes): A 16-bit, unsigned integer. The scancode of the key which
// triggered the event.

    //==============================================================================
    void event(const uint16_t keyboardFlags, const uint16_t keyCode)
    //==============================================================================
    {
        // The scancode and its extended nature are merged in a new variable (whose most significant bit indicates the extended nature)
        uint8_t extendedKeyCode = keyCode|((keyboardFlags >> 1)&0x80);
        // The state of that key is updated in the Keyboard status array (1=Make ; 0=Break)
        this->keys_down[extendedKeyCode] = !(keyboardFlags & KBDFLAGS_RELEASE);
        switch (extendedKeyCode){
        //----------------
        // Lock keys
        //----------------
            case 0x3A: // capslock
                if (this->keys_down[extendedKeyCode]){
                    this->key_flags ^= CAPSLOCK;
                }
                break;
            case 0x45: // numlock
                if (this->keys_down[extendedKeyCode]){
                    this->key_flags ^= NUMLOCK;
                }
                break;
            case 0x46: // scrolllock
                if (this->keys_down[extendedKeyCode]){
                    this->key_flags ^= SCROLLLOCK;
                }
                break;
        //----------------
        // Modifier keys
        //----------------
            case LEFT_SHIFT:  // left shift
            case RIGHT_SHIFT: // right shift
            case LEFT_CTRL:   // left ctrl
            case RIGHT_CTRL:  // right ctrl
            case LEFT_ALT:    // left alt
            case RIGHT_ALT:   // right alt
                break;
        //----------------
        // All other keys
        //----------------
            default: // all other codes
                // This table translates the RDP scancodes to X11 scancodes :
                //  - the fist block (0-127) simply applies the +8 Windows to X11 translation and forces some 0 values
                //  - the second block (128-255) give codes for the extended keys that have a meaningful one
                uint8_t map[256] =  {
                    0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, // 0x00 - 0x07
                    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, // 0x08 - 0x0f
                    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, // 0x10 - 0x17
                    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, // 0x18 - 0x1f
                    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, // 0x20 - 0x27
                    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, // 0x28 - 0x2f
                    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, // 0x30 - 0x37
                    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, // 0x38 - 0x3f
                    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, // 0x40 - 0x47
                    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, // 0x48 - 0x4f
                    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, // 0x50 - 0x57
                    0x60, 0x61, 0x62, 0x00, 0x00, 0x00, 0x66, 0x67, // 0x58 - 0x5f
                    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, // 0x60 - 0x67
                    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, // 0x68 - 0x6f
                    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, // 0x70 - 0x77
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x78 - 0x7f

                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x80 - 0x87
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x88 - 0x8f
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x90 - 0x97
                    0x00, 0x00, 0x00, 0x00, 0x6c, 0x6d, 0x00, 0x00, // 0x98 - 0x9f
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xa0 - 0xa7
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xa8 - 0xaf
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x6f, // 0xb0 - 0xb7
                    0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xb8 - 0xbf
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, // 0xc0 - 0xc7
                    0x62, 0x63, 0x00, 0x64, 0x00, 0x66, 0x00, 0x67, // 0xc8 - 0xcf
                    0x68, 0x69, 0x6a, 0x6b, 0x00, 0x00, 0x00, 0x00, // 0xd0 - 0xd7
                    0x00, 0x00, 0x00, 0x73, 0x74, 0x75, 0x00, 0x00, // 0xd8 - 0xdf
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xe0 - 0xe7
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xe8 - 0xef
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xf0 - 0xf7
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  // 0xf8 - 0xff
                } ;

                // if event is a Make
                if (this->keys_down[extendedKeyCode]){
                    if (this->verbose){
                        LOG(LOG_INFO, "Event is Make for key: %#x", extendedKeyCode);
                    }
                        const KeyLayout_t * layout = &keylayout_WORK_noshift;
                        this->last_char_key = extendedKeyCode;

                    //-------------------------------------------------------------------------
                    // KEYPAD : Keypad keys whose meanings depends on Numlock are handled apart
                    //-------------------------------------------------------------------------
                    if ( ( (extendedKeyCode >= 0x47) && (extendedKeyCode <= 0x49) )
                      || ( (extendedKeyCode >= 0x4b) && (extendedKeyCode <= 0x4d) )
                      || ( (extendedKeyCode >= 0x4f) && (extendedKeyCode <= 0x53) )
                       ){
                        if (this->verbose){
                            LOG(LOG_INFO, "Key from keypad: %#x", extendedKeyCode);
                        }
                        // if numlock is activated, keys are printable characters (logical SHIFT mode)
                        if ((this->key_flags & NUMLOCK)) {
                            layout = &this->keylayout_WORK_shift;
                            // Translate the scancode to an unicode char
                            uint8_t sym = map[extendedKeyCode];
                            uint32_t uchar = (*layout)[sym];
                            this->push(uchar);
                        }
                        // if numlock is not activated, keys are NOT printable characters (logical NO SHIFT mode)
                        else {
                            switch (extendedKeyCode){
                               /* kEYPAD LEFT ARROW */
                                case 0x4b:
                                    this->push_kevent(KEVENT_LEFT_ARROW);
                                    break;
                                /* kEYPAD UP ARROW */
                                case 0x48:
                                    this->push_kevent(KEVENT_UP_ARROW);
                                    break;
                                /* kEYPAD RIGHT ARROW */
                                case 0x4d:
                                    this->push_kevent(KEVENT_RIGHT_ARROW);
                                    break;
                                /* kEYPAD DOWN ARROW */
                                case 0x50:
                                    this->push_kevent(KEVENT_DOWN_ARROW);
                                    break;
                                /* kEYPAD HOME */
                                case 0x47:
                                    this->push_kevent(KEVENT_HOME);
                                    break;
                                /* kEYPAD PGUP */
                                case 0x49:
                                    this->push_kevent(KEVENT_PGUP);
                                    break;
                                /* kEYPAD PGDOWN */
                                case 0x51:
                                    this->push_kevent(KEVENT_PGDOWN);
                                    break;
                                /* kEYPAD END */
                                case 0x4F:
                                    this->push_kevent(KEVENT_END);
                                    break;
                                /* kEYPAD DELETE */
                                case 0x53:
                                    this->push_kevent(KEVENT_DELETE);
                                default:
                                    break;
                            }
                        }
                    }

                    //--------------------
                    // NOT KEYPAD Specific
                    //--------------------
                    else {
                        if (this->verbose){
                            LOG(LOG_INFO, "Key not from keypad: %#x", extendedKeyCode);
                        }
                        if (this->is_ctrl_pressed() && this->is_alt_pressed()){
                            layout = &this->keylayout_WORK_altgr;
                        }
                        else if (this->is_shift_pressed() && this->is_caps_locked()){
                            layout = &this->keylayout_WORK_shiftcapslock;
                        }
                        else if (this->is_shift_pressed()){
                            layout = &this->keylayout_WORK_shift;
                        }
                        else if (this->is_caps_locked()) {
                            layout = &this->keylayout_WORK_capslock;
                        }
                        // Translate the scancode to an unicode char
                        uint8_t sym = map[extendedKeyCode];
                        uint32_t uchar = (*layout)[sym];
                        if (this->verbose){
                            LOG(LOG_INFO, "uchar=%x", uchar);
                        }
                        //----------------------------------------------
                        // uchar is in Printable unicode character range
                        //----------------------------------------------
                        // That is :
                        //  * > 0x20 is for ruling out NUL, but also TAB, ESC and BACKSPACE that has unicode values but
                        //           are not actually printable characters and that we don't want to track
                        //  * And not delete (0x7f) nor a dead key (0x5e, 0xa8, 0x60)
                        if (this->verbose){
                            LOG(LOG_INFO, "nbevent in buffer: %u %u\n", this->nbuf, this->nbuf_kevent);
                        }
                        if (  (uchar >= 0x20)                            // Not an ASCII Control
                           && (uchar != 0x7F)                            // Not the Backspace ASCII code
                           && not isDeadkey(uchar, extendedKeyCode)      // Not a deadkey
                           )
                        {
                            if (this->verbose){
                                LOG(LOG_INFO, "Printable key : uchar=%x", uchar);
                            }
                            // If previous key was a dead key, push a translated unicode char
                            if (this->dead_key != DEADKEY_NONE){
                                if (this->verbose){
                                    LOG(LOG_INFO, "Dead key : uchar=%x", uchar);
                                }
                                bool deadkeyTranslated = false;

                                // Search for the current DEADKEY entry in current client keyboard layout
                                for (uint8_t i = 0; i < MAX_DEADKEYS and keylayout_WORK_deadkeys[i].deadKeyTag != DEADKEY_NONE; i++) {
                                    if (keylayout_WORK_deadkeys[i].deadKeyTag == this->dead_key) {

                                        // Search for for uchar to translate in the current DEADKEY entry
                                        for (uint8_t j = 0; j < keylayout_WORK_deadkeys[i].nbSecondKeys; j++) {
                                            if (keylayout_WORK_deadkeys[i].secondKeys[j].secondKey == uchar) {

                                                // push the translation into keyboard buffer
                                                this->push(keylayout_WORK_deadkeys[i].secondKeys[j].modifiedKey);
                                                deadkeyTranslated = true;
                                                break;
                                            }
                                        }
                                        if (deadkeyTranslated) break;
                                    }
                                }
                                // By default, push both active deadkey and unmodified uchar in keyboard buffer
                                if (not deadkeyTranslated) {
                                    this->pushDeadkey();
                                    this->push(uchar);
                                }
                                this->dead_key = DEADKEY_NONE;
                            }
                            // If previous key wasn't a dead key, simply push
                            else {
                                if (this->verbose){
                                    LOG(LOG_INFO, "not dead key - so pushing char %02x", uchar);
                                }
                                this->push(uchar);
                            }
                        }
                        //--------------------------------------------------
                        // uchar is NOT in Printable unicode character range
                        //--------------------------------------------------
                        else {
                            if (this->verbose) {
                                LOG(LOG_INFO, "pushing event extendedKeyCode=%x", extendedKeyCode);
                            }

                            bool extKeyCodeResolved = false;
                            // Test if the extendedKeyCode is a deadkey in the current keyboard layout
                            for (int i=0; i < MAX_DEADKEYS; i++) {
                                if (   (keylayout_WORK_deadkeys[i].uchar == uchar)
                                   and (keylayout_WORK_deadkeys[i].extendedKeyCode == extendedKeyCode)
                                   )
                                {
                                    this->dead_key = keylayout_WORK_deadkeys[i].deadKeyTag;
                                    extKeyCodeResolved = true;
                                    break;
                                }
                            }

                            if (not extKeyCodeResolved) {
                                switch (extendedKeyCode){
                                // LEFT ARROW
                                case 0xCB:
                                    this->push_kevent(KEVENT_LEFT_ARROW);
                                    break;
                                // UP ARROW
                                case 0xC8:
                                    this->push_kevent(KEVENT_UP_ARROW);
                                    break;
                                // RIGHT ARROW
                                case 0xCD:
                                    this->push_kevent(KEVENT_RIGHT_ARROW);
                                    break;
                                // DOWN ARROW
                                case 0xD0:
                                    this->push_kevent(KEVENT_DOWN_ARROW);
                                    break;
                                // HOME
                                case 0xC7:
                                    this->push_kevent(KEVENT_HOME);
                                    break;
                                // PGUP
                                case 0xC9:
                                    this->push_kevent(KEVENT_PGUP);
                                    break;
                                // PGDOWN
                                case 0xD1:
                                    this->push_kevent(KEVENT_PGDOWN);
                                    break;
                                // END
                                case 0xCF:
                                    this->push_kevent(KEVENT_END);
                                    break;
                                // TAB
                                case 0x0F:
                                    if (this->is_shift_pressed()){
                                        this->push_kevent(KEVENT_BACKTAB);
                                    }
                                    else {
                                        this->push_kevent(KEVENT_TAB);
                                    }
                                    break;
                                // backspace
                                case 0x0E:
                                    this->push_kevent(KEVENT_BACKSPACE);
                                    break;
                                case 0xD3: // delete
                                    this->push_kevent(KEVENT_DELETE);
                                    break;
                                case 0x53: // numpad delete
                                    this->push_kevent(KEVENT_DELETE);
                                    break;
                                case 0x1C: // enter
                                    this->push_kevent(KEVENT_ENTER);
                                    break;
                                case 0x9C: // numpad enter
                                    this->push_kevent(KEVENT_ENTER);
                                    break;
                                default:
                                    break;
                                }
                            }
                        }
                    }
                }
            break;

        } // END SWITCH : extendedKeyCode

    } // END METHOD : event


    //==============================================================================
    bool isDeadkey(uint32_t uchar, uint8_t extendedKeyCode)
    //==============================================================================
    {
        bool resu = false;
        for (int i=0; i < MAX_DEADKEYS; i++) {
            // Search if a make is a deadkey by its scancode AND by its utf8 translation.
            // NB : utf8 alone is not enough. (e.g. french Circumflex Accent from scancode 'Ox1A' is a deadkey but
            //      from scancode '0x0A' it isn't).
            if (   (keylayout_WORK_deadkeys[i].extendedKeyCode == extendedKeyCode)
               and (keylayout_WORK_deadkeys[i].uchar == uchar)
               )
            {
                resu = true;
            }
        }
        return resu;

    } // END METHOD : notDeadkey


    //==============================================================================
    void pushDeadkey()
    //==============================================================================
    {
        switch(this->dead_key) {
        case DEADKEY_CIRC  : push(0x5E); break;
        case DEADKEY_UML   : push(0xA8); break;
        case DEADKEY_GRAVE : push(0x60); break;
        case DEADKEY_ACUTE : push(0xB4); break;
        case DEADKEY_TILDE : push(0x7E); break;
        default : break;
        }
    } // END METHOD : pushDeadkey


    //==============================================================================
    void push(uint32_t uchar)
    //==============================================================================
    {
        this->push_char(uchar);
        this->push_kevent(KEVENT_KEY);

    } // END METHOD : push


    //==============================================================================
    void push_char(uint32_t uchar)
    //==============================================================================
    {
        if (this->nbuf < SIZE_KEYBUF){
            this->buffer[this->ibuf] = uchar;
            this->ibuf++;
            if (this->ibuf >= SIZE_KEYBUF){
                this->ibuf = 0;
            }
            this->nbuf++;
        }

    } // END METHOD : push_char


    //==============================================================================
    uint32_t get_char()
    //==============================================================================
    {
        if (this->nbuf > 0){
            // remove top KEY KEVENT if present and any event may have occured before it
            if (this->nbuf_kevent > 0 && this->top_kevent() == KEVENT_KEY){
                this->nbuf_kevent--;
            }
            uint32_t res = this->buffer[(SIZE_KEYBUF + this->ibuf - this->nbuf) % SIZE_KEYBUF];

            if (this->nbuf > 0){
                this->nbuf--;
            }
            return res;
        }
        return 0;

    } // END METHOD : get_char


    // head of keyboard buffer (or keyboard buffer of size 1)
    //==============================================================================
    uint32_t top_char() const
    //==============================================================================
    {
        return this->buffer[(SIZE_KEYBUF + this->ibuf - this->nbuf) % SIZE_KEYBUF];

    } // END METHOD : top_char


    //==============================================================================
    uint32_t nb_char_available() const
    //==============================================================================
    {
        return this->nbuf;

    } // END METHOD : nb_char_available


    //==============================================================================
    void push_kevent(uint32_t uevent)
    //==============================================================================
    {
        if (this->nbuf_kevent < SIZE_KEYBUF_KEVENT){
            this->buffer_kevent[this->ibuf_kevent] = uevent;
            this->ibuf_kevent++;
            if (this->ibuf_kevent >= SIZE_KEYBUF_KEVENT){
                this->ibuf_kevent = 0;
            }
            this->nbuf_kevent++;
        }
    } // END METHOD : push_kevent


    //==============================================================================
    uint32_t get_kevent()
    //==============================================================================
    {
        uint32_t res = this->buffer_kevent[(SIZE_KEYBUF_KEVENT + this->ibuf_kevent - this->nbuf_kevent) % SIZE_KEYBUF_KEVENT];

        if (this->nbuf_kevent > 0){
            if (res == KEVENT_KEY && this->nbuf > 0){
                this->nbuf--;
            }
            this->nbuf_kevent--;

        }
        return res;

    } // END METHOD : get_kevent


    // head of keyboard buffer (or keyboard buffer of size 1)
    //==============================================================================
    uint32_t top_kevent() const
    //==============================================================================
    {
        return this->buffer_kevent[this->ibuf_kevent?this->ibuf_kevent-1:SIZE_KEYBUF_KEVENT-1];

    } // END METHOD : top_kevent


    //==============================================================================
    uint32_t nb_kevent_available() const
    //==============================================================================
    {
        return this->nbuf_kevent;

    } // END METHOD : nb_kevent_available


    //==============================================================================
    bool is_caps_locked() const
    //==============================================================================
    {
        return this->key_flags & CAPSLOCK;

    } // END METHOD : is_caps_locked


    //==============================================================================
    bool is_scroll_locked() const
    //==============================================================================
    {
        return this->key_flags & SCROLLLOCK;

    } // END METHOD : is_scroll_locked


    //==============================================================================
    bool is_num_locked() const
    //==============================================================================
    {
        return this->key_flags & NUMLOCK;

    } // END METHOD : is_num_locked


    //==============================================================================
    bool is_left_shift_pressed() const
    //==============================================================================
    {
        return this->keys_down[LEFT_SHIFT];

    } // END METHOD : is_left_shift_pressed


    //==============================================================================
    bool is_right_shift_pressed() const
    //==============================================================================
    {
        return this->keys_down[RIGHT_SHIFT];

    } // END METHOD : is_right_shift_pressed


    //==============================================================================
    bool is_shift_pressed() const
    //==============================================================================
    {
        return this->is_left_shift_pressed() || this->is_right_shift_pressed();

    } // END METHOD : is_shift_pressed


    //==============================================================================
    bool is_left_ctrl_pressed() const
    //==============================================================================
    {
        return this->keys_down[LEFT_CTRL];

    } // END METHOD : is_left_ctrl_pressed


    //==============================================================================
    bool is_right_ctrl_pressed() const
    //==============================================================================
    {
        return this->keys_down[RIGHT_CTRL];

    } // END METHOD : is_right_ctrl_pressed


    //==============================================================================
    bool is_ctrl_pressed() const
    //==============================================================================
    {
        return is_right_ctrl_pressed() || is_left_ctrl_pressed();

    } // END METHOD : is_ctrl_pressed


    //==============================================================================
    bool is_left_alt_pressed() const
    //==============================================================================
    {
        return this->keys_down[LEFT_ALT];

    } // END METHOD : is_left_alt_pressed


    //==============================================================================
    bool is_right_alt_pressed() const // altgr
    //==============================================================================
    {
        return this->keys_down[RIGHT_ALT];

    } // END METHOD : is_right_alt_pressed


    //==============================================================================
    bool is_alt_pressed() const
    //==============================================================================
    {
        return is_right_alt_pressed() || is_left_alt_pressed();

    } // END METHOD : is_alt_pressed


    //==============================================================================
    void init_layout(int keyb)
    //==============================================================================
    {
        // DEFAULT KEYMAP
        const KeyLayout_t DEFAULT_noshift = {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 27, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 223, 180, 0, 0, 113, 119, 101, 114,
            116, 122, 117, 105, 111, 112, 252, 43, 13, 0, 97, 115, 100, 102, 103, 104, 106, 107, 108, 246,
            228, 94, 0, 35, 121, 120, 99, 118, 98, 110, 109, 44, 46, 45, 0, 42, 0, 32, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 43, 0,
            0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            13, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
        } ;

        const KeyLayout_t DEFAULT_shift={
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 27, 33, 34, 167, 36, 37, 38, 47, 40, 41, 61, 63, 96, 0, 0, 81, 87, 69, 82,
            84, 90, 85, 73, 79, 80, 220, 42, 13, 0, 65, 83, 68, 70, 71, 72, 74, 75, 76, 214,
            196, 176, 0, 39, 89, 88, 67, 86, 66, 78, 77, 59, 58, 95, 0, 42, 0, 32, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 56, 57, 45, 52, 53, 54, 43, 49,
            50, 51, 48, 44, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            13, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
        } ;

        const KeyLayout_t DEFAULT_altgr={
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 27, 185, 178, 179, 188, 189, 172, 123, 91, 93, 125, 92, 184, 0, 0, 64, 322, 8364, 182,
            359, 8592, 8595, 8594, 248, 254, 168, 126, 13, 0, 230, 223, 240, 273, 331, 295, 106, 312, 322, 733,
            94, 172, 0, 96, 171, 187, 162, 8220, 8221, 110, 181, 0, 183, 0, 0, 42, 0, 32, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 43, 0,
            0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            13, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
        } ;

        const KeyLayout_t DEFAULT_capslock={
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 27, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 223, 180, 0, 0, 81, 87, 69, 82,
            84, 90, 85, 73, 79, 80, 220, 43, 13, 0, 65, 83, 68, 70, 71, 72, 74, 75, 76, 214,
            196, 94, 0, 35, 89, 88, 67, 86, 66, 78, 77, 44, 46, 45, 0, 42, 0, 32, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 43, 0,
            0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            13, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
        } ;

        const KeyLayout_t DEFAULT_shiftcapslock={
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        } ;

        // Intialize the WORK tables
        for(int i=0 ; i < 128 ; i++) {
            keylayout_WORK_noshift[i] = DEFAULT_noshift[i] ;
            keylayout_WORK_shift[i] = DEFAULT_shift[i] ;
            keylayout_WORK_altgr[i] = DEFAULT_altgr[i] ;
            keylayout_WORK_capslock[i] = DEFAULT_capslock[i] ;
            keylayout_WORK_shiftcapslock[i] = DEFAULT_shiftcapslock[i];
        }
        keyb = 0x0807;
        switch (keyb){
            case 0x0407: // GERMAN
            {
                const KeyLayout_t x0407_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xdf,   0xb4,    0x8,    0x9,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x7a,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xfc,   0x2b,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf6,
                    /*  48 */    0xe4,   0x5e,    0x0,   0x23,   0x79,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0407_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0xa7,   0x24,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x60,    0x8,    0x0,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x5a,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xdc,   0x2a,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0xd6,
                    /*  48 */    0xc4,   0xb0,    0x0,   0x27,   0x59,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0407_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xdf,   0xb4,    0x8,    0x9,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x5a,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xdc,   0x2b,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0xd6,
                    /*  48 */    0xc4,   0x5e,    0x0,   0x23,   0x59,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0407_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0xb9,   0xb2,   0xb3,   0xbc,   0xbd,   0xac,
                    /*  16 */    0x7b,   0x5b,   0x5d,   0x7d,   0x5c,   0xb8,    0x8,    0x9,
                    /*  24 */    0x40,  0x142, 0x20ac,   0xb6,  0x167, 0x2190, 0x2193, 0x2192,
                    /*  32 */    0xf8,   0xfe,   0xa8,   0x7e,    0xd,    0x0,   0xe6,   0xdf,
                    /*  40 */    0xf0,  0x111,  0x14b,  0x127,   0x6a,  0x138,  0x142,  0x2dd,
                    /*  48 */    0x5e,   0xac,    0x0,   0x60,   0xab,   0xbb,   0xa2, 0x201c,
                    /*  56 */  0x201d,   0x6e,   0xb5,    0x0,   0xb7,    0x0,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0407_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0xa7,   0x24,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x60,    0x8,    0x0,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x7a,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xfc,   0x2a,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf6,
                    /*  48 */    0xe4,   0xb0,    0x0,   0x27,   0x79,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x0407_noshift[i]){
                        keylayout_WORK_noshift[i] = x0407_noshift[i] ;
                    }
                    if (x0407_shift[i]){
                        keylayout_WORK_shift[i] = x0407_shift[i] ;
                    }
                    if (x0407_altgr[i]){
                        keylayout_WORK_altgr[i] = x0407_altgr[i] ;
                    }
                    if (x0407_capslock[i]){
                        keylayout_WORK_capslock[i] = x0407_capslock[i] ;
                    }
                    if (x0407_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x0407_shiftcapslock[i] ;
                    }
                }
            }
            break;
            case 0x0409: // United States
            {
                const KeyLayout_t x0409_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2d,   0x3d,    0x8,    0x9,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x5b,   0x5d,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x3b,
                    /*  48 */    0x27,   0x60,    0x0,   0x5c,   0x7a,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x2c,   0x2e,   0x2f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0409_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x40,   0x23,   0x24,   0x25,   0x5e,
                    /*  16 */    0x26,   0x2a,   0x28,   0x29,   0x5f,   0x2b,    0x8,    0x0,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0x7b,   0x7d,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x3a,
                    /*  48 */    0x22,   0x7e,    0x0,   0x7c,   0x5a,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x3c,   0x3e,   0x3f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0409_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2d,   0x3d,    0x8,    0x9,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0x5b,   0x5d,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x3b,
                    /*  48 */    0x27,   0x60,    0x0,   0x5c,   0x5a,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x2c,   0x2e,   0x2f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0409_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2d,   0x3d,    0x8,    0x9,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x5b,   0x5d,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x3b,
                    /*  48 */    0x27,   0x60,    0x0,   0x5c,   0x7a,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x2c,   0x2e,   0x2f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0409_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x40,   0x23,   0x24,   0x25,   0x5e,
                    /*  16 */    0x26,   0x2a,   0x28,   0x29,   0x5f,   0x2b,    0x8,    0x0,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x7b,   0x7d,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x3a,
                    /*  48 */    0x22,   0x7e,    0x0,   0x7c,   0x7a,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x3c,   0x3e,   0x3f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x0409_noshift[i]){
                        keylayout_WORK_noshift[i] = x0409_noshift[i] ;
                    }
                    if (x0409_shift[i]){
                        keylayout_WORK_shift[i] = x0409_shift[i] ;
                    }
                    if (x0409_altgr[i]){
                        keylayout_WORK_altgr[i] = x0409_altgr[i] ;
                    }
                    if (x0409_capslock[i]){
                        keylayout_WORK_capslock[i] = x0409_capslock[i] ;
                    }
                    if (x0409_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x0409_shiftcapslock[i] ;
                    }
                }
            }
            break;
            case 0x040c: // French
            {
// +----+  +----+----+----+----+  +----+----+----+----+  +----+----+----+----+  +----+----+-------+
// | 01 |  | 3B | 3C | 3D | 3E |  | 3F | 40 | 41 | 42 |  | 43 | 44 | 57 | 58 |  | 37 | 46 | 1D+45 |
// +----+  +----+----+----+----+  +----+----+----+----+  +----+----+----+----+  +----+----+-------+
//                                     ***  keycodes suffixed by 'x' are extended ***
// +----+----+----+----+----+----+----+----+----+----+----+----+----+--------+  +----+----+----+  +--------------------+
// | 29 | 02 | 03 | 04 | 05 | 06 | 07 | 08 | 09 | 0A | 0B | 0C | 0D |   0E   |  | 52x| 47x| 49x|  | 45 | 35x| 37 | 4A  |
// +-------------------------------------------------------------------------+  +----+----+----+  +----+----+----+-----+
// |  0F  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 1A | 1B |      |  | 53x| 4Fx| 51x|  | 47 | 48 | 49 |     |
// +------------------------------------------------------------------+  1C  |  +----+----+----+  +----+----+----| 4E  |
// |  3A   | 1E | 1F | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 2B |     |                    | 4B | 4C | 4D |     |
// +-------------------------------------------------------------------------+       +----+       +----+----+----+-----+
// |  2A | 56 | 2C | 2D | 2E | 2F | 30 | 31 | 32 | 33 | 34 | 35 |    36      |       | 48x|       | 4F | 50 | 51 |     |
// +-------------------------------------------------------------------------+  +----+----+----+  +---------+----| 1Cx |
// |  1D  |  5Bx | 38 |           39           |  38x  |  5Cx |  5Dx |  1Dx  |  | 4Bx| 50x| 4Dx|  |    52   | 53 |     |
// +------+------+----+------------------------+-------+------+------+-------+  +----+----+----+  +---------+----+-----+

                const KeyLayout_t x040c_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x26,   0xe9,   0x22,   0x27,   0x28,   0x2d,
                    /*  16 */    0xe8,   0x5f,   0xe7,   0xe0,   0x29,   0x3d,    0x8,
                    /*  23 */     0x9,    'a',    'z',    'e',    'r',    't',    'y',    'u',    'i',   'o',   'p',   0x5e,   0x24,   0xd,
                    /*  37 */     0x0,    'q',    's',    'd',    'f',    'g',    'h',    'j',   'k',    'l',   'm',   0xf9,
                    /*  49 */    0xb2,    0x0,   0x2a,    'w',    'x',    'c',    'v',    'b',   'n',   0x2c,  0x3b,   0x3a,   0x21,   0x0,
                    /*  63 */    0x2a,    0x0,    ' ',    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,    0x0,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x040c_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xb0,   0x2b,    0x8,    0x0,
                    /*  24 */    0x41,   0x5a,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xa8,   0xa3,    0xd,    0x0,   0x51,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x4d,
                    /*  48 */    0x25,   0x7e,    0x0,   0xb5,   0x57,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x3f,   0x2e,   0x2f,   0xa7,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,    0x0,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x040c_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xb0,   0x2b,    0x8,    0x0,
                    /*  24 */    0x41,   0x5a,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xa8,   0xa3,    0xd,    0x0,   0x51,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x4d,
                    /*  48 */    0x25,   0x7e,    0x0,   0xb5,   0x57,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x3f,   0x2e,   0x2f,   0xa7,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,    0x0,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x040c_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0xb9,   0x7e,   0x23,   0x7b,   0x5b,   0x7c,
                    /*  16 */    0x60,   0x5c,   0x5e,   0x40,   0x5d,   0x7d,    0x8,    0x9,
                    /*  24 */    0xe6,   0xab, 0x20ac,   0xb6,  0x167, 0x2190, 0x2193, 0x2192,
                    /*  32 */    0xf8,   0xfe,   0xa8,   0xa4,    0xd,    0x0,   0x40,   0xdf,
                    /*  40 */    0xf0,  0x111,  0x14b,  0x127,   0x6a,  0x138,  0x142,   0xb5,
                    /*  48 */    0x5e,   0xac,    0x0,   0x60,  0x142,   0xbb,   0xa2, 0x201c,
                    /*  56 */  0x201d,   0x6e,   0xb4,    0x0,   0xb7,    0x0,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,    0x0,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x040c_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x26,   0xe9,   0x22,   0x27,   0x28,   0x2d,
                    /*  16 */    0xe8,   0x5f,   0xe7,   0xe0,   0x29,   0x3d,    0x8,    0x9,
                    /*  24 */    0x61,   0x7a,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x5e,   0x24,    0xd,    0x0,   0x71,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x6d,
                    /*  48 */    0xf9,   0xb2,    0x0,   0x2a,   0x77,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x2c,   0x3b,   0x3a,   0x21,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,    0x0,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x5E, 0x1A, DEADKEY_CIRC,  11, { {'a', 0xE2}, {'A', 0xC2}
                                                       , {'e', 0xEA}, {'E', 0xCA}
                                                       , {'i', 0xEE}, {'I', 0xCE}
                                                       , {'o', 0xF4}, {'O', 0xD4}
                                                       , {'u', 0xFB}, {'U', 0xDB}
                                                       , {' ', 0x5E}
                                                       }
                      }
                    , { 0xA8, 0x1A, DEADKEY_UML,   11, { {'a', 0xE4}, {'A', 0xC4}
                                                       , {'e', 0xEB}, {'E', 0xCB}
                                                       , {'i', 0xEF}, {'I', 0xCF}
                                                       , {'o', 0xF6}, {'O', 0xD6}
                                                       , {'u', 0xFC}, {'U', 0xDC}
                                                       , {' ', 0xA8}
                                                       }
                      }
                    , { 0x60, 0x08, DEADKEY_GRAVE, 11, { {'a', 0xE0}, {'A', 0xC0}
                                                       , {'e', 0xE8}, {'E', 0xC8}
                                                       , {'i', 0xEC}, {'I', 0xCC}
                                                       , {'o', 0xF2}, {'O', 0xD2}
                                                       , {'u', 0xF9}, {'U', 0xD9}
                                                       , {' ', 0x60}
                                                       }
                      }
                    , { 0x7E, 0x03, DEADKEY_TILDE,  7, { {'a', 0xE3}, {'A', 0xC3}
                                                       , {'o', 0xF5}, {'O', 0xD5}
                                                       , {'n', 0xF1}, {'N', 0xD1}
                                                       , {' ', 0x7E}
                                                       }
                      }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x040c_noshift[i]){
                        keylayout_WORK_noshift[i] = x040c_noshift[i] ;
                    }
                    if (x040c_shift[i]){
                        keylayout_WORK_shift[i] = x040c_shift[i] ;
                    }
                    if (x040c_altgr[i]){
                        keylayout_WORK_altgr[i] = x040c_altgr[i] ;
                    }
                    if (x040c_capslock[i]){
                        keylayout_WORK_capslock[i] = x040c_capslock[i] ;
                    }
                    if (x040c_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x040c_shiftcapslock[i] ;
                    }
                }
            }
            break;
            case 0x0410: // Italian
            {
                const KeyLayout_t x0410_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x27,   0xec,    0x8,    0x9,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xe8,   0x2b,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf2,
                    /*  48 */    0xe0,   0x5c,    0x0,   0xf9,   0x7a,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0410_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0xa3,   0x24,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x5e,    0x8,    0x0,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xe9,   0x2a,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0xe7,
                    /*  48 */    0xb0,   0x7c,    0x0,   0xa7,   0x5a,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0410_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x27,   0xcc,    0x8,    0x9,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xc8,   0x2b,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0xd2,
                    /*  48 */    0xc0,   0x5c,    0x0,   0xd9,   0x5a,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0410_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0xb9,   0xb2,   0xb3,   0xbc,   0xbd,   0xac,
                    /*  16 */    0x7b,   0x5b,   0x5d,   0x7d,   0x60,   0x7e,    0x8,    0x9,
                    /*  24 */    0x40,  0x142, 0x20ac,   0xb6,  0x167, 0x2190, 0x2193, 0x2192,
                    /*  32 */    0xf8,   0xfe,   0x5b,   0x5d,    0xd,    0x0,   0xe6,   0xdf,
                    /*  40 */    0xf0,  0x111,  0x14b,  0x127,   0x6a,  0x138,  0x142,   0x40,
                    /*  48 */    0x23,   0xac,    0x0,   0x60,   0xab,   0xbb,   0xa2, 0x201c,
                    /*  56 */  0x201d,   0xf1,   0xb5,   0xb4,   0xb7,   0xaf,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0xab,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0410_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0xa3,   0x24,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x5e,    0x8,    0x0,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xc9,   0x2a,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xc7,
                    /*  48 */    0xb0,   0x7c,    0x0,   0xa7,   0x7a,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x0410_noshift[i]){
                        keylayout_WORK_noshift[i] = x0410_noshift[i] ;
                    }
                    if (x0410_shift[i]){
                        keylayout_WORK_shift[i] = x0410_shift[i] ;
                    }
                    if (x0410_altgr[i]){
                        keylayout_WORK_altgr[i] = x0410_altgr[i] ;
                    }
                    if (x0410_capslock[i]){
                        keylayout_WORK_capslock[i] = x0410_capslock[i] ;
                    }
                    if (x0410_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x0410_shiftcapslock[i] ;
                    }
                }
            }
            break;
            case 0x0419: // Russian
            {
                const KeyLayout_t x0419_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2d,   0x3d,    0x8,    0x9,
                    /*  24 */   0x439,  0x446,  0x443,  0x43a,  0x435,  0x43d,  0x433,  0x448,
                    /*  32 */   0x449,  0x437,  0x445,  0x44a,    0xd,    0x0,  0x444,  0x44b,
                    /*  40 */   0x432,  0x430,  0x43f,  0x440,  0x43e,  0x43b,  0x434,  0x436,
                    /*  48 */   0x44d,  0x451,    0x0,   0x5c,  0x44f,  0x447,  0x441,  0x43c,
                    /*  56 */   0x438,  0x442,  0x44c,  0x431,  0x44e,   0x2f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x2f,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0419_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0x23,   0x2a,   0x3a,   0x2c,
                    /*  16 */    0x2e,   0x3b,   0x28,   0x29,   0x5f,   0x2b,    0x8,    0x0,
                    /*  24 */   0x419,  0x426,  0x423,  0x41a,  0x415,  0x41d,  0x413,  0x428,
                    /*  32 */   0x429,  0x417,  0x425,  0x42a,    0xd,    0x0,  0x424,  0x42b,
                    /*  40 */   0x412,  0x410,  0x41f,  0x420,  0x41e,  0x41b,  0x414,  0x416,
                    /*  48 */   0x42d,  0x401,    0x0,   0x7c,  0x42f,  0x427,  0x421,  0x41c,
                    /*  56 */   0x418,  0x422,  0x42c,  0x411,  0x42e,   0x3f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0419_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2d,   0x3d,    0x8,    0x9,
                    /*  24 */   0x419,  0x426,  0x423,  0x41a,  0x415,  0x41d,  0x413,  0x428,
                    /*  32 */   0x429,  0x417,  0x425,  0x42a,    0xd,    0x0,  0x424,  0x42b,
                    /*  40 */   0x412,  0x410,  0x41f,  0x420,  0x41e,  0x41b,  0x414,  0x416,
                    /*  48 */   0x42d,  0x401,    0x0,   0x5c,  0x42f,  0x427,  0x421,  0x41c,
                    /*  56 */   0x418,  0x422,  0x42c,  0x411,  0x42e,   0x2f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x2f,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0419_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2d,   0x3d,    0x8,    0x9,
                    /*  24 */   0x439,  0x446,  0x443,  0x43a,  0x435,  0x43d,  0x433,  0x448,
                    /*  32 */   0x449,  0x437,  0x445,  0x44a,    0xd,    0x0,  0x444,  0x44b,
                    /*  40 */   0x432,  0x430,  0x43f,  0x440,  0x43e,  0x43b,  0x434,  0x436,
                    /*  48 */   0x44d,  0x451,    0x0,   0x5c,  0x44f,  0x447,  0x441,  0x43c,
                    /*  56 */   0x438,  0x442,  0x44c,  0x431,  0x44e,   0x2f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0419_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0x23,   0x2a,   0x3a,   0x2c,
                    /*  16 */    0x2e,   0x3b,   0x28,   0x29,   0x5f,   0x2b,    0x8,    0x0,
                    /*  24 */   0x439,  0x446,  0x443,  0x43a,  0x435,  0x43d,  0x433,  0x448,
                    /*  32 */   0x449,  0x437,  0x445,  0x44a,    0xd,    0x0,  0x444,  0x44b,
                    /*  40 */   0x432,  0x430,  0x43f,  0x440,  0x43e,  0x43b,  0x434,  0x436,
                    /*  48 */   0x44d,  0x451,    0x0,   0x7c,  0x44f,  0x447,  0x441,  0x43c,
                    /*  56 */   0x438,  0x442,  0x44c,  0x431,  0x44e,   0x3f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x0419_noshift[i]){
                        keylayout_WORK_noshift[i] = x0419_noshift[i] ;
                    }
                    if (x0419_shift[i]){
                        keylayout_WORK_shift[i] = x0419_shift[i] ;
                    }
                    if (x0419_altgr[i]){
                        keylayout_WORK_altgr[i] = x0419_altgr[i] ;
                    }
                    if (x0419_capslock[i]){
                        keylayout_WORK_capslock[i] = x0419_capslock[i] ;
                    }
                    if (x0419_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x0419_shiftcapslock[i] ;
                    }
                }

            }
            break;
            case 0x041d: // Swedish
            {
                const KeyLayout_t x041d_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2b,   0xb4,    0x8,    0x9,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xe5,   0xa8,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf6,
                    /*  48 */    0xe4,   0xa7,    0x0,   0x27,   0x7a,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x041d_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0x23,   0xa4,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x60,    0x8,    0x0,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xc5,   0x5e,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0xd6,
                    /*  48 */    0xc4,   0xbd,    0x0,   0x2a,   0x5a,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x041d_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2b,   0xb4,    0x8,    0x9,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xc5,   0xa8,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0xd6,
                    /*  48 */    0xc4,   0xa7,    0x0,   0x27,   0x5a,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x041d_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0xa1,   0x40,   0xa3,   0x24, 0x20ac,   0xa5,
                    /*  16 */    0x7b,   0x5b,   0x5d,   0x7d,   0x5c,   0xb1,    0x8,    0x9,
                    /*  24 */    0x40,  0x142, 0x20ac,   0xae,   0xfe, 0x2190, 0x2193, 0x2192,
                    /*  32 */   0x153,   0xfe,   0xa8,   0x7e,    0xd,    0x0,   0xaa,   0xdf,
                    /*  40 */    0xf0,  0x111,  0x14b,  0x127,   0x6a,  0x138,  0x142,   0xf8,
                    /*  48 */    0xe6,   0xb6,    0x0,   0xb4,   0xab,   0xbb,   0xa9, 0x201c,
                    /*  56 */  0x201d,   0x6e,   0xb5,   0xb8,   0xb7,    0x0,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x041d_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0x23,   0xa4,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x60,    0x8,    0x0,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xe5,   0x5e,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf6,
                    /*  48 */    0xe4,   0xbd,    0x0,   0x2a,   0x7a,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x041d_noshift[i]){
                        keylayout_WORK_noshift[i] = x041d_noshift[i] ;
                    }
                    if (x041d_shift[i]){
                        keylayout_WORK_shift[i] = x041d_shift[i] ;
                    }
                    if (x041d_altgr[i]){
                        keylayout_WORK_altgr[i] = x041d_altgr[i] ;
                    }
                    if (x041d_capslock[i]){
                        keylayout_WORK_capslock[i] = x041d_capslock[i] ;
                    }
                    if (x041d_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x041d_shiftcapslock[i] ;
                    }
                }
            }
            break;
            case 0x046e: // Luxemburgish
            {
                const KeyLayout_t x046e_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x27,   0x5e,    0x8,    0x9,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x7a,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x5b,   0x5d,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf6,
                    /*  48 */    0xe4,   0x5f,    0x0,   0x24,   0x79,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x046e_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x2b,   0x22,   0x2a,    0x0,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x60,    0x8,    0x0,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x5a,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0x7b,   0x21,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x3a,
                    /*  48 */    0x22,    0x0,    0x0,   0x23,   0x5a,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x046e_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xdf,   0xb4,    0x8,    0x9,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x5a,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xdc,   0x2b,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0xd6,
                    /*  48 */    0xc4,   0x5e,    0x0,   0x23,   0x59,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x046e_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x7e,   0x23,   0x7b,   0x5b,   0x7c,   0x60,
                    /*  16 */    0x5c,   0x5e,   0x40,   0x5d,   0x7d,   0x3d,    0x8,    0x9,
                    /*  24 */    0x40,  0x142, 0x20ac,   0xb6,  0x167, 0x2190, 0x2193, 0x2192,
                    /*  32 */    0xf8,   0xfe,   0xa8,   0x7e,    0xd,    0x0,   0xe6,   0xdf,
                    /*  40 */    0xf0,  0x111,  0x14b,  0x127,   0x6a,  0x138,  0x142,  0x2dd,
                    /*  48 */    0x5e,   0xac,    0x0,   0x5c,   0xab,   0xbb,   0xa2, 0x201c,
                    /*  56 */  0x201d,   0x6e,   0xb5,    0x0,   0xb7,    0x0,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x046e_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0xa7,   0x24,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x60,    0x8,    0x0,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x7a,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xfc,   0x2a,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf6,
                    /*  48 */    0xe4,   0xb0,    0x0,   0x27,   0x79,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x046e_noshift[i]){
                        keylayout_WORK_noshift[i] = x046e_noshift[i] ;
                    }
                    if (x046e_shift[i]){
                        keylayout_WORK_shift[i] = x046e_shift[i] ;
                    }
                    if (x046e_altgr[i]){
                        keylayout_WORK_altgr[i] = x046e_altgr[i] ;
                    }
                    if (x046e_capslock[i]){
                        keylayout_WORK_capslock[i] = x046e_capslock[i] ;
                    }
                    if (x046e_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x046e_shiftcapslock[i] ;
                    }
                }

            }
            break;
            case 0x0807: // German Swizerland
            {
                const KeyLayout_t x0807_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xdf,   0x5e,    0x8,    0x9,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x7a,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xfc,   0xa8,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf6,
                    /*  48 */    0xe4,   0x5e,    0x0,   0x24,   0x79,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0807_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0xa7,   0x24,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x60,    0x8,    0x0,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x5a,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xe8,   0x21,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0xe9,
                    /*  48 */    0xe0,   0xb0,    0x0,   0xa3,   0x59,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0807_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xdf,   0xb4,    0x8,    0x9,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x5a,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xdc,   0x2b,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0xd6,
                    /*  48 */    0xc4,   0x5e,    0x0,   0x23,   0x59,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0807_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0xa6,   0x40,   0x23,   0xb0,    0xa7,  0xac,
                    /*  16 */    0x7c,   0xa2,   0x01,   0x01,   0xb4,   0x7e,    0x8,    0x9,
                    /*  24 */    0x40,  0x142, 0x20ac,   0xb6,  0x167, 0x2190, 0x2193, 0x2192,
                    /*  32 */    0x5b,   0x5b,   0x5b,   0x5d,    0xd,    0x0,   0xe6,   0xdf,
                    /*  40 */    0xf0,  0x111,  0x14b,  0x127,   0x6a,  0x138,  0x142,  0x2dd,
                    /*  48 */    0x7b,   0xac,    0x0,   0x7d,   0xab,   0xbb,   0xa2, 0x201c,
                    /*  56 */  0x201d,   0x6e,   0xb5,    0x0,   0xb7,    0x0,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x5c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0807_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0xa7,   0x24,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x60,    0x8,    0x0,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x7a,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xfc,   0x2a,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf6,
                    /*  48 */    0xe4,   0xb0,    0x0,   0x27,   0x79,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x0807_deadkeys[5] = {
                      { 0x5E, 0x0D, DEADKEY_CIRC,  11, { {'a', 0xE2}, {'A', 0xC2}
                                                       , {'e', 0xEA}, {'E', 0xCA}
                                                       , {'i', 0xEE}, {'I', 0xCE}
                                                       , {'o', 0xF4}, {'O', 0xD4}
                                                       , {'u', 0xFB}, {'U', 0xDB}
                                                       , {' ', 0x5E}
                                                       }
                      }
                    , { 0xA8, 0x1B, DEADKEY_UML,   12, { {'a', 0xE4}, {'A', 0xC4}
                                                       , {'e', 0xEB}, {'E', 0xCB}
                                                       , {'i', 0xEF}, {'I', 0xCF}
                                                       , {'o', 0xF6}, {'O', 0xD6}
                                                       , {'u', 0xFC}, {'U', 0xDC}
                                                       , {'y', 0xFF}
                                                       , {' ', 0xA8}
                                                       }
                      }
                    , { 0x60, 0x0D, DEADKEY_GRAVE, 11, { {'a', 0xE0}, {'A', 0xC0}
                                                       , {'e', 0xE8}, {'E', 0xC8}
                                                       , {'i', 0xEC}, {'I', 0xCC}
                                                       , {'o', 0xF2}, {'O', 0xD2}
                                                       , {'u', 0xF9}, {'U', 0xD9}
                                                       , {' ', 0x60}
                                                       }
                      }
                    , { 0xB4, 0x0C, DEADKEY_ACUTE, 13, { {'a', 0xE1}, {'A', 0xC1}
                                                       , {'e', 0xE9}, {'E', 0xC9}
                                                       , {'i', 0xED}, {'I', 0xCD}
                                                       , {'o', 0xF3}, {'O', 0xD3}
                                                       , {'u', 0xFA}, {'U', 0xDA}
                                                       , {'y', 0xFD}, {'Y', 0xDD}
                                                       , {' ', 0xB4}
                                                       }
                      }
                    , { 0x7E, 0x0D, DEADKEY_TILDE,  7, { {'a', 0xE3}, {'A', 0xC3}
                                                       , {'o', 0xF5}, {'O', 0xD5}
                                                       , {'n', 0xF1}, {'N', 0xD1}
                                                       , {' ', 0x7E}
                                                       }
                      }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x0807_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x0807_noshift[i]){
                        keylayout_WORK_noshift[i] = x0807_noshift[i] ;
                    }
                    if (x0807_shift[i]){
                        keylayout_WORK_shift[i] = x0807_shift[i] ;
                    }
                    if (x0807_altgr[i]){
                        keylayout_WORK_altgr[i] = x0807_altgr[i] ;
                    }
                    if (x0807_capslock[i]){
                        keylayout_WORK_capslock[i] = x0807_capslock[i] ;
                    }
                    if (x0807_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x0807_shiftcapslock[i] ;
                    }
                }

            }
            break;
            case 0x0809: // English UK
            {
                const KeyLayout_t x0809_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2d,   0x3d,    0x8,    0x9,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x5b,   0x5d,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x3b,
                    /*  48 */    0x27,   0x60,    0x0,   0x5c,   0x7a,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x2c,   0x2e,   0x2f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0809_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x40,   0x23,   0x24,   0x25,   0x5e,
                    /*  16 */    0x26,   0x2a,   0x28,   0x29,   0x5f,   0x2b,    0x8,    0x0,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0x7b,   0x7d,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x3a,
                    /*  48 */    0x22,   0x7e,    0x0,   0x7c,   0x5a,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x3c,   0x3e,   0x3f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0809_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2d,   0x3d,    0x8,    0x9,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0x5b,   0x5d,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x3b,
                    /*  48 */    0x27,   0x60,    0x0,   0x5c,   0x5a,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x2c,   0x2e,   0x2f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0809_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x2d,   0x3d,    0x8,    0x9,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x5b,   0x5d,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x3b,
                    /*  48 */    0x27,   0x60,    0x0,   0x5c,   0x7a,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x2c,   0x2e,   0x2f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0809_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x40,   0x23,   0x24,   0x25,   0x5e,
                    /*  16 */    0x26,   0x2a,   0x28,   0x29,   0x5f,   0x2b,    0x8,    0x0,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x7b,   0x7d,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x3a,
                    /*  48 */    0x22,   0x7e,    0x0,   0x7c,   0x7a,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x3c,   0x3e,   0x3f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x0809_noshift[i]){
                        keylayout_WORK_noshift[i] = x0809_noshift[i] ;
                    }
                    if (x0809_shift[i]){
                        keylayout_WORK_shift[i] = x0809_shift[i] ;
                    }
                    if (x0809_altgr[i]){
                        keylayout_WORK_altgr[i] = x0809_altgr[i] ;
                    }
                    if (x0809_capslock[i]){
                        keylayout_WORK_capslock[i] = x0809_capslock[i] ;
                    }
                    if (x0809_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x0809_shiftcapslock[i] ;
                    }
                }

            }
            break;
            case 0x080c: // French Belgium
            {
                const KeyLayout_t x080c_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x26,   0xe9,   0x22,   0x27,   0x28,   0x2d,
                    /*  16 */    0xe8,   0x5f,   0xe7,   0xe0,   0x29,   0x3d,    0x8,    0x9,
                    /*  24 */    0x61,   0x7a,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x5e,   0x24,    0xd,    0x0,   0x71,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x6d,
                    /*  48 */    0xf9,   0xb2,    0x0,   0x2a,   0x77,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x2c,   0x3b,   0x3a,   0x21,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x080c_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xb0,   0x2b,    0x8,    0x0,
                    /*  24 */    0x41,   0x5a,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xa8,   0xa3,    0xd,    0x0,   0x51,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x4d,
                    /*  48 */    0x25,   0x7e,    0x0,   0xb5,   0x57,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x3f,   0x2e,   0x2f,   0xa7,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x080c_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x26,   0xc9,   0x22,   0x27,   0x28,   0x2d,
                    /*  16 */    0xc8,   0x5f,   0xc7,   0xc0,   0x29,   0x3d,    0x8,    0x9,
                    /*  24 */    0x41,   0x5a,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0x5e,   0x24,    0xd,    0x0,   0x51,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x4d,
                    /*  48 */    0xd9,   0xb2,    0x0,   0x2a,   0x57,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x2c,   0x3b,   0x3a,   0x21,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x080c_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0xb9,   0x7e,   0x23,   0x7b,   0x5b,   0x7c,
                    /*  16 */    0x60,   0x5c,   0x5e,   0x40,   0x5d,   0x7d,    0x8,    0x9,
                    /*  24 */    0xe6,   0xab, 0x20ac,   0xb6,  0x167, 0x2190, 0x2193, 0x2192,
                    /*  32 */    0xf8,   0xfe,   0xa8,   0xa4,    0xd,    0x0,   0x40,   0xdf,
                    /*  40 */    0xf0,  0x111,  0x14b,  0x127,   0x6a,  0x138,  0x142,   0xb5,
                    /*  48 */    0x5e,   0xac,    0x0,   0x60,  0x142,   0xbb,   0xa2, 0x201c,
                    /*  56 */  0x201d,   0x6e,   0xb4,    0x0,   0xb7,    0x0,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x080c_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xb0,   0x2b,    0x8,    0x0,
                    /*  24 */    0x61,   0x7a,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xa8,   0xa3,    0xd,    0x0,   0x71,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x6d,
                    /*  48 */    0x25,   0x7e,    0x0,    0x0,   0x77,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x3f,   0x2e,   0x2f,   0xa7,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x080c_noshift[i]){
                        keylayout_WORK_noshift[i] = x080c_noshift[i] ;
                    }
                    if (x080c_shift[i]){
                        keylayout_WORK_shift[i] = x080c_shift[i] ;
                    }
                    if (x080c_altgr[i]){
                        keylayout_WORK_altgr[i] = x080c_altgr[i] ;
                    }
                    if (x080c_capslock[i]){
                        keylayout_WORK_capslock[i] = x080c_capslock[i] ;
                    }
                    if (x080c_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x080c_shiftcapslock[i] ;
                    }
                }
            }
            break;
            case 0x0813: // Dutch Belgium
            {
                const KeyLayout_t x0813_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x26,   0xe9,   0x22,   0x27,   0x28,   0x2d,
                    /*  16 */    0xe8,   0x21,   0xe7,   0xe0,   0x29,   0x2d,    0x8,    0x9,
                    /*  24 */    0x61,   0x7a,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x5e,   0x24,    0xd,    0x0,   0x71,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x6d,
                    /*  48 */    0xf9,   0xb2,    0x0,   0x2a,   0x77,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x2c,   0x3b,   0x3a,   0x3d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0813_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xb0,   0x5f,    0x8,    0x0,
                    /*  24 */    0x41,   0x5a,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xa8,   0xa3,    0xd,    0x0,   0x51,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x4d,
                    /*  48 */    0x25,   0x7e,    0x0,   0xb5,   0x57,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x3f,   0x2e,   0x2f,   0x2b,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0813_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x26,   0xc9,   0x22,   0x27,   0x28,   0x2d,
                    /*  16 */    0xc8,   0x5f,   0xc7,   0xc0,   0x29,   0x3d,    0x8,    0x9,
                    /*  24 */    0x41,   0x5a,   0x45,   0x52,   0x54,   0x59,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0x5e,   0x24,    0xd,    0x0,   0x51,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x4d,
                    /*  48 */    0xd9,   0xb2,    0x0,   0x2a,   0x57,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x2c,   0x3b,   0x3a,   0x21,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0813_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0xb9,   0x40,   0x23,   0x7b,   0x5b,   0x5e,
                    /*  16 */     0x0,    0x0,   0x7b,   0x7d,    0x0,    0x0,    0x8,    0x9,
                    /*  24 */    0xe6,   0xab, 0x20ac,   0xb6,  0x167, 0x2190, 0x2193, 0x2192,
                    /*  32 */    0xf8,   0xfe,   0x5b,   0x5d,    0xd,    0x0,   0x40,   0xdf,
                    /*  40 */    0xf0,  0x111,  0x14b,  0x127,   0x6a,  0x138,  0x142,   0xb5,
                    /*  48 */    0x27,   0x60,    0x0,   0x60,  0x142,   0xbb,   0xa2, 0x201c,
                    /*  56 */  0x201d,   0x6e,   0xb4,    0x0,   0xb7,   0x7e,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x0813_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xb0,   0x2b,    0x8,    0x0,
                    /*  24 */    0x61,   0x7a,   0x65,   0x72,   0x74,   0x79,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xa8,   0xa3,    0xd,    0x0,   0x71,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0x6d,
                    /*  48 */    0x25,   0x7e,    0x0,    0x0,   0x77,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x3f,   0x2e,   0x2f,   0xa7,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2e,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x0813_noshift[i]){
                        keylayout_WORK_noshift[i] = x0813_noshift[i] ;
                    }
                    if (x0813_shift[i]){
                        keylayout_WORK_shift[i] = x0813_shift[i] ;
                    }
                    if (x0813_altgr[i]){
                        keylayout_WORK_altgr[i] = x0813_altgr[i] ;
                    }
                    if (x0813_capslock[i]){
                        keylayout_WORK_capslock[i] = x0813_capslock[i] ;
                    }
                    if (x0813_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x0813_shiftcapslock[i] ;
                    }
                }
            }
            break;
            case 0x100c: // French Swizerland
            {
                const KeyLayout_t x100c_noshift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0x27,   0x3d,    0x8,    0x9,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x7a,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0x5b,   0x5d,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf6,
                    /*  48 */    0xe4,   0x5f,    0x0,   0x24,   0x79,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x100c_shift = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x2b,   0x22,   0x2a,    0x0,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x60,    0x8,    0x0,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x5a,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0x7b,   0x21,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0x3a,
                    /*  48 */    0x22,    0x0,    0x0,   0x23,   0x5a,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x100c_capslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x31,   0x32,   0x33,   0x34,   0x35,   0x36,
                    /*  16 */    0x37,   0x38,   0x39,   0x30,   0xdf,   0xb4,    0x8,    0x9,
                    /*  24 */    0x51,   0x57,   0x45,   0x52,   0x54,   0x5a,   0x55,   0x49,
                    /*  32 */    0x4f,   0x50,   0xdc,   0x2b,    0xd,    0x0,   0x41,   0x53,
                    /*  40 */    0x44,   0x46,   0x47,   0x48,   0x4a,   0x4b,   0x4c,   0xd6,
                    /*  48 */    0xc4,   0x5e,    0x0,   0x23,   0x59,   0x58,   0x43,   0x56,
                    /*  56 */    0x42,   0x4e,   0x4d,   0x2c,   0x2e,   0x2d,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x3c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x100c_altgr = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x7c,   0x40,   0x23,    0x0,    0x0,    0x0,
                    /*  16 */     0x0,   0x7c,    0x0,   0x5d,   0x60,   0x7e,    0x8,    0x9,
                    /*  24 */    0x40,  0x142, 0x20ac,   0xb6,  0x167, 0x2190, 0x2193, 0x2192,
                    /*  32 */     0x0,    0x0,   0x5b,   0x5d,    0xd,    0x0,   0xe6,   0xdf,
                    /*  40 */    0xf0,  0x111,  0x14b,  0x127,   0x6a,  0x138,  0x142,  0x2dd,
                    /*  48 */    0x7b,   0xac,    0x0,   0x7d,   0xab,   0xbb,   0xa2, 0x201c,
                    /*  56 */  0x201d,   0x6e,   0xb5,    0x0,   0xb7,    0x0,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  80 */     0x0,    0x0,   0x2d,    0x0,    0x0,    0x0,   0x2b,    0x0,
                    /*  88 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x7c,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };
                const KeyLayout_t x100c_shiftcapslock = {
                    /*   0 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*   8 */     0x0,   0x1b,   0x21,   0x22,   0xa7,   0x24,   0x25,   0x26,
                    /*  16 */    0x2f,   0x28,   0x29,   0x3d,   0x3f,   0x60,    0x8,    0x0,
                    /*  24 */    0x71,   0x77,   0x65,   0x72,   0x74,   0x7a,   0x75,   0x69,
                    /*  32 */    0x6f,   0x70,   0xfc,   0x2a,    0xd,    0x0,   0x61,   0x73,
                    /*  40 */    0x64,   0x66,   0x67,   0x68,   0x6a,   0x6b,   0x6c,   0xf6,
                    /*  48 */    0xe4,   0xb0,    0x0,   0x27,   0x79,   0x78,   0x63,   0x76,
                    /*  56 */    0x62,   0x6e,   0x6d,   0x3b,   0x3a,   0x5f,    0x0,   0x2a,
                    /*  64 */     0x0,   0x20,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /*  72 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,   0x37,
                    /*  80 */    0x38,   0x39,   0x2d,   0x34,   0x35,   0x36,   0x2b,   0x31,
                    /*  88 */    0x32,   0x33,   0x30,   0x2c,    0x0,    0x0,   0x3e,    0x0,
                    /*  96 */     0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                    /* 104 */     0x0,    0x0,    0x0,   0x7f,    0xd,    0x0,    0x0,    0x0,
                    /* 112 */    0x2f,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,    0x0,
                };

                const dkey_t x040c_deadkeys[5] = {
                      { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                    , { 0x00, 0x00, DEADKEY_NONE,   0, {} }
                };
                for(size_t i = 0 ; i < MAX_DEADKEYS ; i++) {
                    keylayout_WORK_deadkeys[i] = x040c_deadkeys[i];
                }

                for(size_t i = 0 ; i < 128 ; i++) {
                    if (x100c_noshift[i]){
                        keylayout_WORK_noshift[i] = x100c_noshift[i] ;
                    }
                    if (x100c_shift[i]){
                        keylayout_WORK_shift[i] = x100c_shift[i] ;
                    }
                    if (x100c_altgr[i]){
                        keylayout_WORK_altgr[i] = x100c_altgr[i] ;
                    }
                    if (x100c_capslock[i]){
                        keylayout_WORK_capslock[i] = x100c_capslock[i] ;
                    }
                    if (x100c_shiftcapslock[i]){
                        keylayout_WORK_shiftcapslock[i] = x100c_shiftcapslock[i] ;
                    }
                }
            }
            break;
            default:
            break;
        }
    } // END METHOD - init_layout

}; // END CLASS - Keymap2


#endif
