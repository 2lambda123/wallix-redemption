import os ;

# Returns environment value if it exists or default otherwise.
# Allow us to customize install path with shell variables like $PREFIX...
# (this is bad practice and should be replaced by a site configuration file
# but I until now I miserably failed creating a clean separate configuration file)
rule setvar ( env : default * )
{
    if [ os.environ $(env) ]
    {
        return [ os.environ $(env) ] ;
    }
    else
    {
        return $(default) ;
    }
}


constant FIXTURES_PATH : [ setvar FIXTURES_PATH : ../../tests/fixtures ] ;
constant INSTALLDIR : [ setvar DESTDIR : "" ] ;
constant PREFIX : [ setvar PREFIX : /usr/local ] ;
constant BIN_PREFIX : [ setvar BIN_PREFIX : $(PREFIX)/bin ] ;
constant LIB_PREFIX : [ setvar LIB_PREFIX : $(PREFIX)/lib ] ;
constant SHARE_PREFIX : [ setvar SHARE_PREFIX : $(PREFIX)/share/rdpproxy ] ;
constant RECORD_TMP_PATH : [ setvar RECORD_TMP_PATH : /var/rdpproxy/tmp ] ;
constant RECORD_PATH : [ setvar RECORD_PATH : /var/rdpproxy/recorded ] ;
constant ETC_PREFIX : [ setvar ETC_PREFIX : /etc/rdpproxy ] ;
constant CERT_PREFIX : [ setvar CERT_PREFIX : /etc/rdpproxy/cert ] ;
constant HASH_PATH : [ setvar HASH_PATH : /var/rdpproxy/hash ] ;
constant PERSISTENT_PATH : [ setvar PERSISTENT_PATH : /var/lib/redemption/cache ] ;
constant DRIVE_REDIRECTION_PATH : [ setvar DRIVE_REDIRECTION_PATH : /var/rdpproxy/drive_redirection ] ;


rule defines ( properties * )
{
    local defs ;
    defs += <define>SHARE_PATH='\"$(PREFIX)/share/rdpproxy\"' ;
    defs += <define>CFG_PATH='\"$(ETC_PREFIX)\"' ;
    defs += <define>RECORD_PATH='\"$(RECORD_PATH)\"' ;
    defs += <define>RECORD_TMP_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>FLV_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>OCR_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>PNG_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>WRM_PATH='\"$(RECORD_PATH)\"' ;
    defs += <define>HASH_PATH='\"$(HASH_PATH)\"' ;
    defs += <define>LICENSE_PATH='\"$(CERT_PREFIX)/rdplicense\"' ;
    defs += <define>CERTIF_PATH='\"$(CERT_PREFIX)/rdp\"' ;
    defs += <define>FIXTURES_PATH='\"$(FIXTURES_PATH)\"' ;
    defs += <define>PERSISTENT_PATH='\"$(PERSISTENT_PATH)\"' ;
    defs += <define>DRIVE_REDIRECTION_PATH='\"$(DRIVE_REDIRECTION_PATH)\"' ;
    if [ os.environ VERBOSE ]
    {
        defs += <define>VERBOSE ;
    }
    return $(defs) ;
}


constant CXXFLAGS-COMMON :
#     <cxxflags>-Weffc++
#     <cxxflags>-Wswitch-enum
#     <cxxflags>-Wswitch-default
    <cxxflags>-pedantic
    <cxxflags>-pedantic-errors
#    <cxxflags>-Wconversion
    <cxxflags>-Wvla
    <cxxflags>-Wstrict-aliasing=2
#    <cxxflags>-Wlong-long

    <cxxflags>-Wuninitialized
    <cxxflags>-Wnon-virtual-dtor
    <cxxflags>-Wall
    <cxxflags>-Wextra
    <cxxflags>-Wno-unused-parameter
    <cxxflags>-Wno-long-long
    <cxxflags>-Wtype-limits
    <cxxflags>-Wundef
    <cxxflags>-Wcast-align
    <cxxflags>-Wchar-subscripts
#     <cxxflags>-Wformat
    <cxxflags>-Wformat=2
    <cxxflags>-Wformat-security
#     <cxxflags>-Wmissing-format-attribute
    <cxxflags>-Wsequence-point
    <cxxflags>-Wreturn-type
    <cxxflags>-Wfloat-equal
#     <cxxflags>-Wshadow
    <cxxflags>-Wpointer-arith
    <cxxflags>-Wsign-compare
#     <cxxflags>-Wmissing-declarations
    <cxxflags>-Wpacked
    <cxxflags>-Wredundant-decls
#     <cxxflags>-Winline
    <cxxflags>-Winit-self
    <cxxflags>-Wcast-qual
    <cxxflags>-Woverloaded-virtual
    <cxxflags>-Wunused-variable
#     <cxxflags>-Wunused-parameter
    <cxxflags>-Wmissing-include-dirs
    <cxxflags>-Wunused
    <cxxflags>-Wendif-labels
    <cxxflags>-Wwrite-strings
#     <cxxflags>-Wpadded
    <cxxflags>-Wstrict-overflow=1
#     <cxxflags>-Wstrict-overflow=5
    <cxxflags>-Wc++11-compat
    <cxxflags>-Wnarrowing
    <cxxflags>-Wvolatile-register-var
    <cxxflags>-Wdisabled-optimization
    <cxxflags>-Wno-overlength-strings
    <cxxflags>-Warray-bounds
    <cxxflags>-Wold-style-cast

#     <toolset>clang:<cxxflags>-Weverything
#     <toolset>clang:<cxxflags>-Wno-c++98-compat
    <toolset>clang:<cxxflags>-Wno-mismatched-tags
#    <toolset>clang:<cxxflags>-Wno-overloaded-virtual
    <toolset>clang:<cxxflags>-Wno-char-subscripts
    <toolset>clang:<cxxflags>-Wno-unused-variable
#     <toolset>clang:<cxxflags>-Wno-unused-private-field
;


constant CXXFLAGS-GCC-4.7 :
    <cxxflags>-Wunused-but-set-parameter
    <cxxflags>-Wunused-but-set-variable
#     <cxxflags>-Wsuggest-attribute=pure
#     <cxxflags>-Wsuggest-attribute=const
    <cxxflags>-Wsuggest-attribute=noreturn
    <cxxflags>-Wzero-as-null-pointer-constant
    <cxxflags>-Wlogical-op
#     <cxxflags>-Wno-aggressive-loop-optimizations
    <cxxflags>-Wnormalized=nfc #disable ?
    <cxxflags>-Wvector-operation-performance
    <cxxflags>-Wdouble-promotion
   <cxxflags>-Wmaybe-uninitialized
    <cxxflags>-Wtrampolines
;


constant CXXFLAGS-GCC-4.8 :
    $(CXXFLAGS-GCC-4.7)
    <cxxflags>-Wuseless-cast
;


constant CXXFLAGS-GCC-4.9 :
    $(CXXFLAGS-GCC-4.8)
    <cxxflags>-Wconditionally-supported
    <cxxflags>-Wfloat-conversion
    <cxxflags>-Wopenmp-simd
    <cxxflags>-Wparentheses

    #<variant>release:<cxxflags>-flto
;


constant CXXFLAGS-GCC-5 :
    $(CXXFLAGS-GCC-4.9)
    <cxxflags>-Wlogical-not-parentheses
    <cxxflags>-Wswitch-bool
    <cxxflags>-Wsizeof-array-argument
    <cxxflags>-Wbool-compare
#    <cxxflags>-Wsuggest-final-types
#    <cxxflags>-Wsuggest-final-methods
#     <cxxflags>-Wsuggest-attribute=pure
#    <cxxflags>-Wsuggest-attribute=const
    #<variant>release:<cxxflags>-flto-odr-type-merging
    # <cxxflags>-Wno-odr #  Requires -flto-odr-type-merging to be enabled (enabled by ##default)
;


constant CXXFLAGS-GCC-5.1 :
    $(CXXFLAGS-GCC-5)
    <cxxflags>-Wsuggest-override
    <cxxflags>-fsized-deallocation
    <cxxflags>-Wsized-deallocation
    <cxxflags>-Warray-bounds=2
;


constant CXXFLAGS-GCC-6 :
    $(CXXFLAGS-GCC-5)
;


# switch [ modules.peek : ODSHOME ]
# {
#     case *gcc-4.8* : constant CXXFLAGS-GCC : $(CXXFLAGS-GCC-4.8) ;
#     case *gcc-4.9* : constant CXXFLAGS-GCC : $(CXXFLAGS-GCC-4.9) ;
#     case *gcc-5*   : constant CXXFLAGS-GCC : $(CXXFLAGS-GCC-5) ;
#     case *gcc-6*   : constant CXXFLAGS-GCC : $(CXXFLAGS-GCC-6) ;
# }


variant strict : :
    <cxxflags>-Wsign-conversion
;

variant asan : debug :
#    <cxxflags>-fsanitize=address
#    <cxxflags>-fsanitize=leak
#    <cxxflags>-fno-omit-frame-pointer
#    <linkflags>-lasan
#    <define>CXX_ENABLE_ASAN
;
constant LIB_SAN_DEPENDENCY :
    <variant>asan:<library>libasan
    <variant>asan:<cxxflags>-fsanitize=address
#    <variant>asan:<cxxflags>-fsanitize=leak
    <variant>asan:<cxxflags>-fno-omit-frame-pointer
    <variant>asan:<define>CXX_ENABLE_ASAN
;

project configs
    : requirements
    <include>src
    <include>include
    <include>../../src/
    <include>../../src/core

    <conditional>@defines

    <variant>debug:<define>REDASSERT_AS_ASSERT
    <variant>debug:<cxxflags>-g

    <cxxflags>-std=c++11


    $(CXXFLAGS-COMMON)
    <toolset>gcc-4.7:$(CXXFLAGS-GCC-4.7)
    <toolset>gcc-4.8:$(CXXFLAGS-GCC-4.8)
    <toolset>gcc-4.9:$(CXXFLAGS-GCC-4.9)
    <toolset>gcc-4.9.1:$(CXXFLAGS-GCC-4.9)
    <toolset>gcc-4.9.2:$(CXXFLAGS-GCC-4.9)
    <toolset>gcc-4.9.3:$(CXXFLAGS-GCC-4.9)
    <toolset>gcc-5.0:$(CXXFLAGS-GCC-5)
    <toolset>gcc-5.0.0:$(CXXFLAGS-GCC-5)
    <toolset>gcc-5.1.0:$(CXXFLAGS-GCC-5.1)
    <toolset>gcc-5.1:$(CXXFLAGS-GCC-5.1)
    <toolset>gcc-5.2.0:$(CXXFLAGS-GCC-5.1)
    <toolset>gcc-5.2:$(CXXFLAGS-GCC-5.1)
    <toolset>gcc-6.0:$(CXXFLAGS-GCC-6)
    <toolset>gcc-6.1:$(CXXFLAGS-GCC-6)

    <define>PUBLIC

   : default-build release
;

lib libasan : : <name>asan ;

constant AUTOGENDIR : include/configs/autogen ;
constant FILEGEN_CONF : $(AUTOGENDIR)/variables_configuration.hpp ;
constant FILEGEN_SPEC : $(AUTOGENDIR)/str_python_spec.hpp ;

actions generate_configs {
    $(>) \
        $(AUTOGENDIR)/authid.hpp \
        $(FILEGEN_CONF) \
        $(AUTOGENDIR)/set_value.tcc
}

actions generate_spec {
    $(>) $(FILEGEN_SPEC)
}

make $(FILEGEN_CONF) : make_cpp_config : @generate_configs : <location>. ;
make $(FILEGEN_SPEC) : make_python_spec : @generate_spec : <location>. ;

alias generate_configs : $(FILEGEN_CONF) ;
alias generate_spec : $(FILEGEN_SPEC) ;

exe make_cpp_config : src/configs/write_cpp_config.cpp : $(LIB_SAN_DEPENDENCY) ;
exe make_python_spec : src/configs/write_python_spec.cpp : $(LIB_SAN_DEPENDENCY) ;

actions cp_config {
    dirinstall=../../include/configs
    mkdir -p $dirinstall && \
    cp -R \
        include/configs/* \
        src/configs/types.hpp \
        src/configs/parse.hpp \
        src/configs/mk_enum_def.hpp \
        src/configs/mk_enum_undef.hpp \
        src/configs/c_str_buf.hpp \
        src/configs/config.hpp \
        src/configs/config_access.hpp \
        $dirinstall && \
    find $dirinstall -type f -exec \
        sed -i '1,+0i//\n// ATTENTION -- This file is auto-generated\n//\n' \
        '{}' +
}


alias generate : generate_spec generate_configs ;

make install : generate : @cp_config ;
explicit install ;


lib libboost_unit_test : : <name>boost_unit_test_framework <link>shared ;

import testing ;

constant LIB_TEST_DEPENDENCY : <library>libboost_unit_test ;

constant TEST_DEPENDENCIES :
    $(LIB_SAN_DEPENDENCY)
    $(LIB_TEST_DEPENDENCY)
    <implicit-dependency>generate_configs
    <implicit-dependency>generate_spec
;

## Tests
## @{
unit-test test_config : tests/test_config.cpp : $(TEST_DEPENDENCIES) ;
unit-test test_config_assign : tests/test_config_assign.cpp : $(TEST_DEPENDENCIES) ;
## }
