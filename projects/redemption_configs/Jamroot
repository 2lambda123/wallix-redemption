REDEMPTION_CONFIG_PATH ?= . ;
REDEMPTION_PUBLIC_PATH ?= ../.. ;
REDEMPTION_INCLUDE_PATH ?= $(REDEMPTION_PUBLIC_PATH)/include ;

include ../../jam/redemption-config.jam ;
include ../../jam/cxxflags.jam ;
include ../../jam/defines.jam ;
include ../../jam/sanitizer.jam ;

project configs
    : requirements
    <include>$(REDEMPTION_CONFIG_PATH)/src
    <include>$(REDEMPTION_CONFIG_PATH)/autogen/include
    <include>$(REDEMPTION_CONFIG_PATH)/configs_specs
    <include>$(REDEMPTION_INCLUDE_PATH)
    <include>$(REDEMPTION_SRC_PATH)
    <include>$(SYSTEM_SRC_PATH)

    $(REDEMPTION_CXXFLAGS)
    <toolset>clang:<cxxflags>-Wno-class-varargs

   : default-build debug
;

constant AUTOGEN_SPEC_DIR : autogen/spec ;
constant AUTOGEN_INC_DIR : autogen/include/configs/autogen ;
constant FILEGEN_ENUM : $(AUTOGEN_INC_DIR)/enums.hpp ;
constant FILEGEN_CONF : $(AUTOGEN_INC_DIR)/variables_configuration.hpp ;

actions generate_cpp_enumeration
{
    $(>) $(FILEGEN_ENUM) $(AUTOGEN_INC_DIR)/enums_func_ini.hpp $(AUTOGEN_INC_DIR)/enums_func_ini.tcc
}

actions generate_config_spec
{
    $(>) || return 1

    # auto gen RDP connection policy
    echo -n '//
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
//

R"xxxyyyzzz(' > autogen/include/configs/autogen/rdp_cp_spec.hpp
    cat autogen/spec/rdp.spec >> autogen/include/configs/autogen/rdp_cp_spec.hpp
    echo ')xxxyyyzzz"' >> autogen/include/configs/autogen/rdp_cp_spec.hpp

    # auto gen VNC connection policy
    echo -n '//
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
//

R"xxxyyyzzz(' > autogen/include/configs/autogen/vnc_cp_spec.hpp
    cat autogen/spec/vnc.spec >> autogen/include/configs/autogen/vnc_cp_spec.hpp
    echo ')xxxyyyzzz"' >> autogen/include/configs/autogen/vnc_cp_spec.hpp

    # auto gen connection policy mapping for sesman
    echo -n '//
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
//

R"xxxyyyzzz(' > autogen/include/configs/autogen/cp_mapping.hpp
    cat ../../tools/sesman/sesmanworker/sesmanconnpolicyspec.py >> autogen/include/configs/autogen/cp_mapping.hpp
    echo ')xxxyyyzzz"' >> autogen/include/configs/autogen/cp_mapping.hpp
}

rule create_generator ( name : file : requirements * )
{
    make $(file) : make_$(name) $(requirements) : @generate_$(name) : <location>. ;
    alias generate_$(name) : $(file) ;
    exe make_$(name) : src/configs/write_$(name).cpp : <library>keymap <library>log_test.o ;
}

obj error.o : $(REDEMPTION_SRC_PATH)/core/error.cpp : <define>NDEBUG ;
obj keymap : $(REDEMPTION_SRC_PATH)/keyboard/keymap2.cpp : ;

create_generator cpp_enumeration : $(FILEGEN_ENUM) ;
create_generator config_spec : $(FILEGEN_CONF) ;

alias generate :
    generate_cpp_enumeration
    generate_config_spec
;


include ../../jam/testing-coverage.jam ;

obj font.o : $(REDEMPTION_SRC_PATH)/core/font.cpp ;
obj cfgloader.o : $(REDEMPTION_SRC_PATH)/utils/cfgloader.cpp ;
obj strutils.o : $(REDEMPTION_SRC_PATH)/utils/strutils.cpp ;
obj fileutils.o : $(REDEMPTION_SRC_PATH)/utils/fileutils.cpp ;
obj hexdump.o : $(REDEMPTION_SRC_PATH)/utils/hexdump.cpp ;
obj app_path_test.o : $(REDEMPTION_SRC_PATH)/core/app_path.cpp :
    <conditional>@defines-for-test
    <define>SHARE_PATH='\"\"'
    <define>CFG_PATH='\"$(REDEMPTION_SYS_PATH)/etc/rdpproxy/\"'
;

obj config.o : redemption_src/configs/config.cpp
:
    <include>redemption_src
    <implicit-dependency>generate_config_spec
    <implicit-dependency>generate_cpp_enumeration
;

rule test-run ( name )
{
    unit-test $(name) : tests/$(name).cpp generate_config_spec :
        $(TEST_DEPENDENCIES)
        <library>app_path_test.o
        <library>cfgloader.o
        <library>config.o
        <library>error.o
        <library>strutils.o
        <library>fileutils.o
        <library>font.o
        <library>hexdump.o
        # <cxxflags>-frtti
        <include>redemption_src
        <conditional>@defines-for-test
    ;

}

## Tests
## @{
test-run test_config ;
test-run test_parser ;
test-run test_config_assign ;
test-run test_include ;
## }
