// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
// 

#pragma once

#include "configs/zbuffer.hpp"
#include "configs/autogen/enums.hpp"


namespace configs
{

template<>
struct str_buffer_size<Level>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<Language>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<ClipboardEncodingType>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<ColorDepth>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<ServerCertCheck>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<TraceType>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<KeyboardInputMaskingLevel>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<SessionProbeOnLaunchFailure>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<VncBogusClipboardInfiniteLoop>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<ColorDepthSelectionStrategy>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<WrmCompressionAlgorithm>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<RdpCompression>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<OcrVersion>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<OcrLocale>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<BogusNumberOfFastpathInputEvent>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<SessionProbeOnKeepaliveTimeout>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<SmartVideoCropping>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<RdpModeConsole>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<RdpStoreFile>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<SessionProbeOnAccountManipulation>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<ClientAddressSent>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<SessionProbeLogLevel>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<ModRdpUseFailureSimulationSocketTransport>
{
    static const std::size_t value = 0;
};

template<>
struct str_buffer_size<LoginLanguage>
{
    static const std::size_t value = 0;
};

} // namespace config
