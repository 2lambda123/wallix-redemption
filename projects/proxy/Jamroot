#import gcc ;
import os ;

# below feature rule come from http://www.boost.org/doc/tools/build/doc/html/bbv2/extending/features.html

import feature : feature ;
import modules : poke ;

# this feature is defined so we can add a dependency on <distri>lenny for some targets
# disabled because in our current code it finds the right library
#feature distri : none lenny : propagated ;

# No need to make it a new variant after all
#variant lenny : release ;

path-constant TOP : . ;
constant SRCDIR : ../../src ;
constant INCLUDEDIR : ../../include ;
constant TESTDIR : ../../tests ;
constant MODULEDIR : ../../modules ;

#echo "toolset" [ feature.get-values toolset ] ;

# Returns environment value if it exists or default otherwise.
# Allow us to customize install path with shell variables like $PREFIX...
# (this is bad practice and should be replaced by a site configuration file
# but I until now I miserably failed creating a clean separate configuration file)
rule setvar ( env : default * )
{
    if [ os.environ $(env) ]
    {
        return [ os.environ $(env) ] ;
    }
    else
    {
        return $(default) ;
    }
}

constant ARCH : [ SHELL "lscpu | perl -ne 'if (/^Architecture.*(x86_64|i386|i686)/) {print $1};'" ] ;
# constant ARCH : [ SHELL "lscpu | perl -ane 'my %h = map { $F[0], $F[1] } <>; print $h{q{Architecture:}}'" ] ;
constant PYTHON_VER : [ SHELL "perl -e 'for my $x (q{python2.7}, q{python2.6}) { if (-e q{/usr/include/}.$x.q{/Python.h}){ print $x; last;}};'" ] ;
constant PYTHON_INCLUDE : [ SHELL "perl -e 'for my $x (q{python2.7}, q{python2.6}) { if (-e q{/usr/include/}.$x.q{/Python.h}){ print q{/usr/include/}.$x; last;}};'" ] ;


constant FIXTURES_PATH : [ setvar FIXTURES_PATH : $(TESTDIR)/fixtures ] ;
constant INSTALLDIR : [ setvar DESTDIR : "" ] ;
constant PREFIX : [ setvar PREFIX : /usr/local ] ;
constant BIN_PREFIX : [ setvar BIN_PREFIX : $(PREFIX)/bin ] ;
constant LIB_PREFIX : [ setvar LIB_PREFIX : $(PREFIX)/lib ] ;
constant SHARE_PREFIX : [ setvar SHARE_PREFIX : $(PREFIX)/share/rdpproxy ] ;
constant RECORD_TMP_PATH : [ setvar RECORD_TMP_PATH : /var/rdpproxy/tmp ] ;
constant RECORD_PATH : [ setvar RECORD_PATH : /var/rdpproxy/recorded ] ;
constant ETC_PREFIX : [ setvar ETC_PREFIX : /etc/rdpproxy ] ;
constant CERT_PREFIX : [ setvar CERT_PREFIX : /etc/rdpproxy/cert ] ;
constant HASH_PATH : [ setvar HASH_PATH : /var/rdpproxy/hash ] ;
constant PERSISTENT_PATH : [ setvar PERSISTENT_PATH : /var/lib/redemption/cache ] ;
constant DRIVE_REDIRECTION_PATH : [ setvar DRIVE_REDIRECTION_PATH : /var/rdpproxy/drive_redirection ] ;

constant COVERAGE_PREFIX : [ setvar COVERAGE_PREFIX : "" ] ;

constant PNG_DEBUG : <variant>debug:<library>png ;

rule defines ( properties * )
{
    local defs ;
    defs += <define>SHARE_PATH='\"$(PREFIX)/share/rdpproxy\"' ;
    defs += <define>CFG_PATH='\"$(ETC_PREFIX)\"' ;
    defs += <define>RECORD_PATH='\"$(RECORD_PATH)\"' ;
    defs += <define>RECORD_TMP_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>FLV_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>OCR_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>PNG_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>WRM_PATH='\"$(RECORD_PATH)\"' ;
    defs += <define>HASH_PATH='\"$(HASH_PATH)\"' ;
    defs += <define>LICENSE_PATH='\"$(CERT_PREFIX)/rdplicense\"' ;
    defs += <define>CERTIF_PATH='\"$(CERT_PREFIX)/rdp\"' ;
    defs += <define>FIXTURES_PATH='\"$(FIXTURES_PATH)\"' ;
    defs += <define>PERSISTENT_PATH='\"$(PERSISTENT_PATH)\"' ;
    defs += <define>DRIVE_REDIRECTION_PATH='\"$(DRIVE_REDIRECTION_PATH)\"' ;
    if [ os.environ VERBOSE ]
    {
        defs += <define>VERBOSE ;
    }
    return $(defs) ;
}
variant coverage : debug : <cxxflags>--profile-arcs <cxxflags>--test-coverage <cxxflags>--coverage <link>shared ;


constant CXXFLAGS-COMMON :
#     <cxxflags>-Weffc++
#     <cxxflags>-Wswitch-enum
#     <cxxflags>-Wswitch-default
    <cxxflags>-pedantic
    <cxxflags>-pedantic-errors
#    <cxxflags>-Wconversion
    <cxxflags>-Wvla
    <cxxflags>-Wstrict-aliasing=2
#    <cxxflags>-Wlong-long

    <cxxflags>-Wuninitialized
    <cxxflags>-Wnon-virtual-dtor
    <cxxflags>-Wall
    <cxxflags>-Wextra
    <cxxflags>-Wno-unused-parameter
    <cxxflags>-Wno-long-long
    <cxxflags>-Wtype-limits
    <cxxflags>-Wundef
    <cxxflags>-Wcast-align
    <cxxflags>-Wchar-subscripts
#     <cxxflags>-Wformat
    <cxxflags>-Wformat=2
    <cxxflags>-Wformat-security
#     <cxxflags>-Wmissing-format-attribute
    <cxxflags>-Wsequence-point
    <cxxflags>-Wreturn-type
    <cxxflags>-Wfloat-equal
#     <cxxflags>-Wshadow
    <cxxflags>-Wpointer-arith
    <cxxflags>-Wsign-compare
#     <cxxflags>-Wmissing-declarations
    <cxxflags>-Wpacked
    <cxxflags>-Wredundant-decls
#     <cxxflags>-Winline
    <cxxflags>-Winit-self
    <cxxflags>-Wcast-qual
    <cxxflags>-Woverloaded-virtual
    <cxxflags>-Wunused-variable
#     <cxxflags>-Wunused-parameter
    <cxxflags>-Wmissing-include-dirs
    <cxxflags>-Wunused
    <cxxflags>-Wendif-labels
    <cxxflags>-Wwrite-strings
#     <cxxflags>-Wpadded
    <cxxflags>-Wstrict-overflow=1
#     <cxxflags>-Wstrict-overflow=5
    <cxxflags>-Wc++11-compat
    <cxxflags>-Wnarrowing
    <cxxflags>-Wvolatile-register-var
    <cxxflags>-Wdisabled-optimization
    <cxxflags>-Wno-overlength-strings
    <cxxflags>-Warray-bounds
    <cxxflags>-Wold-style-cast

#     <toolset>clang:<cxxflags>-Weverything
#     <toolset>clang:<cxxflags>-Wno-c++98-compat
    <toolset>clang:<cxxflags>-Wno-mismatched-tags
#    <toolset>clang:<cxxflags>-Wno-overloaded-virtual
    <toolset>clang:<cxxflags>-Wno-char-subscripts
    <toolset>clang:<cxxflags>-Wno-unused-variable
#     <toolset>clang:<cxxflags>-Wno-unused-private-field
;


constant CXXFLAGS-GCC-4.7 :
    <cxxflags>-Wunused-but-set-parameter
    <cxxflags>-Wunused-but-set-variable
#     <cxxflags>-Wsuggest-attribute=pure
#     <cxxflags>-Wsuggest-attribute=const
    <cxxflags>-Wsuggest-attribute=noreturn
    <cxxflags>-Wzero-as-null-pointer-constant
    <cxxflags>-Wlogical-op
#     <cxxflags>-Wno-aggressive-loop-optimizations
    <cxxflags>-Wnormalized=nfc #disable ?
    <cxxflags>-Wvector-operation-performance
    <cxxflags>-Wdouble-promotion
   <cxxflags>-Wmaybe-uninitialized
    <cxxflags>-Wtrampolines
;


constant CXXFLAGS-GCC-4.8 :
    $(CXXFLAGS-GCC-4.7)
    <cxxflags>-Wuseless-cast
;


constant CXXFLAGS-GCC-4.9 :
    $(CXXFLAGS-GCC-4.8)
    <cxxflags>-Wconditionally-supported
    <cxxflags>-Wfloat-conversion
    <cxxflags>-Wopenmp-simd
    <cxxflags>-Wparentheses

    <variant>release:<cxxflags>-flto
;


constant CXXFLAGS-GCC-5 :
    $(CXXFLAGS-GCC-4.9)
    <cxxflags>-Wlogical-not-parentheses
    <cxxflags>-Wswitch-bool
    <cxxflags>-Wsizeof-array-argument
    <cxxflags>-Wbool-compare
#    <cxxflags>-Wsuggest-final-types
#    <cxxflags>-Wsuggest-final-methods
#     <cxxflags>-Wsuggest-attribute=pure
#    <cxxflags>-Wsuggest-attribute=const
    <variant>release:<cxxflags>-flto-odr-type-merging
    # <cxxflags>-Wno-odr #  Requires -flto-odr-type-merging to be enabled (enabled by ##default)
;


constant CXXFLAGS-GCC-5.1 :
    $(CXXFLAGS-GCC-5)
    <cxxflags>-Wsuggest-override
    <cxxflags>-fsized-deallocation
    <cxxflags>-Wsized-deallocation
    <cxxflags>-Warray-bounds=2
;


constant CXXFLAGS-GCC-6 :
    $(CXXFLAGS-GCC-5)
;


# switch [ modules.peek : ODSHOME ]
# {
#     case *gcc-4.8* : constant CXXFLAGS-GCC : $(CXXFLAGS-GCC-4.8) ;
#     case *gcc-4.9* : constant CXXFLAGS-GCC : $(CXXFLAGS-GCC-4.9) ;
#     case *gcc-5*   : constant CXXFLAGS-GCC : $(CXXFLAGS-GCC-5) ;
#     case *gcc-6*   : constant CXXFLAGS-GCC : $(CXXFLAGS-GCC-6) ;
# }


#gcov -a -c -b -f -o bin/gcc-4.6/coverage/tests/test_stream.gcno bin/gcc-4.6/coverage/test_stream

lib gcov : : <name>gcov : ;

constant GCOV : <variant>coverage:<library>gcov ;
constant GCOV_NO_BUILD : <variant>coverage:<build>no ;

variant strict : :
    <cxxflags>-Wsign-conversion
;

variant asan : debug :
#    <cxxflags>-fsanitize=address
#    <cxxflags>-fsanitize=leak
#    <cxxflags>-fno-omit-frame-pointer
#    <linkflags>-lasan
#    <define>CXX_ENABLE_ASAN
;
constant LIB_SAN_DEPENDENCY :
    <variant>asan:<library>libasan
    <variant>asan:<cxxflags>-fsanitize=address
#    <variant>asan:<cxxflags>-fsanitize=leak
    <variant>asan:<cxxflags>-fno-omit-frame-pointer
    <variant>asan:<define>CXX_ENABLE_ASAN
;

project redemption
    : requirements
    <include>$(SRCDIR)
    <include>$(INCLUDEDIR)
    <include>$(SRCDIR)/system/linux
    <include>$(SRCDIR)/core
    <include>$(SRCDIR)/mod
    <include>$(SRCDIR)/front
    <include>$(SRCDIR)/acl
    <include>$(SRCDIR)/capture
    <include>$(SRCDIR)/keyboard
    <include>$(SRCDIR)/keyboard/reversed_keymaps
    <include>$(SRCDIR)/regex
    <include>$(SRCDIR)/headers
    <include>$(SRCDIR)/main
    <include>$(MODULEDIR)/includes
    <include>/usr/include

    <conditional>@defines

    <variant>debug:<define>REDASSERT_AS_ASSERT
    <variant>debug:<cxxflags>-g

    <cxxflags>-std=c++11


    $(CXXFLAGS-COMMON)
    <toolset>gcc-4.7:$(CXXFLAGS-GCC-4.7)
    <toolset>gcc-4.8:$(CXXFLAGS-GCC-4.8)
    <toolset>gcc-4.9:$(CXXFLAGS-GCC-4.9)
    <toolset>gcc-4.9.1:$(CXXFLAGS-GCC-4.9)
    <toolset>gcc-4.9.2:$(CXXFLAGS-GCC-4.9)
    <toolset>gcc-4.9.3:$(CXXFLAGS-GCC-4.9)
    <toolset>gcc-5.0:$(CXXFLAGS-GCC-5)
    <toolset>gcc-5.0.0:$(CXXFLAGS-GCC-5)
    <toolset>gcc-5.1.0:$(CXXFLAGS-GCC-5.1)
    <toolset>gcc-5.1:$(CXXFLAGS-GCC-5.1)
    <toolset>gcc-5.2.0:$(CXXFLAGS-GCC-5.1)
    <toolset>gcc-5.2.1:$(CXXFLAGS-GCC-5.1)
    <toolset>gcc-5.2:$(CXXFLAGS-GCC-5.1)
    <toolset>gcc-6.0:$(CXXFLAGS-GCC-6)
    <toolset>gcc-6.1:$(CXXFLAGS-GCC-6)

#    <cxxflags>-fpie
    <cxxflags>-fPIC


    <define>_FILE_OFFSET_BITS=64
    <define>_LARGEFILE64_SOURCE

    <define>__STDC_FORMAT_MACROS

    <define>PUBLIC

   : default-build release

;

explicit install instexe install-bin install-etc install-etc-themes install-share install-lib check_coverage exe ;

alias instexe : install-bin ;
alias install : install-bin install-etc install-etc-themes install-share install-lib ;
alias exe     : rdpproxy rdptproxy rdptanalyzer rdpclient ;
alias libs    : libredver libreddec libredrec ;


install install-bin
    : exe
    : <install-type>EXE <install-dependencies>on
    : <location>$(INSTALLDIR)/usr/local/bin
    ;

install install-share
    : [ glob sys/share/rdpproxy/[^.k]* ]
    :
    : <location>$(INSTALLDIR)/usr/local/share/rdpproxy
    ;

install install-etc
    : [ glob sys/etc/rdpproxy/*ini sys/etc/rdpproxy/*pem sys/etc/rdpproxy/*crt sys/etc/rdpproxy/*key sys/etc/rdpproxy/*p12 ]
    :
    : <location>$(INSTALLDIR)/etc/rdpproxy
    ;

install install-etc-themes
    : [ glob sys/etc/rdpproxy/themes/HOWTO ]
    :
    : <location>$(INSTALLDIR)/etc/rdpproxy/themes
    ;

install install-lib
    : libs
    :
    : <location>$(INSTALLDIR)/usr/lib
    ;

actions gen_redcryptofile {
    echo "$(>)" "$(<)" ;
    cp "$(>)" "$(<)"
    cp "$(<)" tools/redcryptofile/redcryptofile.so
}

explicit pycryptofile redcryptofile.so ;

lib pycryptofile :
        tools/redcryptofile/pycrypto.cpp
    :
        <define>REDPYTHON_BINDING
        <include>$(PYTHON_INCLUDE)
        <cxxflags>-fPIC
        <cflags>-fPIC
        <link>shared
        <library>snappy
        <library>python2
        <library>crypto
    ;

make redcryptofile.so
    :
        pycryptofile
    :
        @gen_redcryptofile
    ;

lib libboost_unit_test : : <name>boost_unit_test_framework <link>shared ;
lib openssl : : <name>ssl <link>shared ;
# lib X11 : : <name>X11 <link>shared ;
# lib Xfixes : : <name>Xfixes <link>static ;
# lib pthread : : <name>pthread <link>shared ;
# lib pam : : <name>pam <link>static ;

lib krb5 : : <name>krb5 <link>shared ;
lib gssglue : : <name>gssglue <link>shared ;

lib crypto : : <name>crypto <link>shared ;
lib z : : <name>z <link>shared ;
lib snappy : : <name>snappy <link>shared ;
# lib lzma : : <name>lzma <link>shared ;
lib dl : : <name>dl <link>shared ;
lib python2 : : <name>$(PYTHON_VER) <link>shared ;


# lib lcms : : <name>lcms <link>shared ;

# lib tiff : : <name>tiff <link>static ;
# lib freetype : : <name>freetype <link>static ;
# lib jpeg : : <name>jpeg <link>static ;
# lib Xext : : <name>Xext <link>static ;

lib libpng : : <name>png <link>shared ;
alias png : libpng z ;

# lib icuuc : : <name>icuuc ;

lib libasan : libboost_unit_test openssl krb5 gssglue crypto snappy png dl python2 : <name>asan ;

obj mainloop : $(SRCDIR)/core/mainloop.cpp ;
obj d3des : $(SRCDIR)/utils/d3des.cpp ;
obj bitmap : $(SRCDIR)/utils/bitmap_data_allocator.cpp ;
obj program_options : $(MODULEDIR)/program_options/src/program_options.cpp ;

constant LIB_TEST_DEPENDENCY : <library>libboost_unit_test ;

constant EXE_DEPENDENCIES : $(LIB_SAN_DEPENDENCY) $(GCOV) ;
constant TEST_DEPENDENCIES : <include>$(TESTDIR) $(LIB_SAN_DEPENDENCY) $(LIB_TEST_DEPENDENCY) $(GCOV) ;


#
# Redemption
#

exe rdpproxy
    :
        $(SRCDIR)/main/main.cpp
        bitmap
        program_options

        mainloop

        d3des

        openssl
        crypto
        z
        dl
        png

        snappy
#        lzma

        krb5
        gssglue
    :
#         <link>static
        $(EXE_DEPENDENCIES)
    ;

lib libredrec
    :
        $(SRCDIR)/main/do_recorder.cpp
        bitmap
        program_options

        openssl
        crypto
        png
        z
        dl

        snappy
    :
        <cxxflags>-fPIC
        <cxxflags>-fvisibility=hidden
    ;

lib libreddec
    :
        $(SRCDIR)/main/do_decrypter.cpp
        program_options

        openssl
        crypto
        z
        dl

        snappy
    :
        <cxxflags>-fPIC
        <cxxflags>-fvisibility=hidden
    ;

lib libredver
    :
        $(SRCDIR)/main/do_verifier.cpp
        program_options

        openssl
        crypto
        z
        dl

        snappy
    :
        <cxxflags>-fPIC
        <cxxflags>-fvisibility=hidden
    ;

exe rdptproxy
    :
        $(SRCDIR)/main/transparent.cpp
        bitmap
        program_options

        openssl
        crypto
        png
        z
        dl

        snappy
#        lzma

        krb5
        gssglue
    :
#         <link>static
        $(EXE_DEPENDENCIES)
    ;

exe rdptanalyzer
    :
        $(SRCDIR)/main/tanalyzer.cpp
        program_options

        openssl
        crypto
        png
        z
        dl

        snappy

        krb5
        gssglue
    :
#         <link>static
        $(EXE_DEPENDENCIES)
    ;

exe rdpclient
    : $(SRCDIR)/main/rdp_client.cpp
        program_options
        bitmap
        openssl
        crypto
        png
        z
        dl

        snappy
        krb5
        gssglue
    :
        $(EXE_DEPENDENCIES)
    ;


#
# Functional tests (run by hand)
#

exe tls_test_client
    :
        $(SRCDIR)/ftests/tls_test_client.cpp openssl crypto png dl snappy
    :
#         <link>static
        $(EXE_DEPENDENCIES)
 ;
exe tls_test_server
    :
        $(SRCDIR)/ftests/tls_test_server.cpp openssl crypto png dl snappy
    :
#         <link>static
        $(EXE_DEPENDENCIES)
;

exe make_cpp_config
    : $(SRCDIR)/main/write_cpp_config.cpp
    : <variant>asan:<library>libasan $(GCOV)
;

explicit make_cpp_config ;


#exe freetype_draw : ftests/freetype_draw.cpp freetype
#    : <link>static <variant>coverage:<library>gcov
#;

#add flag -I/usr/include/freetype2

#
# Unit Tests
#

#import testing-coverage ;
import testing ;

import type ;
type.register PYTHON : py ;

actions nop { }

import toolset ;

feature.feature <covfile> : : free ;
toolset.flags cover COVERFILE : <covfile> ;

feature.feature <covflag> : : free ;
toolset.flags cover COVERFLAG : <covflag> ;

actions cover
{
    echo "Computing coverage for $(COVERFILE)"
    if [ "++ $(COVERFLAG) ++" = "++ nocover ++" ]; then
        if [ ! -e "$(SRCDIR)/$(COVERFILE)" ]; then
            echo "source file $(SRCDIR)/$(COVERFILE) missing"
        fi
        echo "NO COVERAGE"
        touch "$(<)"
    else
        # echo "COVERFILE = $(COVERFILE)"
        # echo "source = $(>)"
        # echo "target = $(<)"
        mkdir -p $(COVERAGE_PREFIX)coverage/$(COVERFILE)
        if [ ! -e $(>:S=.gcno) ]; then
            echo "coverage file $(>:S=.gcno) does not exist"
            exit 1
        fi
        
        #echo "gcov --unconditional-branches --all-blocks --branch-count --branch-probabilities --function-summaries --demangled-names -o $(>:S=.gcno) $(>:S=) > $(COVERAGE_PREFIX)coverage/$(COVERFILE)/report.coverage"
        gcov --unconditional-branches --all-blocks --branch-count --branch-probabilities --function-summaries --demangled-names -o $(>:S=.gcno) $(>:S=) > $(COVERAGE_PREFIX)coverage/$(COVERFILE)/report.coverage
        if [ $? = "0" ]; then
        
            mv *.gcov $(COVERAGE_PREFIX)coverage/$(COVERFILE)
            if [ $? = "0" ]; then

                if [ ! -e "$(SRCDIR)/$(COVERFILE)" ]; then
                    echo "source file $(SRCDIR)/$(COVERFILE) missing"
                    exit 1
                fi

                # If no gcov file available for coverage target create an empty one
                if [ ! -e "$(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).gcov" ]; then
                    touch $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).gcov
                fi
                
                etags -o $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).TAGS $(SRCDIR)/$(COVERFILE)
                if [ $? = "0" ]; then
                    python tools/coverage.py $(COVERFILE) $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).TAGS $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).gcov $(SRCDIR) > $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).report
                    cat $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).report
                    touch $(<)
                else
                    echo "etags failed"
                    exit 1
                fi
            else
                echo "gcov mv failed"
                exit 1
            fi
        else
            echo "gcov failed"
            exit 1
        fi
    fi
}

rule test-run ( target : sources + : tested ? : requirements * )
{
#    ECHO " TEST RUN" ;
    sources = $(TESTDIR)/$(sources) ;
    local base = [ MATCH "test_(.*)$" : $(sources[0]:B) ] ;
    local basepath = "" ;
    local path = $(sources[0]:P) ;
    while $(path) != $(TESTDIR) {
        basepath = $(path:B)/$(basepath) ;
        path = $(path:P) ;
    }

#    ECHO "base = $(base)" ;
#    ECHO "sources = $(sources)" ;
#    ECHO "target = $(target)" ;
    run $(sources) : : : $(requirements) $(TEST_DEPENDENCIES) : $(target) ;

    if ($(tested)) {
        make $(target:S=.coverage) : $(target) : nop 
            : <variant>coverage:<action>@cover 
              <covfile>$(tested) $(requirements)
            ;
    }
}

rule test-canonical ( base : requirements * )
{
    #basetarget = $(base:B) ;
    #base = $(base:P) ;
    #echo "base=" $(base) ;
    #while "$(base)" != "" {
    #    basetarget = $(base:B)_$(basetarget) ;
    #    base = $(base:P) ;
    #}
    #target = test_$(basetarget) ;
    
    target = test_$(base:B) ;
    source = $(base:P)/test_$(base:B).cpp ;
    tested = $(base) ;

    #echo "target=" $(target) ;
    #echo "source=" $(source) ;
    #echo "tested=" $(tested) ;

    
    test-run $(target) : $(source) : $(tested) : $(requirements) ;
}


# To compute coverage
# ===================
# bjam coverage test_utf.coverage 

## Acl tests
## @{
test-canonical acl/acl_serializer.hpp ;
test-canonical acl/authentifier.hpp : <library>crypto <library>png ;
test-canonical acl/module_manager.hpp : <library>crypto <library>png ;
## @}

## Capture tests
## @{
test-canonical capture/CaptureDevice.hpp ;
test-canonical capture/capture.hpp 
    : <library>bitmap <library>crypto <library>dl <library>png <library>z <library>snappy 
    ;
test-canonical capture/chunked_image_transport.hpp 
    : <library>bitmap <library>png <library>z <library>snappy <library>crypto 
    ;
test-canonical capture/ChunkToFile.hpp 
    ;
test-canonical capture/FileToChunk.hpp 
    : <library>png 
    ;

test-canonical capture/FileToGraphic.hpp 
    : <library>bitmap <library>png <library>snappy <library>crypto 
    ;

test-canonical capture/GraphicToFile.hpp 
    : <library>bitmap <library>png <library>crypto <library>snappy 
#    : <library>bitmap <library>png <library>z <library>snappy <library>crypto 
    ;

test-canonical capture/image_capture.hpp : <library>bitmap <library>png ;

test-canonical capture/nativecapture.hpp 
    : <library>bitmap <library>png <library>crypto <library>snappy ;
test-canonical capture/new_kbdcapture.hpp ;
test-canonical capture/RDPChunkedDevice.hpp ;
test-canonical capture/send_wrm_chunk.hpp ;
test-canonical capture/staticcapture.hpp : <library>png ;
test-canonical capture/transparentchunk.hpp ;
test-canonical capture/transparentplayer.hpp ;
test-canonical capture/transparentrecorder.hpp ;

test-canonical capture/utils/match_finder.hpp 
    : <covflag>nocover
    ;

test-canonical capture/wrm_label.hpp 
    ;

## @}

## Test facility functions or classes
## @{
test-canonical utils/iter.hpp 
    ;

test-canonical utils/noncopyable.hpp 
    ;

test-canonical utils/splitter.hpp 
    ;

test-canonical utils/algostring.hpp 
    ;

test-canonical utils/make_unique.hpp 
    : ;
## @}

test-canonical utils/stream.hpp 
    ;

test-canonical utils/utf.hpp 
    ;
test-canonical utils/rect.hpp 
    ;
    
test-canonical utils/ellipse.hpp 
    ;

test-canonical utils/drawable.hpp 
    : <library>bitmap <library>png <library>crypto 
    ;

test-canonical utils/region.hpp 
    ;

test-canonical utils/bitfu.hpp
    ;
    
test-canonical utils/parse.hpp 
    ;
    
test-canonical utils/parser.hpp 
    ;
    
test-canonical utils/fileutils.hpp 
    ;
    
test-canonical utils/parse_ip_conntrack.hpp 
    ;
    
test-canonical core/RDP/x224.hpp 
    ;
    
test-canonical core/RDP/out_per_bstream.hpp 
    ;
    
test-canonical core/RDP/mcs.hpp 
    ;

test-canonical core/RDP/mppc.hpp
    ;
    
test-canonical core/RDP/mppc_40.hpp 
    ;
    
test-canonical core/RDP/mppc_50.hpp 
    ;
    
test-canonical core/RDP/mppc_60.hpp
    ;
    
test-canonical core/RDP/mppc_61.hpp
    ;
    
test-canonical core/RDP/gcc.hpp 
    : <library>dl <library>z <library>crypto 
    ;

test-canonical core/RDP/sec.hpp 
    : <library>crypto 
    ;

test-canonical core/RDP/lic.hpp 
    : <library>crypto 
    ;

test-canonical core/RDP/share.hpp 
    ;

test-canonical core/RDP/fastpath.hpp 
    : <library>crypto 
    ;
    
test-canonical core/RDP/slowpath.hpp 
    ;

test-canonical core/RDP/clipboard.hpp 
    ;

test-canonical core/FSCC/FileInformation.hpp 
    ;

test-canonical core/RDP/channels/rdpdr.hpp 
    ;

test-canonical core/callback.hpp 
    ;
test-canonical core/channel_list.hpp 
    ;
test-canonical core/check_files.hpp 
    ;
test-canonical core/client_info.hpp 
    ;
test-canonical utils/theme.hpp 
    ;
test-canonical utils/confdescriptor.hpp 
    ;
test-canonical core/error.hpp 
    ;
test-canonical core/font.hpp 
    ;
    
test-canonical core/listen.hpp 
    ;
test-canonical core/mainloop.hpp 
    ;
test-canonical core/RDP/bitmapupdate.hpp 
    : <library>bitmap <library>png <library>crypto 
    ;
test-canonical core/RDP/caches/bmpcache.hpp 
    : <library>bitmap <library>png <library>crypto 
    ;
test-canonical core/RDP/caches/bmpcachepersister.hpp 
    : <library>bitmap <library>crypto 
    ;
test-canonical core/RDP/caches/brushcache.hpp 
    ;
test-canonical core/RDP/caches/glyphcache.hpp 
    ;
test-canonical core/RDP/caches/pointercache.hpp 
    ;
test-canonical utils/redirection_info.hpp 
    ;

## Capabilities tests
## @{
test-canonical core/RDP/capabilities/bitmapcodecs.hpp 
    ;

test-canonical core/RDP/capabilities/activate.hpp 
    ;
test-canonical core/RDP/capabilities/cap_bitmap.hpp 
    ;

test-canonical core/RDP/capabilities/cap_bmpcache.hpp 
    ;

test-canonical core/RDP/capabilities/bitmapcachehostsupport.hpp 
    ;
test-canonical core/RDP/capabilities/cap_brushcache.hpp 
    ;
test-canonical core/RDP/capabilities/compdesk.hpp 
    ;
test-canonical core/RDP/capabilities/control.hpp 
    ;

test-canonical core/RDP/capabilities/drawgdiplus.hpp 
    ;
test-canonical core/RDP/capabilities/drawninegridcache.hpp 
    ;
test-canonical core/RDP/capabilities/cap_font.hpp 
    ;
test-canonical core/RDP/capabilities/frameacknowledge.hpp 
    ;
test-canonical core/RDP/capabilities/general.hpp 
    ;
test-canonical core/RDP/capabilities/cap_glyphcache.hpp 
    ;
test-canonical core/RDP/capabilities/input.hpp 
    ;
test-canonical core/RDP/capabilities/largepointer.hpp 
    ;
test-canonical core/RDP/capabilities/multifragmentupdate.hpp 
    ;
test-canonical core/RDP/capabilities/offscreencache.hpp 
    ;
test-canonical core/RDP/capabilities/order.hpp 
    ;
test-canonical core/RDP/capabilities/pointer.hpp 
    ;
test-canonical core/RDP/capabilities/rail.hpp 
    ;
test-canonical core/RDP/capabilities/cap_share.hpp 
    ;
test-canonical core/RDP/capabilities/cap_sound.hpp 
    ;
test-canonical core/RDP/capabilities/surfacecommands.hpp 
    ;
test-canonical core/RDP/capabilities/window.hpp 
    ;

test-canonical core/RDP/capabilities/bmpcache2.hpp 
    ;
test-canonical core/RDP/capabilities/colcache.hpp 
    ;
test-canonical core/RDP/capabilities/common.hpp 
    ;
test-canonical core/RDP/capabilities/virchan.hpp 
    ;
## @}


test-canonical core/RDP/ServerRedirection.hpp 
    ;

test-canonical core/RDP/GraphicUpdatePDU.hpp 
    ;

test-canonical core/RDP/RefreshRectPDU.hpp 
    : <library>crypto 
    ;
    
test-canonical core/RDP/logon.hpp 
    ;
    
test-canonical core/RDP/nego.hpp 
    : <library>openssl <library>crypto <library>dl <library>krb5 <library>gssglue 
    ;

test-canonical core/RDP/orders/RDPOrdersCommon.hpp 
    ;

test-canonical core/RDP/orders/RDPOrdersPrimaryMem3Blt.hpp 
    ;
    
test-canonical core/RDP/orders/RDPOrdersSecondaryGlyphCache.hpp 
    ;
    
test-canonical core/RDP/RDPDrawable.hpp 
    : <library>crypto <library>png 
    ;
    
test-canonical core/RDP/RDPGraphicDevice.hpp 
    ;
    
test-canonical core/RDP/RDPSerializer.hpp 
    ;
    
test-canonical core/RDP/remote_programs.hpp 
    ;
    
test-canonical core/server.hpp 
    ;
    
test-canonical core/session.hpp 
    ;
    
test-canonical core/session_server.hpp 
    ;
    
test-canonical core/wait_obj.hpp
    ;
    
test-run test_front 
    : front/test_front.cpp 
    : front/front.hpp 
    : <library>bitmap <library>openssl 
      <library>snappy <library>d3des 
      <library>krb5 <library>gssglue 
      <library>png <library>d3des 
      <library>dl <library>crypto 
    ;
    
test-canonical mod/mod_api.hpp 
    ;

test-canonical mod/mod_osd.hpp 
    : <library>bitmap <library>png 
    ;

test-canonical mod/null/null.hpp 
    ;
    
test-canonical mod/rdp/rdp_orders.hpp 
    ;
    
test-canonical mod/rdp/channels/rdpdr_asynchronous_task.hpp 
    ;
    
test-canonical mod/rdp/channels/cliprdr_channel.hpp
    : <library>png 
    ;

test-canonical mod/rdp/channels/rdpdr_channel.hpp 
    : <library>png ;
    
test-canonical mod/vnc/vnc.hpp 
    ;
    
test-canonical mod/xup/xup.hpp 
    ;
    
test-canonical utils/bitmap.hpp 
    : <library>bitmap <library>png <library>crypto 
    ;

test-canonical bitmap_perf.hpp 
    : <library>bitmap <library>png <covflag>nocover
    ;

test-canonical utils/colors.hpp 
    ;
    
test-canonical utils/d3des.hpp 
    ;
    
test-canonical utils/difftimeval.hpp 
    ;
    
test-canonical utils/genrandom.hpp 
    ;
test-canonical utils/log.hpp 
    ;

test-canonical utils/netutils.hpp 
    ;

test-canonical utils/png.hpp 
    : <library>png ;

test-canonical utils/rdtsc.hpp 
    ;

test-canonical system/linux/system/ssl_calls.hpp 
    : <library>openssl <library>crypto <library>dl <library>z ;

test-run test_strings 
    : test_strings.cpp 
    : 
    : <covflag>nocover 
    ;


## Transport tests
## @{
test-run test_meta_writer 
    : transport/detail/test_meta_writer.cpp 
    : transport/detail/meta_writer.hpp 
    ;

test-run test_meta_opener 
    : transport/detail/test_meta_opener.cpp 
    : transport/detail/meta_opener.hpp 
    ;

test-run test_in_meta_sequence_transport 
    : transport/test_in_meta_sequence_transport.cpp 
    : transport/in_meta_sequence_transport.hpp 
    : <library>crypto <library>snappy <library>dl <library>z 
    ;

test-run test_filename_sequence_transport 
    : transport/test_filename_sequence_transport.cpp 
    :
    : <covflag>nocover 
    ;

test-run test_out_meta_sequence_transport 
    : transport/test_out_meta_sequence_transport.cpp 
    : transport/out_meta_sequence_transport.hpp 
    : <library>crypto <library>snappy <library>dl <library>z 
    ;

test-run test_test_transport 
    : transport/test_test_transport.cpp 
    : transport/transport.hpp 
    ;
    
test-run test_count_transport 
    : transport/test_count_transport.cpp 
    : transport/count_transport.hpp 
    ;
    
test-run test_socket_transport 
    : transport/test_socket_transport.cpp 
    : transport/socket_transport.hpp 
    : <library>openssl <library>crypto <library>dl 
    ;

test-run test_in_file_transport 
    : transport/test_in_file_transport.cpp 
    : transport/in_file_transport.hpp
    ;

test-run test_out_file_transport 
    : transport/test_out_file_transport.cpp 
    : transport/out_file_transport.hpp
    ;

test-run test_in_filename_transport 
    : transport/test_in_filename_transport.cpp 
    : transport/in_filename_transport.hpp 
    : <library>z <library>dl <library>snappy <library>crypto 
    ;

test-run test_out_filename_transport 
    : transport/test_out_filename_transport.cpp 
    : transport/out_filename_transport.hpp 
    : <library>z <library>dl <library>snappy <library>crypto 
    ;

test-run test_bulk_compression_transport 
    : transport/test_bulk_compression_transport.cpp 
    : transport/bulk_compression_transport.hpp 
    ;

test-run test_gzip_compression_transport 
    : transport/test_gzip_compression_transport.cpp 
    : transport/gzip_compression_transport.hpp 
    : <library>z 
    ;

test-run test_snappy_compression_transport 
    : transport/test_snappy_compression_transport.cpp 
    : transport/snappy_compression_transport.hpp 
    : <library>snappy 
    ;

test-run test_cryptofile 
    : transport/test_cryptofile.cpp 
    : transport/cryptofile.hpp 
    : <library>openssl <library>crypto <library>snappy <library>dl <library>z 
    ;

test-run test_compression_transport_wrapper 
    : utils/test_compression_transport_wrapper.cpp 
    : utils/compression_transport_wrapper.hpp 
    : <library>z <library>snappy 
    ;
## @}


## Buffer Transport tests
## @{
test-run test_buffering_buf 
    : transport/buffer/test_buffering_buf.cpp 
    : transport/buffer/buffering_buf.hpp 
    ;

test-run test_checksum_buf 
    : transport/buffer/test_checksum_buf.cpp 
    : transport/buffer/checksum_buf.hpp 
    : <library>crypto <library>dl <library>z 
    ;
## @}



#test-run test_crypt_openssl : test_crypt_openssl.cpp : <library>z <library>dl <library>crypto <library>png <library>libboost_unit_test ;
#test-run test_capture_wrm : capture/test_capture_wrm.cpp : <library>png <library>z <library>crypto <library>libboost_unit_test ;

test-run test_RDPOrdersPrimaryOpaqueRect 
    : core/RDP/orders/test_RDPOrdersPrimaryOpaqueRect.cpp 
    : core/RDP/orders/RDPOrdersPrimaryOpaqueRect.hpp 
    ;
    
test-run test_RDPOrdersPrimaryScrBlt 
    : core/RDP/orders/test_RDPOrdersPrimaryScrBlt.cpp 
    : core/RDP/orders/RDPOrdersPrimaryScrBlt.hpp 
    ;
    
test-run test_RDPOrdersPrimaryMemBlt 
    : core/RDP/orders/test_RDPOrdersPrimaryMemBlt.cpp 
    : core/RDP/orders/RDPOrdersPrimaryMemBlt.hpp 
    ;
    
test-run test_RDPOrdersPrimaryDestBlt 
    : core/RDP/orders/test_RDPOrdersPrimaryDestBlt.cpp 
    : core/RDP/orders/RDPOrdersPrimaryDestBlt.hpp 
    ;
    
test-run test_RDPOrdersPrimaryMultiDstBlt 
    : core/RDP/orders/test_RDPOrdersPrimaryMultiDstBlt.cpp 
    : core/RDP/orders/RDPOrdersPrimaryMultiDstBlt.hpp 
    ;
    
test-run test_RDPOrdersPrimaryMultiPatBlt 
    : core/RDP/orders/test_RDPOrdersPrimaryMultiPatBlt.cpp 
    : core/RDP/orders/RDPOrdersPrimaryMultiPatBlt.hpp 
    ;
    
test-run test_RDPOrdersPrimaryMultiScrBlt 
    : core/RDP/orders/test_RDPOrdersPrimaryMultiScrBlt.cpp 
    : core/RDP/orders/RDPOrdersPrimaryMultiScrBlt.hpp 
    ;
    
test-run test_RDPOrdersPrimaryMultiOpaqueRect 
    : core/RDP/orders/test_RDPOrdersPrimaryMultiOpaqueRect.cpp 
    : core/RDP/orders/RDPOrdersPrimaryMultiOpaqueRect.hpp 
    ;
    
test-run test_RDPOrdersPrimaryLineTo 
    : core/RDP/orders/test_RDPOrdersPrimaryLineTo.cpp 
    : core/RDP/orders/RDPOrdersPrimaryLineTo.hpp 
    ;
    
test-run test_RDPOrdersPrimaryPolygonSC 
    : core/RDP/orders/test_RDPOrdersPrimaryPolygonSC.cpp 
    : core/RDP/orders/RDPOrdersPrimaryPolygonSC.hpp 
    ;
    
test-run test_RDPOrdersPrimaryPolygonCB 
    : core/RDP/orders/test_RDPOrdersPrimaryPolygonCB.cpp 
    : core/RDP/orders/RDPOrdersPrimaryPolygonCB.hpp 
    ;
test-run test_RDPOrdersPrimaryPolyline 
    : core/RDP/orders/test_RDPOrdersPrimaryPolyline.cpp 
    : core/RDP/orders/RDPOrdersPrimaryPolyline.hpp 
    ;
test-run test_RDPOrdersPrimaryEllipseSC 
    : core/RDP/orders/test_RDPOrdersPrimaryEllipseSC.cpp 
    : core/RDP/orders/RDPOrdersPrimaryEllipseSC.hpp 
    ;
    
test-run test_RDPOrdersPrimaryEllipseCB
    : core/RDP/orders/test_RDPOrdersPrimaryEllipseCB.cpp 
    : core/RDP/orders/RDPOrdersPrimaryEllipseCB.hpp 
    ;
    
test-run test_RDPOrdersPrimaryPatBlt 
    : core/RDP/orders/test_RDPOrdersPrimaryPatBlt.cpp 
    : core/RDP/orders/RDPOrdersPrimaryPatBlt.hpp
    ;
    
test-run test_RDPOrdersPrimaryGlyphIndex 
    : core/RDP/orders/test_RDPOrdersPrimaryGlyphIndex.cpp 
    : core/RDP/orders/RDPOrdersPrimaryGlyphIndex.hpp 
    ;
    
test-run test_RDPOrdersSecondaryBmpCache 
    : core/RDP/orders/test_RDPOrdersSecondaryBmpCache.cpp 
    : core/RDP/orders/RDPOrdersSecondaryBmpCache.hpp 
    : <library>bitmap <library>crypto 
    ;
    
test-run test_RDPOrdersSecondaryColorCache 
    : core/RDP/orders/test_RDPOrdersSecondaryColorCache.cpp 
    : core/RDP/orders/RDPOrdersSecondaryColorCache.hpp 
    ;
    
test-run test_RDPOrdersSecondaryBrushCache 
    : core/RDP/orders/test_RDPOrdersSecondaryBrushCache.cpp 
    : core/RDP/orders/RDPOrdersSecondaryBrushCache.hpp 
    ;
    
test-run test_AlternateSecondaryWindowing 
    : core/RDP/orders/test_AlternateSecondaryWindowing.cpp 
    : core/RDP/orders/AlternateSecondaryWindowing.hpp 
    ;

test-run test_libpng 
    : test_libpng.cpp 
    :  
    : <library>png <library>z <covflag>nocover
    ;

#test-run test_convert_bitmap : test_convert_bitmap.cpp : <library>png <library>z <library>crypto <library>dl <library>libboost_unit_test ;
test-run test_rdp 
    : mod/rdp/test_rdp.cpp 
    : mod/rdp/rdp.hpp 
    : <library>bitmap <library>krb5 
      <library>gssglue <library>png 
      <library>d3des <library>z 
      <library>dl <library>crypto 
    ;

test-run test_rdp_client_test_card 
    : client_mods/test_rdp_client_test_card.cpp 
    : 
    : <library>bitmap
      <library>z
      <library>png
      <library>crypto 
      <library>dl
      <library>openssl 
      <covflag>nocover
    ;
test-run test_rdp_client_tls_w2008 
    : client_mods/test_rdp_client_tls_w2008.cpp 
    : 
    : <library>bitmap
      <library>krb5 
      <library>gssglue
      <library>png 
      <library>crypto
      <library>d3des 
      <library>z
      <library>dl 
      <library>openssl 
      <covflag>nocover
    ;

test-run test_rdp_client_wab 
    : client_mods/test_rdp_client_wab.cpp 
    : 
    : <library>bitmap
      <library>krb5 
      <library>gssglue
      <library>png 
      <library>crypto
      <library>d3des 
      <library>openssl
      <library>dl 
      <library>krb5
      <library>gssglue 
      <covflag>nocover
    ;

test-run test_vnc_client_simple 
    : client_mods/test_vnc_client_simple.cpp 
    : 
    : <library>bitmap
      <library>krb5 
      <library>gssglue
      <library>png 
      <library>crypto
      <library>d3des 
      <library>dl 
      <covflag>nocover
    ;

test-run test_rdesktop_client 
    : server/test_rdesktop_client.cpp 
    : 
    : <library>bitmap
      <library>png 
      <library>openssl
      <library>snappy 
      <library>d3des
      <library>crypto 
      <library>dl 
      <covflag>nocover
    ;


test-run test_mstsc_client 
    : server/test_mstsc_client.cpp 
    : 
    : <library>bitmap
      <library>png 
      <library>openssl
      <library>snappy 
      <library>d3des
      <library>crypto 
      <library>dl
      <covflag>nocover
    ;


test-run test_mstsc_client_rdp50bulk 
    : server/test_mstsc_client_rdp50bulk.cpp 
    : 
    : <library>bitmap
      <library>png 
      <library>openssl
      <library>snappy 
      <library>d3des
      <library>crypto 
      <library>dl 
      <covflag>nocover
    ;

if [ SHELL false ] {

test-run test_keymap2 
    : test_keymap2.cpp 
    : keymap2.hpp 
    ;
    
test-run test_keymapSym 
    : test_keymapSym.cpp 
    : keymapSym.hpp 
    ;
}


## Widget tests
## @{
test-run test_widget2_rect 
    : mod/internal/widget2/test_widget2_rect.cpp 
    : mod/internal/widget2/widget2_rect.hpp 
    : <library>png <library>crypto 
    ;

test-run test_image 
    : mod/internal/widget2/test_image.cpp 
    : mod/internal/widget2/image.hpp 
    : <library>bitmap <library>png <library>crypto 
    ;

test-run test_label 
    : mod/internal/widget2/test_label.cpp 
    : mod/internal/widget2/label.hpp 
    : <library>png <library>crypto 
    ;

test-run test_tooltip 
    : mod/internal/widget2/test_tooltip.cpp 
    : mod/internal/widget2/tooltip.hpp 
    : <library>png <library>crypto 
    ;

test-run test_flat_button 
    : mod/internal/widget2/test_flat_button.cpp 
    : mod/internal/widget2/flat_button.hpp 
    : <library>png <library>crypto 
    ;

test-run test_edit 
    : mod/internal/widget2/test_edit.cpp 
    : mod/internal/widget2/edit.hpp 
    : <library>png <library>crypto 
    ;

test-run test_multiline 
    : mod/internal/widget2/test_multiline.cpp 
    : mod/internal/widget2/multiline.hpp 
    : <library>png <library>crypto 
    ;

test-run test_password 
    : mod/internal/widget2/test_password.cpp 
    : mod/internal/widget2/password.hpp 
    : <library>png <library>crypto 
    ;

test-run test_number_edit 
    : mod/internal/widget2/test_number_edit.cpp 
    : mod/internal/widget2/number_edit.hpp 
    : <library>png <library>crypto 
    ;

test-run test_edit_valid 
    : mod/internal/widget2/test_edit_valid.cpp 
    : mod/internal/widget2/edit_valid.hpp 
    : <library>png <library>crypto 
    ;

# test-run test_radio_list : mod/internal/widget2/test_radio_list.cpp : <library>png <library>libboost_unit_test ;
test-run test_flat_dialog 
    : mod/internal/widget2/test_flat_dialog.cpp 
    : mod/internal/widget2/flat_dialog.hpp 
    : <library>bitmap <library>png <library>crypto 
    ;

test-run test_widget 
    : mod/internal/widget2/test_widget.cpp 
    : mod/internal/widget2/widget.hpp 
    : <library>crypto 
    ;

test-run test_composite 
    : mod/internal/widget2/test_composite.cpp 
    : mod/internal/widget2/composite.hpp 
    : <library>png <library>crypto 
    ;

#test-run test_window_dialog : mod/internal/widget2/test_window_dialog.cpp : <library>png <library>z <library>crypto <library>dl ;

test-run test_flat_login 
    : mod/internal/widget2/test_flat_login.cpp 
    : mod/internal/widget2/flat_login.hpp 
    : <library>bitmap <library>png <library>crypto 
    ;

test-run test_flat_wab_close 
    : mod/internal/widget2/test_flat_wab_close.cpp 
    : mod/internal/widget2/flat_wab_close.hpp 
    : <library>bitmap <library>png <library>crypto 
    ;

test-run test_screen 
    : mod/internal/widget2/test_screen.cpp 
    : mod/internal/widget2/screen.hpp 
    : <library>png <library>crypto 
    ;

# test-run test_columnlayout : mod/internal/widget2/test_columnlayout.cpp : <library>png ;
# test-run test_linelayout : mod/internal/widget2/test_linelayout.cpp : <library>png ;
# test-run test_stacklayout : mod/internal/widget2/test_stacklayout.cpp : <library>png ;
test-run test_grid 
    : mod/internal/widget2/test_grid.cpp 
    : mod/internal/widget2/grid.hpp 
    : <library>png <library>crypto 
    ;

test-run test_labelgrid 
    : mod/internal/widget2/test_labelgrid.cpp 
    : mod/internal/widget2/labelgrid.hpp 
    : <library>png <library>crypto 
    ;

test-run test_flat_selector2 
    : mod/internal/widget2/test_flat_selector2.cpp 
    : mod/internal/widget2/flat_selector2.hpp 
    : <library>png <library>crypto 
    ;

test-run test_group_box 
    : mod/internal/widget2/test_group_box.cpp 
    : mod/internal/widget2/group_box.hpp 
    : <library>png <library>crypto 
    ;
# test-run test_scroll : mod/internal/widget2/test_scroll.cpp : <library>png ;
# test-run test_tab : mod/internal/widget2/test_tab.cpp : <library>png ;
test-run test_flat_interactive_target 
    : mod/internal/widget2/test_flat_interactive_target.cpp 
    : mod/internal/widget2/flat_interactive_target.hpp 
    : <library>png <library>crypto 
    ;
## @}

## Mod tests
## @{
test-run test_flat_dialog_mod 
    : mod/internal/test_flat_dialog_mod.cpp 
    : mod/internal/flat_dialog_mod.hpp 
    : <library>bitmap <library>png 
    ;

test-run test_flat_login_mod 
    : mod/internal/test_flat_login_mod.cpp 
    : mod/internal/flat_login_mod.hpp 
    : <library>bitmap <library>png 
    ;

test-run test_flat_wab_close_mod 
    : mod/internal/test_flat_wab_close_mod.cpp 
    : mod/internal/flat_wab_close_mod.hpp 
    : <library>bitmap <library>png 
    ;

test-run test_widget_test_mod 
    : mod/internal/test_widget_test_mod.cpp 
    : mod/internal/widget_test_mod.hpp 
    : <library>png 
    ;

test-run test_interactive_target_mod 
    : mod/internal/test_interactive_target_mod.cpp 
    : mod/internal/interactive_target_mod.hpp 
    : <library>png <library>crypto 
    ;

test-run test_bouncer2_mod 
    : mod/internal/test_bouncer2_mod.cpp 
    : mod/internal/bouncer2_mod.hpp 
    : <library>png 
    ;

test-run test_test_card_mod 
    : mod/internal/test_test_card_mod.cpp 
    : mod/internal/test_card_mod.hpp 
    ;

test-run test_replay_mod 
    : mod/internal/test_replay_mod.cpp 
    : mod/internal/replay_mod.hpp 
    ;

test-run test_internal_mod 
    : mod/internal/test_internal_mod.cpp 
    : mod/internal/internal_mod.hpp 
    ;

test-run test_copy_paste 
    : mod/internal/test_copy_paste.cpp 
    : mod/internal/copy_paste.hpp 
    : <library>png <library>crypto 
    ;
## @}

## Regex tests
## @{
test-run test_regex_state 
    : regex/test_regex_state.cpp 
    : regex/regex_state.hpp 
    ;

test-run test_regex_parser 
    : regex/test_regex_parser.cpp 
    : regex/regex_parser.hpp 
    ;


test-run test_regex_st_automate 
    : regex/test_regex_st_automate.cpp 
    : regex/regex_st_automate.hpp 
    ;

test-run test_regex 
    : regex/test_regex.cpp 
    : regex/regex.hpp 
    ;

# test-run benchmark_regex_parser : benchmark/parser.cpp ;
# test-run benchmark_regex_search : benchmark/search.cpp ;
## @}

# test-run test_base64 : utils/test_base64.cpp : ;

test-run test_translation 
    : utils/test_translation.cpp 
    : utils/translation.hpp 
    ;


## NLA TESTS
## @{
test-run test_ber 
    : core/RDP/nla/asn1/test_ber.cpp 
    : core/RDP/nla/asn1/ber.hpp 
    ;

test-run test_credssp 
    : core/RDP/nla/test_credssp.cpp 
    : core/RDP/nla/credssp.hpp 
    : <library>crypto 
    ;

test-run test_sspi 
    : core/RDP/nla/test_sspi.cpp 
    : core/RDP/nla/sspi.hpp 
    ;

test-run test_nla 
    : core/RDP/nla/test_nla.cpp 
    : core/RDP/nla/nla.hpp 
    : <library>dl <library>krb5 <library>gssglue <library>z <library>crypto 
    ;

#alias test_ntlm_suite : test_ntlm_message_negotiate test_ntlm_avpair test_ntlm_message_challenge test_ntlm_message_authenticate test_ntlm_context ;

test-run test_ntlm_message_negotiate 
    : core/RDP/nla/ntlm/test_ntlm_message_negotiate.cpp 
    : core/RDP/nla/ntlm/ntlm_message_negotiate.hpp 
    : <library>crypto 
    ;

test-run test_ntlm_avpair 
    : core/RDP/nla/ntlm/test_ntlm_avpair.cpp 
    : core/RDP/nla/ntlm/ntlm_avpair.hpp 
    ;

test-run test_ntlm_message_challenge 
    : core/RDP/nla/ntlm/test_ntlm_message_challenge.cpp 
    : core/RDP/nla/ntlm/ntlm_message_challenge.hpp 
    : <library>crypto 
    ;

test-run test_ntlm_message_authenticate 
    : core/RDP/nla/ntlm/test_ntlm_message_authenticate.cpp 
    : core/RDP/nla/ntlm/ntlm_message_authenticate.hpp 
    : <library>crypto 
    ;

test-run test_ntlm_context 
    : core/RDP/nla/ntlm/test_ntlm_context.cpp 
    : core/RDP/nla/ntlm/ntlm_context.hpp 
    : <library>dl <library>z <library>crypto 
    ;

test-run test_ntlm 
    : core/RDP/nla/ntlm/test_ntlm.cpp 
    : core/RDP/nla/ntlm/ntlm.hpp 
    : <library>dl <library>z <library>crypto 
    ;

test-run test_credentials 
    : core/RDP/nla/kerberos/test_credentials.cpp 
    : core/RDP/nla/kerberos/credentials.hpp 
    : <library>krb5 
    ;

test-run test_kerberos 
    : core/RDP/nla/kerberos/test_kerberos.cpp 
    : core/RDP/nla/kerberos/kerberos.hpp 
    : <library>krb5 <library>gssglue 
    ;
## @}

test-run test_darray 
    : utils/test_darray.cpp 
    : utils/darray.hpp 
    ;

## Widget for workflow
## @{
test-run test_flat_wait 
    : mod/internal/widget2/test_flat_wait.cpp 
    : mod/internal/widget2/flat_wait.hpp 
    : <library>png <library>crypto 
    ;

test-run test_flat_form 
    : mod/internal/widget2/test_flat_form.cpp 
    : mod/internal/widget2/flat_form.hpp 
    : <library>png <library>crypto 
    ;
## @}

test-run test_authorization_channels 
    : utils/test_authorization_channels.cpp 
    : utils/authorization_channels.hpp 
    ;

test-run test_pattutils 
    : utils/test_pattutils.cpp 
    : utils/pattutils.hpp 
    ;

test-run test_strutils 
    : utils/test_strutils.cpp 
    : utils/strutils.hpp 
    ;

test-run test_diffiehellman 
    : utils/test_diffiehellman.cpp 
    : utils/diffiehellman.hpp 
    ;

test-run test_finally 
    : utils/test_finally.cpp 
    : utils/finally.hpp 
    ;

if [ SHELL false ] {

test-run test_verifier 
    : test_verifier.cpp 
    : verifier.hpp 
    : <library>program_options 
      <library>openssl 
      <library>crypto 
      <library>snappy 
      <library>dl 
      <library>z ;

}

actions pass {
    touch $(<)
}

actions run-python-test {
    rm -f $(<)
    python $(>[1]) && touch $(<)
}

make test_trace.py.unittest
    :
        tools/redcryptofile/test_trace.py
        redcryptofile.so
    :
        run-python-test
    :
        <variant>coverage:<action>@pass
    ;

