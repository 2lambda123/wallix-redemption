include ../../cxxflags.jam ;

import os ;

# below feature rule come from http://www.boost.org/doc/tools/build/doc/html/bbv2/extending/features.html

import feature : feature ;
import modules : poke ;

# this feature is defined so we can add a dependency on <distri>lenny for some targets
# disabled because in our current code it finds the right library
#feature distri : none lenny : propagated ;

# No need to make it a new variant after all
#variant lenny : release ;

path-constant TOP : . ;
constant CONFIG_DIR : ../../projects/redemption_configs ;
constant SRCDIR : ../../src ;
constant INCLUDEDIR : ../../include ;
constant TESTDIR : ../../tests ;
constant MODULEDIR : ../../modules ;
constant SYSTEMDIR : ../../src/system/linux ;


#echo "toolset" [ feature.get-values toolset ] ;

# Returns environment value if it exists or default otherwise.
# Allow us to customize install path with shell variables like $PREFIX...
# (this is bad practice and should be replaced by a site configuration file
# but I until now I miserably failed creating a clean separate configuration file)
rule setvar ( env : default * )
{
    if [ os.environ $(env) ]
    {
        return [ os.environ $(env) ] ;
    }
    else
    {
        return $(default) ;
    }
}

constant ARCH : [ SHELL "lscpu | perl -ne 'if (/^Architecture.*(x86_64|i386|i686)/) {print $1};'" ] ;
# constant ARCH : [ SHELL "lscpu | perl -ane 'my %h = map { $F[0], $F[1] } <>; print $h{q{Architecture:}}'" ] ;
constant PYTHON_VER : [ SHELL "perl -e 'for my $x (q{python2.7}, q{python2.6}) { if (-e q{/usr/include/}.$x.q{/Python.h}){ print $x; last;}};'" ] ;
constant PYTHON_INCLUDE : [ SHELL "perl -e 'for my $x (q{python2.7}, q{python2.6}) { if (-e q{/usr/include/}.$x.q{/Python.h}){ print q{/usr/include/}.$x; last;}};'" ] ;


constant FIXTURES_PATH : [ setvar FIXTURES_PATH : $(TESTDIR)/fixtures ] ;
constant LOCAL_CFG_PATH : [ setvar LOCAL_CFG_PATH : $(TESTDIR)/../sys/etc/rdpproxy ] ;

constant INSTALLDIR : [ setvar DESTDIR : "" ] ;
constant PREFIX : [ setvar PREFIX : /usr/local ] ;
constant BIN_PREFIX : [ setvar BIN_PREFIX : $(PREFIX)/bin ] ;
constant LIB_PREFIX : [ setvar LIB_PREFIX : $(PREFIX)/lib ] ;
constant SHARE_PREFIX : [ setvar SHARE_PREFIX : $(PREFIX)/share/rdpproxy ] ;
constant RECORD_TMP_PATH : [ setvar RECORD_TMP_PATH : /var/rdpproxy/tmp ] ;
constant RECORD_PATH : [ setvar RECORD_PATH : /var/rdpproxy/recorded ] ;
constant ETC_PREFIX : [ setvar ETC_PREFIX : /etc/rdpproxy ] ;
constant CERT_PREFIX : [ setvar CERT_PREFIX : /etc/rdpproxy/cert ] ;
constant HASH_PATH : [ setvar HASH_PATH : /var/rdpproxy/hash ] ;
constant PERSISTENT_PATH : [ setvar PERSISTENT_PATH : /var/lib/redemption/cache ] ;
constant DRIVE_REDIRECTION_PATH : [ setvar DRIVE_REDIRECTION_PATH : /var/rdpproxy/drive_redirection ] ;

constant COVERAGE_PREFIX : [ setvar COVERAGE_PREFIX : "" ] ;

constant PNG_DEBUG : <variant>debug:<library>png ;

rule defines ( properties * )
{
    local defs ;
    defs += <define>RECORD_PATH='\"$(RECORD_PATH)\"' ;
    defs += <define>RECORD_TMP_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>FLV_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>OCR_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>PNG_PATH='\"$(RECORD_TMP_PATH)\"' ;
    defs += <define>WRM_PATH='\"$(RECORD_PATH)\"' ;
    defs += <define>HASH_PATH='\"$(HASH_PATH)\"' ;
    defs += <define>LICENSE_PATH='\"$(CERT_PREFIX)/rdplicense\"' ;
    defs += <define>CERTIF_PATH='\"$(CERT_PREFIX)/rdp\"' ;
    defs += <define>FIXTURES_PATH='\"$(FIXTURES_PATH)\"' ;
    defs += <define>PERSISTENT_PATH='\"$(PERSISTENT_PATH)\"' ;
    defs += <define>DRIVE_REDIRECTION_PATH='\"$(DRIVE_REDIRECTION_PATH)\"' ;
    if [ os.environ VERBOSE ]
    {
        defs += <define>VERBOSE ;
    }
    return $(defs) ;
}
variant coverage : debug : <cxxflags>--profile-arcs <cxxflags>--test-coverage <cxxflags>--coverage <link>shared ;

#gcov -a -c -b -f -o bin/gcc-4.6/coverage/tests/test_stream.gcno bin/gcc-4.6/coverage/test_stream

lib gcov : : <name>gcov : ;

constant GCOV : <variant>coverage:<library>gcov ;
constant GCOV_NO_BUILD : <variant>coverage:<build>no ;


project redemption
    : requirements
    <include>$(SRCDIR)
    <include>$(INCLUDEDIR)
    <include>$(SYSTEMDIR)
    <include>$(SRCDIR)/headers
    <include>$(MODULEDIR)/includes

    <include>$(CONFIG_DIR)/redemption_src
    <include>$(CONFIG_DIR)/include/autogen
    <include>$(CONFIG_DIR)/include/variant


    <conditional>@defines

    <cxxflags>-std=c++11

    $(CXXFLAGS)

#    <cxxflags>-fpie
    <cxxflags>-fPIC


    <define>_FILE_OFFSET_BITS=64
    <define>_LARGEFILE64_SOURCE

    <define>__STDC_FORMAT_MACROS

    <define>PUBLIC

   : default-build release

;

explicit install instexe install-bin install-etc install-etc-themes install-share install-lib check_coverage exe ;

alias instexe : install-bin ;
alias install : install-bin install-etc install-etc-themes install-share install-lib ;
alias exe     : rdpproxy rdptproxy rdptanalyzer rdpclient ;
alias libs    : libredrec ;


install install-bin
    : exe
    : <install-type>EXE <install-dependencies>on
    : <location>$(INSTALLDIR)/usr/local/bin
    ;

install install-share
    : [ glob sys/share/rdpproxy/[^.k]* ]
    :
    : <location>$(INSTALLDIR)/usr/local/share/rdpproxy
    ;

install install-etc
    : [ glob sys/etc/rdpproxy/*ini sys/etc/rdpproxy/*pem sys/etc/rdpproxy/*crt sys/etc/rdpproxy/*key sys/etc/rdpproxy/*p12 ]
    :
    : <location>$(INSTALLDIR)/etc/rdpproxy
    ;

install install-etc-themes
    : [ glob sys/etc/rdpproxy/themes/HOWTO ]
    :
    : <location>$(INSTALLDIR)/etc/rdpproxy/themes
    ;

install install-lib
    : libs
    :
    : <location>$(INSTALLDIR)/usr/lib
    ;

actions gen_redcryptofile {
    echo "$(>)" "$(<)" ;
    cp "$(>)" "$(<)"
    cp "$(<)" tools/redcryptofile/redcryptofile.so
}

explicit pycryptofile redcryptofile.so ;

#obj dummypng :
#        $(SRCDIR)/utils/dummypng.cpp
#    :
#    ;

lib pycryptofile :
        tools/redcryptofile/pycrypto.cpp
    :
        <define>REDPYTHON_BINDING
        <include>$(PYTHON_INCLUDE)
        <cxxflags>-fPIC
        <cflags>-fPIC
        <link>shared
        <library>snappy
        <library>python2
        <library>crypto
    ;

make redcryptofile.so
    :
        pycryptofile
    :
        @gen_redcryptofile
    ;

lib libboost_unit_test : : <name>boost_unit_test_framework <link>shared ;
lib openssl : : <name>ssl <link>shared ;

lib krb5 : : <name>krb5 <link>shared ;
lib gssglue : : <name>gssglue <link>shared ;

lib crypto : : <name>crypto <link>shared ;
lib z : : <name>z <link>shared ;
lib snappy : : <name>snappy <link>shared ;
# lib lzma : : <name>lzma <link>shared ;
lib dl : : <name>dl <link>shared ;
lib python2 : : <name>$(PYTHON_VER) <link>shared ;


lib libpng : : <name>png <link>shared ;
alias png : libpng z ;

# lib libasan : libboost_unit_test openssl krb5 gssglue crypto snappy png dl python2 : <name>asan ;

obj mainloop : $(SRCDIR)/core/mainloop.cpp ;
obj d3des : $(SRCDIR)/utils/d3des.cpp ;
obj bitmap : $(SRCDIR)/utils/bitmap_data_allocator.cpp ;
obj program_options : $(MODULEDIR)/program_options/src/program_options.cpp ;


constant COMMON_OBJ_DEPENDENCIES :
    <define>SHARE_PATH='\"$(PREFIX)/share/rdpproxy\"'
    <define>CFG_PATH='\"$(ETC_PREFIX)\"'
;

constant LIB_DEPENDENCIES : $(COMMON_OBJ_DEPENDENCIES) <cxxflags>-fPIC <cxxflags>-fvisibility=hidden ;
constant EXE_DEPENDENCIES : $(COMMON_OBJ_DEPENDENCIES) $(GCOV) ;
constant TEST_DEPENDENCIES :
    <include>$(TESTDIR)
    <cxxflags>-frtti
    <library>libboost_unit_test
    <define>SHARE_PATH='\"$(FIXTURES_PATH)\"'
    <define>CFG_PATH='\"$(LOCAL_CFG_PATH)\"'
    $(GCOV)
;


#
# Redemption
#

exe rdpproxy
    :
        $(SRCDIR)/main/main.cpp
        bitmap
        program_options

        mainloop

        d3des

        openssl
        crypto
        z
        dl
        png

        snappy
#        lzma

        krb5
        gssglue
    :
#         <link>static
        $(EXE_DEPENDENCIES)
    ;

lib libredrec
    :
        $(SRCDIR)/main/do_recorder.cpp
        bitmap
        program_options

        openssl
        crypto
        png
        z
        dl

        snappy
    :
        $(LIB_DEPENDENCIES)
    ;

exe rdptproxy
    :
        $(SRCDIR)/main/transparent.cpp
        bitmap
        program_options

        openssl
        crypto
        png
        z
        dl

        snappy
#        lzma

        krb5
        gssglue
    :
#         <link>static
        $(EXE_DEPENDENCIES)
    ;

exe rdptanalyzer
    :
        $(SRCDIR)/main/tanalyzer.cpp
        program_options

        openssl
        crypto
        png
        z
        dl

        snappy

        krb5
        gssglue
    :
#         <link>static
        $(EXE_DEPENDENCIES)
    ;

exe rdpclient
    : $(SRCDIR)/main/rdp_client.cpp
        program_options
        bitmap
        openssl
        crypto
        png
        z
        dl

        snappy
        krb5
        gssglue
    :
        $(EXE_DEPENDENCIES)
    ;


#
# Functional tests (run by hand)
#

exe tls_test_client
    :
        $(SRCDIR)/ftests/tls_test_client.cpp openssl crypto png dl snappy
    :
#         <link>static
        $(EXE_DEPENDENCIES)
 ;
exe tls_test_server
    :
        $(SRCDIR)/ftests/tls_test_server.cpp openssl crypto png dl snappy
    :
#         <link>static
        $(EXE_DEPENDENCIES)
;

exe make_cpp_config
    : $(SRCDIR)/main/write_cpp_config.cpp
    : <variant>asan:<library>libasan $(GCOV)
;

explicit make_cpp_config ;


#exe freetype_draw : ftests/freetype_draw.cpp freetype
#    : <link>static <variant>coverage:<library>gcov
#;

#add flag -I/usr/include/freetype2

#
# Unit Tests
#

#import testing-coverage ;
import testing ;

import type ;
type.register PYTHON : py ;

actions id {
    touch $(<);
}

import toolset ;

feature.feature <covfile> : : free ;
toolset.flags cover COVERFILE : <covfile> ;

feature.feature <covflag> : : free ;
toolset.flags cover COVERFLAG : <covflag> ;

actions cover
{
    echo "Computing coverage for $(COVERFILE)"
    if [ "++ $(COVERFLAG) ++" = "++ nocover ++" ]; then
        if [ ! -e "$(SRCDIR)/$(COVERFILE)" ]; then
            echo "source file $(SRCDIR)/$(COVERFILE) missing"
        fi
        echo "NO COVERAGE"
        touch "$(<)"
    else
        # echo "COVERFILE = $(COVERFILE)"
        # echo "source = $(>)"
        # echo "target = $(<)"
        mkdir -p $(COVERAGE_PREFIX)coverage/$(COVERFILE)
        if [ ! -e $(>:S=.gcno) ]; then
            echo "coverage file $(>:S=.gcno) does not exist"
            exit 1
        fi

        #echo "gcov --unconditional-branches --all-blocks --branch-count --branch-probabilities --function-summaries --demangled-names -o $(>:S=.gcno) $(>:S=) > $(COVERAGE_PREFIX)coverage/$(COVERFILE)/report.coverage"
        gcov --unconditional-branches --all-blocks --branch-count --branch-probabilities --function-summaries --demangled-names -o $(>:S=.gcno) $(>:S=) > $(COVERAGE_PREFIX)coverage/$(COVERFILE)/report.coverage
        if [ $? = "0" ]; then

            mv *.gcov $(COVERAGE_PREFIX)coverage/$(COVERFILE)
            if [ $? = "0" ]; then

                if [ ! -e "$(SRCDIR)/$(COVERFILE)" ]; then
                    echo "source file $(SRCDIR)/$(COVERFILE) missing"
                    exit 1
                fi

                # If no gcov file available for coverage target create an empty one
                if [ ! -e "$(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).gcov" ]; then
                    touch $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).gcov
                fi

                etags -o $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).TAGS $(SRCDIR)/$(COVERFILE)
                if [ $? = "0" ]; then
                    python tools/coverage.py $(COVERFILE) $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).TAGS $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).gcov $(SRCDIR) > $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).report
                    cat $(COVERAGE_PREFIX)coverage/$(COVERFILE)/$(COVERFILE:B)$(COVERFILE:S).report
                    touch $(<)
                else
                    echo "etags failed"
                    exit 1
                fi
            else
                echo "gcov mv failed"
                exit 1
            fi
        else
            echo "gcov failed"
            exit 1
        fi
    fi
}

rule test-run ( target : sources + : tested ? : requirements * )
{
#    ECHO " TEST RUN" ;
    local ROOT_TEST_DIR = $(TESTDIR) ;
    if $(sources:P) = "system" {
        ROOT_TEST_DIR = $(SYSTEMTESTDIR) ;
    }
    sources = $(ROOT_TEST_DIR)/$(sources) ;

    local base = [ MATCH "test_(.*)$" : $(sources[0]:B) ] ;
    local basepath = "" ;
    local path = $(sources[0]:P) ;
    while $(path) != $(ROOT_TEST_DIR) {
        basepath = $(path:B)/$(basepath) ;
        path = $(path:P) ;
    }

#    ECHO "base = $(base)" ;
#    ECHO "sources = $(sources)" ;
#    ECHO "target = $(target)" ;
    run $(sources) : : : $(requirements) $(TEST_DEPENDENCIES) : $(target) ;

    if ($(tested)) {
        make $(target:S=.coverage) : $(target) : id
            : <variant>coverage:<action>@cover
              <covfile>$(tested) $(requirements)
            ;
    }
}

rule test-canonical ( base : requirements * )
{
    #basetarget = $(base:B) ;
    #base = $(base:P) ;
    #echo "base=" $(base) ;
    #while "$(base)" != "" {
    #    basetarget = $(base:B)_$(basetarget) ;
    #    base = $(base:P) ;
    #}
    #target = test_$(basetarget) ;

    target = test_$(base:B) ;
    source = $(base:P)/test_$(base:B).cpp ;
    tested = $(base) ;

    #echo "target=" $(target) ;
    #echo "source=" $(source) ;
    #echo "tested=" $(tested) ;


    test-run $(target) : $(source) : $(tested) : $(requirements) ;
}


# To compute coverage
# ===================
# bjam coverage test_utf.coverage




actions pass {
    touch $(<)
}

actions run-python-test {
    rm -f $(<)
    python $(>[1]) && touch $(<)
}

make test_trace.py.unittest
    :
        tools/redcryptofile/test_trace.py
        redcryptofile.so
    :
        run-python-test
    :
        <variant>coverage:<action>@pass
    ;

lib gssapi_krb5 : : <name>gssapi_krb5 <link>shared ;
lib rt : : <name>rt <link>shared ;


explicit install-sashimi local-install-sashimi sashimi ;

install install-sashimi
    : sashimi
    : <location>debian/sashimi/usr/lib
    ;

install local-install-sashimi
    : sashimi
    : <location>/usr/lib
    ;

obj sashimi_error : $(SRCDIR)/sashimi/ssh_error.cpp ;
obj sashimi_pki : $(SRCDIR)/sashimi/pki.cpp ;
obj sashimi_channels : $(SRCDIR)/sashimi/channels.cpp ;
obj sashimi_sftp : $(SRCDIR)/sashimi/sftp.cpp ;
obj sashimi_libssh : $(SRCDIR)/sashimi/libssh.cpp ;

lib sashimi :
    sashimi_pki
    sashimi_channels
    sashimi_sftp
    sashimi_libssh
    sashimi_error
#    #openssl
    krb5
    gssapi_krb5
    crypto
    dl
    z
    rt
    :
    <link>shared
    :
    :
;

##
## Unit Tests
##

unit-test test_buffer :
    $(TESTDIR)/sashimi/test_buffer.cpp
    sashimi_error
    libboost_unit_test
    :
    $(TEST_DEPENDENCIES)
    ;

unit-test test_crypto :
    $(TESTDIR)/sashimi/test_crypto.cpp
    sashimi_error
    crypto
    libboost_unit_test
    :
    $(TEST_DEPENDENCIES)
    ;


