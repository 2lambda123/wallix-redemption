JAM_INCLUDE_PATH ?= ../../jam ;

REDEMPTION_PUBLIC_PATH ?= ../.. ;
REDEMPTION_INCLUDE_PATH ?= $(REDEMPTION_PUBLIC_PATH)/include ;
REDEMPTION_MODULES_SRC_PATH ?= $(REDEMPTION_PUBLIC_PATH)/modules ;

include $(JAM_INCLUDE_PATH)/redemption-config.jam ;
include $(JAM_INCLUDE_PATH)/cxxflags.jam ;
include $(JAM_INCLUDE_PATH)/defines.jam ;
include $(JAM_INCLUDE_PATH)/includes.jam ;


# select best Qt version
## @{
import os ;
local qtversion = [ os.environ qtversion ] ;
if ! $(qtversion)
{
    qtversion = [ os.environ qt ] ;
}

if ! $(qtversion)
{
    qtversion = [ os.environ KDE_SESSION_VERSION ] ;
    if $(qtversion)
    {
        echo "KDE_SESSION_VERSION=$(qtversion) found. Use Qt$(qtversion)." ;
    }
}

if $(qtversion) != 4 && $(qtversion) != 5 && $(qtversion) != 6
{
    echo "Unknown Qt$(qtversion)." ;
    qtversion = ;
}

if ! $(qtversion)
{
    exit "Please set a valid Qt version (4 or 5) with `bjam -s qt=4`." ;
}
## @}


if $(qtversion) = 4
{
    # TODO search include qt4 directory
    constant QT4_INCLUDE : [ setvar QT4_INCLUDE : /usr/include/qt4 ] ;

    constant QT_INCLUDES : $(QT4_INCLUDE) ;
}
else
{
    # Need packages qttools5-dev libphonon4qt5-dev
    # TODO search include qt5 directory
    constant QT5_INCLUDE : [ setvar QT5_INCLUDE : /usr/include/x86_64-linux-gnu/qt$(qtversion) ] ;
    # TODO search include phonon directory
    constant QT5_PHONON_INCLUDE : [ setvar QT5_PHONON_INCLUDE : /usr/include/phonon4qt$(qtversion)/phonon ] ;

    constant QT_INCLUDES : $(QT5_INCLUDE) $(QT5_PHONON_INCLUDE) ;
}

lib gssglue : : <name>gssglue <link>shared ;

constant SHELL_PWD : [ SHELL "echo -n $PWD" ] ; # rule location

constant MAIN_PATH : [ setvar MAIN_PATH : $(SHELL_PWD) ] ;

rule disable-buggy-warn ( properties * )
{
    local ps = [ property-set.create $(properties) ] ;
    local toolset = [ $(ps).get <toolset> ] ;
    # TODO is not the real version. For toolset=gcc-5, version is 5
    # gcc -dumpversion
    # clang -dumpversion = llvm version ?
    local version = [ $(ps).get <toolset-$(toolset):version> ] ;

    local flags ;

    if $(toolset) = gcc && ! ( $(version) <= 05.00 )
    {
        flags += <cxxflags>-Wzero-as-null-pointer-constant&&-Wno-zero-as-null-pointer-constant ;
    }

    return $(flags) ;
}

project redemption_qt4_client
    : requirements

    <conditional>@includes
    <conditional>@flags
    <conditional>@disable-buggy-warn

    <cxxflags>-std=c++14

    $(CXXFLAGS)

    # <cxxflags>-fPIC
    <variant>debug:<cxxflags>-frtti
  
    <define>_FILE_OFFSET_BITS=64
    <define>_LARGEFILE64_SOURCE
    <define>__STDC_FORMAT_MACROS

    <define>QT_NO_KEYWORDS

    <cxxflags>-isystem$(QT_INCLUDES)

    <toolset>gcc:<cxxflags>-Wno-missing-include-dirs

   : default-build release
;

include $(JAM_INCLUDE_PATH)/ocr.jam ;
include $(JAM_INCLUDE_PATH)/libs.jam ;

explicit install instexe install-bin ;

alias instexe : install-bin ;
alias install : install-bin ;

install install-bin
    : client_rdp_Qt4
    : <install-type>EXE <install-dependencies>on
    : <location>$(INSTALLDIR)/usr/local/bin
    ;

install install-bin
    : client_demo_Qt4
    : <install-type>EXE <install-dependencies>on
    : <location>$(INSTALLDIR)/usr/local/bin
    ;

obj config.o : ../redemption_configs/redemption_src/configs/config.cpp ;

obj hexdump.o : $(REDEMPTION_SRC_PATH)/utils/hexdump.cpp : ;




local obj_list_VNC ;
rule add_src_VNC ( src : requirements * )
{
    obj $(src).o : $(REDEMPTION_SRC_PATH)/$(src) : $(requirements) ;
    obj_list_VNC += $(src).o ;
}
add_src_VNC mod/internal/widget/flat_vnc_authentification.cpp ;
add_src_VNC mod/internal/widget/edit_valid.cpp ;
add_src_VNC mod/internal/widget/image.cpp ;
add_src_VNC mod/internal/widget/password.cpp ;
add_src_VNC mod/internal/widget/edit.cpp ;



local obj_list ;
rule add_src ( src : requirements * )
{
    obj $(src).o : $(REDEMPTION_SRC_PATH)/$(src) : $(requirements) ;
    obj_list += $(src).o ;
}
add_src core/app_path.cpp :
    <conditional>@defines
    <define>SHARE_PATH='\"$(FIXTURES_PATH)\"'
    <define>CFG_PATH='\"$(REDEMPTION_SYS_PATH)$(MAIN_PATH)\"'
;
add_src capture/capture.cpp ;
add_src capture/file_to_graphic.cpp ;
add_src capture/rdp_ppocr/get_ocr_constants.cpp ;
add_src capture/utils/match_finder.cpp ;
add_src capture/video_capture.cpp ;
add_src capture/video_recorder.cpp ;
add_src core/RDP/mppc.cpp ;
add_src core/RDP/nego.cpp ;
add_src core/font.cpp ;
add_src gdi/clip_from_cmd.cpp ;
add_src gdi/graphic_api.cpp ;
add_src gdi/protected_graphics.cpp ;
add_src keyboard/keymap2.cpp ;
add_src keyboard/keymapSym.cpp ;
add_src mod/internal/client_execute.cpp ;
add_src mod/internal/internal_mod.cpp ;
add_src mod/internal/locally_integrable_mod.cpp ;
add_src mod/internal/rail_module_host_mod.cpp ;
add_src mod/internal/replay_mod.cpp ;
add_src mod/internal/widget/composite.cpp ;
add_src mod/internal/widget/flat_button.cpp ;
add_src mod/internal/widget/label.cpp ;
add_src mod/internal/widget/module_host.cpp ;
add_src mod/internal/widget/multiline.cpp ;
add_src mod/internal/widget/rail_module_host.cpp ;
add_src mod/internal/widget/screen.cpp ;
add_src mod/internal/widget/scroll.cpp ;
add_src mod/internal/widget/tooltip.cpp ;
add_src transport/crypto_transport.cpp ;
add_src transport/mwrm_reader.cpp ;
add_src transport/socket_transport.cpp ;
add_src utils/authorization_channels.cpp ;
add_src utils/bitmap.cpp ;
add_src utils/bitmap_from_file.cpp ;
add_src utils/cfgloader.cpp ;
add_src utils/confdescriptor.cpp ;
add_src utils/d3des.cpp ;
add_src utils/fileutils.cpp ;
add_src utils/log_as_logprint.cpp ;
add_src utils/netutils.cpp ;
add_src utils/pattutils.cpp ;
add_src utils/png.cpp ;
add_src utils/rle.cpp ;



constant lib_list :
    krb5
    openssl
    crypto
    png
    ocr
    gssglue
    ffmpeg
    dl
    snappy
;

constant EXE_DEPENDENCIES :
    <define>MAIN_PATH='\"$(MAIN_PATH)\"'
    <define>REDEMPTION_QT_VERSION=$(qtversion)
;

if $(qtversion) = 4
{
    using qt : /usr ;
    alias libqtclient : /qt//QtGui ;
    alias libphonon : /qt//phonon ;
}
else
{
    using qt5
        : /usr/lib/x86_64-linux-gnu/qt5
        : 5.3
        :
        :
        :
        :
        : $(QT5_INCLUDE)
        : /usr/lib/x86_64-linux-gnu
        ;

    alias libqtclient :
        /qt5//QtGui
        /qt5//QtNetwork
        /qt5//QtWidgets
    ;

    lib libphonon : : <name>phonon4qt5 <link>shared ;
}

obj front_Qt$(qtversion)_rdp.o : src/main_qt_client_redemption.cpp :
    <define>REDEMPTION_DECL_LOG_TEST
    $(EXE_DEPENDENCIES)
;

exe client_rdp_Qt$(qtversion) :
    src/qt_input_output_api/qt_output_sound.hpp
    src/qt_input_output_api/qt_input_output_clipboard.hpp
    src/qt_input_output_api/qt_input_socket.hpp
    src/qt_input_output_api/qt_graphics_components/qt_progress_bar_window.hpp
    src/qt_input_output_api/qt_graphics_components/qt_options_window.hpp
    src/qt_input_output_api/qt_graphics_components/qt_screen_window.hpp
    src/qt_input_output_api/qt_graphics_components/qt_form_window.hpp
    front_Qt$(qtversion)_rdp.o
    $(obj_list)
    $(lib_list)
    $(obj_list_VNC)
    config.o
    hexdump.o
    libqtclient
    libphonon
:
    $(EXE_DEPENDENCIES)
    <toolset>gcc:<cxxflags>-Wuseless-cast&&-Wno-useless-cast
;

alias client_rdp_Qt : client_rdp_Qt$(qtversion) ;
