// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');

    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
      return func;
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;




// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 5254256;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_bitmap_data_allocator_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });
  

memoryInitializer = "client_rdp_JS.html.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function _free() {
  }
  Module["_free"] = _free;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, SDL.eventHandlerTemp]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop(0); // 0 is a default parameter, but WebKit is confused by it #3861
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Make sure value is properly clamped
        value = Math.min(1, Math.max(value, -1));
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_MapRGB(fmt, r, g, b) {
      SDL.checkPixelFormat(fmt);
      // We assume the machine is little-endian.
      return r&0xff|(g&0xff)<<8|(b&0xff)<<16|0xff000000;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  function ___gxx_personality_v0() {
    }

  function _pthread_mutex_lock() {}

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }


  function ___lock() {}

  function ___unlock() {}

  function _SDL_FillRect(surf, rect, color) {
      var surfData = SDL.surfaces[surf];
      assert(!surfData.locked); // but we could unlock and re-lock if we must..
  
      if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
        //in SDL_HWPALETTE color is index (0..255)
        //so we should translate 1 byte value to
        //32 bit canvas
        color = surfData.colors32[color];
      }
  
      var r = rect ? SDL.loadRect(rect) : { x: 0, y: 0, w: surfData.width, h: surfData.height };
  
      if (surfData.clipRect) {
        r = SDL.intersectionOfRects(surfData.clipRect, r);
  
        if (rect) {
          SDL.updateRect(rect, r);
        }
      }
  
      surfData.ctx.save();
      surfData.ctx.fillStyle = SDL.translateColorToCSSRGBA(color);
      surfData.ctx.fillRect(r.x, r.y, r.w, r.h);
      surfData.ctx.restore();
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _llvm_fabs_f64=Math_abs;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _SDL_UnlockSurface(surf) {
      assert(!SDL.GL); // in GL mode we do not keep around 2D canvases and contexts
  
      var surfData = SDL.surfaces[surf];
  
      if (!surfData.locked || --surfData.locked > 0) {
        return;
      }
  
      // Copy pixel data to image
      if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
        SDL.copyIndexedColorData(surfData);
      } else if (!surfData.colors) {
        var data = surfData.image.data;
        var buffer = surfData.buffer;
        assert(buffer % 4 == 0, 'Invalid buffer offset: ' + buffer);
        var src = buffer >> 2;
        var dst = 0;
        var isScreen = surf == SDL.screen;
        var num;
        if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) {
          // IE10/IE11: ImageData objects are backed by the deprecated CanvasPixelArray,
          // not UInt8ClampedArray. These don't have buffers, so we need to revert
          // to copying a byte at a time. We do the undefined check because modern
          // browsers do not define CanvasPixelArray anymore.
          num = data.length;
          while (dst < num) {
            var val = HEAP32[src]; // This is optimized. Instead, we could do HEAP32[(((buffer)+(dst))>>2)];
            data[dst  ] = val & 0xff;
            data[dst+1] = (val >> 8) & 0xff;
            data[dst+2] = (val >> 16) & 0xff;
            data[dst+3] = isScreen ? 0xff : ((val >> 24) & 0xff);
            src++;
            dst += 4;
          }
        } else {
          var data32 = new Uint32Array(data.buffer);
          if (isScreen && SDL.defaults.opaqueFrontBuffer) {
            num = data32.length;
            // logically we need to do
            //      while (dst < num) {
            //          data32[dst++] = HEAP32[src++] | 0xff000000
            //      }
            // the following code is faster though, because
            // .set() is almost free - easily 10x faster due to
            // native memcpy efficiencies, and the remaining loop
            // just stores, not load + store, so it is faster
            data32.set(HEAP32.subarray(src, src + num));
            var data8 = new Uint8Array(data.buffer);
            var i = 3;
            var j = i + 4*num;
            if (num % 8 == 0) {
              // unrolling gives big speedups
              while (i < j) {
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
              }
             } else {
              while (i < j) {
                data8[i] = 0xff;
                i = i + 4 | 0;
              }
            }
          } else {
            data32.set(HEAP32.subarray(src, src + data32.length));
          }
        }
      } else {
        var width = Module['canvas'].width;
        var height = Module['canvas'].height;
        var s = surfData.buffer;
        var data = surfData.image.data;
        var colors = surfData.colors; // TODO: optimize using colors32
        for (var y = 0; y < height; y++) {
          var base = y*width*4;
          for (var x = 0; x < width; x++) {
            // See comment above about signs
            var val = HEAPU8[((s++)>>0)] * 4;
            var start = base + x*4;
            data[start]   = colors[val];
            data[start+1] = colors[val+1];
            data[start+2] = colors[val+2];
          }
          s += width*3;
        }
      }
      // Copy to canvas
      surfData.ctx.putImageData(surfData.image, 0, 0);
      // Note that we save the image, so future writes are fast. But, memory is not yet released
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _SDL_MapRGBA(fmt, r, g, b, a) {
      SDL.checkPixelFormat(fmt);
      // We assume the machine is little-endian.
      return r&0xff|(g&0xff)<<8|(b&0xff)<<16|(a&0xff)<<24;
    }


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function ___cxa_guard_release() {}

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

   
  Module["_memmove"] = _memmove;

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function _pthread_mutex_unlock() {}

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
___buildEnvironment(ENV);;
var GLctx; GL.init();
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_pthread_cond_wait": _pthread_cond_wait, "_putenv": _putenv, "_SDL_UnlockSurface": _SDL_UnlockSurface, "___syscall54": ___syscall54, "_atexit": _atexit, "_IMG_Load": _IMG_Load, "___syscall6": ___syscall6, "_llvm_fabs_f64": _llvm_fabs_f64, "_TTF_FontHeight": _TTF_FontHeight, "_SDL_CloseAudio": _SDL_CloseAudio, "_SDL_RWFromFile": _SDL_RWFromFile, "_SDL_GetTicks": _SDL_GetTicks, "___gxx_personality_v0": ___gxx_personality_v0, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_strftime": _strftime, "___buildEnvironment": ___buildEnvironment, "_pthread_cond_broadcast": _pthread_cond_broadcast, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_SDL_LockSurface": _SDL_LockSurface, "___cxa_guard_acquire": ___cxa_guard_acquire, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_SDL_Init": _SDL_Init, "_Mix_PlayChannel": _Mix_PlayChannel, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "___cxa_begin_catch": ___cxa_begin_catch, "_pthread_getspecific": _pthread_getspecific, "_Mix_PlayMusic": _Mix_PlayMusic, "__arraySum": __arraySum, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_SDL_PauseAudio": _SDL_PauseAudio, "_SDL_FillRect": _SDL_FillRect, "_pthread_self": _pthread_self, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "_TTF_SizeText": _TTF_SizeText, "_SDL_UpperBlit": _SDL_UpperBlit, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_pthread_key_create": _pthread_key_create, "___unlock": ___unlock, "__isLeapYear": __isLeapYear, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_SDL_MapRGB": _SDL_MapRGB, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "_getenv": _getenv, "___cxa_throw": ___cxa_throw, "__exit": __exit, "___lock": ___lock, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "___cxa_pure_virtual": ___cxa_pure_virtual, "_Mix_FreeChunk": _Mix_FreeChunk, "_Mix_HaltMusic": _Mix_HaltMusic, "_SDL_MapRGBA": _SDL_MapRGBA, "_gettimeofday": _gettimeofday, "_SDL_FreeRW": _SDL_FreeRW, "___syscall140": ___syscall140, "_exit": _exit, "_IMG_Load_RW": _IMG_Load_RW, "_time": _time, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _putenv=env._putenv;
  var _SDL_UnlockSurface=env._SDL_UnlockSurface;
  var ___syscall54=env.___syscall54;
  var _atexit=env._atexit;
  var _IMG_Load=env._IMG_Load;
  var ___syscall6=env.___syscall6;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _strftime=env._strftime;
  var ___buildEnvironment=env.___buildEnvironment;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _SDL_Init=env._SDL_Init;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _pthread_getspecific=env._pthread_getspecific;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var __arraySum=env.__arraySum;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _SDL_FillRect=env._SDL_FillRect;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var _TTF_SizeText=env._TTF_SizeText;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _pthread_key_create=env._pthread_key_create;
  var ___unlock=env.___unlock;
  var __isLeapYear=env.__isLeapYear;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _SDL_MapRGB=env._SDL_MapRGB;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var _getenv=env._getenv;
  var ___cxa_throw=env.___cxa_throw;
  var __exit=env.__exit;
  var ___lock=env.___lock;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var _abort=env._abort;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _SDL_MapRGBA=env._SDL_MapRGBA;
  var _gettimeofday=env._gettimeofday;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _time=env._time;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $$3$i$i = 0, $$3$i$i1008 = 0, $$3$i$i1021 = 0, $$3$i$i1034 = 0, $$3$i$i1047 = 0, $$3$i$i105 = 0, $$3$i$i1060 = 0, $$3$i$i1073 = 0, $$3$i$i1086 = 0, $$3$i$i1099 = 0, $$3$i$i1112 = 0, $$3$i$i1125 = 0, $$3$i$i1138 = 0, $$3$i$i1151 = 0, $$3$i$i1164 = 0, $$3$i$i1177 = 0, $$3$i$i118 = 0, $$3$i$i1190 = 0, $$3$i$i1203 = 0, $$3$i$i1216 = 0, $$3$i$i1229 = 0, $$3$i$i1242 = 0, $$3$i$i1255 = 0, $$3$i$i1268 = 0, $$3$i$i1281 = 0, $$3$i$i1294 = 0, $$3$i$i1307 = 0, $$3$i$i131 = 0, $$3$i$i1320 = 0, $$3$i$i1333 = 0, $$3$i$i1346 = 0, $$3$i$i1359 = 0, $$3$i$i1372 = 0, $$3$i$i1385 = 0, $$3$i$i1398 = 0, $$3$i$i14 = 0, $$3$i$i1411 = 0, $$3$i$i1424 = 0, $$3$i$i1437 = 0, $$3$i$i144 = 0, $$3$i$i1450 = 0, $$3$i$i1463 = 0, $$3$i$i1476 = 0, $$3$i$i1489 = 0, $$3$i$i1502 = 0, $$3$i$i1515 = 0, $$3$i$i1528 = 0, $$3$i$i1541 = 0, $$3$i$i1554 = 0, $$3$i$i1567 = 0, $$3$i$i157 = 0, $$3$i$i1580 = 0, $$3$i$i1593 = 0, $$3$i$i1606 = 0, $$3$i$i1619 = 0, $$3$i$i1632 = 0, $$3$i$i1648 = 0, $$3$i$i1661 = 0, $$3$i$i1677 = 0, $$3$i$i170 = 0, $$3$i$i1771 = 0, $$3$i$i1784 = 0, $$3$i$i1797 = 0, $$3$i$i1810 = 0, $$3$i$i1823 = 0, $$3$i$i183 = 0, $$3$i$i1836 = 0, $$3$i$i1852 = 0, $$3$i$i1925 = 0, $$3$i$i1938 = 0, $$3$i$i1951 = 0, $$3$i$i196 = 0, $$3$i$i1964 = 0, $$3$i$i1977 = 0, $$3$i$i1990 = 0, $$3$i$i2040 = 0, $$3$i$i2052 = 0, $$3$i$i2064 = 0, $$3$i$i2076 = 0, $$3$i$i2088 = 0, $$3$i$i209 = 0, $$3$i$i2100 = 0, $$3$i$i2112 = 0, $$3$i$i2124 = 0, $$3$i$i2136 = 0, $$3$i$i2148 = 0, $$3$i$i2160 = 0, $$3$i$i2172 = 0, $$3$i$i2184 = 0, $$3$i$i2196 = 0, $$3$i$i2208 = 0, $$3$i$i222 = 0, $$3$i$i2220 = 0, $$3$i$i2232 = 0, $$3$i$i2244 = 0, $$3$i$i2255 = 0, $$3$i$i2267 = 0, $$3$i$i2280 = 0, $$3$i$i2292 = 0, $$3$i$i2304 = 0, $$3$i$i2315 = 0, $$3$i$i2327 = 0, $$3$i$i2340 = 0, $$3$i$i235 = 0, $$3$i$i2352 = 0, $$3$i$i2364 = 0, $$3$i$i2375 = 0, $$3$i$i2387 = 0, $$3$i$i2400 = 0, $$3$i$i2412 = 0, $$3$i$i2424 = 0, $$3$i$i2435 = 0, $$3$i$i2447 = 0, $$3$i$i2460 = 0, $$3$i$i2472 = 0, $$3$i$i248 = 0, $$3$i$i2484 = 0, $$3$i$i2495 = 0, $$3$i$i2507 = 0, $$3$i$i2520 = 0, $$3$i$i2532 = 0, $$3$i$i2544 = 0, $$3$i$i2555 = 0, $$3$i$i2567 = 0, $$3$i$i2580 = 0, $$3$i$i2592 = 0, $$3$i$i2604 = 0, $$3$i$i261 = 0, $$3$i$i2615 = 0, $$3$i$i2627 = 0, $$3$i$i2640 = 0, $$3$i$i2652 = 0, $$3$i$i2664 = 0, $$3$i$i2675 = 0, $$3$i$i2687 = 0, $$3$i$i27 = 0, $$3$i$i2700 = 0, $$3$i$i2712 = 0, $$3$i$i2724 = 0, $$3$i$i2736 = 0, $$3$i$i274 = 0, $$3$i$i2748 = 0, $$3$i$i2760 = 0, $$3$i$i2772 = 0, $$3$i$i2784 = 0, $$3$i$i2796 = 0, $$3$i$i2808 = 0, $$3$i$i2820 = 0, $$3$i$i2832 = 0, $$3$i$i2844 = 0, $$3$i$i2856 = 0, $$3$i$i2868 = 0, $$3$i$i287 = 0, $$3$i$i2880 = 0, $$3$i$i2892 = 0, $$3$i$i2903 = 0, $$3$i$i2915 = 0, $$3$i$i2928 = 0, $$3$i$i2940 = 0, $$3$i$i2952 = 0, $$3$i$i2964 = 0, $$3$i$i2976 = 0, $$3$i$i2988 = 0, $$3$i$i300 = 0, $$3$i$i3000 = 0, $$3$i$i3012 = 0, $$3$i$i3024 = 0, $$3$i$i3036 = 0, $$3$i$i3048 = 0, $$3$i$i3060 = 0, $$3$i$i3072 = 0, $$3$i$i3084 = 0, $$3$i$i3096 = 0, $$3$i$i3107 = 0, $$3$i$i3119 = 0, $$3$i$i313 = 0, $$3$i$i3131 = 0, $$3$i$i3143 = 0, $$3$i$i3155 = 0, $$3$i$i3167 = 0, $$3$i$i3180 = 0, $$3$i$i3192 = 0, $$3$i$i3204 = 0, $$3$i$i3216 = 0, $$3$i$i3228 = 0, $$3$i$i3240 = 0, $$3$i$i3252 = 0, $$3$i$i326 = 0, $$3$i$i3264 = 0, $$3$i$i3276 = 0, $$3$i$i3288 = 0, $$3$i$i3300 = 0, $$3$i$i3312 = 0, $$3$i$i3324 = 0, $$3$i$i3336 = 0, $$3$i$i3348 = 0, $$3$i$i3360 = 0, $$3$i$i3372 = 0, $$3$i$i3384 = 0, $$3$i$i339 = 0, $$3$i$i3396 = 0, $$3$i$i3408 = 0, $$3$i$i3420 = 0, $$3$i$i3432 = 0, $$3$i$i3444 = 0, $$3$i$i3456 = 0, $$3$i$i3468 = 0, $$3$i$i3480 = 0, $$3$i$i3492 = 0, $$3$i$i3504 = 0, $$3$i$i3516 = 0, $$3$i$i352 = 0, $$3$i$i3528 = 0, $$3$i$i3540 = 0, $$3$i$i3552 = 0, $$3$i$i3564 = 0, $$3$i$i3576 = 0, $$3$i$i3587 = 0, $$3$i$i3599 = 0, $$3$i$i3612 = 0, $$3$i$i3624 = 0, $$3$i$i3636 = 0, $$3$i$i3647 = 0, $$3$i$i365 = 0, $$3$i$i3659 = 0, $$3$i$i3671 = 0, $$3$i$i3683 = 0, $$3$i$i3695 = 0, $$3$i$i3707 = 0, $$3$i$i3719 = 0, $$3$i$i3731 = 0, $$3$i$i3743 = 0, $$3$i$i3755 = 0, $$3$i$i3767 = 0, $$3$i$i3779 = 0, $$3$i$i378 = 0, $$3$i$i3791 = 0, $$3$i$i3803 = 0, $$3$i$i3815 = 0, $$3$i$i3827 = 0, $$3$i$i3839 = 0, $$3$i$i3851 = 0, $$3$i$i3863 = 0, $$3$i$i3875 = 0, $$3$i$i3888 = 0, $$3$i$i3900 = 0, $$3$i$i391 = 0, $$3$i$i3912 = 0, $$3$i$i3924 = 0, $$3$i$i3936 = 0, $$3$i$i3948 = 0, $$3$i$i3960 = 0, $$3$i$i3972 = 0, $$3$i$i3984 = 0, $$3$i$i3996 = 0, $$3$i$i40 = 0, $$3$i$i4008 = 0, $$3$i$i4020 = 0, $$3$i$i4032 = 0, $$3$i$i404 = 0, $$3$i$i4044 = 0, $$3$i$i4056 = 0, $$3$i$i4068 = 0, $$3$i$i4080 = 0, $$3$i$i4092 = 0, $$3$i$i4104 = 0, $$3$i$i4116 = 0, $$3$i$i4128 = 0, $$3$i$i4140 = 0, $$3$i$i4152 = 0, $$3$i$i4164 = 0, $$3$i$i417 = 0, $$3$i$i4176 = 0, $$3$i$i4188 = 0, $$3$i$i4200 = 0, $$3$i$i4212 = 0, $$3$i$i4224 = 0, $$3$i$i4236 = 0, $$3$i$i4248 = 0, $$3$i$i4260 = 0, $$3$i$i4272 = 0, $$3$i$i4284 = 0, $$3$i$i4296 = 0, $$3$i$i430 = 0, $$3$i$i4308 = 0, $$3$i$i4320 = 0, $$3$i$i4332 = 0, $$3$i$i4344 = 0, $$3$i$i4356 = 0, $$3$i$i443 = 0, $$3$i$i456 = 0, $$3$i$i469 = 0, $$3$i$i482 = 0, $$3$i$i495 = 0, $$3$i$i508 = 0, $$3$i$i521 = 0, $$3$i$i53 = 0, $$3$i$i534 = 0, $$3$i$i547 = 0, $$3$i$i560 = 0, $$3$i$i573 = 0, $$3$i$i586 = 0, $$3$i$i599 = 0, $$3$i$i612 = 0, $$3$i$i625 = 0, $$3$i$i638 = 0, $$3$i$i651 = 0, $$3$i$i66 = 0, $$3$i$i664 = 0, $$3$i$i677 = 0, $$3$i$i690 = 0, $$3$i$i709 = 0, $$3$i$i722 = 0, $$3$i$i735 = 0, $$3$i$i748 = 0, $$3$i$i761 = 0, $$3$i$i774 = 0, $$3$i$i787 = 0, $$3$i$i79 = 0, $$3$i$i800 = 0, $$3$i$i813 = 0, $$3$i$i826 = 0, $$3$i$i839 = 0, $$3$i$i852 = 0, $$3$i$i865 = 0, $$3$i$i878 = 0, $$3$i$i891 = 0, $$3$i$i904 = 0, $$3$i$i917 = 0, $$3$i$i92 = 0, $$3$i$i930 = 0, $$3$i$i943 = 0, $$3$i$i956 = 0, $$3$i$i969 = 0, $$3$i$i982 = 0, $$3$i$i995 = 0, $$lcssa$i$i = 0, $$lcssa$i$i1007 = 0, $$lcssa$i$i1020 = 0, $$lcssa$i$i1033 = 0, $$lcssa$i$i104 = 0, $$lcssa$i$i1046 = 0, $$lcssa$i$i1059 = 0, $$lcssa$i$i1072 = 0, $$lcssa$i$i1085 = 0, $$lcssa$i$i1098 = 0, $$lcssa$i$i1111 = 0, $$lcssa$i$i1124 = 0, $$lcssa$i$i1137 = 0, $$lcssa$i$i1150 = 0, $$lcssa$i$i1163 = 0, $$lcssa$i$i117 = 0, $$lcssa$i$i1176 = 0, $$lcssa$i$i1189 = 0, $$lcssa$i$i1202 = 0, $$lcssa$i$i1215 = 0, $$lcssa$i$i1228 = 0, $$lcssa$i$i1241 = 0, $$lcssa$i$i1254 = 0, $$lcssa$i$i1267 = 0, $$lcssa$i$i1280 = 0, $$lcssa$i$i1293 = 0, $$lcssa$i$i13 = 0, $$lcssa$i$i130 = 0, $$lcssa$i$i1306 = 0, $$lcssa$i$i1319 = 0, $$lcssa$i$i1332 = 0, $$lcssa$i$i1345 = 0, $$lcssa$i$i1358 = 0, $$lcssa$i$i1371 = 0, $$lcssa$i$i1384 = 0, $$lcssa$i$i1397 = 0, $$lcssa$i$i1410 = 0, $$lcssa$i$i1423 = 0, $$lcssa$i$i143 = 0, $$lcssa$i$i1436 = 0, $$lcssa$i$i1449 = 0, $$lcssa$i$i1462 = 0, $$lcssa$i$i1475 = 0, $$lcssa$i$i1488 = 0, $$lcssa$i$i1501 = 0, $$lcssa$i$i1514 = 0, $$lcssa$i$i1527 = 0, $$lcssa$i$i1540 = 0, $$lcssa$i$i1553 = 0, $$lcssa$i$i156 = 0, $$lcssa$i$i1566 = 0, $$lcssa$i$i1579 = 0, $$lcssa$i$i1592 = 0, $$lcssa$i$i1605 = 0, $$lcssa$i$i1618 = 0, $$lcssa$i$i1631 = 0, $$lcssa$i$i1647 = 0, $$lcssa$i$i1660 = 0, $$lcssa$i$i1676 = 0, $$lcssa$i$i169 = 0, $$lcssa$i$i1770 = 0, $$lcssa$i$i1783 = 0, $$lcssa$i$i1796 = 0, $$lcssa$i$i1809 = 0, $$lcssa$i$i182 = 0, $$lcssa$i$i1822 = 0, $$lcssa$i$i1835 = 0, $$lcssa$i$i1851 = 0, $$lcssa$i$i1924 = 0, $$lcssa$i$i1937 = 0, $$lcssa$i$i195 = 0, $$lcssa$i$i1950 = 0, $$lcssa$i$i1963 = 0, $$lcssa$i$i1976 = 0, $$lcssa$i$i1989 = 0, $$lcssa$i$i2039 = 0, $$lcssa$i$i2051 = 0, $$lcssa$i$i2063 = 0, $$lcssa$i$i2075 = 0, $$lcssa$i$i208 = 0, $$lcssa$i$i2087 = 0, $$lcssa$i$i2099 = 0, $$lcssa$i$i2111 = 0, $$lcssa$i$i2123 = 0, $$lcssa$i$i2135 = 0, $$lcssa$i$i2147 = 0, $$lcssa$i$i2159 = 0, $$lcssa$i$i2171 = 0, $$lcssa$i$i2183 = 0, $$lcssa$i$i2195 = 0, $$lcssa$i$i2207 = 0, $$lcssa$i$i221 = 0, $$lcssa$i$i2219 = 0, $$lcssa$i$i2231 = 0, $$lcssa$i$i2243 = 0, $$lcssa$i$i2254 = 0, $$lcssa$i$i2266 = 0, $$lcssa$i$i2279 = 0, $$lcssa$i$i2291 = 0, $$lcssa$i$i2303 = 0, $$lcssa$i$i2314 = 0, $$lcssa$i$i2326 = 0, $$lcssa$i$i2339 = 0, $$lcssa$i$i234 = 0, $$lcssa$i$i2351 = 0, $$lcssa$i$i2363 = 0, $$lcssa$i$i2374 = 0, $$lcssa$i$i2386 = 0, $$lcssa$i$i2399 = 0, $$lcssa$i$i2411 = 0, $$lcssa$i$i2423 = 0, $$lcssa$i$i2434 = 0, $$lcssa$i$i2446 = 0, $$lcssa$i$i2459 = 0, $$lcssa$i$i247 = 0, $$lcssa$i$i2471 = 0, $$lcssa$i$i2483 = 0, $$lcssa$i$i2494 = 0, $$lcssa$i$i2506 = 0, $$lcssa$i$i2519 = 0, $$lcssa$i$i2531 = 0, $$lcssa$i$i2543 = 0, $$lcssa$i$i2554 = 0, $$lcssa$i$i2566 = 0, $$lcssa$i$i2579 = 0, $$lcssa$i$i2591 = 0, $$lcssa$i$i26 = 0, $$lcssa$i$i260 = 0, $$lcssa$i$i2603 = 0, $$lcssa$i$i2614 = 0, $$lcssa$i$i2626 = 0, $$lcssa$i$i2639 = 0, $$lcssa$i$i2651 = 0, $$lcssa$i$i2663 = 0, $$lcssa$i$i2674 = 0, $$lcssa$i$i2686 = 0, $$lcssa$i$i2699 = 0, $$lcssa$i$i2711 = 0, $$lcssa$i$i2723 = 0, $$lcssa$i$i273 = 0, $$lcssa$i$i2735 = 0, $$lcssa$i$i2747 = 0, $$lcssa$i$i2759 = 0, $$lcssa$i$i2771 = 0, $$lcssa$i$i2783 = 0, $$lcssa$i$i2795 = 0, $$lcssa$i$i2807 = 0, $$lcssa$i$i2819 = 0, $$lcssa$i$i2831 = 0, $$lcssa$i$i2843 = 0, $$lcssa$i$i2855 = 0, $$lcssa$i$i286 = 0, $$lcssa$i$i2867 = 0, $$lcssa$i$i2879 = 0, $$lcssa$i$i2891 = 0, $$lcssa$i$i2902 = 0, $$lcssa$i$i2914 = 0, $$lcssa$i$i2927 = 0, $$lcssa$i$i2939 = 0, $$lcssa$i$i2951 = 0, $$lcssa$i$i2963 = 0, $$lcssa$i$i2975 = 0, $$lcssa$i$i2987 = 0, $$lcssa$i$i299 = 0, $$lcssa$i$i2999 = 0, $$lcssa$i$i3011 = 0, $$lcssa$i$i3023 = 0, $$lcssa$i$i3035 = 0, $$lcssa$i$i3047 = 0, $$lcssa$i$i3059 = 0, $$lcssa$i$i3071 = 0, $$lcssa$i$i3083 = 0, $$lcssa$i$i3095 = 0, $$lcssa$i$i3106 = 0, $$lcssa$i$i3118 = 0, $$lcssa$i$i312 = 0, $$lcssa$i$i3130 = 0, $$lcssa$i$i3142 = 0, $$lcssa$i$i3154 = 0, $$lcssa$i$i3166 = 0, $$lcssa$i$i3179 = 0, $$lcssa$i$i3191 = 0, $$lcssa$i$i3203 = 0, $$lcssa$i$i3215 = 0, $$lcssa$i$i3227 = 0, $$lcssa$i$i3239 = 0, $$lcssa$i$i325 = 0, $$lcssa$i$i3251 = 0, $$lcssa$i$i3263 = 0, $$lcssa$i$i3275 = 0, $$lcssa$i$i3287 = 0, $$lcssa$i$i3299 = 0, $$lcssa$i$i3311 = 0, $$lcssa$i$i3323 = 0, $$lcssa$i$i3335 = 0, $$lcssa$i$i3347 = 0, $$lcssa$i$i3359 = 0, $$lcssa$i$i3371 = 0, $$lcssa$i$i338 = 0, $$lcssa$i$i3383 = 0, $$lcssa$i$i3395 = 0, $$lcssa$i$i3407 = 0, $$lcssa$i$i3419 = 0, $$lcssa$i$i3431 = 0, $$lcssa$i$i3443 = 0, $$lcssa$i$i3455 = 0, $$lcssa$i$i3467 = 0, $$lcssa$i$i3479 = 0, $$lcssa$i$i3491 = 0, $$lcssa$i$i3503 = 0, $$lcssa$i$i351 = 0, $$lcssa$i$i3515 = 0, $$lcssa$i$i3527 = 0, $$lcssa$i$i3539 = 0, $$lcssa$i$i3551 = 0, $$lcssa$i$i3563 = 0, $$lcssa$i$i3575 = 0, $$lcssa$i$i3586 = 0, $$lcssa$i$i3598 = 0, $$lcssa$i$i3611 = 0, $$lcssa$i$i3623 = 0, $$lcssa$i$i3635 = 0, $$lcssa$i$i364 = 0, $$lcssa$i$i3646 = 0, $$lcssa$i$i3658 = 0, $$lcssa$i$i3670 = 0, $$lcssa$i$i3682 = 0, $$lcssa$i$i3694 = 0, $$lcssa$i$i3706 = 0, $$lcssa$i$i3718 = 0, $$lcssa$i$i3730 = 0, $$lcssa$i$i3742 = 0, $$lcssa$i$i3754 = 0, $$lcssa$i$i3766 = 0, $$lcssa$i$i377 = 0, $$lcssa$i$i3778 = 0, $$lcssa$i$i3790 = 0, $$lcssa$i$i3802 = 0, $$lcssa$i$i3814 = 0, $$lcssa$i$i3826 = 0, $$lcssa$i$i3838 = 0, $$lcssa$i$i3850 = 0, $$lcssa$i$i3862 = 0, $$lcssa$i$i3874 = 0, $$lcssa$i$i3887 = 0, $$lcssa$i$i3899 = 0, $$lcssa$i$i39 = 0, $$lcssa$i$i390 = 0, $$lcssa$i$i3911 = 0, $$lcssa$i$i3923 = 0, $$lcssa$i$i3935 = 0, $$lcssa$i$i3947 = 0, $$lcssa$i$i3959 = 0, $$lcssa$i$i3971 = 0, $$lcssa$i$i3983 = 0, $$lcssa$i$i3995 = 0, $$lcssa$i$i4007 = 0, $$lcssa$i$i4019 = 0, $$lcssa$i$i403 = 0, $$lcssa$i$i4031 = 0, $$lcssa$i$i4043 = 0, $$lcssa$i$i4055 = 0, $$lcssa$i$i4067 = 0, $$lcssa$i$i4079 = 0, $$lcssa$i$i4091 = 0, $$lcssa$i$i4103 = 0, $$lcssa$i$i4115 = 0, $$lcssa$i$i4127 = 0, $$lcssa$i$i4139 = 0, $$lcssa$i$i4151 = 0, $$lcssa$i$i416 = 0, $$lcssa$i$i4163 = 0, $$lcssa$i$i4175 = 0, $$lcssa$i$i4187 = 0, $$lcssa$i$i4199 = 0, $$lcssa$i$i4211 = 0, $$lcssa$i$i4223 = 0, $$lcssa$i$i4235 = 0, $$lcssa$i$i4247 = 0, $$lcssa$i$i4259 = 0, $$lcssa$i$i4271 = 0, $$lcssa$i$i4283 = 0, $$lcssa$i$i429 = 0, $$lcssa$i$i4295 = 0, $$lcssa$i$i4307 = 0, $$lcssa$i$i4319 = 0, $$lcssa$i$i4331 = 0, $$lcssa$i$i4343 = 0, $$lcssa$i$i4355 = 0, $$lcssa$i$i442 = 0, $$lcssa$i$i455 = 0, $$lcssa$i$i468 = 0, $$lcssa$i$i481 = 0, $$lcssa$i$i494 = 0, $$lcssa$i$i507 = 0, $$lcssa$i$i52 = 0, $$lcssa$i$i520 = 0, $$lcssa$i$i533 = 0, $$lcssa$i$i546 = 0, $$lcssa$i$i559 = 0, $$lcssa$i$i572 = 0, $$lcssa$i$i585 = 0, $$lcssa$i$i598 = 0, $$lcssa$i$i611 = 0, $$lcssa$i$i624 = 0, $$lcssa$i$i637 = 0, $$lcssa$i$i65 = 0, $$lcssa$i$i650 = 0, $$lcssa$i$i663 = 0, $$lcssa$i$i676 = 0, $$lcssa$i$i689 = 0, $$lcssa$i$i708 = 0, $$lcssa$i$i721 = 0, $$lcssa$i$i734 = 0, $$lcssa$i$i747 = 0, $$lcssa$i$i760 = 0, $$lcssa$i$i773 = 0, $$lcssa$i$i78 = 0, $$lcssa$i$i786 = 0, $$lcssa$i$i799 = 0, $$lcssa$i$i812 = 0, $$lcssa$i$i825 = 0, $$lcssa$i$i838 = 0, $$lcssa$i$i851 = 0, $$lcssa$i$i864 = 0, $$lcssa$i$i877 = 0, $$lcssa$i$i890 = 0, $$lcssa$i$i903 = 0, $$lcssa$i$i91 = 0, $$lcssa$i$i916 = 0, $$lcssa$i$i929 = 0, $$lcssa$i$i942 = 0, $$lcssa$i$i955 = 0, $$lcssa$i$i968 = 0, $$lcssa$i$i981 = 0, $$lcssa$i$i994 = 0, $$lcssa8$i$i = 0, $$lcssa8$i$i1006 = 0, $$lcssa8$i$i1019 = 0, $$lcssa8$i$i103 = 0, $$lcssa8$i$i1032 = 0, $$lcssa8$i$i1045 = 0, $$lcssa8$i$i1058 = 0, $$lcssa8$i$i1071 = 0, $$lcssa8$i$i1084 = 0, $$lcssa8$i$i1097 = 0, $$lcssa8$i$i1110 = 0, $$lcssa8$i$i1123 = 0, $$lcssa8$i$i1136 = 0, $$lcssa8$i$i1149 = 0, $$lcssa8$i$i116 = 0, $$lcssa8$i$i1162 = 0, $$lcssa8$i$i1175 = 0, $$lcssa8$i$i1188 = 0, $$lcssa8$i$i12 = 0, $$lcssa8$i$i1201 = 0, $$lcssa8$i$i1214 = 0, $$lcssa8$i$i1227 = 0, $$lcssa8$i$i1240 = 0, $$lcssa8$i$i1253 = 0, $$lcssa8$i$i1266 = 0, $$lcssa8$i$i1279 = 0, $$lcssa8$i$i129 = 0, $$lcssa8$i$i1292 = 0, $$lcssa8$i$i1305 = 0, $$lcssa8$i$i1318 = 0, $$lcssa8$i$i1331 = 0, $$lcssa8$i$i1344 = 0, $$lcssa8$i$i1357 = 0, $$lcssa8$i$i1370 = 0, $$lcssa8$i$i1383 = 0, $$lcssa8$i$i1396 = 0, $$lcssa8$i$i1409 = 0, $$lcssa8$i$i142 = 0, $$lcssa8$i$i1422 = 0, $$lcssa8$i$i1435 = 0, $$lcssa8$i$i1448 = 0, $$lcssa8$i$i1461 = 0, $$lcssa8$i$i1474 = 0, $$lcssa8$i$i1487 = 0, $$lcssa8$i$i1500 = 0, $$lcssa8$i$i1513 = 0, $$lcssa8$i$i1526 = 0, $$lcssa8$i$i1539 = 0, $$lcssa8$i$i155 = 0, $$lcssa8$i$i1552 = 0, $$lcssa8$i$i1565 = 0, $$lcssa8$i$i1578 = 0, $$lcssa8$i$i1591 = 0, $$lcssa8$i$i1604 = 0, $$lcssa8$i$i1617 = 0, $$lcssa8$i$i1630 = 0, $$lcssa8$i$i1646 = 0, $$lcssa8$i$i1659 = 0, $$lcssa8$i$i1675 = 0, $$lcssa8$i$i168 = 0, $$lcssa8$i$i1769 = 0, $$lcssa8$i$i1782 = 0, $$lcssa8$i$i1795 = 0, $$lcssa8$i$i1808 = 0, $$lcssa8$i$i181 = 0, $$lcssa8$i$i1821 = 0, $$lcssa8$i$i1834 = 0, $$lcssa8$i$i1850 = 0, $$lcssa8$i$i1923 = 0, $$lcssa8$i$i1936 = 0, $$lcssa8$i$i194 = 0, $$lcssa8$i$i1949 = 0, $$lcssa8$i$i1962 = 0, $$lcssa8$i$i1975 = 0, $$lcssa8$i$i1988 = 0, $$lcssa8$i$i2038 = 0, $$lcssa8$i$i2050 = 0, $$lcssa8$i$i2062 = 0, $$lcssa8$i$i207 = 0, $$lcssa8$i$i2074 = 0, $$lcssa8$i$i2086 = 0, $$lcssa8$i$i2098 = 0, $$lcssa8$i$i2110 = 0, $$lcssa8$i$i2122 = 0, $$lcssa8$i$i2134 = 0, $$lcssa8$i$i2146 = 0, $$lcssa8$i$i2158 = 0, $$lcssa8$i$i2170 = 0, $$lcssa8$i$i2182 = 0, $$lcssa8$i$i2194 = 0, $$lcssa8$i$i220 = 0, $$lcssa8$i$i2206 = 0, $$lcssa8$i$i2218 = 0, $$lcssa8$i$i2230 = 0, $$lcssa8$i$i2242 = 0, $$lcssa8$i$i2253 = 0, $$lcssa8$i$i2265 = 0, $$lcssa8$i$i2278 = 0, $$lcssa8$i$i2290 = 0, $$lcssa8$i$i2302 = 0, $$lcssa8$i$i2313 = 0, $$lcssa8$i$i2325 = 0, $$lcssa8$i$i233 = 0, $$lcssa8$i$i2338 = 0, $$lcssa8$i$i2350 = 0, $$lcssa8$i$i2362 = 0, $$lcssa8$i$i2373 = 0, $$lcssa8$i$i2385 = 0, $$lcssa8$i$i2398 = 0, $$lcssa8$i$i2410 = 0, $$lcssa8$i$i2422 = 0, $$lcssa8$i$i2433 = 0, $$lcssa8$i$i2445 = 0, $$lcssa8$i$i2458 = 0, $$lcssa8$i$i246 = 0, $$lcssa8$i$i2470 = 0, $$lcssa8$i$i2482 = 0, $$lcssa8$i$i2493 = 0, $$lcssa8$i$i25 = 0, $$lcssa8$i$i2505 = 0, $$lcssa8$i$i2518 = 0, $$lcssa8$i$i2530 = 0, $$lcssa8$i$i2542 = 0, $$lcssa8$i$i2553 = 0, $$lcssa8$i$i2565 = 0, $$lcssa8$i$i2578 = 0, $$lcssa8$i$i259 = 0, $$lcssa8$i$i2590 = 0, $$lcssa8$i$i2602 = 0, $$lcssa8$i$i2613 = 0, $$lcssa8$i$i2625 = 0, $$lcssa8$i$i2638 = 0, $$lcssa8$i$i2650 = 0, $$lcssa8$i$i2662 = 0, $$lcssa8$i$i2673 = 0, $$lcssa8$i$i2685 = 0, $$lcssa8$i$i2698 = 0, $$lcssa8$i$i2710 = 0, $$lcssa8$i$i272 = 0, $$lcssa8$i$i2722 = 0, $$lcssa8$i$i2734 = 0, $$lcssa8$i$i2746 = 0, $$lcssa8$i$i2758 = 0, $$lcssa8$i$i2770 = 0, $$lcssa8$i$i2782 = 0, $$lcssa8$i$i2794 = 0, $$lcssa8$i$i2806 = 0, $$lcssa8$i$i2818 = 0, $$lcssa8$i$i2830 = 0, $$lcssa8$i$i2842 = 0, $$lcssa8$i$i285 = 0, $$lcssa8$i$i2854 = 0, $$lcssa8$i$i2866 = 0, $$lcssa8$i$i2878 = 0, $$lcssa8$i$i2890 = 0, $$lcssa8$i$i2901 = 0, $$lcssa8$i$i2913 = 0, $$lcssa8$i$i2926 = 0, $$lcssa8$i$i2938 = 0, $$lcssa8$i$i2950 = 0, $$lcssa8$i$i2962 = 0, $$lcssa8$i$i2974 = 0, $$lcssa8$i$i298 = 0, $$lcssa8$i$i2986 = 0, $$lcssa8$i$i2998 = 0, $$lcssa8$i$i3010 = 0, $$lcssa8$i$i3022 = 0, $$lcssa8$i$i3034 = 0, $$lcssa8$i$i3046 = 0, $$lcssa8$i$i3058 = 0, $$lcssa8$i$i3070 = 0, $$lcssa8$i$i3082 = 0, $$lcssa8$i$i3094 = 0, $$lcssa8$i$i3105 = 0, $$lcssa8$i$i311 = 0, $$lcssa8$i$i3117 = 0, $$lcssa8$i$i3129 = 0, $$lcssa8$i$i3141 = 0, $$lcssa8$i$i3153 = 0, $$lcssa8$i$i3165 = 0, $$lcssa8$i$i3178 = 0, $$lcssa8$i$i3190 = 0, $$lcssa8$i$i3202 = 0, $$lcssa8$i$i3214 = 0, $$lcssa8$i$i3226 = 0, $$lcssa8$i$i3238 = 0, $$lcssa8$i$i324 = 0, $$lcssa8$i$i3250 = 0, $$lcssa8$i$i3262 = 0, $$lcssa8$i$i3274 = 0, $$lcssa8$i$i3286 = 0, $$lcssa8$i$i3298 = 0, $$lcssa8$i$i3310 = 0, $$lcssa8$i$i3322 = 0, $$lcssa8$i$i3334 = 0, $$lcssa8$i$i3346 = 0, $$lcssa8$i$i3358 = 0, $$lcssa8$i$i337 = 0, $$lcssa8$i$i3370 = 0, $$lcssa8$i$i3382 = 0, $$lcssa8$i$i3394 = 0, $$lcssa8$i$i3406 = 0, $$lcssa8$i$i3418 = 0, $$lcssa8$i$i3430 = 0, $$lcssa8$i$i3442 = 0, $$lcssa8$i$i3454 = 0, $$lcssa8$i$i3466 = 0, $$lcssa8$i$i3478 = 0, $$lcssa8$i$i3490 = 0, $$lcssa8$i$i350 = 0, $$lcssa8$i$i3502 = 0, $$lcssa8$i$i3514 = 0, $$lcssa8$i$i3526 = 0, $$lcssa8$i$i3538 = 0, $$lcssa8$i$i3550 = 0, $$lcssa8$i$i3562 = 0, $$lcssa8$i$i3574 = 0, $$lcssa8$i$i3585 = 0, $$lcssa8$i$i3597 = 0, $$lcssa8$i$i3610 = 0, $$lcssa8$i$i3622 = 0, $$lcssa8$i$i363 = 0, $$lcssa8$i$i3634 = 0, $$lcssa8$i$i3645 = 0, $$lcssa8$i$i3657 = 0, $$lcssa8$i$i3669 = 0, $$lcssa8$i$i3681 = 0, $$lcssa8$i$i3693 = 0, $$lcssa8$i$i3705 = 0, $$lcssa8$i$i3717 = 0, $$lcssa8$i$i3729 = 0, $$lcssa8$i$i3741 = 0, $$lcssa8$i$i3753 = 0, $$lcssa8$i$i376 = 0, $$lcssa8$i$i3765 = 0, $$lcssa8$i$i3777 = 0, $$lcssa8$i$i3789 = 0, $$lcssa8$i$i38 = 0, $$lcssa8$i$i3801 = 0, $$lcssa8$i$i3813 = 0, $$lcssa8$i$i3825 = 0, $$lcssa8$i$i3837 = 0, $$lcssa8$i$i3849 = 0, $$lcssa8$i$i3861 = 0, $$lcssa8$i$i3873 = 0, $$lcssa8$i$i3886 = 0, $$lcssa8$i$i389 = 0, $$lcssa8$i$i3898 = 0, $$lcssa8$i$i3910 = 0, $$lcssa8$i$i3922 = 0, $$lcssa8$i$i3934 = 0, $$lcssa8$i$i3946 = 0, $$lcssa8$i$i3958 = 0, $$lcssa8$i$i3970 = 0, $$lcssa8$i$i3982 = 0, $$lcssa8$i$i3994 = 0, $$lcssa8$i$i4006 = 0, $$lcssa8$i$i4018 = 0, $$lcssa8$i$i402 = 0, $$lcssa8$i$i4030 = 0, $$lcssa8$i$i4042 = 0, $$lcssa8$i$i4054 = 0, $$lcssa8$i$i4066 = 0, $$lcssa8$i$i4078 = 0, $$lcssa8$i$i4090 = 0, $$lcssa8$i$i4102 = 0, $$lcssa8$i$i4114 = 0, $$lcssa8$i$i4126 = 0, $$lcssa8$i$i4138 = 0, $$lcssa8$i$i415 = 0, $$lcssa8$i$i4150 = 0, $$lcssa8$i$i4162 = 0, $$lcssa8$i$i4174 = 0, $$lcssa8$i$i4186 = 0, $$lcssa8$i$i4198 = 0, $$lcssa8$i$i4210 = 0, $$lcssa8$i$i4222 = 0, $$lcssa8$i$i4234 = 0, $$lcssa8$i$i4246 = 0, $$lcssa8$i$i4258 = 0, $$lcssa8$i$i4270 = 0, $$lcssa8$i$i428 = 0, $$lcssa8$i$i4282 = 0, $$lcssa8$i$i4294 = 0, $$lcssa8$i$i4306 = 0, $$lcssa8$i$i4318 = 0, $$lcssa8$i$i4330 = 0, $$lcssa8$i$i4342 = 0, $$lcssa8$i$i4354 = 0, $$lcssa8$i$i441 = 0, $$lcssa8$i$i454 = 0, $$lcssa8$i$i467 = 0, $$lcssa8$i$i480 = 0, $$lcssa8$i$i493 = 0, $$lcssa8$i$i506 = 0, $$lcssa8$i$i51 = 0, $$lcssa8$i$i519 = 0, $$lcssa8$i$i532 = 0, $$lcssa8$i$i545 = 0, $$lcssa8$i$i558 = 0, $$lcssa8$i$i571 = 0, $$lcssa8$i$i584 = 0, $$lcssa8$i$i597 = 0, $$lcssa8$i$i610 = 0, $$lcssa8$i$i623 = 0, $$lcssa8$i$i636 = 0, $$lcssa8$i$i64 = 0, $$lcssa8$i$i649 = 0, $$lcssa8$i$i662 = 0, $$lcssa8$i$i675 = 0, $$lcssa8$i$i688 = 0, $$lcssa8$i$i707 = 0, $$lcssa8$i$i720 = 0, $$lcssa8$i$i733 = 0, $$lcssa8$i$i746 = 0, $$lcssa8$i$i759 = 0, $$lcssa8$i$i77 = 0, $$lcssa8$i$i772 = 0, $$lcssa8$i$i785 = 0, $$lcssa8$i$i798 = 0, $$lcssa8$i$i811 = 0, $$lcssa8$i$i824 = 0, $$lcssa8$i$i837 = 0, $$lcssa8$i$i850 = 0, $$lcssa8$i$i863 = 0, $$lcssa8$i$i876 = 0, $$lcssa8$i$i889 = 0, $$lcssa8$i$i90 = 0, $$lcssa8$i$i902 = 0, $$lcssa8$i$i915 = 0, $$lcssa8$i$i928 = 0, $$lcssa8$i$i941 = 0, $$lcssa8$i$i954 = 0, $$lcssa8$i$i967 = 0, $$lcssa8$i$i980 = 0, $$lcssa8$i$i993 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $10024 = 0, $10026 = 0, $1003 = 0, $10033 = 0, $10038 = 0, $1004 = 0, $10040 = 0, $10045 = 0, $1005 = 0, $10050 = 0, $10055 = 0, $10059 = 0, $1006 = 0, $1007 = 0, $10075 = 0, $10077 = 0, $1008 = 0, $10084 = 0, $10089 = 0, $1009 = 0, $10091 = 0, $10096 = 0, $101 = 0, $1010 = 0, $10101 = 0, $10106 = 0, $1011 = 0, $10110 = 0, $1012 = 0, $10126 = 0, $10128 = 0, $1013 = 0, $10135 = 0, $1014 = 0, $10140 = 0, $10142 = 0, $10147 = 0, $1015 = 0, $10152 = 0, $10157 = 0, $1016 = 0, $10161 = 0, $1017 = 0, $10176 = 0, $10178 = 0, $1018 = 0, $10185 = 0, $1019 = 0, $10190 = 0, $10192 = 0, $10197 = 0, $102 = 0, $1020 = 0, $10202 = 0, $10207 = 0, $1021 = 0, $10211 = 0, $1022 = 0, $10224 = 0, $10226 = 0, $1023 = 0, $10233 = 0, $10238 = 0, $1024 = 0, $10240 = 0, $10245 = 0, $1025 = 0, $10250 = 0, $10255 = 0, $10259 = 0, $1026 = 0, $1027 = 0, $10270 = 0, $10272 = 0, $10279 = 0, $1028 = 0, $10284 = 0, $10286 = 0, $1029 = 0, $10291 = 0, $10296 = 0, $103 = 0, $1030 = 0, $10301 = 0, $10305 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $10330 = 0, $10332 = 0, $10339 = 0, $1034 = 0, $10344 = 0, $10346 = 0, $1035 = 0, $10351 = 0, $10356 = 0, $1036 = 0, $10361 = 0, $10365 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $10395 = 0, $10397 = 0, $104 = 0, $1040 = 0, $10404 = 0, $10409 = 0, $1041 = 0, $10411 = 0, $10416 = 0, $1042 = 0, $10421 = 0, $10426 = 0, $1043 = 0, $10430 = 0, $1044 = 0, $1045 = 0, $10459 = 0, $1046 = 0, $10461 = 0, $10468 = 0, $1047 = 0, $10473 = 0, $10475 = 0, $1048 = 0, $10480 = 0, $10485 = 0, $1049 = 0, $10490 = 0, $10494 = 0, $105 = 0, $1050 = 0, $1051 = 0, $10518 = 0, $1052 = 0, $10520 = 0, $10527 = 0, $1053 = 0, $10532 = 0, $10534 = 0, $10539 = 0, $1054 = 0, $10544 = 0, $10549 = 0, $1055 = 0, $10553 = 0, $1056 = 0, $10566 = 0, $10568 = 0, $1057 = 0, $10570 = 0, $1058 = 0, $10583 = 0, $10588 = 0, $1059 = 0, $10590 = 0, $10595 = 0, $106 = 0, $1060 = 0, $10600 = 0, $10605 = 0, $10609 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $10647 = 0, $10649 = 0, $1065 = 0, $10656 = 0, $1066 = 0, $10661 = 0, $10663 = 0, $10668 = 0, $1067 = 0, $10673 = 0, $10678 = 0, $1068 = 0, $10682 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $10712 = 0, $10714 = 0, $10716 = 0, $1072 = 0, $10729 = 0, $1073 = 0, $10734 = 0, $10736 = 0, $1074 = 0, $10741 = 0, $10746 = 0, $1075 = 0, $10751 = 0, $10755 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $10785 = 0, $10787 = 0, $10789 = 0, $1079 = 0, $10797 = 0, $108 = 0, $1080 = 0, $10805 = 0, $1081 = 0, $10813 = 0, $1082 = 0, $10821 = 0, $10829 = 0, $1083 = 0, $10837 = 0, $1084 = 0, $10845 = 0, $1085 = 0, $10853 = 0, $1086 = 0, $10861 = 0, $10869 = 0, $1087 = 0, $10877 = 0, $1088 = 0, $10885 = 0, $1089 = 0, $10893 = 0, $109 = 0, $1090 = 0, $10901 = 0, $10909 = 0, $1091 = 0, $10917 = 0, $1092 = 0, $10925 = 0, $1093 = 0, $10933 = 0, $1094 = 0, $10941 = 0, $10949 = 0, $1095 = 0, $10957 = 0, $1096 = 0, $10965 = 0, $1097 = 0, $10973 = 0, $1098 = 0, $10981 = 0, $10989 = 0, $1099 = 0, $10997 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $11010 = 0, $11015 = 0, $11017 = 0, $1102 = 0, $11022 = 0, $11027 = 0, $1103 = 0, $11032 = 0, $11036 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $11084 = 0, $11086 = 0, $1109 = 0, $11093 = 0, $11098 = 0, $111 = 0, $1110 = 0, $11100 = 0, $11105 = 0, $1111 = 0, $11110 = 0, $11115 = 0, $11119 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $11165 = 0, $11167 = 0, $1117 = 0, $11174 = 0, $11179 = 0, $1118 = 0, $11181 = 0, $11186 = 0, $1119 = 0, $11191 = 0, $11196 = 0, $112 = 0, $1120 = 0, $11200 = 0, $1121 = 0, $1122 = 0, $11228 = 0, $1123 = 0, $11230 = 0, $11237 = 0, $1124 = 0, $11242 = 0, $11244 = 0, $11249 = 0, $1125 = 0, $11254 = 0, $11259 = 0, $1126 = 0, $11263 = 0, $1127 = 0, $1128 = 0, $11281 = 0, $11283 = 0, $1129 = 0, $11290 = 0, $11295 = 0, $11297 = 0, $113 = 0, $1130 = 0, $11302 = 0, $11307 = 0, $1131 = 0, $11312 = 0, $11316 = 0, $1132 = 0, $1133 = 0, $11338 = 0, $1134 = 0, $11340 = 0, $11347 = 0, $1135 = 0, $11352 = 0, $11354 = 0, $11359 = 0, $1136 = 0, $11364 = 0, $11369 = 0, $1137 = 0, $11373 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $11419 = 0, $1142 = 0, $11421 = 0, $11423 = 0, $1143 = 0, $11436 = 0, $1144 = 0, $11441 = 0, $11443 = 0, $11448 = 0, $1145 = 0, $11453 = 0, $11458 = 0, $1146 = 0, $11462 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $11510 = 0, $11512 = 0, $11514 = 0, $1152 = 0, $11522 = 0, $1153 = 0, $11530 = 0, $11538 = 0, $1154 = 0, $11546 = 0, $1155 = 0, $11554 = 0, $1156 = 0, $11562 = 0, $1157 = 0, $11570 = 0, $11578 = 0, $1158 = 0, $11586 = 0, $1159 = 0, $11594 = 0, $116 = 0, $1160 = 0, $11602 = 0, $1161 = 0, $11610 = 0, $11618 = 0, $1162 = 0, $11626 = 0, $1163 = 0, $11634 = 0, $1164 = 0, $11642 = 0, $1165 = 0, $11650 = 0, $11658 = 0, $1166 = 0, $11666 = 0, $1167 = 0, $11679 = 0, $1168 = 0, $11684 = 0, $11686 = 0, $1169 = 0, $11691 = 0, $11696 = 0, $117 = 0, $1170 = 0, $11701 = 0, $11705 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $11753 = 0, $11755 = 0, $1176 = 0, $11762 = 0, $11767 = 0, $11769 = 0, $1177 = 0, $11774 = 0, $11779 = 0, $1178 = 0, $11784 = 0, $11788 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $11817 = 0, $11819 = 0, $1182 = 0, $11826 = 0, $1183 = 0, $11831 = 0, $11833 = 0, $11838 = 0, $1184 = 0, $11843 = 0, $11848 = 0, $1185 = 0, $11852 = 0, $1186 = 0, $11864 = 0, $11866 = 0, $1187 = 0, $11873 = 0, $11878 = 0, $1188 = 0, $11880 = 0, $11885 = 0, $1189 = 0, $11890 = 0, $11895 = 0, $11899 = 0, $119 = 0, $1190 = 0, $1191 = 0, $11919 = 0, $1192 = 0, $11921 = 0, $11928 = 0, $1193 = 0, $11933 = 0, $11935 = 0, $1194 = 0, $11940 = 0, $11945 = 0, $1195 = 0, $11950 = 0, $11954 = 0, $1196 = 0, $1197 = 0, $11971 = 0, $11973 = 0, $1198 = 0, $11980 = 0, $11985 = 0, $11987 = 0, $1199 = 0, $11992 = 0, $11997 = 0, $12 = 0, $120 = 0, $1200 = 0, $12002 = 0, $12006 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $12052 = 0, $12054 = 0, $12056 = 0, $1206 = 0, $12064 = 0, $1207 = 0, $12072 = 0, $1208 = 0, $12080 = 0, $12088 = 0, $1209 = 0, $12096 = 0, $121 = 0, $1210 = 0, $12104 = 0, $1211 = 0, $12112 = 0, $1212 = 0, $12120 = 0, $12128 = 0, $1213 = 0, $12136 = 0, $1214 = 0, $12144 = 0, $1215 = 0, $12152 = 0, $1216 = 0, $12160 = 0, $12168 = 0, $1217 = 0, $12176 = 0, $1218 = 0, $12184 = 0, $1219 = 0, $12192 = 0, $122 = 0, $1220 = 0, $12200 = 0, $12208 = 0, $1221 = 0, $12216 = 0, $1222 = 0, $12224 = 0, $1223 = 0, $12232 = 0, $1224 = 0, $12240 = 0, $12248 = 0, $1225 = 0, $12256 = 0, $1226 = 0, $12264 = 0, $1227 = 0, $12272 = 0, $1228 = 0, $12280 = 0, $12288 = 0, $1229 = 0, $12296 = 0, $123 = 0, $1230 = 0, $12304 = 0, $1231 = 0, $12312 = 0, $1232 = 0, $12320 = 0, $12328 = 0, $1233 = 0, $12336 = 0, $1234 = 0, $12344 = 0, $1235 = 0, $12352 = 0, $1236 = 0, $12360 = 0, $12368 = 0, $1237 = 0, $12376 = 0, $1238 = 0, $12384 = 0, $1239 = 0, $12392 = 0, $124 = 0, $1240 = 0, $12400 = 0, $12408 = 0, $1241 = 0, $12416 = 0, $1242 = 0, $12424 = 0, $1243 = 0, $12432 = 0, $1244 = 0, $12440 = 0, $1245 = 0, $12453 = 0, $12458 = 0, $1246 = 0, $12460 = 0, $12465 = 0, $1247 = 0, $12470 = 0, $12475 = 0, $12479 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $12502 = 0, $12504 = 0, $1251 = 0, $12511 = 0, $12516 = 0, $12518 = 0, $1252 = 0, $12523 = 0, $12528 = 0, $1253 = 0, $12533 = 0, $12537 = 0, $1254 = 0, $12547 = 0, $12548 = 0, $1255 = 0, $12550 = 0, $12552 = 0, $12553 = 0, $12555 = 0, $12557 = 0, $12558 = 0, $1256 = 0, $12560 = 0, $12562 = 0, $12563 = 0, $12565 = 0, $12567 = 0, $12568 = 0, $1257 = 0, $12570 = 0, $12572 = 0, $12573 = 0, $12575 = 0, $12577 = 0, $12578 = 0, $1258 = 0, $12580 = 0, $12582 = 0, $12583 = 0, $12585 = 0, $12587 = 0, $12588 = 0, $1259 = 0, $12590 = 0, $12592 = 0, $12593 = 0, $12595 = 0, $12597 = 0, $12598 = 0, $126 = 0, $1260 = 0, $12600 = 0, $12602 = 0, $12603 = 0, $12605 = 0, $12607 = 0, $12608 = 0, $1261 = 0, $12610 = 0, $12612 = 0, $12614 = 0, $1262 = 0, $12621 = 0, $12626 = 0, $12628 = 0, $1263 = 0, $12633 = 0, $12638 = 0, $1264 = 0, $12643 = 0, $12647 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $12670 = 0, $12672 = 0, $12679 = 0, $1268 = 0, $12684 = 0, $12686 = 0, $1269 = 0, $12691 = 0, $12696 = 0, $127 = 0, $1270 = 0, $12701 = 0, $12705 = 0, $1271 = 0, $1272 = 0, $12728 = 0, $1273 = 0, $12730 = 0, $12737 = 0, $1274 = 0, $12742 = 0, $12744 = 0, $12749 = 0, $1275 = 0, $12754 = 0, $12759 = 0, $1276 = 0, $12763 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $12821 = 0, $12823 = 0, $1283 = 0, $12830 = 0, $12835 = 0, $12837 = 0, $1284 = 0, $12842 = 0, $12847 = 0, $1285 = 0, $12852 = 0, $12856 = 0, $1286 = 0, $1287 = 0, $12879 = 0, $1288 = 0, $12881 = 0, $12888 = 0, $1289 = 0, $12893 = 0, $12895 = 0, $129 = 0, $1290 = 0, $12900 = 0, $12905 = 0, $1291 = 0, $12910 = 0, $12914 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $12972 = 0, $12974 = 0, $1298 = 0, $12981 = 0, $12986 = 0, $12988 = 0, $1299 = 0, $12993 = 0, $12998 = 0, $13 = 0, $130 = 0, $1300 = 0, $13003 = 0, $13007 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $13030 = 0, $13032 = 0, $13039 = 0, $1304 = 0, $13044 = 0, $13046 = 0, $1305 = 0, $13051 = 0, $13056 = 0, $1306 = 0, $13061 = 0, $13065 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $13100 = 0, $13102 = 0, $13109 = 0, $1311 = 0, $13114 = 0, $13116 = 0, $1312 = 0, $13121 = 0, $13126 = 0, $1313 = 0, $13131 = 0, $13135 = 0, $1314 = 0, $1315 = 0, $13157 = 0, $13159 = 0, $1316 = 0, $13166 = 0, $1317 = 0, $13171 = 0, $13173 = 0, $13178 = 0, $1318 = 0, $13183 = 0, $13188 = 0, $1319 = 0, $13192 = 0, $132 = 0, $1320 = 0, $13203 = 0, $13205 = 0, $1321 = 0, $13212 = 0, $13217 = 0, $13219 = 0, $1322 = 0, $13224 = 0, $13229 = 0, $1323 = 0, $13234 = 0, $13238 = 0, $1324 = 0, $1325 = 0, $13258 = 0, $1326 = 0, $13260 = 0, $13267 = 0, $1327 = 0, $13272 = 0, $13274 = 0, $13279 = 0, $1328 = 0, $13284 = 0, $13289 = 0, $1329 = 0, $13293 = 0, $133 = 0, $1330 = 0, $1331 = 0, $13316 = 0, $13318 = 0, $1332 = 0, $13325 = 0, $1333 = 0, $13330 = 0, $13332 = 0, $13337 = 0, $1334 = 0, $13342 = 0, $13347 = 0, $1335 = 0, $13351 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $13409 = 0, $1341 = 0, $13411 = 0, $13418 = 0, $1342 = 0, $13423 = 0, $13425 = 0, $1343 = 0, $13430 = 0, $13435 = 0, $1344 = 0, $13440 = 0, $13444 = 0, $1345 = 0, $1346 = 0, $13467 = 0, $13469 = 0, $1347 = 0, $13476 = 0, $1348 = 0, $13481 = 0, $13483 = 0, $13488 = 0, $1349 = 0, $13493 = 0, $13498 = 0, $135 = 0, $1350 = 0, $13502 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $13560 = 0, $13562 = 0, $13569 = 0, $1357 = 0, $13574 = 0, $13576 = 0, $1358 = 0, $13581 = 0, $13586 = 0, $1359 = 0, $13591 = 0, $13595 = 0, $136 = 0, $1360 = 0, $1361 = 0, $13618 = 0, $1362 = 0, $13620 = 0, $13627 = 0, $1363 = 0, $13632 = 0, $13634 = 0, $13639 = 0, $1364 = 0, $13644 = 0, $13649 = 0, $1365 = 0, $13653 = 0, $1366 = 0, $1367 = 0, $13675 = 0, $13677 = 0, $1368 = 0, $13684 = 0, $13689 = 0, $1369 = 0, $13691 = 0, $13696 = 0, $137 = 0, $1370 = 0, $13701 = 0, $13706 = 0, $1371 = 0, $13710 = 0, $1372 = 0, $13726 = 0, $13728 = 0, $1373 = 0, $13735 = 0, $1374 = 0, $13740 = 0, $13742 = 0, $13747 = 0, $1375 = 0, $13752 = 0, $13757 = 0, $1376 = 0, $13761 = 0, $1377 = 0, $13774 = 0, $13776 = 0, $1378 = 0, $13783 = 0, $13788 = 0, $1379 = 0, $13790 = 0, $13795 = 0, $138 = 0, $1380 = 0, $13800 = 0, $13805 = 0, $13809 = 0, $1381 = 0, $1382 = 0, $13821 = 0, $13823 = 0, $1383 = 0, $13830 = 0, $13835 = 0, $13837 = 0, $1384 = 0, $13842 = 0, $13847 = 0, $1385 = 0, $13852 = 0, $13856 = 0, $1386 = 0, $1387 = 0, $13872 = 0, $13874 = 0, $1388 = 0, $13881 = 0, $13886 = 0, $13888 = 0, $1389 = 0, $13893 = 0, $13898 = 0, $139 = 0, $1390 = 0, $13903 = 0, $13907 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $13936 = 0, $13938 = 0, $1394 = 0, $13945 = 0, $1395 = 0, $13950 = 0, $13952 = 0, $13957 = 0, $1396 = 0, $13962 = 0, $13967 = 0, $1397 = 0, $13971 = 0, $1398 = 0, $1399 = 0, $13994 = 0, $13996 = 0, $14 = 0, $140 = 0, $1400 = 0, $14003 = 0, $14008 = 0, $1401 = 0, $14010 = 0, $14015 = 0, $1402 = 0, $14020 = 0, $14025 = 0, $14029 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $14087 = 0, $14089 = 0, $1409 = 0, $14096 = 0, $141 = 0, $1410 = 0, $14101 = 0, $14103 = 0, $14108 = 0, $1411 = 0, $14113 = 0, $14118 = 0, $1412 = 0, $14122 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $14180 = 0, $14182 = 0, $14189 = 0, $1419 = 0, $14194 = 0, $14196 = 0, $142 = 0, $1420 = 0, $14201 = 0, $14206 = 0, $1421 = 0, $14211 = 0, $14215 = 0, $1422 = 0, $1423 = 0, $14238 = 0, $1424 = 0, $14240 = 0, $14247 = 0, $1425 = 0, $14252 = 0, $14254 = 0, $14259 = 0, $1426 = 0, $14264 = 0, $14269 = 0, $1427 = 0, $14273 = 0, $1428 = 0, $1429 = 0, $14298 = 0, $143 = 0, $1430 = 0, $14300 = 0, $14307 = 0, $1431 = 0, $14312 = 0, $14314 = 0, $14319 = 0, $1432 = 0, $14324 = 0, $14329 = 0, $1433 = 0, $14333 = 0, $1434 = 0, $1435 = 0, $14350 = 0, $14352 = 0, $14359 = 0, $1436 = 0, $14364 = 0, $14366 = 0, $1437 = 0, $14371 = 0, $14376 = 0, $1438 = 0, $14381 = 0, $14385 = 0, $1439 = 0, $14398 = 0, $144 = 0, $1440 = 0, $14400 = 0, $14407 = 0, $1441 = 0, $14412 = 0, $14414 = 0, $14419 = 0, $1442 = 0, $14424 = 0, $14429 = 0, $1443 = 0, $14433 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $14466 = 0, $14468 = 0, $1447 = 0, $14470 = 0, $14478 = 0, $1448 = 0, $14486 = 0, $1449 = 0, $14494 = 0, $145 = 0, $1450 = 0, $14502 = 0, $1451 = 0, $14510 = 0, $14518 = 0, $1452 = 0, $14526 = 0, $1453 = 0, $14534 = 0, $1454 = 0, $14542 = 0, $1455 = 0, $14550 = 0, $14558 = 0, $1456 = 0, $14566 = 0, $1457 = 0, $14574 = 0, $1458 = 0, $14582 = 0, $1459 = 0, $14590 = 0, $14598 = 0, $146 = 0, $1460 = 0, $1461 = 0, $14611 = 0, $14616 = 0, $14618 = 0, $1462 = 0, $14623 = 0, $14628 = 0, $1463 = 0, $14633 = 0, $14637 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $14667 = 0, $14669 = 0, $1467 = 0, $14676 = 0, $1468 = 0, $14681 = 0, $14683 = 0, $14688 = 0, $1469 = 0, $14693 = 0, $14698 = 0, $147 = 0, $1470 = 0, $14702 = 0, $1471 = 0, $14718 = 0, $1472 = 0, $14720 = 0, $14727 = 0, $1473 = 0, $14732 = 0, $14734 = 0, $14739 = 0, $1474 = 0, $14744 = 0, $14749 = 0, $1475 = 0, $14753 = 0, $1476 = 0, $14766 = 0, $14768 = 0, $1477 = 0, $14775 = 0, $1478 = 0, $14780 = 0, $14782 = 0, $14787 = 0, $1479 = 0, $14792 = 0, $14797 = 0, $148 = 0, $1480 = 0, $14801 = 0, $1481 = 0, $14814 = 0, $14816 = 0, $1482 = 0, $14823 = 0, $14828 = 0, $1483 = 0, $14830 = 0, $14835 = 0, $1484 = 0, $14840 = 0, $14845 = 0, $14849 = 0, $1485 = 0, $1486 = 0, $14865 = 0, $14867 = 0, $1487 = 0, $14874 = 0, $14879 = 0, $1488 = 0, $14881 = 0, $14886 = 0, $1489 = 0, $14891 = 0, $14896 = 0, $149 = 0, $1490 = 0, $14900 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $14948 = 0, $1495 = 0, $14950 = 0, $14952 = 0, $1496 = 0, $14960 = 0, $1497 = 0, $14973 = 0, $14978 = 0, $1498 = 0, $14980 = 0, $14985 = 0, $1499 = 0, $14990 = 0, $14995 = 0, $14999 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $15047 = 0, $15049 = 0, $1505 = 0, $15051 = 0, $15059 = 0, $1506 = 0, $15067 = 0, $1507 = 0, $15075 = 0, $1508 = 0, $15083 = 0, $1509 = 0, $15091 = 0, $15099 = 0, $151 = 0, $1510 = 0, $15107 = 0, $1511 = 0, $15115 = 0, $1512 = 0, $15123 = 0, $1513 = 0, $15131 = 0, $15139 = 0, $1514 = 0, $15147 = 0, $1515 = 0, $15155 = 0, $1516 = 0, $15163 = 0, $1517 = 0, $15171 = 0, $15179 = 0, $1518 = 0, $15187 = 0, $1519 = 0, $15195 = 0, $152 = 0, $1520 = 0, $15203 = 0, $1521 = 0, $15211 = 0, $15219 = 0, $1522 = 0, $15227 = 0, $1523 = 0, $15235 = 0, $1524 = 0, $15243 = 0, $1525 = 0, $15251 = 0, $15259 = 0, $1526 = 0, $15267 = 0, $1527 = 0, $15275 = 0, $1528 = 0, $15283 = 0, $1529 = 0, $15291 = 0, $15299 = 0, $153 = 0, $1530 = 0, $15307 = 0, $1531 = 0, $15315 = 0, $1532 = 0, $15323 = 0, $1533 = 0, $15336 = 0, $1534 = 0, $15341 = 0, $15343 = 0, $15348 = 0, $1535 = 0, $15353 = 0, $15358 = 0, $1536 = 0, $15362 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $15410 = 0, $15412 = 0, $15419 = 0, $1542 = 0, $15424 = 0, $15426 = 0, $1543 = 0, $15431 = 0, $15436 = 0, $1544 = 0, $15441 = 0, $15445 = 0, $1545 = 0, $1546 = 0, $15468 = 0, $1547 = 0, $15470 = 0, $15477 = 0, $1548 = 0, $15482 = 0, $15484 = 0, $15489 = 0, $1549 = 0, $15494 = 0, $15499 = 0, $155 = 0, $1550 = 0, $15503 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $15534 = 0, $15536 = 0, $1554 = 0, $15543 = 0, $15548 = 0, $1555 = 0, $15550 = 0, $15555 = 0, $1556 = 0, $15560 = 0, $15565 = 0, $15569 = 0, $1557 = 0, $1558 = 0, $15583 = 0, $15585 = 0, $1559 = 0, $15592 = 0, $15597 = 0, $15599 = 0, $156 = 0, $1560 = 0, $15604 = 0, $15609 = 0, $1561 = 0, $15614 = 0, $15618 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $15666 = 0, $15668 = 0, $1567 = 0, $15675 = 0, $1568 = 0, $15680 = 0, $15682 = 0, $15687 = 0, $1569 = 0, $15692 = 0, $15697 = 0, $157 = 0, $1570 = 0, $15701 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $15747 = 0, $15749 = 0, $1575 = 0, $15751 = 0, $15759 = 0, $1576 = 0, $15767 = 0, $1577 = 0, $15775 = 0, $1578 = 0, $15783 = 0, $1579 = 0, $15791 = 0, $15799 = 0, $158 = 0, $1580 = 0, $15807 = 0, $1581 = 0, $15815 = 0, $1582 = 0, $15823 = 0, $1583 = 0, $15831 = 0, $15839 = 0, $1584 = 0, $15847 = 0, $1585 = 0, $15855 = 0, $1586 = 0, $15863 = 0, $1587 = 0, $15871 = 0, $15879 = 0, $1588 = 0, $15887 = 0, $1589 = 0, $15895 = 0, $159 = 0, $1590 = 0, $15903 = 0, $1591 = 0, $15911 = 0, $15919 = 0, $1592 = 0, $15927 = 0, $1593 = 0, $15935 = 0, $1594 = 0, $15943 = 0, $1595 = 0, $15951 = 0, $15959 = 0, $1596 = 0, $15967 = 0, $1597 = 0, $15975 = 0, $1598 = 0, $15986 = 0, $1599 = 0, $15990 = 0, $15998 = 0, $16 = 0, $160 = 0, $1600 = 0, $16006 = 0, $1601 = 0, $16014 = 0, $1602 = 0, $16022 = 0, $1603 = 0, $16030 = 0, $16038 = 0, $1604 = 0, $16046 = 0, $1605 = 0, $16054 = 0, $1606 = 0, $16062 = 0, $1607 = 0, $16070 = 0, $16078 = 0, $1608 = 0, $16086 = 0, $1609 = 0, $16094 = 0, $161 = 0, $1610 = 0, $16102 = 0, $1611 = 0, $16110 = 0, $16118 = 0, $1612 = 0, $16126 = 0, $1613 = 0, $16134 = 0, $1614 = 0, $16142 = 0, $1615 = 0, $16150 = 0, $16158 = 0, $1616 = 0, $16166 = 0, $1617 = 0, $16174 = 0, $1618 = 0, $16182 = 0, $1619 = 0, $16190 = 0, $16198 = 0, $162 = 0, $1620 = 0, $16206 = 0, $1621 = 0, $16214 = 0, $1622 = 0, $16222 = 0, $1623 = 0, $16230 = 0, $16238 = 0, $1624 = 0, $16246 = 0, $1625 = 0, $16254 = 0, $1626 = 0, $16262 = 0, $1627 = 0, $16270 = 0, $16278 = 0, $1628 = 0, $16289 = 0, $1629 = 0, $16293 = 0, $163 = 0, $1630 = 0, $16301 = 0, $16309 = 0, $1631 = 0, $16317 = 0, $1632 = 0, $16325 = 0, $1633 = 0, $16333 = 0, $1634 = 0, $16341 = 0, $16349 = 0, $1635 = 0, $16357 = 0, $1636 = 0, $16365 = 0, $1637 = 0, $16373 = 0, $1638 = 0, $16381 = 0, $16389 = 0, $1639 = 0, $16397 = 0, $164 = 0, $1640 = 0, $16405 = 0, $1641 = 0, $16416 = 0, $1642 = 0, $16420 = 0, $16428 = 0, $1643 = 0, $16436 = 0, $1644 = 0, $16444 = 0, $1645 = 0, $16452 = 0, $1646 = 0, $16460 = 0, $16468 = 0, $1647 = 0, $16476 = 0, $1648 = 0, $16484 = 0, $1649 = 0, $16492 = 0, $165 = 0, $1650 = 0, $16500 = 0, $16508 = 0, $1651 = 0, $16516 = 0, $1652 = 0, $16524 = 0, $1653 = 0, $16532 = 0, $1654 = 0, $16540 = 0, $16548 = 0, $1655 = 0, $16556 = 0, $1656 = 0, $16564 = 0, $1657 = 0, $16572 = 0, $1658 = 0, $16580 = 0, $16588 = 0, $1659 = 0, $16596 = 0, $166 = 0, $1660 = 0, $16604 = 0, $1661 = 0, $16612 = 0, $1662 = 0, $16620 = 0, $16628 = 0, $1663 = 0, $16636 = 0, $1664 = 0, $16644 = 0, $1665 = 0, $16652 = 0, $1666 = 0, $16660 = 0, $16668 = 0, $1667 = 0, $16676 = 0, $1668 = 0, $16684 = 0, $1669 = 0, $16692 = 0, $167 = 0, $1670 = 0, $16700 = 0, $16708 = 0, $1671 = 0, $16716 = 0, $1672 = 0, $16724 = 0, $1673 = 0, $16732 = 0, $1674 = 0, $16740 = 0, $16748 = 0, $1675 = 0, $16756 = 0, $1676 = 0, $16764 = 0, $1677 = 0, $16772 = 0, $1678 = 0, $16780 = 0, $16788 = 0, $1679 = 0, $16796 = 0, $168 = 0, $1680 = 0, $16804 = 0, $1681 = 0, $16812 = 0, $1682 = 0, $16820 = 0, $16828 = 0, $1683 = 0, $16836 = 0, $1684 = 0, $16844 = 0, $1685 = 0, $16852 = 0, $1686 = 0, $16860 = 0, $16868 = 0, $1687 = 0, $16876 = 0, $1688 = 0, $16884 = 0, $1689 = 0, $16892 = 0, $169 = 0, $1690 = 0, $16900 = 0, $16908 = 0, $1691 = 0, $16916 = 0, $1692 = 0, $16924 = 0, $1693 = 0, $16932 = 0, $1694 = 0, $16940 = 0, $16948 = 0, $1695 = 0, $16956 = 0, $1696 = 0, $16964 = 0, $1697 = 0, $16972 = 0, $1698 = 0, $16980 = 0, $16988 = 0, $1699 = 0, $16996 = 0, $17 = 0, $170 = 0, $1700 = 0, $17004 = 0, $1701 = 0, $17012 = 0, $1702 = 0, $17020 = 0, $17028 = 0, $1703 = 0, $17036 = 0, $1704 = 0, $17044 = 0, $1705 = 0, $17052 = 0, $1706 = 0, $17060 = 0, $17068 = 0, $1707 = 0, $1708 = 0, $17081 = 0, $17086 = 0, $17088 = 0, $1709 = 0, $17093 = 0, $17098 = 0, $171 = 0, $1710 = 0, $17103 = 0, $17107 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $17138 = 0, $1714 = 0, $17140 = 0, $17147 = 0, $1715 = 0, $17152 = 0, $17154 = 0, $17159 = 0, $1716 = 0, $17164 = 0, $17169 = 0, $1717 = 0, $17173 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $17200 = 0, $17202 = 0, $17209 = 0, $1721 = 0, $17214 = 0, $17216 = 0, $1722 = 0, $17221 = 0, $17226 = 0, $1723 = 0, $17231 = 0, $17235 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $17260 = 0, $17262 = 0, $17269 = 0, $1727 = 0, $17274 = 0, $17276 = 0, $1728 = 0, $17281 = 0, $17286 = 0, $1729 = 0, $17291 = 0, $17295 = 0, $173 = 0, $1730 = 0, $1731 = 0, $17312 = 0, $17314 = 0, $1732 = 0, $17321 = 0, $17326 = 0, $17328 = 0, $1733 = 0, $17333 = 0, $17338 = 0, $1734 = 0, $17343 = 0, $17347 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $17372 = 0, $17374 = 0, $1738 = 0, $17381 = 0, $17386 = 0, $17388 = 0, $1739 = 0, $17393 = 0, $17398 = 0, $174 = 0, $1740 = 0, $17403 = 0, $17407 = 0, $1741 = 0, $1742 = 0, $17424 = 0, $17426 = 0, $1743 = 0, $17433 = 0, $17438 = 0, $1744 = 0, $17440 = 0, $17445 = 0, $1745 = 0, $17450 = 0, $17455 = 0, $17459 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $17485 = 0, $17487 = 0, $1749 = 0, $17494 = 0, $17499 = 0, $175 = 0, $1750 = 0, $17501 = 0, $17506 = 0, $1751 = 0, $17511 = 0, $17516 = 0, $1752 = 0, $17520 = 0, $1753 = 0, $1754 = 0, $17546 = 0, $17548 = 0, $1755 = 0, $17555 = 0, $1756 = 0, $17560 = 0, $17562 = 0, $17567 = 0, $1757 = 0, $17572 = 0, $17577 = 0, $1758 = 0, $17581 = 0, $1759 = 0, $176 = 0, $1760 = 0, $17607 = 0, $17609 = 0, $1761 = 0, $17616 = 0, $1762 = 0, $17621 = 0, $17623 = 0, $17628 = 0, $1763 = 0, $17633 = 0, $17638 = 0, $1764 = 0, $17642 = 0, $1765 = 0, $1766 = 0, $17668 = 0, $1767 = 0, $17670 = 0, $17677 = 0, $1768 = 0, $17682 = 0, $17684 = 0, $17689 = 0, $1769 = 0, $17694 = 0, $17699 = 0, $177 = 0, $1770 = 0, $17703 = 0, $1771 = 0, $1772 = 0, $17729 = 0, $1773 = 0, $17731 = 0, $17738 = 0, $1774 = 0, $17743 = 0, $17745 = 0, $1775 = 0, $17750 = 0, $17755 = 0, $1776 = 0, $17760 = 0, $17764 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $17819 = 0, $1782 = 0, $17821 = 0, $17828 = 0, $1783 = 0, $17833 = 0, $17835 = 0, $1784 = 0, $17840 = 0, $17845 = 0, $1785 = 0, $17850 = 0, $17854 = 0, $1786 = 0, $1787 = 0, $17871 = 0, $17873 = 0, $1788 = 0, $17880 = 0, $17885 = 0, $17887 = 0, $1789 = 0, $17892 = 0, $17897 = 0, $179 = 0, $1790 = 0, $17902 = 0, $17906 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $17944 = 0, $17946 = 0, $1795 = 0, $17953 = 0, $17958 = 0, $1796 = 0, $17960 = 0, $17965 = 0, $1797 = 0, $17970 = 0, $17975 = 0, $17979 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $18005 = 0, $18007 = 0, $1801 = 0, $18014 = 0, $18019 = 0, $1802 = 0, $18021 = 0, $18026 = 0, $1803 = 0, $18031 = 0, $18036 = 0, $1804 = 0, $18040 = 0, $1805 = 0, $1806 = 0, $18066 = 0, $18068 = 0, $1807 = 0, $18075 = 0, $1808 = 0, $18080 = 0, $18082 = 0, $18087 = 0, $1809 = 0, $18092 = 0, $18097 = 0, $181 = 0, $1810 = 0, $18101 = 0, $1811 = 0, $1812 = 0, $18124 = 0, $18126 = 0, $1813 = 0, $18133 = 0, $18138 = 0, $1814 = 0, $18140 = 0, $18145 = 0, $1815 = 0, $18150 = 0, $18155 = 0, $18159 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $18193 = 0, $18195 = 0, $182 = 0, $1820 = 0, $18202 = 0, $18207 = 0, $18209 = 0, $1821 = 0, $18214 = 0, $18219 = 0, $1822 = 0, $18224 = 0, $18228 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $18262 = 0, $18264 = 0, $1827 = 0, $18271 = 0, $18276 = 0, $18278 = 0, $1828 = 0, $18283 = 0, $18288 = 0, $1829 = 0, $18293 = 0, $18297 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $18320 = 0, $18322 = 0, $18329 = 0, $1833 = 0, $18334 = 0, $18336 = 0, $1834 = 0, $18341 = 0, $18346 = 0, $1835 = 0, $18351 = 0, $18355 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $18381 = 0, $18383 = 0, $1839 = 0, $18390 = 0, $18395 = 0, $18397 = 0, $184 = 0, $1840 = 0, $18402 = 0, $18407 = 0, $1841 = 0, $18412 = 0, $18416 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $18440 = 0, $18442 = 0, $18449 = 0, $1845 = 0, $18454 = 0, $18456 = 0, $1846 = 0, $18461 = 0, $18466 = 0, $1847 = 0, $18471 = 0, $18475 = 0, $1848 = 0, $1849 = 0, $18499 = 0, $185 = 0, $1850 = 0, $18501 = 0, $18503 = 0, $1851 = 0, $18511 = 0, $18519 = 0, $1852 = 0, $1853 = 0, $18532 = 0, $18537 = 0, $18539 = 0, $1854 = 0, $18544 = 0, $18549 = 0, $1855 = 0, $18554 = 0, $18558 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $18583 = 0, $18585 = 0, $1859 = 0, $18592 = 0, $18597 = 0, $18599 = 0, $186 = 0, $1860 = 0, $18604 = 0, $18609 = 0, $1861 = 0, $18614 = 0, $18618 = 0, $1862 = 0, $1863 = 0, $18635 = 0, $18637 = 0, $18639 = 0, $1864 = 0, $18647 = 0, $1865 = 0, $18658 = 0, $1866 = 0, $18662 = 0, $1867 = 0, $18670 = 0, $18678 = 0, $1868 = 0, $18686 = 0, $1869 = 0, $18694 = 0, $187 = 0, $1870 = 0, $18702 = 0, $1871 = 0, $18710 = 0, $18718 = 0, $1872 = 0, $18726 = 0, $1873 = 0, $18734 = 0, $1874 = 0, $18742 = 0, $1875 = 0, $18750 = 0, $18758 = 0, $1876 = 0, $18766 = 0, $1877 = 0, $18774 = 0, $1878 = 0, $18782 = 0, $1879 = 0, $18790 = 0, $18798 = 0, $188 = 0, $1880 = 0, $18806 = 0, $1881 = 0, $18814 = 0, $1882 = 0, $18822 = 0, $1883 = 0, $18830 = 0, $18838 = 0, $1884 = 0, $18849 = 0, $1885 = 0, $18853 = 0, $1886 = 0, $18861 = 0, $18869 = 0, $1887 = 0, $18877 = 0, $1888 = 0, $18885 = 0, $1889 = 0, $18893 = 0, $189 = 0, $1890 = 0, $18901 = 0, $18909 = 0, $1891 = 0, $18917 = 0, $1892 = 0, $18925 = 0, $1893 = 0, $18933 = 0, $1894 = 0, $18941 = 0, $18949 = 0, $1895 = 0, $18957 = 0, $1896 = 0, $18965 = 0, $1897 = 0, $18973 = 0, $1898 = 0, $18981 = 0, $18989 = 0, $1899 = 0, $18997 = 0, $19 = 0, $190 = 0, $1900 = 0, $19005 = 0, $1901 = 0, $19013 = 0, $1902 = 0, $19021 = 0, $19029 = 0, $1903 = 0, $19037 = 0, $1904 = 0, $19045 = 0, $1905 = 0, $19053 = 0, $1906 = 0, $19061 = 0, $19069 = 0, $1907 = 0, $19077 = 0, $1908 = 0, $19085 = 0, $1909 = 0, $19093 = 0, $191 = 0, $1910 = 0, $19101 = 0, $19109 = 0, $1911 = 0, $19117 = 0, $1912 = 0, $19125 = 0, $1913 = 0, $19133 = 0, $1914 = 0, $19141 = 0, $19149 = 0, $1915 = 0, $19157 = 0, $1916 = 0, $19165 = 0, $1917 = 0, $19173 = 0, $1918 = 0, $19181 = 0, $19189 = 0, $1919 = 0, $19197 = 0, $192 = 0, $1920 = 0, $19205 = 0, $1921 = 0, $19213 = 0, $1922 = 0, $19221 = 0, $19229 = 0, $1923 = 0, $19237 = 0, $1924 = 0, $19245 = 0, $1925 = 0, $19253 = 0, $1926 = 0, $19261 = 0, $19269 = 0, $1927 = 0, $19277 = 0, $1928 = 0, $19285 = 0, $1929 = 0, $19293 = 0, $193 = 0, $1930 = 0, $19301 = 0, $19309 = 0, $1931 = 0, $19317 = 0, $1932 = 0, $19325 = 0, $1933 = 0, $19333 = 0, $1934 = 0, $19341 = 0, $19349 = 0, $1935 = 0, $19357 = 0, $1936 = 0, $19365 = 0, $1937 = 0, $19373 = 0, $1938 = 0, $19381 = 0, $19389 = 0, $1939 = 0, $19397 = 0, $194 = 0, $1940 = 0, $19405 = 0, $1941 = 0, $19413 = 0, $1942 = 0, $19421 = 0, $19429 = 0, $1943 = 0, $19437 = 0, $1944 = 0, $19445 = 0, $1945 = 0, $19453 = 0, $1946 = 0, $19461 = 0, $19469 = 0, $1947 = 0, $19477 = 0, $1948 = 0, $19485 = 0, $1949 = 0, $19493 = 0, $195 = 0, $1950 = 0, $19501 = 0, $19509 = 0, $1951 = 0, $19517 = 0, $1952 = 0, $19525 = 0, $1953 = 0, $19533 = 0, $1954 = 0, $19541 = 0, $19549 = 0, $1955 = 0, $19557 = 0, $1956 = 0, $19565 = 0, $1957 = 0, $19573 = 0, $1958 = 0, $19581 = 0, $19589 = 0, $1959 = 0, $19597 = 0, $196 = 0, $1960 = 0, $19605 = 0, $1961 = 0, $19613 = 0, $1962 = 0, $19621 = 0, $19629 = 0, $1963 = 0, $19637 = 0, $1964 = 0, $19645 = 0, $1965 = 0, $19653 = 0, $1966 = 0, $19661 = 0, $19669 = 0, $1967 = 0, $19677 = 0, $1968 = 0, $19685 = 0, $1969 = 0, $19693 = 0, $197 = 0, $1970 = 0, $19701 = 0, $19709 = 0, $1971 = 0, $19717 = 0, $1972 = 0, $19725 = 0, $1973 = 0, $19733 = 0, $1974 = 0, $19741 = 0, $19749 = 0, $1975 = 0, $19757 = 0, $1976 = 0, $19765 = 0, $1977 = 0, $19773 = 0, $1978 = 0, $19781 = 0, $19789 = 0, $1979 = 0, $19797 = 0, $198 = 0, $1980 = 0, $19805 = 0, $1981 = 0, $19813 = 0, $1982 = 0, $19821 = 0, $19829 = 0, $1983 = 0, $19837 = 0, $1984 = 0, $19845 = 0, $1985 = 0, $19853 = 0, $1986 = 0, $19861 = 0, $19869 = 0, $1987 = 0, $19877 = 0, $1988 = 0, $19885 = 0, $1989 = 0, $19893 = 0, $199 = 0, $1990 = 0, $19901 = 0, $19909 = 0, $1991 = 0, $19917 = 0, $1992 = 0, $19925 = 0, $1993 = 0, $19933 = 0, $1994 = 0, $19941 = 0, $19949 = 0, $1995 = 0, $19957 = 0, $1996 = 0, $19965 = 0, $1997 = 0, $19973 = 0, $1998 = 0, $19981 = 0, $19989 = 0, $1999 = 0, $19997 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $20005 = 0, $2001 = 0, $20013 = 0, $2002 = 0, $20021 = 0, $20029 = 0, $2003 = 0, $20037 = 0, $2004 = 0, $20045 = 0, $2005 = 0, $20053 = 0, $2006 = 0, $20061 = 0, $20069 = 0, $2007 = 0, $20077 = 0, $2008 = 0, $20085 = 0, $2009 = 0, $20093 = 0, $201 = 0, $2010 = 0, $20101 = 0, $20109 = 0, $2011 = 0, $20117 = 0, $2012 = 0, $20125 = 0, $2013 = 0, $20133 = 0, $2014 = 0, $20141 = 0, $20149 = 0, $2015 = 0, $20157 = 0, $2016 = 0, $20165 = 0, $2017 = 0, $20173 = 0, $2018 = 0, $20181 = 0, $20189 = 0, $2019 = 0, $20197 = 0, $202 = 0, $2020 = 0, $20205 = 0, $2021 = 0, $20213 = 0, $2022 = 0, $20221 = 0, $20229 = 0, $2023 = 0, $20237 = 0, $2024 = 0, $20245 = 0, $2025 = 0, $20253 = 0, $2026 = 0, $20261 = 0, $20269 = 0, $2027 = 0, $20277 = 0, $2028 = 0, $20285 = 0, $2029 = 0, $20293 = 0, $203 = 0, $2030 = 0, $20301 = 0, $20309 = 0, $2031 = 0, $20317 = 0, $2032 = 0, $20325 = 0, $2033 = 0, $20333 = 0, $2034 = 0, $20341 = 0, $20349 = 0, $2035 = 0, $20357 = 0, $2036 = 0, $20365 = 0, $2037 = 0, $20373 = 0, $2038 = 0, $20381 = 0, $20389 = 0, $2039 = 0, $20397 = 0, $204 = 0, $2040 = 0, $20405 = 0, $2041 = 0, $20413 = 0, $2042 = 0, $20421 = 0, $20429 = 0, $2043 = 0, $20437 = 0, $2044 = 0, $20445 = 0, $2045 = 0, $20453 = 0, $2046 = 0, $20461 = 0, $20469 = 0, $2047 = 0, $20477 = 0, $2048 = 0, $20485 = 0, $2049 = 0, $20493 = 0, $205 = 0, $2050 = 0, $20501 = 0, $20509 = 0, $2051 = 0, $20517 = 0, $2052 = 0, $20525 = 0, $2053 = 0, $20533 = 0, $2054 = 0, $20541 = 0, $20549 = 0, $2055 = 0, $20557 = 0, $2056 = 0, $20565 = 0, $2057 = 0, $20573 = 0, $2058 = 0, $20581 = 0, $20589 = 0, $2059 = 0, $20597 = 0, $206 = 0, $2060 = 0, $20605 = 0, $2061 = 0, $20613 = 0, $2062 = 0, $20621 = 0, $20629 = 0, $2063 = 0, $20637 = 0, $2064 = 0, $20645 = 0, $2065 = 0, $20653 = 0, $2066 = 0, $20661 = 0, $20669 = 0, $2067 = 0, $20677 = 0, $2068 = 0, $20685 = 0, $2069 = 0, $20693 = 0, $207 = 0, $2070 = 0, $20701 = 0, $20709 = 0, $2071 = 0, $20717 = 0, $2072 = 0, $20725 = 0, $2073 = 0, $20733 = 0, $2074 = 0, $20741 = 0, $20749 = 0, $2075 = 0, $20757 = 0, $2076 = 0, $20765 = 0, $2077 = 0, $20773 = 0, $2078 = 0, $20781 = 0, $20789 = 0, $2079 = 0, $20797 = 0, $208 = 0, $2080 = 0, $20805 = 0, $2081 = 0, $20813 = 0, $2082 = 0, $20821 = 0, $20829 = 0, $2083 = 0, $20837 = 0, $2084 = 0, $20845 = 0, $2085 = 0, $20853 = 0, $2086 = 0, $20861 = 0, $20869 = 0, $2087 = 0, $20877 = 0, $2088 = 0, $20885 = 0, $2089 = 0, $20893 = 0, $209 = 0, $2090 = 0, $20901 = 0, $20909 = 0, $2091 = 0, $20917 = 0, $2092 = 0, $20925 = 0, $2093 = 0, $20933 = 0, $2094 = 0, $20941 = 0, $20949 = 0, $2095 = 0, $20957 = 0, $2096 = 0, $20965 = 0, $2097 = 0, $20973 = 0, $2098 = 0, $20981 = 0, $20989 = 0, $2099 = 0, $20997 = 0, $21 = 0, $210 = 0, $2100 = 0, $21005 = 0, $2101 = 0, $21013 = 0, $2102 = 0, $21021 = 0, $21029 = 0, $2103 = 0, $21037 = 0, $2104 = 0, $21045 = 0, $2105 = 0, $21053 = 0, $2106 = 0, $21061 = 0, $21069 = 0, $2107 = 0, $21077 = 0, $2108 = 0, $21085 = 0, $2109 = 0, $21093 = 0, $211 = 0, $2110 = 0, $21101 = 0, $21109 = 0, $2111 = 0, $21117 = 0, $2112 = 0, $21125 = 0, $2113 = 0, $21133 = 0, $2114 = 0, $21141 = 0, $21149 = 0, $2115 = 0, $21157 = 0, $2116 = 0, $21165 = 0, $2117 = 0, $21173 = 0, $2118 = 0, $21181 = 0, $21189 = 0, $2119 = 0, $21197 = 0, $212 = 0, $2120 = 0, $21205 = 0, $2121 = 0, $21213 = 0, $2122 = 0, $21221 = 0, $21229 = 0, $2123 = 0, $21237 = 0, $2124 = 0, $21245 = 0, $2125 = 0, $21253 = 0, $2126 = 0, $21261 = 0, $21269 = 0, $2127 = 0, $21277 = 0, $2128 = 0, $21285 = 0, $2129 = 0, $21293 = 0, $213 = 0, $2130 = 0, $21301 = 0, $21309 = 0, $2131 = 0, $21317 = 0, $2132 = 0, $21325 = 0, $2133 = 0, $21333 = 0, $2134 = 0, $21341 = 0, $21349 = 0, $2135 = 0, $21357 = 0, $2136 = 0, $21365 = 0, $2137 = 0, $21373 = 0, $2138 = 0, $21381 = 0, $21389 = 0, $2139 = 0, $21397 = 0, $214 = 0, $2140 = 0, $21405 = 0, $2141 = 0, $21413 = 0, $2142 = 0, $21421 = 0, $21429 = 0, $2143 = 0, $21437 = 0, $2144 = 0, $21445 = 0, $2145 = 0, $21453 = 0, $2146 = 0, $21461 = 0, $21469 = 0, $2147 = 0, $21477 = 0, $2148 = 0, $21485 = 0, $2149 = 0, $21493 = 0, $215 = 0, $2150 = 0, $21501 = 0, $21509 = 0, $2151 = 0, $21517 = 0, $2152 = 0, $21525 = 0, $2153 = 0, $21533 = 0, $2154 = 0, $21541 = 0, $21549 = 0, $2155 = 0, $21557 = 0, $2156 = 0, $21565 = 0, $2157 = 0, $21573 = 0, $2158 = 0, $21581 = 0, $2159 = 0, $21592 = 0, $21596 = 0, $216 = 0, $2160 = 0, $21604 = 0, $2161 = 0, $21612 = 0, $2162 = 0, $21620 = 0, $21628 = 0, $2163 = 0, $21636 = 0, $2164 = 0, $21644 = 0, $2165 = 0, $21652 = 0, $2166 = 0, $21660 = 0, $21668 = 0, $2167 = 0, $21676 = 0, $2168 = 0, $21684 = 0, $2169 = 0, $21692 = 0, $217 = 0, $2170 = 0, $21700 = 0, $21708 = 0, $2171 = 0, $21716 = 0, $2172 = 0, $21724 = 0, $2173 = 0, $21732 = 0, $2174 = 0, $21740 = 0, $21748 = 0, $2175 = 0, $21756 = 0, $2176 = 0, $21764 = 0, $2177 = 0, $21772 = 0, $2178 = 0, $21780 = 0, $21788 = 0, $2179 = 0, $21796 = 0, $218 = 0, $2180 = 0, $21804 = 0, $2181 = 0, $21812 = 0, $2182 = 0, $21820 = 0, $21828 = 0, $2183 = 0, $21836 = 0, $2184 = 0, $21844 = 0, $2185 = 0, $21852 = 0, $2186 = 0, $21860 = 0, $21868 = 0, $2187 = 0, $21876 = 0, $2188 = 0, $21884 = 0, $2189 = 0, $21892 = 0, $219 = 0, $2190 = 0, $21900 = 0, $21908 = 0, $2191 = 0, $21916 = 0, $2192 = 0, $21924 = 0, $2193 = 0, $21932 = 0, $2194 = 0, $21940 = 0, $21948 = 0, $2195 = 0, $21956 = 0, $2196 = 0, $21964 = 0, $2197 = 0, $21972 = 0, $2198 = 0, $21980 = 0, $21988 = 0, $2199 = 0, $21996 = 0, $22 = 0, $220 = 0, $2200 = 0, $22004 = 0, $2201 = 0, $22012 = 0, $2202 = 0, $22020 = 0, $22028 = 0, $2203 = 0, $22036 = 0, $2204 = 0, $22044 = 0, $2205 = 0, $22052 = 0, $2206 = 0, $22060 = 0, $22068 = 0, $2207 = 0, $22076 = 0, $2208 = 0, $22084 = 0, $2209 = 0, $22092 = 0, $221 = 0, $2210 = 0, $22100 = 0, $22108 = 0, $2211 = 0, $22116 = 0, $2212 = 0, $22124 = 0, $2213 = 0, $22132 = 0, $2214 = 0, $22140 = 0, $22148 = 0, $2215 = 0, $22156 = 0, $2216 = 0, $22164 = 0, $2217 = 0, $22172 = 0, $2218 = 0, $22180 = 0, $22188 = 0, $2219 = 0, $22196 = 0, $222 = 0, $2220 = 0, $22204 = 0, $2221 = 0, $22212 = 0, $2222 = 0, $22220 = 0, $22228 = 0, $2223 = 0, $22236 = 0, $2224 = 0, $22244 = 0, $2225 = 0, $22252 = 0, $2226 = 0, $22260 = 0, $22268 = 0, $2227 = 0, $22276 = 0, $2228 = 0, $22284 = 0, $2229 = 0, $22292 = 0, $223 = 0, $2230 = 0, $22300 = 0, $22308 = 0, $2231 = 0, $22316 = 0, $2232 = 0, $22324 = 0, $2233 = 0, $22332 = 0, $2234 = 0, $22340 = 0, $22348 = 0, $2235 = 0, $22356 = 0, $2236 = 0, $22364 = 0, $2237 = 0, $22377 = 0, $2238 = 0, $22382 = 0, $22384 = 0, $22389 = 0, $2239 = 0, $22394 = 0, $22399 = 0, $224 = 0, $2240 = 0, $22403 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $22452 = 0, $22454 = 0, $2246 = 0, $22461 = 0, $22466 = 0, $22468 = 0, $2247 = 0, $22473 = 0, $22478 = 0, $2248 = 0, $22483 = 0, $22487 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $22523 = 0, $22525 = 0, $2253 = 0, $22532 = 0, $22537 = 0, $22539 = 0, $2254 = 0, $22544 = 0, $22549 = 0, $2255 = 0, $22554 = 0, $22558 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $22584 = 0, $22586 = 0, $2259 = 0, $22593 = 0, $22598 = 0, $226 = 0, $2260 = 0, $22600 = 0, $22605 = 0, $2261 = 0, $22610 = 0, $22615 = 0, $22619 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $22644 = 0, $22646 = 0, $2265 = 0, $22653 = 0, $22658 = 0, $2266 = 0, $22660 = 0, $22665 = 0, $2267 = 0, $22670 = 0, $22675 = 0, $22679 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $22712 = 0, $22714 = 0, $2272 = 0, $22721 = 0, $22726 = 0, $22728 = 0, $2273 = 0, $22733 = 0, $22738 = 0, $2274 = 0, $22743 = 0, $22747 = 0, $2275 = 0, $2276 = 0, $22761 = 0, $22763 = 0, $2277 = 0, $22770 = 0, $22775 = 0, $22777 = 0, $2278 = 0, $22782 = 0, $22787 = 0, $2279 = 0, $22792 = 0, $22796 = 0, $228 = 0, $2280 = 0, $2281 = 0, $22819 = 0, $2282 = 0, $22821 = 0, $22828 = 0, $2283 = 0, $22833 = 0, $22835 = 0, $2284 = 0, $22840 = 0, $22845 = 0, $2285 = 0, $22850 = 0, $22854 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $22887 = 0, $22889 = 0, $2289 = 0, $22896 = 0, $229 = 0, $2290 = 0, $22901 = 0, $22903 = 0, $22908 = 0, $2291 = 0, $22913 = 0, $22918 = 0, $2292 = 0, $22922 = 0, $2293 = 0, $2294 = 0, $22946 = 0, $22948 = 0, $2295 = 0, $22955 = 0, $2296 = 0, $22960 = 0, $22962 = 0, $22967 = 0, $2297 = 0, $22972 = 0, $22977 = 0, $2298 = 0, $22981 = 0, $2299 = 0, $22996 = 0, $22998 = 0, $23 = 0, $230 = 0, $2300 = 0, $23005 = 0, $2301 = 0, $23010 = 0, $23012 = 0, $23017 = 0, $2302 = 0, $23022 = 0, $23027 = 0, $2303 = 0, $23031 = 0, $2304 = 0, $2305 = 0, $23052 = 0, $23054 = 0, $2306 = 0, $23061 = 0, $23066 = 0, $23068 = 0, $2307 = 0, $23073 = 0, $23078 = 0, $2308 = 0, $23083 = 0, $23087 = 0, $2309 = 0, $231 = 0, $2310 = 0, $23108 = 0, $2311 = 0, $23110 = 0, $23117 = 0, $2312 = 0, $23122 = 0, $23124 = 0, $23129 = 0, $2313 = 0, $23134 = 0, $23139 = 0, $2314 = 0, $23143 = 0, $2315 = 0, $2316 = 0, $23164 = 0, $23166 = 0, $2317 = 0, $23173 = 0, $23178 = 0, $2318 = 0, $23180 = 0, $23185 = 0, $2319 = 0, $23190 = 0, $23195 = 0, $23199 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $23249 = 0, $2325 = 0, $23251 = 0, $23258 = 0, $2326 = 0, $23263 = 0, $23265 = 0, $2327 = 0, $23270 = 0, $23275 = 0, $2328 = 0, $23280 = 0, $23284 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $23334 = 0, $23336 = 0, $2334 = 0, $23343 = 0, $23348 = 0, $2335 = 0, $23350 = 0, $23355 = 0, $2336 = 0, $23360 = 0, $23365 = 0, $23369 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $23400 = 0, $23402 = 0, $23409 = 0, $2341 = 0, $23414 = 0, $23416 = 0, $2342 = 0, $23421 = 0, $23426 = 0, $2343 = 0, $23431 = 0, $23435 = 0, $2344 = 0, $2345 = 0, $23456 = 0, $23458 = 0, $2346 = 0, $23465 = 0, $2347 = 0, $23470 = 0, $23472 = 0, $23477 = 0, $2348 = 0, $23482 = 0, $23487 = 0, $2349 = 0, $23491 = 0, $235 = 0, $2350 = 0, $23506 = 0, $23508 = 0, $2351 = 0, $23515 = 0, $2352 = 0, $23520 = 0, $23522 = 0, $23527 = 0, $2353 = 0, $23532 = 0, $23537 = 0, $2354 = 0, $23541 = 0, $2355 = 0, $23556 = 0, $23558 = 0, $2356 = 0, $23565 = 0, $2357 = 0, $23570 = 0, $23572 = 0, $23577 = 0, $2358 = 0, $23582 = 0, $23587 = 0, $2359 = 0, $23591 = 0, $236 = 0, $2360 = 0, $23604 = 0, $23606 = 0, $2361 = 0, $23613 = 0, $23618 = 0, $2362 = 0, $23620 = 0, $23625 = 0, $2363 = 0, $23630 = 0, $23635 = 0, $23639 = 0, $2364 = 0, $2365 = 0, $23654 = 0, $23656 = 0, $2366 = 0, $23663 = 0, $23668 = 0, $2367 = 0, $23670 = 0, $23675 = 0, $2368 = 0, $23680 = 0, $23685 = 0, $23689 = 0, $2369 = 0, $237 = 0, $2370 = 0, $23700 = 0, $23702 = 0, $23709 = 0, $2371 = 0, $23714 = 0, $23716 = 0, $2372 = 0, $23721 = 0, $23726 = 0, $2373 = 0, $23731 = 0, $23735 = 0, $2374 = 0, $23746 = 0, $23748 = 0, $2375 = 0, $23755 = 0, $2376 = 0, $23760 = 0, $23762 = 0, $23767 = 0, $2377 = 0, $23772 = 0, $23777 = 0, $2378 = 0, $23781 = 0, $2379 = 0, $23792 = 0, $23794 = 0, $238 = 0, $2380 = 0, $23801 = 0, $23806 = 0, $23808 = 0, $2381 = 0, $23813 = 0, $23818 = 0, $2382 = 0, $23823 = 0, $23827 = 0, $2383 = 0, $23838 = 0, $2384 = 0, $23840 = 0, $23847 = 0, $2385 = 0, $23852 = 0, $23854 = 0, $23859 = 0, $2386 = 0, $23864 = 0, $23869 = 0, $2387 = 0, $23873 = 0, $2388 = 0, $23884 = 0, $23886 = 0, $2389 = 0, $23893 = 0, $23898 = 0, $239 = 0, $2390 = 0, $23900 = 0, $23905 = 0, $2391 = 0, $23910 = 0, $23915 = 0, $23919 = 0, $2392 = 0, $2393 = 0, $23930 = 0, $23932 = 0, $23939 = 0, $2394 = 0, $23944 = 0, $23946 = 0, $2395 = 0, $23951 = 0, $23956 = 0, $2396 = 0, $23961 = 0, $23965 = 0, $2397 = 0, $23976 = 0, $23978 = 0, $2398 = 0, $23985 = 0, $2399 = 0, $23990 = 0, $23992 = 0, $23997 = 0, $24 = 0, $240 = 0, $2400 = 0, $24002 = 0, $24007 = 0, $2401 = 0, $24011 = 0, $2402 = 0, $24026 = 0, $24028 = 0, $2403 = 0, $24035 = 0, $2404 = 0, $24040 = 0, $24042 = 0, $24047 = 0, $2405 = 0, $24052 = 0, $24057 = 0, $2406 = 0, $24061 = 0, $2407 = 0, $24072 = 0, $24074 = 0, $2408 = 0, $24081 = 0, $24086 = 0, $24088 = 0, $2409 = 0, $24093 = 0, $24098 = 0, $241 = 0, $2410 = 0, $24103 = 0, $24107 = 0, $2411 = 0, $24118 = 0, $2412 = 0, $24120 = 0, $24127 = 0, $2413 = 0, $24132 = 0, $24134 = 0, $24139 = 0, $2414 = 0, $24144 = 0, $24149 = 0, $2415 = 0, $24153 = 0, $2416 = 0, $24165 = 0, $24167 = 0, $2417 = 0, $24174 = 0, $24179 = 0, $2418 = 0, $24181 = 0, $24186 = 0, $2419 = 0, $24191 = 0, $24196 = 0, $242 = 0, $2420 = 0, $24200 = 0, $2421 = 0, $2422 = 0, $24222 = 0, $24224 = 0, $2423 = 0, $24231 = 0, $24236 = 0, $24238 = 0, $2424 = 0, $24243 = 0, $24248 = 0, $2425 = 0, $24253 = 0, $24257 = 0, $2426 = 0, $2427 = 0, $24271 = 0, $24273 = 0, $2428 = 0, $24280 = 0, $24285 = 0, $24287 = 0, $2429 = 0, $24292 = 0, $24297 = 0, $243 = 0, $2430 = 0, $24302 = 0, $24306 = 0, $2431 = 0, $24316 = 0, $24317 = 0, $24319 = 0, $2432 = 0, $24321 = 0, $24322 = 0, $24324 = 0, $24326 = 0, $24327 = 0, $24329 = 0, $2433 = 0, $24331 = 0, $24332 = 0, $24334 = 0, $24336 = 0, $24337 = 0, $24339 = 0, $2434 = 0, $24341 = 0, $24342 = 0, $24344 = 0, $24346 = 0, $24347 = 0, $24349 = 0, $2435 = 0, $24351 = 0, $24352 = 0, $24354 = 0, $24356 = 0, $24357 = 0, $24359 = 0, $2436 = 0, $24361 = 0, $24362 = 0, $24364 = 0, $24366 = 0, $24367 = 0, $24369 = 0, $2437 = 0, $24371 = 0, $24372 = 0, $24374 = 0, $24376 = 0, $24377 = 0, $24379 = 0, $2438 = 0, $24381 = 0, $24382 = 0, $24384 = 0, $24386 = 0, $24387 = 0, $24389 = 0, $2439 = 0, $24391 = 0, $24392 = 0, $24394 = 0, $24396 = 0, $24398 = 0, $244 = 0, $2440 = 0, $24405 = 0, $2441 = 0, $24410 = 0, $24412 = 0, $24417 = 0, $2442 = 0, $24422 = 0, $24427 = 0, $2443 = 0, $24431 = 0, $2444 = 0, $24445 = 0, $24447 = 0, $2445 = 0, $24454 = 0, $24459 = 0, $2446 = 0, $24461 = 0, $24466 = 0, $2447 = 0, $24471 = 0, $24476 = 0, $2448 = 0, $24480 = 0, $2449 = 0, $245 = 0, $2450 = 0, $24503 = 0, $24505 = 0, $2451 = 0, $24512 = 0, $24517 = 0, $24519 = 0, $2452 = 0, $24524 = 0, $24529 = 0, $2453 = 0, $24534 = 0, $24538 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $24564 = 0, $24566 = 0, $2457 = 0, $24573 = 0, $24578 = 0, $2458 = 0, $24580 = 0, $24585 = 0, $2459 = 0, $24590 = 0, $24595 = 0, $24599 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $24625 = 0, $24627 = 0, $2463 = 0, $24634 = 0, $24639 = 0, $2464 = 0, $24641 = 0, $24646 = 0, $2465 = 0, $24651 = 0, $24656 = 0, $2466 = 0, $24660 = 0, $2467 = 0, $2468 = 0, $24686 = 0, $24688 = 0, $2469 = 0, $24690 = 0, $24698 = 0, $247 = 0, $2470 = 0, $24706 = 0, $2471 = 0, $24714 = 0, $2472 = 0, $24722 = 0, $2473 = 0, $24730 = 0, $24738 = 0, $2474 = 0, $24746 = 0, $2475 = 0, $24754 = 0, $2476 = 0, $24762 = 0, $2477 = 0, $24770 = 0, $24778 = 0, $2478 = 0, $24786 = 0, $2479 = 0, $24794 = 0, $248 = 0, $2480 = 0, $24802 = 0, $2481 = 0, $24810 = 0, $24818 = 0, $2482 = 0, $24826 = 0, $2483 = 0, $24834 = 0, $2484 = 0, $24842 = 0, $2485 = 0, $24850 = 0, $24858 = 0, $2486 = 0, $24866 = 0, $2487 = 0, $24874 = 0, $2488 = 0, $24882 = 0, $2489 = 0, $24890 = 0, $24898 = 0, $249 = 0, $2490 = 0, $24906 = 0, $2491 = 0, $24914 = 0, $2492 = 0, $24922 = 0, $2493 = 0, $24930 = 0, $24938 = 0, $2494 = 0, $24946 = 0, $2495 = 0, $24954 = 0, $2496 = 0, $24962 = 0, $2497 = 0, $24970 = 0, $24978 = 0, $2498 = 0, $24986 = 0, $2499 = 0, $24994 = 0, $25 = 0, $250 = 0, $2500 = 0, $25002 = 0, $2501 = 0, $25010 = 0, $25018 = 0, $2502 = 0, $25026 = 0, $2503 = 0, $25034 = 0, $2504 = 0, $25042 = 0, $2505 = 0, $25050 = 0, $25058 = 0, $2506 = 0, $25066 = 0, $2507 = 0, $25074 = 0, $2508 = 0, $25082 = 0, $2509 = 0, $25090 = 0, $25098 = 0, $251 = 0, $2510 = 0, $25106 = 0, $2511 = 0, $25114 = 0, $2512 = 0, $25122 = 0, $2513 = 0, $25130 = 0, $25138 = 0, $2514 = 0, $25146 = 0, $2515 = 0, $25154 = 0, $2516 = 0, $25162 = 0, $2517 = 0, $25170 = 0, $2518 = 0, $25185 = 0, $2519 = 0, $25192 = 0, $252 = 0, $2520 = 0, $25200 = 0, $25208 = 0, $2521 = 0, $25216 = 0, $2522 = 0, $25224 = 0, $2523 = 0, $25232 = 0, $2524 = 0, $25240 = 0, $25248 = 0, $2525 = 0, $25256 = 0, $2526 = 0, $2527 = 0, $25271 = 0, $25278 = 0, $2528 = 0, $25286 = 0, $2529 = 0, $25294 = 0, $253 = 0, $2530 = 0, $25302 = 0, $2531 = 0, $25310 = 0, $25318 = 0, $2532 = 0, $25328 = 0, $2533 = 0, $25338 = 0, $2534 = 0, $25348 = 0, $2535 = 0, $25358 = 0, $2536 = 0, $25368 = 0, $2537 = 0, $25378 = 0, $2538 = 0, $25386 = 0, $2539 = 0, $25394 = 0, $254 = 0, $2540 = 0, $25402 = 0, $2541 = 0, $25410 = 0, $25418 = 0, $2542 = 0, $25426 = 0, $2543 = 0, $25434 = 0, $2544 = 0, $25442 = 0, $2545 = 0, $25450 = 0, $25458 = 0, $2546 = 0, $25466 = 0, $2547 = 0, $25474 = 0, $2548 = 0, $25482 = 0, $2549 = 0, $25490 = 0, $25498 = 0, $255 = 0, $2550 = 0, $25506 = 0, $2551 = 0, $25514 = 0, $2552 = 0, $25522 = 0, $2553 = 0, $25530 = 0, $25538 = 0, $2554 = 0, $25546 = 0, $2555 = 0, $25554 = 0, $2556 = 0, $25562 = 0, $2557 = 0, $25570 = 0, $25578 = 0, $2558 = 0, $25586 = 0, $2559 = 0, $25594 = 0, $256 = 0, $2560 = 0, $25602 = 0, $2561 = 0, $25610 = 0, $25618 = 0, $2562 = 0, $25626 = 0, $2563 = 0, $25634 = 0, $2564 = 0, $25642 = 0, $2565 = 0, $25650 = 0, $25658 = 0, $2566 = 0, $25666 = 0, $2567 = 0, $25674 = 0, $2568 = 0, $25682 = 0, $2569 = 0, $25690 = 0, $25698 = 0, $257 = 0, $2570 = 0, $25706 = 0, $2571 = 0, $25714 = 0, $2572 = 0, $25722 = 0, $2573 = 0, $25730 = 0, $25738 = 0, $2574 = 0, $25746 = 0, $2575 = 0, $25754 = 0, $2576 = 0, $25762 = 0, $2577 = 0, $25770 = 0, $25778 = 0, $2578 = 0, $25786 = 0, $2579 = 0, $25794 = 0, $258 = 0, $2580 = 0, $25802 = 0, $2581 = 0, $25810 = 0, $25818 = 0, $2582 = 0, $25826 = 0, $2583 = 0, $25834 = 0, $2584 = 0, $25842 = 0, $2585 = 0, $25850 = 0, $25858 = 0, $2586 = 0, $25866 = 0, $2587 = 0, $25874 = 0, $2588 = 0, $25882 = 0, $2589 = 0, $25890 = 0, $25898 = 0, $259 = 0, $2590 = 0, $25906 = 0, $2591 = 0, $25914 = 0, $2592 = 0, $25922 = 0, $2593 = 0, $25930 = 0, $2594 = 0, $25943 = 0, $25948 = 0, $2595 = 0, $25950 = 0, $25955 = 0, $2596 = 0, $25960 = 0, $25965 = 0, $25969 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $25992 = 0, $25994 = 0, $26 = 0, $260 = 0, $2600 = 0, $26001 = 0, $26006 = 0, $26008 = 0, $2601 = 0, $26013 = 0, $26018 = 0, $2602 = 0, $26023 = 0, $26027 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $26053 = 0, $26055 = 0, $2606 = 0, $26062 = 0, $26067 = 0, $26069 = 0, $2607 = 0, $26074 = 0, $26079 = 0, $2608 = 0, $26084 = 0, $26088 = 0, $2609 = 0, $26099 = 0, $261 = 0, $2610 = 0, $26101 = 0, $26108 = 0, $2611 = 0, $26113 = 0, $26115 = 0, $2612 = 0, $26120 = 0, $26125 = 0, $2613 = 0, $26130 = 0, $26134 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $26163 = 0, $26165 = 0, $2617 = 0, $26172 = 0, $26177 = 0, $26179 = 0, $2618 = 0, $26184 = 0, $26189 = 0, $2619 = 0, $26194 = 0, $26198 = 0, $262 = 0, $2620 = 0, $2621 = 0, $26215 = 0, $26217 = 0, $2622 = 0, $26224 = 0, $26229 = 0, $2623 = 0, $26231 = 0, $26236 = 0, $2624 = 0, $26241 = 0, $26246 = 0, $2625 = 0, $26250 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $26288 = 0, $2629 = 0, $26290 = 0, $26297 = 0, $263 = 0, $2630 = 0, $26302 = 0, $26304 = 0, $26309 = 0, $2631 = 0, $26314 = 0, $26319 = 0, $2632 = 0, $26323 = 0, $2633 = 0, $2634 = 0, $26343 = 0, $26345 = 0, $2635 = 0, $26352 = 0, $26357 = 0, $26359 = 0, $2636 = 0, $26364 = 0, $26369 = 0, $2637 = 0, $26374 = 0, $26378 = 0, $2638 = 0, $26389 = 0, $2639 = 0, $26391 = 0, $26398 = 0, $264 = 0, $2640 = 0, $26403 = 0, $26405 = 0, $2641 = 0, $26410 = 0, $26415 = 0, $2642 = 0, $26420 = 0, $26424 = 0, $2643 = 0, $2644 = 0, $26443 = 0, $26445 = 0, $2645 = 0, $26452 = 0, $26457 = 0, $26459 = 0, $2646 = 0, $26464 = 0, $26469 = 0, $2647 = 0, $26474 = 0, $26478 = 0, $2648 = 0, $26489 = 0, $2649 = 0, $26491 = 0, $26498 = 0, $265 = 0, $2650 = 0, $26503 = 0, $26505 = 0, $2651 = 0, $26510 = 0, $26515 = 0, $2652 = 0, $26520 = 0, $26524 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $26550 = 0, $26552 = 0, $26559 = 0, $2656 = 0, $26564 = 0, $26566 = 0, $2657 = 0, $26571 = 0, $26576 = 0, $2658 = 0, $26581 = 0, $26585 = 0, $2659 = 0, $266 = 0, $2660 = 0, $26608 = 0, $2661 = 0, $26610 = 0, $26617 = 0, $2662 = 0, $26622 = 0, $26624 = 0, $26629 = 0, $2663 = 0, $26634 = 0, $26639 = 0, $2664 = 0, $26643 = 0, $2665 = 0, $26657 = 0, $26659 = 0, $2666 = 0, $26666 = 0, $2667 = 0, $26671 = 0, $26673 = 0, $26678 = 0, $2668 = 0, $26683 = 0, $26688 = 0, $2669 = 0, $26692 = 0, $267 = 0, $2670 = 0, $2671 = 0, $26718 = 0, $2672 = 0, $26720 = 0, $26727 = 0, $2673 = 0, $26732 = 0, $26734 = 0, $26739 = 0, $2674 = 0, $26744 = 0, $26749 = 0, $2675 = 0, $26753 = 0, $2676 = 0, $26763 = 0, $26764 = 0, $26766 = 0, $26768 = 0, $26769 = 0, $2677 = 0, $26771 = 0, $26773 = 0, $26774 = 0, $26776 = 0, $26778 = 0, $26779 = 0, $2678 = 0, $26781 = 0, $26783 = 0, $26784 = 0, $26786 = 0, $26788 = 0, $26789 = 0, $2679 = 0, $26791 = 0, $26793 = 0, $26794 = 0, $26796 = 0, $26798 = 0, $26799 = 0, $268 = 0, $2680 = 0, $26801 = 0, $26803 = 0, $26804 = 0, $26806 = 0, $26808 = 0, $26809 = 0, $2681 = 0, $26811 = 0, $26813 = 0, $26814 = 0, $26816 = 0, $26818 = 0, $26819 = 0, $2682 = 0, $26821 = 0, $26823 = 0, $26824 = 0, $26826 = 0, $26828 = 0, $26829 = 0, $2683 = 0, $26831 = 0, $26833 = 0, $26834 = 0, $26836 = 0, $26838 = 0, $26839 = 0, $2684 = 0, $26841 = 0, $26843 = 0, $26845 = 0, $2685 = 0, $26852 = 0, $26857 = 0, $26859 = 0, $2686 = 0, $26864 = 0, $26869 = 0, $2687 = 0, $26874 = 0, $26878 = 0, $2688 = 0, $2689 = 0, $26892 = 0, $26894 = 0, $269 = 0, $2690 = 0, $26901 = 0, $26906 = 0, $26908 = 0, $2691 = 0, $26913 = 0, $26918 = 0, $2692 = 0, $26923 = 0, $26927 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $26958 = 0, $2696 = 0, $26960 = 0, $26967 = 0, $2697 = 0, $26972 = 0, $26974 = 0, $26979 = 0, $2698 = 0, $26984 = 0, $26989 = 0, $2699 = 0, $26993 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $27029 = 0, $2703 = 0, $27031 = 0, $27038 = 0, $2704 = 0, $27043 = 0, $27045 = 0, $2705 = 0, $27050 = 0, $27055 = 0, $2706 = 0, $27060 = 0, $27064 = 0, $2707 = 0, $2708 = 0, $27080 = 0, $27082 = 0, $27089 = 0, $2709 = 0, $27094 = 0, $27096 = 0, $271 = 0, $2710 = 0, $27101 = 0, $27106 = 0, $2711 = 0, $27111 = 0, $27115 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $27151 = 0, $27153 = 0, $2716 = 0, $27160 = 0, $27165 = 0, $27167 = 0, $2717 = 0, $27172 = 0, $27177 = 0, $2718 = 0, $27182 = 0, $27186 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $27222 = 0, $27224 = 0, $2723 = 0, $27231 = 0, $27236 = 0, $27238 = 0, $2724 = 0, $27243 = 0, $27248 = 0, $2725 = 0, $27253 = 0, $27257 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $27316 = 0, $27318 = 0, $2732 = 0, $27325 = 0, $2733 = 0, $27330 = 0, $27332 = 0, $27337 = 0, $2734 = 0, $27342 = 0, $27347 = 0, $2735 = 0, $27351 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $27410 = 0, $27412 = 0, $27419 = 0, $2742 = 0, $27424 = 0, $27426 = 0, $2743 = 0, $27431 = 0, $27436 = 0, $2744 = 0, $27441 = 0, $27445 = 0, $2745 = 0, $27458 = 0, $2746 = 0, $27460 = 0, $27467 = 0, $2747 = 0, $27472 = 0, $27474 = 0, $27479 = 0, $2748 = 0, $27484 = 0, $27489 = 0, $2749 = 0, $27493 = 0, $275 = 0, $2750 = 0, $27508 = 0, $2751 = 0, $27510 = 0, $27517 = 0, $2752 = 0, $27522 = 0, $27524 = 0, $27529 = 0, $2753 = 0, $27534 = 0, $27539 = 0, $2754 = 0, $27543 = 0, $2755 = 0, $27558 = 0, $2756 = 0, $27560 = 0, $27567 = 0, $2757 = 0, $27572 = 0, $27574 = 0, $27579 = 0, $2758 = 0, $27584 = 0, $27589 = 0, $2759 = 0, $27593 = 0, $276 = 0, $2760 = 0, $27606 = 0, $27608 = 0, $2761 = 0, $27615 = 0, $2762 = 0, $27620 = 0, $27622 = 0, $27627 = 0, $2763 = 0, $27632 = 0, $27637 = 0, $2764 = 0, $27641 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $27721 = 0, $27723 = 0, $2773 = 0, $27730 = 0, $27735 = 0, $27737 = 0, $2774 = 0, $27742 = 0, $27747 = 0, $2775 = 0, $27752 = 0, $27756 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $27836 = 0, $27838 = 0, $2784 = 0, $27845 = 0, $2785 = 0, $27850 = 0, $27852 = 0, $27857 = 0, $2786 = 0, $27862 = 0, $27867 = 0, $2787 = 0, $27871 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $27951 = 0, $27953 = 0, $2796 = 0, $27960 = 0, $27965 = 0, $27967 = 0, $2797 = 0, $27972 = 0, $27977 = 0, $2798 = 0, $27982 = 0, $27986 = 0, $2799 = 0, $27998 = 0, $28 = 0, $280 = 0, $2800 = 0, $28000 = 0, $28007 = 0, $2801 = 0, $28012 = 0, $28014 = 0, $28019 = 0, $2802 = 0, $28024 = 0, $28029 = 0, $2803 = 0, $28033 = 0, $2804 = 0, $28048 = 0, $2805 = 0, $28050 = 0, $28057 = 0, $2806 = 0, $28062 = 0, $28064 = 0, $28069 = 0, $2807 = 0, $28074 = 0, $28079 = 0, $2808 = 0, $28083 = 0, $2809 = 0, $281 = 0, $2810 = 0, $28103 = 0, $28105 = 0, $2811 = 0, $28112 = 0, $28117 = 0, $28119 = 0, $2812 = 0, $28124 = 0, $28129 = 0, $2813 = 0, $28134 = 0, $28138 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $28164 = 0, $28166 = 0, $28168 = 0, $2817 = 0, $28176 = 0, $2818 = 0, $28184 = 0, $2819 = 0, $28192 = 0, $282 = 0, $2820 = 0, $28200 = 0, $28208 = 0, $2821 = 0, $28216 = 0, $2822 = 0, $28224 = 0, $2823 = 0, $28232 = 0, $2824 = 0, $28240 = 0, $28248 = 0, $2825 = 0, $28258 = 0, $2826 = 0, $28266 = 0, $2827 = 0, $28274 = 0, $2828 = 0, $28282 = 0, $2829 = 0, $28290 = 0, $28298 = 0, $283 = 0, $2830 = 0, $28306 = 0, $2831 = 0, $28314 = 0, $2832 = 0, $28322 = 0, $2833 = 0, $28330 = 0, $28338 = 0, $2834 = 0, $28346 = 0, $2835 = 0, $28354 = 0, $2836 = 0, $28362 = 0, $2837 = 0, $28370 = 0, $28378 = 0, $2838 = 0, $28386 = 0, $2839 = 0, $28394 = 0, $284 = 0, $2840 = 0, $28402 = 0, $2841 = 0, $28410 = 0, $28418 = 0, $2842 = 0, $28426 = 0, $2843 = 0, $28434 = 0, $2844 = 0, $28442 = 0, $2845 = 0, $28450 = 0, $28458 = 0, $2846 = 0, $28466 = 0, $2847 = 0, $28474 = 0, $2848 = 0, $28482 = 0, $2849 = 0, $28490 = 0, $28498 = 0, $285 = 0, $2850 = 0, $28506 = 0, $2851 = 0, $28514 = 0, $2852 = 0, $28522 = 0, $2853 = 0, $28530 = 0, $28538 = 0, $2854 = 0, $28546 = 0, $2855 = 0, $28554 = 0, $2856 = 0, $28562 = 0, $2857 = 0, $28570 = 0, $28578 = 0, $2858 = 0, $28586 = 0, $2859 = 0, $28594 = 0, $286 = 0, $2860 = 0, $28602 = 0, $2861 = 0, $28610 = 0, $28618 = 0, $2862 = 0, $28626 = 0, $2863 = 0, $28634 = 0, $2864 = 0, $28642 = 0, $2865 = 0, $28650 = 0, $28658 = 0, $2866 = 0, $28666 = 0, $2867 = 0, $28674 = 0, $2868 = 0, $28682 = 0, $2869 = 0, $28690 = 0, $28698 = 0, $287 = 0, $2870 = 0, $28706 = 0, $2871 = 0, $28714 = 0, $2872 = 0, $28722 = 0, $2873 = 0, $28730 = 0, $28738 = 0, $2874 = 0, $28746 = 0, $2875 = 0, $28754 = 0, $2876 = 0, $28762 = 0, $2877 = 0, $28770 = 0, $28778 = 0, $2878 = 0, $28786 = 0, $2879 = 0, $28794 = 0, $288 = 0, $2880 = 0, $28802 = 0, $2881 = 0, $28810 = 0, $28818 = 0, $2882 = 0, $28826 = 0, $2883 = 0, $28834 = 0, $2884 = 0, $28842 = 0, $2885 = 0, $28850 = 0, $28858 = 0, $2886 = 0, $28866 = 0, $2887 = 0, $28874 = 0, $2888 = 0, $28882 = 0, $2889 = 0, $28890 = 0, $28898 = 0, $289 = 0, $2890 = 0, $28906 = 0, $2891 = 0, $28914 = 0, $2892 = 0, $28922 = 0, $2893 = 0, $28930 = 0, $28938 = 0, $2894 = 0, $28946 = 0, $2895 = 0, $28954 = 0, $2896 = 0, $28962 = 0, $2897 = 0, $28970 = 0, $28978 = 0, $2898 = 0, $28986 = 0, $2899 = 0, $28994 = 0, $29 = 0, $290 = 0, $2900 = 0, $29002 = 0, $2901 = 0, $29010 = 0, $29018 = 0, $2902 = 0, $29026 = 0, $2903 = 0, $29034 = 0, $2904 = 0, $29042 = 0, $2905 = 0, $29050 = 0, $29058 = 0, $2906 = 0, $29066 = 0, $2907 = 0, $29074 = 0, $2908 = 0, $29082 = 0, $2909 = 0, $29090 = 0, $29098 = 0, $291 = 0, $2910 = 0, $29106 = 0, $2911 = 0, $29114 = 0, $2912 = 0, $29122 = 0, $2913 = 0, $29130 = 0, $29138 = 0, $2914 = 0, $29146 = 0, $2915 = 0, $29154 = 0, $2916 = 0, $29162 = 0, $2917 = 0, $29170 = 0, $29178 = 0, $2918 = 0, $29186 = 0, $2919 = 0, $29194 = 0, $292 = 0, $2920 = 0, $29202 = 0, $2921 = 0, $29212 = 0, $2922 = 0, $29220 = 0, $29228 = 0, $2923 = 0, $29236 = 0, $2924 = 0, $29244 = 0, $2925 = 0, $29252 = 0, $2926 = 0, $29260 = 0, $29268 = 0, $2927 = 0, $29276 = 0, $2928 = 0, $29287 = 0, $2929 = 0, $29291 = 0, $29299 = 0, $293 = 0, $2930 = 0, $29307 = 0, $2931 = 0, $29315 = 0, $2932 = 0, $29323 = 0, $2933 = 0, $29331 = 0, $29339 = 0, $2934 = 0, $29347 = 0, $2935 = 0, $29355 = 0, $2936 = 0, $29363 = 0, $2937 = 0, $29374 = 0, $29378 = 0, $2938 = 0, $29386 = 0, $2939 = 0, $29394 = 0, $294 = 0, $2940 = 0, $29402 = 0, $2941 = 0, $29410 = 0, $29418 = 0, $2942 = 0, $29426 = 0, $2943 = 0, $29434 = 0, $2944 = 0, $29442 = 0, $2945 = 0, $29450 = 0, $29458 = 0, $2946 = 0, $29466 = 0, $2947 = 0, $29474 = 0, $2948 = 0, $29482 = 0, $2949 = 0, $29490 = 0, $295 = 0, $2950 = 0, $29501 = 0, $29505 = 0, $2951 = 0, $29513 = 0, $2952 = 0, $29521 = 0, $29529 = 0, $2953 = 0, $29537 = 0, $2954 = 0, $29545 = 0, $2955 = 0, $29553 = 0, $2956 = 0, $29561 = 0, $29569 = 0, $2957 = 0, $29577 = 0, $2958 = 0, $29588 = 0, $2959 = 0, $29592 = 0, $296 = 0, $2960 = 0, $29600 = 0, $29608 = 0, $2961 = 0, $29616 = 0, $2962 = 0, $29624 = 0, $2963 = 0, $29632 = 0, $2964 = 0, $29640 = 0, $29648 = 0, $2965 = 0, $29656 = 0, $2966 = 0, $29664 = 0, $2967 = 0, $29672 = 0, $2968 = 0, $29680 = 0, $29688 = 0, $2969 = 0, $29696 = 0, $297 = 0, $2970 = 0, $29704 = 0, $2971 = 0, $29712 = 0, $2972 = 0, $29720 = 0, $29728 = 0, $2973 = 0, $29736 = 0, $2974 = 0, $29744 = 0, $2975 = 0, $29752 = 0, $2976 = 0, $29760 = 0, $29768 = 0, $2977 = 0, $29776 = 0, $2978 = 0, $29784 = 0, $2979 = 0, $29792 = 0, $298 = 0, $2980 = 0, $29800 = 0, $29808 = 0, $2981 = 0, $29816 = 0, $2982 = 0, $29824 = 0, $2983 = 0, $29832 = 0, $2984 = 0, $29840 = 0, $29848 = 0, $2985 = 0, $29856 = 0, $2986 = 0, $29864 = 0, $2987 = 0, $29872 = 0, $2988 = 0, $29880 = 0, $29888 = 0, $2989 = 0, $29896 = 0, $299 = 0, $2990 = 0, $29904 = 0, $2991 = 0, $29912 = 0, $2992 = 0, $29920 = 0, $29928 = 0, $2993 = 0, $29936 = 0, $2994 = 0, $29944 = 0, $2995 = 0, $29952 = 0, $2996 = 0, $29960 = 0, $29968 = 0, $2997 = 0, $29976 = 0, $2998 = 0, $29984 = 0, $2999 = 0, $29992 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $30000 = 0, $3001 = 0, $30011 = 0, $30015 = 0, $3002 = 0, $30023 = 0, $3003 = 0, $30031 = 0, $30039 = 0, $3004 = 0, $30047 = 0, $3005 = 0, $30055 = 0, $3006 = 0, $30063 = 0, $3007 = 0, $30071 = 0, $30079 = 0, $3008 = 0, $30087 = 0, $3009 = 0, $30095 = 0, $301 = 0, $3010 = 0, $30103 = 0, $3011 = 0, $30111 = 0, $30119 = 0, $3012 = 0, $30127 = 0, $3013 = 0, $30135 = 0, $3014 = 0, $30143 = 0, $3015 = 0, $30151 = 0, $30159 = 0, $3016 = 0, $30167 = 0, $3017 = 0, $30175 = 0, $3018 = 0, $30183 = 0, $3019 = 0, $30191 = 0, $30199 = 0, $302 = 0, $3020 = 0, $30207 = 0, $3021 = 0, $30215 = 0, $3022 = 0, $30223 = 0, $3023 = 0, $30231 = 0, $30239 = 0, $3024 = 0, $30247 = 0, $3025 = 0, $30255 = 0, $3026 = 0, $30263 = 0, $3027 = 0, $30271 = 0, $30279 = 0, $3028 = 0, $30287 = 0, $3029 = 0, $30295 = 0, $303 = 0, $3030 = 0, $30303 = 0, $3031 = 0, $30311 = 0, $30319 = 0, $3032 = 0, $30327 = 0, $3033 = 0, $30335 = 0, $3034 = 0, $30343 = 0, $3035 = 0, $30351 = 0, $30359 = 0, $3036 = 0, $3037 = 0, $30370 = 0, $30374 = 0, $3038 = 0, $30382 = 0, $3039 = 0, $30390 = 0, $30398 = 0, $304 = 0, $3040 = 0, $30406 = 0, $3041 = 0, $30414 = 0, $3042 = 0, $30422 = 0, $3043 = 0, $30430 = 0, $30438 = 0, $3044 = 0, $30446 = 0, $3045 = 0, $30456 = 0, $3046 = 0, $30464 = 0, $3047 = 0, $30472 = 0, $3048 = 0, $30480 = 0, $30488 = 0, $3049 = 0, $30496 = 0, $305 = 0, $3050 = 0, $30504 = 0, $3051 = 0, $30512 = 0, $3052 = 0, $30520 = 0, $30528 = 0, $3053 = 0, $30536 = 0, $3054 = 0, $30544 = 0, $3055 = 0, $30552 = 0, $3056 = 0, $30560 = 0, $30568 = 0, $3057 = 0, $30576 = 0, $3058 = 0, $30584 = 0, $3059 = 0, $30592 = 0, $306 = 0, $3060 = 0, $30600 = 0, $30608 = 0, $3061 = 0, $30616 = 0, $3062 = 0, $30624 = 0, $3063 = 0, $30632 = 0, $3064 = 0, $30640 = 0, $30648 = 0, $3065 = 0, $30656 = 0, $3066 = 0, $30664 = 0, $3067 = 0, $30672 = 0, $3068 = 0, $30680 = 0, $30688 = 0, $3069 = 0, $30696 = 0, $307 = 0, $3070 = 0, $30704 = 0, $3071 = 0, $30712 = 0, $3072 = 0, $30720 = 0, $30728 = 0, $3073 = 0, $30736 = 0, $3074 = 0, $30744 = 0, $3075 = 0, $30752 = 0, $3076 = 0, $30760 = 0, $30768 = 0, $3077 = 0, $30776 = 0, $3078 = 0, $30784 = 0, $3079 = 0, $30792 = 0, $308 = 0, $3080 = 0, $30800 = 0, $30808 = 0, $3081 = 0, $30816 = 0, $3082 = 0, $30824 = 0, $3083 = 0, $30832 = 0, $3084 = 0, $30840 = 0, $30848 = 0, $3085 = 0, $30856 = 0, $3086 = 0, $30864 = 0, $3087 = 0, $30872 = 0, $3088 = 0, $30880 = 0, $30888 = 0, $3089 = 0, $30896 = 0, $309 = 0, $3090 = 0, $30904 = 0, $3091 = 0, $30912 = 0, $3092 = 0, $30920 = 0, $30928 = 0, $3093 = 0, $30936 = 0, $3094 = 0, $30944 = 0, $3095 = 0, $30952 = 0, $3096 = 0, $30960 = 0, $30968 = 0, $3097 = 0, $30976 = 0, $3098 = 0, $30984 = 0, $3099 = 0, $30992 = 0, $31 = 0, $310 = 0, $3100 = 0, $31000 = 0, $31008 = 0, $3101 = 0, $31016 = 0, $3102 = 0, $31024 = 0, $3103 = 0, $31032 = 0, $3104 = 0, $31040 = 0, $31048 = 0, $3105 = 0, $31056 = 0, $3106 = 0, $31064 = 0, $3107 = 0, $31072 = 0, $3108 = 0, $31080 = 0, $31088 = 0, $3109 = 0, $31096 = 0, $311 = 0, $3110 = 0, $31104 = 0, $3111 = 0, $31112 = 0, $3112 = 0, $31120 = 0, $31128 = 0, $3113 = 0, $31136 = 0, $3114 = 0, $31144 = 0, $3115 = 0, $31152 = 0, $3116 = 0, $31160 = 0, $31168 = 0, $3117 = 0, $31176 = 0, $3118 = 0, $31184 = 0, $3119 = 0, $31192 = 0, $312 = 0, $3120 = 0, $31200 = 0, $31208 = 0, $3121 = 0, $31216 = 0, $3122 = 0, $31224 = 0, $3123 = 0, $31232 = 0, $3124 = 0, $31240 = 0, $31248 = 0, $3125 = 0, $31256 = 0, $3126 = 0, $31264 = 0, $3127 = 0, $31272 = 0, $3128 = 0, $31280 = 0, $31288 = 0, $3129 = 0, $31296 = 0, $313 = 0, $3130 = 0, $31304 = 0, $3131 = 0, $31312 = 0, $3132 = 0, $31320 = 0, $31328 = 0, $3133 = 0, $31336 = 0, $3134 = 0, $31344 = 0, $3135 = 0, $31352 = 0, $3136 = 0, $31360 = 0, $31368 = 0, $3137 = 0, $31376 = 0, $3138 = 0, $31384 = 0, $3139 = 0, $31392 = 0, $314 = 0, $3140 = 0, $31400 = 0, $31408 = 0, $3141 = 0, $31416 = 0, $3142 = 0, $31424 = 0, $3143 = 0, $31432 = 0, $3144 = 0, $31440 = 0, $31448 = 0, $3145 = 0, $31456 = 0, $3146 = 0, $31464 = 0, $3147 = 0, $31472 = 0, $3148 = 0, $31483 = 0, $31487 = 0, $3149 = 0, $31495 = 0, $315 = 0, $3150 = 0, $31503 = 0, $3151 = 0, $31511 = 0, $31519 = 0, $3152 = 0, $31527 = 0, $3153 = 0, $31535 = 0, $3154 = 0, $31543 = 0, $3155 = 0, $31551 = 0, $31559 = 0, $31570 = 0, $31574 = 0, $31582 = 0, $31590 = 0, $31598 = 0, $316 = 0, $31606 = 0, $31614 = 0, $31622 = 0, $31630 = 0, $31638 = 0, $31646 = 0, $31654 = 0, $31662 = 0, $31670 = 0, $31678 = 0, $31686 = 0, $31694 = 0, $317 = 0, $31702 = 0, $3171 = 0, $31715 = 0, $31720 = 0, $31722 = 0, $31727 = 0, $31732 = 0, $31737 = 0, $31741 = 0, $31764 = 0, $31766 = 0, $31773 = 0, $31778 = 0, $31780 = 0, $31785 = 0, $31790 = 0, $31795 = 0, $31799 = 0, $318 = 0, $3180 = 0, $31810 = 0, $31812 = 0, $31819 = 0, $31824 = 0, $31826 = 0, $31831 = 0, $31836 = 0, $31841 = 0, $31845 = 0, $3186 = 0, $31871 = 0, $31873 = 0, $31880 = 0, $31885 = 0, $31887 = 0, $31892 = 0, $31897 = 0, $319 = 0, $3190 = 0, $31902 = 0, $31906 = 0, $31919 = 0, $31921 = 0, $31928 = 0, $31933 = 0, $31935 = 0, $31940 = 0, $31945 = 0, $3195 = 0, $31950 = 0, $31954 = 0, $31967 = 0, $31969 = 0, $3197 = 0, $31976 = 0, $31981 = 0, $31983 = 0, $31988 = 0, $31993 = 0, $31998 = 0, $32 = 0, $320 = 0, $32002 = 0, $32015 = 0, $32017 = 0, $3202 = 0, $32024 = 0, $32029 = 0, $32031 = 0, $32036 = 0, $32041 = 0, $32046 = 0, $32050 = 0, $32063 = 0, $32065 = 0, $3207 = 0, $32072 = 0, $32077 = 0, $32079 = 0, $32084 = 0, $32089 = 0, $32094 = 0, $32098 = 0, $321 = 0, $32110 = 0, $32112 = 0, $32119 = 0, $3212 = 0, $32124 = 0, $32126 = 0, $32131 = 0, $32136 = 0, $32141 = 0, $32145 = 0, $32156 = 0, $32158 = 0, $3216 = 0, $32165 = 0, $32170 = 0, $32172 = 0, $32177 = 0, $32182 = 0, $32187 = 0, $32191 = 0, $322 = 0, $32205 = 0, $32207 = 0, $32214 = 0, $32219 = 0, $32221 = 0, $32226 = 0, $32231 = 0, $32236 = 0, $32240 = 0, $32252 = 0, $32254 = 0, $32261 = 0, $32266 = 0, $32268 = 0, $3227 = 0, $32273 = 0, $32278 = 0, $32283 = 0, $32287 = 0, $3229 = 0, $323 = 0, $32300 = 0, $32302 = 0, $32309 = 0, $3231 = 0, $32314 = 0, $32316 = 0, $32321 = 0, $32326 = 0, $32331 = 0, $32335 = 0, $32350 = 0, $32352 = 0, $32359 = 0, $32364 = 0, $32366 = 0, $32371 = 0, $32376 = 0, $32381 = 0, $32385 = 0, $3239 = 0, $324 = 0, $32421 = 0, $32423 = 0, $32430 = 0, $32435 = 0, $32437 = 0, $32442 = 0, $32447 = 0, $32452 = 0, $32456 = 0, $3247 = 0, $325 = 0, $32503 = 0, $32505 = 0, $3251 = 0, $32512 = 0, $32517 = 0, $32519 = 0, $32524 = 0, $32529 = 0, $32534 = 0, $32538 = 0, $3256 = 0, $32565 = 0, $32567 = 0, $32574 = 0, $32579 = 0, $3258 = 0, $32581 = 0, $32586 = 0, $32591 = 0, $32596 = 0, $326 = 0, $32600 = 0, $32614 = 0, $32616 = 0, $32623 = 0, $32628 = 0, $3263 = 0, $32630 = 0, $32635 = 0, $32640 = 0, $32645 = 0, $32649 = 0, $32672 = 0, $32674 = 0, $3268 = 0, $32681 = 0, $32686 = 0, $32688 = 0, $32693 = 0, $32698 = 0, $327 = 0, $32703 = 0, $32707 = 0, $32720 = 0, $32722 = 0, $32729 = 0, $3273 = 0, $32734 = 0, $32736 = 0, $32741 = 0, $32746 = 0, $32751 = 0, $32755 = 0, $32766 = 0, $32768 = 0, $3277 = 0, $32775 = 0, $32780 = 0, $32782 = 0, $32787 = 0, $32792 = 0, $32797 = 0, $328 = 0, $32801 = 0, $32811 = 0, $32812 = 0, $32813 = 0, $32815 = 0, $32816 = 0, $32817 = 0, $32818 = 0, $32820 = 0, $32826 = 0, $32828 = 0, $32835 = 0, $32840 = 0, $32842 = 0, $32847 = 0, $32852 = 0, $32857 = 0, $32861 = 0, $32871 = 0, $32872 = 0, $32873 = 0, $32875 = 0, $32876 = 0, $32877 = 0, $32878 = 0, $3288 = 0, $32880 = 0, $32886 = 0, $32888 = 0, $32895 = 0, $329 = 0, $3290 = 0, $32900 = 0, $32902 = 0, $32907 = 0, $32912 = 0, $32917 = 0, $3292 = 0, $32921 = 0, $32951 = 0, $32953 = 0, $3296 = 0, $32960 = 0, $32965 = 0, $32967 = 0, $32972 = 0, $32977 = 0, $32982 = 0, $32986 = 0, $33 = 0, $330 = 0, $3301 = 0, $33025 = 0, $33027 = 0, $3303 = 0, $33034 = 0, $33039 = 0, $33041 = 0, $33046 = 0, $33051 = 0, $33056 = 0, $33060 = 0, $3308 = 0, $33099 = 0, $331 = 0, $33101 = 0, $33108 = 0, $33113 = 0, $33115 = 0, $33120 = 0, $33125 = 0, $3313 = 0, $33130 = 0, $33134 = 0, $33173 = 0, $33175 = 0, $3318 = 0, $33182 = 0, $33187 = 0, $33189 = 0, $33194 = 0, $33199 = 0, $332 = 0, $33204 = 0, $33208 = 0, $3322 = 0, $33247 = 0, $33249 = 0, $33256 = 0, $33261 = 0, $33263 = 0, $33268 = 0, $33273 = 0, $33278 = 0, $33282 = 0, $333 = 0, $33321 = 0, $33323 = 0, $33330 = 0, $33335 = 0, $33337 = 0, $33342 = 0, $33347 = 0, $33352 = 0, $33356 = 0, $33389 = 0, $33391 = 0, $33398 = 0, $334 = 0, $33403 = 0, $33405 = 0, $33410 = 0, $33415 = 0, $33420 = 0, $33424 = 0, $33465 = 0, $33467 = 0, $3347 = 0, $33474 = 0, $33479 = 0, $33481 = 0, $33486 = 0, $3349 = 0, $33491 = 0, $33496 = 0, $335 = 0, $33500 = 0, $3351 = 0, $33545 = 0, $33547 = 0, $33554 = 0, $33559 = 0, $3356 = 0, $33561 = 0, $33566 = 0, $33571 = 0, $33576 = 0, $33580 = 0, $336 = 0, $3361 = 0, $33625 = 0, $33627 = 0, $3363 = 0, $33634 = 0, $33639 = 0, $33641 = 0, $33646 = 0, $33651 = 0, $33656 = 0, $33660 = 0, $3368 = 0, $33699 = 0, $337 = 0, $33701 = 0, $33708 = 0, $33713 = 0, $33715 = 0, $33720 = 0, $33725 = 0, $3373 = 0, $33730 = 0, $33734 = 0, $33773 = 0, $33775 = 0, $3378 = 0, $33782 = 0, $33787 = 0, $33789 = 0, $33794 = 0, $33799 = 0, $338 = 0, $33804 = 0, $33808 = 0, $3382 = 0, $33843 = 0, $33845 = 0, $33852 = 0, $33857 = 0, $33859 = 0, $33864 = 0, $33869 = 0, $33874 = 0, $33878 = 0, $339 = 0, $33917 = 0, $33919 = 0, $33926 = 0, $33931 = 0, $33933 = 0, $33938 = 0, $33943 = 0, $33948 = 0, $33952 = 0, $33991 = 0, $33993 = 0, $34 = 0, $340 = 0, $34000 = 0, $34005 = 0, $34007 = 0, $34012 = 0, $34017 = 0, $34022 = 0, $34026 = 0, $34063 = 0, $34065 = 0, $3407 = 0, $34072 = 0, $34077 = 0, $34079 = 0, $34084 = 0, $34089 = 0, $3409 = 0, $34094 = 0, $34098 = 0, $341 = 0, $3411 = 0, $34149 = 0, $34151 = 0, $34158 = 0, $3416 = 0, $34163 = 0, $34165 = 0, $34170 = 0, $34175 = 0, $34180 = 0, $34184 = 0, $342 = 0, $3421 = 0, $3423 = 0, $34235 = 0, $34237 = 0, $34244 = 0, $34249 = 0, $34251 = 0, $34256 = 0, $34261 = 0, $34266 = 0, $34270 = 0, $3428 = 0, $34285 = 0, $34287 = 0, $34294 = 0, $34299 = 0, $343 = 0, $34301 = 0, $34306 = 0, $34311 = 0, $34316 = 0, $34320 = 0, $3433 = 0, $34346 = 0, $34348 = 0, $34350 = 0, $34358 = 0, $34366 = 0, $34374 = 0, $3438 = 0, $34382 = 0, $34390 = 0, $34398 = 0, $344 = 0, $34406 = 0, $34414 = 0, $3442 = 0, $34422 = 0, $34430 = 0, $34438 = 0, $34446 = 0, $34454 = 0, $34462 = 0, $34470 = 0, $34478 = 0, $34486 = 0, $34494 = 0, $345 = 0, $34502 = 0, $34510 = 0, $34518 = 0, $34526 = 0, $34534 = 0, $34542 = 0, $34550 = 0, $34558 = 0, $34566 = 0, $34574 = 0, $34582 = 0, $34590 = 0, $34598 = 0, $346 = 0, $34606 = 0, $34614 = 0, $34622 = 0, $34635 = 0, $34640 = 0, $34642 = 0, $34647 = 0, $34652 = 0, $34657 = 0, $34661 = 0, $3467 = 0, $3469 = 0, $347 = 0, $34709 = 0, $3471 = 0, $34711 = 0, $34718 = 0, $34723 = 0, $34725 = 0, $34730 = 0, $34735 = 0, $34740 = 0, $34744 = 0, $3476 = 0, $34775 = 0, $34777 = 0, $34784 = 0, $34789 = 0, $34791 = 0, $34796 = 0, $348 = 0, $34801 = 0, $34806 = 0, $3481 = 0, $34810 = 0, $3483 = 0, $34833 = 0, $34835 = 0, $34842 = 0, $34847 = 0, $34849 = 0, $34854 = 0, $34859 = 0, $34864 = 0, $34868 = 0, $3488 = 0, $34882 = 0, $34884 = 0, $34891 = 0, $34896 = 0, $34898 = 0, $349 = 0, $34903 = 0, $34908 = 0, $34913 = 0, $34917 = 0, $3493 = 0, $34965 = 0, $34967 = 0, $34974 = 0, $34979 = 0, $3498 = 0, $34981 = 0, $34986 = 0, $34991 = 0, $34996 = 0, $35 = 0, $350 = 0, $35000 = 0, $3502 = 0, $35046 = 0, $35048 = 0, $35055 = 0, $35060 = 0, $35062 = 0, $35067 = 0, $35072 = 0, $35077 = 0, $35081 = 0, $351 = 0, $35127 = 0, $35129 = 0, $35136 = 0, $35141 = 0, $35143 = 0, $35148 = 0, $35153 = 0, $35158 = 0, $35162 = 0, $352 = 0, $35210 = 0, $35212 = 0, $35219 = 0, $35224 = 0, $35226 = 0, $35231 = 0, $35236 = 0, $35241 = 0, $35245 = 0, $3527 = 0, $3529 = 0, $35291 = 0, $35293 = 0, $35295 = 0, $35296 = 0, $35297 = 0, $35298 = 0, $35299 = 0, $353 = 0, $35300 = 0, $3531 = 0, $3536 = 0, $354 = 0, $3541 = 0, $3543 = 0, $3548 = 0, $355 = 0, $3553 = 0, $3558 = 0, $356 = 0, $3562 = 0, $357 = 0, $358 = 0, $3587 = 0, $3589 = 0, $359 = 0, $3591 = 0, $3596 = 0, $36 = 0, $360 = 0, $3601 = 0, $3603 = 0, $3608 = 0, $361 = 0, $3613 = 0, $3618 = 0, $362 = 0, $3622 = 0, $363 = 0, $364 = 0, $3647 = 0, $3649 = 0, $365 = 0, $3651 = 0, $3656 = 0, $366 = 0, $3661 = 0, $3663 = 0, $3668 = 0, $367 = 0, $3673 = 0, $3678 = 0, $368 = 0, $3682 = 0, $369 = 0, $37 = 0, $370 = 0, $3707 = 0, $3709 = 0, $371 = 0, $3711 = 0, $3716 = 0, $372 = 0, $3721 = 0, $3723 = 0, $3728 = 0, $373 = 0, $3733 = 0, $3738 = 0, $374 = 0, $3742 = 0, $375 = 0, $376 = 0, $3767 = 0, $3769 = 0, $377 = 0, $3771 = 0, $3776 = 0, $378 = 0, $3781 = 0, $3783 = 0, $3788 = 0, $379 = 0, $3793 = 0, $3798 = 0, $38 = 0, $380 = 0, $3802 = 0, $381 = 0, $382 = 0, $3827 = 0, $3829 = 0, $383 = 0, $3831 = 0, $3836 = 0, $384 = 0, $3841 = 0, $3843 = 0, $3848 = 0, $385 = 0, $3853 = 0, $3858 = 0, $386 = 0, $3862 = 0, $387 = 0, $388 = 0, $3887 = 0, $3889 = 0, $389 = 0, $3891 = 0, $3896 = 0, $39 = 0, $390 = 0, $3901 = 0, $3903 = 0, $3908 = 0, $391 = 0, $3913 = 0, $3918 = 0, $392 = 0, $3922 = 0, $393 = 0, $394 = 0, $3947 = 0, $3949 = 0, $395 = 0, $3951 = 0, $3956 = 0, $396 = 0, $3961 = 0, $3963 = 0, $3968 = 0, $397 = 0, $3973 = 0, $3978 = 0, $398 = 0, $3982 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $4007 = 0, $4009 = 0, $401 = 0, $4011 = 0, $4016 = 0, $402 = 0, $4021 = 0, $4023 = 0, $4028 = 0, $403 = 0, $4033 = 0, $4038 = 0, $404 = 0, $4042 = 0, $405 = 0, $406 = 0, $4067 = 0, $4069 = 0, $407 = 0, $4071 = 0, $4076 = 0, $408 = 0, $4081 = 0, $4083 = 0, $4088 = 0, $409 = 0, $4093 = 0, $4098 = 0, $41 = 0, $410 = 0, $4102 = 0, $411 = 0, $412 = 0, $4127 = 0, $4129 = 0, $413 = 0, $4131 = 0, $4136 = 0, $414 = 0, $4141 = 0, $4143 = 0, $4148 = 0, $415 = 0, $4153 = 0, $4158 = 0, $416 = 0, $4162 = 0, $417 = 0, $418 = 0, $4187 = 0, $4189 = 0, $419 = 0, $4191 = 0, $4196 = 0, $42 = 0, $420 = 0, $4201 = 0, $4203 = 0, $4208 = 0, $421 = 0, $4213 = 0, $4218 = 0, $422 = 0, $4222 = 0, $423 = 0, $424 = 0, $4247 = 0, $4249 = 0, $425 = 0, $4251 = 0, $4256 = 0, $426 = 0, $4261 = 0, $4263 = 0, $4268 = 0, $427 = 0, $4273 = 0, $4278 = 0, $428 = 0, $4282 = 0, $429 = 0, $43 = 0, $430 = 0, $4307 = 0, $4309 = 0, $431 = 0, $4311 = 0, $4316 = 0, $432 = 0, $4321 = 0, $4323 = 0, $4328 = 0, $433 = 0, $4333 = 0, $4338 = 0, $434 = 0, $4342 = 0, $435 = 0, $436 = 0, $4367 = 0, $4369 = 0, $437 = 0, $4371 = 0, $4376 = 0, $438 = 0, $4381 = 0, $4383 = 0, $4388 = 0, $439 = 0, $4393 = 0, $4398 = 0, $44 = 0, $440 = 0, $4402 = 0, $441 = 0, $442 = 0, $4427 = 0, $4429 = 0, $443 = 0, $4431 = 0, $4436 = 0, $444 = 0, $4441 = 0, $4443 = 0, $4448 = 0, $445 = 0, $4453 = 0, $4458 = 0, $446 = 0, $4462 = 0, $447 = 0, $448 = 0, $4487 = 0, $4489 = 0, $449 = 0, $4491 = 0, $4496 = 0, $45 = 0, $450 = 0, $4501 = 0, $4503 = 0, $4508 = 0, $451 = 0, $4513 = 0, $4518 = 0, $452 = 0, $4522 = 0, $453 = 0, $454 = 0, $4547 = 0, $4549 = 0, $455 = 0, $4551 = 0, $4556 = 0, $456 = 0, $4561 = 0, $4563 = 0, $4568 = 0, $457 = 0, $4573 = 0, $4578 = 0, $458 = 0, $4582 = 0, $459 = 0, $46 = 0, $460 = 0, $4607 = 0, $4609 = 0, $461 = 0, $4611 = 0, $4616 = 0, $462 = 0, $4621 = 0, $4623 = 0, $4628 = 0, $463 = 0, $4633 = 0, $4638 = 0, $464 = 0, $4642 = 0, $465 = 0, $466 = 0, $4667 = 0, $4669 = 0, $467 = 0, $4671 = 0, $4676 = 0, $468 = 0, $4681 = 0, $4683 = 0, $4688 = 0, $469 = 0, $4693 = 0, $4698 = 0, $47 = 0, $470 = 0, $4702 = 0, $471 = 0, $472 = 0, $4727 = 0, $4729 = 0, $473 = 0, $4731 = 0, $4736 = 0, $474 = 0, $4741 = 0, $4743 = 0, $4748 = 0, $475 = 0, $4753 = 0, $4758 = 0, $476 = 0, $4762 = 0, $477 = 0, $478 = 0, $4787 = 0, $4789 = 0, $479 = 0, $4791 = 0, $4796 = 0, $48 = 0, $480 = 0, $4801 = 0, $4803 = 0, $4808 = 0, $481 = 0, $4813 = 0, $4818 = 0, $482 = 0, $4822 = 0, $483 = 0, $484 = 0, $4847 = 0, $4849 = 0, $485 = 0, $4851 = 0, $4856 = 0, $486 = 0, $4861 = 0, $4863 = 0, $4868 = 0, $487 = 0, $4873 = 0, $4878 = 0, $488 = 0, $4882 = 0, $489 = 0, $49 = 0, $490 = 0, $4907 = 0, $4909 = 0, $491 = 0, $4911 = 0, $4916 = 0, $492 = 0, $4921 = 0, $4923 = 0, $4928 = 0, $493 = 0, $4933 = 0, $4938 = 0, $494 = 0, $4942 = 0, $495 = 0, $496 = 0, $4967 = 0, $4969 = 0, $497 = 0, $4971 = 0, $4976 = 0, $498 = 0, $4981 = 0, $4983 = 0, $4988 = 0, $499 = 0, $4993 = 0, $4998 = 0, $5 = 0, $50 = 0, $500 = 0, $5002 = 0, $501 = 0, $502 = 0, $5027 = 0, $5029 = 0, $503 = 0, $5031 = 0, $5036 = 0, $504 = 0, $5041 = 0, $5043 = 0, $5048 = 0, $505 = 0, $5053 = 0, $5058 = 0, $506 = 0, $5062 = 0, $507 = 0, $508 = 0, $5087 = 0, $5089 = 0, $509 = 0, $5091 = 0, $5096 = 0, $51 = 0, $510 = 0, $5101 = 0, $5103 = 0, $5108 = 0, $511 = 0, $5113 = 0, $5118 = 0, $512 = 0, $5122 = 0, $513 = 0, $514 = 0, $5147 = 0, $5149 = 0, $515 = 0, $5151 = 0, $5156 = 0, $516 = 0, $5161 = 0, $5163 = 0, $5168 = 0, $517 = 0, $5173 = 0, $5178 = 0, $518 = 0, $5182 = 0, $519 = 0, $52 = 0, $520 = 0, $5207 = 0, $5209 = 0, $521 = 0, $5211 = 0, $5216 = 0, $522 = 0, $5221 = 0, $5223 = 0, $5228 = 0, $523 = 0, $5233 = 0, $5238 = 0, $524 = 0, $5242 = 0, $525 = 0, $526 = 0, $5267 = 0, $5269 = 0, $527 = 0, $5271 = 0, $5276 = 0, $528 = 0, $5281 = 0, $5283 = 0, $5288 = 0, $529 = 0, $5293 = 0, $5298 = 0, $53 = 0, $530 = 0, $5302 = 0, $531 = 0, $532 = 0, $5327 = 0, $5329 = 0, $533 = 0, $5331 = 0, $5336 = 0, $534 = 0, $5341 = 0, $5343 = 0, $5348 = 0, $535 = 0, $5353 = 0, $5358 = 0, $536 = 0, $5362 = 0, $537 = 0, $538 = 0, $5387 = 0, $5389 = 0, $539 = 0, $5391 = 0, $5396 = 0, $54 = 0, $540 = 0, $5401 = 0, $5403 = 0, $5408 = 0, $541 = 0, $5413 = 0, $5418 = 0, $542 = 0, $5422 = 0, $543 = 0, $544 = 0, $5447 = 0, $5449 = 0, $545 = 0, $5451 = 0, $5456 = 0, $546 = 0, $5461 = 0, $5463 = 0, $5468 = 0, $547 = 0, $5473 = 0, $5478 = 0, $548 = 0, $5482 = 0, $549 = 0, $55 = 0, $550 = 0, $5507 = 0, $5509 = 0, $551 = 0, $5511 = 0, $5516 = 0, $552 = 0, $5521 = 0, $5523 = 0, $5528 = 0, $553 = 0, $5533 = 0, $5538 = 0, $554 = 0, $5542 = 0, $555 = 0, $556 = 0, $5567 = 0, $5569 = 0, $557 = 0, $5571 = 0, $5576 = 0, $558 = 0, $5581 = 0, $5583 = 0, $5588 = 0, $559 = 0, $5593 = 0, $5598 = 0, $56 = 0, $560 = 0, $5602 = 0, $561 = 0, $562 = 0, $5627 = 0, $5629 = 0, $563 = 0, $5631 = 0, $5636 = 0, $564 = 0, $5641 = 0, $5643 = 0, $5648 = 0, $565 = 0, $5653 = 0, $5658 = 0, $566 = 0, $5662 = 0, $567 = 0, $568 = 0, $5687 = 0, $5689 = 0, $569 = 0, $5691 = 0, $5696 = 0, $57 = 0, $570 = 0, $5701 = 0, $5703 = 0, $5708 = 0, $571 = 0, $5713 = 0, $5718 = 0, $572 = 0, $5722 = 0, $573 = 0, $574 = 0, $5747 = 0, $5749 = 0, $575 = 0, $5751 = 0, $5756 = 0, $576 = 0, $5761 = 0, $5763 = 0, $5768 = 0, $577 = 0, $5773 = 0, $5778 = 0, $578 = 0, $5782 = 0, $579 = 0, $58 = 0, $580 = 0, $5807 = 0, $5809 = 0, $581 = 0, $5811 = 0, $5816 = 0, $582 = 0, $5821 = 0, $5823 = 0, $5828 = 0, $583 = 0, $5833 = 0, $5838 = 0, $584 = 0, $5842 = 0, $585 = 0, $586 = 0, $5867 = 0, $5869 = 0, $587 = 0, $5871 = 0, $5876 = 0, $588 = 0, $5881 = 0, $5883 = 0, $5888 = 0, $589 = 0, $5893 = 0, $5898 = 0, $59 = 0, $590 = 0, $5902 = 0, $591 = 0, $592 = 0, $5927 = 0, $5929 = 0, $593 = 0, $5931 = 0, $5936 = 0, $594 = 0, $5941 = 0, $5943 = 0, $5948 = 0, $595 = 0, $5953 = 0, $5958 = 0, $596 = 0, $5962 = 0, $597 = 0, $598 = 0, $5987 = 0, $5989 = 0, $599 = 0, $5991 = 0, $5996 = 0, $6 = 0, $60 = 0, $600 = 0, $6001 = 0, $6003 = 0, $6008 = 0, $601 = 0, $6013 = 0, $6018 = 0, $602 = 0, $6022 = 0, $603 = 0, $604 = 0, $6047 = 0, $6049 = 0, $605 = 0, $6051 = 0, $6056 = 0, $606 = 0, $6061 = 0, $6063 = 0, $6068 = 0, $607 = 0, $6073 = 0, $6078 = 0, $608 = 0, $6082 = 0, $609 = 0, $61 = 0, $610 = 0, $6107 = 0, $6109 = 0, $611 = 0, $6111 = 0, $6116 = 0, $612 = 0, $6121 = 0, $6123 = 0, $6128 = 0, $613 = 0, $6133 = 0, $6138 = 0, $614 = 0, $6142 = 0, $615 = 0, $616 = 0, $6167 = 0, $6169 = 0, $617 = 0, $6171 = 0, $6176 = 0, $618 = 0, $6181 = 0, $6183 = 0, $6188 = 0, $619 = 0, $6193 = 0, $6198 = 0, $62 = 0, $620 = 0, $6202 = 0, $621 = 0, $622 = 0, $6227 = 0, $6229 = 0, $623 = 0, $6231 = 0, $6236 = 0, $624 = 0, $6241 = 0, $6243 = 0, $6248 = 0, $625 = 0, $6253 = 0, $6258 = 0, $626 = 0, $6262 = 0, $627 = 0, $628 = 0, $6287 = 0, $6289 = 0, $629 = 0, $6291 = 0, $6296 = 0, $63 = 0, $630 = 0, $6301 = 0, $6303 = 0, $6308 = 0, $631 = 0, $6313 = 0, $6318 = 0, $632 = 0, $6322 = 0, $633 = 0, $634 = 0, $6347 = 0, $6349 = 0, $635 = 0, $6351 = 0, $6356 = 0, $636 = 0, $6361 = 0, $6363 = 0, $6368 = 0, $637 = 0, $6373 = 0, $6378 = 0, $638 = 0, $6382 = 0, $639 = 0, $6395 = 0, $6397 = 0, $6399 = 0, $64 = 0, $640 = 0, $6407 = 0, $641 = 0, $6415 = 0, $642 = 0, $6420 = 0, $6425 = 0, $6427 = 0, $643 = 0, $6432 = 0, $6437 = 0, $644 = 0, $6442 = 0, $6446 = 0, $645 = 0, $646 = 0, $647 = 0, $6471 = 0, $6473 = 0, $6475 = 0, $648 = 0, $6480 = 0, $6485 = 0, $6487 = 0, $649 = 0, $6492 = 0, $6497 = 0, $65 = 0, $650 = 0, $6502 = 0, $6506 = 0, $651 = 0, $652 = 0, $653 = 0, $6531 = 0, $6533 = 0, $6535 = 0, $654 = 0, $6540 = 0, $6545 = 0, $6547 = 0, $655 = 0, $6552 = 0, $6557 = 0, $656 = 0, $6562 = 0, $6566 = 0, $657 = 0, $658 = 0, $659 = 0, $6591 = 0, $6593 = 0, $6595 = 0, $66 = 0, $660 = 0, $6600 = 0, $6605 = 0, $6607 = 0, $661 = 0, $6612 = 0, $6617 = 0, $662 = 0, $6622 = 0, $6626 = 0, $663 = 0, $664 = 0, $665 = 0, $6651 = 0, $6653 = 0, $6655 = 0, $666 = 0, $6660 = 0, $6665 = 0, $6667 = 0, $667 = 0, $6672 = 0, $6677 = 0, $668 = 0, $6682 = 0, $6686 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $6711 = 0, $6713 = 0, $6715 = 0, $672 = 0, $6720 = 0, $6725 = 0, $6727 = 0, $673 = 0, $6732 = 0, $6737 = 0, $674 = 0, $6742 = 0, $6746 = 0, $675 = 0, $676 = 0, $677 = 0, $6771 = 0, $6773 = 0, $6775 = 0, $678 = 0, $6780 = 0, $6785 = 0, $6787 = 0, $679 = 0, $6792 = 0, $6797 = 0, $68 = 0, $680 = 0, $6802 = 0, $6806 = 0, $681 = 0, $682 = 0, $683 = 0, $6831 = 0, $6833 = 0, $6835 = 0, $684 = 0, $6840 = 0, $6845 = 0, $6847 = 0, $685 = 0, $6852 = 0, $6857 = 0, $686 = 0, $6862 = 0, $6866 = 0, $687 = 0, $688 = 0, $689 = 0, $6891 = 0, $6893 = 0, $6895 = 0, $69 = 0, $690 = 0, $6900 = 0, $6905 = 0, $6907 = 0, $691 = 0, $6912 = 0, $6917 = 0, $692 = 0, $6922 = 0, $6926 = 0, $693 = 0, $694 = 0, $695 = 0, $6951 = 0, $6953 = 0, $6955 = 0, $696 = 0, $6960 = 0, $6965 = 0, $6967 = 0, $697 = 0, $6972 = 0, $6977 = 0, $698 = 0, $6982 = 0, $6986 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $7011 = 0, $7013 = 0, $7015 = 0, $702 = 0, $7020 = 0, $7025 = 0, $7027 = 0, $703 = 0, $7032 = 0, $7037 = 0, $704 = 0, $7042 = 0, $7046 = 0, $705 = 0, $706 = 0, $707 = 0, $7071 = 0, $7073 = 0, $7075 = 0, $708 = 0, $7080 = 0, $7085 = 0, $7087 = 0, $709 = 0, $7092 = 0, $7097 = 0, $71 = 0, $710 = 0, $7102 = 0, $7106 = 0, $711 = 0, $712 = 0, $713 = 0, $7131 = 0, $7133 = 0, $7135 = 0, $714 = 0, $7140 = 0, $7145 = 0, $7147 = 0, $715 = 0, $7152 = 0, $7157 = 0, $716 = 0, $7162 = 0, $7166 = 0, $717 = 0, $718 = 0, $719 = 0, $7191 = 0, $7193 = 0, $7195 = 0, $72 = 0, $720 = 0, $7200 = 0, $7205 = 0, $7207 = 0, $721 = 0, $7212 = 0, $7217 = 0, $722 = 0, $7222 = 0, $7226 = 0, $723 = 0, $724 = 0, $725 = 0, $7251 = 0, $7253 = 0, $7255 = 0, $726 = 0, $7260 = 0, $7265 = 0, $7267 = 0, $727 = 0, $7272 = 0, $7277 = 0, $728 = 0, $7282 = 0, $7286 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $7311 = 0, $7313 = 0, $7315 = 0, $732 = 0, $7320 = 0, $7325 = 0, $7327 = 0, $733 = 0, $7332 = 0, $7337 = 0, $734 = 0, $7342 = 0, $7346 = 0, $735 = 0, $736 = 0, $737 = 0, $7371 = 0, $7373 = 0, $7375 = 0, $738 = 0, $7380 = 0, $7385 = 0, $7387 = 0, $739 = 0, $7392 = 0, $7397 = 0, $74 = 0, $740 = 0, $7402 = 0, $7406 = 0, $741 = 0, $742 = 0, $743 = 0, $7431 = 0, $7433 = 0, $7435 = 0, $744 = 0, $7440 = 0, $7445 = 0, $7447 = 0, $745 = 0, $7452 = 0, $7457 = 0, $746 = 0, $7462 = 0, $7466 = 0, $747 = 0, $748 = 0, $749 = 0, $7491 = 0, $7493 = 0, $7495 = 0, $75 = 0, $750 = 0, $7500 = 0, $7505 = 0, $7507 = 0, $751 = 0, $7512 = 0, $7517 = 0, $752 = 0, $7522 = 0, $7526 = 0, $753 = 0, $754 = 0, $755 = 0, $7551 = 0, $7553 = 0, $7555 = 0, $756 = 0, $7560 = 0, $7565 = 0, $7567 = 0, $757 = 0, $7572 = 0, $7577 = 0, $758 = 0, $7582 = 0, $7586 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $7611 = 0, $7613 = 0, $7615 = 0, $762 = 0, $7620 = 0, $7625 = 0, $7627 = 0, $763 = 0, $7632 = 0, $7637 = 0, $764 = 0, $7642 = 0, $7646 = 0, $765 = 0, $766 = 0, $767 = 0, $7671 = 0, $7673 = 0, $7675 = 0, $768 = 0, $7680 = 0, $7685 = 0, $7687 = 0, $769 = 0, $7692 = 0, $7697 = 0, $77 = 0, $770 = 0, $7702 = 0, $7706 = 0, $771 = 0, $772 = 0, $773 = 0, $7731 = 0, $7733 = 0, $7735 = 0, $774 = 0, $7740 = 0, $7745 = 0, $7747 = 0, $775 = 0, $7752 = 0, $7757 = 0, $776 = 0, $7762 = 0, $7766 = 0, $777 = 0, $778 = 0, $779 = 0, $7791 = 0, $7793 = 0, $7795 = 0, $78 = 0, $780 = 0, $7800 = 0, $7805 = 0, $7807 = 0, $781 = 0, $7812 = 0, $7817 = 0, $782 = 0, $7822 = 0, $7826 = 0, $783 = 0, $784 = 0, $785 = 0, $7851 = 0, $7853 = 0, $7855 = 0, $786 = 0, $7860 = 0, $7865 = 0, $7867 = 0, $787 = 0, $7872 = 0, $7877 = 0, $788 = 0, $7882 = 0, $7886 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $7911 = 0, $7913 = 0, $7915 = 0, $792 = 0, $7920 = 0, $7925 = 0, $7927 = 0, $793 = 0, $7932 = 0, $7937 = 0, $794 = 0, $7942 = 0, $7946 = 0, $795 = 0, $796 = 0, $797 = 0, $7971 = 0, $7973 = 0, $7975 = 0, $798 = 0, $7980 = 0, $7985 = 0, $7987 = 0, $799 = 0, $7992 = 0, $7997 = 0, $8 = 0, $80 = 0, $800 = 0, $8002 = 0, $8006 = 0, $801 = 0, $802 = 0, $803 = 0, $8031 = 0, $8033 = 0, $8035 = 0, $804 = 0, $8040 = 0, $8045 = 0, $8047 = 0, $805 = 0, $8052 = 0, $8057 = 0, $806 = 0, $8062 = 0, $8066 = 0, $807 = 0, $808 = 0, $809 = 0, $8091 = 0, $8093 = 0, $8095 = 0, $81 = 0, $810 = 0, $8100 = 0, $8105 = 0, $8107 = 0, $811 = 0, $8112 = 0, $8117 = 0, $812 = 0, $8122 = 0, $8126 = 0, $813 = 0, $814 = 0, $815 = 0, $8151 = 0, $8153 = 0, $8155 = 0, $816 = 0, $8160 = 0, $8165 = 0, $8167 = 0, $817 = 0, $8172 = 0, $8177 = 0, $818 = 0, $8182 = 0, $8186 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $8211 = 0, $8213 = 0, $8215 = 0, $822 = 0, $8220 = 0, $8225 = 0, $8227 = 0, $823 = 0, $8232 = 0, $8237 = 0, $824 = 0, $8242 = 0, $8246 = 0, $825 = 0, $826 = 0, $827 = 0, $8271 = 0, $8273 = 0, $8275 = 0, $828 = 0, $8280 = 0, $8285 = 0, $8287 = 0, $829 = 0, $8292 = 0, $8297 = 0, $83 = 0, $830 = 0, $8302 = 0, $8306 = 0, $831 = 0, $832 = 0, $833 = 0, $8331 = 0, $8333 = 0, $8335 = 0, $834 = 0, $8340 = 0, $8345 = 0, $8347 = 0, $835 = 0, $8352 = 0, $8357 = 0, $836 = 0, $8362 = 0, $8366 = 0, $837 = 0, $838 = 0, $839 = 0, $8391 = 0, $8393 = 0, $8395 = 0, $84 = 0, $840 = 0, $8400 = 0, $8405 = 0, $8407 = 0, $841 = 0, $8412 = 0, $8417 = 0, $842 = 0, $8422 = 0, $8426 = 0, $843 = 0, $844 = 0, $845 = 0, $8451 = 0, $8453 = 0, $8455 = 0, $846 = 0, $8460 = 0, $8465 = 0, $8467 = 0, $847 = 0, $8472 = 0, $8477 = 0, $848 = 0, $8482 = 0, $8486 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $8511 = 0, $8513 = 0, $8515 = 0, $852 = 0, $8520 = 0, $8525 = 0, $8527 = 0, $853 = 0, $8532 = 0, $8537 = 0, $854 = 0, $8542 = 0, $8546 = 0, $855 = 0, $856 = 0, $857 = 0, $8571 = 0, $8573 = 0, $8575 = 0, $858 = 0, $8580 = 0, $8585 = 0, $8587 = 0, $859 = 0, $8592 = 0, $8597 = 0, $86 = 0, $860 = 0, $8602 = 0, $8606 = 0, $861 = 0, $862 = 0, $863 = 0, $8631 = 0, $8633 = 0, $8635 = 0, $864 = 0, $8640 = 0, $8645 = 0, $8647 = 0, $865 = 0, $8652 = 0, $8657 = 0, $866 = 0, $8662 = 0, $8666 = 0, $867 = 0, $868 = 0, $869 = 0, $8691 = 0, $8693 = 0, $8695 = 0, $87 = 0, $870 = 0, $8700 = 0, $8705 = 0, $8707 = 0, $871 = 0, $8712 = 0, $8717 = 0, $872 = 0, $8722 = 0, $8726 = 0, $873 = 0, $874 = 0, $875 = 0, $8751 = 0, $8753 = 0, $8755 = 0, $876 = 0, $8760 = 0, $8765 = 0, $8767 = 0, $877 = 0, $8772 = 0, $8777 = 0, $878 = 0, $8782 = 0, $8786 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $8811 = 0, $8813 = 0, $8815 = 0, $882 = 0, $8820 = 0, $8825 = 0, $8827 = 0, $883 = 0, $8832 = 0, $8837 = 0, $884 = 0, $8842 = 0, $8846 = 0, $885 = 0, $886 = 0, $887 = 0, $8871 = 0, $8873 = 0, $8875 = 0, $888 = 0, $8880 = 0, $8885 = 0, $8887 = 0, $889 = 0, $8892 = 0, $8897 = 0, $89 = 0, $890 = 0, $8902 = 0, $8906 = 0, $891 = 0, $892 = 0, $893 = 0, $8931 = 0, $8933 = 0, $8935 = 0, $894 = 0, $8940 = 0, $8945 = 0, $8947 = 0, $895 = 0, $8952 = 0, $8957 = 0, $896 = 0, $8962 = 0, $8966 = 0, $897 = 0, $898 = 0, $899 = 0, $8991 = 0, $8993 = 0, $8995 = 0, $9 = 0, $90 = 0, $900 = 0, $9000 = 0, $9005 = 0, $9007 = 0, $901 = 0, $9012 = 0, $9017 = 0, $902 = 0, $9022 = 0, $9026 = 0, $903 = 0, $904 = 0, $905 = 0, $9051 = 0, $9053 = 0, $9055 = 0, $906 = 0, $9060 = 0, $9065 = 0, $9067 = 0, $907 = 0, $9072 = 0, $9077 = 0, $908 = 0, $9082 = 0, $9086 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $9111 = 0, $9113 = 0, $9115 = 0, $912 = 0, $9120 = 0, $9125 = 0, $9127 = 0, $913 = 0, $9132 = 0, $9137 = 0, $914 = 0, $9142 = 0, $9146 = 0, $915 = 0, $9158 = 0, $916 = 0, $9160 = 0, $9162 = 0, $9167 = 0, $917 = 0, $9172 = 0, $9174 = 0, $9179 = 0, $918 = 0, $9184 = 0, $9189 = 0, $919 = 0, $9193 = 0, $92 = 0, $920 = 0, $9205 = 0, $9207 = 0, $9209 = 0, $921 = 0, $9214 = 0, $9219 = 0, $922 = 0, $9221 = 0, $9226 = 0, $923 = 0, $9231 = 0, $9236 = 0, $924 = 0, $9240 = 0, $925 = 0, $9252 = 0, $9254 = 0, $9256 = 0, $926 = 0, $9261 = 0, $9266 = 0, $9268 = 0, $927 = 0, $9273 = 0, $9278 = 0, $928 = 0, $9283 = 0, $9287 = 0, $929 = 0, $9298 = 0, $93 = 0, $930 = 0, $9300 = 0, $9302 = 0, $9307 = 0, $931 = 0, $9312 = 0, $9314 = 0, $9319 = 0, $932 = 0, $9324 = 0, $9329 = 0, $933 = 0, $9333 = 0, $934 = 0, $9344 = 0, $9346 = 0, $9348 = 0, $935 = 0, $9353 = 0, $9358 = 0, $936 = 0, $9360 = 0, $9365 = 0, $937 = 0, $9370 = 0, $9375 = 0, $9379 = 0, $938 = 0, $939 = 0, $9390 = 0, $9392 = 0, $9394 = 0, $9399 = 0, $94 = 0, $940 = 0, $9404 = 0, $9406 = 0, $941 = 0, $9411 = 0, $9416 = 0, $942 = 0, $9421 = 0, $9425 = 0, $943 = 0, $9436 = 0, $9438 = 0, $944 = 0, $9440 = 0, $9445 = 0, $945 = 0, $9450 = 0, $9452 = 0, $9457 = 0, $946 = 0, $9462 = 0, $9467 = 0, $947 = 0, $9471 = 0, $948 = 0, $949 = 0, $9496 = 0, $9498 = 0, $95 = 0, $950 = 0, $9500 = 0, $9505 = 0, $951 = 0, $9510 = 0, $9512 = 0, $9517 = 0, $952 = 0, $9522 = 0, $9527 = 0, $953 = 0, $9531 = 0, $954 = 0, $9547 = 0, $9549 = 0, $955 = 0, $9551 = 0, $9556 = 0, $956 = 0, $9561 = 0, $9563 = 0, $9568 = 0, $957 = 0, $9573 = 0, $9578 = 0, $958 = 0, $9582 = 0, $959 = 0, $96 = 0, $960 = 0, $9607 = 0, $9609 = 0, $961 = 0, $9611 = 0, $9616 = 0, $962 = 0, $9621 = 0, $9623 = 0, $9628 = 0, $963 = 0, $9633 = 0, $9638 = 0, $964 = 0, $9642 = 0, $965 = 0, $966 = 0, $9664 = 0, $9666 = 0, $9668 = 0, $967 = 0, $9673 = 0, $9678 = 0, $968 = 0, $9680 = 0, $9685 = 0, $969 = 0, $9690 = 0, $9695 = 0, $9699 = 0, $97 = 0, $970 = 0, $971 = 0, $9711 = 0, $9713 = 0, $972 = 0, $9720 = 0, $9725 = 0, $9727 = 0, $973 = 0, $9732 = 0, $9737 = 0, $974 = 0, $9742 = 0, $9746 = 0, $975 = 0, $976 = 0, $977 = 0, $9774 = 0, $9776 = 0, $978 = 0, $9783 = 0, $9788 = 0, $979 = 0, $9790 = 0, $9795 = 0, $98 = 0, $980 = 0, $9800 = 0, $9805 = 0, $9809 = 0, $981 = 0, $982 = 0, $9829 = 0, $983 = 0, $9831 = 0, $9833 = 0, $9838 = 0, $984 = 0, $9843 = 0, $9845 = 0, $985 = 0, $9850 = 0, $9855 = 0, $986 = 0, $9860 = 0, $9864 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $9902 = 0, $9904 = 0, $9906 = 0, $991 = 0, $9910 = 0, $9915 = 0, $9917 = 0, $992 = 0, $9922 = 0, $9927 = 0, $993 = 0, $9932 = 0, $9936 = 0, $994 = 0, $995 = 0, $9951 = 0, $9953 = 0, $996 = 0, $9960 = 0, $9965 = 0, $9967 = 0, $997 = 0, $9972 = 0, $9977 = 0, $998 = 0, $9982 = 0, $9986 = 0, $999 = 0, $bitmapData = 0, $dest$02$i2154 = 0, $dest$02$i2754 = 0, $dest$02$i2766 = 0, $dest$02$i2886 = 0, $dest$02$i3198 = 0, $dest$02$i3270 = 0, $dest$02$i3282 = 0, $dest$02$i4110 = 0, $dest$02$i4134 = 0, $dest$02$i4146 = 0, $dest$02$i4242 = 0, $front = 0, $i$03$i2153 = 0, $i$03$i2753 = 0, $i$03$i2765 = 0, $i$03$i2885 = 0, $i$03$i3197 = 0, $i$03$i3269 = 0, $i$03$i3281 = 0, $i$03$i4109 = 0, $i$03$i4133 = 0, $i$03$i4145 = 0, $i$03$i4241 = 0, $info = 0, $src$01$i2155 = 0, $src$01$i2755 = 0, $src$01$i2767 = 0, $src$01$i2887 = 0, $src$01$i3199 = 0, $src$01$i3271 = 0, $src$01$i3283 = 0, $src$01$i4111 = 0, $src$01$i4135 = 0, $src$01$i4147 = 0, $src$01$i4243 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 43744 | 0;
 $info = sp + 29976 | 0;
 $front = sp + 24152 | 0;
 $bitmapData = sp + 43720 | 0;
 $0 = sp + 24144 | 0;
 $1 = sp + 22736 | 0;
 $2 = sp + 43712 | 0;
 $3 = sp + 22720 | 0;
 $4 = sp + 43704 | 0;
 $5 = sp + 24140 | 0;
 $6 = sp + 24136 | 0;
 $7 = sp + 24132 | 0;
 $8 = sp + 24128 | 0;
 $9 = sp + 24124 | 0;
 $10 = sp + 24120 | 0;
 $11 = sp + 24116 | 0;
 $12 = sp + 24112 | 0;
 $13 = sp + 24108 | 0;
 $14 = sp + 24104 | 0;
 $15 = sp + 24100 | 0;
 $16 = sp + 24096 | 0;
 $17 = sp + 24092 | 0;
 $18 = sp + 24088 | 0;
 $19 = sp + 24084 | 0;
 $20 = sp + 24080 | 0;
 $21 = sp + 24076 | 0;
 $22 = sp + 24072 | 0;
 $23 = sp + 24068 | 0;
 $24 = sp + 24064 | 0;
 $25 = sp + 24060 | 0;
 $26 = sp + 24056 | 0;
 $27 = sp + 24052 | 0;
 $28 = sp + 24048 | 0;
 $29 = sp + 24044 | 0;
 $30 = sp + 24040 | 0;
 $31 = sp + 24036 | 0;
 $32 = sp + 24032 | 0;
 $33 = sp + 24028 | 0;
 $34 = sp + 24024 | 0;
 $35 = sp + 24020 | 0;
 $36 = sp + 24016 | 0;
 $37 = sp + 24012 | 0;
 $38 = sp + 24008 | 0;
 $39 = sp + 24004 | 0;
 $40 = sp + 24e3 | 0;
 $41 = sp + 23996 | 0;
 $42 = sp + 23992 | 0;
 $43 = sp + 23988 | 0;
 $44 = sp + 23984 | 0;
 $45 = sp + 23980 | 0;
 $46 = sp + 23976 | 0;
 $47 = sp + 23972 | 0;
 $48 = sp + 23968 | 0;
 $49 = sp + 23964 | 0;
 $50 = sp + 23960 | 0;
 $51 = sp + 23956 | 0;
 $52 = sp + 23952 | 0;
 $53 = sp + 23948 | 0;
 $54 = sp + 23944 | 0;
 $55 = sp + 23940 | 0;
 $56 = sp + 23936 | 0;
 $57 = sp + 23932 | 0;
 $58 = sp + 22704 | 0;
 $59 = sp + 43696 | 0;
 $60 = sp + 22688 | 0;
 $61 = sp + 43688 | 0;
 $62 = sp + 23928 | 0;
 $63 = sp + 23924 | 0;
 $64 = sp + 23920 | 0;
 $65 = sp + 23916 | 0;
 $66 = sp + 23912 | 0;
 $67 = sp + 23908 | 0;
 $68 = sp + 23904 | 0;
 $69 = sp + 23900 | 0;
 $70 = sp + 23896 | 0;
 $71 = sp + 23892 | 0;
 $72 = sp + 23888 | 0;
 $73 = sp + 23884 | 0;
 $74 = sp + 23880 | 0;
 $75 = sp + 23876 | 0;
 $76 = sp + 23872 | 0;
 $77 = sp + 23868 | 0;
 $78 = sp + 23864 | 0;
 $79 = sp + 23860 | 0;
 $80 = sp + 23856 | 0;
 $81 = sp + 23852 | 0;
 $82 = sp + 23848 | 0;
 $83 = sp + 23844 | 0;
 $84 = sp + 23840 | 0;
 $85 = sp + 23836 | 0;
 $86 = sp + 23832 | 0;
 $87 = sp + 23828 | 0;
 $88 = sp + 23824 | 0;
 $89 = sp + 23820 | 0;
 $90 = sp + 23816 | 0;
 $91 = sp + 23812 | 0;
 $92 = sp + 23808 | 0;
 $93 = sp + 23804 | 0;
 $94 = sp + 23800 | 0;
 $95 = sp + 23796 | 0;
 $96 = sp + 23792 | 0;
 $97 = sp + 23788 | 0;
 $98 = sp + 23784 | 0;
 $99 = sp + 23780 | 0;
 $100 = sp + 23776 | 0;
 $101 = sp + 23772 | 0;
 $102 = sp + 23768 | 0;
 $103 = sp + 23764 | 0;
 $104 = sp + 23760 | 0;
 $105 = sp + 23756 | 0;
 $106 = sp + 23752 | 0;
 $107 = sp + 23748 | 0;
 $108 = sp + 23744 | 0;
 $109 = sp + 23740 | 0;
 $110 = sp + 23736 | 0;
 $111 = sp + 23732 | 0;
 $112 = sp + 23728 | 0;
 $113 = sp + 23724 | 0;
 $114 = sp + 23720 | 0;
 $115 = sp + 23716 | 0;
 $116 = sp + 23712 | 0;
 $117 = sp + 23708 | 0;
 $118 = sp + 23704 | 0;
 $119 = sp + 23700 | 0;
 $120 = sp + 23696 | 0;
 $121 = sp + 23692 | 0;
 $122 = sp + 23688 | 0;
 $123 = sp + 23684 | 0;
 $124 = sp + 23680 | 0;
 $125 = sp + 23676 | 0;
 $126 = sp + 23672 | 0;
 $127 = sp + 23668 | 0;
 $128 = sp + 23664 | 0;
 $129 = sp + 23660 | 0;
 $130 = sp + 23656 | 0;
 $131 = sp + 23652 | 0;
 $132 = sp + 23648 | 0;
 $133 = sp + 23644 | 0;
 $134 = sp + 22672 | 0;
 $135 = sp + 43680 | 0;
 $136 = sp + 23640 | 0;
 $137 = sp + 23636 | 0;
 $138 = sp + 22656 | 0;
 $139 = sp + 43672 | 0;
 $140 = sp + 23632 | 0;
 $141 = sp + 22640 | 0;
 $142 = sp + 43664 | 0;
 $143 = sp + 22624 | 0;
 $144 = sp + 43656 | 0;
 $145 = sp + 22608 | 0;
 $146 = sp + 43648 | 0;
 $147 = sp + 22592 | 0;
 $148 = sp + 43640 | 0;
 $149 = sp + 22576 | 0;
 $150 = sp + 43632 | 0;
 $151 = sp + 22560 | 0;
 $152 = sp + 43624 | 0;
 $153 = sp + 22544 | 0;
 $154 = sp + 43616 | 0;
 $155 = sp + 22528 | 0;
 $156 = sp + 43608 | 0;
 $157 = sp + 22512 | 0;
 $158 = sp + 43600 | 0;
 $159 = sp + 22496 | 0;
 $160 = sp + 43592 | 0;
 $161 = sp + 22480 | 0;
 $162 = sp + 43584 | 0;
 $163 = sp + 22464 | 0;
 $164 = sp + 43576 | 0;
 $165 = sp + 22448 | 0;
 $166 = sp + 43568 | 0;
 $167 = sp + 22432 | 0;
 $168 = sp + 43560 | 0;
 $169 = sp + 22416 | 0;
 $170 = sp + 43552 | 0;
 $171 = sp + 22400 | 0;
 $172 = sp + 43544 | 0;
 $173 = sp + 22384 | 0;
 $174 = sp + 43536 | 0;
 $175 = sp + 22368 | 0;
 $176 = sp + 43528 | 0;
 $177 = sp + 22352 | 0;
 $178 = sp + 43520 | 0;
 $179 = sp + 22336 | 0;
 $180 = sp + 43512 | 0;
 $181 = sp + 22320 | 0;
 $182 = sp + 43504 | 0;
 $183 = sp + 22304 | 0;
 $184 = sp + 43496 | 0;
 $185 = sp + 22288 | 0;
 $186 = sp + 43488 | 0;
 $187 = sp + 22272 | 0;
 $188 = sp + 43480 | 0;
 $189 = sp + 22256 | 0;
 $190 = sp + 43472 | 0;
 $191 = sp + 22240 | 0;
 $192 = sp + 43464 | 0;
 $193 = sp + 22224 | 0;
 $194 = sp + 43456 | 0;
 $195 = sp + 23628 | 0;
 $196 = sp + 23624 | 0;
 $197 = sp + 23620 | 0;
 $198 = sp + 23616 | 0;
 $199 = sp + 23612 | 0;
 $200 = sp + 23608 | 0;
 $201 = sp + 22208 | 0;
 $202 = sp + 43448 | 0;
 $203 = sp + 23604 | 0;
 $204 = sp + 22192 | 0;
 $205 = sp + 43440 | 0;
 $206 = sp + 22176 | 0;
 $207 = sp + 43432 | 0;
 $208 = sp + 22160 | 0;
 $209 = sp + 43424 | 0;
 $210 = sp + 22144 | 0;
 $211 = sp + 43416 | 0;
 $212 = sp + 22128 | 0;
 $213 = sp + 43408 | 0;
 $214 = sp + 22112 | 0;
 $215 = sp + 43400 | 0;
 $216 = sp + 22096 | 0;
 $217 = sp + 43392 | 0;
 $218 = sp + 22080 | 0;
 $219 = sp + 43384 | 0;
 $220 = sp + 22064 | 0;
 $221 = sp + 43376 | 0;
 $222 = sp + 22048 | 0;
 $223 = sp + 43368 | 0;
 $224 = sp + 22032 | 0;
 $225 = sp + 43360 | 0;
 $226 = sp + 22016 | 0;
 $227 = sp + 43352 | 0;
 $228 = sp + 22e3 | 0;
 $229 = sp + 43344 | 0;
 $230 = sp + 21984 | 0;
 $231 = sp + 43336 | 0;
 $232 = sp + 21968 | 0;
 $233 = sp + 43328 | 0;
 $234 = sp + 21952 | 0;
 $235 = sp + 43320 | 0;
 $236 = sp + 21936 | 0;
 $237 = sp + 43312 | 0;
 $238 = sp + 21920 | 0;
 $239 = sp + 43304 | 0;
 $240 = sp + 21904 | 0;
 $241 = sp + 43296 | 0;
 $242 = sp + 21888 | 0;
 $243 = sp + 43288 | 0;
 $244 = sp + 23600 | 0;
 $245 = sp + 23596 | 0;
 $246 = sp + 23592 | 0;
 $247 = sp + 23588 | 0;
 $248 = sp + 23584 | 0;
 $249 = sp + 23580 | 0;
 $250 = sp + 21872 | 0;
 $251 = sp + 43280 | 0;
 $252 = sp + 21856 | 0;
 $253 = sp + 43272 | 0;
 $254 = sp + 21840 | 0;
 $255 = sp + 43264 | 0;
 $256 = sp + 21824 | 0;
 $257 = sp + 43256 | 0;
 $258 = sp + 21808 | 0;
 $259 = sp + 43248 | 0;
 $260 = sp + 21792 | 0;
 $261 = sp + 43240 | 0;
 $262 = sp + 21776 | 0;
 $263 = sp + 43232 | 0;
 $264 = sp + 21760 | 0;
 $265 = sp + 43224 | 0;
 $266 = sp + 21744 | 0;
 $267 = sp + 43216 | 0;
 $268 = sp + 21728 | 0;
 $269 = sp + 43208 | 0;
 $270 = sp + 21712 | 0;
 $271 = sp + 43200 | 0;
 $272 = sp + 21696 | 0;
 $273 = sp + 43192 | 0;
 $274 = sp + 21680 | 0;
 $275 = sp + 43184 | 0;
 $276 = sp + 21664 | 0;
 $277 = sp + 43176 | 0;
 $278 = sp + 21648 | 0;
 $279 = sp + 43168 | 0;
 $280 = sp + 21632 | 0;
 $281 = sp + 43160 | 0;
 $282 = sp + 21616 | 0;
 $283 = sp + 43152 | 0;
 $284 = sp + 21600 | 0;
 $285 = sp + 43144 | 0;
 $286 = sp + 21584 | 0;
 $287 = sp + 43136 | 0;
 $288 = sp + 21568 | 0;
 $289 = sp + 43128 | 0;
 $290 = sp + 21552 | 0;
 $291 = sp + 43120 | 0;
 $292 = sp + 21536 | 0;
 $293 = sp + 43112 | 0;
 $294 = sp + 21520 | 0;
 $295 = sp + 43104 | 0;
 $296 = sp + 21504 | 0;
 $297 = sp + 43096 | 0;
 $298 = sp + 21488 | 0;
 $299 = sp + 43088 | 0;
 $300 = sp + 21472 | 0;
 $301 = sp + 43080 | 0;
 $302 = sp + 21456 | 0;
 $303 = sp + 43072 | 0;
 $304 = sp + 21440 | 0;
 $305 = sp + 43064 | 0;
 $306 = sp + 21424 | 0;
 $307 = sp + 43056 | 0;
 $308 = sp + 21408 | 0;
 $309 = sp + 43048 | 0;
 $310 = sp + 21392 | 0;
 $311 = sp + 43040 | 0;
 $312 = sp + 21376 | 0;
 $313 = sp + 43032 | 0;
 $314 = sp + 21360 | 0;
 $315 = sp + 43024 | 0;
 $316 = sp + 21344 | 0;
 $317 = sp + 43016 | 0;
 $318 = sp + 21328 | 0;
 $319 = sp + 43008 | 0;
 $320 = sp + 21312 | 0;
 $321 = sp + 43e3 | 0;
 $322 = sp + 21296 | 0;
 $323 = sp + 42992 | 0;
 $324 = sp + 21280 | 0;
 $325 = sp + 42984 | 0;
 $326 = sp + 21264 | 0;
 $327 = sp + 42976 | 0;
 $328 = sp + 21248 | 0;
 $329 = sp + 42968 | 0;
 $330 = sp + 21232 | 0;
 $331 = sp + 42960 | 0;
 $332 = sp + 21216 | 0;
 $333 = sp + 42952 | 0;
 $334 = sp + 21200 | 0;
 $335 = sp + 42944 | 0;
 $336 = sp + 21184 | 0;
 $337 = sp + 42936 | 0;
 $338 = sp + 21168 | 0;
 $339 = sp + 42928 | 0;
 $340 = sp + 21152 | 0;
 $341 = sp + 42920 | 0;
 $342 = sp + 21136 | 0;
 $343 = sp + 42912 | 0;
 $344 = sp + 21120 | 0;
 $345 = sp + 42904 | 0;
 $346 = sp + 21104 | 0;
 $347 = sp + 42896 | 0;
 $348 = sp + 23576 | 0;
 $349 = sp + 23572 | 0;
 $350 = sp + 23568 | 0;
 $351 = sp + 23564 | 0;
 $352 = sp + 23560 | 0;
 $353 = sp + 23556 | 0;
 $354 = sp + 23552 | 0;
 $355 = sp + 23548 | 0;
 $356 = sp + 23544 | 0;
 $357 = sp + 23540 | 0;
 $358 = sp + 23536 | 0;
 $359 = sp + 23532 | 0;
 $360 = sp + 23528 | 0;
 $361 = sp + 23524 | 0;
 $362 = sp + 23520 | 0;
 $363 = sp + 23516 | 0;
 $364 = sp + 23512 | 0;
 $365 = sp + 23508 | 0;
 $366 = sp + 23504 | 0;
 $367 = sp + 23500 | 0;
 $368 = sp + 23496 | 0;
 $369 = sp + 23492 | 0;
 $370 = sp + 23488 | 0;
 $371 = sp + 23484 | 0;
 $372 = sp + 23480 | 0;
 $373 = sp + 23476 | 0;
 $374 = sp + 23472 | 0;
 $375 = sp + 23468 | 0;
 $376 = sp + 23464 | 0;
 $377 = sp + 23460 | 0;
 $378 = sp + 23456 | 0;
 $379 = sp + 21088 | 0;
 $380 = sp + 42888 | 0;
 $381 = sp + 21072 | 0;
 $382 = sp + 42880 | 0;
 $383 = sp + 21056 | 0;
 $384 = sp + 42872 | 0;
 $385 = sp + 21040 | 0;
 $386 = sp + 42864 | 0;
 $387 = sp + 21024 | 0;
 $388 = sp + 42856 | 0;
 $389 = sp + 21008 | 0;
 $390 = sp + 42848 | 0;
 $391 = sp + 20992 | 0;
 $392 = sp + 42840 | 0;
 $393 = sp + 20976 | 0;
 $394 = sp + 42832 | 0;
 $395 = sp + 20960 | 0;
 $396 = sp + 42824 | 0;
 $397 = sp + 20944 | 0;
 $398 = sp + 42816 | 0;
 $399 = sp + 20928 | 0;
 $400 = sp + 42808 | 0;
 $401 = sp + 20912 | 0;
 $402 = sp + 42800 | 0;
 $403 = sp + 20896 | 0;
 $404 = sp + 42792 | 0;
 $405 = sp + 20880 | 0;
 $406 = sp + 42784 | 0;
 $407 = sp + 20864 | 0;
 $408 = sp + 42776 | 0;
 $409 = sp + 20848 | 0;
 $410 = sp + 42768 | 0;
 $411 = sp + 20832 | 0;
 $412 = sp + 42760 | 0;
 $413 = sp + 23452 | 0;
 $414 = sp + 23448 | 0;
 $415 = sp + 23444 | 0;
 $416 = sp + 23440 | 0;
 $417 = sp + 23436 | 0;
 $418 = sp + 23432 | 0;
 $419 = sp + 20816 | 0;
 $420 = sp + 42752 | 0;
 $421 = sp + 20800 | 0;
 $422 = sp + 42744 | 0;
 $423 = sp + 23428 | 0;
 $424 = sp + 20784 | 0;
 $425 = sp + 42736 | 0;
 $426 = sp + 20768 | 0;
 $427 = sp + 42728 | 0;
 $428 = sp + 20752 | 0;
 $429 = sp + 42720 | 0;
 $430 = sp + 20736 | 0;
 $431 = sp + 42712 | 0;
 $432 = sp + 20720 | 0;
 $433 = sp + 42704 | 0;
 $434 = sp + 20704 | 0;
 $435 = sp + 42696 | 0;
 $436 = sp + 20688 | 0;
 $437 = sp + 42688 | 0;
 $438 = sp + 20672 | 0;
 $439 = sp + 42680 | 0;
 $440 = sp + 20656 | 0;
 $441 = sp + 42672 | 0;
 $442 = sp + 20640 | 0;
 $443 = sp + 42664 | 0;
 $444 = sp + 20624 | 0;
 $445 = sp + 42656 | 0;
 $446 = sp + 20608 | 0;
 $447 = sp + 42648 | 0;
 $448 = sp + 20592 | 0;
 $449 = sp + 42640 | 0;
 $450 = sp + 20576 | 0;
 $451 = sp + 42632 | 0;
 $452 = sp + 20560 | 0;
 $453 = sp + 42624 | 0;
 $454 = sp + 20544 | 0;
 $455 = sp + 42616 | 0;
 $456 = sp + 20528 | 0;
 $457 = sp + 42608 | 0;
 $458 = sp + 20512 | 0;
 $459 = sp + 42600 | 0;
 $460 = sp + 20496 | 0;
 $461 = sp + 42592 | 0;
 $462 = sp + 20480 | 0;
 $463 = sp + 42584 | 0;
 $464 = sp + 20464 | 0;
 $465 = sp + 42576 | 0;
 $466 = sp + 20448 | 0;
 $467 = sp + 42568 | 0;
 $468 = sp + 20432 | 0;
 $469 = sp + 42560 | 0;
 $470 = sp + 20416 | 0;
 $471 = sp + 42552 | 0;
 $472 = sp + 20400 | 0;
 $473 = sp + 42544 | 0;
 $474 = sp + 20384 | 0;
 $475 = sp + 42536 | 0;
 $476 = sp + 20368 | 0;
 $477 = sp + 42528 | 0;
 $478 = sp + 20352 | 0;
 $479 = sp + 42520 | 0;
 $480 = sp + 20336 | 0;
 $481 = sp + 42512 | 0;
 $482 = sp + 20320 | 0;
 $483 = sp + 42504 | 0;
 $484 = sp + 20304 | 0;
 $485 = sp + 42496 | 0;
 $486 = sp + 20288 | 0;
 $487 = sp + 42488 | 0;
 $488 = sp + 20272 | 0;
 $489 = sp + 42480 | 0;
 $490 = sp + 20256 | 0;
 $491 = sp + 42472 | 0;
 $492 = sp + 20240 | 0;
 $493 = sp + 42464 | 0;
 $494 = sp + 23424 | 0;
 $495 = sp + 23420 | 0;
 $496 = sp + 23416 | 0;
 $497 = sp + 23412 | 0;
 $498 = sp + 23408 | 0;
 $499 = sp + 23404 | 0;
 $500 = sp + 20224 | 0;
 $501 = sp + 42456 | 0;
 $502 = sp + 20208 | 0;
 $503 = sp + 42448 | 0;
 $504 = sp + 20192 | 0;
 $505 = sp + 42440 | 0;
 $506 = sp + 20176 | 0;
 $507 = sp + 42432 | 0;
 $508 = sp + 20160 | 0;
 $509 = sp + 42424 | 0;
 $510 = sp + 20144 | 0;
 $511 = sp + 42416 | 0;
 $512 = sp + 20128 | 0;
 $513 = sp + 42408 | 0;
 $514 = sp + 20112 | 0;
 $515 = sp + 42400 | 0;
 $516 = sp + 20096 | 0;
 $517 = sp + 42392 | 0;
 $518 = sp + 20080 | 0;
 $519 = sp + 42384 | 0;
 $520 = sp + 20064 | 0;
 $521 = sp + 42376 | 0;
 $522 = sp + 20048 | 0;
 $523 = sp + 42368 | 0;
 $524 = sp + 20032 | 0;
 $525 = sp + 42360 | 0;
 $526 = sp + 20016 | 0;
 $527 = sp + 42352 | 0;
 $528 = sp + 2e4 | 0;
 $529 = sp + 42344 | 0;
 $530 = sp + 19984 | 0;
 $531 = sp + 42336 | 0;
 $532 = sp + 19968 | 0;
 $533 = sp + 42328 | 0;
 $534 = sp + 19952 | 0;
 $535 = sp + 42320 | 0;
 $536 = sp + 19936 | 0;
 $537 = sp + 42312 | 0;
 $538 = sp + 19920 | 0;
 $539 = sp + 42304 | 0;
 $540 = sp + 19904 | 0;
 $541 = sp + 42296 | 0;
 $542 = sp + 19888 | 0;
 $543 = sp + 42288 | 0;
 $544 = sp + 19872 | 0;
 $545 = sp + 42280 | 0;
 $546 = sp + 19856 | 0;
 $547 = sp + 42272 | 0;
 $548 = sp + 19840 | 0;
 $549 = sp + 42264 | 0;
 $550 = sp + 19824 | 0;
 $551 = sp + 42256 | 0;
 $552 = sp + 19808 | 0;
 $553 = sp + 42248 | 0;
 $554 = sp + 19792 | 0;
 $555 = sp + 42240 | 0;
 $556 = sp + 19760 | 0;
 $557 = sp + 42232 | 0;
 $558 = sp + 19744 | 0;
 $559 = sp + 42224 | 0;
 $560 = sp + 19728 | 0;
 $561 = sp + 42216 | 0;
 $562 = sp + 19712 | 0;
 $563 = sp + 42208 | 0;
 $564 = sp + 19696 | 0;
 $565 = sp + 42200 | 0;
 $566 = sp + 19680 | 0;
 $567 = sp + 42192 | 0;
 $568 = sp + 19664 | 0;
 $569 = sp + 42184 | 0;
 $570 = sp + 19648 | 0;
 $571 = sp + 42176 | 0;
 $572 = sp + 19632 | 0;
 $573 = sp + 42168 | 0;
 $574 = sp + 19616 | 0;
 $575 = sp + 42160 | 0;
 $576 = sp + 19600 | 0;
 $577 = sp + 42152 | 0;
 $578 = sp + 19584 | 0;
 $579 = sp + 42144 | 0;
 $580 = sp + 19568 | 0;
 $581 = sp + 42136 | 0;
 $582 = sp + 19552 | 0;
 $583 = sp + 42128 | 0;
 $584 = sp + 19536 | 0;
 $585 = sp + 42120 | 0;
 $586 = sp + 19520 | 0;
 $587 = sp + 42112 | 0;
 $588 = sp + 19504 | 0;
 $589 = sp + 42104 | 0;
 $590 = sp + 19488 | 0;
 $591 = sp + 42096 | 0;
 $592 = sp + 19472 | 0;
 $593 = sp + 42088 | 0;
 $594 = sp + 19456 | 0;
 $595 = sp + 42080 | 0;
 $596 = sp + 19440 | 0;
 $597 = sp + 42072 | 0;
 $598 = sp + 19424 | 0;
 $599 = sp + 42064 | 0;
 $600 = sp + 19408 | 0;
 $601 = sp + 42056 | 0;
 $602 = sp + 19392 | 0;
 $603 = sp + 42048 | 0;
 $604 = sp + 19376 | 0;
 $605 = sp + 42040 | 0;
 $606 = sp + 19360 | 0;
 $607 = sp + 42032 | 0;
 $608 = sp + 19344 | 0;
 $609 = sp + 42024 | 0;
 $610 = sp + 19328 | 0;
 $611 = sp + 42016 | 0;
 $612 = sp + 19312 | 0;
 $613 = sp + 42008 | 0;
 $614 = sp + 19296 | 0;
 $615 = sp + 42e3 | 0;
 $616 = sp + 19280 | 0;
 $617 = sp + 41992 | 0;
 $618 = sp + 19264 | 0;
 $619 = sp + 41984 | 0;
 $620 = sp + 19248 | 0;
 $621 = sp + 41976 | 0;
 $622 = sp + 19232 | 0;
 $623 = sp + 41968 | 0;
 $624 = sp + 19216 | 0;
 $625 = sp + 41960 | 0;
 $626 = sp + 19200 | 0;
 $627 = sp + 41952 | 0;
 $628 = sp + 19184 | 0;
 $629 = sp + 41944 | 0;
 $630 = sp + 19152 | 0;
 $631 = sp + 41936 | 0;
 $632 = sp + 19136 | 0;
 $633 = sp + 41928 | 0;
 $634 = sp + 19120 | 0;
 $635 = sp + 41920 | 0;
 $636 = sp + 19104 | 0;
 $637 = sp + 41912 | 0;
 $638 = sp + 19088 | 0;
 $639 = sp + 41904 | 0;
 $640 = sp + 19072 | 0;
 $641 = sp + 41896 | 0;
 $642 = sp + 19056 | 0;
 $643 = sp + 41888 | 0;
 $644 = sp + 19040 | 0;
 $645 = sp + 41880 | 0;
 $646 = sp + 19024 | 0;
 $647 = sp + 41872 | 0;
 $648 = sp + 19008 | 0;
 $649 = sp + 41864 | 0;
 $650 = sp + 18992 | 0;
 $651 = sp + 41856 | 0;
 $652 = sp + 18976 | 0;
 $653 = sp + 41848 | 0;
 $654 = sp + 18960 | 0;
 $655 = sp + 41840 | 0;
 $656 = sp + 18944 | 0;
 $657 = sp + 41832 | 0;
 $658 = sp + 18928 | 0;
 $659 = sp + 41824 | 0;
 $660 = sp + 18896 | 0;
 $661 = sp + 41816 | 0;
 $662 = sp + 18880 | 0;
 $663 = sp + 41808 | 0;
 $664 = sp + 18864 | 0;
 $665 = sp + 41800 | 0;
 $666 = sp + 18848 | 0;
 $667 = sp + 41792 | 0;
 $668 = sp + 18832 | 0;
 $669 = sp + 41784 | 0;
 $670 = sp + 18816 | 0;
 $671 = sp + 41776 | 0;
 $672 = sp + 18800 | 0;
 $673 = sp + 41768 | 0;
 $674 = sp + 18784 | 0;
 $675 = sp + 41760 | 0;
 $676 = sp + 18768 | 0;
 $677 = sp + 41752 | 0;
 $678 = sp + 18752 | 0;
 $679 = sp + 41744 | 0;
 $680 = sp + 18736 | 0;
 $681 = sp + 41736 | 0;
 $682 = sp + 18720 | 0;
 $683 = sp + 41728 | 0;
 $684 = sp + 18704 | 0;
 $685 = sp + 41720 | 0;
 $686 = sp + 18688 | 0;
 $687 = sp + 41712 | 0;
 $688 = sp + 18672 | 0;
 $689 = sp + 41704 | 0;
 $690 = sp + 18656 | 0;
 $691 = sp + 41696 | 0;
 $692 = sp + 18640 | 0;
 $693 = sp + 41688 | 0;
 $694 = sp + 18624 | 0;
 $695 = sp + 41680 | 0;
 $696 = sp + 18608 | 0;
 $697 = sp + 41672 | 0;
 $698 = sp + 18592 | 0;
 $699 = sp + 41664 | 0;
 $700 = sp + 18576 | 0;
 $701 = sp + 41656 | 0;
 $702 = sp + 18560 | 0;
 $703 = sp + 41648 | 0;
 $704 = sp + 18544 | 0;
 $705 = sp + 41640 | 0;
 $706 = sp + 18528 | 0;
 $707 = sp + 41632 | 0;
 $708 = sp + 18512 | 0;
 $709 = sp + 41624 | 0;
 $710 = sp + 18496 | 0;
 $711 = sp + 41616 | 0;
 $712 = sp + 18480 | 0;
 $713 = sp + 41608 | 0;
 $714 = sp + 18464 | 0;
 $715 = sp + 41600 | 0;
 $716 = sp + 18448 | 0;
 $717 = sp + 41592 | 0;
 $718 = sp + 18432 | 0;
 $719 = sp + 41584 | 0;
 $720 = sp + 18416 | 0;
 $721 = sp + 41576 | 0;
 $722 = sp + 18400 | 0;
 $723 = sp + 41568 | 0;
 $724 = sp + 18384 | 0;
 $725 = sp + 41560 | 0;
 $726 = sp + 18368 | 0;
 $727 = sp + 41552 | 0;
 $728 = sp + 18352 | 0;
 $729 = sp + 41544 | 0;
 $730 = sp + 18336 | 0;
 $731 = sp + 41536 | 0;
 $732 = sp + 18320 | 0;
 $733 = sp + 41528 | 0;
 $734 = sp + 18304 | 0;
 $735 = sp + 41520 | 0;
 $736 = sp + 18288 | 0;
 $737 = sp + 41512 | 0;
 $738 = sp + 18272 | 0;
 $739 = sp + 41504 | 0;
 $740 = sp + 18256 | 0;
 $741 = sp + 41496 | 0;
 $742 = sp + 18240 | 0;
 $743 = sp + 41488 | 0;
 $744 = sp + 18224 | 0;
 $745 = sp + 41480 | 0;
 $746 = sp + 18208 | 0;
 $747 = sp + 41472 | 0;
 $748 = sp + 18192 | 0;
 $749 = sp + 41464 | 0;
 $750 = sp + 18176 | 0;
 $751 = sp + 41456 | 0;
 $752 = sp + 18160 | 0;
 $753 = sp + 41448 | 0;
 $754 = sp + 18144 | 0;
 $755 = sp + 41440 | 0;
 $756 = sp + 18128 | 0;
 $757 = sp + 41432 | 0;
 $758 = sp + 18112 | 0;
 $759 = sp + 41424 | 0;
 $760 = sp + 18096 | 0;
 $761 = sp + 41416 | 0;
 $762 = sp + 18080 | 0;
 $763 = sp + 41408 | 0;
 $764 = sp + 18064 | 0;
 $765 = sp + 41400 | 0;
 $766 = sp + 18048 | 0;
 $767 = sp + 41392 | 0;
 $768 = sp + 18032 | 0;
 $769 = sp + 41384 | 0;
 $770 = sp + 18016 | 0;
 $771 = sp + 41376 | 0;
 $772 = sp + 18e3 | 0;
 $773 = sp + 41368 | 0;
 $774 = sp + 17984 | 0;
 $775 = sp + 41360 | 0;
 $776 = sp + 17968 | 0;
 $777 = sp + 41352 | 0;
 $778 = sp + 17952 | 0;
 $779 = sp + 41344 | 0;
 $780 = sp + 17936 | 0;
 $781 = sp + 41336 | 0;
 $782 = sp + 17920 | 0;
 $783 = sp + 41328 | 0;
 $784 = sp + 17904 | 0;
 $785 = sp + 41320 | 0;
 $786 = sp + 17888 | 0;
 $787 = sp + 41312 | 0;
 $788 = sp + 17872 | 0;
 $789 = sp + 41304 | 0;
 $790 = sp + 17856 | 0;
 $791 = sp + 41296 | 0;
 $792 = sp + 17840 | 0;
 $793 = sp + 41288 | 0;
 $794 = sp + 17824 | 0;
 $795 = sp + 41280 | 0;
 $796 = sp + 17808 | 0;
 $797 = sp + 41272 | 0;
 $798 = sp + 17792 | 0;
 $799 = sp + 41264 | 0;
 $800 = sp + 17776 | 0;
 $801 = sp + 41256 | 0;
 $802 = sp + 17760 | 0;
 $803 = sp + 41248 | 0;
 $804 = sp + 17744 | 0;
 $805 = sp + 41240 | 0;
 $806 = sp + 17728 | 0;
 $807 = sp + 41232 | 0;
 $808 = sp + 17712 | 0;
 $809 = sp + 41224 | 0;
 $810 = sp + 17696 | 0;
 $811 = sp + 41216 | 0;
 $812 = sp + 17680 | 0;
 $813 = sp + 41208 | 0;
 $814 = sp + 17664 | 0;
 $815 = sp + 41200 | 0;
 $816 = sp + 17648 | 0;
 $817 = sp + 41192 | 0;
 $818 = sp + 17632 | 0;
 $819 = sp + 41184 | 0;
 $820 = sp + 17616 | 0;
 $821 = sp + 41176 | 0;
 $822 = sp + 17600 | 0;
 $823 = sp + 41168 | 0;
 $824 = sp + 17584 | 0;
 $825 = sp + 41160 | 0;
 $826 = sp + 23400 | 0;
 $827 = sp + 23396 | 0;
 $828 = sp + 23392 | 0;
 $829 = sp + 23388 | 0;
 $830 = sp + 23384 | 0;
 $831 = sp + 23380 | 0;
 $832 = sp + 23376 | 0;
 $833 = sp + 23372 | 0;
 $834 = sp + 23368 | 0;
 $835 = sp + 23364 | 0;
 $836 = sp + 23360 | 0;
 $837 = sp + 23356 | 0;
 $838 = sp + 23352 | 0;
 $839 = sp + 23348 | 0;
 $840 = sp + 23344 | 0;
 $841 = sp + 23340 | 0;
 $842 = sp + 23336 | 0;
 $843 = sp + 23332 | 0;
 $844 = sp + 23328 | 0;
 $845 = sp + 23324 | 0;
 $846 = sp + 23320 | 0;
 $847 = sp + 23316 | 0;
 $848 = sp + 23312 | 0;
 $849 = sp + 17568 | 0;
 $850 = sp + 41152 | 0;
 $851 = sp + 17552 | 0;
 $852 = sp + 41144 | 0;
 $853 = sp + 17536 | 0;
 $854 = sp + 41136 | 0;
 $855 = sp + 23308 | 0;
 $856 = sp + 23304 | 0;
 $857 = sp + 17520 | 0;
 $858 = sp + 41128 | 0;
 $859 = sp + 17488 | 0;
 $860 = sp + 41120 | 0;
 $861 = sp + 17472 | 0;
 $862 = sp + 41112 | 0;
 $863 = sp + 17456 | 0;
 $864 = sp + 41104 | 0;
 $865 = sp + 17440 | 0;
 $866 = sp + 41096 | 0;
 $867 = sp + 17424 | 0;
 $868 = sp + 41088 | 0;
 $869 = sp + 17408 | 0;
 $870 = sp + 41080 | 0;
 $871 = sp + 17392 | 0;
 $872 = sp + 41072 | 0;
 $873 = sp + 17376 | 0;
 $874 = sp + 41064 | 0;
 $875 = sp + 17360 | 0;
 $876 = sp + 41056 | 0;
 $877 = sp + 17344 | 0;
 $878 = sp + 41048 | 0;
 $879 = sp + 17328 | 0;
 $880 = sp + 41040 | 0;
 $881 = sp + 17312 | 0;
 $882 = sp + 41032 | 0;
 $883 = sp + 17296 | 0;
 $884 = sp + 41024 | 0;
 $885 = sp + 17280 | 0;
 $886 = sp + 41016 | 0;
 $887 = sp + 17264 | 0;
 $888 = sp + 41008 | 0;
 $889 = sp + 17248 | 0;
 $890 = sp + 41e3 | 0;
 $891 = sp + 17232 | 0;
 $892 = sp + 40992 | 0;
 $893 = sp + 17216 | 0;
 $894 = sp + 40984 | 0;
 $895 = sp + 17200 | 0;
 $896 = sp + 40976 | 0;
 $897 = sp + 17184 | 0;
 $898 = sp + 40968 | 0;
 $899 = sp + 17168 | 0;
 $900 = sp + 40960 | 0;
 $901 = sp + 17152 | 0;
 $902 = sp + 40952 | 0;
 $903 = sp + 17136 | 0;
 $904 = sp + 40944 | 0;
 $905 = sp + 17104 | 0;
 $906 = sp + 40936 | 0;
 $907 = sp + 17088 | 0;
 $908 = sp + 40928 | 0;
 $909 = sp + 17072 | 0;
 $910 = sp + 40920 | 0;
 $911 = sp + 17056 | 0;
 $912 = sp + 40912 | 0;
 $913 = sp + 17040 | 0;
 $914 = sp + 40904 | 0;
 $915 = sp + 17024 | 0;
 $916 = sp + 40896 | 0;
 $917 = sp + 17008 | 0;
 $918 = sp + 40888 | 0;
 $919 = sp + 16992 | 0;
 $920 = sp + 40880 | 0;
 $921 = sp + 16976 | 0;
 $922 = sp + 40872 | 0;
 $923 = sp + 16960 | 0;
 $924 = sp + 40864 | 0;
 $925 = sp + 16944 | 0;
 $926 = sp + 40856 | 0;
 $927 = sp + 16928 | 0;
 $928 = sp + 40848 | 0;
 $929 = sp + 16912 | 0;
 $930 = sp + 40840 | 0;
 $931 = sp + 16896 | 0;
 $932 = sp + 40832 | 0;
 $933 = sp + 16880 | 0;
 $934 = sp + 40824 | 0;
 $935 = sp + 16864 | 0;
 $936 = sp + 40816 | 0;
 $937 = sp + 16848 | 0;
 $938 = sp + 40808 | 0;
 $939 = sp + 16832 | 0;
 $940 = sp + 40800 | 0;
 $941 = sp + 16816 | 0;
 $942 = sp + 40792 | 0;
 $943 = sp + 16800 | 0;
 $944 = sp + 40784 | 0;
 $945 = sp + 16784 | 0;
 $946 = sp + 40776 | 0;
 $947 = sp + 16768 | 0;
 $948 = sp + 40768 | 0;
 $949 = sp + 16752 | 0;
 $950 = sp + 40760 | 0;
 $951 = sp + 16736 | 0;
 $952 = sp + 40752 | 0;
 $953 = sp + 16720 | 0;
 $954 = sp + 40744 | 0;
 $955 = sp + 16704 | 0;
 $956 = sp + 40736 | 0;
 $957 = sp + 16688 | 0;
 $958 = sp + 40728 | 0;
 $959 = sp + 16672 | 0;
 $960 = sp + 40720 | 0;
 $961 = sp + 16656 | 0;
 $962 = sp + 40712 | 0;
 $963 = sp + 16640 | 0;
 $964 = sp + 40704 | 0;
 $965 = sp + 16624 | 0;
 $966 = sp + 40696 | 0;
 $967 = sp + 16608 | 0;
 $968 = sp + 40688 | 0;
 $969 = sp + 16592 | 0;
 $970 = sp + 40680 | 0;
 $971 = sp + 16576 | 0;
 $972 = sp + 40672 | 0;
 $973 = sp + 16560 | 0;
 $974 = sp + 40664 | 0;
 $975 = sp + 16544 | 0;
 $976 = sp + 40656 | 0;
 $977 = sp + 16528 | 0;
 $978 = sp + 40648 | 0;
 $979 = sp + 16512 | 0;
 $980 = sp + 40640 | 0;
 $981 = sp + 16496 | 0;
 $982 = sp + 40632 | 0;
 $983 = sp + 16480 | 0;
 $984 = sp + 40624 | 0;
 $985 = sp + 16464 | 0;
 $986 = sp + 40616 | 0;
 $987 = sp + 16448 | 0;
 $988 = sp + 40608 | 0;
 $989 = sp + 16432 | 0;
 $990 = sp + 40600 | 0;
 $991 = sp + 16416 | 0;
 $992 = sp + 40592 | 0;
 $993 = sp + 16400 | 0;
 $994 = sp + 40584 | 0;
 $995 = sp + 16384 | 0;
 $996 = sp + 40576 | 0;
 $997 = sp + 16368 | 0;
 $998 = sp + 40568 | 0;
 $999 = sp + 16352 | 0;
 $1000 = sp + 40560 | 0;
 $1001 = sp + 16336 | 0;
 $1002 = sp + 40552 | 0;
 $1003 = sp + 16320 | 0;
 $1004 = sp + 40544 | 0;
 $1005 = sp + 16304 | 0;
 $1006 = sp + 40536 | 0;
 $1007 = sp + 16288 | 0;
 $1008 = sp + 40528 | 0;
 $1009 = sp + 16272 | 0;
 $1010 = sp + 40520 | 0;
 $1011 = sp + 16256 | 0;
 $1012 = sp + 40512 | 0;
 $1013 = sp + 16240 | 0;
 $1014 = sp + 40504 | 0;
 $1015 = sp + 16224 | 0;
 $1016 = sp + 40496 | 0;
 $1017 = sp + 16208 | 0;
 $1018 = sp + 40488 | 0;
 $1019 = sp + 16192 | 0;
 $1020 = sp + 40480 | 0;
 $1021 = sp + 16176 | 0;
 $1022 = sp + 40472 | 0;
 $1023 = sp + 16160 | 0;
 $1024 = sp + 40464 | 0;
 $1025 = sp + 16144 | 0;
 $1026 = sp + 40456 | 0;
 $1027 = sp + 16128 | 0;
 $1028 = sp + 40448 | 0;
 $1029 = sp + 16112 | 0;
 $1030 = sp + 40440 | 0;
 $1031 = sp + 16096 | 0;
 $1032 = sp + 40432 | 0;
 $1033 = sp + 16080 | 0;
 $1034 = sp + 40424 | 0;
 $1035 = sp + 16064 | 0;
 $1036 = sp + 40416 | 0;
 $1037 = sp + 16048 | 0;
 $1038 = sp + 40408 | 0;
 $1039 = sp + 16032 | 0;
 $1040 = sp + 40400 | 0;
 $1041 = sp + 16016 | 0;
 $1042 = sp + 40392 | 0;
 $1043 = sp + 16e3 | 0;
 $1044 = sp + 40384 | 0;
 $1045 = sp + 15984 | 0;
 $1046 = sp + 40376 | 0;
 $1047 = sp + 15968 | 0;
 $1048 = sp + 40368 | 0;
 $1049 = sp + 15952 | 0;
 $1050 = sp + 40360 | 0;
 $1051 = sp + 15936 | 0;
 $1052 = sp + 40352 | 0;
 $1053 = sp + 15920 | 0;
 $1054 = sp + 40344 | 0;
 $1055 = sp + 15904 | 0;
 $1056 = sp + 40336 | 0;
 $1057 = sp + 15888 | 0;
 $1058 = sp + 40328 | 0;
 $1059 = sp + 15872 | 0;
 $1060 = sp + 40320 | 0;
 $1061 = sp + 15856 | 0;
 $1062 = sp + 40312 | 0;
 $1063 = sp + 15840 | 0;
 $1064 = sp + 40304 | 0;
 $1065 = sp + 15824 | 0;
 $1066 = sp + 40296 | 0;
 $1067 = sp + 15808 | 0;
 $1068 = sp + 40288 | 0;
 $1069 = sp + 15792 | 0;
 $1070 = sp + 40280 | 0;
 $1071 = sp + 15776 | 0;
 $1072 = sp + 40272 | 0;
 $1073 = sp + 15760 | 0;
 $1074 = sp + 40264 | 0;
 $1075 = sp + 15744 | 0;
 $1076 = sp + 40256 | 0;
 $1077 = sp + 15728 | 0;
 $1078 = sp + 40248 | 0;
 $1079 = sp + 15712 | 0;
 $1080 = sp + 40240 | 0;
 $1081 = sp + 15696 | 0;
 $1082 = sp + 40232 | 0;
 $1083 = sp + 15680 | 0;
 $1084 = sp + 40224 | 0;
 $1085 = sp + 15664 | 0;
 $1086 = sp + 40216 | 0;
 $1087 = sp + 15648 | 0;
 $1088 = sp + 40208 | 0;
 $1089 = sp + 15632 | 0;
 $1090 = sp + 40200 | 0;
 $1091 = sp + 15616 | 0;
 $1092 = sp + 40192 | 0;
 $1093 = sp + 15600 | 0;
 $1094 = sp + 40184 | 0;
 $1095 = sp + 15584 | 0;
 $1096 = sp + 40176 | 0;
 $1097 = sp + 15568 | 0;
 $1098 = sp + 40168 | 0;
 $1099 = sp + 15552 | 0;
 $1100 = sp + 40160 | 0;
 $1101 = sp + 15536 | 0;
 $1102 = sp + 40152 | 0;
 $1103 = sp + 15520 | 0;
 $1104 = sp + 40144 | 0;
 $1105 = sp + 15504 | 0;
 $1106 = sp + 40136 | 0;
 $1107 = sp + 15488 | 0;
 $1108 = sp + 40128 | 0;
 $1109 = sp + 15472 | 0;
 $1110 = sp + 40120 | 0;
 $1111 = sp + 15456 | 0;
 $1112 = sp + 40112 | 0;
 $1113 = sp + 15440 | 0;
 $1114 = sp + 40104 | 0;
 $1115 = sp + 15424 | 0;
 $1116 = sp + 40096 | 0;
 $1117 = sp + 15408 | 0;
 $1118 = sp + 40088 | 0;
 $1119 = sp + 15392 | 0;
 $1120 = sp + 40080 | 0;
 $1121 = sp + 15376 | 0;
 $1122 = sp + 40072 | 0;
 $1123 = sp + 15360 | 0;
 $1124 = sp + 40064 | 0;
 $1125 = sp + 15344 | 0;
 $1126 = sp + 40056 | 0;
 $1127 = sp + 15328 | 0;
 $1128 = sp + 40048 | 0;
 $1129 = sp + 15312 | 0;
 $1130 = sp + 40040 | 0;
 $1131 = sp + 15296 | 0;
 $1132 = sp + 40032 | 0;
 $1133 = sp + 15280 | 0;
 $1134 = sp + 40024 | 0;
 $1135 = sp + 15264 | 0;
 $1136 = sp + 40016 | 0;
 $1137 = sp + 15248 | 0;
 $1138 = sp + 40008 | 0;
 $1139 = sp + 15232 | 0;
 $1140 = sp + 4e4 | 0;
 $1141 = sp + 15216 | 0;
 $1142 = sp + 39992 | 0;
 $1143 = sp + 15200 | 0;
 $1144 = sp + 39984 | 0;
 $1145 = sp + 15184 | 0;
 $1146 = sp + 39976 | 0;
 $1147 = sp + 15168 | 0;
 $1148 = sp + 39968 | 0;
 $1149 = sp + 15152 | 0;
 $1150 = sp + 39960 | 0;
 $1151 = sp + 15136 | 0;
 $1152 = sp + 39952 | 0;
 $1153 = sp + 15120 | 0;
 $1154 = sp + 39944 | 0;
 $1155 = sp + 15104 | 0;
 $1156 = sp + 39936 | 0;
 $1157 = sp + 15088 | 0;
 $1158 = sp + 39928 | 0;
 $1159 = sp + 15072 | 0;
 $1160 = sp + 39920 | 0;
 $1161 = sp + 15056 | 0;
 $1162 = sp + 39912 | 0;
 $1163 = sp + 15040 | 0;
 $1164 = sp + 39904 | 0;
 $1165 = sp + 15024 | 0;
 $1166 = sp + 39896 | 0;
 $1167 = sp + 15008 | 0;
 $1168 = sp + 39888 | 0;
 $1169 = sp + 14992 | 0;
 $1170 = sp + 39880 | 0;
 $1171 = sp + 14976 | 0;
 $1172 = sp + 39872 | 0;
 $1173 = sp + 14960 | 0;
 $1174 = sp + 39864 | 0;
 $1175 = sp + 14944 | 0;
 $1176 = sp + 39856 | 0;
 $1177 = sp + 14928 | 0;
 $1178 = sp + 39848 | 0;
 $1179 = sp + 14912 | 0;
 $1180 = sp + 39840 | 0;
 $1181 = sp + 14896 | 0;
 $1182 = sp + 39832 | 0;
 $1183 = sp + 14880 | 0;
 $1184 = sp + 39824 | 0;
 $1185 = sp + 14864 | 0;
 $1186 = sp + 39816 | 0;
 $1187 = sp + 14848 | 0;
 $1188 = sp + 39808 | 0;
 $1189 = sp + 14832 | 0;
 $1190 = sp + 39800 | 0;
 $1191 = sp + 14816 | 0;
 $1192 = sp + 39792 | 0;
 $1193 = sp + 14800 | 0;
 $1194 = sp + 39784 | 0;
 $1195 = sp + 14784 | 0;
 $1196 = sp + 39776 | 0;
 $1197 = sp + 14768 | 0;
 $1198 = sp + 39768 | 0;
 $1199 = sp + 14752 | 0;
 $1200 = sp + 39760 | 0;
 $1201 = sp + 14736 | 0;
 $1202 = sp + 39752 | 0;
 $1203 = sp + 14720 | 0;
 $1204 = sp + 39744 | 0;
 $1205 = sp + 14704 | 0;
 $1206 = sp + 39736 | 0;
 $1207 = sp + 14688 | 0;
 $1208 = sp + 39728 | 0;
 $1209 = sp + 14672 | 0;
 $1210 = sp + 39720 | 0;
 $1211 = sp + 14656 | 0;
 $1212 = sp + 39712 | 0;
 $1213 = sp + 14640 | 0;
 $1214 = sp + 39704 | 0;
 $1215 = sp + 14624 | 0;
 $1216 = sp + 39696 | 0;
 $1217 = sp + 14608 | 0;
 $1218 = sp + 39688 | 0;
 $1219 = sp + 14592 | 0;
 $1220 = sp + 39680 | 0;
 $1221 = sp + 14576 | 0;
 $1222 = sp + 39672 | 0;
 $1223 = sp + 14560 | 0;
 $1224 = sp + 39664 | 0;
 $1225 = sp + 14544 | 0;
 $1226 = sp + 39656 | 0;
 $1227 = sp + 14528 | 0;
 $1228 = sp + 39648 | 0;
 $1229 = sp + 14512 | 0;
 $1230 = sp + 39640 | 0;
 $1231 = sp + 14496 | 0;
 $1232 = sp + 39632 | 0;
 $1233 = sp + 14480 | 0;
 $1234 = sp + 39624 | 0;
 $1235 = sp + 14464 | 0;
 $1236 = sp + 39616 | 0;
 $1237 = sp + 14448 | 0;
 $1238 = sp + 39608 | 0;
 $1239 = sp + 14432 | 0;
 $1240 = sp + 39600 | 0;
 $1241 = sp + 14416 | 0;
 $1242 = sp + 39592 | 0;
 $1243 = sp + 14400 | 0;
 $1244 = sp + 39584 | 0;
 $1245 = sp + 14384 | 0;
 $1246 = sp + 39576 | 0;
 $1247 = sp + 14368 | 0;
 $1248 = sp + 39568 | 0;
 $1249 = sp + 14352 | 0;
 $1250 = sp + 39560 | 0;
 $1251 = sp + 14336 | 0;
 $1252 = sp + 39552 | 0;
 $1253 = sp + 14320 | 0;
 $1254 = sp + 39544 | 0;
 $1255 = sp + 14304 | 0;
 $1256 = sp + 39536 | 0;
 $1257 = sp + 14288 | 0;
 $1258 = sp + 39528 | 0;
 $1259 = sp + 14272 | 0;
 $1260 = sp + 39520 | 0;
 $1261 = sp + 14256 | 0;
 $1262 = sp + 39512 | 0;
 $1263 = sp + 14240 | 0;
 $1264 = sp + 39504 | 0;
 $1265 = sp + 14224 | 0;
 $1266 = sp + 39496 | 0;
 $1267 = sp + 14208 | 0;
 $1268 = sp + 39488 | 0;
 $1269 = sp + 14192 | 0;
 $1270 = sp + 39480 | 0;
 $1271 = sp + 14176 | 0;
 $1272 = sp + 39472 | 0;
 $1273 = sp + 14160 | 0;
 $1274 = sp + 39464 | 0;
 $1275 = sp + 14144 | 0;
 $1276 = sp + 39456 | 0;
 $1277 = sp + 14128 | 0;
 $1278 = sp + 39448 | 0;
 $1279 = sp + 14112 | 0;
 $1280 = sp + 39440 | 0;
 $1281 = sp + 14096 | 0;
 $1282 = sp + 39432 | 0;
 $1283 = sp + 14080 | 0;
 $1284 = sp + 39424 | 0;
 $1285 = sp + 14064 | 0;
 $1286 = sp + 39416 | 0;
 $1287 = sp + 14048 | 0;
 $1288 = sp + 39408 | 0;
 $1289 = sp + 14032 | 0;
 $1290 = sp + 39400 | 0;
 $1291 = sp + 14016 | 0;
 $1292 = sp + 39392 | 0;
 $1293 = sp + 14e3 | 0;
 $1294 = sp + 39384 | 0;
 $1295 = sp + 13984 | 0;
 $1296 = sp + 39376 | 0;
 $1297 = sp + 13968 | 0;
 $1298 = sp + 39368 | 0;
 $1299 = sp + 13952 | 0;
 $1300 = sp + 39360 | 0;
 $1301 = sp + 13936 | 0;
 $1302 = sp + 39352 | 0;
 $1303 = sp + 13920 | 0;
 $1304 = sp + 39344 | 0;
 $1305 = sp + 13904 | 0;
 $1306 = sp + 39336 | 0;
 $1307 = sp + 13888 | 0;
 $1308 = sp + 39328 | 0;
 $1309 = sp + 13872 | 0;
 $1310 = sp + 39320 | 0;
 $1311 = sp + 13856 | 0;
 $1312 = sp + 39312 | 0;
 $1313 = sp + 13840 | 0;
 $1314 = sp + 39304 | 0;
 $1315 = sp + 13824 | 0;
 $1316 = sp + 39296 | 0;
 $1317 = sp + 13808 | 0;
 $1318 = sp + 39288 | 0;
 $1319 = sp + 13792 | 0;
 $1320 = sp + 39280 | 0;
 $1321 = sp + 13776 | 0;
 $1322 = sp + 39272 | 0;
 $1323 = sp + 13760 | 0;
 $1324 = sp + 39264 | 0;
 $1325 = sp + 13744 | 0;
 $1326 = sp + 39256 | 0;
 $1327 = sp + 13728 | 0;
 $1328 = sp + 39248 | 0;
 $1329 = sp + 13712 | 0;
 $1330 = sp + 39240 | 0;
 $1331 = sp + 13696 | 0;
 $1332 = sp + 39232 | 0;
 $1333 = sp + 13680 | 0;
 $1334 = sp + 39224 | 0;
 $1335 = sp + 13664 | 0;
 $1336 = sp + 39216 | 0;
 $1337 = sp + 13648 | 0;
 $1338 = sp + 39208 | 0;
 $1339 = sp + 13632 | 0;
 $1340 = sp + 39200 | 0;
 $1341 = sp + 13616 | 0;
 $1342 = sp + 39192 | 0;
 $1343 = sp + 13600 | 0;
 $1344 = sp + 39184 | 0;
 $1345 = sp + 13584 | 0;
 $1346 = sp + 39176 | 0;
 $1347 = sp + 13568 | 0;
 $1348 = sp + 39168 | 0;
 $1349 = sp + 13552 | 0;
 $1350 = sp + 39160 | 0;
 $1351 = sp + 13536 | 0;
 $1352 = sp + 39152 | 0;
 $1353 = sp + 13520 | 0;
 $1354 = sp + 39144 | 0;
 $1355 = sp + 13504 | 0;
 $1356 = sp + 39136 | 0;
 $1357 = sp + 13488 | 0;
 $1358 = sp + 39128 | 0;
 $1359 = sp + 13472 | 0;
 $1360 = sp + 39120 | 0;
 $1361 = sp + 13456 | 0;
 $1362 = sp + 39112 | 0;
 $1363 = sp + 13440 | 0;
 $1364 = sp + 39104 | 0;
 $1365 = sp + 13424 | 0;
 $1366 = sp + 39096 | 0;
 $1367 = sp + 13408 | 0;
 $1368 = sp + 39088 | 0;
 $1369 = sp + 13392 | 0;
 $1370 = sp + 39080 | 0;
 $1371 = sp + 13376 | 0;
 $1372 = sp + 39072 | 0;
 $1373 = sp + 13360 | 0;
 $1374 = sp + 39064 | 0;
 $1375 = sp + 13344 | 0;
 $1376 = sp + 39056 | 0;
 $1377 = sp + 13328 | 0;
 $1378 = sp + 39048 | 0;
 $1379 = sp + 13312 | 0;
 $1380 = sp + 39040 | 0;
 $1381 = sp + 13296 | 0;
 $1382 = sp + 39032 | 0;
 $1383 = sp + 13280 | 0;
 $1384 = sp + 39024 | 0;
 $1385 = sp + 13264 | 0;
 $1386 = sp + 39016 | 0;
 $1387 = sp + 13248 | 0;
 $1388 = sp + 39008 | 0;
 $1389 = sp + 13232 | 0;
 $1390 = sp + 39e3 | 0;
 $1391 = sp + 13216 | 0;
 $1392 = sp + 38992 | 0;
 $1393 = sp + 13200 | 0;
 $1394 = sp + 38984 | 0;
 $1395 = sp + 13184 | 0;
 $1396 = sp + 38976 | 0;
 $1397 = sp + 13168 | 0;
 $1398 = sp + 38968 | 0;
 $1399 = sp + 13152 | 0;
 $1400 = sp + 38960 | 0;
 $1401 = sp + 13136 | 0;
 $1402 = sp + 38952 | 0;
 $1403 = sp + 13120 | 0;
 $1404 = sp + 38944 | 0;
 $1405 = sp + 13104 | 0;
 $1406 = sp + 38936 | 0;
 $1407 = sp + 13088 | 0;
 $1408 = sp + 38928 | 0;
 $1409 = sp + 13072 | 0;
 $1410 = sp + 38920 | 0;
 $1411 = sp + 13056 | 0;
 $1412 = sp + 38912 | 0;
 $1413 = sp + 13040 | 0;
 $1414 = sp + 38904 | 0;
 $1415 = sp + 13024 | 0;
 $1416 = sp + 38896 | 0;
 $1417 = sp + 13008 | 0;
 $1418 = sp + 38888 | 0;
 $1419 = sp + 12992 | 0;
 $1420 = sp + 38880 | 0;
 $1421 = sp + 12976 | 0;
 $1422 = sp + 38872 | 0;
 $1423 = sp + 12960 | 0;
 $1424 = sp + 38864 | 0;
 $1425 = sp + 12944 | 0;
 $1426 = sp + 38856 | 0;
 $1427 = sp + 12928 | 0;
 $1428 = sp + 38848 | 0;
 $1429 = sp + 12912 | 0;
 $1430 = sp + 38840 | 0;
 $1431 = sp + 12896 | 0;
 $1432 = sp + 38832 | 0;
 $1433 = sp + 12880 | 0;
 $1434 = sp + 38824 | 0;
 $1435 = sp + 12864 | 0;
 $1436 = sp + 38816 | 0;
 $1437 = sp + 12848 | 0;
 $1438 = sp + 38808 | 0;
 $1439 = sp + 12832 | 0;
 $1440 = sp + 38800 | 0;
 $1441 = sp + 12816 | 0;
 $1442 = sp + 38792 | 0;
 $1443 = sp + 12800 | 0;
 $1444 = sp + 38784 | 0;
 $1445 = sp + 12784 | 0;
 $1446 = sp + 38776 | 0;
 $1447 = sp + 12768 | 0;
 $1448 = sp + 38768 | 0;
 $1449 = sp + 12752 | 0;
 $1450 = sp + 38760 | 0;
 $1451 = sp + 12736 | 0;
 $1452 = sp + 38752 | 0;
 $1453 = sp + 12720 | 0;
 $1454 = sp + 38744 | 0;
 $1455 = sp + 12704 | 0;
 $1456 = sp + 38736 | 0;
 $1457 = sp + 12688 | 0;
 $1458 = sp + 38728 | 0;
 $1459 = sp + 12672 | 0;
 $1460 = sp + 38720 | 0;
 $1461 = sp + 12656 | 0;
 $1462 = sp + 38712 | 0;
 $1463 = sp + 12640 | 0;
 $1464 = sp + 38704 | 0;
 $1465 = sp + 12624 | 0;
 $1466 = sp + 38696 | 0;
 $1467 = sp + 12608 | 0;
 $1468 = sp + 38688 | 0;
 $1469 = sp + 12592 | 0;
 $1470 = sp + 38680 | 0;
 $1471 = sp + 12576 | 0;
 $1472 = sp + 38672 | 0;
 $1473 = sp + 12560 | 0;
 $1474 = sp + 38664 | 0;
 $1475 = sp + 12544 | 0;
 $1476 = sp + 38656 | 0;
 $1477 = sp + 12528 | 0;
 $1478 = sp + 38648 | 0;
 $1479 = sp + 12512 | 0;
 $1480 = sp + 38640 | 0;
 $1481 = sp + 12496 | 0;
 $1482 = sp + 38632 | 0;
 $1483 = sp + 12480 | 0;
 $1484 = sp + 38624 | 0;
 $1485 = sp + 12464 | 0;
 $1486 = sp + 38616 | 0;
 $1487 = sp + 12448 | 0;
 $1488 = sp + 38608 | 0;
 $1489 = sp + 12432 | 0;
 $1490 = sp + 38600 | 0;
 $1491 = sp + 12416 | 0;
 $1492 = sp + 38592 | 0;
 $1493 = sp + 12400 | 0;
 $1494 = sp + 38584 | 0;
 $1495 = sp + 12384 | 0;
 $1496 = sp + 38576 | 0;
 $1497 = sp + 12368 | 0;
 $1498 = sp + 38568 | 0;
 $1499 = sp + 12352 | 0;
 $1500 = sp + 38560 | 0;
 $1501 = sp + 12336 | 0;
 $1502 = sp + 38552 | 0;
 $1503 = sp + 12320 | 0;
 $1504 = sp + 38544 | 0;
 $1505 = sp + 12304 | 0;
 $1506 = sp + 38536 | 0;
 $1507 = sp + 12288 | 0;
 $1508 = sp + 38528 | 0;
 $1509 = sp + 12272 | 0;
 $1510 = sp + 38520 | 0;
 $1511 = sp + 12256 | 0;
 $1512 = sp + 38512 | 0;
 $1513 = sp + 12240 | 0;
 $1514 = sp + 38504 | 0;
 $1515 = sp + 12224 | 0;
 $1516 = sp + 38496 | 0;
 $1517 = sp + 12208 | 0;
 $1518 = sp + 38488 | 0;
 $1519 = sp + 12192 | 0;
 $1520 = sp + 38480 | 0;
 $1521 = sp + 12176 | 0;
 $1522 = sp + 38472 | 0;
 $1523 = sp + 12160 | 0;
 $1524 = sp + 38464 | 0;
 $1525 = sp + 12144 | 0;
 $1526 = sp + 38456 | 0;
 $1527 = sp + 12128 | 0;
 $1528 = sp + 38448 | 0;
 $1529 = sp + 12112 | 0;
 $1530 = sp + 38440 | 0;
 $1531 = sp + 12096 | 0;
 $1532 = sp + 38432 | 0;
 $1533 = sp + 12080 | 0;
 $1534 = sp + 38424 | 0;
 $1535 = sp + 12064 | 0;
 $1536 = sp + 38416 | 0;
 $1537 = sp + 12048 | 0;
 $1538 = sp + 38408 | 0;
 $1539 = sp + 12032 | 0;
 $1540 = sp + 38400 | 0;
 $1541 = sp + 12016 | 0;
 $1542 = sp + 38392 | 0;
 $1543 = sp + 12e3 | 0;
 $1544 = sp + 38384 | 0;
 $1545 = sp + 11984 | 0;
 $1546 = sp + 38376 | 0;
 $1547 = sp + 11968 | 0;
 $1548 = sp + 38368 | 0;
 $1549 = sp + 11952 | 0;
 $1550 = sp + 38360 | 0;
 $1551 = sp + 11936 | 0;
 $1552 = sp + 38352 | 0;
 $1553 = sp + 11920 | 0;
 $1554 = sp + 38344 | 0;
 $1555 = sp + 11904 | 0;
 $1556 = sp + 38336 | 0;
 $1557 = sp + 11888 | 0;
 $1558 = sp + 38328 | 0;
 $1559 = sp + 11872 | 0;
 $1560 = sp + 38320 | 0;
 $1561 = sp + 11856 | 0;
 $1562 = sp + 38312 | 0;
 $1563 = sp + 11840 | 0;
 $1564 = sp + 38304 | 0;
 $1565 = sp + 11824 | 0;
 $1566 = sp + 38296 | 0;
 $1567 = sp + 11808 | 0;
 $1568 = sp + 38288 | 0;
 $1569 = sp + 11792 | 0;
 $1570 = sp + 38280 | 0;
 $1571 = sp + 11776 | 0;
 $1572 = sp + 38272 | 0;
 $1573 = sp + 11760 | 0;
 $1574 = sp + 38264 | 0;
 $1575 = sp + 11744 | 0;
 $1576 = sp + 38256 | 0;
 $1577 = sp + 11728 | 0;
 $1578 = sp + 38248 | 0;
 $1579 = sp + 11712 | 0;
 $1580 = sp + 38240 | 0;
 $1581 = sp + 11696 | 0;
 $1582 = sp + 38232 | 0;
 $1583 = sp + 11680 | 0;
 $1584 = sp + 38224 | 0;
 $1585 = sp + 11664 | 0;
 $1586 = sp + 38216 | 0;
 $1587 = sp + 11648 | 0;
 $1588 = sp + 38208 | 0;
 $1589 = sp + 11616 | 0;
 $1590 = sp + 38200 | 0;
 $1591 = sp + 11600 | 0;
 $1592 = sp + 38192 | 0;
 $1593 = sp + 11584 | 0;
 $1594 = sp + 38184 | 0;
 $1595 = sp + 11568 | 0;
 $1596 = sp + 38176 | 0;
 $1597 = sp + 11552 | 0;
 $1598 = sp + 38168 | 0;
 $1599 = sp + 11536 | 0;
 $1600 = sp + 38160 | 0;
 $1601 = sp + 11520 | 0;
 $1602 = sp + 38152 | 0;
 $1603 = sp + 11504 | 0;
 $1604 = sp + 38144 | 0;
 $1605 = sp + 11488 | 0;
 $1606 = sp + 38136 | 0;
 $1607 = sp + 11472 | 0;
 $1608 = sp + 38128 | 0;
 $1609 = sp + 11456 | 0;
 $1610 = sp + 38120 | 0;
 $1611 = sp + 11440 | 0;
 $1612 = sp + 38112 | 0;
 $1613 = sp + 11424 | 0;
 $1614 = sp + 38104 | 0;
 $1615 = sp + 11408 | 0;
 $1616 = sp + 38096 | 0;
 $1617 = sp + 11392 | 0;
 $1618 = sp + 38088 | 0;
 $1619 = sp + 11376 | 0;
 $1620 = sp + 38080 | 0;
 $1621 = sp + 11360 | 0;
 $1622 = sp + 38072 | 0;
 $1623 = sp + 11344 | 0;
 $1624 = sp + 38064 | 0;
 $1625 = sp + 11328 | 0;
 $1626 = sp + 38056 | 0;
 $1627 = sp + 11312 | 0;
 $1628 = sp + 38048 | 0;
 $1629 = sp + 11296 | 0;
 $1630 = sp + 38040 | 0;
 $1631 = sp + 11280 | 0;
 $1632 = sp + 38032 | 0;
 $1633 = sp + 11264 | 0;
 $1634 = sp + 38024 | 0;
 $1635 = sp + 11248 | 0;
 $1636 = sp + 38016 | 0;
 $1637 = sp + 11232 | 0;
 $1638 = sp + 38008 | 0;
 $1639 = sp + 11216 | 0;
 $1640 = sp + 38e3 | 0;
 $1641 = sp + 11200 | 0;
 $1642 = sp + 37992 | 0;
 $1643 = sp + 11184 | 0;
 $1644 = sp + 37984 | 0;
 $1645 = sp + 11168 | 0;
 $1646 = sp + 37976 | 0;
 $1647 = sp + 11152 | 0;
 $1648 = sp + 37968 | 0;
 $1649 = sp + 11136 | 0;
 $1650 = sp + 37960 | 0;
 $1651 = sp + 11120 | 0;
 $1652 = sp + 37952 | 0;
 $1653 = sp + 11104 | 0;
 $1654 = sp + 37944 | 0;
 $1655 = sp + 11088 | 0;
 $1656 = sp + 37936 | 0;
 $1657 = sp + 11072 | 0;
 $1658 = sp + 37928 | 0;
 $1659 = sp + 11056 | 0;
 $1660 = sp + 37920 | 0;
 $1661 = sp + 11040 | 0;
 $1662 = sp + 37912 | 0;
 $1663 = sp + 11024 | 0;
 $1664 = sp + 37904 | 0;
 $1665 = sp + 11008 | 0;
 $1666 = sp + 37896 | 0;
 $1667 = sp + 10992 | 0;
 $1668 = sp + 37888 | 0;
 $1669 = sp + 10976 | 0;
 $1670 = sp + 37880 | 0;
 $1671 = sp + 10960 | 0;
 $1672 = sp + 37872 | 0;
 $1673 = sp + 10944 | 0;
 $1674 = sp + 37864 | 0;
 $1675 = sp + 10928 | 0;
 $1676 = sp + 37856 | 0;
 $1677 = sp + 10912 | 0;
 $1678 = sp + 37848 | 0;
 $1679 = sp + 10896 | 0;
 $1680 = sp + 37840 | 0;
 $1681 = sp + 10880 | 0;
 $1682 = sp + 37832 | 0;
 $1683 = sp + 10864 | 0;
 $1684 = sp + 37824 | 0;
 $1685 = sp + 10848 | 0;
 $1686 = sp + 37816 | 0;
 $1687 = sp + 10832 | 0;
 $1688 = sp + 37808 | 0;
 $1689 = sp + 10816 | 0;
 $1690 = sp + 37800 | 0;
 $1691 = sp + 10800 | 0;
 $1692 = sp + 37792 | 0;
 $1693 = sp + 10784 | 0;
 $1694 = sp + 37784 | 0;
 $1695 = sp + 10768 | 0;
 $1696 = sp + 37776 | 0;
 $1697 = sp + 10752 | 0;
 $1698 = sp + 37768 | 0;
 $1699 = sp + 10736 | 0;
 $1700 = sp + 37760 | 0;
 $1701 = sp + 10720 | 0;
 $1702 = sp + 37752 | 0;
 $1703 = sp + 10704 | 0;
 $1704 = sp + 37744 | 0;
 $1705 = sp + 10688 | 0;
 $1706 = sp + 37736 | 0;
 $1707 = sp + 10672 | 0;
 $1708 = sp + 37728 | 0;
 $1709 = sp + 10656 | 0;
 $1710 = sp + 37720 | 0;
 $1711 = sp + 10640 | 0;
 $1712 = sp + 37712 | 0;
 $1713 = sp + 10624 | 0;
 $1714 = sp + 37704 | 0;
 $1715 = sp + 10608 | 0;
 $1716 = sp + 37696 | 0;
 $1717 = sp + 10592 | 0;
 $1718 = sp + 37688 | 0;
 $1719 = sp + 10576 | 0;
 $1720 = sp + 37680 | 0;
 $1721 = sp + 10560 | 0;
 $1722 = sp + 37672 | 0;
 $1723 = sp + 10544 | 0;
 $1724 = sp + 37664 | 0;
 $1725 = sp + 10528 | 0;
 $1726 = sp + 37656 | 0;
 $1727 = sp + 10512 | 0;
 $1728 = sp + 37648 | 0;
 $1729 = sp + 10496 | 0;
 $1730 = sp + 37640 | 0;
 $1731 = sp + 10480 | 0;
 $1732 = sp + 37632 | 0;
 $1733 = sp + 10464 | 0;
 $1734 = sp + 37624 | 0;
 $1735 = sp + 10448 | 0;
 $1736 = sp + 37616 | 0;
 $1737 = sp + 10432 | 0;
 $1738 = sp + 37608 | 0;
 $1739 = sp + 10416 | 0;
 $1740 = sp + 37600 | 0;
 $1741 = sp + 10400 | 0;
 $1742 = sp + 37592 | 0;
 $1743 = sp + 10384 | 0;
 $1744 = sp + 37584 | 0;
 $1745 = sp + 10368 | 0;
 $1746 = sp + 37576 | 0;
 $1747 = sp + 10352 | 0;
 $1748 = sp + 37568 | 0;
 $1749 = sp + 10336 | 0;
 $1750 = sp + 37560 | 0;
 $1751 = sp + 10320 | 0;
 $1752 = sp + 37552 | 0;
 $1753 = sp + 10304 | 0;
 $1754 = sp + 37544 | 0;
 $1755 = sp + 10288 | 0;
 $1756 = sp + 37536 | 0;
 $1757 = sp + 10272 | 0;
 $1758 = sp + 37528 | 0;
 $1759 = sp + 10256 | 0;
 $1760 = sp + 37520 | 0;
 $1761 = sp + 10240 | 0;
 $1762 = sp + 37512 | 0;
 $1763 = sp + 10224 | 0;
 $1764 = sp + 37504 | 0;
 $1765 = sp + 10208 | 0;
 $1766 = sp + 37496 | 0;
 $1767 = sp + 10192 | 0;
 $1768 = sp + 37488 | 0;
 $1769 = sp + 10176 | 0;
 $1770 = sp + 37480 | 0;
 $1771 = sp + 10160 | 0;
 $1772 = sp + 37472 | 0;
 $1773 = sp + 10144 | 0;
 $1774 = sp + 37464 | 0;
 $1775 = sp + 10128 | 0;
 $1776 = sp + 37456 | 0;
 $1777 = sp + 10112 | 0;
 $1778 = sp + 37448 | 0;
 $1779 = sp + 10096 | 0;
 $1780 = sp + 37440 | 0;
 $1781 = sp + 10080 | 0;
 $1782 = sp + 37432 | 0;
 $1783 = sp + 10064 | 0;
 $1784 = sp + 37424 | 0;
 $1785 = sp + 23300 | 0;
 $1786 = sp + 23296 | 0;
 $1787 = sp + 23292 | 0;
 $1788 = sp + 23288 | 0;
 $1789 = sp + 23284 | 0;
 $1790 = sp + 23280 | 0;
 $1791 = sp + 23276 | 0;
 $1792 = sp + 23272 | 0;
 $1793 = sp + 23268 | 0;
 $1794 = sp + 23264 | 0;
 $1795 = sp + 23260 | 0;
 $1796 = sp + 23256 | 0;
 $1797 = sp + 23252 | 0;
 $1798 = sp + 23248 | 0;
 $1799 = sp + 23244 | 0;
 $1800 = sp + 23240 | 0;
 $1801 = sp + 23236 | 0;
 $1802 = sp + 23232 | 0;
 $1803 = sp + 23228 | 0;
 $1804 = sp + 23224 | 0;
 $1805 = sp + 23220 | 0;
 $1806 = sp + 23216 | 0;
 $1807 = sp + 23212 | 0;
 $1808 = sp + 23208 | 0;
 $1809 = sp + 23204 | 0;
 $1810 = sp + 23200 | 0;
 $1811 = sp + 23196 | 0;
 $1812 = sp + 23192 | 0;
 $1813 = sp + 23188 | 0;
 $1814 = sp + 23184 | 0;
 $1815 = sp + 23180 | 0;
 $1816 = sp + 23176 | 0;
 $1817 = sp + 23172 | 0;
 $1818 = sp + 23168 | 0;
 $1819 = sp + 23164 | 0;
 $1820 = sp + 23160 | 0;
 $1821 = sp + 23156 | 0;
 $1822 = sp + 23152 | 0;
 $1823 = sp + 23148 | 0;
 $1824 = sp + 23144 | 0;
 $1825 = sp + 10048 | 0;
 $1826 = sp + 37416 | 0;
 $1827 = sp + 10032 | 0;
 $1828 = sp + 37408 | 0;
 $1829 = sp + 10016 | 0;
 $1830 = sp + 37400 | 0;
 $1831 = sp + 1e4 | 0;
 $1832 = sp + 37392 | 0;
 $1833 = sp + 9984 | 0;
 $1834 = sp + 37384 | 0;
 $1835 = sp + 9968 | 0;
 $1836 = sp + 37376 | 0;
 $1837 = sp + 9952 | 0;
 $1838 = sp + 37368 | 0;
 $1839 = sp + 9936 | 0;
 $1840 = sp + 37360 | 0;
 $1841 = sp + 9920 | 0;
 $1842 = sp + 37352 | 0;
 $1843 = sp + 9904 | 0;
 $1844 = sp + 37344 | 0;
 $1845 = sp + 9888 | 0;
 $1846 = sp + 37336 | 0;
 $1847 = sp + 9872 | 0;
 $1848 = sp + 37328 | 0;
 $1849 = sp + 9856 | 0;
 $1850 = sp + 37320 | 0;
 $1851 = sp + 9840 | 0;
 $1852 = sp + 37312 | 0;
 $1853 = sp + 9824 | 0;
 $1854 = sp + 37304 | 0;
 $1855 = sp + 9808 | 0;
 $1856 = sp + 37296 | 0;
 $1857 = sp + 9792 | 0;
 $1858 = sp + 37288 | 0;
 $1859 = sp + 9776 | 0;
 $1860 = sp + 37280 | 0;
 $1861 = sp + 9760 | 0;
 $1862 = sp + 37272 | 0;
 $1863 = sp + 9744 | 0;
 $1864 = sp + 37264 | 0;
 $1865 = sp + 9728 | 0;
 $1866 = sp + 37256 | 0;
 $1867 = sp + 9712 | 0;
 $1868 = sp + 37248 | 0;
 $1869 = sp + 9696 | 0;
 $1870 = sp + 37240 | 0;
 $1871 = sp + 9680 | 0;
 $1872 = sp + 37232 | 0;
 $1873 = sp + 9664 | 0;
 $1874 = sp + 37224 | 0;
 $1875 = sp + 9648 | 0;
 $1876 = sp + 37216 | 0;
 $1877 = sp + 9632 | 0;
 $1878 = sp + 37208 | 0;
 $1879 = sp + 9616 | 0;
 $1880 = sp + 37200 | 0;
 $1881 = sp + 9600 | 0;
 $1882 = sp + 37192 | 0;
 $1883 = sp + 9584 | 0;
 $1884 = sp + 37184 | 0;
 $1885 = sp + 9568 | 0;
 $1886 = sp + 37176 | 0;
 $1887 = sp + 9552 | 0;
 $1888 = sp + 37168 | 0;
 $1889 = sp + 9536 | 0;
 $1890 = sp + 37160 | 0;
 $1891 = sp + 9520 | 0;
 $1892 = sp + 37152 | 0;
 $1893 = sp + 9504 | 0;
 $1894 = sp + 37144 | 0;
 $1895 = sp + 9488 | 0;
 $1896 = sp + 37136 | 0;
 $1897 = sp + 9472 | 0;
 $1898 = sp + 37128 | 0;
 $1899 = sp + 9456 | 0;
 $1900 = sp + 37120 | 0;
 $1901 = sp + 9440 | 0;
 $1902 = sp + 37112 | 0;
 $1903 = sp + 9424 | 0;
 $1904 = sp + 37104 | 0;
 $1905 = sp + 9408 | 0;
 $1906 = sp + 37096 | 0;
 $1907 = sp + 9392 | 0;
 $1908 = sp + 37088 | 0;
 $1909 = sp + 9376 | 0;
 $1910 = sp + 37080 | 0;
 $1911 = sp + 9360 | 0;
 $1912 = sp + 37072 | 0;
 $1913 = sp + 9344 | 0;
 $1914 = sp + 37064 | 0;
 $1915 = sp + 9328 | 0;
 $1916 = sp + 37056 | 0;
 $1917 = sp + 9312 | 0;
 $1918 = sp + 37048 | 0;
 $1919 = sp + 9296 | 0;
 $1920 = sp + 37040 | 0;
 $1921 = sp + 9280 | 0;
 $1922 = sp + 37032 | 0;
 $1923 = sp + 9264 | 0;
 $1924 = sp + 37024 | 0;
 $1925 = sp + 9248 | 0;
 $1926 = sp + 37016 | 0;
 $1927 = sp + 9232 | 0;
 $1928 = sp + 37008 | 0;
 $1929 = sp + 9216 | 0;
 $1930 = sp + 37e3 | 0;
 $1931 = sp + 9200 | 0;
 $1932 = sp + 36992 | 0;
 $1933 = sp + 9184 | 0;
 $1934 = sp + 36984 | 0;
 $1935 = sp + 9168 | 0;
 $1936 = sp + 36976 | 0;
 $1937 = sp + 9152 | 0;
 $1938 = sp + 36968 | 0;
 $1939 = sp + 9136 | 0;
 $1940 = sp + 36960 | 0;
 $1941 = sp + 9120 | 0;
 $1942 = sp + 36952 | 0;
 $1943 = sp + 9104 | 0;
 $1944 = sp + 36944 | 0;
 $1945 = sp + 9088 | 0;
 $1946 = sp + 36936 | 0;
 $1947 = sp + 23116 | 0;
 $1948 = sp + 36928 | 0;
 $1949 = sp + 9072 | 0;
 $1950 = sp + 36920 | 0;
 $1951 = sp + 9056 | 0;
 $1952 = sp + 36912 | 0;
 $1953 = sp + 9040 | 0;
 $1954 = sp + 36904 | 0;
 $1955 = sp + 9024 | 0;
 $1956 = sp + 36896 | 0;
 $1957 = sp + 9008 | 0;
 $1958 = sp + 36888 | 0;
 $1959 = sp + 8992 | 0;
 $1960 = sp + 36880 | 0;
 $1961 = sp + 8976 | 0;
 $1962 = sp + 36872 | 0;
 $1963 = sp + 8960 | 0;
 $1964 = sp + 36864 | 0;
 $1965 = sp + 8944 | 0;
 $1966 = sp + 36856 | 0;
 $1967 = sp + 23088 | 0;
 $1968 = sp + 36848 | 0;
 $1969 = sp + 8928 | 0;
 $1970 = sp + 36840 | 0;
 $1971 = sp + 8912 | 0;
 $1972 = sp + 36832 | 0;
 $1973 = sp + 8896 | 0;
 $1974 = sp + 36824 | 0;
 $1975 = sp + 8880 | 0;
 $1976 = sp + 36816 | 0;
 $1977 = sp + 8864 | 0;
 $1978 = sp + 36808 | 0;
 $1979 = sp + 8848 | 0;
 $1980 = sp + 36800 | 0;
 $1981 = sp + 8832 | 0;
 $1982 = sp + 36792 | 0;
 $1983 = sp + 8816 | 0;
 $1984 = sp + 36784 | 0;
 $1985 = sp + 8800 | 0;
 $1986 = sp + 36776 | 0;
 $1987 = sp + 8784 | 0;
 $1988 = sp + 36768 | 0;
 $1989 = sp + 8768 | 0;
 $1990 = sp + 36760 | 0;
 $1991 = sp + 8752 | 0;
 $1992 = sp + 36752 | 0;
 $1993 = sp + 8736 | 0;
 $1994 = sp + 36744 | 0;
 $1995 = sp + 8720 | 0;
 $1996 = sp + 36736 | 0;
 $1997 = sp + 8704 | 0;
 $1998 = sp + 36728 | 0;
 $1999 = sp + 8688 | 0;
 $2000 = sp + 36720 | 0;
 $2001 = sp + 8672 | 0;
 $2002 = sp + 36712 | 0;
 $2003 = sp + 8656 | 0;
 $2004 = sp + 36704 | 0;
 $2005 = sp + 8640 | 0;
 $2006 = sp + 36696 | 0;
 $2007 = sp + 8624 | 0;
 $2008 = sp + 36688 | 0;
 $2009 = sp + 8608 | 0;
 $2010 = sp + 36680 | 0;
 $2011 = sp + 8592 | 0;
 $2012 = sp + 36672 | 0;
 $2013 = sp + 8576 | 0;
 $2014 = sp + 36664 | 0;
 $2015 = sp + 8560 | 0;
 $2016 = sp + 36656 | 0;
 $2017 = sp + 8544 | 0;
 $2018 = sp + 36648 | 0;
 $2019 = sp + 8528 | 0;
 $2020 = sp + 36640 | 0;
 $2021 = sp + 8512 | 0;
 $2022 = sp + 36632 | 0;
 $2023 = sp + 8496 | 0;
 $2024 = sp + 36624 | 0;
 $2025 = sp + 8480 | 0;
 $2026 = sp + 36616 | 0;
 $2027 = sp + 8464 | 0;
 $2028 = sp + 36608 | 0;
 $2029 = sp + 8448 | 0;
 $2030 = sp + 36600 | 0;
 $2031 = sp + 8432 | 0;
 $2032 = sp + 36592 | 0;
 $2033 = sp + 8416 | 0;
 $2034 = sp + 36584 | 0;
 $2035 = sp + 8400 | 0;
 $2036 = sp + 36576 | 0;
 $2037 = sp + 8384 | 0;
 $2038 = sp + 36568 | 0;
 $2039 = sp + 8368 | 0;
 $2040 = sp + 36560 | 0;
 $2041 = sp + 8352 | 0;
 $2042 = sp + 36552 | 0;
 $2043 = sp + 8336 | 0;
 $2044 = sp + 36544 | 0;
 $2045 = sp + 8320 | 0;
 $2046 = sp + 36536 | 0;
 $2047 = sp + 8304 | 0;
 $2048 = sp + 36528 | 0;
 $2049 = sp + 8288 | 0;
 $2050 = sp + 36520 | 0;
 $2051 = sp + 8272 | 0;
 $2052 = sp + 36512 | 0;
 $2053 = sp + 8256 | 0;
 $2054 = sp + 36504 | 0;
 $2055 = sp + 8240 | 0;
 $2056 = sp + 36496 | 0;
 $2057 = sp + 8224 | 0;
 $2058 = sp + 36488 | 0;
 $2059 = sp + 8208 | 0;
 $2060 = sp + 36480 | 0;
 $2061 = sp + 8192 | 0;
 $2062 = sp + 36472 | 0;
 $2063 = sp + 8176 | 0;
 $2064 = sp + 36464 | 0;
 $2065 = sp + 8160 | 0;
 $2066 = sp + 36456 | 0;
 $2067 = sp + 8144 | 0;
 $2068 = sp + 36448 | 0;
 $2069 = sp + 8128 | 0;
 $2070 = sp + 36440 | 0;
 $2071 = sp + 8112 | 0;
 $2072 = sp + 36432 | 0;
 $2073 = sp + 8096 | 0;
 $2074 = sp + 36424 | 0;
 $2075 = sp + 8080 | 0;
 $2076 = sp + 36416 | 0;
 $2077 = sp + 8064 | 0;
 $2078 = sp + 36408 | 0;
 $2079 = sp + 8048 | 0;
 $2080 = sp + 36400 | 0;
 $2081 = sp + 8032 | 0;
 $2082 = sp + 36392 | 0;
 $2083 = sp + 8016 | 0;
 $2084 = sp + 36384 | 0;
 $2085 = sp + 8e3 | 0;
 $2086 = sp + 36376 | 0;
 $2087 = sp + 7984 | 0;
 $2088 = sp + 36368 | 0;
 $2089 = sp + 7968 | 0;
 $2090 = sp + 36360 | 0;
 $2091 = sp + 7952 | 0;
 $2092 = sp + 36352 | 0;
 $2093 = sp + 7936 | 0;
 $2094 = sp + 36344 | 0;
 $2095 = sp + 7920 | 0;
 $2096 = sp + 36336 | 0;
 $2097 = sp + 7904 | 0;
 $2098 = sp + 36328 | 0;
 $2099 = sp + 7888 | 0;
 $2100 = sp + 36320 | 0;
 $2101 = sp + 7872 | 0;
 $2102 = sp + 36312 | 0;
 $2103 = sp + 7856 | 0;
 $2104 = sp + 36304 | 0;
 $2105 = sp + 7840 | 0;
 $2106 = sp + 36296 | 0;
 $2107 = sp + 7824 | 0;
 $2108 = sp + 36288 | 0;
 $2109 = sp + 7808 | 0;
 $2110 = sp + 36280 | 0;
 $2111 = sp + 7792 | 0;
 $2112 = sp + 36272 | 0;
 $2113 = sp + 7776 | 0;
 $2114 = sp + 36264 | 0;
 $2115 = sp + 7760 | 0;
 $2116 = sp + 36256 | 0;
 $2117 = sp + 7744 | 0;
 $2118 = sp + 36248 | 0;
 $2119 = sp + 7728 | 0;
 $2120 = sp + 36240 | 0;
 $2121 = sp + 7712 | 0;
 $2122 = sp + 36232 | 0;
 $2123 = sp + 7696 | 0;
 $2124 = sp + 36224 | 0;
 $2125 = sp + 7680 | 0;
 $2126 = sp + 36216 | 0;
 $2127 = sp + 7664 | 0;
 $2128 = sp + 36208 | 0;
 $2129 = sp + 7648 | 0;
 $2130 = sp + 36200 | 0;
 $2131 = sp + 23084 | 0;
 $2132 = sp + 23080 | 0;
 $2133 = sp + 23076 | 0;
 $2134 = sp + 23072 | 0;
 $2135 = sp + 23068 | 0;
 $2136 = sp + 23064 | 0;
 $2137 = sp + 23060 | 0;
 $2138 = sp + 23056 | 0;
 $2139 = sp + 23052 | 0;
 $2140 = sp + 23048 | 0;
 $2141 = sp + 23044 | 0;
 $2142 = sp + 23040 | 0;
 $2143 = sp + 23036 | 0;
 $2144 = sp + 23032 | 0;
 $2145 = sp + 23028 | 0;
 $2146 = sp + 23024 | 0;
 $2147 = sp + 23020 | 0;
 $2148 = sp + 23016 | 0;
 $2149 = sp + 23012 | 0;
 $2150 = sp + 23008 | 0;
 $2151 = sp + 23004 | 0;
 $2152 = sp + 23e3 | 0;
 $2153 = sp + 22996 | 0;
 $2154 = sp + 22992 | 0;
 $2155 = sp + 22988 | 0;
 $2156 = sp + 22984 | 0;
 $2157 = sp + 22980 | 0;
 $2158 = sp + 22976 | 0;
 $2159 = sp + 22972 | 0;
 $2160 = sp + 22968 | 0;
 $2161 = sp + 22964 | 0;
 $2162 = sp + 22960 | 0;
 $2163 = sp + 22956 | 0;
 $2164 = sp + 22952 | 0;
 $2165 = sp + 7632 | 0;
 $2166 = sp + 36192 | 0;
 $2167 = sp + 7616 | 0;
 $2168 = sp + 36184 | 0;
 $2169 = sp + 7600 | 0;
 $2170 = sp + 36176 | 0;
 $2171 = sp + 7584 | 0;
 $2172 = sp + 36168 | 0;
 $2173 = sp + 7568 | 0;
 $2174 = sp + 36160 | 0;
 $2175 = sp + 7552 | 0;
 $2176 = sp + 36152 | 0;
 $2177 = sp + 7536 | 0;
 $2178 = sp + 36144 | 0;
 $2179 = sp + 7520 | 0;
 $2180 = sp + 36136 | 0;
 $2181 = sp + 7504 | 0;
 $2182 = sp + 36128 | 0;
 $2183 = sp + 7488 | 0;
 $2184 = sp + 36120 | 0;
 $2185 = sp + 7472 | 0;
 $2186 = sp + 36112 | 0;
 $2187 = sp + 7456 | 0;
 $2188 = sp + 36104 | 0;
 $2189 = sp + 7440 | 0;
 $2190 = sp + 36096 | 0;
 $2191 = sp + 7424 | 0;
 $2192 = sp + 36088 | 0;
 $2193 = sp + 7408 | 0;
 $2194 = sp + 36080 | 0;
 $2195 = sp + 7392 | 0;
 $2196 = sp + 36072 | 0;
 $2197 = sp + 7376 | 0;
 $2198 = sp + 36064 | 0;
 $2199 = sp + 7360 | 0;
 $2200 = sp + 36056 | 0;
 $2201 = sp + 7344 | 0;
 $2202 = sp + 36048 | 0;
 $2203 = sp + 7328 | 0;
 $2204 = sp + 36040 | 0;
 $2205 = sp + 7312 | 0;
 $2206 = sp + 36032 | 0;
 $2207 = sp + 7296 | 0;
 $2208 = sp + 36024 | 0;
 $2209 = sp + 7280 | 0;
 $2210 = sp + 36016 | 0;
 $2211 = sp + 7264 | 0;
 $2212 = sp + 36008 | 0;
 $2213 = sp + 7248 | 0;
 $2214 = sp + 36e3 | 0;
 $2215 = sp + 7232 | 0;
 $2216 = sp + 35992 | 0;
 $2217 = sp + 7216 | 0;
 $2218 = sp + 35984 | 0;
 $2219 = sp + 7200 | 0;
 $2220 = sp + 35976 | 0;
 $2221 = sp + 7184 | 0;
 $2222 = sp + 35968 | 0;
 $2223 = sp + 7168 | 0;
 $2224 = sp + 35960 | 0;
 $2225 = sp + 7152 | 0;
 $2226 = sp + 35952 | 0;
 $2227 = sp + 7136 | 0;
 $2228 = sp + 35944 | 0;
 $2229 = sp + 7120 | 0;
 $2230 = sp + 35936 | 0;
 $2231 = sp + 7104 | 0;
 $2232 = sp + 35928 | 0;
 $2233 = sp + 7088 | 0;
 $2234 = sp + 35920 | 0;
 $2235 = sp + 7072 | 0;
 $2236 = sp + 35912 | 0;
 $2237 = sp + 7056 | 0;
 $2238 = sp + 35904 | 0;
 $2239 = sp + 7040 | 0;
 $2240 = sp + 35896 | 0;
 $2241 = sp + 7024 | 0;
 $2242 = sp + 35888 | 0;
 $2243 = sp + 7008 | 0;
 $2244 = sp + 35880 | 0;
 $2245 = sp + 6992 | 0;
 $2246 = sp + 35872 | 0;
 $2247 = sp + 6976 | 0;
 $2248 = sp + 35864 | 0;
 $2249 = sp + 6960 | 0;
 $2250 = sp + 35856 | 0;
 $2251 = sp + 6944 | 0;
 $2252 = sp + 35848 | 0;
 $2253 = sp + 6928 | 0;
 $2254 = sp + 35840 | 0;
 $2255 = sp + 6912 | 0;
 $2256 = sp + 35832 | 0;
 $2257 = sp + 6896 | 0;
 $2258 = sp + 35824 | 0;
 $2259 = sp + 6880 | 0;
 $2260 = sp + 35816 | 0;
 $2261 = sp + 6864 | 0;
 $2262 = sp + 35808 | 0;
 $2263 = sp + 6848 | 0;
 $2264 = sp + 35800 | 0;
 $2265 = sp + 6832 | 0;
 $2266 = sp + 35792 | 0;
 $2267 = sp + 6816 | 0;
 $2268 = sp + 35784 | 0;
 $2269 = sp + 6800 | 0;
 $2270 = sp + 35776 | 0;
 $2271 = sp + 6784 | 0;
 $2272 = sp + 35768 | 0;
 $2273 = sp + 6768 | 0;
 $2274 = sp + 35760 | 0;
 $2275 = sp + 6752 | 0;
 $2276 = sp + 35752 | 0;
 $2277 = sp + 6736 | 0;
 $2278 = sp + 35744 | 0;
 $2279 = sp + 6720 | 0;
 $2280 = sp + 35736 | 0;
 $2281 = sp + 6704 | 0;
 $2282 = sp + 35728 | 0;
 $2283 = sp + 6688 | 0;
 $2284 = sp + 35720 | 0;
 $2285 = sp + 6672 | 0;
 $2286 = sp + 35712 | 0;
 $2287 = sp + 6656 | 0;
 $2288 = sp + 35704 | 0;
 $2289 = sp + 6640 | 0;
 $2290 = sp + 35696 | 0;
 $2291 = sp + 6624 | 0;
 $2292 = sp + 35688 | 0;
 $2293 = sp + 6608 | 0;
 $2294 = sp + 35680 | 0;
 $2295 = sp + 6592 | 0;
 $2296 = sp + 35672 | 0;
 $2297 = sp + 6576 | 0;
 $2298 = sp + 35664 | 0;
 $2299 = sp + 6560 | 0;
 $2300 = sp + 35656 | 0;
 $2301 = sp + 6544 | 0;
 $2302 = sp + 35648 | 0;
 $2303 = sp + 6528 | 0;
 $2304 = sp + 35640 | 0;
 $2305 = sp + 6512 | 0;
 $2306 = sp + 35632 | 0;
 $2307 = sp + 6496 | 0;
 $2308 = sp + 35624 | 0;
 $2309 = sp + 6480 | 0;
 $2310 = sp + 35616 | 0;
 $2311 = sp + 6464 | 0;
 $2312 = sp + 35608 | 0;
 $2313 = sp + 6448 | 0;
 $2314 = sp + 35600 | 0;
 $2315 = sp + 6432 | 0;
 $2316 = sp + 35592 | 0;
 $2317 = sp + 6416 | 0;
 $2318 = sp + 35584 | 0;
 $2319 = sp + 6400 | 0;
 $2320 = sp + 35576 | 0;
 $2321 = sp + 6384 | 0;
 $2322 = sp + 35568 | 0;
 $2323 = sp + 6368 | 0;
 $2324 = sp + 35560 | 0;
 $2325 = sp + 6352 | 0;
 $2326 = sp + 35552 | 0;
 $2327 = sp + 6336 | 0;
 $2328 = sp + 35544 | 0;
 $2329 = sp + 6320 | 0;
 $2330 = sp + 35536 | 0;
 $2331 = sp + 6304 | 0;
 $2332 = sp + 35528 | 0;
 $2333 = sp + 6288 | 0;
 $2334 = sp + 35520 | 0;
 $2335 = sp + 6272 | 0;
 $2336 = sp + 35512 | 0;
 $2337 = sp + 6256 | 0;
 $2338 = sp + 35504 | 0;
 $2339 = sp + 6240 | 0;
 $2340 = sp + 35496 | 0;
 $2341 = sp + 6224 | 0;
 $2342 = sp + 35488 | 0;
 $2343 = sp + 6208 | 0;
 $2344 = sp + 35480 | 0;
 $2345 = sp + 6192 | 0;
 $2346 = sp + 35472 | 0;
 $2347 = sp + 6176 | 0;
 $2348 = sp + 35464 | 0;
 $2349 = sp + 6160 | 0;
 $2350 = sp + 35456 | 0;
 $2351 = sp + 6144 | 0;
 $2352 = sp + 35448 | 0;
 $2353 = sp + 6128 | 0;
 $2354 = sp + 35440 | 0;
 $2355 = sp + 6112 | 0;
 $2356 = sp + 35432 | 0;
 $2357 = sp + 6096 | 0;
 $2358 = sp + 35424 | 0;
 $2359 = sp + 6080 | 0;
 $2360 = sp + 35416 | 0;
 $2361 = sp + 6064 | 0;
 $2362 = sp + 35408 | 0;
 $2363 = sp + 6048 | 0;
 $2364 = sp + 35400 | 0;
 $2365 = sp + 6032 | 0;
 $2366 = sp + 35392 | 0;
 $2367 = sp + 6016 | 0;
 $2368 = sp + 35384 | 0;
 $2369 = sp + 6e3 | 0;
 $2370 = sp + 35376 | 0;
 $2371 = sp + 5984 | 0;
 $2372 = sp + 35368 | 0;
 $2373 = sp + 5968 | 0;
 $2374 = sp + 35360 | 0;
 $2375 = sp + 5952 | 0;
 $2376 = sp + 35352 | 0;
 $2377 = sp + 5936 | 0;
 $2378 = sp + 35344 | 0;
 $2379 = sp + 5920 | 0;
 $2380 = sp + 35336 | 0;
 $2381 = sp + 5904 | 0;
 $2382 = sp + 35328 | 0;
 $2383 = sp + 5888 | 0;
 $2384 = sp + 35320 | 0;
 $2385 = sp + 5872 | 0;
 $2386 = sp + 35312 | 0;
 $2387 = sp + 5856 | 0;
 $2388 = sp + 35304 | 0;
 $2389 = sp + 5840 | 0;
 $2390 = sp + 35296 | 0;
 $2391 = sp + 5824 | 0;
 $2392 = sp + 35288 | 0;
 $2393 = sp + 5808 | 0;
 $2394 = sp + 35280 | 0;
 $2395 = sp + 5792 | 0;
 $2396 = sp + 35272 | 0;
 $2397 = sp + 5776 | 0;
 $2398 = sp + 35264 | 0;
 $2399 = sp + 5760 | 0;
 $2400 = sp + 35256 | 0;
 $2401 = sp + 5744 | 0;
 $2402 = sp + 35248 | 0;
 $2403 = sp + 5728 | 0;
 $2404 = sp + 35240 | 0;
 $2405 = sp + 5712 | 0;
 $2406 = sp + 35232 | 0;
 $2407 = sp + 5696 | 0;
 $2408 = sp + 35224 | 0;
 $2409 = sp + 5680 | 0;
 $2410 = sp + 35216 | 0;
 $2411 = sp + 5664 | 0;
 $2412 = sp + 35208 | 0;
 $2413 = sp + 5648 | 0;
 $2414 = sp + 35200 | 0;
 $2415 = sp + 5632 | 0;
 $2416 = sp + 35192 | 0;
 $2417 = sp + 5616 | 0;
 $2418 = sp + 35184 | 0;
 $2419 = sp + 5600 | 0;
 $2420 = sp + 35176 | 0;
 $2421 = sp + 5584 | 0;
 $2422 = sp + 35168 | 0;
 $2423 = sp + 5568 | 0;
 $2424 = sp + 35160 | 0;
 $2425 = sp + 5552 | 0;
 $2426 = sp + 35152 | 0;
 $2427 = sp + 5536 | 0;
 $2428 = sp + 35144 | 0;
 $2429 = sp + 5520 | 0;
 $2430 = sp + 35136 | 0;
 $2431 = sp + 5504 | 0;
 $2432 = sp + 35128 | 0;
 $2433 = sp + 5488 | 0;
 $2434 = sp + 35120 | 0;
 $2435 = sp + 5472 | 0;
 $2436 = sp + 35112 | 0;
 $2437 = sp + 5456 | 0;
 $2438 = sp + 35104 | 0;
 $2439 = sp + 5440 | 0;
 $2440 = sp + 35096 | 0;
 $2441 = sp + 5408 | 0;
 $2442 = sp + 35088 | 0;
 $2443 = sp + 5392 | 0;
 $2444 = sp + 35080 | 0;
 $2445 = sp + 5376 | 0;
 $2446 = sp + 35072 | 0;
 $2447 = sp + 5360 | 0;
 $2448 = sp + 35064 | 0;
 $2449 = sp + 5344 | 0;
 $2450 = sp + 35056 | 0;
 $2451 = sp + 5328 | 0;
 $2452 = sp + 35048 | 0;
 $2453 = sp + 5312 | 0;
 $2454 = sp + 35040 | 0;
 $2455 = sp + 5296 | 0;
 $2456 = sp + 35032 | 0;
 $2457 = sp + 5280 | 0;
 $2458 = sp + 35024 | 0;
 $2459 = sp + 5264 | 0;
 $2460 = sp + 35016 | 0;
 $2461 = sp + 5232 | 0;
 $2462 = sp + 35008 | 0;
 $2463 = sp + 5216 | 0;
 $2464 = sp + 35e3 | 0;
 $2465 = sp + 5200 | 0;
 $2466 = sp + 34992 | 0;
 $2467 = sp + 5184 | 0;
 $2468 = sp + 34984 | 0;
 $2469 = sp + 5168 | 0;
 $2470 = sp + 34976 | 0;
 $2471 = sp + 5152 | 0;
 $2472 = sp + 34968 | 0;
 $2473 = sp + 5136 | 0;
 $2474 = sp + 34960 | 0;
 $2475 = sp + 5120 | 0;
 $2476 = sp + 34952 | 0;
 $2477 = sp + 5104 | 0;
 $2478 = sp + 34944 | 0;
 $2479 = sp + 5088 | 0;
 $2480 = sp + 34936 | 0;
 $2481 = sp + 5072 | 0;
 $2482 = sp + 34928 | 0;
 $2483 = sp + 5056 | 0;
 $2484 = sp + 34920 | 0;
 $2485 = sp + 5040 | 0;
 $2486 = sp + 34912 | 0;
 $2487 = sp + 5024 | 0;
 $2488 = sp + 34904 | 0;
 $2489 = sp + 5008 | 0;
 $2490 = sp + 34896 | 0;
 $2491 = sp + 4976 | 0;
 $2492 = sp + 34888 | 0;
 $2493 = sp + 4960 | 0;
 $2494 = sp + 34880 | 0;
 $2495 = sp + 4944 | 0;
 $2496 = sp + 34872 | 0;
 $2497 = sp + 4928 | 0;
 $2498 = sp + 34864 | 0;
 $2499 = sp + 4912 | 0;
 $2500 = sp + 34856 | 0;
 $2501 = sp + 4896 | 0;
 $2502 = sp + 34848 | 0;
 $2503 = sp + 4880 | 0;
 $2504 = sp + 34840 | 0;
 $2505 = sp + 4864 | 0;
 $2506 = sp + 34832 | 0;
 $2507 = sp + 4848 | 0;
 $2508 = sp + 34824 | 0;
 $2509 = sp + 4832 | 0;
 $2510 = sp + 34816 | 0;
 $2511 = sp + 4800 | 0;
 $2512 = sp + 34808 | 0;
 $2513 = sp + 4784 | 0;
 $2514 = sp + 34800 | 0;
 $2515 = sp + 4768 | 0;
 $2516 = sp + 34792 | 0;
 $2517 = sp + 4752 | 0;
 $2518 = sp + 34784 | 0;
 $2519 = sp + 4736 | 0;
 $2520 = sp + 34776 | 0;
 $2521 = sp + 4720 | 0;
 $2522 = sp + 34768 | 0;
 $2523 = sp + 4704 | 0;
 $2524 = sp + 34760 | 0;
 $2525 = sp + 4688 | 0;
 $2526 = sp + 34752 | 0;
 $2527 = sp + 4672 | 0;
 $2528 = sp + 34744 | 0;
 $2529 = sp + 4656 | 0;
 $2530 = sp + 34736 | 0;
 $2531 = sp + 4640 | 0;
 $2532 = sp + 34728 | 0;
 $2533 = sp + 4624 | 0;
 $2534 = sp + 34720 | 0;
 $2535 = sp + 4608 | 0;
 $2536 = sp + 34712 | 0;
 $2537 = sp + 4592 | 0;
 $2538 = sp + 34704 | 0;
 $2539 = sp + 4576 | 0;
 $2540 = sp + 34696 | 0;
 $2541 = sp + 4560 | 0;
 $2542 = sp + 34688 | 0;
 $2543 = sp + 4544 | 0;
 $2544 = sp + 34680 | 0;
 $2545 = sp + 4528 | 0;
 $2546 = sp + 34672 | 0;
 $2547 = sp + 4512 | 0;
 $2548 = sp + 34664 | 0;
 $2549 = sp + 4496 | 0;
 $2550 = sp + 34656 | 0;
 $2551 = sp + 4480 | 0;
 $2552 = sp + 34648 | 0;
 $2553 = sp + 4464 | 0;
 $2554 = sp + 34640 | 0;
 $2555 = sp + 4448 | 0;
 $2556 = sp + 34632 | 0;
 $2557 = sp + 4432 | 0;
 $2558 = sp + 34624 | 0;
 $2559 = sp + 4416 | 0;
 $2560 = sp + 34616 | 0;
 $2561 = sp + 4400 | 0;
 $2562 = sp + 34608 | 0;
 $2563 = sp + 4384 | 0;
 $2564 = sp + 34600 | 0;
 $2565 = sp + 4368 | 0;
 $2566 = sp + 34592 | 0;
 $2567 = sp + 4352 | 0;
 $2568 = sp + 34584 | 0;
 $2569 = sp + 4336 | 0;
 $2570 = sp + 34576 | 0;
 $2571 = sp + 4320 | 0;
 $2572 = sp + 34568 | 0;
 $2573 = sp + 4304 | 0;
 $2574 = sp + 34560 | 0;
 $2575 = sp + 4288 | 0;
 $2576 = sp + 34552 | 0;
 $2577 = sp + 4272 | 0;
 $2578 = sp + 34544 | 0;
 $2579 = sp + 4256 | 0;
 $2580 = sp + 34536 | 0;
 $2581 = sp + 4240 | 0;
 $2582 = sp + 34528 | 0;
 $2583 = sp + 4224 | 0;
 $2584 = sp + 34520 | 0;
 $2585 = sp + 4208 | 0;
 $2586 = sp + 34512 | 0;
 $2587 = sp + 4192 | 0;
 $2588 = sp + 34504 | 0;
 $2589 = sp + 4176 | 0;
 $2590 = sp + 34496 | 0;
 $2591 = sp + 4160 | 0;
 $2592 = sp + 34488 | 0;
 $2593 = sp + 4144 | 0;
 $2594 = sp + 34480 | 0;
 $2595 = sp + 4128 | 0;
 $2596 = sp + 34472 | 0;
 $2597 = sp + 4112 | 0;
 $2598 = sp + 34464 | 0;
 $2599 = sp + 4096 | 0;
 $2600 = sp + 34456 | 0;
 $2601 = sp + 4080 | 0;
 $2602 = sp + 34448 | 0;
 $2603 = sp + 4064 | 0;
 $2604 = sp + 34440 | 0;
 $2605 = sp + 4048 | 0;
 $2606 = sp + 34432 | 0;
 $2607 = sp + 4032 | 0;
 $2608 = sp + 34424 | 0;
 $2609 = sp + 4016 | 0;
 $2610 = sp + 34416 | 0;
 $2611 = sp + 4e3 | 0;
 $2612 = sp + 34408 | 0;
 $2613 = sp + 3984 | 0;
 $2614 = sp + 34400 | 0;
 $2615 = sp + 3952 | 0;
 $2616 = sp + 34392 | 0;
 $2617 = sp + 3936 | 0;
 $2618 = sp + 34384 | 0;
 $2619 = sp + 3920 | 0;
 $2620 = sp + 34376 | 0;
 $2621 = sp + 3904 | 0;
 $2622 = sp + 34368 | 0;
 $2623 = sp + 3888 | 0;
 $2624 = sp + 34360 | 0;
 $2625 = sp + 3872 | 0;
 $2626 = sp + 34352 | 0;
 $2627 = sp + 3856 | 0;
 $2628 = sp + 34344 | 0;
 $2629 = sp + 3840 | 0;
 $2630 = sp + 34336 | 0;
 $2631 = sp + 3824 | 0;
 $2632 = sp + 34328 | 0;
 $2633 = sp + 3808 | 0;
 $2634 = sp + 34320 | 0;
 $2635 = sp + 3792 | 0;
 $2636 = sp + 34312 | 0;
 $2637 = sp + 3776 | 0;
 $2638 = sp + 34304 | 0;
 $2639 = sp + 3760 | 0;
 $2640 = sp + 34296 | 0;
 $2641 = sp + 3744 | 0;
 $2642 = sp + 34288 | 0;
 $2643 = sp + 3728 | 0;
 $2644 = sp + 34280 | 0;
 $2645 = sp + 3712 | 0;
 $2646 = sp + 34272 | 0;
 $2647 = sp + 3696 | 0;
 $2648 = sp + 34264 | 0;
 $2649 = sp + 3680 | 0;
 $2650 = sp + 34256 | 0;
 $2651 = sp + 3664 | 0;
 $2652 = sp + 34248 | 0;
 $2653 = sp + 3648 | 0;
 $2654 = sp + 34240 | 0;
 $2655 = sp + 3632 | 0;
 $2656 = sp + 34232 | 0;
 $2657 = sp + 3616 | 0;
 $2658 = sp + 34224 | 0;
 $2659 = sp + 3600 | 0;
 $2660 = sp + 34216 | 0;
 $2661 = sp + 3584 | 0;
 $2662 = sp + 34208 | 0;
 $2663 = sp + 3568 | 0;
 $2664 = sp + 34200 | 0;
 $2665 = sp + 3552 | 0;
 $2666 = sp + 34192 | 0;
 $2667 = sp + 3536 | 0;
 $2668 = sp + 34184 | 0;
 $2669 = sp + 3520 | 0;
 $2670 = sp + 34176 | 0;
 $2671 = sp + 3504 | 0;
 $2672 = sp + 34168 | 0;
 $2673 = sp + 3488 | 0;
 $2674 = sp + 34160 | 0;
 $2675 = sp + 3472 | 0;
 $2676 = sp + 34152 | 0;
 $2677 = sp + 3456 | 0;
 $2678 = sp + 34144 | 0;
 $2679 = sp + 3440 | 0;
 $2680 = sp + 34136 | 0;
 $2681 = sp + 3424 | 0;
 $2682 = sp + 34128 | 0;
 $2683 = sp + 3408 | 0;
 $2684 = sp + 34120 | 0;
 $2685 = sp + 3392 | 0;
 $2686 = sp + 34112 | 0;
 $2687 = sp + 3376 | 0;
 $2688 = sp + 34104 | 0;
 $2689 = sp + 3360 | 0;
 $2690 = sp + 34096 | 0;
 $2691 = sp + 3344 | 0;
 $2692 = sp + 34088 | 0;
 $2693 = sp + 3328 | 0;
 $2694 = sp + 34080 | 0;
 $2695 = sp + 3312 | 0;
 $2696 = sp + 34072 | 0;
 $2697 = sp + 3296 | 0;
 $2698 = sp + 34064 | 0;
 $2699 = sp + 3280 | 0;
 $2700 = sp + 34056 | 0;
 $2701 = sp + 3264 | 0;
 $2702 = sp + 34048 | 0;
 $2703 = sp + 3232 | 0;
 $2704 = sp + 34040 | 0;
 $2705 = sp + 3216 | 0;
 $2706 = sp + 34032 | 0;
 $2707 = sp + 3200 | 0;
 $2708 = sp + 34024 | 0;
 $2709 = sp + 3184 | 0;
 $2710 = sp + 34016 | 0;
 $2711 = sp + 3168 | 0;
 $2712 = sp + 34008 | 0;
 $2713 = sp + 3152 | 0;
 $2714 = sp + 34e3 | 0;
 $2715 = sp + 3136 | 0;
 $2716 = sp + 33992 | 0;
 $2717 = sp + 3120 | 0;
 $2718 = sp + 33984 | 0;
 $2719 = sp + 3104 | 0;
 $2720 = sp + 33976 | 0;
 $2721 = sp + 3088 | 0;
 $2722 = sp + 33968 | 0;
 $2723 = sp + 3072 | 0;
 $2724 = sp + 33960 | 0;
 $2725 = sp + 3056 | 0;
 $2726 = sp + 33952 | 0;
 $2727 = sp + 3040 | 0;
 $2728 = sp + 33944 | 0;
 $2729 = sp + 3024 | 0;
 $2730 = sp + 33936 | 0;
 $2731 = sp + 3008 | 0;
 $2732 = sp + 33928 | 0;
 $2733 = sp + 2992 | 0;
 $2734 = sp + 33920 | 0;
 $2735 = sp + 2976 | 0;
 $2736 = sp + 33912 | 0;
 $2737 = sp + 2960 | 0;
 $2738 = sp + 33904 | 0;
 $2739 = sp + 2944 | 0;
 $2740 = sp + 33896 | 0;
 $2741 = sp + 2928 | 0;
 $2742 = sp + 33888 | 0;
 $2743 = sp + 2912 | 0;
 $2744 = sp + 33880 | 0;
 $2745 = sp + 2896 | 0;
 $2746 = sp + 33872 | 0;
 $2747 = sp + 2880 | 0;
 $2748 = sp + 33864 | 0;
 $2749 = sp + 2864 | 0;
 $2750 = sp + 33856 | 0;
 $2751 = sp + 2848 | 0;
 $2752 = sp + 33848 | 0;
 $2753 = sp + 2832 | 0;
 $2754 = sp + 33840 | 0;
 $2755 = sp + 2816 | 0;
 $2756 = sp + 33832 | 0;
 $2757 = sp + 2800 | 0;
 $2758 = sp + 33824 | 0;
 $2759 = sp + 2784 | 0;
 $2760 = sp + 33816 | 0;
 $2761 = sp + 2768 | 0;
 $2762 = sp + 33808 | 0;
 $2763 = sp + 2752 | 0;
 $2764 = sp + 33800 | 0;
 $2765 = sp + 2736 | 0;
 $2766 = sp + 33792 | 0;
 $2767 = sp + 2720 | 0;
 $2768 = sp + 33784 | 0;
 $2769 = sp + 2704 | 0;
 $2770 = sp + 33776 | 0;
 $2771 = sp + 2688 | 0;
 $2772 = sp + 33768 | 0;
 $2773 = sp + 2672 | 0;
 $2774 = sp + 33760 | 0;
 $2775 = sp + 2656 | 0;
 $2776 = sp + 33752 | 0;
 $2777 = sp + 2640 | 0;
 $2778 = sp + 33744 | 0;
 $2779 = sp + 2624 | 0;
 $2780 = sp + 33736 | 0;
 $2781 = sp + 2608 | 0;
 $2782 = sp + 33728 | 0;
 $2783 = sp + 2592 | 0;
 $2784 = sp + 33720 | 0;
 $2785 = sp + 2576 | 0;
 $2786 = sp + 33712 | 0;
 $2787 = sp + 2560 | 0;
 $2788 = sp + 33704 | 0;
 $2789 = sp + 2544 | 0;
 $2790 = sp + 33696 | 0;
 $2791 = sp + 2528 | 0;
 $2792 = sp + 33688 | 0;
 $2793 = sp + 2512 | 0;
 $2794 = sp + 33680 | 0;
 $2795 = sp + 2496 | 0;
 $2796 = sp + 33672 | 0;
 $2797 = sp + 2480 | 0;
 $2798 = sp + 33664 | 0;
 $2799 = sp + 2464 | 0;
 $2800 = sp + 33656 | 0;
 $2801 = sp + 2448 | 0;
 $2802 = sp + 33648 | 0;
 $2803 = sp + 2432 | 0;
 $2804 = sp + 33640 | 0;
 $2805 = sp + 2416 | 0;
 $2806 = sp + 33632 | 0;
 $2807 = sp + 2400 | 0;
 $2808 = sp + 33624 | 0;
 $2809 = sp + 2384 | 0;
 $2810 = sp + 33616 | 0;
 $2811 = sp + 2368 | 0;
 $2812 = sp + 33608 | 0;
 $2813 = sp + 2352 | 0;
 $2814 = sp + 33600 | 0;
 $2815 = sp + 2336 | 0;
 $2816 = sp + 33592 | 0;
 $2817 = sp + 2320 | 0;
 $2818 = sp + 33584 | 0;
 $2819 = sp + 2304 | 0;
 $2820 = sp + 33576 | 0;
 $2821 = sp + 2288 | 0;
 $2822 = sp + 33568 | 0;
 $2823 = sp + 2272 | 0;
 $2824 = sp + 33560 | 0;
 $2825 = sp + 2256 | 0;
 $2826 = sp + 33552 | 0;
 $2827 = sp + 2240 | 0;
 $2828 = sp + 33544 | 0;
 $2829 = sp + 2224 | 0;
 $2830 = sp + 33536 | 0;
 $2831 = sp + 2208 | 0;
 $2832 = sp + 33528 | 0;
 $2833 = sp + 2192 | 0;
 $2834 = sp + 33520 | 0;
 $2835 = sp + 2176 | 0;
 $2836 = sp + 33512 | 0;
 $2837 = sp + 2160 | 0;
 $2838 = sp + 33504 | 0;
 $2839 = sp + 2144 | 0;
 $2840 = sp + 33496 | 0;
 $2841 = sp + 2128 | 0;
 $2842 = sp + 33488 | 0;
 $2843 = sp + 2112 | 0;
 $2844 = sp + 33480 | 0;
 $2845 = sp + 2096 | 0;
 $2846 = sp + 33472 | 0;
 $2847 = sp + 2080 | 0;
 $2848 = sp + 33464 | 0;
 $2849 = sp + 2064 | 0;
 $2850 = sp + 33456 | 0;
 $2851 = sp + 2048 | 0;
 $2852 = sp + 33448 | 0;
 $2853 = sp + 2032 | 0;
 $2854 = sp + 33440 | 0;
 $2855 = sp + 2016 | 0;
 $2856 = sp + 33432 | 0;
 $2857 = sp + 2e3 | 0;
 $2858 = sp + 33424 | 0;
 $2859 = sp + 1984 | 0;
 $2860 = sp + 33416 | 0;
 $2861 = sp + 1968 | 0;
 $2862 = sp + 33408 | 0;
 $2863 = sp + 1952 | 0;
 $2864 = sp + 33400 | 0;
 $2865 = sp + 1936 | 0;
 $2866 = sp + 33392 | 0;
 $2867 = sp + 1920 | 0;
 $2868 = sp + 33384 | 0;
 $2869 = sp + 1904 | 0;
 $2870 = sp + 33376 | 0;
 $2871 = sp + 1888 | 0;
 $2872 = sp + 33368 | 0;
 $2873 = sp + 1872 | 0;
 $2874 = sp + 33360 | 0;
 $2875 = sp + 1856 | 0;
 $2876 = sp + 33352 | 0;
 $2877 = sp + 1840 | 0;
 $2878 = sp + 33344 | 0;
 $2879 = sp + 1824 | 0;
 $2880 = sp + 33336 | 0;
 $2881 = sp + 1808 | 0;
 $2882 = sp + 33328 | 0;
 $2883 = sp + 1792 | 0;
 $2884 = sp + 33320 | 0;
 $2885 = sp + 1776 | 0;
 $2886 = sp + 33312 | 0;
 $2887 = sp + 1760 | 0;
 $2888 = sp + 33304 | 0;
 $2889 = sp + 1744 | 0;
 $2890 = sp + 33296 | 0;
 $2891 = sp + 1728 | 0;
 $2892 = sp + 33288 | 0;
 $2893 = sp + 1712 | 0;
 $2894 = sp + 33280 | 0;
 $2895 = sp + 1696 | 0;
 $2896 = sp + 33272 | 0;
 $2897 = sp + 1680 | 0;
 $2898 = sp + 33264 | 0;
 $2899 = sp + 1664 | 0;
 $2900 = sp + 33256 | 0;
 $2901 = sp + 1648 | 0;
 $2902 = sp + 33248 | 0;
 $2903 = sp + 1632 | 0;
 $2904 = sp + 33240 | 0;
 $2905 = sp + 1616 | 0;
 $2906 = sp + 33232 | 0;
 $2907 = sp + 1600 | 0;
 $2908 = sp + 33224 | 0;
 $2909 = sp + 1584 | 0;
 $2910 = sp + 33216 | 0;
 $2911 = sp + 1568 | 0;
 $2912 = sp + 33208 | 0;
 $2913 = sp + 1552 | 0;
 $2914 = sp + 33200 | 0;
 $2915 = sp + 1536 | 0;
 $2916 = sp + 33192 | 0;
 $2917 = sp + 1520 | 0;
 $2918 = sp + 33184 | 0;
 $2919 = sp + 1504 | 0;
 $2920 = sp + 33176 | 0;
 $2921 = sp + 1488 | 0;
 $2922 = sp + 33168 | 0;
 $2923 = sp + 1472 | 0;
 $2924 = sp + 33160 | 0;
 $2925 = sp + 1456 | 0;
 $2926 = sp + 33152 | 0;
 $2927 = sp + 1440 | 0;
 $2928 = sp + 33144 | 0;
 $2929 = sp + 1424 | 0;
 $2930 = sp + 33136 | 0;
 $2931 = sp + 1408 | 0;
 $2932 = sp + 33128 | 0;
 $2933 = sp + 1392 | 0;
 $2934 = sp + 33120 | 0;
 $2935 = sp + 1376 | 0;
 $2936 = sp + 33112 | 0;
 $2937 = sp + 1360 | 0;
 $2938 = sp + 33104 | 0;
 $2939 = sp + 1344 | 0;
 $2940 = sp + 33096 | 0;
 $2941 = sp + 1328 | 0;
 $2942 = sp + 33088 | 0;
 $2943 = sp + 1312 | 0;
 $2944 = sp + 33080 | 0;
 $2945 = sp + 1296 | 0;
 $2946 = sp + 33072 | 0;
 $2947 = sp + 1280 | 0;
 $2948 = sp + 33064 | 0;
 $2949 = sp + 1264 | 0;
 $2950 = sp + 33056 | 0;
 $2951 = sp + 1248 | 0;
 $2952 = sp + 33048 | 0;
 $2953 = sp + 1232 | 0;
 $2954 = sp + 33040 | 0;
 $2955 = sp + 1216 | 0;
 $2956 = sp + 33032 | 0;
 $2957 = sp + 1200 | 0;
 $2958 = sp + 33024 | 0;
 $2959 = sp + 1184 | 0;
 $2960 = sp + 33016 | 0;
 $2961 = sp + 1168 | 0;
 $2962 = sp + 33008 | 0;
 $2963 = sp + 1152 | 0;
 $2964 = sp + 33e3 | 0;
 $2965 = sp + 1136 | 0;
 $2966 = sp + 32992 | 0;
 $2967 = sp + 1120 | 0;
 $2968 = sp + 32984 | 0;
 $2969 = sp + 1104 | 0;
 $2970 = sp + 32976 | 0;
 $2971 = sp + 1088 | 0;
 $2972 = sp + 32968 | 0;
 $2973 = sp + 1072 | 0;
 $2974 = sp + 32960 | 0;
 $2975 = sp + 1056 | 0;
 $2976 = sp + 32952 | 0;
 $2977 = sp + 1040 | 0;
 $2978 = sp + 32944 | 0;
 $2979 = sp + 1008 | 0;
 $2980 = sp + 32936 | 0;
 $2981 = sp + 992 | 0;
 $2982 = sp + 32928 | 0;
 $2983 = sp + 976 | 0;
 $2984 = sp + 32920 | 0;
 $2985 = sp + 960 | 0;
 $2986 = sp + 32912 | 0;
 $2987 = sp + 944 | 0;
 $2988 = sp + 32904 | 0;
 $2989 = sp + 928 | 0;
 $2990 = sp + 32896 | 0;
 $2991 = sp + 912 | 0;
 $2992 = sp + 32888 | 0;
 $2993 = sp + 896 | 0;
 $2994 = sp + 32880 | 0;
 $2995 = sp + 880 | 0;
 $2996 = sp + 32872 | 0;
 $2997 = sp + 864 | 0;
 $2998 = sp + 32864 | 0;
 $2999 = sp + 832 | 0;
 $3000 = sp + 32856 | 0;
 $3001 = sp + 816 | 0;
 $3002 = sp + 32848 | 0;
 $3003 = sp + 800 | 0;
 $3004 = sp + 32840 | 0;
 $3005 = sp + 784 | 0;
 $3006 = sp + 32832 | 0;
 $3007 = sp + 768 | 0;
 $3008 = sp + 32824 | 0;
 $3009 = sp + 752 | 0;
 $3010 = sp + 32816 | 0;
 $3011 = sp + 736 | 0;
 $3012 = sp + 32808 | 0;
 $3013 = sp + 720 | 0;
 $3014 = sp + 32800 | 0;
 $3015 = sp + 704 | 0;
 $3016 = sp + 32792 | 0;
 $3017 = sp + 688 | 0;
 $3018 = sp + 32784 | 0;
 $3019 = sp + 672 | 0;
 $3020 = sp + 32776 | 0;
 $3021 = sp + 656 | 0;
 $3022 = sp + 32768 | 0;
 $3023 = sp + 640 | 0;
 $3024 = sp + 32760 | 0;
 $3025 = sp + 624 | 0;
 $3026 = sp + 32752 | 0;
 $3027 = sp + 608 | 0;
 $3028 = sp + 32744 | 0;
 $3029 = sp + 592 | 0;
 $3030 = sp + 32736 | 0;
 $3031 = sp + 576 | 0;
 $3032 = sp + 32728 | 0;
 $3033 = sp + 560 | 0;
 $3034 = sp + 32720 | 0;
 $3035 = sp + 22948 | 0;
 $3036 = sp + 22944 | 0;
 $3037 = sp + 22940 | 0;
 $3038 = sp + 22936 | 0;
 $3039 = sp + 22932 | 0;
 $3040 = sp + 22928 | 0;
 $3041 = sp + 22924 | 0;
 $3042 = sp + 22920 | 0;
 $3043 = sp + 22916 | 0;
 $3044 = sp + 22912 | 0;
 $3045 = sp + 22908 | 0;
 $3046 = sp + 22904 | 0;
 $3047 = sp + 22900 | 0;
 $3048 = sp + 22896 | 0;
 $3049 = sp + 22892 | 0;
 $3050 = sp + 22888 | 0;
 $3051 = sp + 22884 | 0;
 $3052 = sp + 22880 | 0;
 $3053 = sp + 22876 | 0;
 $3054 = sp + 22872 | 0;
 $3055 = sp + 22868 | 0;
 $3056 = sp + 22864 | 0;
 $3057 = sp + 22860 | 0;
 $3058 = sp + 22856 | 0;
 $3059 = sp + 22852 | 0;
 $3060 = sp + 22848 | 0;
 $3061 = sp + 22844 | 0;
 $3062 = sp + 22840 | 0;
 $3063 = sp + 22836 | 0;
 $3064 = sp + 22832 | 0;
 $3065 = sp + 22828 | 0;
 $3066 = sp + 22824 | 0;
 $3067 = sp + 22820 | 0;
 $3068 = sp + 22816 | 0;
 $3069 = sp + 22812 | 0;
 $3070 = sp + 22808 | 0;
 $3071 = sp + 22804 | 0;
 $3072 = sp + 22800 | 0;
 $3073 = sp + 22796 | 0;
 $3074 = sp + 22792 | 0;
 $3075 = sp + 22788 | 0;
 $3076 = sp + 22784 | 0;
 $3077 = sp + 544 | 0;
 $3078 = sp + 32712 | 0;
 $3079 = sp + 528 | 0;
 $3080 = sp + 32704 | 0;
 $3081 = sp + 512 | 0;
 $3082 = sp + 32696 | 0;
 $3083 = sp + 496 | 0;
 $3084 = sp + 32688 | 0;
 $3085 = sp + 480 | 0;
 $3086 = sp + 32680 | 0;
 $3087 = sp + 464 | 0;
 $3088 = sp + 32672 | 0;
 $3089 = sp + 448 | 0;
 $3090 = sp + 32664 | 0;
 $3091 = sp + 432 | 0;
 $3092 = sp + 32656 | 0;
 $3093 = sp + 416 | 0;
 $3094 = sp + 32648 | 0;
 $3095 = sp + 400 | 0;
 $3096 = sp + 32640 | 0;
 $3097 = sp + 384 | 0;
 $3098 = sp + 32632 | 0;
 $3099 = sp + 368 | 0;
 $3100 = sp + 32624 | 0;
 $3101 = sp + 352 | 0;
 $3102 = sp + 32616 | 0;
 $3103 = sp + 336 | 0;
 $3104 = sp + 32608 | 0;
 $3105 = sp + 320 | 0;
 $3106 = sp + 32600 | 0;
 $3107 = sp + 304 | 0;
 $3108 = sp + 32592 | 0;
 $3109 = sp + 288 | 0;
 $3110 = sp + 32584 | 0;
 $3111 = sp + 272 | 0;
 $3112 = sp + 32576 | 0;
 $3113 = sp + 256 | 0;
 $3114 = sp + 32568 | 0;
 $3115 = sp + 240 | 0;
 $3116 = sp + 32560 | 0;
 $3117 = sp + 224 | 0;
 $3118 = sp + 32552 | 0;
 $3119 = sp + 208 | 0;
 $3120 = sp + 32544 | 0;
 $3121 = sp + 192 | 0;
 $3122 = sp + 32536 | 0;
 $3123 = sp + 176 | 0;
 $3124 = sp + 32528 | 0;
 $3125 = sp + 160 | 0;
 $3126 = sp + 32520 | 0;
 $3127 = sp + 144 | 0;
 $3128 = sp + 32512 | 0;
 $3129 = sp + 128 | 0;
 $3130 = sp + 32504 | 0;
 $3131 = sp + 112 | 0;
 $3132 = sp + 32496 | 0;
 $3133 = sp + 96 | 0;
 $3134 = sp + 32488 | 0;
 $3135 = sp + 80 | 0;
 $3136 = sp + 32480 | 0;
 $3137 = sp + 64 | 0;
 $3138 = sp + 32472 | 0;
 $3139 = sp + 48 | 0;
 $3140 = sp + 32464 | 0;
 $3141 = sp + 32 | 0;
 $3142 = sp + 32456 | 0;
 $3143 = sp + 16 | 0;
 $3144 = sp + 32448 | 0;
 $3145 = sp;
 $3146 = sp + 32440 | 0;
 $3147 = sp + 22780 | 0;
 $3148 = sp + 22776 | 0;
 $3149 = sp + 22772 | 0;
 $3150 = sp + 22768 | 0;
 $3151 = sp + 22764 | 0;
 $3152 = sp + 22760 | 0;
 $3153 = sp + 22756 | 0;
 $3154 = sp + 22752 | 0;
 $3155 = sp + 22748 | 0;
 HEAP32[$info >> 2] = 0;
 HEAP32[$info + 4 >> 2] = 0;
 HEAP8[$info + 8 >> 0] = 0;
 HEAP32[$info + 12 >> 2] = 600;
 HEAP8[$info + 16 >> 0] = 0;
 HEAP32[$info + 20 >> 2] = 256;
 HEAP32[$info + 24 >> 2] = 300;
 HEAP8[$info + 28 >> 0] = 0;
 HEAP32[$info + 32 >> 2] = 1024;
 HEAP32[$info + 36 >> 2] = 262;
 HEAP8[$info + 40 >> 0] = 0;
 HEAP32[$info + 44 >> 2] = 4096;
 HEAP32[$info + 48 >> 2] = 262;
 HEAP8[$info + 52 >> 0] = 0;
 HEAP32[$info + 56 >> 2] = 4096;
 HEAP32[$info + 60 >> 2] = 262;
 HEAP8[$info + 64 >> 0] = 0;
 HEAP32[$info + 68 >> 2] = 4096;
 $3171 = $info + 72 | 0;
 HEAP32[$info + 884 >> 2] = 0;
 HEAP32[$info + 888 >> 2] = 0;
 HEAP32[$info + 892 >> 2] = 0;
 HEAP32[$3171 >> 2] = 0;
 HEAP32[$3171 + 4 >> 2] = 0;
 HEAP32[$3171 + 8 >> 2] = 0;
 HEAP32[$3171 + 12 >> 2] = 0;
 HEAP32[$3171 + 16 >> 2] = 0;
 HEAP32[$3171 + 20 >> 2] = 0;
 HEAP32[$3171 + 24 >> 2] = 0;
 HEAP8[$3171 + 28 >> 0] = 0;
 _memset($info + 104 | 0, 0, 779) | 0;
 _memset($info + 900 | 0, 0, 1042) | 0;
 HEAP16[$info + 1944 >> 1] = -16379;
 _memset($info + 1946 | 0, 0, 331) | 0;
 __ZN14ClientTimeZoneC2Ev($info + 2280 | 0);
 $3180 = $info + 2452 | 0;
 HEAP32[$3180 >> 2] = -16843010;
 HEAP32[$3180 + 4 >> 2] = -16843010;
 HEAP16[$3180 + 8 >> 1] = 65278;
 HEAP32[$info + 108 >> 2] = 1036;
 HEAP8[$info + 916 >> 0] = 0;
 HEAP32[$info + 912 >> 2] = 0;
 HEAP32[$info >> 2] = 16;
 HEAP16[$info + 4 >> 1] = 1024;
 HEAP16[$info + 6 >> 1] = 768;
 __ZN12Front_JS_SDLC2ER10ClientInfoi($front, $info, 0);
 $3186 = $bitmapData + 4 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3186 >> 1] = 15;
 HEAP16[$bitmapData + 6 >> 1] = 0;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 84) label = 3; else {
  $3190 = HEAP32[918918] | 0;
  if (($3190 | 0) == (HEAP32[918916] | 0)) label = 3; else {
   $$lcssa$i$i = 3675672;
   $$lcssa8$i$i = $3190;
   label = 4;
  }
 }
 do if ((label | 0) == 3) {
  if ((HEAP32[918925] | 0) >>> 0 >= 84) {
   $3197 = HEAP32[918924] | 0;
   if (($3197 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i = 3675696;
    $$lcssa8$i$i = $3197;
    label = 4;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 84) {
   $3202 = HEAP32[918930] | 0;
   if (($3202 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i = 3675720;
    $$lcssa8$i$i = $3202;
    label = 4;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 84) {
   $3207 = HEAP32[918936] | 0;
   if (($3207 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i = 3675744;
    $$lcssa8$i$i = $3207;
    label = 4;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 84) {
   $3212 = HEAP32[918942] | 0;
   if (($3212 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i = 3675768;
    $$lcssa8$i$i = $3212;
    label = 4;
    break;
   }
  }
  $$3$i$i = __Znwj(84) | 0;
 } while (0);
 if ((label | 0) == 4) {
  $3195 = $$lcssa8$i$i + -4 | 0;
  HEAP32[$$lcssa$i$i >> 2] = $3195;
  $$3$i$i = HEAP32[$3195 >> 2] | 0;
 }
 $3216 = $$3$i$i + 52 | 0;
 HEAP16[$$3$i$i >> 1] = 16;
 HEAP16[$$3$i$i + 2 >> 1] = 1;
 HEAP8[$$3$i$i + 4 >> 0] = 16;
 HEAP8[$$3$i$i + 5 >> 0] = 1;
 HEAP32[$$3$i$i + 8 >> 2] = 32;
 HEAP32[$$3$i$i + 12 >> 2] = 32;
 HEAP32[$$3$i$i + 16 >> 2] = $3216;
 HEAP32[$$3$i$i + 20 >> 2] = 0;
 HEAP32[$$3$i$i + 24 >> 2] = 0;
 HEAP8[$$3$i$i + 48 >> 0] = 0;
 HEAP32[$0 >> 2] = $$3$i$i;
 dest = $3216;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $0);
 if ($$3$i$i | 0) {
  $3227 = $$3$i$i + 5 | 0;
  $3229 = (HEAP8[$3227 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3227 >> 0] = $3229;
  if (!($3229 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i);
  HEAP32[$0 >> 2] = 0;
 }
 $3231 = $1;
 HEAP32[$3231 >> 2] = 0;
 HEAP32[$3231 + 4 >> 2] = 50332672;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP16[$2 >> 1] = 0;
 HEAP16[$2 + 2 >> 1] = 0;
 HEAP16[$2 + 4 >> 1] = 1024;
 HEAP16[$2 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1, $2);
 $3239 = $3;
 HEAP32[$3239 >> 2] = 0;
 HEAP32[$3239 + 4 >> 2] = 50332672;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP16[$4 >> 1] = 0;
 HEAP16[$4 + 2 >> 1] = 0;
 HEAP16[$4 + 4 >> 1] = 1024;
 HEAP16[$4 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3, $4);
 $3247 = $bitmapData + 4 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3247 >> 1] = 15;
 HEAP16[$bitmapData + 6 >> 1] = 0;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 84) label = 19; else {
  $3251 = HEAP32[918918] | 0;
  if (($3251 | 0) == (HEAP32[918916] | 0)) label = 19; else {
   $$lcssa$i$i13 = 3675672;
   $$lcssa8$i$i12 = $3251;
   label = 20;
  }
 }
 do if ((label | 0) == 19) {
  if ((HEAP32[918925] | 0) >>> 0 >= 84) {
   $3258 = HEAP32[918924] | 0;
   if (($3258 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i13 = 3675696;
    $$lcssa8$i$i12 = $3258;
    label = 20;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 84) {
   $3263 = HEAP32[918930] | 0;
   if (($3263 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i13 = 3675720;
    $$lcssa8$i$i12 = $3263;
    label = 20;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 84) {
   $3268 = HEAP32[918936] | 0;
   if (($3268 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i13 = 3675744;
    $$lcssa8$i$i12 = $3268;
    label = 20;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 84) {
   $3273 = HEAP32[918942] | 0;
   if (($3273 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i13 = 3675768;
    $$lcssa8$i$i12 = $3273;
    label = 20;
    break;
   }
  }
  $$3$i$i14 = __Znwj(84) | 0;
 } while (0);
 if ((label | 0) == 20) {
  $3256 = $$lcssa8$i$i12 + -4 | 0;
  HEAP32[$$lcssa$i$i13 >> 2] = $3256;
  $$3$i$i14 = HEAP32[$3256 >> 2] | 0;
 }
 $3277 = $$3$i$i14 + 52 | 0;
 HEAP16[$$3$i$i14 >> 1] = 16;
 HEAP16[$$3$i$i14 + 2 >> 1] = 1;
 HEAP8[$$3$i$i14 + 4 >> 0] = 16;
 HEAP8[$$3$i$i14 + 5 >> 0] = 1;
 HEAP32[$$3$i$i14 + 8 >> 2] = 32;
 HEAP32[$$3$i$i14 + 12 >> 2] = 32;
 HEAP32[$$3$i$i14 + 16 >> 2] = $3277;
 HEAP32[$$3$i$i14 + 20 >> 2] = 0;
 HEAP32[$$3$i$i14 + 24 >> 2] = 0;
 HEAP8[$$3$i$i14 + 48 >> 0] = 0;
 HEAP32[$5 >> 2] = $$3$i$i14;
 dest = $3277;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $5);
 if ($$3$i$i14 | 0) {
  $3288 = $$3$i$i14 + 5 | 0;
  $3290 = (HEAP8[$3288 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3288 >> 0] = $3290;
  if (!($3290 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i14);
  HEAP32[$5 >> 2] = 0;
 }
 $3292 = $bitmapData + 4 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3292 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 14;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 35; else {
  $3296 = HEAP32[918918] | 0;
  if (($3296 | 0) == (HEAP32[918916] | 0)) label = 35; else {
   $$lcssa$i$i26 = 3675672;
   $$lcssa8$i$i25 = $3296;
   label = 36;
  }
 }
 do if ((label | 0) == 35) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3303 = HEAP32[918924] | 0;
   if (($3303 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i26 = 3675696;
    $$lcssa8$i$i25 = $3303;
    label = 36;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3308 = HEAP32[918930] | 0;
   if (($3308 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i26 = 3675720;
    $$lcssa8$i$i25 = $3308;
    label = 36;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3313 = HEAP32[918936] | 0;
   if (($3313 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i26 = 3675744;
    $$lcssa8$i$i25 = $3313;
    label = 36;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3318 = HEAP32[918942] | 0;
   if (($3318 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i26 = 3675768;
    $$lcssa8$i$i25 = $3318;
    label = 36;
    break;
   }
  }
  $$3$i$i27 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 36) {
  $3301 = $$lcssa8$i$i25 + -4 | 0;
  HEAP32[$$lcssa$i$i26 >> 2] = $3301;
  $$3$i$i27 = HEAP32[$3301 >> 2] | 0;
 }
 $3322 = $$3$i$i27 + 52 | 0;
 HEAP16[$$3$i$i27 >> 1] = 1024;
 HEAP16[$$3$i$i27 + 2 >> 1] = 15;
 HEAP8[$$3$i$i27 + 4 >> 0] = 16;
 HEAP8[$$3$i$i27 + 5 >> 0] = 1;
 HEAP32[$$3$i$i27 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i27 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i27 + 16 >> 2] = $3322;
 HEAP32[$$3$i$i27 + 20 >> 2] = 0;
 HEAP32[$$3$i$i27 + 24 >> 2] = 0;
 HEAP8[$$3$i$i27 + 48 >> 0] = 0;
 HEAP32[$6 >> 2] = $$3$i$i27;
 _memcpy($3322 | 0, 3679308, 2048) | 0;
 _memcpy($$3$i$i27 + 2100 | 0, 3681356, 2048) | 0;
 _memcpy($$3$i$i27 + 4148 | 0, 3683404, 2048) | 0;
 _memcpy($$3$i$i27 + 6196 | 0, 3685452, 2048) | 0;
 _memcpy($$3$i$i27 + 8244 | 0, 3687500, 2048) | 0;
 _memcpy($$3$i$i27 + 10292 | 0, 3689548, 2048) | 0;
 _memcpy($$3$i$i27 + 12340 | 0, 3691596, 2048) | 0;
 _memcpy($$3$i$i27 + 14388 | 0, 3693644, 2048) | 0;
 _memcpy($$3$i$i27 + 16436 | 0, 3695692, 2048) | 0;
 _memcpy($$3$i$i27 + 18484 | 0, 3697740, 2048) | 0;
 _memcpy($$3$i$i27 + 20532 | 0, 3699788, 2048) | 0;
 _memcpy($$3$i$i27 + 22580 | 0, 3701836, 2048) | 0;
 _memcpy($$3$i$i27 + 24628 | 0, 3703884, 2048) | 0;
 _memcpy($$3$i$i27 + 26676 | 0, 3705932, 2048) | 0;
 _memcpy($$3$i$i27 + 28724 | 0, 3707980, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $6);
 if ($$3$i$i27 | 0) {
  $3347 = $$3$i$i27 + 5 | 0;
  $3349 = (HEAP8[$3347 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3347 >> 0] = $3349;
  if (!($3349 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i27);
  HEAP32[$6 >> 2] = 0;
 }
 $3351 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3351 >> 1] = 15;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 29;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 51; else {
  $3356 = HEAP32[918918] | 0;
  if (($3356 | 0) == (HEAP32[918916] | 0)) label = 51; else {
   $$lcssa$i$i39 = 3675672;
   $$lcssa8$i$i38 = $3356;
   label = 52;
  }
 }
 do if ((label | 0) == 51) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3363 = HEAP32[918924] | 0;
   if (($3363 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i39 = 3675696;
    $$lcssa8$i$i38 = $3363;
    label = 52;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3368 = HEAP32[918930] | 0;
   if (($3368 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i39 = 3675720;
    $$lcssa8$i$i38 = $3368;
    label = 52;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3373 = HEAP32[918936] | 0;
   if (($3373 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i39 = 3675744;
    $$lcssa8$i$i38 = $3373;
    label = 52;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3378 = HEAP32[918942] | 0;
   if (($3378 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i39 = 3675768;
    $$lcssa8$i$i38 = $3378;
    label = 52;
    break;
   }
  }
  $$3$i$i40 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 52) {
  $3361 = $$lcssa8$i$i38 + -4 | 0;
  HEAP32[$$lcssa$i$i39 >> 2] = $3361;
  $$3$i$i40 = HEAP32[$3361 >> 2] | 0;
 }
 $3382 = $$3$i$i40 + 52 | 0;
 HEAP16[$$3$i$i40 >> 1] = 1024;
 HEAP16[$$3$i$i40 + 2 >> 1] = 15;
 HEAP8[$$3$i$i40 + 4 >> 0] = 16;
 HEAP8[$$3$i$i40 + 5 >> 0] = 1;
 HEAP32[$$3$i$i40 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i40 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i40 + 16 >> 2] = $3382;
 HEAP32[$$3$i$i40 + 20 >> 2] = 0;
 HEAP32[$$3$i$i40 + 24 >> 2] = 0;
 HEAP8[$$3$i$i40 + 48 >> 0] = 0;
 HEAP32[$7 >> 2] = $$3$i$i40;
 _memcpy($3382 | 0, 3710028, 2048) | 0;
 _memcpy($$3$i$i40 + 2100 | 0, 3712076, 2048) | 0;
 _memcpy($$3$i$i40 + 4148 | 0, 3714124, 2048) | 0;
 _memcpy($$3$i$i40 + 6196 | 0, 3716172, 2048) | 0;
 _memcpy($$3$i$i40 + 8244 | 0, 3718220, 2048) | 0;
 _memcpy($$3$i$i40 + 10292 | 0, 3720268, 2048) | 0;
 _memcpy($$3$i$i40 + 12340 | 0, 3722316, 2048) | 0;
 _memcpy($$3$i$i40 + 14388 | 0, 3724364, 2048) | 0;
 _memcpy($$3$i$i40 + 16436 | 0, 3726412, 2048) | 0;
 _memcpy($$3$i$i40 + 18484 | 0, 3728460, 2048) | 0;
 _memcpy($$3$i$i40 + 20532 | 0, 3730508, 2048) | 0;
 _memcpy($$3$i$i40 + 22580 | 0, 3732556, 2048) | 0;
 _memcpy($$3$i$i40 + 24628 | 0, 3734604, 2048) | 0;
 _memcpy($$3$i$i40 + 26676 | 0, 3736652, 2048) | 0;
 _memcpy($$3$i$i40 + 28724 | 0, 3738700, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $7);
 if ($$3$i$i40 | 0) {
  $3407 = $$3$i$i40 + 5 | 0;
  $3409 = (HEAP8[$3407 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3407 >> 0] = $3409;
  if (!($3409 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i40);
  HEAP32[$7 >> 2] = 0;
 }
 $3411 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3411 >> 1] = 30;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 44;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 67; else {
  $3416 = HEAP32[918918] | 0;
  if (($3416 | 0) == (HEAP32[918916] | 0)) label = 67; else {
   $$lcssa$i$i52 = 3675672;
   $$lcssa8$i$i51 = $3416;
   label = 68;
  }
 }
 do if ((label | 0) == 67) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3423 = HEAP32[918924] | 0;
   if (($3423 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i52 = 3675696;
    $$lcssa8$i$i51 = $3423;
    label = 68;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3428 = HEAP32[918930] | 0;
   if (($3428 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i52 = 3675720;
    $$lcssa8$i$i51 = $3428;
    label = 68;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3433 = HEAP32[918936] | 0;
   if (($3433 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i52 = 3675744;
    $$lcssa8$i$i51 = $3433;
    label = 68;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3438 = HEAP32[918942] | 0;
   if (($3438 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i52 = 3675768;
    $$lcssa8$i$i51 = $3438;
    label = 68;
    break;
   }
  }
  $$3$i$i53 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 68) {
  $3421 = $$lcssa8$i$i51 + -4 | 0;
  HEAP32[$$lcssa$i$i52 >> 2] = $3421;
  $$3$i$i53 = HEAP32[$3421 >> 2] | 0;
 }
 $3442 = $$3$i$i53 + 52 | 0;
 HEAP16[$$3$i$i53 >> 1] = 1024;
 HEAP16[$$3$i$i53 + 2 >> 1] = 15;
 HEAP8[$$3$i$i53 + 4 >> 0] = 16;
 HEAP8[$$3$i$i53 + 5 >> 0] = 1;
 HEAP32[$$3$i$i53 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i53 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i53 + 16 >> 2] = $3442;
 HEAP32[$$3$i$i53 + 20 >> 2] = 0;
 HEAP32[$$3$i$i53 + 24 >> 2] = 0;
 HEAP8[$$3$i$i53 + 48 >> 0] = 0;
 HEAP32[$8 >> 2] = $$3$i$i53;
 _memcpy($3442 | 0, 3740748, 2048) | 0;
 _memcpy($$3$i$i53 + 2100 | 0, 3742796, 2048) | 0;
 _memcpy($$3$i$i53 + 4148 | 0, 3744844, 2048) | 0;
 _memcpy($$3$i$i53 + 6196 | 0, 3746892, 2048) | 0;
 _memcpy($$3$i$i53 + 8244 | 0, 3748940, 2048) | 0;
 _memcpy($$3$i$i53 + 10292 | 0, 3750988, 2048) | 0;
 _memcpy($$3$i$i53 + 12340 | 0, 3753036, 2048) | 0;
 _memcpy($$3$i$i53 + 14388 | 0, 3755084, 2048) | 0;
 _memcpy($$3$i$i53 + 16436 | 0, 3757132, 2048) | 0;
 _memcpy($$3$i$i53 + 18484 | 0, 3759180, 2048) | 0;
 _memcpy($$3$i$i53 + 20532 | 0, 3761228, 2048) | 0;
 _memcpy($$3$i$i53 + 22580 | 0, 3763276, 2048) | 0;
 _memcpy($$3$i$i53 + 24628 | 0, 3765324, 2048) | 0;
 _memcpy($$3$i$i53 + 26676 | 0, 3767372, 2048) | 0;
 _memcpy($$3$i$i53 + 28724 | 0, 3769420, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $8);
 if ($$3$i$i53 | 0) {
  $3467 = $$3$i$i53 + 5 | 0;
  $3469 = (HEAP8[$3467 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3467 >> 0] = $3469;
  if (!($3469 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i53);
  HEAP32[$8 >> 2] = 0;
 }
 $3471 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3471 >> 1] = 45;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 59;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 83; else {
  $3476 = HEAP32[918918] | 0;
  if (($3476 | 0) == (HEAP32[918916] | 0)) label = 83; else {
   $$lcssa$i$i65 = 3675672;
   $$lcssa8$i$i64 = $3476;
   label = 84;
  }
 }
 do if ((label | 0) == 83) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3483 = HEAP32[918924] | 0;
   if (($3483 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i65 = 3675696;
    $$lcssa8$i$i64 = $3483;
    label = 84;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3488 = HEAP32[918930] | 0;
   if (($3488 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i65 = 3675720;
    $$lcssa8$i$i64 = $3488;
    label = 84;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3493 = HEAP32[918936] | 0;
   if (($3493 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i65 = 3675744;
    $$lcssa8$i$i64 = $3493;
    label = 84;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3498 = HEAP32[918942] | 0;
   if (($3498 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i65 = 3675768;
    $$lcssa8$i$i64 = $3498;
    label = 84;
    break;
   }
  }
  $$3$i$i66 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 84) {
  $3481 = $$lcssa8$i$i64 + -4 | 0;
  HEAP32[$$lcssa$i$i65 >> 2] = $3481;
  $$3$i$i66 = HEAP32[$3481 >> 2] | 0;
 }
 $3502 = $$3$i$i66 + 52 | 0;
 HEAP16[$$3$i$i66 >> 1] = 1024;
 HEAP16[$$3$i$i66 + 2 >> 1] = 15;
 HEAP8[$$3$i$i66 + 4 >> 0] = 16;
 HEAP8[$$3$i$i66 + 5 >> 0] = 1;
 HEAP32[$$3$i$i66 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i66 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i66 + 16 >> 2] = $3502;
 HEAP32[$$3$i$i66 + 20 >> 2] = 0;
 HEAP32[$$3$i$i66 + 24 >> 2] = 0;
 HEAP8[$$3$i$i66 + 48 >> 0] = 0;
 HEAP32[$9 >> 2] = $$3$i$i66;
 _memcpy($3502 | 0, 3771468, 2048) | 0;
 _memcpy($$3$i$i66 + 2100 | 0, 3773516, 2048) | 0;
 _memcpy($$3$i$i66 + 4148 | 0, 3775564, 2048) | 0;
 _memcpy($$3$i$i66 + 6196 | 0, 3777612, 2048) | 0;
 _memcpy($$3$i$i66 + 8244 | 0, 3779660, 2048) | 0;
 _memcpy($$3$i$i66 + 10292 | 0, 3781708, 2048) | 0;
 _memcpy($$3$i$i66 + 12340 | 0, 3783756, 2048) | 0;
 _memcpy($$3$i$i66 + 14388 | 0, 3785804, 2048) | 0;
 _memcpy($$3$i$i66 + 16436 | 0, 3787852, 2048) | 0;
 _memcpy($$3$i$i66 + 18484 | 0, 3789900, 2048) | 0;
 _memcpy($$3$i$i66 + 20532 | 0, 3791948, 2048) | 0;
 _memcpy($$3$i$i66 + 22580 | 0, 3793996, 2048) | 0;
 _memcpy($$3$i$i66 + 24628 | 0, 3796044, 2048) | 0;
 _memcpy($$3$i$i66 + 26676 | 0, 3798092, 2048) | 0;
 _memcpy($$3$i$i66 + 28724 | 0, 3800140, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $9);
 if ($$3$i$i66 | 0) {
  $3527 = $$3$i$i66 + 5 | 0;
  $3529 = (HEAP8[$3527 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3527 >> 0] = $3529;
  if (!($3529 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i66);
  HEAP32[$9 >> 2] = 0;
 }
 $3531 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3531 >> 1] = 60;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 74;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 99; else {
  $3536 = HEAP32[918918] | 0;
  if (($3536 | 0) == (HEAP32[918916] | 0)) label = 99; else {
   $$lcssa$i$i78 = 3675672;
   $$lcssa8$i$i77 = $3536;
   label = 100;
  }
 }
 do if ((label | 0) == 99) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3543 = HEAP32[918924] | 0;
   if (($3543 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i78 = 3675696;
    $$lcssa8$i$i77 = $3543;
    label = 100;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3548 = HEAP32[918930] | 0;
   if (($3548 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i78 = 3675720;
    $$lcssa8$i$i77 = $3548;
    label = 100;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3553 = HEAP32[918936] | 0;
   if (($3553 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i78 = 3675744;
    $$lcssa8$i$i77 = $3553;
    label = 100;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3558 = HEAP32[918942] | 0;
   if (($3558 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i78 = 3675768;
    $$lcssa8$i$i77 = $3558;
    label = 100;
    break;
   }
  }
  $$3$i$i79 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 100) {
  $3541 = $$lcssa8$i$i77 + -4 | 0;
  HEAP32[$$lcssa$i$i78 >> 2] = $3541;
  $$3$i$i79 = HEAP32[$3541 >> 2] | 0;
 }
 $3562 = $$3$i$i79 + 52 | 0;
 HEAP16[$$3$i$i79 >> 1] = 1024;
 HEAP16[$$3$i$i79 + 2 >> 1] = 15;
 HEAP8[$$3$i$i79 + 4 >> 0] = 16;
 HEAP8[$$3$i$i79 + 5 >> 0] = 1;
 HEAP32[$$3$i$i79 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i79 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i79 + 16 >> 2] = $3562;
 HEAP32[$$3$i$i79 + 20 >> 2] = 0;
 HEAP32[$$3$i$i79 + 24 >> 2] = 0;
 HEAP8[$$3$i$i79 + 48 >> 0] = 0;
 HEAP32[$10 >> 2] = $$3$i$i79;
 _memcpy($3562 | 0, 3802188, 2048) | 0;
 _memcpy($$3$i$i79 + 2100 | 0, 3804236, 2048) | 0;
 _memcpy($$3$i$i79 + 4148 | 0, 3806284, 2048) | 0;
 _memcpy($$3$i$i79 + 6196 | 0, 3808332, 2048) | 0;
 _memcpy($$3$i$i79 + 8244 | 0, 3810380, 2048) | 0;
 _memcpy($$3$i$i79 + 10292 | 0, 3812428, 2048) | 0;
 _memcpy($$3$i$i79 + 12340 | 0, 3814476, 2048) | 0;
 _memcpy($$3$i$i79 + 14388 | 0, 3816524, 2048) | 0;
 _memcpy($$3$i$i79 + 16436 | 0, 3818572, 2048) | 0;
 _memcpy($$3$i$i79 + 18484 | 0, 3820620, 2048) | 0;
 _memcpy($$3$i$i79 + 20532 | 0, 3822668, 2048) | 0;
 _memcpy($$3$i$i79 + 22580 | 0, 3824716, 2048) | 0;
 _memcpy($$3$i$i79 + 24628 | 0, 3826764, 2048) | 0;
 _memcpy($$3$i$i79 + 26676 | 0, 3828812, 2048) | 0;
 _memcpy($$3$i$i79 + 28724 | 0, 3830860, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $10);
 if ($$3$i$i79 | 0) {
  $3587 = $$3$i$i79 + 5 | 0;
  $3589 = (HEAP8[$3587 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3587 >> 0] = $3589;
  if (!($3589 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i79);
  HEAP32[$10 >> 2] = 0;
 }
 $3591 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3591 >> 1] = 75;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 89;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 115; else {
  $3596 = HEAP32[918918] | 0;
  if (($3596 | 0) == (HEAP32[918916] | 0)) label = 115; else {
   $$lcssa$i$i91 = 3675672;
   $$lcssa8$i$i90 = $3596;
   label = 116;
  }
 }
 do if ((label | 0) == 115) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3603 = HEAP32[918924] | 0;
   if (($3603 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i91 = 3675696;
    $$lcssa8$i$i90 = $3603;
    label = 116;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3608 = HEAP32[918930] | 0;
   if (($3608 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i91 = 3675720;
    $$lcssa8$i$i90 = $3608;
    label = 116;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3613 = HEAP32[918936] | 0;
   if (($3613 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i91 = 3675744;
    $$lcssa8$i$i90 = $3613;
    label = 116;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3618 = HEAP32[918942] | 0;
   if (($3618 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i91 = 3675768;
    $$lcssa8$i$i90 = $3618;
    label = 116;
    break;
   }
  }
  $$3$i$i92 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 116) {
  $3601 = $$lcssa8$i$i90 + -4 | 0;
  HEAP32[$$lcssa$i$i91 >> 2] = $3601;
  $$3$i$i92 = HEAP32[$3601 >> 2] | 0;
 }
 $3622 = $$3$i$i92 + 52 | 0;
 HEAP16[$$3$i$i92 >> 1] = 1024;
 HEAP16[$$3$i$i92 + 2 >> 1] = 15;
 HEAP8[$$3$i$i92 + 4 >> 0] = 16;
 HEAP8[$$3$i$i92 + 5 >> 0] = 1;
 HEAP32[$$3$i$i92 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i92 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i92 + 16 >> 2] = $3622;
 HEAP32[$$3$i$i92 + 20 >> 2] = 0;
 HEAP32[$$3$i$i92 + 24 >> 2] = 0;
 HEAP8[$$3$i$i92 + 48 >> 0] = 0;
 HEAP32[$11 >> 2] = $$3$i$i92;
 _memcpy($3622 | 0, 3832908, 2048) | 0;
 _memcpy($$3$i$i92 + 2100 | 0, 3834956, 2048) | 0;
 _memcpy($$3$i$i92 + 4148 | 0, 3837004, 2048) | 0;
 _memcpy($$3$i$i92 + 6196 | 0, 3839052, 2048) | 0;
 _memcpy($$3$i$i92 + 8244 | 0, 3841100, 2048) | 0;
 _memcpy($$3$i$i92 + 10292 | 0, 3843148, 2048) | 0;
 _memcpy($$3$i$i92 + 12340 | 0, 3845196, 2048) | 0;
 _memcpy($$3$i$i92 + 14388 | 0, 3847244, 2048) | 0;
 _memcpy($$3$i$i92 + 16436 | 0, 3849292, 2048) | 0;
 _memcpy($$3$i$i92 + 18484 | 0, 3851340, 2048) | 0;
 _memcpy($$3$i$i92 + 20532 | 0, 3853388, 2048) | 0;
 _memcpy($$3$i$i92 + 22580 | 0, 3855436, 2048) | 0;
 _memcpy($$3$i$i92 + 24628 | 0, 3857484, 2048) | 0;
 _memcpy($$3$i$i92 + 26676 | 0, 3859532, 2048) | 0;
 _memcpy($$3$i$i92 + 28724 | 0, 3861580, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $11);
 if ($$3$i$i92 | 0) {
  $3647 = $$3$i$i92 + 5 | 0;
  $3649 = (HEAP8[$3647 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3647 >> 0] = $3649;
  if (!($3649 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i92);
  HEAP32[$11 >> 2] = 0;
 }
 $3651 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3651 >> 1] = 90;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 104;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 131; else {
  $3656 = HEAP32[918918] | 0;
  if (($3656 | 0) == (HEAP32[918916] | 0)) label = 131; else {
   $$lcssa$i$i104 = 3675672;
   $$lcssa8$i$i103 = $3656;
   label = 132;
  }
 }
 do if ((label | 0) == 131) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3663 = HEAP32[918924] | 0;
   if (($3663 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i104 = 3675696;
    $$lcssa8$i$i103 = $3663;
    label = 132;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3668 = HEAP32[918930] | 0;
   if (($3668 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i104 = 3675720;
    $$lcssa8$i$i103 = $3668;
    label = 132;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3673 = HEAP32[918936] | 0;
   if (($3673 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i104 = 3675744;
    $$lcssa8$i$i103 = $3673;
    label = 132;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3678 = HEAP32[918942] | 0;
   if (($3678 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i104 = 3675768;
    $$lcssa8$i$i103 = $3678;
    label = 132;
    break;
   }
  }
  $$3$i$i105 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 132) {
  $3661 = $$lcssa8$i$i103 + -4 | 0;
  HEAP32[$$lcssa$i$i104 >> 2] = $3661;
  $$3$i$i105 = HEAP32[$3661 >> 2] | 0;
 }
 $3682 = $$3$i$i105 + 52 | 0;
 HEAP16[$$3$i$i105 >> 1] = 1024;
 HEAP16[$$3$i$i105 + 2 >> 1] = 15;
 HEAP8[$$3$i$i105 + 4 >> 0] = 16;
 HEAP8[$$3$i$i105 + 5 >> 0] = 1;
 HEAP32[$$3$i$i105 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i105 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i105 + 16 >> 2] = $3682;
 HEAP32[$$3$i$i105 + 20 >> 2] = 0;
 HEAP32[$$3$i$i105 + 24 >> 2] = 0;
 HEAP8[$$3$i$i105 + 48 >> 0] = 0;
 HEAP32[$12 >> 2] = $$3$i$i105;
 _memcpy($3682 | 0, 3863628, 2048) | 0;
 _memcpy($$3$i$i105 + 2100 | 0, 3865676, 2048) | 0;
 _memcpy($$3$i$i105 + 4148 | 0, 3867724, 2048) | 0;
 _memcpy($$3$i$i105 + 6196 | 0, 3869772, 2048) | 0;
 _memcpy($$3$i$i105 + 8244 | 0, 3871820, 2048) | 0;
 _memcpy($$3$i$i105 + 10292 | 0, 3873868, 2048) | 0;
 _memcpy($$3$i$i105 + 12340 | 0, 3875916, 2048) | 0;
 _memcpy($$3$i$i105 + 14388 | 0, 3877964, 2048) | 0;
 _memcpy($$3$i$i105 + 16436 | 0, 3880012, 2048) | 0;
 _memcpy($$3$i$i105 + 18484 | 0, 3882060, 2048) | 0;
 _memcpy($$3$i$i105 + 20532 | 0, 3884108, 2048) | 0;
 _memcpy($$3$i$i105 + 22580 | 0, 3886156, 2048) | 0;
 _memcpy($$3$i$i105 + 24628 | 0, 3888204, 2048) | 0;
 _memcpy($$3$i$i105 + 26676 | 0, 3890252, 2048) | 0;
 _memcpy($$3$i$i105 + 28724 | 0, 3892300, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $12);
 if ($$3$i$i105 | 0) {
  $3707 = $$3$i$i105 + 5 | 0;
  $3709 = (HEAP8[$3707 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3707 >> 0] = $3709;
  if (!($3709 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i105);
  HEAP32[$12 >> 2] = 0;
 }
 $3711 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3711 >> 1] = 105;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 119;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 147; else {
  $3716 = HEAP32[918918] | 0;
  if (($3716 | 0) == (HEAP32[918916] | 0)) label = 147; else {
   $$lcssa$i$i117 = 3675672;
   $$lcssa8$i$i116 = $3716;
   label = 148;
  }
 }
 do if ((label | 0) == 147) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3723 = HEAP32[918924] | 0;
   if (($3723 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i117 = 3675696;
    $$lcssa8$i$i116 = $3723;
    label = 148;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3728 = HEAP32[918930] | 0;
   if (($3728 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i117 = 3675720;
    $$lcssa8$i$i116 = $3728;
    label = 148;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3733 = HEAP32[918936] | 0;
   if (($3733 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i117 = 3675744;
    $$lcssa8$i$i116 = $3733;
    label = 148;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3738 = HEAP32[918942] | 0;
   if (($3738 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i117 = 3675768;
    $$lcssa8$i$i116 = $3738;
    label = 148;
    break;
   }
  }
  $$3$i$i118 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 148) {
  $3721 = $$lcssa8$i$i116 + -4 | 0;
  HEAP32[$$lcssa$i$i117 >> 2] = $3721;
  $$3$i$i118 = HEAP32[$3721 >> 2] | 0;
 }
 $3742 = $$3$i$i118 + 52 | 0;
 HEAP16[$$3$i$i118 >> 1] = 1024;
 HEAP16[$$3$i$i118 + 2 >> 1] = 15;
 HEAP8[$$3$i$i118 + 4 >> 0] = 16;
 HEAP8[$$3$i$i118 + 5 >> 0] = 1;
 HEAP32[$$3$i$i118 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i118 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i118 + 16 >> 2] = $3742;
 HEAP32[$$3$i$i118 + 20 >> 2] = 0;
 HEAP32[$$3$i$i118 + 24 >> 2] = 0;
 HEAP8[$$3$i$i118 + 48 >> 0] = 0;
 HEAP32[$13 >> 2] = $$3$i$i118;
 _memcpy($3742 | 0, 3894348, 2048) | 0;
 _memcpy($$3$i$i118 + 2100 | 0, 3896396, 2048) | 0;
 _memcpy($$3$i$i118 + 4148 | 0, 3898444, 2048) | 0;
 _memcpy($$3$i$i118 + 6196 | 0, 3900492, 2048) | 0;
 _memcpy($$3$i$i118 + 8244 | 0, 3902540, 2048) | 0;
 _memcpy($$3$i$i118 + 10292 | 0, 3904588, 2048) | 0;
 _memcpy($$3$i$i118 + 12340 | 0, 3906636, 2048) | 0;
 _memcpy($$3$i$i118 + 14388 | 0, 3908684, 2048) | 0;
 _memcpy($$3$i$i118 + 16436 | 0, 3910732, 2048) | 0;
 _memcpy($$3$i$i118 + 18484 | 0, 3912780, 2048) | 0;
 _memcpy($$3$i$i118 + 20532 | 0, 3914828, 2048) | 0;
 _memcpy($$3$i$i118 + 22580 | 0, 3916876, 2048) | 0;
 _memcpy($$3$i$i118 + 24628 | 0, 3918924, 2048) | 0;
 _memcpy($$3$i$i118 + 26676 | 0, 3920972, 2048) | 0;
 _memcpy($$3$i$i118 + 28724 | 0, 3923020, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $13);
 if ($$3$i$i118 | 0) {
  $3767 = $$3$i$i118 + 5 | 0;
  $3769 = (HEAP8[$3767 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3767 >> 0] = $3769;
  if (!($3769 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i118);
  HEAP32[$13 >> 2] = 0;
 }
 $3771 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3771 >> 1] = 120;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 134;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 163; else {
  $3776 = HEAP32[918918] | 0;
  if (($3776 | 0) == (HEAP32[918916] | 0)) label = 163; else {
   $$lcssa$i$i130 = 3675672;
   $$lcssa8$i$i129 = $3776;
   label = 164;
  }
 }
 do if ((label | 0) == 163) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3783 = HEAP32[918924] | 0;
   if (($3783 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i130 = 3675696;
    $$lcssa8$i$i129 = $3783;
    label = 164;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3788 = HEAP32[918930] | 0;
   if (($3788 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i130 = 3675720;
    $$lcssa8$i$i129 = $3788;
    label = 164;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3793 = HEAP32[918936] | 0;
   if (($3793 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i130 = 3675744;
    $$lcssa8$i$i129 = $3793;
    label = 164;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3798 = HEAP32[918942] | 0;
   if (($3798 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i130 = 3675768;
    $$lcssa8$i$i129 = $3798;
    label = 164;
    break;
   }
  }
  $$3$i$i131 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 164) {
  $3781 = $$lcssa8$i$i129 + -4 | 0;
  HEAP32[$$lcssa$i$i130 >> 2] = $3781;
  $$3$i$i131 = HEAP32[$3781 >> 2] | 0;
 }
 $3802 = $$3$i$i131 + 52 | 0;
 HEAP16[$$3$i$i131 >> 1] = 1024;
 HEAP16[$$3$i$i131 + 2 >> 1] = 15;
 HEAP8[$$3$i$i131 + 4 >> 0] = 16;
 HEAP8[$$3$i$i131 + 5 >> 0] = 1;
 HEAP32[$$3$i$i131 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i131 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i131 + 16 >> 2] = $3802;
 HEAP32[$$3$i$i131 + 20 >> 2] = 0;
 HEAP32[$$3$i$i131 + 24 >> 2] = 0;
 HEAP8[$$3$i$i131 + 48 >> 0] = 0;
 HEAP32[$14 >> 2] = $$3$i$i131;
 _memcpy($3802 | 0, 3925068, 2048) | 0;
 _memcpy($$3$i$i131 + 2100 | 0, 3927116, 2048) | 0;
 _memcpy($$3$i$i131 + 4148 | 0, 3929164, 2048) | 0;
 _memcpy($$3$i$i131 + 6196 | 0, 3931212, 2048) | 0;
 _memcpy($$3$i$i131 + 8244 | 0, 3933260, 2048) | 0;
 _memcpy($$3$i$i131 + 10292 | 0, 3935308, 2048) | 0;
 _memcpy($$3$i$i131 + 12340 | 0, 3937356, 2048) | 0;
 _memcpy($$3$i$i131 + 14388 | 0, 3939404, 2048) | 0;
 _memcpy($$3$i$i131 + 16436 | 0, 3941452, 2048) | 0;
 _memcpy($$3$i$i131 + 18484 | 0, 3943500, 2048) | 0;
 _memcpy($$3$i$i131 + 20532 | 0, 3945548, 2048) | 0;
 _memcpy($$3$i$i131 + 22580 | 0, 3947596, 2048) | 0;
 _memcpy($$3$i$i131 + 24628 | 0, 3949644, 2048) | 0;
 _memcpy($$3$i$i131 + 26676 | 0, 3951692, 2048) | 0;
 _memcpy($$3$i$i131 + 28724 | 0, 3953740, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $14);
 if ($$3$i$i131 | 0) {
  $3827 = $$3$i$i131 + 5 | 0;
  $3829 = (HEAP8[$3827 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3827 >> 0] = $3829;
  if (!($3829 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i131);
  HEAP32[$14 >> 2] = 0;
 }
 $3831 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3831 >> 1] = 135;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 149;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 179; else {
  $3836 = HEAP32[918918] | 0;
  if (($3836 | 0) == (HEAP32[918916] | 0)) label = 179; else {
   $$lcssa$i$i143 = 3675672;
   $$lcssa8$i$i142 = $3836;
   label = 180;
  }
 }
 do if ((label | 0) == 179) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3843 = HEAP32[918924] | 0;
   if (($3843 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i143 = 3675696;
    $$lcssa8$i$i142 = $3843;
    label = 180;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3848 = HEAP32[918930] | 0;
   if (($3848 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i143 = 3675720;
    $$lcssa8$i$i142 = $3848;
    label = 180;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3853 = HEAP32[918936] | 0;
   if (($3853 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i143 = 3675744;
    $$lcssa8$i$i142 = $3853;
    label = 180;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3858 = HEAP32[918942] | 0;
   if (($3858 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i143 = 3675768;
    $$lcssa8$i$i142 = $3858;
    label = 180;
    break;
   }
  }
  $$3$i$i144 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 180) {
  $3841 = $$lcssa8$i$i142 + -4 | 0;
  HEAP32[$$lcssa$i$i143 >> 2] = $3841;
  $$3$i$i144 = HEAP32[$3841 >> 2] | 0;
 }
 $3862 = $$3$i$i144 + 52 | 0;
 HEAP16[$$3$i$i144 >> 1] = 1024;
 HEAP16[$$3$i$i144 + 2 >> 1] = 15;
 HEAP8[$$3$i$i144 + 4 >> 0] = 16;
 HEAP8[$$3$i$i144 + 5 >> 0] = 1;
 HEAP32[$$3$i$i144 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i144 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i144 + 16 >> 2] = $3862;
 HEAP32[$$3$i$i144 + 20 >> 2] = 0;
 HEAP32[$$3$i$i144 + 24 >> 2] = 0;
 HEAP8[$$3$i$i144 + 48 >> 0] = 0;
 HEAP32[$15 >> 2] = $$3$i$i144;
 _memcpy($3862 | 0, 3955788, 2048) | 0;
 _memcpy($$3$i$i144 + 2100 | 0, 3957836, 2048) | 0;
 _memcpy($$3$i$i144 + 4148 | 0, 3959884, 2048) | 0;
 _memcpy($$3$i$i144 + 6196 | 0, 3961932, 2048) | 0;
 _memcpy($$3$i$i144 + 8244 | 0, 3963980, 2048) | 0;
 _memcpy($$3$i$i144 + 10292 | 0, 3966028, 2048) | 0;
 _memcpy($$3$i$i144 + 12340 | 0, 3968076, 2048) | 0;
 _memcpy($$3$i$i144 + 14388 | 0, 3970124, 2048) | 0;
 _memcpy($$3$i$i144 + 16436 | 0, 3972172, 2048) | 0;
 _memcpy($$3$i$i144 + 18484 | 0, 3974220, 2048) | 0;
 _memcpy($$3$i$i144 + 20532 | 0, 3976268, 2048) | 0;
 _memcpy($$3$i$i144 + 22580 | 0, 3978316, 2048) | 0;
 _memcpy($$3$i$i144 + 24628 | 0, 3980364, 2048) | 0;
 _memcpy($$3$i$i144 + 26676 | 0, 3982412, 2048) | 0;
 _memcpy($$3$i$i144 + 28724 | 0, 3984460, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $15);
 if ($$3$i$i144 | 0) {
  $3887 = $$3$i$i144 + 5 | 0;
  $3889 = (HEAP8[$3887 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3887 >> 0] = $3889;
  if (!($3889 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i144);
  HEAP32[$15 >> 2] = 0;
 }
 $3891 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3891 >> 1] = 150;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 164;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 195; else {
  $3896 = HEAP32[918918] | 0;
  if (($3896 | 0) == (HEAP32[918916] | 0)) label = 195; else {
   $$lcssa$i$i156 = 3675672;
   $$lcssa8$i$i155 = $3896;
   label = 196;
  }
 }
 do if ((label | 0) == 195) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3903 = HEAP32[918924] | 0;
   if (($3903 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i156 = 3675696;
    $$lcssa8$i$i155 = $3903;
    label = 196;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3908 = HEAP32[918930] | 0;
   if (($3908 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i156 = 3675720;
    $$lcssa8$i$i155 = $3908;
    label = 196;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3913 = HEAP32[918936] | 0;
   if (($3913 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i156 = 3675744;
    $$lcssa8$i$i155 = $3913;
    label = 196;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3918 = HEAP32[918942] | 0;
   if (($3918 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i156 = 3675768;
    $$lcssa8$i$i155 = $3918;
    label = 196;
    break;
   }
  }
  $$3$i$i157 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 196) {
  $3901 = $$lcssa8$i$i155 + -4 | 0;
  HEAP32[$$lcssa$i$i156 >> 2] = $3901;
  $$3$i$i157 = HEAP32[$3901 >> 2] | 0;
 }
 $3922 = $$3$i$i157 + 52 | 0;
 HEAP16[$$3$i$i157 >> 1] = 1024;
 HEAP16[$$3$i$i157 + 2 >> 1] = 15;
 HEAP8[$$3$i$i157 + 4 >> 0] = 16;
 HEAP8[$$3$i$i157 + 5 >> 0] = 1;
 HEAP32[$$3$i$i157 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i157 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i157 + 16 >> 2] = $3922;
 HEAP32[$$3$i$i157 + 20 >> 2] = 0;
 HEAP32[$$3$i$i157 + 24 >> 2] = 0;
 HEAP8[$$3$i$i157 + 48 >> 0] = 0;
 HEAP32[$16 >> 2] = $$3$i$i157;
 _memcpy($3922 | 0, 3986508, 2048) | 0;
 _memcpy($$3$i$i157 + 2100 | 0, 3988556, 2048) | 0;
 _memcpy($$3$i$i157 + 4148 | 0, 3990604, 2048) | 0;
 _memcpy($$3$i$i157 + 6196 | 0, 3992652, 2048) | 0;
 _memcpy($$3$i$i157 + 8244 | 0, 3994700, 2048) | 0;
 _memcpy($$3$i$i157 + 10292 | 0, 3996748, 2048) | 0;
 _memcpy($$3$i$i157 + 12340 | 0, 3998796, 2048) | 0;
 _memcpy($$3$i$i157 + 14388 | 0, 4000844, 2048) | 0;
 _memcpy($$3$i$i157 + 16436 | 0, 4002892, 2048) | 0;
 _memcpy($$3$i$i157 + 18484 | 0, 4004940, 2048) | 0;
 _memcpy($$3$i$i157 + 20532 | 0, 4006988, 2048) | 0;
 _memcpy($$3$i$i157 + 22580 | 0, 4009036, 2048) | 0;
 _memcpy($$3$i$i157 + 24628 | 0, 4011084, 2048) | 0;
 _memcpy($$3$i$i157 + 26676 | 0, 4013132, 2048) | 0;
 _memcpy($$3$i$i157 + 28724 | 0, 4015180, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $16);
 if ($$3$i$i157 | 0) {
  $3947 = $$3$i$i157 + 5 | 0;
  $3949 = (HEAP8[$3947 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$3947 >> 0] = $3949;
  if (!($3949 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i157);
  HEAP32[$16 >> 2] = 0;
 }
 $3951 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$3951 >> 1] = 165;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 179;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 211; else {
  $3956 = HEAP32[918918] | 0;
  if (($3956 | 0) == (HEAP32[918916] | 0)) label = 211; else {
   $$lcssa$i$i169 = 3675672;
   $$lcssa8$i$i168 = $3956;
   label = 212;
  }
 }
 do if ((label | 0) == 211) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $3963 = HEAP32[918924] | 0;
   if (($3963 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i169 = 3675696;
    $$lcssa8$i$i168 = $3963;
    label = 212;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $3968 = HEAP32[918930] | 0;
   if (($3968 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i169 = 3675720;
    $$lcssa8$i$i168 = $3968;
    label = 212;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $3973 = HEAP32[918936] | 0;
   if (($3973 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i169 = 3675744;
    $$lcssa8$i$i168 = $3973;
    label = 212;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $3978 = HEAP32[918942] | 0;
   if (($3978 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i169 = 3675768;
    $$lcssa8$i$i168 = $3978;
    label = 212;
    break;
   }
  }
  $$3$i$i170 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 212) {
  $3961 = $$lcssa8$i$i168 + -4 | 0;
  HEAP32[$$lcssa$i$i169 >> 2] = $3961;
  $$3$i$i170 = HEAP32[$3961 >> 2] | 0;
 }
 $3982 = $$3$i$i170 + 52 | 0;
 HEAP16[$$3$i$i170 >> 1] = 1024;
 HEAP16[$$3$i$i170 + 2 >> 1] = 15;
 HEAP8[$$3$i$i170 + 4 >> 0] = 16;
 HEAP8[$$3$i$i170 + 5 >> 0] = 1;
 HEAP32[$$3$i$i170 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i170 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i170 + 16 >> 2] = $3982;
 HEAP32[$$3$i$i170 + 20 >> 2] = 0;
 HEAP32[$$3$i$i170 + 24 >> 2] = 0;
 HEAP8[$$3$i$i170 + 48 >> 0] = 0;
 HEAP32[$17 >> 2] = $$3$i$i170;
 _memcpy($3982 | 0, 4017228, 2048) | 0;
 _memcpy($$3$i$i170 + 2100 | 0, 4019276, 2048) | 0;
 _memcpy($$3$i$i170 + 4148 | 0, 4021324, 2048) | 0;
 _memcpy($$3$i$i170 + 6196 | 0, 4023372, 2048) | 0;
 _memcpy($$3$i$i170 + 8244 | 0, 4025420, 2048) | 0;
 _memcpy($$3$i$i170 + 10292 | 0, 4027468, 2048) | 0;
 _memcpy($$3$i$i170 + 12340 | 0, 4029516, 2048) | 0;
 _memcpy($$3$i$i170 + 14388 | 0, 4031564, 2048) | 0;
 _memcpy($$3$i$i170 + 16436 | 0, 4033612, 2048) | 0;
 _memcpy($$3$i$i170 + 18484 | 0, 4035660, 2048) | 0;
 _memcpy($$3$i$i170 + 20532 | 0, 4037708, 2048) | 0;
 _memcpy($$3$i$i170 + 22580 | 0, 4039756, 2048) | 0;
 _memcpy($$3$i$i170 + 24628 | 0, 4041804, 2048) | 0;
 _memcpy($$3$i$i170 + 26676 | 0, 4043852, 2048) | 0;
 _memcpy($$3$i$i170 + 28724 | 0, 4045900, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $17);
 if ($$3$i$i170 | 0) {
  $4007 = $$3$i$i170 + 5 | 0;
  $4009 = (HEAP8[$4007 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4007 >> 0] = $4009;
  if (!($4009 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i170);
  HEAP32[$17 >> 2] = 0;
 }
 $4011 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4011 >> 1] = 180;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 194;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 227; else {
  $4016 = HEAP32[918918] | 0;
  if (($4016 | 0) == (HEAP32[918916] | 0)) label = 227; else {
   $$lcssa$i$i182 = 3675672;
   $$lcssa8$i$i181 = $4016;
   label = 228;
  }
 }
 do if ((label | 0) == 227) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4023 = HEAP32[918924] | 0;
   if (($4023 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i182 = 3675696;
    $$lcssa8$i$i181 = $4023;
    label = 228;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4028 = HEAP32[918930] | 0;
   if (($4028 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i182 = 3675720;
    $$lcssa8$i$i181 = $4028;
    label = 228;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4033 = HEAP32[918936] | 0;
   if (($4033 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i182 = 3675744;
    $$lcssa8$i$i181 = $4033;
    label = 228;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4038 = HEAP32[918942] | 0;
   if (($4038 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i182 = 3675768;
    $$lcssa8$i$i181 = $4038;
    label = 228;
    break;
   }
  }
  $$3$i$i183 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 228) {
  $4021 = $$lcssa8$i$i181 + -4 | 0;
  HEAP32[$$lcssa$i$i182 >> 2] = $4021;
  $$3$i$i183 = HEAP32[$4021 >> 2] | 0;
 }
 $4042 = $$3$i$i183 + 52 | 0;
 HEAP16[$$3$i$i183 >> 1] = 1024;
 HEAP16[$$3$i$i183 + 2 >> 1] = 15;
 HEAP8[$$3$i$i183 + 4 >> 0] = 16;
 HEAP8[$$3$i$i183 + 5 >> 0] = 1;
 HEAP32[$$3$i$i183 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i183 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i183 + 16 >> 2] = $4042;
 HEAP32[$$3$i$i183 + 20 >> 2] = 0;
 HEAP32[$$3$i$i183 + 24 >> 2] = 0;
 HEAP8[$$3$i$i183 + 48 >> 0] = 0;
 HEAP32[$18 >> 2] = $$3$i$i183;
 _memcpy($4042 | 0, 4047948, 2048) | 0;
 _memcpy($$3$i$i183 + 2100 | 0, 4049996, 2048) | 0;
 _memcpy($$3$i$i183 + 4148 | 0, 4052044, 2048) | 0;
 _memcpy($$3$i$i183 + 6196 | 0, 4054092, 2048) | 0;
 _memcpy($$3$i$i183 + 8244 | 0, 4056140, 2048) | 0;
 _memcpy($$3$i$i183 + 10292 | 0, 4058188, 2048) | 0;
 _memcpy($$3$i$i183 + 12340 | 0, 4060236, 2048) | 0;
 _memcpy($$3$i$i183 + 14388 | 0, 4062284, 2048) | 0;
 _memcpy($$3$i$i183 + 16436 | 0, 4064332, 2048) | 0;
 _memcpy($$3$i$i183 + 18484 | 0, 4066380, 2048) | 0;
 _memcpy($$3$i$i183 + 20532 | 0, 4068428, 2048) | 0;
 _memcpy($$3$i$i183 + 22580 | 0, 4070476, 2048) | 0;
 _memcpy($$3$i$i183 + 24628 | 0, 4072524, 2048) | 0;
 _memcpy($$3$i$i183 + 26676 | 0, 4074572, 2048) | 0;
 _memcpy($$3$i$i183 + 28724 | 0, 4076620, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $18);
 if ($$3$i$i183 | 0) {
  $4067 = $$3$i$i183 + 5 | 0;
  $4069 = (HEAP8[$4067 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4067 >> 0] = $4069;
  if (!($4069 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i183);
  HEAP32[$18 >> 2] = 0;
 }
 $4071 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4071 >> 1] = 195;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 209;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 243; else {
  $4076 = HEAP32[918918] | 0;
  if (($4076 | 0) == (HEAP32[918916] | 0)) label = 243; else {
   $$lcssa$i$i195 = 3675672;
   $$lcssa8$i$i194 = $4076;
   label = 244;
  }
 }
 do if ((label | 0) == 243) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4083 = HEAP32[918924] | 0;
   if (($4083 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i195 = 3675696;
    $$lcssa8$i$i194 = $4083;
    label = 244;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4088 = HEAP32[918930] | 0;
   if (($4088 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i195 = 3675720;
    $$lcssa8$i$i194 = $4088;
    label = 244;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4093 = HEAP32[918936] | 0;
   if (($4093 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i195 = 3675744;
    $$lcssa8$i$i194 = $4093;
    label = 244;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4098 = HEAP32[918942] | 0;
   if (($4098 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i195 = 3675768;
    $$lcssa8$i$i194 = $4098;
    label = 244;
    break;
   }
  }
  $$3$i$i196 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 244) {
  $4081 = $$lcssa8$i$i194 + -4 | 0;
  HEAP32[$$lcssa$i$i195 >> 2] = $4081;
  $$3$i$i196 = HEAP32[$4081 >> 2] | 0;
 }
 $4102 = $$3$i$i196 + 52 | 0;
 HEAP16[$$3$i$i196 >> 1] = 1024;
 HEAP16[$$3$i$i196 + 2 >> 1] = 15;
 HEAP8[$$3$i$i196 + 4 >> 0] = 16;
 HEAP8[$$3$i$i196 + 5 >> 0] = 1;
 HEAP32[$$3$i$i196 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i196 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i196 + 16 >> 2] = $4102;
 HEAP32[$$3$i$i196 + 20 >> 2] = 0;
 HEAP32[$$3$i$i196 + 24 >> 2] = 0;
 HEAP8[$$3$i$i196 + 48 >> 0] = 0;
 HEAP32[$19 >> 2] = $$3$i$i196;
 _memcpy($4102 | 0, 4078668, 2048) | 0;
 _memcpy($$3$i$i196 + 2100 | 0, 4080716, 2048) | 0;
 _memcpy($$3$i$i196 + 4148 | 0, 4082764, 2048) | 0;
 _memcpy($$3$i$i196 + 6196 | 0, 4084812, 2048) | 0;
 _memcpy($$3$i$i196 + 8244 | 0, 4086860, 2048) | 0;
 _memcpy($$3$i$i196 + 10292 | 0, 4088908, 2048) | 0;
 _memcpy($$3$i$i196 + 12340 | 0, 4090956, 2048) | 0;
 _memcpy($$3$i$i196 + 14388 | 0, 4093004, 2048) | 0;
 _memcpy($$3$i$i196 + 16436 | 0, 4095052, 2048) | 0;
 _memcpy($$3$i$i196 + 18484 | 0, 4097100, 2048) | 0;
 _memcpy($$3$i$i196 + 20532 | 0, 4099148, 2048) | 0;
 _memcpy($$3$i$i196 + 22580 | 0, 4101196, 2048) | 0;
 _memcpy($$3$i$i196 + 24628 | 0, 4103244, 2048) | 0;
 _memcpy($$3$i$i196 + 26676 | 0, 4105292, 2048) | 0;
 _memcpy($$3$i$i196 + 28724 | 0, 4107340, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $19);
 if ($$3$i$i196 | 0) {
  $4127 = $$3$i$i196 + 5 | 0;
  $4129 = (HEAP8[$4127 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4127 >> 0] = $4129;
  if (!($4129 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i196);
  HEAP32[$19 >> 2] = 0;
 }
 $4131 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4131 >> 1] = 210;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 224;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 259; else {
  $4136 = HEAP32[918918] | 0;
  if (($4136 | 0) == (HEAP32[918916] | 0)) label = 259; else {
   $$lcssa$i$i208 = 3675672;
   $$lcssa8$i$i207 = $4136;
   label = 260;
  }
 }
 do if ((label | 0) == 259) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4143 = HEAP32[918924] | 0;
   if (($4143 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i208 = 3675696;
    $$lcssa8$i$i207 = $4143;
    label = 260;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4148 = HEAP32[918930] | 0;
   if (($4148 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i208 = 3675720;
    $$lcssa8$i$i207 = $4148;
    label = 260;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4153 = HEAP32[918936] | 0;
   if (($4153 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i208 = 3675744;
    $$lcssa8$i$i207 = $4153;
    label = 260;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4158 = HEAP32[918942] | 0;
   if (($4158 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i208 = 3675768;
    $$lcssa8$i$i207 = $4158;
    label = 260;
    break;
   }
  }
  $$3$i$i209 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 260) {
  $4141 = $$lcssa8$i$i207 + -4 | 0;
  HEAP32[$$lcssa$i$i208 >> 2] = $4141;
  $$3$i$i209 = HEAP32[$4141 >> 2] | 0;
 }
 $4162 = $$3$i$i209 + 52 | 0;
 HEAP16[$$3$i$i209 >> 1] = 1024;
 HEAP16[$$3$i$i209 + 2 >> 1] = 15;
 HEAP8[$$3$i$i209 + 4 >> 0] = 16;
 HEAP8[$$3$i$i209 + 5 >> 0] = 1;
 HEAP32[$$3$i$i209 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i209 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i209 + 16 >> 2] = $4162;
 HEAP32[$$3$i$i209 + 20 >> 2] = 0;
 HEAP32[$$3$i$i209 + 24 >> 2] = 0;
 HEAP8[$$3$i$i209 + 48 >> 0] = 0;
 HEAP32[$20 >> 2] = $$3$i$i209;
 _memcpy($4162 | 0, 4109388, 2048) | 0;
 _memcpy($$3$i$i209 + 2100 | 0, 4111436, 2048) | 0;
 _memcpy($$3$i$i209 + 4148 | 0, 4113484, 2048) | 0;
 _memcpy($$3$i$i209 + 6196 | 0, 4115532, 2048) | 0;
 _memcpy($$3$i$i209 + 8244 | 0, 4117580, 2048) | 0;
 _memcpy($$3$i$i209 + 10292 | 0, 4119628, 2048) | 0;
 _memcpy($$3$i$i209 + 12340 | 0, 4121676, 2048) | 0;
 _memcpy($$3$i$i209 + 14388 | 0, 4123724, 2048) | 0;
 _memcpy($$3$i$i209 + 16436 | 0, 4125772, 2048) | 0;
 _memcpy($$3$i$i209 + 18484 | 0, 4127820, 2048) | 0;
 _memcpy($$3$i$i209 + 20532 | 0, 4129868, 2048) | 0;
 _memcpy($$3$i$i209 + 22580 | 0, 4131916, 2048) | 0;
 _memcpy($$3$i$i209 + 24628 | 0, 4133964, 2048) | 0;
 _memcpy($$3$i$i209 + 26676 | 0, 4136012, 2048) | 0;
 _memcpy($$3$i$i209 + 28724 | 0, 4138060, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $20);
 if ($$3$i$i209 | 0) {
  $4187 = $$3$i$i209 + 5 | 0;
  $4189 = (HEAP8[$4187 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4187 >> 0] = $4189;
  if (!($4189 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i209);
  HEAP32[$20 >> 2] = 0;
 }
 $4191 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4191 >> 1] = 225;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 239;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 275; else {
  $4196 = HEAP32[918918] | 0;
  if (($4196 | 0) == (HEAP32[918916] | 0)) label = 275; else {
   $$lcssa$i$i221 = 3675672;
   $$lcssa8$i$i220 = $4196;
   label = 276;
  }
 }
 do if ((label | 0) == 275) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4203 = HEAP32[918924] | 0;
   if (($4203 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i221 = 3675696;
    $$lcssa8$i$i220 = $4203;
    label = 276;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4208 = HEAP32[918930] | 0;
   if (($4208 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i221 = 3675720;
    $$lcssa8$i$i220 = $4208;
    label = 276;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4213 = HEAP32[918936] | 0;
   if (($4213 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i221 = 3675744;
    $$lcssa8$i$i220 = $4213;
    label = 276;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4218 = HEAP32[918942] | 0;
   if (($4218 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i221 = 3675768;
    $$lcssa8$i$i220 = $4218;
    label = 276;
    break;
   }
  }
  $$3$i$i222 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 276) {
  $4201 = $$lcssa8$i$i220 + -4 | 0;
  HEAP32[$$lcssa$i$i221 >> 2] = $4201;
  $$3$i$i222 = HEAP32[$4201 >> 2] | 0;
 }
 $4222 = $$3$i$i222 + 52 | 0;
 HEAP16[$$3$i$i222 >> 1] = 1024;
 HEAP16[$$3$i$i222 + 2 >> 1] = 15;
 HEAP8[$$3$i$i222 + 4 >> 0] = 16;
 HEAP8[$$3$i$i222 + 5 >> 0] = 1;
 HEAP32[$$3$i$i222 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i222 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i222 + 16 >> 2] = $4222;
 HEAP32[$$3$i$i222 + 20 >> 2] = 0;
 HEAP32[$$3$i$i222 + 24 >> 2] = 0;
 HEAP8[$$3$i$i222 + 48 >> 0] = 0;
 HEAP32[$21 >> 2] = $$3$i$i222;
 _memcpy($4222 | 0, 4140108, 2048) | 0;
 _memcpy($$3$i$i222 + 2100 | 0, 4142156, 2048) | 0;
 _memcpy($$3$i$i222 + 4148 | 0, 4144204, 2048) | 0;
 _memcpy($$3$i$i222 + 6196 | 0, 4146252, 2048) | 0;
 _memcpy($$3$i$i222 + 8244 | 0, 4148300, 2048) | 0;
 _memcpy($$3$i$i222 + 10292 | 0, 4150348, 2048) | 0;
 _memcpy($$3$i$i222 + 12340 | 0, 4152396, 2048) | 0;
 _memcpy($$3$i$i222 + 14388 | 0, 4154444, 2048) | 0;
 _memcpy($$3$i$i222 + 16436 | 0, 4156492, 2048) | 0;
 _memcpy($$3$i$i222 + 18484 | 0, 4158540, 2048) | 0;
 _memcpy($$3$i$i222 + 20532 | 0, 4160588, 2048) | 0;
 _memcpy($$3$i$i222 + 22580 | 0, 4162636, 2048) | 0;
 _memcpy($$3$i$i222 + 24628 | 0, 4164684, 2048) | 0;
 _memcpy($$3$i$i222 + 26676 | 0, 4166732, 2048) | 0;
 _memcpy($$3$i$i222 + 28724 | 0, 4168780, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $21);
 if ($$3$i$i222 | 0) {
  $4247 = $$3$i$i222 + 5 | 0;
  $4249 = (HEAP8[$4247 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4247 >> 0] = $4249;
  if (!($4249 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i222);
  HEAP32[$21 >> 2] = 0;
 }
 $4251 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4251 >> 1] = 240;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 254;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 291; else {
  $4256 = HEAP32[918918] | 0;
  if (($4256 | 0) == (HEAP32[918916] | 0)) label = 291; else {
   $$lcssa$i$i234 = 3675672;
   $$lcssa8$i$i233 = $4256;
   label = 292;
  }
 }
 do if ((label | 0) == 291) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4263 = HEAP32[918924] | 0;
   if (($4263 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i234 = 3675696;
    $$lcssa8$i$i233 = $4263;
    label = 292;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4268 = HEAP32[918930] | 0;
   if (($4268 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i234 = 3675720;
    $$lcssa8$i$i233 = $4268;
    label = 292;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4273 = HEAP32[918936] | 0;
   if (($4273 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i234 = 3675744;
    $$lcssa8$i$i233 = $4273;
    label = 292;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4278 = HEAP32[918942] | 0;
   if (($4278 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i234 = 3675768;
    $$lcssa8$i$i233 = $4278;
    label = 292;
    break;
   }
  }
  $$3$i$i235 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 292) {
  $4261 = $$lcssa8$i$i233 + -4 | 0;
  HEAP32[$$lcssa$i$i234 >> 2] = $4261;
  $$3$i$i235 = HEAP32[$4261 >> 2] | 0;
 }
 $4282 = $$3$i$i235 + 52 | 0;
 HEAP16[$$3$i$i235 >> 1] = 1024;
 HEAP16[$$3$i$i235 + 2 >> 1] = 15;
 HEAP8[$$3$i$i235 + 4 >> 0] = 16;
 HEAP8[$$3$i$i235 + 5 >> 0] = 1;
 HEAP32[$$3$i$i235 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i235 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i235 + 16 >> 2] = $4282;
 HEAP32[$$3$i$i235 + 20 >> 2] = 0;
 HEAP32[$$3$i$i235 + 24 >> 2] = 0;
 HEAP8[$$3$i$i235 + 48 >> 0] = 0;
 HEAP32[$22 >> 2] = $$3$i$i235;
 _memcpy($4282 | 0, 4170828, 2048) | 0;
 _memcpy($$3$i$i235 + 2100 | 0, 4172876, 2048) | 0;
 _memcpy($$3$i$i235 + 4148 | 0, 4174924, 2048) | 0;
 _memcpy($$3$i$i235 + 6196 | 0, 4176972, 2048) | 0;
 _memcpy($$3$i$i235 + 8244 | 0, 4179020, 2048) | 0;
 _memcpy($$3$i$i235 + 10292 | 0, 4181068, 2048) | 0;
 _memcpy($$3$i$i235 + 12340 | 0, 4183116, 2048) | 0;
 _memcpy($$3$i$i235 + 14388 | 0, 4185164, 2048) | 0;
 _memcpy($$3$i$i235 + 16436 | 0, 4187212, 2048) | 0;
 _memcpy($$3$i$i235 + 18484 | 0, 4189260, 2048) | 0;
 _memcpy($$3$i$i235 + 20532 | 0, 4191308, 2048) | 0;
 _memcpy($$3$i$i235 + 22580 | 0, 4193356, 2048) | 0;
 _memcpy($$3$i$i235 + 24628 | 0, 4195404, 2048) | 0;
 _memcpy($$3$i$i235 + 26676 | 0, 4197452, 2048) | 0;
 _memcpy($$3$i$i235 + 28724 | 0, 4199500, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $22);
 if ($$3$i$i235 | 0) {
  $4307 = $$3$i$i235 + 5 | 0;
  $4309 = (HEAP8[$4307 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4307 >> 0] = $4309;
  if (!($4309 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i235);
  HEAP32[$22 >> 2] = 0;
 }
 $4311 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4311 >> 1] = 255;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 269;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 307; else {
  $4316 = HEAP32[918918] | 0;
  if (($4316 | 0) == (HEAP32[918916] | 0)) label = 307; else {
   $$lcssa$i$i247 = 3675672;
   $$lcssa8$i$i246 = $4316;
   label = 308;
  }
 }
 do if ((label | 0) == 307) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4323 = HEAP32[918924] | 0;
   if (($4323 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i247 = 3675696;
    $$lcssa8$i$i246 = $4323;
    label = 308;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4328 = HEAP32[918930] | 0;
   if (($4328 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i247 = 3675720;
    $$lcssa8$i$i246 = $4328;
    label = 308;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4333 = HEAP32[918936] | 0;
   if (($4333 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i247 = 3675744;
    $$lcssa8$i$i246 = $4333;
    label = 308;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4338 = HEAP32[918942] | 0;
   if (($4338 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i247 = 3675768;
    $$lcssa8$i$i246 = $4338;
    label = 308;
    break;
   }
  }
  $$3$i$i248 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 308) {
  $4321 = $$lcssa8$i$i246 + -4 | 0;
  HEAP32[$$lcssa$i$i247 >> 2] = $4321;
  $$3$i$i248 = HEAP32[$4321 >> 2] | 0;
 }
 $4342 = $$3$i$i248 + 52 | 0;
 HEAP16[$$3$i$i248 >> 1] = 1024;
 HEAP16[$$3$i$i248 + 2 >> 1] = 15;
 HEAP8[$$3$i$i248 + 4 >> 0] = 16;
 HEAP8[$$3$i$i248 + 5 >> 0] = 1;
 HEAP32[$$3$i$i248 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i248 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i248 + 16 >> 2] = $4342;
 HEAP32[$$3$i$i248 + 20 >> 2] = 0;
 HEAP32[$$3$i$i248 + 24 >> 2] = 0;
 HEAP8[$$3$i$i248 + 48 >> 0] = 0;
 HEAP32[$23 >> 2] = $$3$i$i248;
 _memcpy($4342 | 0, 4201548, 2048) | 0;
 _memcpy($$3$i$i248 + 2100 | 0, 4203596, 2048) | 0;
 _memcpy($$3$i$i248 + 4148 | 0, 4205644, 2048) | 0;
 _memcpy($$3$i$i248 + 6196 | 0, 4207692, 2048) | 0;
 _memcpy($$3$i$i248 + 8244 | 0, 4209740, 2048) | 0;
 _memcpy($$3$i$i248 + 10292 | 0, 4211788, 2048) | 0;
 _memcpy($$3$i$i248 + 12340 | 0, 4213836, 2048) | 0;
 _memcpy($$3$i$i248 + 14388 | 0, 4215884, 2048) | 0;
 _memcpy($$3$i$i248 + 16436 | 0, 4217932, 2048) | 0;
 _memcpy($$3$i$i248 + 18484 | 0, 4219980, 2048) | 0;
 _memcpy($$3$i$i248 + 20532 | 0, 4222028, 2048) | 0;
 _memcpy($$3$i$i248 + 22580 | 0, 4224076, 2048) | 0;
 _memcpy($$3$i$i248 + 24628 | 0, 4226124, 2048) | 0;
 _memcpy($$3$i$i248 + 26676 | 0, 4228172, 2048) | 0;
 _memcpy($$3$i$i248 + 28724 | 0, 4230220, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $23);
 if ($$3$i$i248 | 0) {
  $4367 = $$3$i$i248 + 5 | 0;
  $4369 = (HEAP8[$4367 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4367 >> 0] = $4369;
  if (!($4369 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i248);
  HEAP32[$23 >> 2] = 0;
 }
 $4371 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4371 >> 1] = 270;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 284;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 323; else {
  $4376 = HEAP32[918918] | 0;
  if (($4376 | 0) == (HEAP32[918916] | 0)) label = 323; else {
   $$lcssa$i$i260 = 3675672;
   $$lcssa8$i$i259 = $4376;
   label = 324;
  }
 }
 do if ((label | 0) == 323) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4383 = HEAP32[918924] | 0;
   if (($4383 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i260 = 3675696;
    $$lcssa8$i$i259 = $4383;
    label = 324;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4388 = HEAP32[918930] | 0;
   if (($4388 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i260 = 3675720;
    $$lcssa8$i$i259 = $4388;
    label = 324;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4393 = HEAP32[918936] | 0;
   if (($4393 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i260 = 3675744;
    $$lcssa8$i$i259 = $4393;
    label = 324;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4398 = HEAP32[918942] | 0;
   if (($4398 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i260 = 3675768;
    $$lcssa8$i$i259 = $4398;
    label = 324;
    break;
   }
  }
  $$3$i$i261 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 324) {
  $4381 = $$lcssa8$i$i259 + -4 | 0;
  HEAP32[$$lcssa$i$i260 >> 2] = $4381;
  $$3$i$i261 = HEAP32[$4381 >> 2] | 0;
 }
 $4402 = $$3$i$i261 + 52 | 0;
 HEAP16[$$3$i$i261 >> 1] = 1024;
 HEAP16[$$3$i$i261 + 2 >> 1] = 15;
 HEAP8[$$3$i$i261 + 4 >> 0] = 16;
 HEAP8[$$3$i$i261 + 5 >> 0] = 1;
 HEAP32[$$3$i$i261 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i261 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i261 + 16 >> 2] = $4402;
 HEAP32[$$3$i$i261 + 20 >> 2] = 0;
 HEAP32[$$3$i$i261 + 24 >> 2] = 0;
 HEAP8[$$3$i$i261 + 48 >> 0] = 0;
 HEAP32[$24 >> 2] = $$3$i$i261;
 _memcpy($4402 | 0, 4232268, 2048) | 0;
 _memcpy($$3$i$i261 + 2100 | 0, 4234316, 2048) | 0;
 _memcpy($$3$i$i261 + 4148 | 0, 4236364, 2048) | 0;
 _memcpy($$3$i$i261 + 6196 | 0, 4238412, 2048) | 0;
 _memcpy($$3$i$i261 + 8244 | 0, 4240460, 2048) | 0;
 _memcpy($$3$i$i261 + 10292 | 0, 4242508, 2048) | 0;
 _memcpy($$3$i$i261 + 12340 | 0, 4244556, 2048) | 0;
 _memcpy($$3$i$i261 + 14388 | 0, 4246604, 2048) | 0;
 _memcpy($$3$i$i261 + 16436 | 0, 4248652, 2048) | 0;
 _memcpy($$3$i$i261 + 18484 | 0, 4250700, 2048) | 0;
 _memcpy($$3$i$i261 + 20532 | 0, 4252748, 2048) | 0;
 _memcpy($$3$i$i261 + 22580 | 0, 4254796, 2048) | 0;
 _memcpy($$3$i$i261 + 24628 | 0, 4256844, 2048) | 0;
 _memcpy($$3$i$i261 + 26676 | 0, 4258892, 2048) | 0;
 _memcpy($$3$i$i261 + 28724 | 0, 4260940, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $24);
 if ($$3$i$i261 | 0) {
  $4427 = $$3$i$i261 + 5 | 0;
  $4429 = (HEAP8[$4427 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4427 >> 0] = $4429;
  if (!($4429 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i261);
  HEAP32[$24 >> 2] = 0;
 }
 $4431 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4431 >> 1] = 285;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 299;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 339; else {
  $4436 = HEAP32[918918] | 0;
  if (($4436 | 0) == (HEAP32[918916] | 0)) label = 339; else {
   $$lcssa$i$i273 = 3675672;
   $$lcssa8$i$i272 = $4436;
   label = 340;
  }
 }
 do if ((label | 0) == 339) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4443 = HEAP32[918924] | 0;
   if (($4443 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i273 = 3675696;
    $$lcssa8$i$i272 = $4443;
    label = 340;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4448 = HEAP32[918930] | 0;
   if (($4448 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i273 = 3675720;
    $$lcssa8$i$i272 = $4448;
    label = 340;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4453 = HEAP32[918936] | 0;
   if (($4453 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i273 = 3675744;
    $$lcssa8$i$i272 = $4453;
    label = 340;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4458 = HEAP32[918942] | 0;
   if (($4458 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i273 = 3675768;
    $$lcssa8$i$i272 = $4458;
    label = 340;
    break;
   }
  }
  $$3$i$i274 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 340) {
  $4441 = $$lcssa8$i$i272 + -4 | 0;
  HEAP32[$$lcssa$i$i273 >> 2] = $4441;
  $$3$i$i274 = HEAP32[$4441 >> 2] | 0;
 }
 $4462 = $$3$i$i274 + 52 | 0;
 HEAP16[$$3$i$i274 >> 1] = 1024;
 HEAP16[$$3$i$i274 + 2 >> 1] = 15;
 HEAP8[$$3$i$i274 + 4 >> 0] = 16;
 HEAP8[$$3$i$i274 + 5 >> 0] = 1;
 HEAP32[$$3$i$i274 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i274 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i274 + 16 >> 2] = $4462;
 HEAP32[$$3$i$i274 + 20 >> 2] = 0;
 HEAP32[$$3$i$i274 + 24 >> 2] = 0;
 HEAP8[$$3$i$i274 + 48 >> 0] = 0;
 HEAP32[$25 >> 2] = $$3$i$i274;
 _memcpy($4462 | 0, 4262988, 2048) | 0;
 _memcpy($$3$i$i274 + 2100 | 0, 4265036, 2048) | 0;
 _memcpy($$3$i$i274 + 4148 | 0, 4267084, 2048) | 0;
 _memcpy($$3$i$i274 + 6196 | 0, 4269132, 2048) | 0;
 _memcpy($$3$i$i274 + 8244 | 0, 4271180, 2048) | 0;
 _memcpy($$3$i$i274 + 10292 | 0, 4273228, 2048) | 0;
 _memcpy($$3$i$i274 + 12340 | 0, 4275276, 2048) | 0;
 _memcpy($$3$i$i274 + 14388 | 0, 4277324, 2048) | 0;
 _memcpy($$3$i$i274 + 16436 | 0, 4279372, 2048) | 0;
 _memcpy($$3$i$i274 + 18484 | 0, 4281420, 2048) | 0;
 _memcpy($$3$i$i274 + 20532 | 0, 4283468, 2048) | 0;
 _memcpy($$3$i$i274 + 22580 | 0, 4285516, 2048) | 0;
 _memcpy($$3$i$i274 + 24628 | 0, 4287564, 2048) | 0;
 _memcpy($$3$i$i274 + 26676 | 0, 4289612, 2048) | 0;
 _memcpy($$3$i$i274 + 28724 | 0, 4291660, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $25);
 if ($$3$i$i274 | 0) {
  $4487 = $$3$i$i274 + 5 | 0;
  $4489 = (HEAP8[$4487 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4487 >> 0] = $4489;
  if (!($4489 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i274);
  HEAP32[$25 >> 2] = 0;
 }
 $4491 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4491 >> 1] = 300;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 314;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 355; else {
  $4496 = HEAP32[918918] | 0;
  if (($4496 | 0) == (HEAP32[918916] | 0)) label = 355; else {
   $$lcssa$i$i286 = 3675672;
   $$lcssa8$i$i285 = $4496;
   label = 356;
  }
 }
 do if ((label | 0) == 355) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4503 = HEAP32[918924] | 0;
   if (($4503 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i286 = 3675696;
    $$lcssa8$i$i285 = $4503;
    label = 356;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4508 = HEAP32[918930] | 0;
   if (($4508 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i286 = 3675720;
    $$lcssa8$i$i285 = $4508;
    label = 356;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4513 = HEAP32[918936] | 0;
   if (($4513 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i286 = 3675744;
    $$lcssa8$i$i285 = $4513;
    label = 356;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4518 = HEAP32[918942] | 0;
   if (($4518 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i286 = 3675768;
    $$lcssa8$i$i285 = $4518;
    label = 356;
    break;
   }
  }
  $$3$i$i287 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 356) {
  $4501 = $$lcssa8$i$i285 + -4 | 0;
  HEAP32[$$lcssa$i$i286 >> 2] = $4501;
  $$3$i$i287 = HEAP32[$4501 >> 2] | 0;
 }
 $4522 = $$3$i$i287 + 52 | 0;
 HEAP16[$$3$i$i287 >> 1] = 1024;
 HEAP16[$$3$i$i287 + 2 >> 1] = 15;
 HEAP8[$$3$i$i287 + 4 >> 0] = 16;
 HEAP8[$$3$i$i287 + 5 >> 0] = 1;
 HEAP32[$$3$i$i287 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i287 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i287 + 16 >> 2] = $4522;
 HEAP32[$$3$i$i287 + 20 >> 2] = 0;
 HEAP32[$$3$i$i287 + 24 >> 2] = 0;
 HEAP8[$$3$i$i287 + 48 >> 0] = 0;
 HEAP32[$26 >> 2] = $$3$i$i287;
 _memcpy($4522 | 0, 4293708, 2048) | 0;
 _memcpy($$3$i$i287 + 2100 | 0, 4295756, 2048) | 0;
 _memcpy($$3$i$i287 + 4148 | 0, 4297804, 2048) | 0;
 _memcpy($$3$i$i287 + 6196 | 0, 4299852, 2048) | 0;
 _memcpy($$3$i$i287 + 8244 | 0, 4301900, 2048) | 0;
 _memcpy($$3$i$i287 + 10292 | 0, 4303948, 2048) | 0;
 _memcpy($$3$i$i287 + 12340 | 0, 4305996, 2048) | 0;
 _memcpy($$3$i$i287 + 14388 | 0, 4308044, 2048) | 0;
 _memcpy($$3$i$i287 + 16436 | 0, 4310092, 2048) | 0;
 _memcpy($$3$i$i287 + 18484 | 0, 4312140, 2048) | 0;
 _memcpy($$3$i$i287 + 20532 | 0, 4314188, 2048) | 0;
 _memcpy($$3$i$i287 + 22580 | 0, 4316236, 2048) | 0;
 _memcpy($$3$i$i287 + 24628 | 0, 4318284, 2048) | 0;
 _memcpy($$3$i$i287 + 26676 | 0, 4320332, 2048) | 0;
 _memcpy($$3$i$i287 + 28724 | 0, 4322380, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $26);
 if ($$3$i$i287 | 0) {
  $4547 = $$3$i$i287 + 5 | 0;
  $4549 = (HEAP8[$4547 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4547 >> 0] = $4549;
  if (!($4549 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i287);
  HEAP32[$26 >> 2] = 0;
 }
 $4551 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4551 >> 1] = 315;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 329;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 371; else {
  $4556 = HEAP32[918918] | 0;
  if (($4556 | 0) == (HEAP32[918916] | 0)) label = 371; else {
   $$lcssa$i$i299 = 3675672;
   $$lcssa8$i$i298 = $4556;
   label = 372;
  }
 }
 do if ((label | 0) == 371) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4563 = HEAP32[918924] | 0;
   if (($4563 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i299 = 3675696;
    $$lcssa8$i$i298 = $4563;
    label = 372;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4568 = HEAP32[918930] | 0;
   if (($4568 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i299 = 3675720;
    $$lcssa8$i$i298 = $4568;
    label = 372;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4573 = HEAP32[918936] | 0;
   if (($4573 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i299 = 3675744;
    $$lcssa8$i$i298 = $4573;
    label = 372;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4578 = HEAP32[918942] | 0;
   if (($4578 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i299 = 3675768;
    $$lcssa8$i$i298 = $4578;
    label = 372;
    break;
   }
  }
  $$3$i$i300 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 372) {
  $4561 = $$lcssa8$i$i298 + -4 | 0;
  HEAP32[$$lcssa$i$i299 >> 2] = $4561;
  $$3$i$i300 = HEAP32[$4561 >> 2] | 0;
 }
 $4582 = $$3$i$i300 + 52 | 0;
 HEAP16[$$3$i$i300 >> 1] = 1024;
 HEAP16[$$3$i$i300 + 2 >> 1] = 15;
 HEAP8[$$3$i$i300 + 4 >> 0] = 16;
 HEAP8[$$3$i$i300 + 5 >> 0] = 1;
 HEAP32[$$3$i$i300 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i300 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i300 + 16 >> 2] = $4582;
 HEAP32[$$3$i$i300 + 20 >> 2] = 0;
 HEAP32[$$3$i$i300 + 24 >> 2] = 0;
 HEAP8[$$3$i$i300 + 48 >> 0] = 0;
 HEAP32[$27 >> 2] = $$3$i$i300;
 _memcpy($4582 | 0, 4324428, 2048) | 0;
 _memcpy($$3$i$i300 + 2100 | 0, 4326476, 2048) | 0;
 _memcpy($$3$i$i300 + 4148 | 0, 4328524, 2048) | 0;
 _memcpy($$3$i$i300 + 6196 | 0, 4330572, 2048) | 0;
 _memcpy($$3$i$i300 + 8244 | 0, 4332620, 2048) | 0;
 _memcpy($$3$i$i300 + 10292 | 0, 4334668, 2048) | 0;
 _memcpy($$3$i$i300 + 12340 | 0, 4336716, 2048) | 0;
 _memcpy($$3$i$i300 + 14388 | 0, 4338764, 2048) | 0;
 _memcpy($$3$i$i300 + 16436 | 0, 4340812, 2048) | 0;
 _memcpy($$3$i$i300 + 18484 | 0, 4342860, 2048) | 0;
 _memcpy($$3$i$i300 + 20532 | 0, 4344908, 2048) | 0;
 _memcpy($$3$i$i300 + 22580 | 0, 4346956, 2048) | 0;
 _memcpy($$3$i$i300 + 24628 | 0, 4349004, 2048) | 0;
 _memcpy($$3$i$i300 + 26676 | 0, 4351052, 2048) | 0;
 _memcpy($$3$i$i300 + 28724 | 0, 4353100, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $27);
 if ($$3$i$i300 | 0) {
  $4607 = $$3$i$i300 + 5 | 0;
  $4609 = (HEAP8[$4607 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4607 >> 0] = $4609;
  if (!($4609 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i300);
  HEAP32[$27 >> 2] = 0;
 }
 $4611 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4611 >> 1] = 330;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 344;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 387; else {
  $4616 = HEAP32[918918] | 0;
  if (($4616 | 0) == (HEAP32[918916] | 0)) label = 387; else {
   $$lcssa$i$i312 = 3675672;
   $$lcssa8$i$i311 = $4616;
   label = 388;
  }
 }
 do if ((label | 0) == 387) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4623 = HEAP32[918924] | 0;
   if (($4623 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i312 = 3675696;
    $$lcssa8$i$i311 = $4623;
    label = 388;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4628 = HEAP32[918930] | 0;
   if (($4628 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i312 = 3675720;
    $$lcssa8$i$i311 = $4628;
    label = 388;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4633 = HEAP32[918936] | 0;
   if (($4633 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i312 = 3675744;
    $$lcssa8$i$i311 = $4633;
    label = 388;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4638 = HEAP32[918942] | 0;
   if (($4638 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i312 = 3675768;
    $$lcssa8$i$i311 = $4638;
    label = 388;
    break;
   }
  }
  $$3$i$i313 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 388) {
  $4621 = $$lcssa8$i$i311 + -4 | 0;
  HEAP32[$$lcssa$i$i312 >> 2] = $4621;
  $$3$i$i313 = HEAP32[$4621 >> 2] | 0;
 }
 $4642 = $$3$i$i313 + 52 | 0;
 HEAP16[$$3$i$i313 >> 1] = 1024;
 HEAP16[$$3$i$i313 + 2 >> 1] = 15;
 HEAP8[$$3$i$i313 + 4 >> 0] = 16;
 HEAP8[$$3$i$i313 + 5 >> 0] = 1;
 HEAP32[$$3$i$i313 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i313 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i313 + 16 >> 2] = $4642;
 HEAP32[$$3$i$i313 + 20 >> 2] = 0;
 HEAP32[$$3$i$i313 + 24 >> 2] = 0;
 HEAP8[$$3$i$i313 + 48 >> 0] = 0;
 HEAP32[$28 >> 2] = $$3$i$i313;
 _memcpy($4642 | 0, 4355148, 2048) | 0;
 _memcpy($$3$i$i313 + 2100 | 0, 4357196, 2048) | 0;
 _memcpy($$3$i$i313 + 4148 | 0, 4359244, 2048) | 0;
 _memcpy($$3$i$i313 + 6196 | 0, 4361292, 2048) | 0;
 _memcpy($$3$i$i313 + 8244 | 0, 4363340, 2048) | 0;
 _memcpy($$3$i$i313 + 10292 | 0, 4365388, 2048) | 0;
 _memcpy($$3$i$i313 + 12340 | 0, 4367436, 2048) | 0;
 _memcpy($$3$i$i313 + 14388 | 0, 4369484, 2048) | 0;
 _memcpy($$3$i$i313 + 16436 | 0, 4371532, 2048) | 0;
 _memcpy($$3$i$i313 + 18484 | 0, 4373580, 2048) | 0;
 _memcpy($$3$i$i313 + 20532 | 0, 4375628, 2048) | 0;
 _memcpy($$3$i$i313 + 22580 | 0, 4377676, 2048) | 0;
 _memcpy($$3$i$i313 + 24628 | 0, 4379724, 2048) | 0;
 _memcpy($$3$i$i313 + 26676 | 0, 4381772, 2048) | 0;
 _memcpy($$3$i$i313 + 28724 | 0, 4383820, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $28);
 if ($$3$i$i313 | 0) {
  $4667 = $$3$i$i313 + 5 | 0;
  $4669 = (HEAP8[$4667 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4667 >> 0] = $4669;
  if (!($4669 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i313);
  HEAP32[$28 >> 2] = 0;
 }
 $4671 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4671 >> 1] = 345;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 359;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 403; else {
  $4676 = HEAP32[918918] | 0;
  if (($4676 | 0) == (HEAP32[918916] | 0)) label = 403; else {
   $$lcssa$i$i325 = 3675672;
   $$lcssa8$i$i324 = $4676;
   label = 404;
  }
 }
 do if ((label | 0) == 403) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4683 = HEAP32[918924] | 0;
   if (($4683 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i325 = 3675696;
    $$lcssa8$i$i324 = $4683;
    label = 404;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4688 = HEAP32[918930] | 0;
   if (($4688 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i325 = 3675720;
    $$lcssa8$i$i324 = $4688;
    label = 404;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4693 = HEAP32[918936] | 0;
   if (($4693 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i325 = 3675744;
    $$lcssa8$i$i324 = $4693;
    label = 404;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4698 = HEAP32[918942] | 0;
   if (($4698 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i325 = 3675768;
    $$lcssa8$i$i324 = $4698;
    label = 404;
    break;
   }
  }
  $$3$i$i326 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 404) {
  $4681 = $$lcssa8$i$i324 + -4 | 0;
  HEAP32[$$lcssa$i$i325 >> 2] = $4681;
  $$3$i$i326 = HEAP32[$4681 >> 2] | 0;
 }
 $4702 = $$3$i$i326 + 52 | 0;
 HEAP16[$$3$i$i326 >> 1] = 1024;
 HEAP16[$$3$i$i326 + 2 >> 1] = 15;
 HEAP8[$$3$i$i326 + 4 >> 0] = 16;
 HEAP8[$$3$i$i326 + 5 >> 0] = 1;
 HEAP32[$$3$i$i326 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i326 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i326 + 16 >> 2] = $4702;
 HEAP32[$$3$i$i326 + 20 >> 2] = 0;
 HEAP32[$$3$i$i326 + 24 >> 2] = 0;
 HEAP8[$$3$i$i326 + 48 >> 0] = 0;
 HEAP32[$29 >> 2] = $$3$i$i326;
 _memcpy($4702 | 0, 4385868, 2048) | 0;
 _memcpy($$3$i$i326 + 2100 | 0, 4387916, 2048) | 0;
 _memcpy($$3$i$i326 + 4148 | 0, 4389964, 2048) | 0;
 _memcpy($$3$i$i326 + 6196 | 0, 4392012, 2048) | 0;
 _memcpy($$3$i$i326 + 8244 | 0, 4394060, 2048) | 0;
 _memcpy($$3$i$i326 + 10292 | 0, 4396108, 2048) | 0;
 _memcpy($$3$i$i326 + 12340 | 0, 4398156, 2048) | 0;
 _memcpy($$3$i$i326 + 14388 | 0, 4400204, 2048) | 0;
 _memcpy($$3$i$i326 + 16436 | 0, 4402252, 2048) | 0;
 _memcpy($$3$i$i326 + 18484 | 0, 4404300, 2048) | 0;
 _memcpy($$3$i$i326 + 20532 | 0, 4406348, 2048) | 0;
 _memcpy($$3$i$i326 + 22580 | 0, 4408396, 2048) | 0;
 _memcpy($$3$i$i326 + 24628 | 0, 4410444, 2048) | 0;
 _memcpy($$3$i$i326 + 26676 | 0, 4412492, 2048) | 0;
 _memcpy($$3$i$i326 + 28724 | 0, 4414540, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $29);
 if ($$3$i$i326 | 0) {
  $4727 = $$3$i$i326 + 5 | 0;
  $4729 = (HEAP8[$4727 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4727 >> 0] = $4729;
  if (!($4729 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i326);
  HEAP32[$29 >> 2] = 0;
 }
 $4731 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4731 >> 1] = 360;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 374;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 419; else {
  $4736 = HEAP32[918918] | 0;
  if (($4736 | 0) == (HEAP32[918916] | 0)) label = 419; else {
   $$lcssa$i$i338 = 3675672;
   $$lcssa8$i$i337 = $4736;
   label = 420;
  }
 }
 do if ((label | 0) == 419) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4743 = HEAP32[918924] | 0;
   if (($4743 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i338 = 3675696;
    $$lcssa8$i$i337 = $4743;
    label = 420;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4748 = HEAP32[918930] | 0;
   if (($4748 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i338 = 3675720;
    $$lcssa8$i$i337 = $4748;
    label = 420;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4753 = HEAP32[918936] | 0;
   if (($4753 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i338 = 3675744;
    $$lcssa8$i$i337 = $4753;
    label = 420;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4758 = HEAP32[918942] | 0;
   if (($4758 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i338 = 3675768;
    $$lcssa8$i$i337 = $4758;
    label = 420;
    break;
   }
  }
  $$3$i$i339 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 420) {
  $4741 = $$lcssa8$i$i337 + -4 | 0;
  HEAP32[$$lcssa$i$i338 >> 2] = $4741;
  $$3$i$i339 = HEAP32[$4741 >> 2] | 0;
 }
 $4762 = $$3$i$i339 + 52 | 0;
 HEAP16[$$3$i$i339 >> 1] = 1024;
 HEAP16[$$3$i$i339 + 2 >> 1] = 15;
 HEAP8[$$3$i$i339 + 4 >> 0] = 16;
 HEAP8[$$3$i$i339 + 5 >> 0] = 1;
 HEAP32[$$3$i$i339 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i339 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i339 + 16 >> 2] = $4762;
 HEAP32[$$3$i$i339 + 20 >> 2] = 0;
 HEAP32[$$3$i$i339 + 24 >> 2] = 0;
 HEAP8[$$3$i$i339 + 48 >> 0] = 0;
 HEAP32[$30 >> 2] = $$3$i$i339;
 _memcpy($4762 | 0, 4416588, 2048) | 0;
 _memcpy($$3$i$i339 + 2100 | 0, 4418636, 2048) | 0;
 _memcpy($$3$i$i339 + 4148 | 0, 4420684, 2048) | 0;
 _memcpy($$3$i$i339 + 6196 | 0, 4422732, 2048) | 0;
 _memcpy($$3$i$i339 + 8244 | 0, 4424780, 2048) | 0;
 _memcpy($$3$i$i339 + 10292 | 0, 4426828, 2048) | 0;
 _memcpy($$3$i$i339 + 12340 | 0, 4428876, 2048) | 0;
 _memcpy($$3$i$i339 + 14388 | 0, 4430924, 2048) | 0;
 _memcpy($$3$i$i339 + 16436 | 0, 4432972, 2048) | 0;
 _memcpy($$3$i$i339 + 18484 | 0, 4435020, 2048) | 0;
 _memcpy($$3$i$i339 + 20532 | 0, 4437068, 2048) | 0;
 _memcpy($$3$i$i339 + 22580 | 0, 4439116, 2048) | 0;
 _memcpy($$3$i$i339 + 24628 | 0, 4441164, 2048) | 0;
 _memcpy($$3$i$i339 + 26676 | 0, 4443212, 2048) | 0;
 _memcpy($$3$i$i339 + 28724 | 0, 4445260, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $30);
 if ($$3$i$i339 | 0) {
  $4787 = $$3$i$i339 + 5 | 0;
  $4789 = (HEAP8[$4787 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4787 >> 0] = $4789;
  if (!($4789 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i339);
  HEAP32[$30 >> 2] = 0;
 }
 $4791 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4791 >> 1] = 375;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 389;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 435; else {
  $4796 = HEAP32[918918] | 0;
  if (($4796 | 0) == (HEAP32[918916] | 0)) label = 435; else {
   $$lcssa$i$i351 = 3675672;
   $$lcssa8$i$i350 = $4796;
   label = 436;
  }
 }
 do if ((label | 0) == 435) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4803 = HEAP32[918924] | 0;
   if (($4803 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i351 = 3675696;
    $$lcssa8$i$i350 = $4803;
    label = 436;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4808 = HEAP32[918930] | 0;
   if (($4808 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i351 = 3675720;
    $$lcssa8$i$i350 = $4808;
    label = 436;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4813 = HEAP32[918936] | 0;
   if (($4813 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i351 = 3675744;
    $$lcssa8$i$i350 = $4813;
    label = 436;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4818 = HEAP32[918942] | 0;
   if (($4818 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i351 = 3675768;
    $$lcssa8$i$i350 = $4818;
    label = 436;
    break;
   }
  }
  $$3$i$i352 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 436) {
  $4801 = $$lcssa8$i$i350 + -4 | 0;
  HEAP32[$$lcssa$i$i351 >> 2] = $4801;
  $$3$i$i352 = HEAP32[$4801 >> 2] | 0;
 }
 $4822 = $$3$i$i352 + 52 | 0;
 HEAP16[$$3$i$i352 >> 1] = 1024;
 HEAP16[$$3$i$i352 + 2 >> 1] = 15;
 HEAP8[$$3$i$i352 + 4 >> 0] = 16;
 HEAP8[$$3$i$i352 + 5 >> 0] = 1;
 HEAP32[$$3$i$i352 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i352 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i352 + 16 >> 2] = $4822;
 HEAP32[$$3$i$i352 + 20 >> 2] = 0;
 HEAP32[$$3$i$i352 + 24 >> 2] = 0;
 HEAP8[$$3$i$i352 + 48 >> 0] = 0;
 HEAP32[$31 >> 2] = $$3$i$i352;
 _memcpy($4822 | 0, 4447308, 2048) | 0;
 _memcpy($$3$i$i352 + 2100 | 0, 4449356, 2048) | 0;
 _memcpy($$3$i$i352 + 4148 | 0, 4451404, 2048) | 0;
 _memcpy($$3$i$i352 + 6196 | 0, 4453452, 2048) | 0;
 _memcpy($$3$i$i352 + 8244 | 0, 4455500, 2048) | 0;
 _memcpy($$3$i$i352 + 10292 | 0, 4457548, 2048) | 0;
 _memcpy($$3$i$i352 + 12340 | 0, 4459596, 2048) | 0;
 _memcpy($$3$i$i352 + 14388 | 0, 4461644, 2048) | 0;
 _memcpy($$3$i$i352 + 16436 | 0, 4463692, 2048) | 0;
 _memcpy($$3$i$i352 + 18484 | 0, 4465740, 2048) | 0;
 _memcpy($$3$i$i352 + 20532 | 0, 4467788, 2048) | 0;
 _memcpy($$3$i$i352 + 22580 | 0, 4469836, 2048) | 0;
 _memcpy($$3$i$i352 + 24628 | 0, 4471884, 2048) | 0;
 _memcpy($$3$i$i352 + 26676 | 0, 4473932, 2048) | 0;
 _memcpy($$3$i$i352 + 28724 | 0, 4475980, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $31);
 if ($$3$i$i352 | 0) {
  $4847 = $$3$i$i352 + 5 | 0;
  $4849 = (HEAP8[$4847 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4847 >> 0] = $4849;
  if (!($4849 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i352);
  HEAP32[$31 >> 2] = 0;
 }
 $4851 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4851 >> 1] = 390;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 404;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 451; else {
  $4856 = HEAP32[918918] | 0;
  if (($4856 | 0) == (HEAP32[918916] | 0)) label = 451; else {
   $$lcssa$i$i364 = 3675672;
   $$lcssa8$i$i363 = $4856;
   label = 452;
  }
 }
 do if ((label | 0) == 451) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4863 = HEAP32[918924] | 0;
   if (($4863 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i364 = 3675696;
    $$lcssa8$i$i363 = $4863;
    label = 452;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4868 = HEAP32[918930] | 0;
   if (($4868 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i364 = 3675720;
    $$lcssa8$i$i363 = $4868;
    label = 452;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4873 = HEAP32[918936] | 0;
   if (($4873 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i364 = 3675744;
    $$lcssa8$i$i363 = $4873;
    label = 452;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4878 = HEAP32[918942] | 0;
   if (($4878 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i364 = 3675768;
    $$lcssa8$i$i363 = $4878;
    label = 452;
    break;
   }
  }
  $$3$i$i365 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 452) {
  $4861 = $$lcssa8$i$i363 + -4 | 0;
  HEAP32[$$lcssa$i$i364 >> 2] = $4861;
  $$3$i$i365 = HEAP32[$4861 >> 2] | 0;
 }
 $4882 = $$3$i$i365 + 52 | 0;
 HEAP16[$$3$i$i365 >> 1] = 1024;
 HEAP16[$$3$i$i365 + 2 >> 1] = 15;
 HEAP8[$$3$i$i365 + 4 >> 0] = 16;
 HEAP8[$$3$i$i365 + 5 >> 0] = 1;
 HEAP32[$$3$i$i365 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i365 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i365 + 16 >> 2] = $4882;
 HEAP32[$$3$i$i365 + 20 >> 2] = 0;
 HEAP32[$$3$i$i365 + 24 >> 2] = 0;
 HEAP8[$$3$i$i365 + 48 >> 0] = 0;
 HEAP32[$32 >> 2] = $$3$i$i365;
 _memcpy($4882 | 0, 4478028, 2048) | 0;
 _memcpy($$3$i$i365 + 2100 | 0, 4480076, 2048) | 0;
 _memcpy($$3$i$i365 + 4148 | 0, 4482124, 2048) | 0;
 _memcpy($$3$i$i365 + 6196 | 0, 4484172, 2048) | 0;
 _memcpy($$3$i$i365 + 8244 | 0, 4486220, 2048) | 0;
 _memcpy($$3$i$i365 + 10292 | 0, 4488268, 2048) | 0;
 _memcpy($$3$i$i365 + 12340 | 0, 4490316, 2048) | 0;
 _memcpy($$3$i$i365 + 14388 | 0, 4492364, 2048) | 0;
 _memcpy($$3$i$i365 + 16436 | 0, 4494412, 2048) | 0;
 _memcpy($$3$i$i365 + 18484 | 0, 4496460, 2048) | 0;
 _memcpy($$3$i$i365 + 20532 | 0, 4498508, 2048) | 0;
 _memcpy($$3$i$i365 + 22580 | 0, 4500556, 2048) | 0;
 _memcpy($$3$i$i365 + 24628 | 0, 4502604, 2048) | 0;
 _memcpy($$3$i$i365 + 26676 | 0, 4504652, 2048) | 0;
 _memcpy($$3$i$i365 + 28724 | 0, 4506700, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $32);
 if ($$3$i$i365 | 0) {
  $4907 = $$3$i$i365 + 5 | 0;
  $4909 = (HEAP8[$4907 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4907 >> 0] = $4909;
  if (!($4909 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i365);
  HEAP32[$32 >> 2] = 0;
 }
 $4911 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4911 >> 1] = 405;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 419;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 467; else {
  $4916 = HEAP32[918918] | 0;
  if (($4916 | 0) == (HEAP32[918916] | 0)) label = 467; else {
   $$lcssa$i$i377 = 3675672;
   $$lcssa8$i$i376 = $4916;
   label = 468;
  }
 }
 do if ((label | 0) == 467) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4923 = HEAP32[918924] | 0;
   if (($4923 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i377 = 3675696;
    $$lcssa8$i$i376 = $4923;
    label = 468;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4928 = HEAP32[918930] | 0;
   if (($4928 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i377 = 3675720;
    $$lcssa8$i$i376 = $4928;
    label = 468;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4933 = HEAP32[918936] | 0;
   if (($4933 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i377 = 3675744;
    $$lcssa8$i$i376 = $4933;
    label = 468;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4938 = HEAP32[918942] | 0;
   if (($4938 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i377 = 3675768;
    $$lcssa8$i$i376 = $4938;
    label = 468;
    break;
   }
  }
  $$3$i$i378 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 468) {
  $4921 = $$lcssa8$i$i376 + -4 | 0;
  HEAP32[$$lcssa$i$i377 >> 2] = $4921;
  $$3$i$i378 = HEAP32[$4921 >> 2] | 0;
 }
 $4942 = $$3$i$i378 + 52 | 0;
 HEAP16[$$3$i$i378 >> 1] = 1024;
 HEAP16[$$3$i$i378 + 2 >> 1] = 15;
 HEAP8[$$3$i$i378 + 4 >> 0] = 16;
 HEAP8[$$3$i$i378 + 5 >> 0] = 1;
 HEAP32[$$3$i$i378 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i378 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i378 + 16 >> 2] = $4942;
 HEAP32[$$3$i$i378 + 20 >> 2] = 0;
 HEAP32[$$3$i$i378 + 24 >> 2] = 0;
 HEAP8[$$3$i$i378 + 48 >> 0] = 0;
 HEAP32[$33 >> 2] = $$3$i$i378;
 _memcpy($4942 | 0, 4508748, 2048) | 0;
 _memcpy($$3$i$i378 + 2100 | 0, 4510796, 2048) | 0;
 _memcpy($$3$i$i378 + 4148 | 0, 4512844, 2048) | 0;
 _memcpy($$3$i$i378 + 6196 | 0, 4514892, 2048) | 0;
 _memcpy($$3$i$i378 + 8244 | 0, 4516940, 2048) | 0;
 _memcpy($$3$i$i378 + 10292 | 0, 4518988, 2048) | 0;
 _memcpy($$3$i$i378 + 12340 | 0, 4521036, 2048) | 0;
 _memcpy($$3$i$i378 + 14388 | 0, 4523084, 2048) | 0;
 _memcpy($$3$i$i378 + 16436 | 0, 4525132, 2048) | 0;
 _memcpy($$3$i$i378 + 18484 | 0, 4527180, 2048) | 0;
 _memcpy($$3$i$i378 + 20532 | 0, 4529228, 2048) | 0;
 _memcpy($$3$i$i378 + 22580 | 0, 4531276, 2048) | 0;
 _memcpy($$3$i$i378 + 24628 | 0, 4533324, 2048) | 0;
 _memcpy($$3$i$i378 + 26676 | 0, 4535372, 2048) | 0;
 _memcpy($$3$i$i378 + 28724 | 0, 4537420, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $33);
 if ($$3$i$i378 | 0) {
  $4967 = $$3$i$i378 + 5 | 0;
  $4969 = (HEAP8[$4967 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$4967 >> 0] = $4969;
  if (!($4969 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i378);
  HEAP32[$33 >> 2] = 0;
 }
 $4971 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$4971 >> 1] = 420;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 434;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 483; else {
  $4976 = HEAP32[918918] | 0;
  if (($4976 | 0) == (HEAP32[918916] | 0)) label = 483; else {
   $$lcssa$i$i390 = 3675672;
   $$lcssa8$i$i389 = $4976;
   label = 484;
  }
 }
 do if ((label | 0) == 483) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $4983 = HEAP32[918924] | 0;
   if (($4983 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i390 = 3675696;
    $$lcssa8$i$i389 = $4983;
    label = 484;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $4988 = HEAP32[918930] | 0;
   if (($4988 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i390 = 3675720;
    $$lcssa8$i$i389 = $4988;
    label = 484;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $4993 = HEAP32[918936] | 0;
   if (($4993 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i390 = 3675744;
    $$lcssa8$i$i389 = $4993;
    label = 484;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $4998 = HEAP32[918942] | 0;
   if (($4998 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i390 = 3675768;
    $$lcssa8$i$i389 = $4998;
    label = 484;
    break;
   }
  }
  $$3$i$i391 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 484) {
  $4981 = $$lcssa8$i$i389 + -4 | 0;
  HEAP32[$$lcssa$i$i390 >> 2] = $4981;
  $$3$i$i391 = HEAP32[$4981 >> 2] | 0;
 }
 $5002 = $$3$i$i391 + 52 | 0;
 HEAP16[$$3$i$i391 >> 1] = 1024;
 HEAP16[$$3$i$i391 + 2 >> 1] = 15;
 HEAP8[$$3$i$i391 + 4 >> 0] = 16;
 HEAP8[$$3$i$i391 + 5 >> 0] = 1;
 HEAP32[$$3$i$i391 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i391 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i391 + 16 >> 2] = $5002;
 HEAP32[$$3$i$i391 + 20 >> 2] = 0;
 HEAP32[$$3$i$i391 + 24 >> 2] = 0;
 HEAP8[$$3$i$i391 + 48 >> 0] = 0;
 HEAP32[$34 >> 2] = $$3$i$i391;
 _memcpy($5002 | 0, 4539468, 2048) | 0;
 _memcpy($$3$i$i391 + 2100 | 0, 4541516, 2048) | 0;
 _memcpy($$3$i$i391 + 4148 | 0, 4543564, 2048) | 0;
 _memcpy($$3$i$i391 + 6196 | 0, 4545612, 2048) | 0;
 _memcpy($$3$i$i391 + 8244 | 0, 4547660, 2048) | 0;
 _memcpy($$3$i$i391 + 10292 | 0, 4549708, 2048) | 0;
 _memcpy($$3$i$i391 + 12340 | 0, 4551756, 2048) | 0;
 _memcpy($$3$i$i391 + 14388 | 0, 4553804, 2048) | 0;
 _memcpy($$3$i$i391 + 16436 | 0, 4555852, 2048) | 0;
 _memcpy($$3$i$i391 + 18484 | 0, 4557900, 2048) | 0;
 _memcpy($$3$i$i391 + 20532 | 0, 4559948, 2048) | 0;
 _memcpy($$3$i$i391 + 22580 | 0, 4561996, 2048) | 0;
 _memcpy($$3$i$i391 + 24628 | 0, 4564044, 2048) | 0;
 _memcpy($$3$i$i391 + 26676 | 0, 4566092, 2048) | 0;
 _memcpy($$3$i$i391 + 28724 | 0, 4568140, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $34);
 if ($$3$i$i391 | 0) {
  $5027 = $$3$i$i391 + 5 | 0;
  $5029 = (HEAP8[$5027 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5027 >> 0] = $5029;
  if (!($5029 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i391);
  HEAP32[$34 >> 2] = 0;
 }
 $5031 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5031 >> 1] = 435;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 449;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 499; else {
  $5036 = HEAP32[918918] | 0;
  if (($5036 | 0) == (HEAP32[918916] | 0)) label = 499; else {
   $$lcssa$i$i403 = 3675672;
   $$lcssa8$i$i402 = $5036;
   label = 500;
  }
 }
 do if ((label | 0) == 499) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5043 = HEAP32[918924] | 0;
   if (($5043 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i403 = 3675696;
    $$lcssa8$i$i402 = $5043;
    label = 500;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5048 = HEAP32[918930] | 0;
   if (($5048 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i403 = 3675720;
    $$lcssa8$i$i402 = $5048;
    label = 500;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5053 = HEAP32[918936] | 0;
   if (($5053 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i403 = 3675744;
    $$lcssa8$i$i402 = $5053;
    label = 500;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5058 = HEAP32[918942] | 0;
   if (($5058 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i403 = 3675768;
    $$lcssa8$i$i402 = $5058;
    label = 500;
    break;
   }
  }
  $$3$i$i404 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 500) {
  $5041 = $$lcssa8$i$i402 + -4 | 0;
  HEAP32[$$lcssa$i$i403 >> 2] = $5041;
  $$3$i$i404 = HEAP32[$5041 >> 2] | 0;
 }
 $5062 = $$3$i$i404 + 52 | 0;
 HEAP16[$$3$i$i404 >> 1] = 1024;
 HEAP16[$$3$i$i404 + 2 >> 1] = 15;
 HEAP8[$$3$i$i404 + 4 >> 0] = 16;
 HEAP8[$$3$i$i404 + 5 >> 0] = 1;
 HEAP32[$$3$i$i404 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i404 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i404 + 16 >> 2] = $5062;
 HEAP32[$$3$i$i404 + 20 >> 2] = 0;
 HEAP32[$$3$i$i404 + 24 >> 2] = 0;
 HEAP8[$$3$i$i404 + 48 >> 0] = 0;
 HEAP32[$35 >> 2] = $$3$i$i404;
 _memcpy($5062 | 0, 4570188, 2048) | 0;
 _memcpy($$3$i$i404 + 2100 | 0, 4572236, 2048) | 0;
 _memcpy($$3$i$i404 + 4148 | 0, 4574284, 2048) | 0;
 _memcpy($$3$i$i404 + 6196 | 0, 4576332, 2048) | 0;
 _memcpy($$3$i$i404 + 8244 | 0, 4578380, 2048) | 0;
 _memcpy($$3$i$i404 + 10292 | 0, 4580428, 2048) | 0;
 _memcpy($$3$i$i404 + 12340 | 0, 4582476, 2048) | 0;
 _memcpy($$3$i$i404 + 14388 | 0, 4584524, 2048) | 0;
 _memcpy($$3$i$i404 + 16436 | 0, 4586572, 2048) | 0;
 _memcpy($$3$i$i404 + 18484 | 0, 4588620, 2048) | 0;
 _memcpy($$3$i$i404 + 20532 | 0, 4590668, 2048) | 0;
 _memcpy($$3$i$i404 + 22580 | 0, 4592716, 2048) | 0;
 _memcpy($$3$i$i404 + 24628 | 0, 4594764, 2048) | 0;
 _memcpy($$3$i$i404 + 26676 | 0, 4596812, 2048) | 0;
 _memcpy($$3$i$i404 + 28724 | 0, 4598860, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $35);
 if ($$3$i$i404 | 0) {
  $5087 = $$3$i$i404 + 5 | 0;
  $5089 = (HEAP8[$5087 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5087 >> 0] = $5089;
  if (!($5089 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i404);
  HEAP32[$35 >> 2] = 0;
 }
 $5091 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5091 >> 1] = 450;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 464;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 515; else {
  $5096 = HEAP32[918918] | 0;
  if (($5096 | 0) == (HEAP32[918916] | 0)) label = 515; else {
   $$lcssa$i$i416 = 3675672;
   $$lcssa8$i$i415 = $5096;
   label = 516;
  }
 }
 do if ((label | 0) == 515) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5103 = HEAP32[918924] | 0;
   if (($5103 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i416 = 3675696;
    $$lcssa8$i$i415 = $5103;
    label = 516;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5108 = HEAP32[918930] | 0;
   if (($5108 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i416 = 3675720;
    $$lcssa8$i$i415 = $5108;
    label = 516;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5113 = HEAP32[918936] | 0;
   if (($5113 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i416 = 3675744;
    $$lcssa8$i$i415 = $5113;
    label = 516;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5118 = HEAP32[918942] | 0;
   if (($5118 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i416 = 3675768;
    $$lcssa8$i$i415 = $5118;
    label = 516;
    break;
   }
  }
  $$3$i$i417 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 516) {
  $5101 = $$lcssa8$i$i415 + -4 | 0;
  HEAP32[$$lcssa$i$i416 >> 2] = $5101;
  $$3$i$i417 = HEAP32[$5101 >> 2] | 0;
 }
 $5122 = $$3$i$i417 + 52 | 0;
 HEAP16[$$3$i$i417 >> 1] = 1024;
 HEAP16[$$3$i$i417 + 2 >> 1] = 15;
 HEAP8[$$3$i$i417 + 4 >> 0] = 16;
 HEAP8[$$3$i$i417 + 5 >> 0] = 1;
 HEAP32[$$3$i$i417 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i417 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i417 + 16 >> 2] = $5122;
 HEAP32[$$3$i$i417 + 20 >> 2] = 0;
 HEAP32[$$3$i$i417 + 24 >> 2] = 0;
 HEAP8[$$3$i$i417 + 48 >> 0] = 0;
 HEAP32[$36 >> 2] = $$3$i$i417;
 _memcpy($5122 | 0, 4600908, 2048) | 0;
 _memcpy($$3$i$i417 + 2100 | 0, 4602956, 2048) | 0;
 _memcpy($$3$i$i417 + 4148 | 0, 4605004, 2048) | 0;
 _memcpy($$3$i$i417 + 6196 | 0, 4607052, 2048) | 0;
 _memcpy($$3$i$i417 + 8244 | 0, 4609100, 2048) | 0;
 _memcpy($$3$i$i417 + 10292 | 0, 4611148, 2048) | 0;
 _memcpy($$3$i$i417 + 12340 | 0, 4613196, 2048) | 0;
 _memcpy($$3$i$i417 + 14388 | 0, 4615244, 2048) | 0;
 _memcpy($$3$i$i417 + 16436 | 0, 4617292, 2048) | 0;
 _memcpy($$3$i$i417 + 18484 | 0, 4619340, 2048) | 0;
 _memcpy($$3$i$i417 + 20532 | 0, 4621388, 2048) | 0;
 _memcpy($$3$i$i417 + 22580 | 0, 4623436, 2048) | 0;
 _memcpy($$3$i$i417 + 24628 | 0, 4625484, 2048) | 0;
 _memcpy($$3$i$i417 + 26676 | 0, 4627532, 2048) | 0;
 _memcpy($$3$i$i417 + 28724 | 0, 4629580, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $36);
 if ($$3$i$i417 | 0) {
  $5147 = $$3$i$i417 + 5 | 0;
  $5149 = (HEAP8[$5147 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5147 >> 0] = $5149;
  if (!($5149 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i417);
  HEAP32[$36 >> 2] = 0;
 }
 $5151 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5151 >> 1] = 465;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 479;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 531; else {
  $5156 = HEAP32[918918] | 0;
  if (($5156 | 0) == (HEAP32[918916] | 0)) label = 531; else {
   $$lcssa$i$i429 = 3675672;
   $$lcssa8$i$i428 = $5156;
   label = 532;
  }
 }
 do if ((label | 0) == 531) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5163 = HEAP32[918924] | 0;
   if (($5163 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i429 = 3675696;
    $$lcssa8$i$i428 = $5163;
    label = 532;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5168 = HEAP32[918930] | 0;
   if (($5168 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i429 = 3675720;
    $$lcssa8$i$i428 = $5168;
    label = 532;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5173 = HEAP32[918936] | 0;
   if (($5173 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i429 = 3675744;
    $$lcssa8$i$i428 = $5173;
    label = 532;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5178 = HEAP32[918942] | 0;
   if (($5178 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i429 = 3675768;
    $$lcssa8$i$i428 = $5178;
    label = 532;
    break;
   }
  }
  $$3$i$i430 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 532) {
  $5161 = $$lcssa8$i$i428 + -4 | 0;
  HEAP32[$$lcssa$i$i429 >> 2] = $5161;
  $$3$i$i430 = HEAP32[$5161 >> 2] | 0;
 }
 $5182 = $$3$i$i430 + 52 | 0;
 HEAP16[$$3$i$i430 >> 1] = 1024;
 HEAP16[$$3$i$i430 + 2 >> 1] = 15;
 HEAP8[$$3$i$i430 + 4 >> 0] = 16;
 HEAP8[$$3$i$i430 + 5 >> 0] = 1;
 HEAP32[$$3$i$i430 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i430 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i430 + 16 >> 2] = $5182;
 HEAP32[$$3$i$i430 + 20 >> 2] = 0;
 HEAP32[$$3$i$i430 + 24 >> 2] = 0;
 HEAP8[$$3$i$i430 + 48 >> 0] = 0;
 HEAP32[$37 >> 2] = $$3$i$i430;
 _memcpy($5182 | 0, 4631628, 2048) | 0;
 _memcpy($$3$i$i430 + 2100 | 0, 4633676, 2048) | 0;
 _memcpy($$3$i$i430 + 4148 | 0, 4635724, 2048) | 0;
 _memcpy($$3$i$i430 + 6196 | 0, 4637772, 2048) | 0;
 _memcpy($$3$i$i430 + 8244 | 0, 4639820, 2048) | 0;
 _memcpy($$3$i$i430 + 10292 | 0, 4641868, 2048) | 0;
 _memcpy($$3$i$i430 + 12340 | 0, 4643916, 2048) | 0;
 _memcpy($$3$i$i430 + 14388 | 0, 4645964, 2048) | 0;
 _memcpy($$3$i$i430 + 16436 | 0, 4648012, 2048) | 0;
 _memcpy($$3$i$i430 + 18484 | 0, 4650060, 2048) | 0;
 _memcpy($$3$i$i430 + 20532 | 0, 4652108, 2048) | 0;
 _memcpy($$3$i$i430 + 22580 | 0, 4654156, 2048) | 0;
 _memcpy($$3$i$i430 + 24628 | 0, 4656204, 2048) | 0;
 _memcpy($$3$i$i430 + 26676 | 0, 4658252, 2048) | 0;
 _memcpy($$3$i$i430 + 28724 | 0, 4660300, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $37);
 if ($$3$i$i430 | 0) {
  $5207 = $$3$i$i430 + 5 | 0;
  $5209 = (HEAP8[$5207 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5207 >> 0] = $5209;
  if (!($5209 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i430);
  HEAP32[$37 >> 2] = 0;
 }
 $5211 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5211 >> 1] = 480;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 494;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 547; else {
  $5216 = HEAP32[918918] | 0;
  if (($5216 | 0) == (HEAP32[918916] | 0)) label = 547; else {
   $$lcssa$i$i442 = 3675672;
   $$lcssa8$i$i441 = $5216;
   label = 548;
  }
 }
 do if ((label | 0) == 547) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5223 = HEAP32[918924] | 0;
   if (($5223 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i442 = 3675696;
    $$lcssa8$i$i441 = $5223;
    label = 548;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5228 = HEAP32[918930] | 0;
   if (($5228 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i442 = 3675720;
    $$lcssa8$i$i441 = $5228;
    label = 548;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5233 = HEAP32[918936] | 0;
   if (($5233 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i442 = 3675744;
    $$lcssa8$i$i441 = $5233;
    label = 548;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5238 = HEAP32[918942] | 0;
   if (($5238 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i442 = 3675768;
    $$lcssa8$i$i441 = $5238;
    label = 548;
    break;
   }
  }
  $$3$i$i443 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 548) {
  $5221 = $$lcssa8$i$i441 + -4 | 0;
  HEAP32[$$lcssa$i$i442 >> 2] = $5221;
  $$3$i$i443 = HEAP32[$5221 >> 2] | 0;
 }
 $5242 = $$3$i$i443 + 52 | 0;
 HEAP16[$$3$i$i443 >> 1] = 1024;
 HEAP16[$$3$i$i443 + 2 >> 1] = 15;
 HEAP8[$$3$i$i443 + 4 >> 0] = 16;
 HEAP8[$$3$i$i443 + 5 >> 0] = 1;
 HEAP32[$$3$i$i443 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i443 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i443 + 16 >> 2] = $5242;
 HEAP32[$$3$i$i443 + 20 >> 2] = 0;
 HEAP32[$$3$i$i443 + 24 >> 2] = 0;
 HEAP8[$$3$i$i443 + 48 >> 0] = 0;
 HEAP32[$38 >> 2] = $$3$i$i443;
 _memcpy($5242 | 0, 4662348, 2048) | 0;
 _memcpy($$3$i$i443 + 2100 | 0, 4664396, 2048) | 0;
 _memcpy($$3$i$i443 + 4148 | 0, 4666444, 2048) | 0;
 _memcpy($$3$i$i443 + 6196 | 0, 4668492, 2048) | 0;
 _memcpy($$3$i$i443 + 8244 | 0, 4670540, 2048) | 0;
 _memcpy($$3$i$i443 + 10292 | 0, 4672588, 2048) | 0;
 _memcpy($$3$i$i443 + 12340 | 0, 4674636, 2048) | 0;
 _memcpy($$3$i$i443 + 14388 | 0, 4676684, 2048) | 0;
 _memcpy($$3$i$i443 + 16436 | 0, 4678732, 2048) | 0;
 _memcpy($$3$i$i443 + 18484 | 0, 4680780, 2048) | 0;
 _memcpy($$3$i$i443 + 20532 | 0, 4682828, 2048) | 0;
 _memcpy($$3$i$i443 + 22580 | 0, 4684876, 2048) | 0;
 _memcpy($$3$i$i443 + 24628 | 0, 4686924, 2048) | 0;
 _memcpy($$3$i$i443 + 26676 | 0, 4688972, 2048) | 0;
 _memcpy($$3$i$i443 + 28724 | 0, 4691020, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $38);
 if ($$3$i$i443 | 0) {
  $5267 = $$3$i$i443 + 5 | 0;
  $5269 = (HEAP8[$5267 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5267 >> 0] = $5269;
  if (!($5269 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i443);
  HEAP32[$38 >> 2] = 0;
 }
 $5271 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5271 >> 1] = 495;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 509;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 563; else {
  $5276 = HEAP32[918918] | 0;
  if (($5276 | 0) == (HEAP32[918916] | 0)) label = 563; else {
   $$lcssa$i$i455 = 3675672;
   $$lcssa8$i$i454 = $5276;
   label = 564;
  }
 }
 do if ((label | 0) == 563) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5283 = HEAP32[918924] | 0;
   if (($5283 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i455 = 3675696;
    $$lcssa8$i$i454 = $5283;
    label = 564;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5288 = HEAP32[918930] | 0;
   if (($5288 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i455 = 3675720;
    $$lcssa8$i$i454 = $5288;
    label = 564;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5293 = HEAP32[918936] | 0;
   if (($5293 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i455 = 3675744;
    $$lcssa8$i$i454 = $5293;
    label = 564;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5298 = HEAP32[918942] | 0;
   if (($5298 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i455 = 3675768;
    $$lcssa8$i$i454 = $5298;
    label = 564;
    break;
   }
  }
  $$3$i$i456 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 564) {
  $5281 = $$lcssa8$i$i454 + -4 | 0;
  HEAP32[$$lcssa$i$i455 >> 2] = $5281;
  $$3$i$i456 = HEAP32[$5281 >> 2] | 0;
 }
 $5302 = $$3$i$i456 + 52 | 0;
 HEAP16[$$3$i$i456 >> 1] = 1024;
 HEAP16[$$3$i$i456 + 2 >> 1] = 15;
 HEAP8[$$3$i$i456 + 4 >> 0] = 16;
 HEAP8[$$3$i$i456 + 5 >> 0] = 1;
 HEAP32[$$3$i$i456 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i456 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i456 + 16 >> 2] = $5302;
 HEAP32[$$3$i$i456 + 20 >> 2] = 0;
 HEAP32[$$3$i$i456 + 24 >> 2] = 0;
 HEAP8[$$3$i$i456 + 48 >> 0] = 0;
 HEAP32[$39 >> 2] = $$3$i$i456;
 _memcpy($5302 | 0, 4693068, 2048) | 0;
 _memcpy($$3$i$i456 + 2100 | 0, 4695116, 2048) | 0;
 _memcpy($$3$i$i456 + 4148 | 0, 4697164, 2048) | 0;
 _memcpy($$3$i$i456 + 6196 | 0, 4699212, 2048) | 0;
 _memcpy($$3$i$i456 + 8244 | 0, 4701260, 2048) | 0;
 _memcpy($$3$i$i456 + 10292 | 0, 4703308, 2048) | 0;
 _memcpy($$3$i$i456 + 12340 | 0, 4705356, 2048) | 0;
 _memcpy($$3$i$i456 + 14388 | 0, 4707404, 2048) | 0;
 _memcpy($$3$i$i456 + 16436 | 0, 4709452, 2048) | 0;
 _memcpy($$3$i$i456 + 18484 | 0, 4711500, 2048) | 0;
 _memcpy($$3$i$i456 + 20532 | 0, 4713548, 2048) | 0;
 _memcpy($$3$i$i456 + 22580 | 0, 4715596, 2048) | 0;
 _memcpy($$3$i$i456 + 24628 | 0, 4717644, 2048) | 0;
 _memcpy($$3$i$i456 + 26676 | 0, 4719692, 2048) | 0;
 _memcpy($$3$i$i456 + 28724 | 0, 4721740, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $39);
 if ($$3$i$i456 | 0) {
  $5327 = $$3$i$i456 + 5 | 0;
  $5329 = (HEAP8[$5327 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5327 >> 0] = $5329;
  if (!($5329 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i456);
  HEAP32[$39 >> 2] = 0;
 }
 $5331 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5331 >> 1] = 510;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 524;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 579; else {
  $5336 = HEAP32[918918] | 0;
  if (($5336 | 0) == (HEAP32[918916] | 0)) label = 579; else {
   $$lcssa$i$i468 = 3675672;
   $$lcssa8$i$i467 = $5336;
   label = 580;
  }
 }
 do if ((label | 0) == 579) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5343 = HEAP32[918924] | 0;
   if (($5343 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i468 = 3675696;
    $$lcssa8$i$i467 = $5343;
    label = 580;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5348 = HEAP32[918930] | 0;
   if (($5348 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i468 = 3675720;
    $$lcssa8$i$i467 = $5348;
    label = 580;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5353 = HEAP32[918936] | 0;
   if (($5353 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i468 = 3675744;
    $$lcssa8$i$i467 = $5353;
    label = 580;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5358 = HEAP32[918942] | 0;
   if (($5358 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i468 = 3675768;
    $$lcssa8$i$i467 = $5358;
    label = 580;
    break;
   }
  }
  $$3$i$i469 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 580) {
  $5341 = $$lcssa8$i$i467 + -4 | 0;
  HEAP32[$$lcssa$i$i468 >> 2] = $5341;
  $$3$i$i469 = HEAP32[$5341 >> 2] | 0;
 }
 $5362 = $$3$i$i469 + 52 | 0;
 HEAP16[$$3$i$i469 >> 1] = 1024;
 HEAP16[$$3$i$i469 + 2 >> 1] = 15;
 HEAP8[$$3$i$i469 + 4 >> 0] = 16;
 HEAP8[$$3$i$i469 + 5 >> 0] = 1;
 HEAP32[$$3$i$i469 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i469 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i469 + 16 >> 2] = $5362;
 HEAP32[$$3$i$i469 + 20 >> 2] = 0;
 HEAP32[$$3$i$i469 + 24 >> 2] = 0;
 HEAP8[$$3$i$i469 + 48 >> 0] = 0;
 HEAP32[$40 >> 2] = $$3$i$i469;
 _memcpy($5362 | 0, 4723788, 2048) | 0;
 _memcpy($$3$i$i469 + 2100 | 0, 4725836, 2048) | 0;
 _memcpy($$3$i$i469 + 4148 | 0, 4727884, 2048) | 0;
 _memcpy($$3$i$i469 + 6196 | 0, 4729932, 2048) | 0;
 _memcpy($$3$i$i469 + 8244 | 0, 4731980, 2048) | 0;
 _memcpy($$3$i$i469 + 10292 | 0, 4734028, 2048) | 0;
 _memcpy($$3$i$i469 + 12340 | 0, 4736076, 2048) | 0;
 _memcpy($$3$i$i469 + 14388 | 0, 4738124, 2048) | 0;
 _memcpy($$3$i$i469 + 16436 | 0, 4740172, 2048) | 0;
 _memcpy($$3$i$i469 + 18484 | 0, 4742220, 2048) | 0;
 _memcpy($$3$i$i469 + 20532 | 0, 4744268, 2048) | 0;
 _memcpy($$3$i$i469 + 22580 | 0, 4746316, 2048) | 0;
 _memcpy($$3$i$i469 + 24628 | 0, 4748364, 2048) | 0;
 _memcpy($$3$i$i469 + 26676 | 0, 4750412, 2048) | 0;
 _memcpy($$3$i$i469 + 28724 | 0, 4752460, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $40);
 if ($$3$i$i469 | 0) {
  $5387 = $$3$i$i469 + 5 | 0;
  $5389 = (HEAP8[$5387 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5387 >> 0] = $5389;
  if (!($5389 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i469);
  HEAP32[$40 >> 2] = 0;
 }
 $5391 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5391 >> 1] = 525;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 539;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 595; else {
  $5396 = HEAP32[918918] | 0;
  if (($5396 | 0) == (HEAP32[918916] | 0)) label = 595; else {
   $$lcssa$i$i481 = 3675672;
   $$lcssa8$i$i480 = $5396;
   label = 596;
  }
 }
 do if ((label | 0) == 595) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5403 = HEAP32[918924] | 0;
   if (($5403 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i481 = 3675696;
    $$lcssa8$i$i480 = $5403;
    label = 596;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5408 = HEAP32[918930] | 0;
   if (($5408 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i481 = 3675720;
    $$lcssa8$i$i480 = $5408;
    label = 596;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5413 = HEAP32[918936] | 0;
   if (($5413 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i481 = 3675744;
    $$lcssa8$i$i480 = $5413;
    label = 596;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5418 = HEAP32[918942] | 0;
   if (($5418 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i481 = 3675768;
    $$lcssa8$i$i480 = $5418;
    label = 596;
    break;
   }
  }
  $$3$i$i482 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 596) {
  $5401 = $$lcssa8$i$i480 + -4 | 0;
  HEAP32[$$lcssa$i$i481 >> 2] = $5401;
  $$3$i$i482 = HEAP32[$5401 >> 2] | 0;
 }
 $5422 = $$3$i$i482 + 52 | 0;
 HEAP16[$$3$i$i482 >> 1] = 1024;
 HEAP16[$$3$i$i482 + 2 >> 1] = 15;
 HEAP8[$$3$i$i482 + 4 >> 0] = 16;
 HEAP8[$$3$i$i482 + 5 >> 0] = 1;
 HEAP32[$$3$i$i482 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i482 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i482 + 16 >> 2] = $5422;
 HEAP32[$$3$i$i482 + 20 >> 2] = 0;
 HEAP32[$$3$i$i482 + 24 >> 2] = 0;
 HEAP8[$$3$i$i482 + 48 >> 0] = 0;
 HEAP32[$41 >> 2] = $$3$i$i482;
 _memcpy($5422 | 0, 4754508, 2048) | 0;
 _memcpy($$3$i$i482 + 2100 | 0, 4756556, 2048) | 0;
 _memcpy($$3$i$i482 + 4148 | 0, 4758604, 2048) | 0;
 _memcpy($$3$i$i482 + 6196 | 0, 4760652, 2048) | 0;
 _memcpy($$3$i$i482 + 8244 | 0, 4762700, 2048) | 0;
 _memcpy($$3$i$i482 + 10292 | 0, 4764748, 2048) | 0;
 _memcpy($$3$i$i482 + 12340 | 0, 4766796, 2048) | 0;
 _memcpy($$3$i$i482 + 14388 | 0, 4768844, 2048) | 0;
 _memcpy($$3$i$i482 + 16436 | 0, 4770892, 2048) | 0;
 _memcpy($$3$i$i482 + 18484 | 0, 4772940, 2048) | 0;
 _memcpy($$3$i$i482 + 20532 | 0, 4774988, 2048) | 0;
 _memcpy($$3$i$i482 + 22580 | 0, 4777036, 2048) | 0;
 _memcpy($$3$i$i482 + 24628 | 0, 4779084, 2048) | 0;
 _memcpy($$3$i$i482 + 26676 | 0, 4781132, 2048) | 0;
 _memcpy($$3$i$i482 + 28724 | 0, 4783180, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $41);
 if ($$3$i$i482 | 0) {
  $5447 = $$3$i$i482 + 5 | 0;
  $5449 = (HEAP8[$5447 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5447 >> 0] = $5449;
  if (!($5449 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i482);
  HEAP32[$41 >> 2] = 0;
 }
 $5451 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5451 >> 1] = 540;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 554;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 611; else {
  $5456 = HEAP32[918918] | 0;
  if (($5456 | 0) == (HEAP32[918916] | 0)) label = 611; else {
   $$lcssa$i$i494 = 3675672;
   $$lcssa8$i$i493 = $5456;
   label = 612;
  }
 }
 do if ((label | 0) == 611) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5463 = HEAP32[918924] | 0;
   if (($5463 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i494 = 3675696;
    $$lcssa8$i$i493 = $5463;
    label = 612;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5468 = HEAP32[918930] | 0;
   if (($5468 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i494 = 3675720;
    $$lcssa8$i$i493 = $5468;
    label = 612;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5473 = HEAP32[918936] | 0;
   if (($5473 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i494 = 3675744;
    $$lcssa8$i$i493 = $5473;
    label = 612;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5478 = HEAP32[918942] | 0;
   if (($5478 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i494 = 3675768;
    $$lcssa8$i$i493 = $5478;
    label = 612;
    break;
   }
  }
  $$3$i$i495 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 612) {
  $5461 = $$lcssa8$i$i493 + -4 | 0;
  HEAP32[$$lcssa$i$i494 >> 2] = $5461;
  $$3$i$i495 = HEAP32[$5461 >> 2] | 0;
 }
 $5482 = $$3$i$i495 + 52 | 0;
 HEAP16[$$3$i$i495 >> 1] = 1024;
 HEAP16[$$3$i$i495 + 2 >> 1] = 15;
 HEAP8[$$3$i$i495 + 4 >> 0] = 16;
 HEAP8[$$3$i$i495 + 5 >> 0] = 1;
 HEAP32[$$3$i$i495 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i495 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i495 + 16 >> 2] = $5482;
 HEAP32[$$3$i$i495 + 20 >> 2] = 0;
 HEAP32[$$3$i$i495 + 24 >> 2] = 0;
 HEAP8[$$3$i$i495 + 48 >> 0] = 0;
 HEAP32[$42 >> 2] = $$3$i$i495;
 _memcpy($5482 | 0, 4785228, 2048) | 0;
 _memcpy($$3$i$i495 + 2100 | 0, 4787276, 2048) | 0;
 _memcpy($$3$i$i495 + 4148 | 0, 4789324, 2048) | 0;
 _memcpy($$3$i$i495 + 6196 | 0, 4791372, 2048) | 0;
 _memcpy($$3$i$i495 + 8244 | 0, 4793420, 2048) | 0;
 _memcpy($$3$i$i495 + 10292 | 0, 4795468, 2048) | 0;
 _memcpy($$3$i$i495 + 12340 | 0, 4797516, 2048) | 0;
 _memcpy($$3$i$i495 + 14388 | 0, 4799564, 2048) | 0;
 _memcpy($$3$i$i495 + 16436 | 0, 4801612, 2048) | 0;
 _memcpy($$3$i$i495 + 18484 | 0, 4803660, 2048) | 0;
 _memcpy($$3$i$i495 + 20532 | 0, 4805708, 2048) | 0;
 _memcpy($$3$i$i495 + 22580 | 0, 4807756, 2048) | 0;
 _memcpy($$3$i$i495 + 24628 | 0, 4809804, 2048) | 0;
 _memcpy($$3$i$i495 + 26676 | 0, 4811852, 2048) | 0;
 _memcpy($$3$i$i495 + 28724 | 0, 4813900, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $42);
 if ($$3$i$i495 | 0) {
  $5507 = $$3$i$i495 + 5 | 0;
  $5509 = (HEAP8[$5507 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5507 >> 0] = $5509;
  if (!($5509 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i495);
  HEAP32[$42 >> 2] = 0;
 }
 $5511 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5511 >> 1] = 555;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 569;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 627; else {
  $5516 = HEAP32[918918] | 0;
  if (($5516 | 0) == (HEAP32[918916] | 0)) label = 627; else {
   $$lcssa$i$i507 = 3675672;
   $$lcssa8$i$i506 = $5516;
   label = 628;
  }
 }
 do if ((label | 0) == 627) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5523 = HEAP32[918924] | 0;
   if (($5523 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i507 = 3675696;
    $$lcssa8$i$i506 = $5523;
    label = 628;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5528 = HEAP32[918930] | 0;
   if (($5528 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i507 = 3675720;
    $$lcssa8$i$i506 = $5528;
    label = 628;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5533 = HEAP32[918936] | 0;
   if (($5533 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i507 = 3675744;
    $$lcssa8$i$i506 = $5533;
    label = 628;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5538 = HEAP32[918942] | 0;
   if (($5538 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i507 = 3675768;
    $$lcssa8$i$i506 = $5538;
    label = 628;
    break;
   }
  }
  $$3$i$i508 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 628) {
  $5521 = $$lcssa8$i$i506 + -4 | 0;
  HEAP32[$$lcssa$i$i507 >> 2] = $5521;
  $$3$i$i508 = HEAP32[$5521 >> 2] | 0;
 }
 $5542 = $$3$i$i508 + 52 | 0;
 HEAP16[$$3$i$i508 >> 1] = 1024;
 HEAP16[$$3$i$i508 + 2 >> 1] = 15;
 HEAP8[$$3$i$i508 + 4 >> 0] = 16;
 HEAP8[$$3$i$i508 + 5 >> 0] = 1;
 HEAP32[$$3$i$i508 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i508 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i508 + 16 >> 2] = $5542;
 HEAP32[$$3$i$i508 + 20 >> 2] = 0;
 HEAP32[$$3$i$i508 + 24 >> 2] = 0;
 HEAP8[$$3$i$i508 + 48 >> 0] = 0;
 HEAP32[$43 >> 2] = $$3$i$i508;
 _memcpy($5542 | 0, 4815948, 2048) | 0;
 _memcpy($$3$i$i508 + 2100 | 0, 4817996, 2048) | 0;
 _memcpy($$3$i$i508 + 4148 | 0, 4820044, 2048) | 0;
 _memcpy($$3$i$i508 + 6196 | 0, 4822092, 2048) | 0;
 _memcpy($$3$i$i508 + 8244 | 0, 4824140, 2048) | 0;
 _memcpy($$3$i$i508 + 10292 | 0, 4826188, 2048) | 0;
 _memcpy($$3$i$i508 + 12340 | 0, 4828236, 2048) | 0;
 _memcpy($$3$i$i508 + 14388 | 0, 4830284, 2048) | 0;
 _memcpy($$3$i$i508 + 16436 | 0, 4832332, 2048) | 0;
 _memcpy($$3$i$i508 + 18484 | 0, 4834380, 2048) | 0;
 _memcpy($$3$i$i508 + 20532 | 0, 4836428, 2048) | 0;
 _memcpy($$3$i$i508 + 22580 | 0, 4838476, 2048) | 0;
 _memcpy($$3$i$i508 + 24628 | 0, 4840524, 2048) | 0;
 _memcpy($$3$i$i508 + 26676 | 0, 4842572, 2048) | 0;
 _memcpy($$3$i$i508 + 28724 | 0, 4844620, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $43);
 if ($$3$i$i508 | 0) {
  $5567 = $$3$i$i508 + 5 | 0;
  $5569 = (HEAP8[$5567 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5567 >> 0] = $5569;
  if (!($5569 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i508);
  HEAP32[$43 >> 2] = 0;
 }
 $5571 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5571 >> 1] = 570;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 584;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 643; else {
  $5576 = HEAP32[918918] | 0;
  if (($5576 | 0) == (HEAP32[918916] | 0)) label = 643; else {
   $$lcssa$i$i520 = 3675672;
   $$lcssa8$i$i519 = $5576;
   label = 644;
  }
 }
 do if ((label | 0) == 643) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5583 = HEAP32[918924] | 0;
   if (($5583 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i520 = 3675696;
    $$lcssa8$i$i519 = $5583;
    label = 644;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5588 = HEAP32[918930] | 0;
   if (($5588 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i520 = 3675720;
    $$lcssa8$i$i519 = $5588;
    label = 644;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5593 = HEAP32[918936] | 0;
   if (($5593 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i520 = 3675744;
    $$lcssa8$i$i519 = $5593;
    label = 644;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5598 = HEAP32[918942] | 0;
   if (($5598 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i520 = 3675768;
    $$lcssa8$i$i519 = $5598;
    label = 644;
    break;
   }
  }
  $$3$i$i521 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 644) {
  $5581 = $$lcssa8$i$i519 + -4 | 0;
  HEAP32[$$lcssa$i$i520 >> 2] = $5581;
  $$3$i$i521 = HEAP32[$5581 >> 2] | 0;
 }
 $5602 = $$3$i$i521 + 52 | 0;
 HEAP16[$$3$i$i521 >> 1] = 1024;
 HEAP16[$$3$i$i521 + 2 >> 1] = 15;
 HEAP8[$$3$i$i521 + 4 >> 0] = 16;
 HEAP8[$$3$i$i521 + 5 >> 0] = 1;
 HEAP32[$$3$i$i521 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i521 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i521 + 16 >> 2] = $5602;
 HEAP32[$$3$i$i521 + 20 >> 2] = 0;
 HEAP32[$$3$i$i521 + 24 >> 2] = 0;
 HEAP8[$$3$i$i521 + 48 >> 0] = 0;
 HEAP32[$44 >> 2] = $$3$i$i521;
 _memcpy($5602 | 0, 4846668, 2048) | 0;
 _memcpy($$3$i$i521 + 2100 | 0, 4848716, 2048) | 0;
 _memcpy($$3$i$i521 + 4148 | 0, 4850764, 2048) | 0;
 _memcpy($$3$i$i521 + 6196 | 0, 4852812, 2048) | 0;
 _memcpy($$3$i$i521 + 8244 | 0, 4854860, 2048) | 0;
 _memcpy($$3$i$i521 + 10292 | 0, 4856908, 2048) | 0;
 _memcpy($$3$i$i521 + 12340 | 0, 4858956, 2048) | 0;
 _memcpy($$3$i$i521 + 14388 | 0, 4861004, 2048) | 0;
 _memcpy($$3$i$i521 + 16436 | 0, 4863052, 2048) | 0;
 _memcpy($$3$i$i521 + 18484 | 0, 4865100, 2048) | 0;
 _memcpy($$3$i$i521 + 20532 | 0, 4867148, 2048) | 0;
 _memcpy($$3$i$i521 + 22580 | 0, 4869196, 2048) | 0;
 _memcpy($$3$i$i521 + 24628 | 0, 4871244, 2048) | 0;
 _memcpy($$3$i$i521 + 26676 | 0, 4873292, 2048) | 0;
 _memcpy($$3$i$i521 + 28724 | 0, 4875340, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $44);
 if ($$3$i$i521 | 0) {
  $5627 = $$3$i$i521 + 5 | 0;
  $5629 = (HEAP8[$5627 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5627 >> 0] = $5629;
  if (!($5629 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i521);
  HEAP32[$44 >> 2] = 0;
 }
 $5631 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5631 >> 1] = 585;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 599;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 659; else {
  $5636 = HEAP32[918918] | 0;
  if (($5636 | 0) == (HEAP32[918916] | 0)) label = 659; else {
   $$lcssa$i$i533 = 3675672;
   $$lcssa8$i$i532 = $5636;
   label = 660;
  }
 }
 do if ((label | 0) == 659) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5643 = HEAP32[918924] | 0;
   if (($5643 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i533 = 3675696;
    $$lcssa8$i$i532 = $5643;
    label = 660;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5648 = HEAP32[918930] | 0;
   if (($5648 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i533 = 3675720;
    $$lcssa8$i$i532 = $5648;
    label = 660;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5653 = HEAP32[918936] | 0;
   if (($5653 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i533 = 3675744;
    $$lcssa8$i$i532 = $5653;
    label = 660;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5658 = HEAP32[918942] | 0;
   if (($5658 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i533 = 3675768;
    $$lcssa8$i$i532 = $5658;
    label = 660;
    break;
   }
  }
  $$3$i$i534 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 660) {
  $5641 = $$lcssa8$i$i532 + -4 | 0;
  HEAP32[$$lcssa$i$i533 >> 2] = $5641;
  $$3$i$i534 = HEAP32[$5641 >> 2] | 0;
 }
 $5662 = $$3$i$i534 + 52 | 0;
 HEAP16[$$3$i$i534 >> 1] = 1024;
 HEAP16[$$3$i$i534 + 2 >> 1] = 15;
 HEAP8[$$3$i$i534 + 4 >> 0] = 16;
 HEAP8[$$3$i$i534 + 5 >> 0] = 1;
 HEAP32[$$3$i$i534 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i534 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i534 + 16 >> 2] = $5662;
 HEAP32[$$3$i$i534 + 20 >> 2] = 0;
 HEAP32[$$3$i$i534 + 24 >> 2] = 0;
 HEAP8[$$3$i$i534 + 48 >> 0] = 0;
 HEAP32[$45 >> 2] = $$3$i$i534;
 _memcpy($5662 | 0, 4877388, 2048) | 0;
 _memcpy($$3$i$i534 + 2100 | 0, 4879436, 2048) | 0;
 _memcpy($$3$i$i534 + 4148 | 0, 4881484, 2048) | 0;
 _memcpy($$3$i$i534 + 6196 | 0, 4883532, 2048) | 0;
 _memcpy($$3$i$i534 + 8244 | 0, 4885580, 2048) | 0;
 _memcpy($$3$i$i534 + 10292 | 0, 4887628, 2048) | 0;
 _memcpy($$3$i$i534 + 12340 | 0, 4889676, 2048) | 0;
 _memcpy($$3$i$i534 + 14388 | 0, 4891724, 2048) | 0;
 _memcpy($$3$i$i534 + 16436 | 0, 4893772, 2048) | 0;
 _memcpy($$3$i$i534 + 18484 | 0, 4895820, 2048) | 0;
 _memcpy($$3$i$i534 + 20532 | 0, 4897868, 2048) | 0;
 _memcpy($$3$i$i534 + 22580 | 0, 4899916, 2048) | 0;
 _memcpy($$3$i$i534 + 24628 | 0, 4901964, 2048) | 0;
 _memcpy($$3$i$i534 + 26676 | 0, 4904012, 2048) | 0;
 _memcpy($$3$i$i534 + 28724 | 0, 4906060, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $45);
 if ($$3$i$i534 | 0) {
  $5687 = $$3$i$i534 + 5 | 0;
  $5689 = (HEAP8[$5687 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5687 >> 0] = $5689;
  if (!($5689 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i534);
  HEAP32[$45 >> 2] = 0;
 }
 $5691 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5691 >> 1] = 600;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 614;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 675; else {
  $5696 = HEAP32[918918] | 0;
  if (($5696 | 0) == (HEAP32[918916] | 0)) label = 675; else {
   $$lcssa$i$i546 = 3675672;
   $$lcssa8$i$i545 = $5696;
   label = 676;
  }
 }
 do if ((label | 0) == 675) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5703 = HEAP32[918924] | 0;
   if (($5703 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i546 = 3675696;
    $$lcssa8$i$i545 = $5703;
    label = 676;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5708 = HEAP32[918930] | 0;
   if (($5708 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i546 = 3675720;
    $$lcssa8$i$i545 = $5708;
    label = 676;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5713 = HEAP32[918936] | 0;
   if (($5713 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i546 = 3675744;
    $$lcssa8$i$i545 = $5713;
    label = 676;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5718 = HEAP32[918942] | 0;
   if (($5718 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i546 = 3675768;
    $$lcssa8$i$i545 = $5718;
    label = 676;
    break;
   }
  }
  $$3$i$i547 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 676) {
  $5701 = $$lcssa8$i$i545 + -4 | 0;
  HEAP32[$$lcssa$i$i546 >> 2] = $5701;
  $$3$i$i547 = HEAP32[$5701 >> 2] | 0;
 }
 $5722 = $$3$i$i547 + 52 | 0;
 HEAP16[$$3$i$i547 >> 1] = 1024;
 HEAP16[$$3$i$i547 + 2 >> 1] = 15;
 HEAP8[$$3$i$i547 + 4 >> 0] = 16;
 HEAP8[$$3$i$i547 + 5 >> 0] = 1;
 HEAP32[$$3$i$i547 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i547 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i547 + 16 >> 2] = $5722;
 HEAP32[$$3$i$i547 + 20 >> 2] = 0;
 HEAP32[$$3$i$i547 + 24 >> 2] = 0;
 HEAP8[$$3$i$i547 + 48 >> 0] = 0;
 HEAP32[$46 >> 2] = $$3$i$i547;
 _memcpy($5722 | 0, 4908108, 2048) | 0;
 _memcpy($$3$i$i547 + 2100 | 0, 4910156, 2048) | 0;
 _memcpy($$3$i$i547 + 4148 | 0, 4912204, 2048) | 0;
 _memcpy($$3$i$i547 + 6196 | 0, 4914252, 2048) | 0;
 _memcpy($$3$i$i547 + 8244 | 0, 4916300, 2048) | 0;
 _memcpy($$3$i$i547 + 10292 | 0, 4918348, 2048) | 0;
 _memcpy($$3$i$i547 + 12340 | 0, 4920396, 2048) | 0;
 _memcpy($$3$i$i547 + 14388 | 0, 4922444, 2048) | 0;
 _memcpy($$3$i$i547 + 16436 | 0, 4924492, 2048) | 0;
 _memcpy($$3$i$i547 + 18484 | 0, 4926540, 2048) | 0;
 _memcpy($$3$i$i547 + 20532 | 0, 4928588, 2048) | 0;
 _memcpy($$3$i$i547 + 22580 | 0, 4930636, 2048) | 0;
 _memcpy($$3$i$i547 + 24628 | 0, 4932684, 2048) | 0;
 _memcpy($$3$i$i547 + 26676 | 0, 4934732, 2048) | 0;
 _memcpy($$3$i$i547 + 28724 | 0, 4936780, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $46);
 if ($$3$i$i547 | 0) {
  $5747 = $$3$i$i547 + 5 | 0;
  $5749 = (HEAP8[$5747 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5747 >> 0] = $5749;
  if (!($5749 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i547);
  HEAP32[$46 >> 2] = 0;
 }
 $5751 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5751 >> 1] = 615;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 629;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 691; else {
  $5756 = HEAP32[918918] | 0;
  if (($5756 | 0) == (HEAP32[918916] | 0)) label = 691; else {
   $$lcssa$i$i559 = 3675672;
   $$lcssa8$i$i558 = $5756;
   label = 692;
  }
 }
 do if ((label | 0) == 691) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5763 = HEAP32[918924] | 0;
   if (($5763 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i559 = 3675696;
    $$lcssa8$i$i558 = $5763;
    label = 692;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5768 = HEAP32[918930] | 0;
   if (($5768 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i559 = 3675720;
    $$lcssa8$i$i558 = $5768;
    label = 692;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5773 = HEAP32[918936] | 0;
   if (($5773 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i559 = 3675744;
    $$lcssa8$i$i558 = $5773;
    label = 692;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5778 = HEAP32[918942] | 0;
   if (($5778 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i559 = 3675768;
    $$lcssa8$i$i558 = $5778;
    label = 692;
    break;
   }
  }
  $$3$i$i560 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 692) {
  $5761 = $$lcssa8$i$i558 + -4 | 0;
  HEAP32[$$lcssa$i$i559 >> 2] = $5761;
  $$3$i$i560 = HEAP32[$5761 >> 2] | 0;
 }
 $5782 = $$3$i$i560 + 52 | 0;
 HEAP16[$$3$i$i560 >> 1] = 1024;
 HEAP16[$$3$i$i560 + 2 >> 1] = 15;
 HEAP8[$$3$i$i560 + 4 >> 0] = 16;
 HEAP8[$$3$i$i560 + 5 >> 0] = 1;
 HEAP32[$$3$i$i560 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i560 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i560 + 16 >> 2] = $5782;
 HEAP32[$$3$i$i560 + 20 >> 2] = 0;
 HEAP32[$$3$i$i560 + 24 >> 2] = 0;
 HEAP8[$$3$i$i560 + 48 >> 0] = 0;
 HEAP32[$47 >> 2] = $$3$i$i560;
 _memcpy($5782 | 0, 4938828, 2048) | 0;
 _memcpy($$3$i$i560 + 2100 | 0, 4940876, 2048) | 0;
 _memcpy($$3$i$i560 + 4148 | 0, 4942924, 2048) | 0;
 _memcpy($$3$i$i560 + 6196 | 0, 4944972, 2048) | 0;
 _memcpy($$3$i$i560 + 8244 | 0, 4947020, 2048) | 0;
 _memcpy($$3$i$i560 + 10292 | 0, 4949068, 2048) | 0;
 _memcpy($$3$i$i560 + 12340 | 0, 4951116, 2048) | 0;
 _memcpy($$3$i$i560 + 14388 | 0, 4953164, 2048) | 0;
 _memcpy($$3$i$i560 + 16436 | 0, 4955212, 2048) | 0;
 _memcpy($$3$i$i560 + 18484 | 0, 4957260, 2048) | 0;
 _memcpy($$3$i$i560 + 20532 | 0, 4959308, 2048) | 0;
 _memcpy($$3$i$i560 + 22580 | 0, 4961356, 2048) | 0;
 _memcpy($$3$i$i560 + 24628 | 0, 4963404, 2048) | 0;
 _memcpy($$3$i$i560 + 26676 | 0, 4965452, 2048) | 0;
 _memcpy($$3$i$i560 + 28724 | 0, 4967500, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $47);
 if ($$3$i$i560 | 0) {
  $5807 = $$3$i$i560 + 5 | 0;
  $5809 = (HEAP8[$5807 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5807 >> 0] = $5809;
  if (!($5809 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i560);
  HEAP32[$47 >> 2] = 0;
 }
 $5811 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5811 >> 1] = 630;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 644;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 707; else {
  $5816 = HEAP32[918918] | 0;
  if (($5816 | 0) == (HEAP32[918916] | 0)) label = 707; else {
   $$lcssa$i$i572 = 3675672;
   $$lcssa8$i$i571 = $5816;
   label = 708;
  }
 }
 do if ((label | 0) == 707) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5823 = HEAP32[918924] | 0;
   if (($5823 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i572 = 3675696;
    $$lcssa8$i$i571 = $5823;
    label = 708;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5828 = HEAP32[918930] | 0;
   if (($5828 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i572 = 3675720;
    $$lcssa8$i$i571 = $5828;
    label = 708;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5833 = HEAP32[918936] | 0;
   if (($5833 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i572 = 3675744;
    $$lcssa8$i$i571 = $5833;
    label = 708;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5838 = HEAP32[918942] | 0;
   if (($5838 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i572 = 3675768;
    $$lcssa8$i$i571 = $5838;
    label = 708;
    break;
   }
  }
  $$3$i$i573 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 708) {
  $5821 = $$lcssa8$i$i571 + -4 | 0;
  HEAP32[$$lcssa$i$i572 >> 2] = $5821;
  $$3$i$i573 = HEAP32[$5821 >> 2] | 0;
 }
 $5842 = $$3$i$i573 + 52 | 0;
 HEAP16[$$3$i$i573 >> 1] = 1024;
 HEAP16[$$3$i$i573 + 2 >> 1] = 15;
 HEAP8[$$3$i$i573 + 4 >> 0] = 16;
 HEAP8[$$3$i$i573 + 5 >> 0] = 1;
 HEAP32[$$3$i$i573 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i573 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i573 + 16 >> 2] = $5842;
 HEAP32[$$3$i$i573 + 20 >> 2] = 0;
 HEAP32[$$3$i$i573 + 24 >> 2] = 0;
 HEAP8[$$3$i$i573 + 48 >> 0] = 0;
 HEAP32[$48 >> 2] = $$3$i$i573;
 _memcpy($5842 | 0, 4969548, 2048) | 0;
 _memcpy($$3$i$i573 + 2100 | 0, 4971596, 2048) | 0;
 _memcpy($$3$i$i573 + 4148 | 0, 4973644, 2048) | 0;
 _memcpy($$3$i$i573 + 6196 | 0, 4975692, 2048) | 0;
 _memcpy($$3$i$i573 + 8244 | 0, 4977740, 2048) | 0;
 _memcpy($$3$i$i573 + 10292 | 0, 4979788, 2048) | 0;
 _memcpy($$3$i$i573 + 12340 | 0, 4981836, 2048) | 0;
 _memcpy($$3$i$i573 + 14388 | 0, 4983884, 2048) | 0;
 _memcpy($$3$i$i573 + 16436 | 0, 4985932, 2048) | 0;
 _memcpy($$3$i$i573 + 18484 | 0, 4987980, 2048) | 0;
 _memcpy($$3$i$i573 + 20532 | 0, 4990028, 2048) | 0;
 _memcpy($$3$i$i573 + 22580 | 0, 4992076, 2048) | 0;
 _memcpy($$3$i$i573 + 24628 | 0, 4994124, 2048) | 0;
 _memcpy($$3$i$i573 + 26676 | 0, 4996172, 2048) | 0;
 _memcpy($$3$i$i573 + 28724 | 0, 4998220, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $48);
 if ($$3$i$i573 | 0) {
  $5867 = $$3$i$i573 + 5 | 0;
  $5869 = (HEAP8[$5867 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5867 >> 0] = $5869;
  if (!($5869 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i573);
  HEAP32[$48 >> 2] = 0;
 }
 $5871 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5871 >> 1] = 645;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 659;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 723; else {
  $5876 = HEAP32[918918] | 0;
  if (($5876 | 0) == (HEAP32[918916] | 0)) label = 723; else {
   $$lcssa$i$i585 = 3675672;
   $$lcssa8$i$i584 = $5876;
   label = 724;
  }
 }
 do if ((label | 0) == 723) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5883 = HEAP32[918924] | 0;
   if (($5883 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i585 = 3675696;
    $$lcssa8$i$i584 = $5883;
    label = 724;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5888 = HEAP32[918930] | 0;
   if (($5888 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i585 = 3675720;
    $$lcssa8$i$i584 = $5888;
    label = 724;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5893 = HEAP32[918936] | 0;
   if (($5893 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i585 = 3675744;
    $$lcssa8$i$i584 = $5893;
    label = 724;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5898 = HEAP32[918942] | 0;
   if (($5898 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i585 = 3675768;
    $$lcssa8$i$i584 = $5898;
    label = 724;
    break;
   }
  }
  $$3$i$i586 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 724) {
  $5881 = $$lcssa8$i$i584 + -4 | 0;
  HEAP32[$$lcssa$i$i585 >> 2] = $5881;
  $$3$i$i586 = HEAP32[$5881 >> 2] | 0;
 }
 $5902 = $$3$i$i586 + 52 | 0;
 HEAP16[$$3$i$i586 >> 1] = 1024;
 HEAP16[$$3$i$i586 + 2 >> 1] = 15;
 HEAP8[$$3$i$i586 + 4 >> 0] = 16;
 HEAP8[$$3$i$i586 + 5 >> 0] = 1;
 HEAP32[$$3$i$i586 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i586 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i586 + 16 >> 2] = $5902;
 HEAP32[$$3$i$i586 + 20 >> 2] = 0;
 HEAP32[$$3$i$i586 + 24 >> 2] = 0;
 HEAP8[$$3$i$i586 + 48 >> 0] = 0;
 HEAP32[$49 >> 2] = $$3$i$i586;
 _memcpy($5902 | 0, 5000268, 2048) | 0;
 _memcpy($$3$i$i586 + 2100 | 0, 5002316, 2048) | 0;
 _memcpy($$3$i$i586 + 4148 | 0, 5004364, 2048) | 0;
 _memcpy($$3$i$i586 + 6196 | 0, 5006412, 2048) | 0;
 _memcpy($$3$i$i586 + 8244 | 0, 5008460, 2048) | 0;
 _memcpy($$3$i$i586 + 10292 | 0, 5010508, 2048) | 0;
 _memcpy($$3$i$i586 + 12340 | 0, 5012556, 2048) | 0;
 _memcpy($$3$i$i586 + 14388 | 0, 5014604, 2048) | 0;
 _memcpy($$3$i$i586 + 16436 | 0, 5016652, 2048) | 0;
 _memcpy($$3$i$i586 + 18484 | 0, 5018700, 2048) | 0;
 _memcpy($$3$i$i586 + 20532 | 0, 5020748, 2048) | 0;
 _memcpy($$3$i$i586 + 22580 | 0, 5022796, 2048) | 0;
 _memcpy($$3$i$i586 + 24628 | 0, 5024844, 2048) | 0;
 _memcpy($$3$i$i586 + 26676 | 0, 5026892, 2048) | 0;
 _memcpy($$3$i$i586 + 28724 | 0, 5028940, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $49);
 if ($$3$i$i586 | 0) {
  $5927 = $$3$i$i586 + 5 | 0;
  $5929 = (HEAP8[$5927 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5927 >> 0] = $5929;
  if (!($5929 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i586);
  HEAP32[$49 >> 2] = 0;
 }
 $5931 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5931 >> 1] = 660;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 674;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 739; else {
  $5936 = HEAP32[918918] | 0;
  if (($5936 | 0) == (HEAP32[918916] | 0)) label = 739; else {
   $$lcssa$i$i598 = 3675672;
   $$lcssa8$i$i597 = $5936;
   label = 740;
  }
 }
 do if ((label | 0) == 739) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $5943 = HEAP32[918924] | 0;
   if (($5943 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i598 = 3675696;
    $$lcssa8$i$i597 = $5943;
    label = 740;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $5948 = HEAP32[918930] | 0;
   if (($5948 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i598 = 3675720;
    $$lcssa8$i$i597 = $5948;
    label = 740;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $5953 = HEAP32[918936] | 0;
   if (($5953 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i598 = 3675744;
    $$lcssa8$i$i597 = $5953;
    label = 740;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $5958 = HEAP32[918942] | 0;
   if (($5958 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i598 = 3675768;
    $$lcssa8$i$i597 = $5958;
    label = 740;
    break;
   }
  }
  $$3$i$i599 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 740) {
  $5941 = $$lcssa8$i$i597 + -4 | 0;
  HEAP32[$$lcssa$i$i598 >> 2] = $5941;
  $$3$i$i599 = HEAP32[$5941 >> 2] | 0;
 }
 $5962 = $$3$i$i599 + 52 | 0;
 HEAP16[$$3$i$i599 >> 1] = 1024;
 HEAP16[$$3$i$i599 + 2 >> 1] = 15;
 HEAP8[$$3$i$i599 + 4 >> 0] = 16;
 HEAP8[$$3$i$i599 + 5 >> 0] = 1;
 HEAP32[$$3$i$i599 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i599 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i599 + 16 >> 2] = $5962;
 HEAP32[$$3$i$i599 + 20 >> 2] = 0;
 HEAP32[$$3$i$i599 + 24 >> 2] = 0;
 HEAP8[$$3$i$i599 + 48 >> 0] = 0;
 HEAP32[$50 >> 2] = $$3$i$i599;
 _memcpy($5962 | 0, 5030988, 2048) | 0;
 _memcpy($$3$i$i599 + 2100 | 0, 5033036, 2048) | 0;
 _memcpy($$3$i$i599 + 4148 | 0, 5035084, 2048) | 0;
 _memcpy($$3$i$i599 + 6196 | 0, 5037132, 2048) | 0;
 _memcpy($$3$i$i599 + 8244 | 0, 5039180, 2048) | 0;
 _memcpy($$3$i$i599 + 10292 | 0, 5041228, 2048) | 0;
 _memcpy($$3$i$i599 + 12340 | 0, 5043276, 2048) | 0;
 _memcpy($$3$i$i599 + 14388 | 0, 5045324, 2048) | 0;
 _memcpy($$3$i$i599 + 16436 | 0, 5047372, 2048) | 0;
 _memcpy($$3$i$i599 + 18484 | 0, 5049420, 2048) | 0;
 _memcpy($$3$i$i599 + 20532 | 0, 5051468, 2048) | 0;
 _memcpy($$3$i$i599 + 22580 | 0, 5053516, 2048) | 0;
 _memcpy($$3$i$i599 + 24628 | 0, 5055564, 2048) | 0;
 _memcpy($$3$i$i599 + 26676 | 0, 5057612, 2048) | 0;
 _memcpy($$3$i$i599 + 28724 | 0, 5059660, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $50);
 if ($$3$i$i599 | 0) {
  $5987 = $$3$i$i599 + 5 | 0;
  $5989 = (HEAP8[$5987 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$5987 >> 0] = $5989;
  if (!($5989 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i599);
  HEAP32[$50 >> 2] = 0;
 }
 $5991 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$5991 >> 1] = 675;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 689;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 755; else {
  $5996 = HEAP32[918918] | 0;
  if (($5996 | 0) == (HEAP32[918916] | 0)) label = 755; else {
   $$lcssa$i$i611 = 3675672;
   $$lcssa8$i$i610 = $5996;
   label = 756;
  }
 }
 do if ((label | 0) == 755) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6003 = HEAP32[918924] | 0;
   if (($6003 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i611 = 3675696;
    $$lcssa8$i$i610 = $6003;
    label = 756;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6008 = HEAP32[918930] | 0;
   if (($6008 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i611 = 3675720;
    $$lcssa8$i$i610 = $6008;
    label = 756;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6013 = HEAP32[918936] | 0;
   if (($6013 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i611 = 3675744;
    $$lcssa8$i$i610 = $6013;
    label = 756;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6018 = HEAP32[918942] | 0;
   if (($6018 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i611 = 3675768;
    $$lcssa8$i$i610 = $6018;
    label = 756;
    break;
   }
  }
  $$3$i$i612 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 756) {
  $6001 = $$lcssa8$i$i610 + -4 | 0;
  HEAP32[$$lcssa$i$i611 >> 2] = $6001;
  $$3$i$i612 = HEAP32[$6001 >> 2] | 0;
 }
 $6022 = $$3$i$i612 + 52 | 0;
 HEAP16[$$3$i$i612 >> 1] = 1024;
 HEAP16[$$3$i$i612 + 2 >> 1] = 15;
 HEAP8[$$3$i$i612 + 4 >> 0] = 16;
 HEAP8[$$3$i$i612 + 5 >> 0] = 1;
 HEAP32[$$3$i$i612 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i612 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i612 + 16 >> 2] = $6022;
 HEAP32[$$3$i$i612 + 20 >> 2] = 0;
 HEAP32[$$3$i$i612 + 24 >> 2] = 0;
 HEAP8[$$3$i$i612 + 48 >> 0] = 0;
 HEAP32[$51 >> 2] = $$3$i$i612;
 _memcpy($6022 | 0, 5061708, 2048) | 0;
 _memcpy($$3$i$i612 + 2100 | 0, 5063756, 2048) | 0;
 _memcpy($$3$i$i612 + 4148 | 0, 5065804, 2048) | 0;
 _memcpy($$3$i$i612 + 6196 | 0, 5067852, 2048) | 0;
 _memcpy($$3$i$i612 + 8244 | 0, 5069900, 2048) | 0;
 _memcpy($$3$i$i612 + 10292 | 0, 5071948, 2048) | 0;
 _memcpy($$3$i$i612 + 12340 | 0, 5073996, 2048) | 0;
 _memcpy($$3$i$i612 + 14388 | 0, 5076044, 2048) | 0;
 _memcpy($$3$i$i612 + 16436 | 0, 5078092, 2048) | 0;
 _memcpy($$3$i$i612 + 18484 | 0, 5080140, 2048) | 0;
 _memcpy($$3$i$i612 + 20532 | 0, 5082188, 2048) | 0;
 _memcpy($$3$i$i612 + 22580 | 0, 5084236, 2048) | 0;
 _memcpy($$3$i$i612 + 24628 | 0, 5086284, 2048) | 0;
 _memcpy($$3$i$i612 + 26676 | 0, 5088332, 2048) | 0;
 _memcpy($$3$i$i612 + 28724 | 0, 5090380, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $51);
 if ($$3$i$i612 | 0) {
  $6047 = $$3$i$i612 + 5 | 0;
  $6049 = (HEAP8[$6047 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6047 >> 0] = $6049;
  if (!($6049 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i612);
  HEAP32[$51 >> 2] = 0;
 }
 $6051 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6051 >> 1] = 690;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 704;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 771; else {
  $6056 = HEAP32[918918] | 0;
  if (($6056 | 0) == (HEAP32[918916] | 0)) label = 771; else {
   $$lcssa$i$i624 = 3675672;
   $$lcssa8$i$i623 = $6056;
   label = 772;
  }
 }
 do if ((label | 0) == 771) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6063 = HEAP32[918924] | 0;
   if (($6063 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i624 = 3675696;
    $$lcssa8$i$i623 = $6063;
    label = 772;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6068 = HEAP32[918930] | 0;
   if (($6068 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i624 = 3675720;
    $$lcssa8$i$i623 = $6068;
    label = 772;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6073 = HEAP32[918936] | 0;
   if (($6073 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i624 = 3675744;
    $$lcssa8$i$i623 = $6073;
    label = 772;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6078 = HEAP32[918942] | 0;
   if (($6078 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i624 = 3675768;
    $$lcssa8$i$i623 = $6078;
    label = 772;
    break;
   }
  }
  $$3$i$i625 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 772) {
  $6061 = $$lcssa8$i$i623 + -4 | 0;
  HEAP32[$$lcssa$i$i624 >> 2] = $6061;
  $$3$i$i625 = HEAP32[$6061 >> 2] | 0;
 }
 $6082 = $$3$i$i625 + 52 | 0;
 HEAP16[$$3$i$i625 >> 1] = 1024;
 HEAP16[$$3$i$i625 + 2 >> 1] = 15;
 HEAP8[$$3$i$i625 + 4 >> 0] = 16;
 HEAP8[$$3$i$i625 + 5 >> 0] = 1;
 HEAP32[$$3$i$i625 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i625 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i625 + 16 >> 2] = $6082;
 HEAP32[$$3$i$i625 + 20 >> 2] = 0;
 HEAP32[$$3$i$i625 + 24 >> 2] = 0;
 HEAP8[$$3$i$i625 + 48 >> 0] = 0;
 HEAP32[$52 >> 2] = $$3$i$i625;
 _memcpy($6082 | 0, 5092428, 2048) | 0;
 _memcpy($$3$i$i625 + 2100 | 0, 5094476, 2048) | 0;
 _memcpy($$3$i$i625 + 4148 | 0, 5096524, 2048) | 0;
 _memcpy($$3$i$i625 + 6196 | 0, 5098572, 2048) | 0;
 _memcpy($$3$i$i625 + 8244 | 0, 5100620, 2048) | 0;
 _memcpy($$3$i$i625 + 10292 | 0, 5102668, 2048) | 0;
 _memcpy($$3$i$i625 + 12340 | 0, 5104716, 2048) | 0;
 _memcpy($$3$i$i625 + 14388 | 0, 5106764, 2048) | 0;
 _memcpy($$3$i$i625 + 16436 | 0, 5108812, 2048) | 0;
 _memcpy($$3$i$i625 + 18484 | 0, 5110860, 2048) | 0;
 _memcpy($$3$i$i625 + 20532 | 0, 5112908, 2048) | 0;
 _memcpy($$3$i$i625 + 22580 | 0, 5114956, 2048) | 0;
 _memcpy($$3$i$i625 + 24628 | 0, 5117004, 2048) | 0;
 _memcpy($$3$i$i625 + 26676 | 0, 5119052, 2048) | 0;
 _memcpy($$3$i$i625 + 28724 | 0, 5121100, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $52);
 if ($$3$i$i625 | 0) {
  $6107 = $$3$i$i625 + 5 | 0;
  $6109 = (HEAP8[$6107 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6107 >> 0] = $6109;
  if (!($6109 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i625);
  HEAP32[$52 >> 2] = 0;
 }
 $6111 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6111 >> 1] = 705;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 719;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 787; else {
  $6116 = HEAP32[918918] | 0;
  if (($6116 | 0) == (HEAP32[918916] | 0)) label = 787; else {
   $$lcssa$i$i637 = 3675672;
   $$lcssa8$i$i636 = $6116;
   label = 788;
  }
 }
 do if ((label | 0) == 787) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6123 = HEAP32[918924] | 0;
   if (($6123 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i637 = 3675696;
    $$lcssa8$i$i636 = $6123;
    label = 788;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6128 = HEAP32[918930] | 0;
   if (($6128 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i637 = 3675720;
    $$lcssa8$i$i636 = $6128;
    label = 788;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6133 = HEAP32[918936] | 0;
   if (($6133 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i637 = 3675744;
    $$lcssa8$i$i636 = $6133;
    label = 788;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6138 = HEAP32[918942] | 0;
   if (($6138 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i637 = 3675768;
    $$lcssa8$i$i636 = $6138;
    label = 788;
    break;
   }
  }
  $$3$i$i638 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 788) {
  $6121 = $$lcssa8$i$i636 + -4 | 0;
  HEAP32[$$lcssa$i$i637 >> 2] = $6121;
  $$3$i$i638 = HEAP32[$6121 >> 2] | 0;
 }
 $6142 = $$3$i$i638 + 52 | 0;
 HEAP16[$$3$i$i638 >> 1] = 1024;
 HEAP16[$$3$i$i638 + 2 >> 1] = 15;
 HEAP8[$$3$i$i638 + 4 >> 0] = 16;
 HEAP8[$$3$i$i638 + 5 >> 0] = 1;
 HEAP32[$$3$i$i638 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i638 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i638 + 16 >> 2] = $6142;
 HEAP32[$$3$i$i638 + 20 >> 2] = 0;
 HEAP32[$$3$i$i638 + 24 >> 2] = 0;
 HEAP8[$$3$i$i638 + 48 >> 0] = 0;
 HEAP32[$53 >> 2] = $$3$i$i638;
 _memcpy($6142 | 0, 5123148, 2048) | 0;
 _memcpy($$3$i$i638 + 2100 | 0, 5125196, 2048) | 0;
 _memcpy($$3$i$i638 + 4148 | 0, 5127244, 2048) | 0;
 _memcpy($$3$i$i638 + 6196 | 0, 5129292, 2048) | 0;
 _memcpy($$3$i$i638 + 8244 | 0, 5131340, 2048) | 0;
 _memcpy($$3$i$i638 + 10292 | 0, 5133388, 2048) | 0;
 _memcpy($$3$i$i638 + 12340 | 0, 5135436, 2048) | 0;
 _memcpy($$3$i$i638 + 14388 | 0, 5137484, 2048) | 0;
 _memcpy($$3$i$i638 + 16436 | 0, 5139532, 2048) | 0;
 _memcpy($$3$i$i638 + 18484 | 0, 5141580, 2048) | 0;
 _memcpy($$3$i$i638 + 20532 | 0, 5143628, 2048) | 0;
 _memcpy($$3$i$i638 + 22580 | 0, 5145676, 2048) | 0;
 _memcpy($$3$i$i638 + 24628 | 0, 5147724, 2048) | 0;
 _memcpy($$3$i$i638 + 26676 | 0, 5149772, 2048) | 0;
 _memcpy($$3$i$i638 + 28724 | 0, 5151820, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $53);
 if ($$3$i$i638 | 0) {
  $6167 = $$3$i$i638 + 5 | 0;
  $6169 = (HEAP8[$6167 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6167 >> 0] = $6169;
  if (!($6169 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i638);
  HEAP32[$53 >> 2] = 0;
 }
 $6171 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6171 >> 1] = 720;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 734;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 803; else {
  $6176 = HEAP32[918918] | 0;
  if (($6176 | 0) == (HEAP32[918916] | 0)) label = 803; else {
   $$lcssa$i$i650 = 3675672;
   $$lcssa8$i$i649 = $6176;
   label = 804;
  }
 }
 do if ((label | 0) == 803) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6183 = HEAP32[918924] | 0;
   if (($6183 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i650 = 3675696;
    $$lcssa8$i$i649 = $6183;
    label = 804;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6188 = HEAP32[918930] | 0;
   if (($6188 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i650 = 3675720;
    $$lcssa8$i$i649 = $6188;
    label = 804;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6193 = HEAP32[918936] | 0;
   if (($6193 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i650 = 3675744;
    $$lcssa8$i$i649 = $6193;
    label = 804;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6198 = HEAP32[918942] | 0;
   if (($6198 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i650 = 3675768;
    $$lcssa8$i$i649 = $6198;
    label = 804;
    break;
   }
  }
  $$3$i$i651 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 804) {
  $6181 = $$lcssa8$i$i649 + -4 | 0;
  HEAP32[$$lcssa$i$i650 >> 2] = $6181;
  $$3$i$i651 = HEAP32[$6181 >> 2] | 0;
 }
 $6202 = $$3$i$i651 + 52 | 0;
 HEAP16[$$3$i$i651 >> 1] = 1024;
 HEAP16[$$3$i$i651 + 2 >> 1] = 15;
 HEAP8[$$3$i$i651 + 4 >> 0] = 16;
 HEAP8[$$3$i$i651 + 5 >> 0] = 1;
 HEAP32[$$3$i$i651 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i651 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i651 + 16 >> 2] = $6202;
 HEAP32[$$3$i$i651 + 20 >> 2] = 0;
 HEAP32[$$3$i$i651 + 24 >> 2] = 0;
 HEAP8[$$3$i$i651 + 48 >> 0] = 0;
 HEAP32[$54 >> 2] = $$3$i$i651;
 _memcpy($6202 | 0, 5153868, 2048) | 0;
 _memcpy($$3$i$i651 + 2100 | 0, 5155916, 2048) | 0;
 _memcpy($$3$i$i651 + 4148 | 0, 5157964, 2048) | 0;
 _memcpy($$3$i$i651 + 6196 | 0, 5160012, 2048) | 0;
 _memcpy($$3$i$i651 + 8244 | 0, 5162060, 2048) | 0;
 _memcpy($$3$i$i651 + 10292 | 0, 5164108, 2048) | 0;
 _memcpy($$3$i$i651 + 12340 | 0, 5166156, 2048) | 0;
 _memcpy($$3$i$i651 + 14388 | 0, 5168204, 2048) | 0;
 _memcpy($$3$i$i651 + 16436 | 0, 5170252, 2048) | 0;
 _memcpy($$3$i$i651 + 18484 | 0, 5172300, 2048) | 0;
 _memcpy($$3$i$i651 + 20532 | 0, 5174348, 2048) | 0;
 _memcpy($$3$i$i651 + 22580 | 0, 5176396, 2048) | 0;
 _memcpy($$3$i$i651 + 24628 | 0, 5178444, 2048) | 0;
 _memcpy($$3$i$i651 + 26676 | 0, 5180492, 2048) | 0;
 _memcpy($$3$i$i651 + 28724 | 0, 5182540, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $54);
 if ($$3$i$i651 | 0) {
  $6227 = $$3$i$i651 + 5 | 0;
  $6229 = (HEAP8[$6227 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6227 >> 0] = $6229;
  if (!($6229 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i651);
  HEAP32[$54 >> 2] = 0;
 }
 $6231 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6231 >> 1] = 735;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 749;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 819; else {
  $6236 = HEAP32[918918] | 0;
  if (($6236 | 0) == (HEAP32[918916] | 0)) label = 819; else {
   $$lcssa$i$i663 = 3675672;
   $$lcssa8$i$i662 = $6236;
   label = 820;
  }
 }
 do if ((label | 0) == 819) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6243 = HEAP32[918924] | 0;
   if (($6243 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i663 = 3675696;
    $$lcssa8$i$i662 = $6243;
    label = 820;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6248 = HEAP32[918930] | 0;
   if (($6248 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i663 = 3675720;
    $$lcssa8$i$i662 = $6248;
    label = 820;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6253 = HEAP32[918936] | 0;
   if (($6253 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i663 = 3675744;
    $$lcssa8$i$i662 = $6253;
    label = 820;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6258 = HEAP32[918942] | 0;
   if (($6258 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i663 = 3675768;
    $$lcssa8$i$i662 = $6258;
    label = 820;
    break;
   }
  }
  $$3$i$i664 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 820) {
  $6241 = $$lcssa8$i$i662 + -4 | 0;
  HEAP32[$$lcssa$i$i663 >> 2] = $6241;
  $$3$i$i664 = HEAP32[$6241 >> 2] | 0;
 }
 $6262 = $$3$i$i664 + 52 | 0;
 HEAP16[$$3$i$i664 >> 1] = 1024;
 HEAP16[$$3$i$i664 + 2 >> 1] = 15;
 HEAP8[$$3$i$i664 + 4 >> 0] = 16;
 HEAP8[$$3$i$i664 + 5 >> 0] = 1;
 HEAP32[$$3$i$i664 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i664 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i664 + 16 >> 2] = $6262;
 HEAP32[$$3$i$i664 + 20 >> 2] = 0;
 HEAP32[$$3$i$i664 + 24 >> 2] = 0;
 HEAP8[$$3$i$i664 + 48 >> 0] = 0;
 HEAP32[$55 >> 2] = $$3$i$i664;
 _memcpy($6262 | 0, 5184588, 2048) | 0;
 _memcpy($$3$i$i664 + 2100 | 0, 5186636, 2048) | 0;
 _memcpy($$3$i$i664 + 4148 | 0, 5188684, 2048) | 0;
 _memcpy($$3$i$i664 + 6196 | 0, 5190732, 2048) | 0;
 _memcpy($$3$i$i664 + 8244 | 0, 5192780, 2048) | 0;
 _memcpy($$3$i$i664 + 10292 | 0, 5194828, 2048) | 0;
 _memcpy($$3$i$i664 + 12340 | 0, 5196876, 2048) | 0;
 _memcpy($$3$i$i664 + 14388 | 0, 5198924, 2048) | 0;
 _memcpy($$3$i$i664 + 16436 | 0, 5200972, 2048) | 0;
 _memcpy($$3$i$i664 + 18484 | 0, 5203020, 2048) | 0;
 _memcpy($$3$i$i664 + 20532 | 0, 5205068, 2048) | 0;
 _memcpy($$3$i$i664 + 22580 | 0, 5207116, 2048) | 0;
 _memcpy($$3$i$i664 + 24628 | 0, 5209164, 2048) | 0;
 _memcpy($$3$i$i664 + 26676 | 0, 5211212, 2048) | 0;
 _memcpy($$3$i$i664 + 28724 | 0, 5213260, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $55);
 if ($$3$i$i664 | 0) {
  $6287 = $$3$i$i664 + 5 | 0;
  $6289 = (HEAP8[$6287 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6287 >> 0] = $6289;
  if (!($6289 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i664);
  HEAP32[$55 >> 2] = 0;
 }
 $6291 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6291 >> 1] = 750;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 764;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 835; else {
  $6296 = HEAP32[918918] | 0;
  if (($6296 | 0) == (HEAP32[918916] | 0)) label = 835; else {
   $$lcssa$i$i676 = 3675672;
   $$lcssa8$i$i675 = $6296;
   label = 836;
  }
 }
 do if ((label | 0) == 835) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6303 = HEAP32[918924] | 0;
   if (($6303 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i676 = 3675696;
    $$lcssa8$i$i675 = $6303;
    label = 836;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6308 = HEAP32[918930] | 0;
   if (($6308 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i676 = 3675720;
    $$lcssa8$i$i675 = $6308;
    label = 836;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6313 = HEAP32[918936] | 0;
   if (($6313 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i676 = 3675744;
    $$lcssa8$i$i675 = $6313;
    label = 836;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6318 = HEAP32[918942] | 0;
   if (($6318 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i676 = 3675768;
    $$lcssa8$i$i675 = $6318;
    label = 836;
    break;
   }
  }
  $$3$i$i677 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 836) {
  $6301 = $$lcssa8$i$i675 + -4 | 0;
  HEAP32[$$lcssa$i$i676 >> 2] = $6301;
  $$3$i$i677 = HEAP32[$6301 >> 2] | 0;
 }
 $6322 = $$3$i$i677 + 52 | 0;
 HEAP16[$$3$i$i677 >> 1] = 1024;
 HEAP16[$$3$i$i677 + 2 >> 1] = 15;
 HEAP8[$$3$i$i677 + 4 >> 0] = 16;
 HEAP8[$$3$i$i677 + 5 >> 0] = 1;
 HEAP32[$$3$i$i677 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i677 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i677 + 16 >> 2] = $6322;
 HEAP32[$$3$i$i677 + 20 >> 2] = 0;
 HEAP32[$$3$i$i677 + 24 >> 2] = 0;
 HEAP8[$$3$i$i677 + 48 >> 0] = 0;
 HEAP32[$56 >> 2] = $$3$i$i677;
 _memcpy($6322 | 0, 5215308, 2048) | 0;
 _memcpy($$3$i$i677 + 2100 | 0, 5217356, 2048) | 0;
 _memcpy($$3$i$i677 + 4148 | 0, 5219404, 2048) | 0;
 _memcpy($$3$i$i677 + 6196 | 0, 5221452, 2048) | 0;
 _memcpy($$3$i$i677 + 8244 | 0, 5223500, 2048) | 0;
 _memcpy($$3$i$i677 + 10292 | 0, 5225548, 2048) | 0;
 _memcpy($$3$i$i677 + 12340 | 0, 5227596, 2048) | 0;
 _memcpy($$3$i$i677 + 14388 | 0, 5229644, 2048) | 0;
 _memcpy($$3$i$i677 + 16436 | 0, 5231692, 2048) | 0;
 _memcpy($$3$i$i677 + 18484 | 0, 5233740, 2048) | 0;
 _memcpy($$3$i$i677 + 20532 | 0, 5235788, 2048) | 0;
 _memcpy($$3$i$i677 + 22580 | 0, 5237836, 2048) | 0;
 _memcpy($$3$i$i677 + 24628 | 0, 5239884, 2048) | 0;
 _memcpy($$3$i$i677 + 26676 | 0, 5241932, 2048) | 0;
 _memcpy($$3$i$i677 + 28724 | 0, 5243980, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $56);
 if ($$3$i$i677 | 0) {
  $6347 = $$3$i$i677 + 5 | 0;
  $6349 = (HEAP8[$6347 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6347 >> 0] = $6349;
  if (!($6349 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i677);
  HEAP32[$56 >> 2] = 0;
 }
 $6351 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6351 >> 1] = 765;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 767;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6196) label = 851; else {
  $6356 = HEAP32[918918] | 0;
  if (($6356 | 0) == (HEAP32[918916] | 0)) label = 851; else {
   $$lcssa$i$i689 = 3675672;
   $$lcssa8$i$i688 = $6356;
   label = 852;
  }
 }
 do if ((label | 0) == 851) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6196) {
   $6363 = HEAP32[918924] | 0;
   if (($6363 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i689 = 3675696;
    $$lcssa8$i$i688 = $6363;
    label = 852;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6196) {
   $6368 = HEAP32[918930] | 0;
   if (($6368 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i689 = 3675720;
    $$lcssa8$i$i688 = $6368;
    label = 852;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6196) {
   $6373 = HEAP32[918936] | 0;
   if (($6373 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i689 = 3675744;
    $$lcssa8$i$i688 = $6373;
    label = 852;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6196) {
   $6378 = HEAP32[918942] | 0;
   if (($6378 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i689 = 3675768;
    $$lcssa8$i$i688 = $6378;
    label = 852;
    break;
   }
  }
  $$3$i$i690 = __Znwj(6196) | 0;
 } while (0);
 if ((label | 0) == 852) {
  $6361 = $$lcssa8$i$i688 + -4 | 0;
  HEAP32[$$lcssa$i$i689 >> 2] = $6361;
  $$3$i$i690 = HEAP32[$6361 >> 2] | 0;
 }
 $6382 = $$3$i$i690 + 52 | 0;
 HEAP16[$$3$i$i690 >> 1] = 1024;
 HEAP16[$$3$i$i690 + 2 >> 1] = 3;
 HEAP8[$$3$i$i690 + 4 >> 0] = 16;
 HEAP8[$$3$i$i690 + 5 >> 0] = 1;
 HEAP32[$$3$i$i690 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i690 + 12 >> 2] = 6144;
 HEAP32[$$3$i$i690 + 16 >> 2] = $6382;
 HEAP32[$$3$i$i690 + 20 >> 2] = 0;
 HEAP32[$$3$i$i690 + 24 >> 2] = 0;
 HEAP8[$$3$i$i690 + 48 >> 0] = 0;
 HEAP32[$57 >> 2] = $$3$i$i690;
 _memcpy($6382 | 0, 5246028, 2048) | 0;
 _memcpy($$3$i$i690 + 2100 | 0, 5248076, 2048) | 0;
 _memcpy($$3$i$i690 + 4148 | 0, 5250124, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $57);
 if ($$3$i$i690 | 0) {
  $6395 = $$3$i$i690 + 5 | 0;
  $6397 = (HEAP8[$6395 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6395 >> 0] = $6397;
  if (!($6397 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i690);
  HEAP32[$57 >> 2] = 0;
 }
 $6399 = $58;
 HEAP32[$6399 >> 2] = 327685;
 HEAP32[$6399 + 4 >> 2] = 1835164;
 HEAP32[$58 + 8 >> 2] = 6895;
 HEAP16[$59 >> 1] = 5;
 HEAP16[$59 + 2 >> 1] = 5;
 HEAP16[$59 + 4 >> 1] = 156;
 HEAP16[$59 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $58, $59);
 $6407 = $60;
 HEAP32[$6407 >> 2] = 327685;
 HEAP32[$6407 + 4 >> 2] = 1835164;
 HEAP32[$60 + 8 >> 2] = 6895;
 HEAP16[$61 >> 1] = 5;
 HEAP16[$61 + 2 >> 1] = 5;
 HEAP16[$61 + 4 >> 1] = 156;
 HEAP16[$61 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $60, $61);
 $6415 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6415 >> 1] = 33;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 47;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 867; else {
  $6420 = HEAP32[918918] | 0;
  if (($6420 | 0) == (HEAP32[918916] | 0)) label = 867; else {
   $$lcssa$i$i708 = 3675672;
   $$lcssa8$i$i707 = $6420;
   label = 868;
  }
 }
 do if ((label | 0) == 867) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6427 = HEAP32[918924] | 0;
   if (($6427 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i708 = 3675696;
    $$lcssa8$i$i707 = $6427;
    label = 868;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6432 = HEAP32[918930] | 0;
   if (($6432 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i708 = 3675720;
    $$lcssa8$i$i707 = $6432;
    label = 868;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6437 = HEAP32[918936] | 0;
   if (($6437 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i708 = 3675744;
    $$lcssa8$i$i707 = $6437;
    label = 868;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6442 = HEAP32[918942] | 0;
   if (($6442 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i708 = 3675768;
    $$lcssa8$i$i707 = $6442;
    label = 868;
    break;
   }
  }
  $$3$i$i709 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 868) {
  $6425 = $$lcssa8$i$i707 + -4 | 0;
  HEAP32[$$lcssa$i$i708 >> 2] = $6425;
  $$3$i$i709 = HEAP32[$6425 >> 2] | 0;
 }
 $6446 = $$3$i$i709 + 52 | 0;
 HEAP16[$$3$i$i709 >> 1] = 1024;
 HEAP16[$$3$i$i709 + 2 >> 1] = 15;
 HEAP8[$$3$i$i709 + 4 >> 0] = 16;
 HEAP8[$$3$i$i709 + 5 >> 0] = 1;
 HEAP32[$$3$i$i709 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i709 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i709 + 16 >> 2] = $6446;
 HEAP32[$$3$i$i709 + 20 >> 2] = 0;
 HEAP32[$$3$i$i709 + 24 >> 2] = 0;
 HEAP8[$$3$i$i709 + 48 >> 0] = 0;
 HEAP32[$62 >> 2] = $$3$i$i709;
 _memcpy($6446 | 0, 19344, 2048) | 0;
 _memcpy($$3$i$i709 + 2100 | 0, 21392, 2048) | 0;
 _memcpy($$3$i$i709 + 4148 | 0, 23440, 2048) | 0;
 _memcpy($$3$i$i709 + 6196 | 0, 25488, 2048) | 0;
 _memcpy($$3$i$i709 + 8244 | 0, 27536, 2048) | 0;
 _memcpy($$3$i$i709 + 10292 | 0, 29584, 2048) | 0;
 _memcpy($$3$i$i709 + 12340 | 0, 31632, 2048) | 0;
 _memcpy($$3$i$i709 + 14388 | 0, 33680, 2048) | 0;
 _memcpy($$3$i$i709 + 16436 | 0, 35728, 2048) | 0;
 _memcpy($$3$i$i709 + 18484 | 0, 37776, 2048) | 0;
 _memcpy($$3$i$i709 + 20532 | 0, 39824, 2048) | 0;
 _memcpy($$3$i$i709 + 22580 | 0, 41872, 2048) | 0;
 _memcpy($$3$i$i709 + 24628 | 0, 43920, 2048) | 0;
 _memcpy($$3$i$i709 + 26676 | 0, 45968, 2048) | 0;
 _memcpy($$3$i$i709 + 28724 | 0, 48016, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $62);
 if ($$3$i$i709 | 0) {
  $6471 = $$3$i$i709 + 5 | 0;
  $6473 = (HEAP8[$6471 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6471 >> 0] = $6473;
  if (!($6473 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i709);
  HEAP32[$62 >> 2] = 0;
 }
 $6475 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6475 >> 1] = 48;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 62;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 883; else {
  $6480 = HEAP32[918918] | 0;
  if (($6480 | 0) == (HEAP32[918916] | 0)) label = 883; else {
   $$lcssa$i$i721 = 3675672;
   $$lcssa8$i$i720 = $6480;
   label = 884;
  }
 }
 do if ((label | 0) == 883) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6487 = HEAP32[918924] | 0;
   if (($6487 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i721 = 3675696;
    $$lcssa8$i$i720 = $6487;
    label = 884;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6492 = HEAP32[918930] | 0;
   if (($6492 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i721 = 3675720;
    $$lcssa8$i$i720 = $6492;
    label = 884;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6497 = HEAP32[918936] | 0;
   if (($6497 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i721 = 3675744;
    $$lcssa8$i$i720 = $6497;
    label = 884;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6502 = HEAP32[918942] | 0;
   if (($6502 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i721 = 3675768;
    $$lcssa8$i$i720 = $6502;
    label = 884;
    break;
   }
  }
  $$3$i$i722 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 884) {
  $6485 = $$lcssa8$i$i720 + -4 | 0;
  HEAP32[$$lcssa$i$i721 >> 2] = $6485;
  $$3$i$i722 = HEAP32[$6485 >> 2] | 0;
 }
 $6506 = $$3$i$i722 + 52 | 0;
 HEAP16[$$3$i$i722 >> 1] = 1024;
 HEAP16[$$3$i$i722 + 2 >> 1] = 15;
 HEAP8[$$3$i$i722 + 4 >> 0] = 16;
 HEAP8[$$3$i$i722 + 5 >> 0] = 1;
 HEAP32[$$3$i$i722 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i722 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i722 + 16 >> 2] = $6506;
 HEAP32[$$3$i$i722 + 20 >> 2] = 0;
 HEAP32[$$3$i$i722 + 24 >> 2] = 0;
 HEAP8[$$3$i$i722 + 48 >> 0] = 0;
 HEAP32[$63 >> 2] = $$3$i$i722;
 _memcpy($6506 | 0, 50064, 2048) | 0;
 _memcpy($$3$i$i722 + 2100 | 0, 52112, 2048) | 0;
 _memcpy($$3$i$i722 + 4148 | 0, 54160, 2048) | 0;
 _memcpy($$3$i$i722 + 6196 | 0, 56208, 2048) | 0;
 _memcpy($$3$i$i722 + 8244 | 0, 58256, 2048) | 0;
 _memcpy($$3$i$i722 + 10292 | 0, 60304, 2048) | 0;
 _memcpy($$3$i$i722 + 12340 | 0, 62352, 2048) | 0;
 _memcpy($$3$i$i722 + 14388 | 0, 64400, 2048) | 0;
 _memcpy($$3$i$i722 + 16436 | 0, 66448, 2048) | 0;
 _memcpy($$3$i$i722 + 18484 | 0, 68496, 2048) | 0;
 _memcpy($$3$i$i722 + 20532 | 0, 70544, 2048) | 0;
 _memcpy($$3$i$i722 + 22580 | 0, 72592, 2048) | 0;
 _memcpy($$3$i$i722 + 24628 | 0, 74640, 2048) | 0;
 _memcpy($$3$i$i722 + 26676 | 0, 76688, 2048) | 0;
 _memcpy($$3$i$i722 + 28724 | 0, 78736, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $63);
 if ($$3$i$i722 | 0) {
  $6531 = $$3$i$i722 + 5 | 0;
  $6533 = (HEAP8[$6531 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6531 >> 0] = $6533;
  if (!($6533 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i722);
  HEAP32[$63 >> 2] = 0;
 }
 $6535 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6535 >> 1] = 63;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 77;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 899; else {
  $6540 = HEAP32[918918] | 0;
  if (($6540 | 0) == (HEAP32[918916] | 0)) label = 899; else {
   $$lcssa$i$i734 = 3675672;
   $$lcssa8$i$i733 = $6540;
   label = 900;
  }
 }
 do if ((label | 0) == 899) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6547 = HEAP32[918924] | 0;
   if (($6547 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i734 = 3675696;
    $$lcssa8$i$i733 = $6547;
    label = 900;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6552 = HEAP32[918930] | 0;
   if (($6552 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i734 = 3675720;
    $$lcssa8$i$i733 = $6552;
    label = 900;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6557 = HEAP32[918936] | 0;
   if (($6557 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i734 = 3675744;
    $$lcssa8$i$i733 = $6557;
    label = 900;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6562 = HEAP32[918942] | 0;
   if (($6562 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i734 = 3675768;
    $$lcssa8$i$i733 = $6562;
    label = 900;
    break;
   }
  }
  $$3$i$i735 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 900) {
  $6545 = $$lcssa8$i$i733 + -4 | 0;
  HEAP32[$$lcssa$i$i734 >> 2] = $6545;
  $$3$i$i735 = HEAP32[$6545 >> 2] | 0;
 }
 $6566 = $$3$i$i735 + 52 | 0;
 HEAP16[$$3$i$i735 >> 1] = 1024;
 HEAP16[$$3$i$i735 + 2 >> 1] = 15;
 HEAP8[$$3$i$i735 + 4 >> 0] = 16;
 HEAP8[$$3$i$i735 + 5 >> 0] = 1;
 HEAP32[$$3$i$i735 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i735 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i735 + 16 >> 2] = $6566;
 HEAP32[$$3$i$i735 + 20 >> 2] = 0;
 HEAP32[$$3$i$i735 + 24 >> 2] = 0;
 HEAP8[$$3$i$i735 + 48 >> 0] = 0;
 HEAP32[$64 >> 2] = $$3$i$i735;
 _memcpy($6566 | 0, 80784, 2048) | 0;
 _memcpy($$3$i$i735 + 2100 | 0, 82832, 2048) | 0;
 _memcpy($$3$i$i735 + 4148 | 0, 84880, 2048) | 0;
 _memcpy($$3$i$i735 + 6196 | 0, 86928, 2048) | 0;
 _memcpy($$3$i$i735 + 8244 | 0, 88976, 2048) | 0;
 _memcpy($$3$i$i735 + 10292 | 0, 91024, 2048) | 0;
 _memcpy($$3$i$i735 + 12340 | 0, 93072, 2048) | 0;
 _memcpy($$3$i$i735 + 14388 | 0, 95120, 2048) | 0;
 _memcpy($$3$i$i735 + 16436 | 0, 97168, 2048) | 0;
 _memcpy($$3$i$i735 + 18484 | 0, 99216, 2048) | 0;
 _memcpy($$3$i$i735 + 20532 | 0, 101264, 2048) | 0;
 _memcpy($$3$i$i735 + 22580 | 0, 103312, 2048) | 0;
 _memcpy($$3$i$i735 + 24628 | 0, 105360, 2048) | 0;
 _memcpy($$3$i$i735 + 26676 | 0, 107408, 2048) | 0;
 _memcpy($$3$i$i735 + 28724 | 0, 109456, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $64);
 if ($$3$i$i735 | 0) {
  $6591 = $$3$i$i735 + 5 | 0;
  $6593 = (HEAP8[$6591 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6591 >> 0] = $6593;
  if (!($6593 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i735);
  HEAP32[$64 >> 2] = 0;
 }
 $6595 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6595 >> 1] = 78;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 92;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 915; else {
  $6600 = HEAP32[918918] | 0;
  if (($6600 | 0) == (HEAP32[918916] | 0)) label = 915; else {
   $$lcssa$i$i747 = 3675672;
   $$lcssa8$i$i746 = $6600;
   label = 916;
  }
 }
 do if ((label | 0) == 915) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6607 = HEAP32[918924] | 0;
   if (($6607 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i747 = 3675696;
    $$lcssa8$i$i746 = $6607;
    label = 916;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6612 = HEAP32[918930] | 0;
   if (($6612 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i747 = 3675720;
    $$lcssa8$i$i746 = $6612;
    label = 916;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6617 = HEAP32[918936] | 0;
   if (($6617 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i747 = 3675744;
    $$lcssa8$i$i746 = $6617;
    label = 916;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6622 = HEAP32[918942] | 0;
   if (($6622 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i747 = 3675768;
    $$lcssa8$i$i746 = $6622;
    label = 916;
    break;
   }
  }
  $$3$i$i748 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 916) {
  $6605 = $$lcssa8$i$i746 + -4 | 0;
  HEAP32[$$lcssa$i$i747 >> 2] = $6605;
  $$3$i$i748 = HEAP32[$6605 >> 2] | 0;
 }
 $6626 = $$3$i$i748 + 52 | 0;
 HEAP16[$$3$i$i748 >> 1] = 1024;
 HEAP16[$$3$i$i748 + 2 >> 1] = 15;
 HEAP8[$$3$i$i748 + 4 >> 0] = 16;
 HEAP8[$$3$i$i748 + 5 >> 0] = 1;
 HEAP32[$$3$i$i748 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i748 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i748 + 16 >> 2] = $6626;
 HEAP32[$$3$i$i748 + 20 >> 2] = 0;
 HEAP32[$$3$i$i748 + 24 >> 2] = 0;
 HEAP8[$$3$i$i748 + 48 >> 0] = 0;
 HEAP32[$65 >> 2] = $$3$i$i748;
 _memcpy($6626 | 0, 111504, 2048) | 0;
 _memcpy($$3$i$i748 + 2100 | 0, 113552, 2048) | 0;
 _memcpy($$3$i$i748 + 4148 | 0, 115600, 2048) | 0;
 _memcpy($$3$i$i748 + 6196 | 0, 117648, 2048) | 0;
 _memcpy($$3$i$i748 + 8244 | 0, 119696, 2048) | 0;
 _memcpy($$3$i$i748 + 10292 | 0, 121744, 2048) | 0;
 _memcpy($$3$i$i748 + 12340 | 0, 123792, 2048) | 0;
 _memcpy($$3$i$i748 + 14388 | 0, 125840, 2048) | 0;
 _memcpy($$3$i$i748 + 16436 | 0, 127888, 2048) | 0;
 _memcpy($$3$i$i748 + 18484 | 0, 129936, 2048) | 0;
 _memcpy($$3$i$i748 + 20532 | 0, 131984, 2048) | 0;
 _memcpy($$3$i$i748 + 22580 | 0, 134032, 2048) | 0;
 _memcpy($$3$i$i748 + 24628 | 0, 136080, 2048) | 0;
 _memcpy($$3$i$i748 + 26676 | 0, 138128, 2048) | 0;
 _memcpy($$3$i$i748 + 28724 | 0, 140176, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $65);
 if ($$3$i$i748 | 0) {
  $6651 = $$3$i$i748 + 5 | 0;
  $6653 = (HEAP8[$6651 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6651 >> 0] = $6653;
  if (!($6653 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i748);
  HEAP32[$65 >> 2] = 0;
 }
 $6655 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6655 >> 1] = 93;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 107;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 931; else {
  $6660 = HEAP32[918918] | 0;
  if (($6660 | 0) == (HEAP32[918916] | 0)) label = 931; else {
   $$lcssa$i$i760 = 3675672;
   $$lcssa8$i$i759 = $6660;
   label = 932;
  }
 }
 do if ((label | 0) == 931) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6667 = HEAP32[918924] | 0;
   if (($6667 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i760 = 3675696;
    $$lcssa8$i$i759 = $6667;
    label = 932;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6672 = HEAP32[918930] | 0;
   if (($6672 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i760 = 3675720;
    $$lcssa8$i$i759 = $6672;
    label = 932;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6677 = HEAP32[918936] | 0;
   if (($6677 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i760 = 3675744;
    $$lcssa8$i$i759 = $6677;
    label = 932;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6682 = HEAP32[918942] | 0;
   if (($6682 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i760 = 3675768;
    $$lcssa8$i$i759 = $6682;
    label = 932;
    break;
   }
  }
  $$3$i$i761 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 932) {
  $6665 = $$lcssa8$i$i759 + -4 | 0;
  HEAP32[$$lcssa$i$i760 >> 2] = $6665;
  $$3$i$i761 = HEAP32[$6665 >> 2] | 0;
 }
 $6686 = $$3$i$i761 + 52 | 0;
 HEAP16[$$3$i$i761 >> 1] = 1024;
 HEAP16[$$3$i$i761 + 2 >> 1] = 15;
 HEAP8[$$3$i$i761 + 4 >> 0] = 16;
 HEAP8[$$3$i$i761 + 5 >> 0] = 1;
 HEAP32[$$3$i$i761 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i761 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i761 + 16 >> 2] = $6686;
 HEAP32[$$3$i$i761 + 20 >> 2] = 0;
 HEAP32[$$3$i$i761 + 24 >> 2] = 0;
 HEAP8[$$3$i$i761 + 48 >> 0] = 0;
 HEAP32[$66 >> 2] = $$3$i$i761;
 _memcpy($6686 | 0, 142224, 2048) | 0;
 _memcpy($$3$i$i761 + 2100 | 0, 144272, 2048) | 0;
 _memcpy($$3$i$i761 + 4148 | 0, 146320, 2048) | 0;
 _memcpy($$3$i$i761 + 6196 | 0, 148368, 2048) | 0;
 _memcpy($$3$i$i761 + 8244 | 0, 150416, 2048) | 0;
 _memcpy($$3$i$i761 + 10292 | 0, 152464, 2048) | 0;
 _memcpy($$3$i$i761 + 12340 | 0, 154512, 2048) | 0;
 _memcpy($$3$i$i761 + 14388 | 0, 156560, 2048) | 0;
 _memcpy($$3$i$i761 + 16436 | 0, 158608, 2048) | 0;
 _memcpy($$3$i$i761 + 18484 | 0, 160656, 2048) | 0;
 _memcpy($$3$i$i761 + 20532 | 0, 162704, 2048) | 0;
 _memcpy($$3$i$i761 + 22580 | 0, 164752, 2048) | 0;
 _memcpy($$3$i$i761 + 24628 | 0, 166800, 2048) | 0;
 _memcpy($$3$i$i761 + 26676 | 0, 168848, 2048) | 0;
 _memcpy($$3$i$i761 + 28724 | 0, 170896, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $66);
 if ($$3$i$i761 | 0) {
  $6711 = $$3$i$i761 + 5 | 0;
  $6713 = (HEAP8[$6711 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6711 >> 0] = $6713;
  if (!($6713 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i761);
  HEAP32[$66 >> 2] = 0;
 }
 $6715 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6715 >> 1] = 108;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 122;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 947; else {
  $6720 = HEAP32[918918] | 0;
  if (($6720 | 0) == (HEAP32[918916] | 0)) label = 947; else {
   $$lcssa$i$i773 = 3675672;
   $$lcssa8$i$i772 = $6720;
   label = 948;
  }
 }
 do if ((label | 0) == 947) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6727 = HEAP32[918924] | 0;
   if (($6727 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i773 = 3675696;
    $$lcssa8$i$i772 = $6727;
    label = 948;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6732 = HEAP32[918930] | 0;
   if (($6732 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i773 = 3675720;
    $$lcssa8$i$i772 = $6732;
    label = 948;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6737 = HEAP32[918936] | 0;
   if (($6737 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i773 = 3675744;
    $$lcssa8$i$i772 = $6737;
    label = 948;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6742 = HEAP32[918942] | 0;
   if (($6742 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i773 = 3675768;
    $$lcssa8$i$i772 = $6742;
    label = 948;
    break;
   }
  }
  $$3$i$i774 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 948) {
  $6725 = $$lcssa8$i$i772 + -4 | 0;
  HEAP32[$$lcssa$i$i773 >> 2] = $6725;
  $$3$i$i774 = HEAP32[$6725 >> 2] | 0;
 }
 $6746 = $$3$i$i774 + 52 | 0;
 HEAP16[$$3$i$i774 >> 1] = 1024;
 HEAP16[$$3$i$i774 + 2 >> 1] = 15;
 HEAP8[$$3$i$i774 + 4 >> 0] = 16;
 HEAP8[$$3$i$i774 + 5 >> 0] = 1;
 HEAP32[$$3$i$i774 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i774 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i774 + 16 >> 2] = $6746;
 HEAP32[$$3$i$i774 + 20 >> 2] = 0;
 HEAP32[$$3$i$i774 + 24 >> 2] = 0;
 HEAP8[$$3$i$i774 + 48 >> 0] = 0;
 HEAP32[$67 >> 2] = $$3$i$i774;
 _memcpy($6746 | 0, 172944, 2048) | 0;
 _memcpy($$3$i$i774 + 2100 | 0, 174992, 2048) | 0;
 _memcpy($$3$i$i774 + 4148 | 0, 177040, 2048) | 0;
 _memcpy($$3$i$i774 + 6196 | 0, 179088, 2048) | 0;
 _memcpy($$3$i$i774 + 8244 | 0, 181136, 2048) | 0;
 _memcpy($$3$i$i774 + 10292 | 0, 183184, 2048) | 0;
 _memcpy($$3$i$i774 + 12340 | 0, 185232, 2048) | 0;
 _memcpy($$3$i$i774 + 14388 | 0, 187280, 2048) | 0;
 _memcpy($$3$i$i774 + 16436 | 0, 189328, 2048) | 0;
 _memcpy($$3$i$i774 + 18484 | 0, 191376, 2048) | 0;
 _memcpy($$3$i$i774 + 20532 | 0, 193424, 2048) | 0;
 _memcpy($$3$i$i774 + 22580 | 0, 195472, 2048) | 0;
 _memcpy($$3$i$i774 + 24628 | 0, 197520, 2048) | 0;
 _memcpy($$3$i$i774 + 26676 | 0, 199568, 2048) | 0;
 _memcpy($$3$i$i774 + 28724 | 0, 201616, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $67);
 if ($$3$i$i774 | 0) {
  $6771 = $$3$i$i774 + 5 | 0;
  $6773 = (HEAP8[$6771 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6771 >> 0] = $6773;
  if (!($6773 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i774);
  HEAP32[$67 >> 2] = 0;
 }
 $6775 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6775 >> 1] = 123;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 137;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 963; else {
  $6780 = HEAP32[918918] | 0;
  if (($6780 | 0) == (HEAP32[918916] | 0)) label = 963; else {
   $$lcssa$i$i786 = 3675672;
   $$lcssa8$i$i785 = $6780;
   label = 964;
  }
 }
 do if ((label | 0) == 963) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6787 = HEAP32[918924] | 0;
   if (($6787 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i786 = 3675696;
    $$lcssa8$i$i785 = $6787;
    label = 964;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6792 = HEAP32[918930] | 0;
   if (($6792 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i786 = 3675720;
    $$lcssa8$i$i785 = $6792;
    label = 964;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6797 = HEAP32[918936] | 0;
   if (($6797 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i786 = 3675744;
    $$lcssa8$i$i785 = $6797;
    label = 964;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6802 = HEAP32[918942] | 0;
   if (($6802 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i786 = 3675768;
    $$lcssa8$i$i785 = $6802;
    label = 964;
    break;
   }
  }
  $$3$i$i787 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 964) {
  $6785 = $$lcssa8$i$i785 + -4 | 0;
  HEAP32[$$lcssa$i$i786 >> 2] = $6785;
  $$3$i$i787 = HEAP32[$6785 >> 2] | 0;
 }
 $6806 = $$3$i$i787 + 52 | 0;
 HEAP16[$$3$i$i787 >> 1] = 1024;
 HEAP16[$$3$i$i787 + 2 >> 1] = 15;
 HEAP8[$$3$i$i787 + 4 >> 0] = 16;
 HEAP8[$$3$i$i787 + 5 >> 0] = 1;
 HEAP32[$$3$i$i787 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i787 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i787 + 16 >> 2] = $6806;
 HEAP32[$$3$i$i787 + 20 >> 2] = 0;
 HEAP32[$$3$i$i787 + 24 >> 2] = 0;
 HEAP8[$$3$i$i787 + 48 >> 0] = 0;
 HEAP32[$68 >> 2] = $$3$i$i787;
 _memcpy($6806 | 0, 203664, 2048) | 0;
 _memcpy($$3$i$i787 + 2100 | 0, 205712, 2048) | 0;
 _memcpy($$3$i$i787 + 4148 | 0, 207760, 2048) | 0;
 _memcpy($$3$i$i787 + 6196 | 0, 209808, 2048) | 0;
 _memcpy($$3$i$i787 + 8244 | 0, 211856, 2048) | 0;
 _memcpy($$3$i$i787 + 10292 | 0, 213904, 2048) | 0;
 _memcpy($$3$i$i787 + 12340 | 0, 215952, 2048) | 0;
 _memcpy($$3$i$i787 + 14388 | 0, 218e3, 2048) | 0;
 _memcpy($$3$i$i787 + 16436 | 0, 220048, 2048) | 0;
 _memcpy($$3$i$i787 + 18484 | 0, 222096, 2048) | 0;
 _memcpy($$3$i$i787 + 20532 | 0, 224144, 2048) | 0;
 _memcpy($$3$i$i787 + 22580 | 0, 226192, 2048) | 0;
 _memcpy($$3$i$i787 + 24628 | 0, 228240, 2048) | 0;
 _memcpy($$3$i$i787 + 26676 | 0, 230288, 2048) | 0;
 _memcpy($$3$i$i787 + 28724 | 0, 232336, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $68);
 if ($$3$i$i787 | 0) {
  $6831 = $$3$i$i787 + 5 | 0;
  $6833 = (HEAP8[$6831 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6831 >> 0] = $6833;
  if (!($6833 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i787);
  HEAP32[$68 >> 2] = 0;
 }
 $6835 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6835 >> 1] = 138;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 152;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 979; else {
  $6840 = HEAP32[918918] | 0;
  if (($6840 | 0) == (HEAP32[918916] | 0)) label = 979; else {
   $$lcssa$i$i799 = 3675672;
   $$lcssa8$i$i798 = $6840;
   label = 980;
  }
 }
 do if ((label | 0) == 979) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6847 = HEAP32[918924] | 0;
   if (($6847 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i799 = 3675696;
    $$lcssa8$i$i798 = $6847;
    label = 980;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6852 = HEAP32[918930] | 0;
   if (($6852 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i799 = 3675720;
    $$lcssa8$i$i798 = $6852;
    label = 980;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6857 = HEAP32[918936] | 0;
   if (($6857 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i799 = 3675744;
    $$lcssa8$i$i798 = $6857;
    label = 980;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6862 = HEAP32[918942] | 0;
   if (($6862 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i799 = 3675768;
    $$lcssa8$i$i798 = $6862;
    label = 980;
    break;
   }
  }
  $$3$i$i800 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 980) {
  $6845 = $$lcssa8$i$i798 + -4 | 0;
  HEAP32[$$lcssa$i$i799 >> 2] = $6845;
  $$3$i$i800 = HEAP32[$6845 >> 2] | 0;
 }
 $6866 = $$3$i$i800 + 52 | 0;
 HEAP16[$$3$i$i800 >> 1] = 1024;
 HEAP16[$$3$i$i800 + 2 >> 1] = 15;
 HEAP8[$$3$i$i800 + 4 >> 0] = 16;
 HEAP8[$$3$i$i800 + 5 >> 0] = 1;
 HEAP32[$$3$i$i800 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i800 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i800 + 16 >> 2] = $6866;
 HEAP32[$$3$i$i800 + 20 >> 2] = 0;
 HEAP32[$$3$i$i800 + 24 >> 2] = 0;
 HEAP8[$$3$i$i800 + 48 >> 0] = 0;
 HEAP32[$69 >> 2] = $$3$i$i800;
 _memcpy($6866 | 0, 234384, 2048) | 0;
 _memcpy($$3$i$i800 + 2100 | 0, 236432, 2048) | 0;
 _memcpy($$3$i$i800 + 4148 | 0, 238480, 2048) | 0;
 _memcpy($$3$i$i800 + 6196 | 0, 240528, 2048) | 0;
 _memcpy($$3$i$i800 + 8244 | 0, 242576, 2048) | 0;
 _memcpy($$3$i$i800 + 10292 | 0, 244624, 2048) | 0;
 _memcpy($$3$i$i800 + 12340 | 0, 246672, 2048) | 0;
 _memcpy($$3$i$i800 + 14388 | 0, 248720, 2048) | 0;
 _memcpy($$3$i$i800 + 16436 | 0, 250768, 2048) | 0;
 _memcpy($$3$i$i800 + 18484 | 0, 252816, 2048) | 0;
 _memcpy($$3$i$i800 + 20532 | 0, 254864, 2048) | 0;
 _memcpy($$3$i$i800 + 22580 | 0, 256912, 2048) | 0;
 _memcpy($$3$i$i800 + 24628 | 0, 258960, 2048) | 0;
 _memcpy($$3$i$i800 + 26676 | 0, 261008, 2048) | 0;
 _memcpy($$3$i$i800 + 28724 | 0, 263056, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $69);
 if ($$3$i$i800 | 0) {
  $6891 = $$3$i$i800 + 5 | 0;
  $6893 = (HEAP8[$6891 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6891 >> 0] = $6893;
  if (!($6893 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i800);
  HEAP32[$69 >> 2] = 0;
 }
 $6895 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6895 >> 1] = 153;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 167;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 995; else {
  $6900 = HEAP32[918918] | 0;
  if (($6900 | 0) == (HEAP32[918916] | 0)) label = 995; else {
   $$lcssa$i$i812 = 3675672;
   $$lcssa8$i$i811 = $6900;
   label = 996;
  }
 }
 do if ((label | 0) == 995) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6907 = HEAP32[918924] | 0;
   if (($6907 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i812 = 3675696;
    $$lcssa8$i$i811 = $6907;
    label = 996;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6912 = HEAP32[918930] | 0;
   if (($6912 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i812 = 3675720;
    $$lcssa8$i$i811 = $6912;
    label = 996;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6917 = HEAP32[918936] | 0;
   if (($6917 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i812 = 3675744;
    $$lcssa8$i$i811 = $6917;
    label = 996;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6922 = HEAP32[918942] | 0;
   if (($6922 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i812 = 3675768;
    $$lcssa8$i$i811 = $6922;
    label = 996;
    break;
   }
  }
  $$3$i$i813 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 996) {
  $6905 = $$lcssa8$i$i811 + -4 | 0;
  HEAP32[$$lcssa$i$i812 >> 2] = $6905;
  $$3$i$i813 = HEAP32[$6905 >> 2] | 0;
 }
 $6926 = $$3$i$i813 + 52 | 0;
 HEAP16[$$3$i$i813 >> 1] = 1024;
 HEAP16[$$3$i$i813 + 2 >> 1] = 15;
 HEAP8[$$3$i$i813 + 4 >> 0] = 16;
 HEAP8[$$3$i$i813 + 5 >> 0] = 1;
 HEAP32[$$3$i$i813 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i813 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i813 + 16 >> 2] = $6926;
 HEAP32[$$3$i$i813 + 20 >> 2] = 0;
 HEAP32[$$3$i$i813 + 24 >> 2] = 0;
 HEAP8[$$3$i$i813 + 48 >> 0] = 0;
 HEAP32[$70 >> 2] = $$3$i$i813;
 _memcpy($6926 | 0, 265104, 2048) | 0;
 _memcpy($$3$i$i813 + 2100 | 0, 267152, 2048) | 0;
 _memcpy($$3$i$i813 + 4148 | 0, 269200, 2048) | 0;
 _memcpy($$3$i$i813 + 6196 | 0, 271248, 2048) | 0;
 _memcpy($$3$i$i813 + 8244 | 0, 273296, 2048) | 0;
 _memcpy($$3$i$i813 + 10292 | 0, 275344, 2048) | 0;
 _memcpy($$3$i$i813 + 12340 | 0, 277392, 2048) | 0;
 _memcpy($$3$i$i813 + 14388 | 0, 279440, 2048) | 0;
 _memcpy($$3$i$i813 + 16436 | 0, 281488, 2048) | 0;
 _memcpy($$3$i$i813 + 18484 | 0, 283536, 2048) | 0;
 _memcpy($$3$i$i813 + 20532 | 0, 285584, 2048) | 0;
 _memcpy($$3$i$i813 + 22580 | 0, 287632, 2048) | 0;
 _memcpy($$3$i$i813 + 24628 | 0, 289680, 2048) | 0;
 _memcpy($$3$i$i813 + 26676 | 0, 291728, 2048) | 0;
 _memcpy($$3$i$i813 + 28724 | 0, 293776, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $70);
 if ($$3$i$i813 | 0) {
  $6951 = $$3$i$i813 + 5 | 0;
  $6953 = (HEAP8[$6951 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$6951 >> 0] = $6953;
  if (!($6953 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i813);
  HEAP32[$70 >> 2] = 0;
 }
 $6955 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$6955 >> 1] = 168;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 182;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1011; else {
  $6960 = HEAP32[918918] | 0;
  if (($6960 | 0) == (HEAP32[918916] | 0)) label = 1011; else {
   $$lcssa$i$i825 = 3675672;
   $$lcssa8$i$i824 = $6960;
   label = 1012;
  }
 }
 do if ((label | 0) == 1011) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $6967 = HEAP32[918924] | 0;
   if (($6967 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i825 = 3675696;
    $$lcssa8$i$i824 = $6967;
    label = 1012;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $6972 = HEAP32[918930] | 0;
   if (($6972 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i825 = 3675720;
    $$lcssa8$i$i824 = $6972;
    label = 1012;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $6977 = HEAP32[918936] | 0;
   if (($6977 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i825 = 3675744;
    $$lcssa8$i$i824 = $6977;
    label = 1012;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $6982 = HEAP32[918942] | 0;
   if (($6982 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i825 = 3675768;
    $$lcssa8$i$i824 = $6982;
    label = 1012;
    break;
   }
  }
  $$3$i$i826 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1012) {
  $6965 = $$lcssa8$i$i824 + -4 | 0;
  HEAP32[$$lcssa$i$i825 >> 2] = $6965;
  $$3$i$i826 = HEAP32[$6965 >> 2] | 0;
 }
 $6986 = $$3$i$i826 + 52 | 0;
 HEAP16[$$3$i$i826 >> 1] = 1024;
 HEAP16[$$3$i$i826 + 2 >> 1] = 15;
 HEAP8[$$3$i$i826 + 4 >> 0] = 16;
 HEAP8[$$3$i$i826 + 5 >> 0] = 1;
 HEAP32[$$3$i$i826 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i826 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i826 + 16 >> 2] = $6986;
 HEAP32[$$3$i$i826 + 20 >> 2] = 0;
 HEAP32[$$3$i$i826 + 24 >> 2] = 0;
 HEAP8[$$3$i$i826 + 48 >> 0] = 0;
 HEAP32[$71 >> 2] = $$3$i$i826;
 _memcpy($6986 | 0, 295824, 2048) | 0;
 _memcpy($$3$i$i826 + 2100 | 0, 297872, 2048) | 0;
 _memcpy($$3$i$i826 + 4148 | 0, 299920, 2048) | 0;
 _memcpy($$3$i$i826 + 6196 | 0, 301968, 2048) | 0;
 _memcpy($$3$i$i826 + 8244 | 0, 304016, 2048) | 0;
 _memcpy($$3$i$i826 + 10292 | 0, 306064, 2048) | 0;
 _memcpy($$3$i$i826 + 12340 | 0, 308112, 2048) | 0;
 _memcpy($$3$i$i826 + 14388 | 0, 310160, 2048) | 0;
 _memcpy($$3$i$i826 + 16436 | 0, 312208, 2048) | 0;
 _memcpy($$3$i$i826 + 18484 | 0, 314256, 2048) | 0;
 _memcpy($$3$i$i826 + 20532 | 0, 316304, 2048) | 0;
 _memcpy($$3$i$i826 + 22580 | 0, 318352, 2048) | 0;
 _memcpy($$3$i$i826 + 24628 | 0, 320400, 2048) | 0;
 _memcpy($$3$i$i826 + 26676 | 0, 322448, 2048) | 0;
 _memcpy($$3$i$i826 + 28724 | 0, 324496, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $71);
 if ($$3$i$i826 | 0) {
  $7011 = $$3$i$i826 + 5 | 0;
  $7013 = (HEAP8[$7011 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7011 >> 0] = $7013;
  if (!($7013 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i826);
  HEAP32[$71 >> 2] = 0;
 }
 $7015 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7015 >> 1] = 183;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 197;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1027; else {
  $7020 = HEAP32[918918] | 0;
  if (($7020 | 0) == (HEAP32[918916] | 0)) label = 1027; else {
   $$lcssa$i$i838 = 3675672;
   $$lcssa8$i$i837 = $7020;
   label = 1028;
  }
 }
 do if ((label | 0) == 1027) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7027 = HEAP32[918924] | 0;
   if (($7027 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i838 = 3675696;
    $$lcssa8$i$i837 = $7027;
    label = 1028;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7032 = HEAP32[918930] | 0;
   if (($7032 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i838 = 3675720;
    $$lcssa8$i$i837 = $7032;
    label = 1028;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7037 = HEAP32[918936] | 0;
   if (($7037 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i838 = 3675744;
    $$lcssa8$i$i837 = $7037;
    label = 1028;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7042 = HEAP32[918942] | 0;
   if (($7042 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i838 = 3675768;
    $$lcssa8$i$i837 = $7042;
    label = 1028;
    break;
   }
  }
  $$3$i$i839 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1028) {
  $7025 = $$lcssa8$i$i837 + -4 | 0;
  HEAP32[$$lcssa$i$i838 >> 2] = $7025;
  $$3$i$i839 = HEAP32[$7025 >> 2] | 0;
 }
 $7046 = $$3$i$i839 + 52 | 0;
 HEAP16[$$3$i$i839 >> 1] = 1024;
 HEAP16[$$3$i$i839 + 2 >> 1] = 15;
 HEAP8[$$3$i$i839 + 4 >> 0] = 16;
 HEAP8[$$3$i$i839 + 5 >> 0] = 1;
 HEAP32[$$3$i$i839 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i839 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i839 + 16 >> 2] = $7046;
 HEAP32[$$3$i$i839 + 20 >> 2] = 0;
 HEAP32[$$3$i$i839 + 24 >> 2] = 0;
 HEAP8[$$3$i$i839 + 48 >> 0] = 0;
 HEAP32[$72 >> 2] = $$3$i$i839;
 _memcpy($7046 | 0, 326544, 2048) | 0;
 _memcpy($$3$i$i839 + 2100 | 0, 328592, 2048) | 0;
 _memcpy($$3$i$i839 + 4148 | 0, 330640, 2048) | 0;
 _memcpy($$3$i$i839 + 6196 | 0, 332688, 2048) | 0;
 _memcpy($$3$i$i839 + 8244 | 0, 334736, 2048) | 0;
 _memcpy($$3$i$i839 + 10292 | 0, 336784, 2048) | 0;
 _memcpy($$3$i$i839 + 12340 | 0, 338832, 2048) | 0;
 _memcpy($$3$i$i839 + 14388 | 0, 340880, 2048) | 0;
 _memcpy($$3$i$i839 + 16436 | 0, 342928, 2048) | 0;
 _memcpy($$3$i$i839 + 18484 | 0, 344976, 2048) | 0;
 _memcpy($$3$i$i839 + 20532 | 0, 347024, 2048) | 0;
 _memcpy($$3$i$i839 + 22580 | 0, 349072, 2048) | 0;
 _memcpy($$3$i$i839 + 24628 | 0, 351120, 2048) | 0;
 _memcpy($$3$i$i839 + 26676 | 0, 353168, 2048) | 0;
 _memcpy($$3$i$i839 + 28724 | 0, 355216, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $72);
 if ($$3$i$i839 | 0) {
  $7071 = $$3$i$i839 + 5 | 0;
  $7073 = (HEAP8[$7071 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7071 >> 0] = $7073;
  if (!($7073 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i839);
  HEAP32[$72 >> 2] = 0;
 }
 $7075 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7075 >> 1] = 198;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 212;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1043; else {
  $7080 = HEAP32[918918] | 0;
  if (($7080 | 0) == (HEAP32[918916] | 0)) label = 1043; else {
   $$lcssa$i$i851 = 3675672;
   $$lcssa8$i$i850 = $7080;
   label = 1044;
  }
 }
 do if ((label | 0) == 1043) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7087 = HEAP32[918924] | 0;
   if (($7087 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i851 = 3675696;
    $$lcssa8$i$i850 = $7087;
    label = 1044;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7092 = HEAP32[918930] | 0;
   if (($7092 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i851 = 3675720;
    $$lcssa8$i$i850 = $7092;
    label = 1044;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7097 = HEAP32[918936] | 0;
   if (($7097 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i851 = 3675744;
    $$lcssa8$i$i850 = $7097;
    label = 1044;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7102 = HEAP32[918942] | 0;
   if (($7102 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i851 = 3675768;
    $$lcssa8$i$i850 = $7102;
    label = 1044;
    break;
   }
  }
  $$3$i$i852 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1044) {
  $7085 = $$lcssa8$i$i850 + -4 | 0;
  HEAP32[$$lcssa$i$i851 >> 2] = $7085;
  $$3$i$i852 = HEAP32[$7085 >> 2] | 0;
 }
 $7106 = $$3$i$i852 + 52 | 0;
 HEAP16[$$3$i$i852 >> 1] = 1024;
 HEAP16[$$3$i$i852 + 2 >> 1] = 15;
 HEAP8[$$3$i$i852 + 4 >> 0] = 16;
 HEAP8[$$3$i$i852 + 5 >> 0] = 1;
 HEAP32[$$3$i$i852 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i852 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i852 + 16 >> 2] = $7106;
 HEAP32[$$3$i$i852 + 20 >> 2] = 0;
 HEAP32[$$3$i$i852 + 24 >> 2] = 0;
 HEAP8[$$3$i$i852 + 48 >> 0] = 0;
 HEAP32[$73 >> 2] = $$3$i$i852;
 _memcpy($7106 | 0, 357264, 2048) | 0;
 _memcpy($$3$i$i852 + 2100 | 0, 359312, 2048) | 0;
 _memcpy($$3$i$i852 + 4148 | 0, 361360, 2048) | 0;
 _memcpy($$3$i$i852 + 6196 | 0, 363408, 2048) | 0;
 _memcpy($$3$i$i852 + 8244 | 0, 365456, 2048) | 0;
 _memcpy($$3$i$i852 + 10292 | 0, 367504, 2048) | 0;
 _memcpy($$3$i$i852 + 12340 | 0, 369552, 2048) | 0;
 _memcpy($$3$i$i852 + 14388 | 0, 371600, 2048) | 0;
 _memcpy($$3$i$i852 + 16436 | 0, 373648, 2048) | 0;
 _memcpy($$3$i$i852 + 18484 | 0, 375696, 2048) | 0;
 _memcpy($$3$i$i852 + 20532 | 0, 377744, 2048) | 0;
 _memcpy($$3$i$i852 + 22580 | 0, 379792, 2048) | 0;
 _memcpy($$3$i$i852 + 24628 | 0, 381840, 2048) | 0;
 _memcpy($$3$i$i852 + 26676 | 0, 383888, 2048) | 0;
 _memcpy($$3$i$i852 + 28724 | 0, 385936, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $73);
 if ($$3$i$i852 | 0) {
  $7131 = $$3$i$i852 + 5 | 0;
  $7133 = (HEAP8[$7131 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7131 >> 0] = $7133;
  if (!($7133 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i852);
  HEAP32[$73 >> 2] = 0;
 }
 $7135 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7135 >> 1] = 213;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 227;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1059; else {
  $7140 = HEAP32[918918] | 0;
  if (($7140 | 0) == (HEAP32[918916] | 0)) label = 1059; else {
   $$lcssa$i$i864 = 3675672;
   $$lcssa8$i$i863 = $7140;
   label = 1060;
  }
 }
 do if ((label | 0) == 1059) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7147 = HEAP32[918924] | 0;
   if (($7147 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i864 = 3675696;
    $$lcssa8$i$i863 = $7147;
    label = 1060;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7152 = HEAP32[918930] | 0;
   if (($7152 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i864 = 3675720;
    $$lcssa8$i$i863 = $7152;
    label = 1060;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7157 = HEAP32[918936] | 0;
   if (($7157 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i864 = 3675744;
    $$lcssa8$i$i863 = $7157;
    label = 1060;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7162 = HEAP32[918942] | 0;
   if (($7162 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i864 = 3675768;
    $$lcssa8$i$i863 = $7162;
    label = 1060;
    break;
   }
  }
  $$3$i$i865 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1060) {
  $7145 = $$lcssa8$i$i863 + -4 | 0;
  HEAP32[$$lcssa$i$i864 >> 2] = $7145;
  $$3$i$i865 = HEAP32[$7145 >> 2] | 0;
 }
 $7166 = $$3$i$i865 + 52 | 0;
 HEAP16[$$3$i$i865 >> 1] = 1024;
 HEAP16[$$3$i$i865 + 2 >> 1] = 15;
 HEAP8[$$3$i$i865 + 4 >> 0] = 16;
 HEAP8[$$3$i$i865 + 5 >> 0] = 1;
 HEAP32[$$3$i$i865 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i865 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i865 + 16 >> 2] = $7166;
 HEAP32[$$3$i$i865 + 20 >> 2] = 0;
 HEAP32[$$3$i$i865 + 24 >> 2] = 0;
 HEAP8[$$3$i$i865 + 48 >> 0] = 0;
 HEAP32[$74 >> 2] = $$3$i$i865;
 _memcpy($7166 | 0, 387984, 2048) | 0;
 _memcpy($$3$i$i865 + 2100 | 0, 390032, 2048) | 0;
 _memcpy($$3$i$i865 + 4148 | 0, 392080, 2048) | 0;
 _memcpy($$3$i$i865 + 6196 | 0, 394128, 2048) | 0;
 _memcpy($$3$i$i865 + 8244 | 0, 396176, 2048) | 0;
 _memcpy($$3$i$i865 + 10292 | 0, 398224, 2048) | 0;
 _memcpy($$3$i$i865 + 12340 | 0, 400272, 2048) | 0;
 _memcpy($$3$i$i865 + 14388 | 0, 402320, 2048) | 0;
 _memcpy($$3$i$i865 + 16436 | 0, 404368, 2048) | 0;
 _memcpy($$3$i$i865 + 18484 | 0, 406416, 2048) | 0;
 _memcpy($$3$i$i865 + 20532 | 0, 408464, 2048) | 0;
 _memcpy($$3$i$i865 + 22580 | 0, 410512, 2048) | 0;
 _memcpy($$3$i$i865 + 24628 | 0, 412560, 2048) | 0;
 _memcpy($$3$i$i865 + 26676 | 0, 414608, 2048) | 0;
 _memcpy($$3$i$i865 + 28724 | 0, 416656, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $74);
 if ($$3$i$i865 | 0) {
  $7191 = $$3$i$i865 + 5 | 0;
  $7193 = (HEAP8[$7191 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7191 >> 0] = $7193;
  if (!($7193 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i865);
  HEAP32[$74 >> 2] = 0;
 }
 $7195 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7195 >> 1] = 228;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 242;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1075; else {
  $7200 = HEAP32[918918] | 0;
  if (($7200 | 0) == (HEAP32[918916] | 0)) label = 1075; else {
   $$lcssa$i$i877 = 3675672;
   $$lcssa8$i$i876 = $7200;
   label = 1076;
  }
 }
 do if ((label | 0) == 1075) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7207 = HEAP32[918924] | 0;
   if (($7207 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i877 = 3675696;
    $$lcssa8$i$i876 = $7207;
    label = 1076;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7212 = HEAP32[918930] | 0;
   if (($7212 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i877 = 3675720;
    $$lcssa8$i$i876 = $7212;
    label = 1076;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7217 = HEAP32[918936] | 0;
   if (($7217 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i877 = 3675744;
    $$lcssa8$i$i876 = $7217;
    label = 1076;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7222 = HEAP32[918942] | 0;
   if (($7222 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i877 = 3675768;
    $$lcssa8$i$i876 = $7222;
    label = 1076;
    break;
   }
  }
  $$3$i$i878 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1076) {
  $7205 = $$lcssa8$i$i876 + -4 | 0;
  HEAP32[$$lcssa$i$i877 >> 2] = $7205;
  $$3$i$i878 = HEAP32[$7205 >> 2] | 0;
 }
 $7226 = $$3$i$i878 + 52 | 0;
 HEAP16[$$3$i$i878 >> 1] = 1024;
 HEAP16[$$3$i$i878 + 2 >> 1] = 15;
 HEAP8[$$3$i$i878 + 4 >> 0] = 16;
 HEAP8[$$3$i$i878 + 5 >> 0] = 1;
 HEAP32[$$3$i$i878 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i878 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i878 + 16 >> 2] = $7226;
 HEAP32[$$3$i$i878 + 20 >> 2] = 0;
 HEAP32[$$3$i$i878 + 24 >> 2] = 0;
 HEAP8[$$3$i$i878 + 48 >> 0] = 0;
 HEAP32[$75 >> 2] = $$3$i$i878;
 _memcpy($7226 | 0, 418704, 2048) | 0;
 _memcpy($$3$i$i878 + 2100 | 0, 420752, 2048) | 0;
 _memcpy($$3$i$i878 + 4148 | 0, 422800, 2048) | 0;
 _memcpy($$3$i$i878 + 6196 | 0, 424848, 2048) | 0;
 _memcpy($$3$i$i878 + 8244 | 0, 426896, 2048) | 0;
 _memcpy($$3$i$i878 + 10292 | 0, 428944, 2048) | 0;
 _memcpy($$3$i$i878 + 12340 | 0, 430992, 2048) | 0;
 _memcpy($$3$i$i878 + 14388 | 0, 433040, 2048) | 0;
 _memcpy($$3$i$i878 + 16436 | 0, 435088, 2048) | 0;
 _memcpy($$3$i$i878 + 18484 | 0, 437136, 2048) | 0;
 _memcpy($$3$i$i878 + 20532 | 0, 439184, 2048) | 0;
 _memcpy($$3$i$i878 + 22580 | 0, 441232, 2048) | 0;
 _memcpy($$3$i$i878 + 24628 | 0, 443280, 2048) | 0;
 _memcpy($$3$i$i878 + 26676 | 0, 445328, 2048) | 0;
 _memcpy($$3$i$i878 + 28724 | 0, 447376, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $75);
 if ($$3$i$i878 | 0) {
  $7251 = $$3$i$i878 + 5 | 0;
  $7253 = (HEAP8[$7251 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7251 >> 0] = $7253;
  if (!($7253 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i878);
  HEAP32[$75 >> 2] = 0;
 }
 $7255 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7255 >> 1] = 243;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 257;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1091; else {
  $7260 = HEAP32[918918] | 0;
  if (($7260 | 0) == (HEAP32[918916] | 0)) label = 1091; else {
   $$lcssa$i$i890 = 3675672;
   $$lcssa8$i$i889 = $7260;
   label = 1092;
  }
 }
 do if ((label | 0) == 1091) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7267 = HEAP32[918924] | 0;
   if (($7267 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i890 = 3675696;
    $$lcssa8$i$i889 = $7267;
    label = 1092;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7272 = HEAP32[918930] | 0;
   if (($7272 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i890 = 3675720;
    $$lcssa8$i$i889 = $7272;
    label = 1092;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7277 = HEAP32[918936] | 0;
   if (($7277 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i890 = 3675744;
    $$lcssa8$i$i889 = $7277;
    label = 1092;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7282 = HEAP32[918942] | 0;
   if (($7282 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i890 = 3675768;
    $$lcssa8$i$i889 = $7282;
    label = 1092;
    break;
   }
  }
  $$3$i$i891 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1092) {
  $7265 = $$lcssa8$i$i889 + -4 | 0;
  HEAP32[$$lcssa$i$i890 >> 2] = $7265;
  $$3$i$i891 = HEAP32[$7265 >> 2] | 0;
 }
 $7286 = $$3$i$i891 + 52 | 0;
 HEAP16[$$3$i$i891 >> 1] = 1024;
 HEAP16[$$3$i$i891 + 2 >> 1] = 15;
 HEAP8[$$3$i$i891 + 4 >> 0] = 16;
 HEAP8[$$3$i$i891 + 5 >> 0] = 1;
 HEAP32[$$3$i$i891 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i891 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i891 + 16 >> 2] = $7286;
 HEAP32[$$3$i$i891 + 20 >> 2] = 0;
 HEAP32[$$3$i$i891 + 24 >> 2] = 0;
 HEAP8[$$3$i$i891 + 48 >> 0] = 0;
 HEAP32[$76 >> 2] = $$3$i$i891;
 _memcpy($7286 | 0, 449424, 2048) | 0;
 _memcpy($$3$i$i891 + 2100 | 0, 451472, 2048) | 0;
 _memcpy($$3$i$i891 + 4148 | 0, 453520, 2048) | 0;
 _memcpy($$3$i$i891 + 6196 | 0, 455568, 2048) | 0;
 _memcpy($$3$i$i891 + 8244 | 0, 457616, 2048) | 0;
 _memcpy($$3$i$i891 + 10292 | 0, 459664, 2048) | 0;
 _memcpy($$3$i$i891 + 12340 | 0, 461712, 2048) | 0;
 _memcpy($$3$i$i891 + 14388 | 0, 463760, 2048) | 0;
 _memcpy($$3$i$i891 + 16436 | 0, 465808, 2048) | 0;
 _memcpy($$3$i$i891 + 18484 | 0, 467856, 2048) | 0;
 _memcpy($$3$i$i891 + 20532 | 0, 469904, 2048) | 0;
 _memcpy($$3$i$i891 + 22580 | 0, 471952, 2048) | 0;
 _memcpy($$3$i$i891 + 24628 | 0, 474e3, 2048) | 0;
 _memcpy($$3$i$i891 + 26676 | 0, 476048, 2048) | 0;
 _memcpy($$3$i$i891 + 28724 | 0, 478096, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $76);
 if ($$3$i$i891 | 0) {
  $7311 = $$3$i$i891 + 5 | 0;
  $7313 = (HEAP8[$7311 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7311 >> 0] = $7313;
  if (!($7313 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i891);
  HEAP32[$76 >> 2] = 0;
 }
 $7315 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7315 >> 1] = 258;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 272;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1107; else {
  $7320 = HEAP32[918918] | 0;
  if (($7320 | 0) == (HEAP32[918916] | 0)) label = 1107; else {
   $$lcssa$i$i903 = 3675672;
   $$lcssa8$i$i902 = $7320;
   label = 1108;
  }
 }
 do if ((label | 0) == 1107) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7327 = HEAP32[918924] | 0;
   if (($7327 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i903 = 3675696;
    $$lcssa8$i$i902 = $7327;
    label = 1108;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7332 = HEAP32[918930] | 0;
   if (($7332 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i903 = 3675720;
    $$lcssa8$i$i902 = $7332;
    label = 1108;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7337 = HEAP32[918936] | 0;
   if (($7337 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i903 = 3675744;
    $$lcssa8$i$i902 = $7337;
    label = 1108;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7342 = HEAP32[918942] | 0;
   if (($7342 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i903 = 3675768;
    $$lcssa8$i$i902 = $7342;
    label = 1108;
    break;
   }
  }
  $$3$i$i904 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1108) {
  $7325 = $$lcssa8$i$i902 + -4 | 0;
  HEAP32[$$lcssa$i$i903 >> 2] = $7325;
  $$3$i$i904 = HEAP32[$7325 >> 2] | 0;
 }
 $7346 = $$3$i$i904 + 52 | 0;
 HEAP16[$$3$i$i904 >> 1] = 1024;
 HEAP16[$$3$i$i904 + 2 >> 1] = 15;
 HEAP8[$$3$i$i904 + 4 >> 0] = 16;
 HEAP8[$$3$i$i904 + 5 >> 0] = 1;
 HEAP32[$$3$i$i904 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i904 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i904 + 16 >> 2] = $7346;
 HEAP32[$$3$i$i904 + 20 >> 2] = 0;
 HEAP32[$$3$i$i904 + 24 >> 2] = 0;
 HEAP8[$$3$i$i904 + 48 >> 0] = 0;
 HEAP32[$77 >> 2] = $$3$i$i904;
 _memcpy($7346 | 0, 480144, 2048) | 0;
 _memcpy($$3$i$i904 + 2100 | 0, 482192, 2048) | 0;
 _memcpy($$3$i$i904 + 4148 | 0, 484240, 2048) | 0;
 _memcpy($$3$i$i904 + 6196 | 0, 486288, 2048) | 0;
 _memcpy($$3$i$i904 + 8244 | 0, 488336, 2048) | 0;
 _memcpy($$3$i$i904 + 10292 | 0, 490384, 2048) | 0;
 _memcpy($$3$i$i904 + 12340 | 0, 492432, 2048) | 0;
 _memcpy($$3$i$i904 + 14388 | 0, 494480, 2048) | 0;
 _memcpy($$3$i$i904 + 16436 | 0, 496528, 2048) | 0;
 _memcpy($$3$i$i904 + 18484 | 0, 498576, 2048) | 0;
 _memcpy($$3$i$i904 + 20532 | 0, 500624, 2048) | 0;
 _memcpy($$3$i$i904 + 22580 | 0, 502672, 2048) | 0;
 _memcpy($$3$i$i904 + 24628 | 0, 504720, 2048) | 0;
 _memcpy($$3$i$i904 + 26676 | 0, 506768, 2048) | 0;
 _memcpy($$3$i$i904 + 28724 | 0, 508816, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $77);
 if ($$3$i$i904 | 0) {
  $7371 = $$3$i$i904 + 5 | 0;
  $7373 = (HEAP8[$7371 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7371 >> 0] = $7373;
  if (!($7373 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i904);
  HEAP32[$77 >> 2] = 0;
 }
 $7375 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7375 >> 1] = 273;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 287;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1123; else {
  $7380 = HEAP32[918918] | 0;
  if (($7380 | 0) == (HEAP32[918916] | 0)) label = 1123; else {
   $$lcssa$i$i916 = 3675672;
   $$lcssa8$i$i915 = $7380;
   label = 1124;
  }
 }
 do if ((label | 0) == 1123) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7387 = HEAP32[918924] | 0;
   if (($7387 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i916 = 3675696;
    $$lcssa8$i$i915 = $7387;
    label = 1124;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7392 = HEAP32[918930] | 0;
   if (($7392 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i916 = 3675720;
    $$lcssa8$i$i915 = $7392;
    label = 1124;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7397 = HEAP32[918936] | 0;
   if (($7397 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i916 = 3675744;
    $$lcssa8$i$i915 = $7397;
    label = 1124;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7402 = HEAP32[918942] | 0;
   if (($7402 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i916 = 3675768;
    $$lcssa8$i$i915 = $7402;
    label = 1124;
    break;
   }
  }
  $$3$i$i917 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1124) {
  $7385 = $$lcssa8$i$i915 + -4 | 0;
  HEAP32[$$lcssa$i$i916 >> 2] = $7385;
  $$3$i$i917 = HEAP32[$7385 >> 2] | 0;
 }
 $7406 = $$3$i$i917 + 52 | 0;
 HEAP16[$$3$i$i917 >> 1] = 1024;
 HEAP16[$$3$i$i917 + 2 >> 1] = 15;
 HEAP8[$$3$i$i917 + 4 >> 0] = 16;
 HEAP8[$$3$i$i917 + 5 >> 0] = 1;
 HEAP32[$$3$i$i917 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i917 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i917 + 16 >> 2] = $7406;
 HEAP32[$$3$i$i917 + 20 >> 2] = 0;
 HEAP32[$$3$i$i917 + 24 >> 2] = 0;
 HEAP8[$$3$i$i917 + 48 >> 0] = 0;
 HEAP32[$78 >> 2] = $$3$i$i917;
 _memcpy($7406 | 0, 510864, 2048) | 0;
 _memcpy($$3$i$i917 + 2100 | 0, 512912, 2048) | 0;
 _memcpy($$3$i$i917 + 4148 | 0, 514960, 2048) | 0;
 _memcpy($$3$i$i917 + 6196 | 0, 517008, 2048) | 0;
 _memcpy($$3$i$i917 + 8244 | 0, 519056, 2048) | 0;
 _memcpy($$3$i$i917 + 10292 | 0, 521104, 2048) | 0;
 _memcpy($$3$i$i917 + 12340 | 0, 523152, 2048) | 0;
 _memcpy($$3$i$i917 + 14388 | 0, 525200, 2048) | 0;
 _memcpy($$3$i$i917 + 16436 | 0, 527248, 2048) | 0;
 _memcpy($$3$i$i917 + 18484 | 0, 529296, 2048) | 0;
 _memcpy($$3$i$i917 + 20532 | 0, 531344, 2048) | 0;
 _memcpy($$3$i$i917 + 22580 | 0, 533392, 2048) | 0;
 _memcpy($$3$i$i917 + 24628 | 0, 535440, 2048) | 0;
 _memcpy($$3$i$i917 + 26676 | 0, 537488, 2048) | 0;
 _memcpy($$3$i$i917 + 28724 | 0, 539536, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $78);
 if ($$3$i$i917 | 0) {
  $7431 = $$3$i$i917 + 5 | 0;
  $7433 = (HEAP8[$7431 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7431 >> 0] = $7433;
  if (!($7433 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i917);
  HEAP32[$78 >> 2] = 0;
 }
 $7435 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7435 >> 1] = 288;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 302;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1139; else {
  $7440 = HEAP32[918918] | 0;
  if (($7440 | 0) == (HEAP32[918916] | 0)) label = 1139; else {
   $$lcssa$i$i929 = 3675672;
   $$lcssa8$i$i928 = $7440;
   label = 1140;
  }
 }
 do if ((label | 0) == 1139) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7447 = HEAP32[918924] | 0;
   if (($7447 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i929 = 3675696;
    $$lcssa8$i$i928 = $7447;
    label = 1140;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7452 = HEAP32[918930] | 0;
   if (($7452 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i929 = 3675720;
    $$lcssa8$i$i928 = $7452;
    label = 1140;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7457 = HEAP32[918936] | 0;
   if (($7457 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i929 = 3675744;
    $$lcssa8$i$i928 = $7457;
    label = 1140;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7462 = HEAP32[918942] | 0;
   if (($7462 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i929 = 3675768;
    $$lcssa8$i$i928 = $7462;
    label = 1140;
    break;
   }
  }
  $$3$i$i930 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1140) {
  $7445 = $$lcssa8$i$i928 + -4 | 0;
  HEAP32[$$lcssa$i$i929 >> 2] = $7445;
  $$3$i$i930 = HEAP32[$7445 >> 2] | 0;
 }
 $7466 = $$3$i$i930 + 52 | 0;
 HEAP16[$$3$i$i930 >> 1] = 1024;
 HEAP16[$$3$i$i930 + 2 >> 1] = 15;
 HEAP8[$$3$i$i930 + 4 >> 0] = 16;
 HEAP8[$$3$i$i930 + 5 >> 0] = 1;
 HEAP32[$$3$i$i930 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i930 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i930 + 16 >> 2] = $7466;
 HEAP32[$$3$i$i930 + 20 >> 2] = 0;
 HEAP32[$$3$i$i930 + 24 >> 2] = 0;
 HEAP8[$$3$i$i930 + 48 >> 0] = 0;
 HEAP32[$79 >> 2] = $$3$i$i930;
 _memcpy($7466 | 0, 541584, 2048) | 0;
 _memcpy($$3$i$i930 + 2100 | 0, 543632, 2048) | 0;
 _memcpy($$3$i$i930 + 4148 | 0, 545680, 2048) | 0;
 _memcpy($$3$i$i930 + 6196 | 0, 547728, 2048) | 0;
 _memcpy($$3$i$i930 + 8244 | 0, 549776, 2048) | 0;
 _memcpy($$3$i$i930 + 10292 | 0, 551824, 2048) | 0;
 _memcpy($$3$i$i930 + 12340 | 0, 553872, 2048) | 0;
 _memcpy($$3$i$i930 + 14388 | 0, 555920, 2048) | 0;
 _memcpy($$3$i$i930 + 16436 | 0, 557968, 2048) | 0;
 _memcpy($$3$i$i930 + 18484 | 0, 560016, 2048) | 0;
 _memcpy($$3$i$i930 + 20532 | 0, 562064, 2048) | 0;
 _memcpy($$3$i$i930 + 22580 | 0, 564112, 2048) | 0;
 _memcpy($$3$i$i930 + 24628 | 0, 566160, 2048) | 0;
 _memcpy($$3$i$i930 + 26676 | 0, 568208, 2048) | 0;
 _memcpy($$3$i$i930 + 28724 | 0, 570256, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $79);
 if ($$3$i$i930 | 0) {
  $7491 = $$3$i$i930 + 5 | 0;
  $7493 = (HEAP8[$7491 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7491 >> 0] = $7493;
  if (!($7493 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i930);
  HEAP32[$79 >> 2] = 0;
 }
 $7495 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7495 >> 1] = 303;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 317;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1155; else {
  $7500 = HEAP32[918918] | 0;
  if (($7500 | 0) == (HEAP32[918916] | 0)) label = 1155; else {
   $$lcssa$i$i942 = 3675672;
   $$lcssa8$i$i941 = $7500;
   label = 1156;
  }
 }
 do if ((label | 0) == 1155) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7507 = HEAP32[918924] | 0;
   if (($7507 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i942 = 3675696;
    $$lcssa8$i$i941 = $7507;
    label = 1156;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7512 = HEAP32[918930] | 0;
   if (($7512 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i942 = 3675720;
    $$lcssa8$i$i941 = $7512;
    label = 1156;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7517 = HEAP32[918936] | 0;
   if (($7517 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i942 = 3675744;
    $$lcssa8$i$i941 = $7517;
    label = 1156;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7522 = HEAP32[918942] | 0;
   if (($7522 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i942 = 3675768;
    $$lcssa8$i$i941 = $7522;
    label = 1156;
    break;
   }
  }
  $$3$i$i943 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1156) {
  $7505 = $$lcssa8$i$i941 + -4 | 0;
  HEAP32[$$lcssa$i$i942 >> 2] = $7505;
  $$3$i$i943 = HEAP32[$7505 >> 2] | 0;
 }
 $7526 = $$3$i$i943 + 52 | 0;
 HEAP16[$$3$i$i943 >> 1] = 1024;
 HEAP16[$$3$i$i943 + 2 >> 1] = 15;
 HEAP8[$$3$i$i943 + 4 >> 0] = 16;
 HEAP8[$$3$i$i943 + 5 >> 0] = 1;
 HEAP32[$$3$i$i943 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i943 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i943 + 16 >> 2] = $7526;
 HEAP32[$$3$i$i943 + 20 >> 2] = 0;
 HEAP32[$$3$i$i943 + 24 >> 2] = 0;
 HEAP8[$$3$i$i943 + 48 >> 0] = 0;
 HEAP32[$80 >> 2] = $$3$i$i943;
 _memcpy($7526 | 0, 572304, 2048) | 0;
 _memcpy($$3$i$i943 + 2100 | 0, 574352, 2048) | 0;
 _memcpy($$3$i$i943 + 4148 | 0, 576400, 2048) | 0;
 _memcpy($$3$i$i943 + 6196 | 0, 578448, 2048) | 0;
 _memcpy($$3$i$i943 + 8244 | 0, 580496, 2048) | 0;
 _memcpy($$3$i$i943 + 10292 | 0, 582544, 2048) | 0;
 _memcpy($$3$i$i943 + 12340 | 0, 584592, 2048) | 0;
 _memcpy($$3$i$i943 + 14388 | 0, 586640, 2048) | 0;
 _memcpy($$3$i$i943 + 16436 | 0, 588688, 2048) | 0;
 _memcpy($$3$i$i943 + 18484 | 0, 590736, 2048) | 0;
 _memcpy($$3$i$i943 + 20532 | 0, 592784, 2048) | 0;
 _memcpy($$3$i$i943 + 22580 | 0, 594832, 2048) | 0;
 _memcpy($$3$i$i943 + 24628 | 0, 596880, 2048) | 0;
 _memcpy($$3$i$i943 + 26676 | 0, 598928, 2048) | 0;
 _memcpy($$3$i$i943 + 28724 | 0, 600976, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $80);
 if ($$3$i$i943 | 0) {
  $7551 = $$3$i$i943 + 5 | 0;
  $7553 = (HEAP8[$7551 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7551 >> 0] = $7553;
  if (!($7553 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i943);
  HEAP32[$80 >> 2] = 0;
 }
 $7555 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7555 >> 1] = 318;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 332;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1171; else {
  $7560 = HEAP32[918918] | 0;
  if (($7560 | 0) == (HEAP32[918916] | 0)) label = 1171; else {
   $$lcssa$i$i955 = 3675672;
   $$lcssa8$i$i954 = $7560;
   label = 1172;
  }
 }
 do if ((label | 0) == 1171) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7567 = HEAP32[918924] | 0;
   if (($7567 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i955 = 3675696;
    $$lcssa8$i$i954 = $7567;
    label = 1172;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7572 = HEAP32[918930] | 0;
   if (($7572 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i955 = 3675720;
    $$lcssa8$i$i954 = $7572;
    label = 1172;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7577 = HEAP32[918936] | 0;
   if (($7577 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i955 = 3675744;
    $$lcssa8$i$i954 = $7577;
    label = 1172;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7582 = HEAP32[918942] | 0;
   if (($7582 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i955 = 3675768;
    $$lcssa8$i$i954 = $7582;
    label = 1172;
    break;
   }
  }
  $$3$i$i956 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1172) {
  $7565 = $$lcssa8$i$i954 + -4 | 0;
  HEAP32[$$lcssa$i$i955 >> 2] = $7565;
  $$3$i$i956 = HEAP32[$7565 >> 2] | 0;
 }
 $7586 = $$3$i$i956 + 52 | 0;
 HEAP16[$$3$i$i956 >> 1] = 1024;
 HEAP16[$$3$i$i956 + 2 >> 1] = 15;
 HEAP8[$$3$i$i956 + 4 >> 0] = 16;
 HEAP8[$$3$i$i956 + 5 >> 0] = 1;
 HEAP32[$$3$i$i956 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i956 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i956 + 16 >> 2] = $7586;
 HEAP32[$$3$i$i956 + 20 >> 2] = 0;
 HEAP32[$$3$i$i956 + 24 >> 2] = 0;
 HEAP8[$$3$i$i956 + 48 >> 0] = 0;
 HEAP32[$81 >> 2] = $$3$i$i956;
 _memcpy($7586 | 0, 603024, 2048) | 0;
 _memcpy($$3$i$i956 + 2100 | 0, 605072, 2048) | 0;
 _memcpy($$3$i$i956 + 4148 | 0, 607120, 2048) | 0;
 _memcpy($$3$i$i956 + 6196 | 0, 609168, 2048) | 0;
 _memcpy($$3$i$i956 + 8244 | 0, 611216, 2048) | 0;
 _memcpy($$3$i$i956 + 10292 | 0, 613264, 2048) | 0;
 _memcpy($$3$i$i956 + 12340 | 0, 615312, 2048) | 0;
 _memcpy($$3$i$i956 + 14388 | 0, 617360, 2048) | 0;
 _memcpy($$3$i$i956 + 16436 | 0, 619408, 2048) | 0;
 _memcpy($$3$i$i956 + 18484 | 0, 621456, 2048) | 0;
 _memcpy($$3$i$i956 + 20532 | 0, 623504, 2048) | 0;
 _memcpy($$3$i$i956 + 22580 | 0, 625552, 2048) | 0;
 _memcpy($$3$i$i956 + 24628 | 0, 627600, 2048) | 0;
 _memcpy($$3$i$i956 + 26676 | 0, 629648, 2048) | 0;
 _memcpy($$3$i$i956 + 28724 | 0, 631696, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $81);
 if ($$3$i$i956 | 0) {
  $7611 = $$3$i$i956 + 5 | 0;
  $7613 = (HEAP8[$7611 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7611 >> 0] = $7613;
  if (!($7613 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i956);
  HEAP32[$81 >> 2] = 0;
 }
 $7615 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7615 >> 1] = 333;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 347;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1187; else {
  $7620 = HEAP32[918918] | 0;
  if (($7620 | 0) == (HEAP32[918916] | 0)) label = 1187; else {
   $$lcssa$i$i968 = 3675672;
   $$lcssa8$i$i967 = $7620;
   label = 1188;
  }
 }
 do if ((label | 0) == 1187) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7627 = HEAP32[918924] | 0;
   if (($7627 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i968 = 3675696;
    $$lcssa8$i$i967 = $7627;
    label = 1188;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7632 = HEAP32[918930] | 0;
   if (($7632 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i968 = 3675720;
    $$lcssa8$i$i967 = $7632;
    label = 1188;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7637 = HEAP32[918936] | 0;
   if (($7637 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i968 = 3675744;
    $$lcssa8$i$i967 = $7637;
    label = 1188;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7642 = HEAP32[918942] | 0;
   if (($7642 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i968 = 3675768;
    $$lcssa8$i$i967 = $7642;
    label = 1188;
    break;
   }
  }
  $$3$i$i969 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1188) {
  $7625 = $$lcssa8$i$i967 + -4 | 0;
  HEAP32[$$lcssa$i$i968 >> 2] = $7625;
  $$3$i$i969 = HEAP32[$7625 >> 2] | 0;
 }
 $7646 = $$3$i$i969 + 52 | 0;
 HEAP16[$$3$i$i969 >> 1] = 1024;
 HEAP16[$$3$i$i969 + 2 >> 1] = 15;
 HEAP8[$$3$i$i969 + 4 >> 0] = 16;
 HEAP8[$$3$i$i969 + 5 >> 0] = 1;
 HEAP32[$$3$i$i969 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i969 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i969 + 16 >> 2] = $7646;
 HEAP32[$$3$i$i969 + 20 >> 2] = 0;
 HEAP32[$$3$i$i969 + 24 >> 2] = 0;
 HEAP8[$$3$i$i969 + 48 >> 0] = 0;
 HEAP32[$82 >> 2] = $$3$i$i969;
 _memcpy($7646 | 0, 633744, 2048) | 0;
 _memcpy($$3$i$i969 + 2100 | 0, 635792, 2048) | 0;
 _memcpy($$3$i$i969 + 4148 | 0, 637840, 2048) | 0;
 _memcpy($$3$i$i969 + 6196 | 0, 639888, 2048) | 0;
 _memcpy($$3$i$i969 + 8244 | 0, 641936, 2048) | 0;
 _memcpy($$3$i$i969 + 10292 | 0, 643984, 2048) | 0;
 _memcpy($$3$i$i969 + 12340 | 0, 646032, 2048) | 0;
 _memcpy($$3$i$i969 + 14388 | 0, 648080, 2048) | 0;
 _memcpy($$3$i$i969 + 16436 | 0, 650128, 2048) | 0;
 _memcpy($$3$i$i969 + 18484 | 0, 652176, 2048) | 0;
 _memcpy($$3$i$i969 + 20532 | 0, 654224, 2048) | 0;
 _memcpy($$3$i$i969 + 22580 | 0, 656272, 2048) | 0;
 _memcpy($$3$i$i969 + 24628 | 0, 658320, 2048) | 0;
 _memcpy($$3$i$i969 + 26676 | 0, 660368, 2048) | 0;
 _memcpy($$3$i$i969 + 28724 | 0, 662416, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $82);
 if ($$3$i$i969 | 0) {
  $7671 = $$3$i$i969 + 5 | 0;
  $7673 = (HEAP8[$7671 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7671 >> 0] = $7673;
  if (!($7673 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i969);
  HEAP32[$82 >> 2] = 0;
 }
 $7675 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7675 >> 1] = 348;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 362;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1203; else {
  $7680 = HEAP32[918918] | 0;
  if (($7680 | 0) == (HEAP32[918916] | 0)) label = 1203; else {
   $$lcssa$i$i981 = 3675672;
   $$lcssa8$i$i980 = $7680;
   label = 1204;
  }
 }
 do if ((label | 0) == 1203) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7687 = HEAP32[918924] | 0;
   if (($7687 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i981 = 3675696;
    $$lcssa8$i$i980 = $7687;
    label = 1204;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7692 = HEAP32[918930] | 0;
   if (($7692 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i981 = 3675720;
    $$lcssa8$i$i980 = $7692;
    label = 1204;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7697 = HEAP32[918936] | 0;
   if (($7697 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i981 = 3675744;
    $$lcssa8$i$i980 = $7697;
    label = 1204;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7702 = HEAP32[918942] | 0;
   if (($7702 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i981 = 3675768;
    $$lcssa8$i$i980 = $7702;
    label = 1204;
    break;
   }
  }
  $$3$i$i982 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1204) {
  $7685 = $$lcssa8$i$i980 + -4 | 0;
  HEAP32[$$lcssa$i$i981 >> 2] = $7685;
  $$3$i$i982 = HEAP32[$7685 >> 2] | 0;
 }
 $7706 = $$3$i$i982 + 52 | 0;
 HEAP16[$$3$i$i982 >> 1] = 1024;
 HEAP16[$$3$i$i982 + 2 >> 1] = 15;
 HEAP8[$$3$i$i982 + 4 >> 0] = 16;
 HEAP8[$$3$i$i982 + 5 >> 0] = 1;
 HEAP32[$$3$i$i982 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i982 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i982 + 16 >> 2] = $7706;
 HEAP32[$$3$i$i982 + 20 >> 2] = 0;
 HEAP32[$$3$i$i982 + 24 >> 2] = 0;
 HEAP8[$$3$i$i982 + 48 >> 0] = 0;
 HEAP32[$83 >> 2] = $$3$i$i982;
 _memcpy($7706 | 0, 664464, 2048) | 0;
 _memcpy($$3$i$i982 + 2100 | 0, 666512, 2048) | 0;
 _memcpy($$3$i$i982 + 4148 | 0, 668560, 2048) | 0;
 _memcpy($$3$i$i982 + 6196 | 0, 670608, 2048) | 0;
 _memcpy($$3$i$i982 + 8244 | 0, 672656, 2048) | 0;
 _memcpy($$3$i$i982 + 10292 | 0, 674704, 2048) | 0;
 _memcpy($$3$i$i982 + 12340 | 0, 676752, 2048) | 0;
 _memcpy($$3$i$i982 + 14388 | 0, 678800, 2048) | 0;
 _memcpy($$3$i$i982 + 16436 | 0, 680848, 2048) | 0;
 _memcpy($$3$i$i982 + 18484 | 0, 682896, 2048) | 0;
 _memcpy($$3$i$i982 + 20532 | 0, 684944, 2048) | 0;
 _memcpy($$3$i$i982 + 22580 | 0, 686992, 2048) | 0;
 _memcpy($$3$i$i982 + 24628 | 0, 689040, 2048) | 0;
 _memcpy($$3$i$i982 + 26676 | 0, 691088, 2048) | 0;
 _memcpy($$3$i$i982 + 28724 | 0, 693136, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $83);
 if ($$3$i$i982 | 0) {
  $7731 = $$3$i$i982 + 5 | 0;
  $7733 = (HEAP8[$7731 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7731 >> 0] = $7733;
  if (!($7733 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i982);
  HEAP32[$83 >> 2] = 0;
 }
 $7735 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7735 >> 1] = 363;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 377;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1219; else {
  $7740 = HEAP32[918918] | 0;
  if (($7740 | 0) == (HEAP32[918916] | 0)) label = 1219; else {
   $$lcssa$i$i994 = 3675672;
   $$lcssa8$i$i993 = $7740;
   label = 1220;
  }
 }
 do if ((label | 0) == 1219) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7747 = HEAP32[918924] | 0;
   if (($7747 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i994 = 3675696;
    $$lcssa8$i$i993 = $7747;
    label = 1220;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7752 = HEAP32[918930] | 0;
   if (($7752 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i994 = 3675720;
    $$lcssa8$i$i993 = $7752;
    label = 1220;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7757 = HEAP32[918936] | 0;
   if (($7757 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i994 = 3675744;
    $$lcssa8$i$i993 = $7757;
    label = 1220;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7762 = HEAP32[918942] | 0;
   if (($7762 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i994 = 3675768;
    $$lcssa8$i$i993 = $7762;
    label = 1220;
    break;
   }
  }
  $$3$i$i995 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1220) {
  $7745 = $$lcssa8$i$i993 + -4 | 0;
  HEAP32[$$lcssa$i$i994 >> 2] = $7745;
  $$3$i$i995 = HEAP32[$7745 >> 2] | 0;
 }
 $7766 = $$3$i$i995 + 52 | 0;
 HEAP16[$$3$i$i995 >> 1] = 1024;
 HEAP16[$$3$i$i995 + 2 >> 1] = 15;
 HEAP8[$$3$i$i995 + 4 >> 0] = 16;
 HEAP8[$$3$i$i995 + 5 >> 0] = 1;
 HEAP32[$$3$i$i995 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i995 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i995 + 16 >> 2] = $7766;
 HEAP32[$$3$i$i995 + 20 >> 2] = 0;
 HEAP32[$$3$i$i995 + 24 >> 2] = 0;
 HEAP8[$$3$i$i995 + 48 >> 0] = 0;
 HEAP32[$84 >> 2] = $$3$i$i995;
 _memcpy($7766 | 0, 695184, 2048) | 0;
 _memcpy($$3$i$i995 + 2100 | 0, 697232, 2048) | 0;
 _memcpy($$3$i$i995 + 4148 | 0, 699280, 2048) | 0;
 _memcpy($$3$i$i995 + 6196 | 0, 701328, 2048) | 0;
 _memcpy($$3$i$i995 + 8244 | 0, 703376, 2048) | 0;
 _memcpy($$3$i$i995 + 10292 | 0, 705424, 2048) | 0;
 _memcpy($$3$i$i995 + 12340 | 0, 707472, 2048) | 0;
 _memcpy($$3$i$i995 + 14388 | 0, 709520, 2048) | 0;
 _memcpy($$3$i$i995 + 16436 | 0, 711568, 2048) | 0;
 _memcpy($$3$i$i995 + 18484 | 0, 713616, 2048) | 0;
 _memcpy($$3$i$i995 + 20532 | 0, 715664, 2048) | 0;
 _memcpy($$3$i$i995 + 22580 | 0, 717712, 2048) | 0;
 _memcpy($$3$i$i995 + 24628 | 0, 719760, 2048) | 0;
 _memcpy($$3$i$i995 + 26676 | 0, 721808, 2048) | 0;
 _memcpy($$3$i$i995 + 28724 | 0, 723856, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $84);
 if ($$3$i$i995 | 0) {
  $7791 = $$3$i$i995 + 5 | 0;
  $7793 = (HEAP8[$7791 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7791 >> 0] = $7793;
  if (!($7793 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i995);
  HEAP32[$84 >> 2] = 0;
 }
 $7795 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7795 >> 1] = 378;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 392;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1235; else {
  $7800 = HEAP32[918918] | 0;
  if (($7800 | 0) == (HEAP32[918916] | 0)) label = 1235; else {
   $$lcssa$i$i1007 = 3675672;
   $$lcssa8$i$i1006 = $7800;
   label = 1236;
  }
 }
 do if ((label | 0) == 1235) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7807 = HEAP32[918924] | 0;
   if (($7807 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1007 = 3675696;
    $$lcssa8$i$i1006 = $7807;
    label = 1236;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7812 = HEAP32[918930] | 0;
   if (($7812 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1007 = 3675720;
    $$lcssa8$i$i1006 = $7812;
    label = 1236;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7817 = HEAP32[918936] | 0;
   if (($7817 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1007 = 3675744;
    $$lcssa8$i$i1006 = $7817;
    label = 1236;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7822 = HEAP32[918942] | 0;
   if (($7822 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1007 = 3675768;
    $$lcssa8$i$i1006 = $7822;
    label = 1236;
    break;
   }
  }
  $$3$i$i1008 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1236) {
  $7805 = $$lcssa8$i$i1006 + -4 | 0;
  HEAP32[$$lcssa$i$i1007 >> 2] = $7805;
  $$3$i$i1008 = HEAP32[$7805 >> 2] | 0;
 }
 $7826 = $$3$i$i1008 + 52 | 0;
 HEAP16[$$3$i$i1008 >> 1] = 1024;
 HEAP16[$$3$i$i1008 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1008 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1008 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1008 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1008 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1008 + 16 >> 2] = $7826;
 HEAP32[$$3$i$i1008 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1008 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1008 + 48 >> 0] = 0;
 HEAP32[$85 >> 2] = $$3$i$i1008;
 _memcpy($7826 | 0, 725904, 2048) | 0;
 _memcpy($$3$i$i1008 + 2100 | 0, 727952, 2048) | 0;
 _memcpy($$3$i$i1008 + 4148 | 0, 73e4, 2048) | 0;
 _memcpy($$3$i$i1008 + 6196 | 0, 732048, 2048) | 0;
 _memcpy($$3$i$i1008 + 8244 | 0, 734096, 2048) | 0;
 _memcpy($$3$i$i1008 + 10292 | 0, 736144, 2048) | 0;
 _memcpy($$3$i$i1008 + 12340 | 0, 738192, 2048) | 0;
 _memcpy($$3$i$i1008 + 14388 | 0, 740240, 2048) | 0;
 _memcpy($$3$i$i1008 + 16436 | 0, 742288, 2048) | 0;
 _memcpy($$3$i$i1008 + 18484 | 0, 744336, 2048) | 0;
 _memcpy($$3$i$i1008 + 20532 | 0, 746384, 2048) | 0;
 _memcpy($$3$i$i1008 + 22580 | 0, 748432, 2048) | 0;
 _memcpy($$3$i$i1008 + 24628 | 0, 750480, 2048) | 0;
 _memcpy($$3$i$i1008 + 26676 | 0, 752528, 2048) | 0;
 _memcpy($$3$i$i1008 + 28724 | 0, 754576, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $85);
 if ($$3$i$i1008 | 0) {
  $7851 = $$3$i$i1008 + 5 | 0;
  $7853 = (HEAP8[$7851 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7851 >> 0] = $7853;
  if (!($7853 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1008);
  HEAP32[$85 >> 2] = 0;
 }
 $7855 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7855 >> 1] = 393;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 407;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1251; else {
  $7860 = HEAP32[918918] | 0;
  if (($7860 | 0) == (HEAP32[918916] | 0)) label = 1251; else {
   $$lcssa$i$i1020 = 3675672;
   $$lcssa8$i$i1019 = $7860;
   label = 1252;
  }
 }
 do if ((label | 0) == 1251) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7867 = HEAP32[918924] | 0;
   if (($7867 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1020 = 3675696;
    $$lcssa8$i$i1019 = $7867;
    label = 1252;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7872 = HEAP32[918930] | 0;
   if (($7872 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1020 = 3675720;
    $$lcssa8$i$i1019 = $7872;
    label = 1252;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7877 = HEAP32[918936] | 0;
   if (($7877 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1020 = 3675744;
    $$lcssa8$i$i1019 = $7877;
    label = 1252;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7882 = HEAP32[918942] | 0;
   if (($7882 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1020 = 3675768;
    $$lcssa8$i$i1019 = $7882;
    label = 1252;
    break;
   }
  }
  $$3$i$i1021 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1252) {
  $7865 = $$lcssa8$i$i1019 + -4 | 0;
  HEAP32[$$lcssa$i$i1020 >> 2] = $7865;
  $$3$i$i1021 = HEAP32[$7865 >> 2] | 0;
 }
 $7886 = $$3$i$i1021 + 52 | 0;
 HEAP16[$$3$i$i1021 >> 1] = 1024;
 HEAP16[$$3$i$i1021 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1021 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1021 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1021 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1021 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1021 + 16 >> 2] = $7886;
 HEAP32[$$3$i$i1021 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1021 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1021 + 48 >> 0] = 0;
 HEAP32[$86 >> 2] = $$3$i$i1021;
 _memcpy($7886 | 0, 756624, 2048) | 0;
 _memcpy($$3$i$i1021 + 2100 | 0, 758672, 2048) | 0;
 _memcpy($$3$i$i1021 + 4148 | 0, 760720, 2048) | 0;
 _memcpy($$3$i$i1021 + 6196 | 0, 762768, 2048) | 0;
 _memcpy($$3$i$i1021 + 8244 | 0, 764816, 2048) | 0;
 _memcpy($$3$i$i1021 + 10292 | 0, 766864, 2048) | 0;
 _memcpy($$3$i$i1021 + 12340 | 0, 768912, 2048) | 0;
 _memcpy($$3$i$i1021 + 14388 | 0, 770960, 2048) | 0;
 _memcpy($$3$i$i1021 + 16436 | 0, 773008, 2048) | 0;
 _memcpy($$3$i$i1021 + 18484 | 0, 775056, 2048) | 0;
 _memcpy($$3$i$i1021 + 20532 | 0, 777104, 2048) | 0;
 _memcpy($$3$i$i1021 + 22580 | 0, 779152, 2048) | 0;
 _memcpy($$3$i$i1021 + 24628 | 0, 781200, 2048) | 0;
 _memcpy($$3$i$i1021 + 26676 | 0, 783248, 2048) | 0;
 _memcpy($$3$i$i1021 + 28724 | 0, 785296, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $86);
 if ($$3$i$i1021 | 0) {
  $7911 = $$3$i$i1021 + 5 | 0;
  $7913 = (HEAP8[$7911 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7911 >> 0] = $7913;
  if (!($7913 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1021);
  HEAP32[$86 >> 2] = 0;
 }
 $7915 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7915 >> 1] = 408;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 422;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1267; else {
  $7920 = HEAP32[918918] | 0;
  if (($7920 | 0) == (HEAP32[918916] | 0)) label = 1267; else {
   $$lcssa$i$i1033 = 3675672;
   $$lcssa8$i$i1032 = $7920;
   label = 1268;
  }
 }
 do if ((label | 0) == 1267) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7927 = HEAP32[918924] | 0;
   if (($7927 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1033 = 3675696;
    $$lcssa8$i$i1032 = $7927;
    label = 1268;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7932 = HEAP32[918930] | 0;
   if (($7932 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1033 = 3675720;
    $$lcssa8$i$i1032 = $7932;
    label = 1268;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7937 = HEAP32[918936] | 0;
   if (($7937 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1033 = 3675744;
    $$lcssa8$i$i1032 = $7937;
    label = 1268;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $7942 = HEAP32[918942] | 0;
   if (($7942 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1033 = 3675768;
    $$lcssa8$i$i1032 = $7942;
    label = 1268;
    break;
   }
  }
  $$3$i$i1034 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1268) {
  $7925 = $$lcssa8$i$i1032 + -4 | 0;
  HEAP32[$$lcssa$i$i1033 >> 2] = $7925;
  $$3$i$i1034 = HEAP32[$7925 >> 2] | 0;
 }
 $7946 = $$3$i$i1034 + 52 | 0;
 HEAP16[$$3$i$i1034 >> 1] = 1024;
 HEAP16[$$3$i$i1034 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1034 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1034 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1034 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1034 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1034 + 16 >> 2] = $7946;
 HEAP32[$$3$i$i1034 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1034 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1034 + 48 >> 0] = 0;
 HEAP32[$87 >> 2] = $$3$i$i1034;
 _memcpy($7946 | 0, 787344, 2048) | 0;
 _memcpy($$3$i$i1034 + 2100 | 0, 789392, 2048) | 0;
 _memcpy($$3$i$i1034 + 4148 | 0, 791440, 2048) | 0;
 _memcpy($$3$i$i1034 + 6196 | 0, 793488, 2048) | 0;
 _memcpy($$3$i$i1034 + 8244 | 0, 795536, 2048) | 0;
 _memcpy($$3$i$i1034 + 10292 | 0, 797584, 2048) | 0;
 _memcpy($$3$i$i1034 + 12340 | 0, 799632, 2048) | 0;
 _memcpy($$3$i$i1034 + 14388 | 0, 801680, 2048) | 0;
 _memcpy($$3$i$i1034 + 16436 | 0, 803728, 2048) | 0;
 _memcpy($$3$i$i1034 + 18484 | 0, 805776, 2048) | 0;
 _memcpy($$3$i$i1034 + 20532 | 0, 807824, 2048) | 0;
 _memcpy($$3$i$i1034 + 22580 | 0, 809872, 2048) | 0;
 _memcpy($$3$i$i1034 + 24628 | 0, 811920, 2048) | 0;
 _memcpy($$3$i$i1034 + 26676 | 0, 813968, 2048) | 0;
 _memcpy($$3$i$i1034 + 28724 | 0, 816016, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $87);
 if ($$3$i$i1034 | 0) {
  $7971 = $$3$i$i1034 + 5 | 0;
  $7973 = (HEAP8[$7971 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$7971 >> 0] = $7973;
  if (!($7973 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1034);
  HEAP32[$87 >> 2] = 0;
 }
 $7975 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$7975 >> 1] = 423;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 437;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1283; else {
  $7980 = HEAP32[918918] | 0;
  if (($7980 | 0) == (HEAP32[918916] | 0)) label = 1283; else {
   $$lcssa$i$i1046 = 3675672;
   $$lcssa8$i$i1045 = $7980;
   label = 1284;
  }
 }
 do if ((label | 0) == 1283) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $7987 = HEAP32[918924] | 0;
   if (($7987 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1046 = 3675696;
    $$lcssa8$i$i1045 = $7987;
    label = 1284;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $7992 = HEAP32[918930] | 0;
   if (($7992 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1046 = 3675720;
    $$lcssa8$i$i1045 = $7992;
    label = 1284;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $7997 = HEAP32[918936] | 0;
   if (($7997 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1046 = 3675744;
    $$lcssa8$i$i1045 = $7997;
    label = 1284;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8002 = HEAP32[918942] | 0;
   if (($8002 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1046 = 3675768;
    $$lcssa8$i$i1045 = $8002;
    label = 1284;
    break;
   }
  }
  $$3$i$i1047 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1284) {
  $7985 = $$lcssa8$i$i1045 + -4 | 0;
  HEAP32[$$lcssa$i$i1046 >> 2] = $7985;
  $$3$i$i1047 = HEAP32[$7985 >> 2] | 0;
 }
 $8006 = $$3$i$i1047 + 52 | 0;
 HEAP16[$$3$i$i1047 >> 1] = 1024;
 HEAP16[$$3$i$i1047 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1047 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1047 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1047 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1047 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1047 + 16 >> 2] = $8006;
 HEAP32[$$3$i$i1047 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1047 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1047 + 48 >> 0] = 0;
 HEAP32[$88 >> 2] = $$3$i$i1047;
 _memcpy($8006 | 0, 818064, 2048) | 0;
 _memcpy($$3$i$i1047 + 2100 | 0, 820112, 2048) | 0;
 _memcpy($$3$i$i1047 + 4148 | 0, 822160, 2048) | 0;
 _memcpy($$3$i$i1047 + 6196 | 0, 824208, 2048) | 0;
 _memcpy($$3$i$i1047 + 8244 | 0, 826256, 2048) | 0;
 _memcpy($$3$i$i1047 + 10292 | 0, 828304, 2048) | 0;
 _memcpy($$3$i$i1047 + 12340 | 0, 830352, 2048) | 0;
 _memcpy($$3$i$i1047 + 14388 | 0, 832400, 2048) | 0;
 _memcpy($$3$i$i1047 + 16436 | 0, 834448, 2048) | 0;
 _memcpy($$3$i$i1047 + 18484 | 0, 836496, 2048) | 0;
 _memcpy($$3$i$i1047 + 20532 | 0, 838544, 2048) | 0;
 _memcpy($$3$i$i1047 + 22580 | 0, 840592, 2048) | 0;
 _memcpy($$3$i$i1047 + 24628 | 0, 842640, 2048) | 0;
 _memcpy($$3$i$i1047 + 26676 | 0, 844688, 2048) | 0;
 _memcpy($$3$i$i1047 + 28724 | 0, 846736, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $88);
 if ($$3$i$i1047 | 0) {
  $8031 = $$3$i$i1047 + 5 | 0;
  $8033 = (HEAP8[$8031 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8031 >> 0] = $8033;
  if (!($8033 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1047);
  HEAP32[$88 >> 2] = 0;
 }
 $8035 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8035 >> 1] = 438;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 452;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1299; else {
  $8040 = HEAP32[918918] | 0;
  if (($8040 | 0) == (HEAP32[918916] | 0)) label = 1299; else {
   $$lcssa$i$i1059 = 3675672;
   $$lcssa8$i$i1058 = $8040;
   label = 1300;
  }
 }
 do if ((label | 0) == 1299) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8047 = HEAP32[918924] | 0;
   if (($8047 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1059 = 3675696;
    $$lcssa8$i$i1058 = $8047;
    label = 1300;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8052 = HEAP32[918930] | 0;
   if (($8052 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1059 = 3675720;
    $$lcssa8$i$i1058 = $8052;
    label = 1300;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8057 = HEAP32[918936] | 0;
   if (($8057 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1059 = 3675744;
    $$lcssa8$i$i1058 = $8057;
    label = 1300;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8062 = HEAP32[918942] | 0;
   if (($8062 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1059 = 3675768;
    $$lcssa8$i$i1058 = $8062;
    label = 1300;
    break;
   }
  }
  $$3$i$i1060 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1300) {
  $8045 = $$lcssa8$i$i1058 + -4 | 0;
  HEAP32[$$lcssa$i$i1059 >> 2] = $8045;
  $$3$i$i1060 = HEAP32[$8045 >> 2] | 0;
 }
 $8066 = $$3$i$i1060 + 52 | 0;
 HEAP16[$$3$i$i1060 >> 1] = 1024;
 HEAP16[$$3$i$i1060 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1060 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1060 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1060 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1060 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1060 + 16 >> 2] = $8066;
 HEAP32[$$3$i$i1060 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1060 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1060 + 48 >> 0] = 0;
 HEAP32[$89 >> 2] = $$3$i$i1060;
 _memcpy($8066 | 0, 848784, 2048) | 0;
 _memcpy($$3$i$i1060 + 2100 | 0, 850832, 2048) | 0;
 _memcpy($$3$i$i1060 + 4148 | 0, 852880, 2048) | 0;
 _memcpy($$3$i$i1060 + 6196 | 0, 854928, 2048) | 0;
 _memcpy($$3$i$i1060 + 8244 | 0, 856976, 2048) | 0;
 _memcpy($$3$i$i1060 + 10292 | 0, 859024, 2048) | 0;
 _memcpy($$3$i$i1060 + 12340 | 0, 861072, 2048) | 0;
 _memcpy($$3$i$i1060 + 14388 | 0, 863120, 2048) | 0;
 _memcpy($$3$i$i1060 + 16436 | 0, 865168, 2048) | 0;
 _memcpy($$3$i$i1060 + 18484 | 0, 867216, 2048) | 0;
 _memcpy($$3$i$i1060 + 20532 | 0, 869264, 2048) | 0;
 _memcpy($$3$i$i1060 + 22580 | 0, 871312, 2048) | 0;
 _memcpy($$3$i$i1060 + 24628 | 0, 873360, 2048) | 0;
 _memcpy($$3$i$i1060 + 26676 | 0, 875408, 2048) | 0;
 _memcpy($$3$i$i1060 + 28724 | 0, 877456, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $89);
 if ($$3$i$i1060 | 0) {
  $8091 = $$3$i$i1060 + 5 | 0;
  $8093 = (HEAP8[$8091 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8091 >> 0] = $8093;
  if (!($8093 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1060);
  HEAP32[$89 >> 2] = 0;
 }
 $8095 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8095 >> 1] = 453;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 467;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1315; else {
  $8100 = HEAP32[918918] | 0;
  if (($8100 | 0) == (HEAP32[918916] | 0)) label = 1315; else {
   $$lcssa$i$i1072 = 3675672;
   $$lcssa8$i$i1071 = $8100;
   label = 1316;
  }
 }
 do if ((label | 0) == 1315) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8107 = HEAP32[918924] | 0;
   if (($8107 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1072 = 3675696;
    $$lcssa8$i$i1071 = $8107;
    label = 1316;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8112 = HEAP32[918930] | 0;
   if (($8112 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1072 = 3675720;
    $$lcssa8$i$i1071 = $8112;
    label = 1316;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8117 = HEAP32[918936] | 0;
   if (($8117 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1072 = 3675744;
    $$lcssa8$i$i1071 = $8117;
    label = 1316;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8122 = HEAP32[918942] | 0;
   if (($8122 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1072 = 3675768;
    $$lcssa8$i$i1071 = $8122;
    label = 1316;
    break;
   }
  }
  $$3$i$i1073 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1316) {
  $8105 = $$lcssa8$i$i1071 + -4 | 0;
  HEAP32[$$lcssa$i$i1072 >> 2] = $8105;
  $$3$i$i1073 = HEAP32[$8105 >> 2] | 0;
 }
 $8126 = $$3$i$i1073 + 52 | 0;
 HEAP16[$$3$i$i1073 >> 1] = 1024;
 HEAP16[$$3$i$i1073 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1073 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1073 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1073 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1073 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1073 + 16 >> 2] = $8126;
 HEAP32[$$3$i$i1073 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1073 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1073 + 48 >> 0] = 0;
 HEAP32[$90 >> 2] = $$3$i$i1073;
 _memcpy($8126 | 0, 879504, 2048) | 0;
 _memcpy($$3$i$i1073 + 2100 | 0, 881552, 2048) | 0;
 _memcpy($$3$i$i1073 + 4148 | 0, 883600, 2048) | 0;
 _memcpy($$3$i$i1073 + 6196 | 0, 885648, 2048) | 0;
 _memcpy($$3$i$i1073 + 8244 | 0, 887696, 2048) | 0;
 _memcpy($$3$i$i1073 + 10292 | 0, 889744, 2048) | 0;
 _memcpy($$3$i$i1073 + 12340 | 0, 891792, 2048) | 0;
 _memcpy($$3$i$i1073 + 14388 | 0, 893840, 2048) | 0;
 _memcpy($$3$i$i1073 + 16436 | 0, 895888, 2048) | 0;
 _memcpy($$3$i$i1073 + 18484 | 0, 897936, 2048) | 0;
 _memcpy($$3$i$i1073 + 20532 | 0, 899984, 2048) | 0;
 _memcpy($$3$i$i1073 + 22580 | 0, 902032, 2048) | 0;
 _memcpy($$3$i$i1073 + 24628 | 0, 904080, 2048) | 0;
 _memcpy($$3$i$i1073 + 26676 | 0, 906128, 2048) | 0;
 _memcpy($$3$i$i1073 + 28724 | 0, 908176, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $90);
 if ($$3$i$i1073 | 0) {
  $8151 = $$3$i$i1073 + 5 | 0;
  $8153 = (HEAP8[$8151 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8151 >> 0] = $8153;
  if (!($8153 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1073);
  HEAP32[$90 >> 2] = 0;
 }
 $8155 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8155 >> 1] = 468;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 482;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1331; else {
  $8160 = HEAP32[918918] | 0;
  if (($8160 | 0) == (HEAP32[918916] | 0)) label = 1331; else {
   $$lcssa$i$i1085 = 3675672;
   $$lcssa8$i$i1084 = $8160;
   label = 1332;
  }
 }
 do if ((label | 0) == 1331) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8167 = HEAP32[918924] | 0;
   if (($8167 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1085 = 3675696;
    $$lcssa8$i$i1084 = $8167;
    label = 1332;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8172 = HEAP32[918930] | 0;
   if (($8172 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1085 = 3675720;
    $$lcssa8$i$i1084 = $8172;
    label = 1332;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8177 = HEAP32[918936] | 0;
   if (($8177 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1085 = 3675744;
    $$lcssa8$i$i1084 = $8177;
    label = 1332;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8182 = HEAP32[918942] | 0;
   if (($8182 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1085 = 3675768;
    $$lcssa8$i$i1084 = $8182;
    label = 1332;
    break;
   }
  }
  $$3$i$i1086 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1332) {
  $8165 = $$lcssa8$i$i1084 + -4 | 0;
  HEAP32[$$lcssa$i$i1085 >> 2] = $8165;
  $$3$i$i1086 = HEAP32[$8165 >> 2] | 0;
 }
 $8186 = $$3$i$i1086 + 52 | 0;
 HEAP16[$$3$i$i1086 >> 1] = 1024;
 HEAP16[$$3$i$i1086 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1086 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1086 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1086 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1086 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1086 + 16 >> 2] = $8186;
 HEAP32[$$3$i$i1086 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1086 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1086 + 48 >> 0] = 0;
 HEAP32[$91 >> 2] = $$3$i$i1086;
 _memcpy($8186 | 0, 910224, 2048) | 0;
 _memcpy($$3$i$i1086 + 2100 | 0, 912272, 2048) | 0;
 _memcpy($$3$i$i1086 + 4148 | 0, 914320, 2048) | 0;
 _memcpy($$3$i$i1086 + 6196 | 0, 916368, 2048) | 0;
 _memcpy($$3$i$i1086 + 8244 | 0, 918416, 2048) | 0;
 _memcpy($$3$i$i1086 + 10292 | 0, 920464, 2048) | 0;
 _memcpy($$3$i$i1086 + 12340 | 0, 922512, 2048) | 0;
 _memcpy($$3$i$i1086 + 14388 | 0, 924560, 2048) | 0;
 _memcpy($$3$i$i1086 + 16436 | 0, 926608, 2048) | 0;
 _memcpy($$3$i$i1086 + 18484 | 0, 928656, 2048) | 0;
 _memcpy($$3$i$i1086 + 20532 | 0, 930704, 2048) | 0;
 _memcpy($$3$i$i1086 + 22580 | 0, 932752, 2048) | 0;
 _memcpy($$3$i$i1086 + 24628 | 0, 934800, 2048) | 0;
 _memcpy($$3$i$i1086 + 26676 | 0, 936848, 2048) | 0;
 _memcpy($$3$i$i1086 + 28724 | 0, 938896, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $91);
 if ($$3$i$i1086 | 0) {
  $8211 = $$3$i$i1086 + 5 | 0;
  $8213 = (HEAP8[$8211 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8211 >> 0] = $8213;
  if (!($8213 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1086);
  HEAP32[$91 >> 2] = 0;
 }
 $8215 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8215 >> 1] = 483;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 497;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1347; else {
  $8220 = HEAP32[918918] | 0;
  if (($8220 | 0) == (HEAP32[918916] | 0)) label = 1347; else {
   $$lcssa$i$i1098 = 3675672;
   $$lcssa8$i$i1097 = $8220;
   label = 1348;
  }
 }
 do if ((label | 0) == 1347) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8227 = HEAP32[918924] | 0;
   if (($8227 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1098 = 3675696;
    $$lcssa8$i$i1097 = $8227;
    label = 1348;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8232 = HEAP32[918930] | 0;
   if (($8232 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1098 = 3675720;
    $$lcssa8$i$i1097 = $8232;
    label = 1348;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8237 = HEAP32[918936] | 0;
   if (($8237 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1098 = 3675744;
    $$lcssa8$i$i1097 = $8237;
    label = 1348;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8242 = HEAP32[918942] | 0;
   if (($8242 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1098 = 3675768;
    $$lcssa8$i$i1097 = $8242;
    label = 1348;
    break;
   }
  }
  $$3$i$i1099 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1348) {
  $8225 = $$lcssa8$i$i1097 + -4 | 0;
  HEAP32[$$lcssa$i$i1098 >> 2] = $8225;
  $$3$i$i1099 = HEAP32[$8225 >> 2] | 0;
 }
 $8246 = $$3$i$i1099 + 52 | 0;
 HEAP16[$$3$i$i1099 >> 1] = 1024;
 HEAP16[$$3$i$i1099 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1099 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1099 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1099 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1099 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1099 + 16 >> 2] = $8246;
 HEAP32[$$3$i$i1099 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1099 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1099 + 48 >> 0] = 0;
 HEAP32[$92 >> 2] = $$3$i$i1099;
 _memcpy($8246 | 0, 940944, 2048) | 0;
 _memcpy($$3$i$i1099 + 2100 | 0, 942992, 2048) | 0;
 _memcpy($$3$i$i1099 + 4148 | 0, 945040, 2048) | 0;
 _memcpy($$3$i$i1099 + 6196 | 0, 947088, 2048) | 0;
 _memcpy($$3$i$i1099 + 8244 | 0, 949136, 2048) | 0;
 _memcpy($$3$i$i1099 + 10292 | 0, 951184, 2048) | 0;
 _memcpy($$3$i$i1099 + 12340 | 0, 953232, 2048) | 0;
 _memcpy($$3$i$i1099 + 14388 | 0, 955280, 2048) | 0;
 _memcpy($$3$i$i1099 + 16436 | 0, 957328, 2048) | 0;
 _memcpy($$3$i$i1099 + 18484 | 0, 959376, 2048) | 0;
 _memcpy($$3$i$i1099 + 20532 | 0, 961424, 2048) | 0;
 _memcpy($$3$i$i1099 + 22580 | 0, 963472, 2048) | 0;
 _memcpy($$3$i$i1099 + 24628 | 0, 965520, 2048) | 0;
 _memcpy($$3$i$i1099 + 26676 | 0, 967568, 2048) | 0;
 _memcpy($$3$i$i1099 + 28724 | 0, 969616, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $92);
 if ($$3$i$i1099 | 0) {
  $8271 = $$3$i$i1099 + 5 | 0;
  $8273 = (HEAP8[$8271 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8271 >> 0] = $8273;
  if (!($8273 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1099);
  HEAP32[$92 >> 2] = 0;
 }
 $8275 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8275 >> 1] = 498;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 512;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1363; else {
  $8280 = HEAP32[918918] | 0;
  if (($8280 | 0) == (HEAP32[918916] | 0)) label = 1363; else {
   $$lcssa$i$i1111 = 3675672;
   $$lcssa8$i$i1110 = $8280;
   label = 1364;
  }
 }
 do if ((label | 0) == 1363) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8287 = HEAP32[918924] | 0;
   if (($8287 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1111 = 3675696;
    $$lcssa8$i$i1110 = $8287;
    label = 1364;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8292 = HEAP32[918930] | 0;
   if (($8292 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1111 = 3675720;
    $$lcssa8$i$i1110 = $8292;
    label = 1364;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8297 = HEAP32[918936] | 0;
   if (($8297 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1111 = 3675744;
    $$lcssa8$i$i1110 = $8297;
    label = 1364;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8302 = HEAP32[918942] | 0;
   if (($8302 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1111 = 3675768;
    $$lcssa8$i$i1110 = $8302;
    label = 1364;
    break;
   }
  }
  $$3$i$i1112 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1364) {
  $8285 = $$lcssa8$i$i1110 + -4 | 0;
  HEAP32[$$lcssa$i$i1111 >> 2] = $8285;
  $$3$i$i1112 = HEAP32[$8285 >> 2] | 0;
 }
 $8306 = $$3$i$i1112 + 52 | 0;
 HEAP16[$$3$i$i1112 >> 1] = 1024;
 HEAP16[$$3$i$i1112 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1112 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1112 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1112 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1112 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1112 + 16 >> 2] = $8306;
 HEAP32[$$3$i$i1112 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1112 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1112 + 48 >> 0] = 0;
 HEAP32[$93 >> 2] = $$3$i$i1112;
 _memcpy($8306 | 0, 971664, 2048) | 0;
 _memcpy($$3$i$i1112 + 2100 | 0, 973712, 2048) | 0;
 _memcpy($$3$i$i1112 + 4148 | 0, 975760, 2048) | 0;
 _memcpy($$3$i$i1112 + 6196 | 0, 977808, 2048) | 0;
 _memcpy($$3$i$i1112 + 8244 | 0, 979856, 2048) | 0;
 _memcpy($$3$i$i1112 + 10292 | 0, 981904, 2048) | 0;
 _memcpy($$3$i$i1112 + 12340 | 0, 983952, 2048) | 0;
 _memcpy($$3$i$i1112 + 14388 | 0, 986e3, 2048) | 0;
 _memcpy($$3$i$i1112 + 16436 | 0, 988048, 2048) | 0;
 _memcpy($$3$i$i1112 + 18484 | 0, 990096, 2048) | 0;
 _memcpy($$3$i$i1112 + 20532 | 0, 992144, 2048) | 0;
 _memcpy($$3$i$i1112 + 22580 | 0, 994192, 2048) | 0;
 _memcpy($$3$i$i1112 + 24628 | 0, 996240, 2048) | 0;
 _memcpy($$3$i$i1112 + 26676 | 0, 998288, 2048) | 0;
 _memcpy($$3$i$i1112 + 28724 | 0, 1000336, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $93);
 if ($$3$i$i1112 | 0) {
  $8331 = $$3$i$i1112 + 5 | 0;
  $8333 = (HEAP8[$8331 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8331 >> 0] = $8333;
  if (!($8333 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1112);
  HEAP32[$93 >> 2] = 0;
 }
 $8335 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8335 >> 1] = 513;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 527;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1379; else {
  $8340 = HEAP32[918918] | 0;
  if (($8340 | 0) == (HEAP32[918916] | 0)) label = 1379; else {
   $$lcssa$i$i1124 = 3675672;
   $$lcssa8$i$i1123 = $8340;
   label = 1380;
  }
 }
 do if ((label | 0) == 1379) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8347 = HEAP32[918924] | 0;
   if (($8347 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1124 = 3675696;
    $$lcssa8$i$i1123 = $8347;
    label = 1380;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8352 = HEAP32[918930] | 0;
   if (($8352 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1124 = 3675720;
    $$lcssa8$i$i1123 = $8352;
    label = 1380;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8357 = HEAP32[918936] | 0;
   if (($8357 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1124 = 3675744;
    $$lcssa8$i$i1123 = $8357;
    label = 1380;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8362 = HEAP32[918942] | 0;
   if (($8362 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1124 = 3675768;
    $$lcssa8$i$i1123 = $8362;
    label = 1380;
    break;
   }
  }
  $$3$i$i1125 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1380) {
  $8345 = $$lcssa8$i$i1123 + -4 | 0;
  HEAP32[$$lcssa$i$i1124 >> 2] = $8345;
  $$3$i$i1125 = HEAP32[$8345 >> 2] | 0;
 }
 $8366 = $$3$i$i1125 + 52 | 0;
 HEAP16[$$3$i$i1125 >> 1] = 1024;
 HEAP16[$$3$i$i1125 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1125 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1125 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1125 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1125 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1125 + 16 >> 2] = $8366;
 HEAP32[$$3$i$i1125 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1125 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1125 + 48 >> 0] = 0;
 HEAP32[$94 >> 2] = $$3$i$i1125;
 _memcpy($8366 | 0, 1002384, 2048) | 0;
 _memcpy($$3$i$i1125 + 2100 | 0, 1004432, 2048) | 0;
 _memcpy($$3$i$i1125 + 4148 | 0, 1006480, 2048) | 0;
 _memcpy($$3$i$i1125 + 6196 | 0, 1008528, 2048) | 0;
 _memcpy($$3$i$i1125 + 8244 | 0, 1010576, 2048) | 0;
 _memcpy($$3$i$i1125 + 10292 | 0, 1012624, 2048) | 0;
 _memcpy($$3$i$i1125 + 12340 | 0, 1014672, 2048) | 0;
 _memcpy($$3$i$i1125 + 14388 | 0, 1016720, 2048) | 0;
 _memcpy($$3$i$i1125 + 16436 | 0, 1018768, 2048) | 0;
 _memcpy($$3$i$i1125 + 18484 | 0, 1020816, 2048) | 0;
 _memcpy($$3$i$i1125 + 20532 | 0, 1022864, 2048) | 0;
 _memcpy($$3$i$i1125 + 22580 | 0, 1024912, 2048) | 0;
 _memcpy($$3$i$i1125 + 24628 | 0, 1026960, 2048) | 0;
 _memcpy($$3$i$i1125 + 26676 | 0, 1029008, 2048) | 0;
 _memcpy($$3$i$i1125 + 28724 | 0, 1031056, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $94);
 if ($$3$i$i1125 | 0) {
  $8391 = $$3$i$i1125 + 5 | 0;
  $8393 = (HEAP8[$8391 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8391 >> 0] = $8393;
  if (!($8393 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1125);
  HEAP32[$94 >> 2] = 0;
 }
 $8395 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8395 >> 1] = 528;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 542;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1395; else {
  $8400 = HEAP32[918918] | 0;
  if (($8400 | 0) == (HEAP32[918916] | 0)) label = 1395; else {
   $$lcssa$i$i1137 = 3675672;
   $$lcssa8$i$i1136 = $8400;
   label = 1396;
  }
 }
 do if ((label | 0) == 1395) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8407 = HEAP32[918924] | 0;
   if (($8407 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1137 = 3675696;
    $$lcssa8$i$i1136 = $8407;
    label = 1396;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8412 = HEAP32[918930] | 0;
   if (($8412 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1137 = 3675720;
    $$lcssa8$i$i1136 = $8412;
    label = 1396;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8417 = HEAP32[918936] | 0;
   if (($8417 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1137 = 3675744;
    $$lcssa8$i$i1136 = $8417;
    label = 1396;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8422 = HEAP32[918942] | 0;
   if (($8422 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1137 = 3675768;
    $$lcssa8$i$i1136 = $8422;
    label = 1396;
    break;
   }
  }
  $$3$i$i1138 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1396) {
  $8405 = $$lcssa8$i$i1136 + -4 | 0;
  HEAP32[$$lcssa$i$i1137 >> 2] = $8405;
  $$3$i$i1138 = HEAP32[$8405 >> 2] | 0;
 }
 $8426 = $$3$i$i1138 + 52 | 0;
 HEAP16[$$3$i$i1138 >> 1] = 1024;
 HEAP16[$$3$i$i1138 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1138 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1138 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1138 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1138 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1138 + 16 >> 2] = $8426;
 HEAP32[$$3$i$i1138 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1138 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1138 + 48 >> 0] = 0;
 HEAP32[$95 >> 2] = $$3$i$i1138;
 _memcpy($8426 | 0, 1033104, 2048) | 0;
 _memcpy($$3$i$i1138 + 2100 | 0, 1035152, 2048) | 0;
 _memcpy($$3$i$i1138 + 4148 | 0, 1037200, 2048) | 0;
 _memcpy($$3$i$i1138 + 6196 | 0, 1039248, 2048) | 0;
 _memcpy($$3$i$i1138 + 8244 | 0, 1041296, 2048) | 0;
 _memcpy($$3$i$i1138 + 10292 | 0, 1043344, 2048) | 0;
 _memcpy($$3$i$i1138 + 12340 | 0, 1045392, 2048) | 0;
 _memcpy($$3$i$i1138 + 14388 | 0, 1047440, 2048) | 0;
 _memcpy($$3$i$i1138 + 16436 | 0, 1049488, 2048) | 0;
 _memcpy($$3$i$i1138 + 18484 | 0, 1051536, 2048) | 0;
 _memcpy($$3$i$i1138 + 20532 | 0, 1053584, 2048) | 0;
 _memcpy($$3$i$i1138 + 22580 | 0, 1055632, 2048) | 0;
 _memcpy($$3$i$i1138 + 24628 | 0, 1057680, 2048) | 0;
 _memcpy($$3$i$i1138 + 26676 | 0, 1059728, 2048) | 0;
 _memcpy($$3$i$i1138 + 28724 | 0, 1061776, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $95);
 if ($$3$i$i1138 | 0) {
  $8451 = $$3$i$i1138 + 5 | 0;
  $8453 = (HEAP8[$8451 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8451 >> 0] = $8453;
  if (!($8453 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1138);
  HEAP32[$95 >> 2] = 0;
 }
 $8455 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8455 >> 1] = 543;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 557;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1411; else {
  $8460 = HEAP32[918918] | 0;
  if (($8460 | 0) == (HEAP32[918916] | 0)) label = 1411; else {
   $$lcssa$i$i1150 = 3675672;
   $$lcssa8$i$i1149 = $8460;
   label = 1412;
  }
 }
 do if ((label | 0) == 1411) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8467 = HEAP32[918924] | 0;
   if (($8467 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1150 = 3675696;
    $$lcssa8$i$i1149 = $8467;
    label = 1412;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8472 = HEAP32[918930] | 0;
   if (($8472 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1150 = 3675720;
    $$lcssa8$i$i1149 = $8472;
    label = 1412;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8477 = HEAP32[918936] | 0;
   if (($8477 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1150 = 3675744;
    $$lcssa8$i$i1149 = $8477;
    label = 1412;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8482 = HEAP32[918942] | 0;
   if (($8482 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1150 = 3675768;
    $$lcssa8$i$i1149 = $8482;
    label = 1412;
    break;
   }
  }
  $$3$i$i1151 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1412) {
  $8465 = $$lcssa8$i$i1149 + -4 | 0;
  HEAP32[$$lcssa$i$i1150 >> 2] = $8465;
  $$3$i$i1151 = HEAP32[$8465 >> 2] | 0;
 }
 $8486 = $$3$i$i1151 + 52 | 0;
 HEAP16[$$3$i$i1151 >> 1] = 1024;
 HEAP16[$$3$i$i1151 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1151 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1151 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1151 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1151 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1151 + 16 >> 2] = $8486;
 HEAP32[$$3$i$i1151 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1151 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1151 + 48 >> 0] = 0;
 HEAP32[$96 >> 2] = $$3$i$i1151;
 _memcpy($8486 | 0, 1063824, 2048) | 0;
 _memcpy($$3$i$i1151 + 2100 | 0, 1065872, 2048) | 0;
 _memcpy($$3$i$i1151 + 4148 | 0, 1067920, 2048) | 0;
 _memcpy($$3$i$i1151 + 6196 | 0, 1069968, 2048) | 0;
 _memcpy($$3$i$i1151 + 8244 | 0, 1072016, 2048) | 0;
 _memcpy($$3$i$i1151 + 10292 | 0, 1074064, 2048) | 0;
 _memcpy($$3$i$i1151 + 12340 | 0, 1076112, 2048) | 0;
 _memcpy($$3$i$i1151 + 14388 | 0, 1078160, 2048) | 0;
 _memcpy($$3$i$i1151 + 16436 | 0, 1080208, 2048) | 0;
 _memcpy($$3$i$i1151 + 18484 | 0, 1082256, 2048) | 0;
 _memcpy($$3$i$i1151 + 20532 | 0, 1084304, 2048) | 0;
 _memcpy($$3$i$i1151 + 22580 | 0, 1086352, 2048) | 0;
 _memcpy($$3$i$i1151 + 24628 | 0, 1088400, 2048) | 0;
 _memcpy($$3$i$i1151 + 26676 | 0, 1090448, 2048) | 0;
 _memcpy($$3$i$i1151 + 28724 | 0, 1092496, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $96);
 if ($$3$i$i1151 | 0) {
  $8511 = $$3$i$i1151 + 5 | 0;
  $8513 = (HEAP8[$8511 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8511 >> 0] = $8513;
  if (!($8513 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1151);
  HEAP32[$96 >> 2] = 0;
 }
 $8515 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8515 >> 1] = 558;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 572;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1427; else {
  $8520 = HEAP32[918918] | 0;
  if (($8520 | 0) == (HEAP32[918916] | 0)) label = 1427; else {
   $$lcssa$i$i1163 = 3675672;
   $$lcssa8$i$i1162 = $8520;
   label = 1428;
  }
 }
 do if ((label | 0) == 1427) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8527 = HEAP32[918924] | 0;
   if (($8527 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1163 = 3675696;
    $$lcssa8$i$i1162 = $8527;
    label = 1428;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8532 = HEAP32[918930] | 0;
   if (($8532 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1163 = 3675720;
    $$lcssa8$i$i1162 = $8532;
    label = 1428;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8537 = HEAP32[918936] | 0;
   if (($8537 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1163 = 3675744;
    $$lcssa8$i$i1162 = $8537;
    label = 1428;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8542 = HEAP32[918942] | 0;
   if (($8542 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1163 = 3675768;
    $$lcssa8$i$i1162 = $8542;
    label = 1428;
    break;
   }
  }
  $$3$i$i1164 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1428) {
  $8525 = $$lcssa8$i$i1162 + -4 | 0;
  HEAP32[$$lcssa$i$i1163 >> 2] = $8525;
  $$3$i$i1164 = HEAP32[$8525 >> 2] | 0;
 }
 $8546 = $$3$i$i1164 + 52 | 0;
 HEAP16[$$3$i$i1164 >> 1] = 1024;
 HEAP16[$$3$i$i1164 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1164 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1164 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1164 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1164 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1164 + 16 >> 2] = $8546;
 HEAP32[$$3$i$i1164 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1164 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1164 + 48 >> 0] = 0;
 HEAP32[$97 >> 2] = $$3$i$i1164;
 _memcpy($8546 | 0, 1094544, 2048) | 0;
 _memcpy($$3$i$i1164 + 2100 | 0, 1096592, 2048) | 0;
 _memcpy($$3$i$i1164 + 4148 | 0, 1098640, 2048) | 0;
 _memcpy($$3$i$i1164 + 6196 | 0, 1100688, 2048) | 0;
 _memcpy($$3$i$i1164 + 8244 | 0, 1102736, 2048) | 0;
 _memcpy($$3$i$i1164 + 10292 | 0, 1104784, 2048) | 0;
 _memcpy($$3$i$i1164 + 12340 | 0, 1106832, 2048) | 0;
 _memcpy($$3$i$i1164 + 14388 | 0, 1108880, 2048) | 0;
 _memcpy($$3$i$i1164 + 16436 | 0, 1110928, 2048) | 0;
 _memcpy($$3$i$i1164 + 18484 | 0, 1112976, 2048) | 0;
 _memcpy($$3$i$i1164 + 20532 | 0, 1115024, 2048) | 0;
 _memcpy($$3$i$i1164 + 22580 | 0, 1117072, 2048) | 0;
 _memcpy($$3$i$i1164 + 24628 | 0, 1119120, 2048) | 0;
 _memcpy($$3$i$i1164 + 26676 | 0, 1121168, 2048) | 0;
 _memcpy($$3$i$i1164 + 28724 | 0, 1123216, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $97);
 if ($$3$i$i1164 | 0) {
  $8571 = $$3$i$i1164 + 5 | 0;
  $8573 = (HEAP8[$8571 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8571 >> 0] = $8573;
  if (!($8573 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1164);
  HEAP32[$97 >> 2] = 0;
 }
 $8575 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8575 >> 1] = 573;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 587;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1443; else {
  $8580 = HEAP32[918918] | 0;
  if (($8580 | 0) == (HEAP32[918916] | 0)) label = 1443; else {
   $$lcssa$i$i1176 = 3675672;
   $$lcssa8$i$i1175 = $8580;
   label = 1444;
  }
 }
 do if ((label | 0) == 1443) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8587 = HEAP32[918924] | 0;
   if (($8587 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1176 = 3675696;
    $$lcssa8$i$i1175 = $8587;
    label = 1444;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8592 = HEAP32[918930] | 0;
   if (($8592 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1176 = 3675720;
    $$lcssa8$i$i1175 = $8592;
    label = 1444;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8597 = HEAP32[918936] | 0;
   if (($8597 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1176 = 3675744;
    $$lcssa8$i$i1175 = $8597;
    label = 1444;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8602 = HEAP32[918942] | 0;
   if (($8602 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1176 = 3675768;
    $$lcssa8$i$i1175 = $8602;
    label = 1444;
    break;
   }
  }
  $$3$i$i1177 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1444) {
  $8585 = $$lcssa8$i$i1175 + -4 | 0;
  HEAP32[$$lcssa$i$i1176 >> 2] = $8585;
  $$3$i$i1177 = HEAP32[$8585 >> 2] | 0;
 }
 $8606 = $$3$i$i1177 + 52 | 0;
 HEAP16[$$3$i$i1177 >> 1] = 1024;
 HEAP16[$$3$i$i1177 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1177 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1177 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1177 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1177 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1177 + 16 >> 2] = $8606;
 HEAP32[$$3$i$i1177 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1177 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1177 + 48 >> 0] = 0;
 HEAP32[$98 >> 2] = $$3$i$i1177;
 _memcpy($8606 | 0, 1125264, 2048) | 0;
 _memcpy($$3$i$i1177 + 2100 | 0, 1127312, 2048) | 0;
 _memcpy($$3$i$i1177 + 4148 | 0, 1129360, 2048) | 0;
 _memcpy($$3$i$i1177 + 6196 | 0, 1131408, 2048) | 0;
 _memcpy($$3$i$i1177 + 8244 | 0, 1133456, 2048) | 0;
 _memcpy($$3$i$i1177 + 10292 | 0, 1135504, 2048) | 0;
 _memcpy($$3$i$i1177 + 12340 | 0, 1137552, 2048) | 0;
 _memcpy($$3$i$i1177 + 14388 | 0, 1139600, 2048) | 0;
 _memcpy($$3$i$i1177 + 16436 | 0, 1141648, 2048) | 0;
 _memcpy($$3$i$i1177 + 18484 | 0, 1143696, 2048) | 0;
 _memcpy($$3$i$i1177 + 20532 | 0, 1145744, 2048) | 0;
 _memcpy($$3$i$i1177 + 22580 | 0, 1147792, 2048) | 0;
 _memcpy($$3$i$i1177 + 24628 | 0, 1149840, 2048) | 0;
 _memcpy($$3$i$i1177 + 26676 | 0, 1151888, 2048) | 0;
 _memcpy($$3$i$i1177 + 28724 | 0, 1153936, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $98);
 if ($$3$i$i1177 | 0) {
  $8631 = $$3$i$i1177 + 5 | 0;
  $8633 = (HEAP8[$8631 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8631 >> 0] = $8633;
  if (!($8633 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1177);
  HEAP32[$98 >> 2] = 0;
 }
 $8635 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8635 >> 1] = 588;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 602;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1459; else {
  $8640 = HEAP32[918918] | 0;
  if (($8640 | 0) == (HEAP32[918916] | 0)) label = 1459; else {
   $$lcssa$i$i1189 = 3675672;
   $$lcssa8$i$i1188 = $8640;
   label = 1460;
  }
 }
 do if ((label | 0) == 1459) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8647 = HEAP32[918924] | 0;
   if (($8647 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1189 = 3675696;
    $$lcssa8$i$i1188 = $8647;
    label = 1460;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8652 = HEAP32[918930] | 0;
   if (($8652 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1189 = 3675720;
    $$lcssa8$i$i1188 = $8652;
    label = 1460;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8657 = HEAP32[918936] | 0;
   if (($8657 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1189 = 3675744;
    $$lcssa8$i$i1188 = $8657;
    label = 1460;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8662 = HEAP32[918942] | 0;
   if (($8662 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1189 = 3675768;
    $$lcssa8$i$i1188 = $8662;
    label = 1460;
    break;
   }
  }
  $$3$i$i1190 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1460) {
  $8645 = $$lcssa8$i$i1188 + -4 | 0;
  HEAP32[$$lcssa$i$i1189 >> 2] = $8645;
  $$3$i$i1190 = HEAP32[$8645 >> 2] | 0;
 }
 $8666 = $$3$i$i1190 + 52 | 0;
 HEAP16[$$3$i$i1190 >> 1] = 1024;
 HEAP16[$$3$i$i1190 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1190 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1190 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1190 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1190 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1190 + 16 >> 2] = $8666;
 HEAP32[$$3$i$i1190 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1190 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1190 + 48 >> 0] = 0;
 HEAP32[$99 >> 2] = $$3$i$i1190;
 _memcpy($8666 | 0, 1155984, 2048) | 0;
 _memcpy($$3$i$i1190 + 2100 | 0, 1158032, 2048) | 0;
 _memcpy($$3$i$i1190 + 4148 | 0, 1160080, 2048) | 0;
 _memcpy($$3$i$i1190 + 6196 | 0, 1162128, 2048) | 0;
 _memcpy($$3$i$i1190 + 8244 | 0, 1164176, 2048) | 0;
 _memcpy($$3$i$i1190 + 10292 | 0, 1166224, 2048) | 0;
 _memcpy($$3$i$i1190 + 12340 | 0, 1168272, 2048) | 0;
 _memcpy($$3$i$i1190 + 14388 | 0, 1170320, 2048) | 0;
 _memcpy($$3$i$i1190 + 16436 | 0, 1172368, 2048) | 0;
 _memcpy($$3$i$i1190 + 18484 | 0, 1174416, 2048) | 0;
 _memcpy($$3$i$i1190 + 20532 | 0, 1176464, 2048) | 0;
 _memcpy($$3$i$i1190 + 22580 | 0, 1178512, 2048) | 0;
 _memcpy($$3$i$i1190 + 24628 | 0, 1180560, 2048) | 0;
 _memcpy($$3$i$i1190 + 26676 | 0, 1182608, 2048) | 0;
 _memcpy($$3$i$i1190 + 28724 | 0, 1184656, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $99);
 if ($$3$i$i1190 | 0) {
  $8691 = $$3$i$i1190 + 5 | 0;
  $8693 = (HEAP8[$8691 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8691 >> 0] = $8693;
  if (!($8693 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1190);
  HEAP32[$99 >> 2] = 0;
 }
 $8695 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8695 >> 1] = 603;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 617;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1475; else {
  $8700 = HEAP32[918918] | 0;
  if (($8700 | 0) == (HEAP32[918916] | 0)) label = 1475; else {
   $$lcssa$i$i1202 = 3675672;
   $$lcssa8$i$i1201 = $8700;
   label = 1476;
  }
 }
 do if ((label | 0) == 1475) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8707 = HEAP32[918924] | 0;
   if (($8707 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1202 = 3675696;
    $$lcssa8$i$i1201 = $8707;
    label = 1476;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8712 = HEAP32[918930] | 0;
   if (($8712 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1202 = 3675720;
    $$lcssa8$i$i1201 = $8712;
    label = 1476;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8717 = HEAP32[918936] | 0;
   if (($8717 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1202 = 3675744;
    $$lcssa8$i$i1201 = $8717;
    label = 1476;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8722 = HEAP32[918942] | 0;
   if (($8722 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1202 = 3675768;
    $$lcssa8$i$i1201 = $8722;
    label = 1476;
    break;
   }
  }
  $$3$i$i1203 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1476) {
  $8705 = $$lcssa8$i$i1201 + -4 | 0;
  HEAP32[$$lcssa$i$i1202 >> 2] = $8705;
  $$3$i$i1203 = HEAP32[$8705 >> 2] | 0;
 }
 $8726 = $$3$i$i1203 + 52 | 0;
 HEAP16[$$3$i$i1203 >> 1] = 1024;
 HEAP16[$$3$i$i1203 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1203 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1203 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1203 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1203 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1203 + 16 >> 2] = $8726;
 HEAP32[$$3$i$i1203 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1203 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1203 + 48 >> 0] = 0;
 HEAP32[$100 >> 2] = $$3$i$i1203;
 _memcpy($8726 | 0, 1186704, 2048) | 0;
 _memcpy($$3$i$i1203 + 2100 | 0, 1188752, 2048) | 0;
 _memcpy($$3$i$i1203 + 4148 | 0, 1190800, 2048) | 0;
 _memcpy($$3$i$i1203 + 6196 | 0, 1192848, 2048) | 0;
 _memcpy($$3$i$i1203 + 8244 | 0, 1194896, 2048) | 0;
 _memcpy($$3$i$i1203 + 10292 | 0, 1196944, 2048) | 0;
 _memcpy($$3$i$i1203 + 12340 | 0, 1198992, 2048) | 0;
 _memcpy($$3$i$i1203 + 14388 | 0, 1201040, 2048) | 0;
 _memcpy($$3$i$i1203 + 16436 | 0, 1203088, 2048) | 0;
 _memcpy($$3$i$i1203 + 18484 | 0, 1205136, 2048) | 0;
 _memcpy($$3$i$i1203 + 20532 | 0, 1207184, 2048) | 0;
 _memcpy($$3$i$i1203 + 22580 | 0, 1209232, 2048) | 0;
 _memcpy($$3$i$i1203 + 24628 | 0, 1211280, 2048) | 0;
 _memcpy($$3$i$i1203 + 26676 | 0, 1213328, 2048) | 0;
 _memcpy($$3$i$i1203 + 28724 | 0, 1215376, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $100);
 if ($$3$i$i1203 | 0) {
  $8751 = $$3$i$i1203 + 5 | 0;
  $8753 = (HEAP8[$8751 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8751 >> 0] = $8753;
  if (!($8753 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1203);
  HEAP32[$100 >> 2] = 0;
 }
 $8755 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8755 >> 1] = 618;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 632;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1491; else {
  $8760 = HEAP32[918918] | 0;
  if (($8760 | 0) == (HEAP32[918916] | 0)) label = 1491; else {
   $$lcssa$i$i1215 = 3675672;
   $$lcssa8$i$i1214 = $8760;
   label = 1492;
  }
 }
 do if ((label | 0) == 1491) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8767 = HEAP32[918924] | 0;
   if (($8767 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1215 = 3675696;
    $$lcssa8$i$i1214 = $8767;
    label = 1492;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8772 = HEAP32[918930] | 0;
   if (($8772 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1215 = 3675720;
    $$lcssa8$i$i1214 = $8772;
    label = 1492;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8777 = HEAP32[918936] | 0;
   if (($8777 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1215 = 3675744;
    $$lcssa8$i$i1214 = $8777;
    label = 1492;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8782 = HEAP32[918942] | 0;
   if (($8782 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1215 = 3675768;
    $$lcssa8$i$i1214 = $8782;
    label = 1492;
    break;
   }
  }
  $$3$i$i1216 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1492) {
  $8765 = $$lcssa8$i$i1214 + -4 | 0;
  HEAP32[$$lcssa$i$i1215 >> 2] = $8765;
  $$3$i$i1216 = HEAP32[$8765 >> 2] | 0;
 }
 $8786 = $$3$i$i1216 + 52 | 0;
 HEAP16[$$3$i$i1216 >> 1] = 1024;
 HEAP16[$$3$i$i1216 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1216 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1216 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1216 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1216 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1216 + 16 >> 2] = $8786;
 HEAP32[$$3$i$i1216 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1216 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1216 + 48 >> 0] = 0;
 HEAP32[$101 >> 2] = $$3$i$i1216;
 _memcpy($8786 | 0, 1217424, 2048) | 0;
 _memcpy($$3$i$i1216 + 2100 | 0, 1219472, 2048) | 0;
 _memcpy($$3$i$i1216 + 4148 | 0, 1221520, 2048) | 0;
 _memcpy($$3$i$i1216 + 6196 | 0, 1223568, 2048) | 0;
 _memcpy($$3$i$i1216 + 8244 | 0, 1225616, 2048) | 0;
 _memcpy($$3$i$i1216 + 10292 | 0, 1227664, 2048) | 0;
 _memcpy($$3$i$i1216 + 12340 | 0, 1229712, 2048) | 0;
 _memcpy($$3$i$i1216 + 14388 | 0, 1231760, 2048) | 0;
 _memcpy($$3$i$i1216 + 16436 | 0, 1233808, 2048) | 0;
 _memcpy($$3$i$i1216 + 18484 | 0, 1235856, 2048) | 0;
 _memcpy($$3$i$i1216 + 20532 | 0, 1237904, 2048) | 0;
 _memcpy($$3$i$i1216 + 22580 | 0, 1239952, 2048) | 0;
 _memcpy($$3$i$i1216 + 24628 | 0, 1242e3, 2048) | 0;
 _memcpy($$3$i$i1216 + 26676 | 0, 1244048, 2048) | 0;
 _memcpy($$3$i$i1216 + 28724 | 0, 1246096, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $101);
 if ($$3$i$i1216 | 0) {
  $8811 = $$3$i$i1216 + 5 | 0;
  $8813 = (HEAP8[$8811 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8811 >> 0] = $8813;
  if (!($8813 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1216);
  HEAP32[$101 >> 2] = 0;
 }
 $8815 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8815 >> 1] = 633;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 647;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1507; else {
  $8820 = HEAP32[918918] | 0;
  if (($8820 | 0) == (HEAP32[918916] | 0)) label = 1507; else {
   $$lcssa$i$i1228 = 3675672;
   $$lcssa8$i$i1227 = $8820;
   label = 1508;
  }
 }
 do if ((label | 0) == 1507) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8827 = HEAP32[918924] | 0;
   if (($8827 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1228 = 3675696;
    $$lcssa8$i$i1227 = $8827;
    label = 1508;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8832 = HEAP32[918930] | 0;
   if (($8832 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1228 = 3675720;
    $$lcssa8$i$i1227 = $8832;
    label = 1508;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8837 = HEAP32[918936] | 0;
   if (($8837 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1228 = 3675744;
    $$lcssa8$i$i1227 = $8837;
    label = 1508;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8842 = HEAP32[918942] | 0;
   if (($8842 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1228 = 3675768;
    $$lcssa8$i$i1227 = $8842;
    label = 1508;
    break;
   }
  }
  $$3$i$i1229 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1508) {
  $8825 = $$lcssa8$i$i1227 + -4 | 0;
  HEAP32[$$lcssa$i$i1228 >> 2] = $8825;
  $$3$i$i1229 = HEAP32[$8825 >> 2] | 0;
 }
 $8846 = $$3$i$i1229 + 52 | 0;
 HEAP16[$$3$i$i1229 >> 1] = 1024;
 HEAP16[$$3$i$i1229 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1229 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1229 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1229 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1229 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1229 + 16 >> 2] = $8846;
 HEAP32[$$3$i$i1229 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1229 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1229 + 48 >> 0] = 0;
 HEAP32[$102 >> 2] = $$3$i$i1229;
 _memcpy($8846 | 0, 1248144, 2048) | 0;
 _memcpy($$3$i$i1229 + 2100 | 0, 1250192, 2048) | 0;
 _memcpy($$3$i$i1229 + 4148 | 0, 1252240, 2048) | 0;
 _memcpy($$3$i$i1229 + 6196 | 0, 1254288, 2048) | 0;
 _memcpy($$3$i$i1229 + 8244 | 0, 1256336, 2048) | 0;
 _memcpy($$3$i$i1229 + 10292 | 0, 1258384, 2048) | 0;
 _memcpy($$3$i$i1229 + 12340 | 0, 1260432, 2048) | 0;
 _memcpy($$3$i$i1229 + 14388 | 0, 1262480, 2048) | 0;
 _memcpy($$3$i$i1229 + 16436 | 0, 1264528, 2048) | 0;
 _memcpy($$3$i$i1229 + 18484 | 0, 1266576, 2048) | 0;
 _memcpy($$3$i$i1229 + 20532 | 0, 1268624, 2048) | 0;
 _memcpy($$3$i$i1229 + 22580 | 0, 1270672, 2048) | 0;
 _memcpy($$3$i$i1229 + 24628 | 0, 1272720, 2048) | 0;
 _memcpy($$3$i$i1229 + 26676 | 0, 1274768, 2048) | 0;
 _memcpy($$3$i$i1229 + 28724 | 0, 1276816, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $102);
 if ($$3$i$i1229 | 0) {
  $8871 = $$3$i$i1229 + 5 | 0;
  $8873 = (HEAP8[$8871 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8871 >> 0] = $8873;
  if (!($8873 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1229);
  HEAP32[$102 >> 2] = 0;
 }
 $8875 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8875 >> 1] = 648;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 662;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1523; else {
  $8880 = HEAP32[918918] | 0;
  if (($8880 | 0) == (HEAP32[918916] | 0)) label = 1523; else {
   $$lcssa$i$i1241 = 3675672;
   $$lcssa8$i$i1240 = $8880;
   label = 1524;
  }
 }
 do if ((label | 0) == 1523) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8887 = HEAP32[918924] | 0;
   if (($8887 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1241 = 3675696;
    $$lcssa8$i$i1240 = $8887;
    label = 1524;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8892 = HEAP32[918930] | 0;
   if (($8892 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1241 = 3675720;
    $$lcssa8$i$i1240 = $8892;
    label = 1524;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8897 = HEAP32[918936] | 0;
   if (($8897 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1241 = 3675744;
    $$lcssa8$i$i1240 = $8897;
    label = 1524;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8902 = HEAP32[918942] | 0;
   if (($8902 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1241 = 3675768;
    $$lcssa8$i$i1240 = $8902;
    label = 1524;
    break;
   }
  }
  $$3$i$i1242 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1524) {
  $8885 = $$lcssa8$i$i1240 + -4 | 0;
  HEAP32[$$lcssa$i$i1241 >> 2] = $8885;
  $$3$i$i1242 = HEAP32[$8885 >> 2] | 0;
 }
 $8906 = $$3$i$i1242 + 52 | 0;
 HEAP16[$$3$i$i1242 >> 1] = 1024;
 HEAP16[$$3$i$i1242 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1242 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1242 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1242 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1242 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1242 + 16 >> 2] = $8906;
 HEAP32[$$3$i$i1242 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1242 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1242 + 48 >> 0] = 0;
 HEAP32[$103 >> 2] = $$3$i$i1242;
 _memcpy($8906 | 0, 1278864, 2048) | 0;
 _memcpy($$3$i$i1242 + 2100 | 0, 1280912, 2048) | 0;
 _memcpy($$3$i$i1242 + 4148 | 0, 1282960, 2048) | 0;
 _memcpy($$3$i$i1242 + 6196 | 0, 1285008, 2048) | 0;
 _memcpy($$3$i$i1242 + 8244 | 0, 1287056, 2048) | 0;
 _memcpy($$3$i$i1242 + 10292 | 0, 1289104, 2048) | 0;
 _memcpy($$3$i$i1242 + 12340 | 0, 1291152, 2048) | 0;
 _memcpy($$3$i$i1242 + 14388 | 0, 1293200, 2048) | 0;
 _memcpy($$3$i$i1242 + 16436 | 0, 1295248, 2048) | 0;
 _memcpy($$3$i$i1242 + 18484 | 0, 1297296, 2048) | 0;
 _memcpy($$3$i$i1242 + 20532 | 0, 1299344, 2048) | 0;
 _memcpy($$3$i$i1242 + 22580 | 0, 1301392, 2048) | 0;
 _memcpy($$3$i$i1242 + 24628 | 0, 1303440, 2048) | 0;
 _memcpy($$3$i$i1242 + 26676 | 0, 1305488, 2048) | 0;
 _memcpy($$3$i$i1242 + 28724 | 0, 1307536, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $103);
 if ($$3$i$i1242 | 0) {
  $8931 = $$3$i$i1242 + 5 | 0;
  $8933 = (HEAP8[$8931 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8931 >> 0] = $8933;
  if (!($8933 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1242);
  HEAP32[$103 >> 2] = 0;
 }
 $8935 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8935 >> 1] = 663;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 677;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1539; else {
  $8940 = HEAP32[918918] | 0;
  if (($8940 | 0) == (HEAP32[918916] | 0)) label = 1539; else {
   $$lcssa$i$i1254 = 3675672;
   $$lcssa8$i$i1253 = $8940;
   label = 1540;
  }
 }
 do if ((label | 0) == 1539) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $8947 = HEAP32[918924] | 0;
   if (($8947 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1254 = 3675696;
    $$lcssa8$i$i1253 = $8947;
    label = 1540;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $8952 = HEAP32[918930] | 0;
   if (($8952 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1254 = 3675720;
    $$lcssa8$i$i1253 = $8952;
    label = 1540;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $8957 = HEAP32[918936] | 0;
   if (($8957 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1254 = 3675744;
    $$lcssa8$i$i1253 = $8957;
    label = 1540;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $8962 = HEAP32[918942] | 0;
   if (($8962 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1254 = 3675768;
    $$lcssa8$i$i1253 = $8962;
    label = 1540;
    break;
   }
  }
  $$3$i$i1255 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1540) {
  $8945 = $$lcssa8$i$i1253 + -4 | 0;
  HEAP32[$$lcssa$i$i1254 >> 2] = $8945;
  $$3$i$i1255 = HEAP32[$8945 >> 2] | 0;
 }
 $8966 = $$3$i$i1255 + 52 | 0;
 HEAP16[$$3$i$i1255 >> 1] = 1024;
 HEAP16[$$3$i$i1255 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1255 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1255 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1255 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1255 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1255 + 16 >> 2] = $8966;
 HEAP32[$$3$i$i1255 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1255 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1255 + 48 >> 0] = 0;
 HEAP32[$104 >> 2] = $$3$i$i1255;
 _memcpy($8966 | 0, 1309584, 2048) | 0;
 _memcpy($$3$i$i1255 + 2100 | 0, 1311632, 2048) | 0;
 _memcpy($$3$i$i1255 + 4148 | 0, 1313680, 2048) | 0;
 _memcpy($$3$i$i1255 + 6196 | 0, 1315728, 2048) | 0;
 _memcpy($$3$i$i1255 + 8244 | 0, 1317776, 2048) | 0;
 _memcpy($$3$i$i1255 + 10292 | 0, 1319824, 2048) | 0;
 _memcpy($$3$i$i1255 + 12340 | 0, 1321872, 2048) | 0;
 _memcpy($$3$i$i1255 + 14388 | 0, 1323920, 2048) | 0;
 _memcpy($$3$i$i1255 + 16436 | 0, 1325968, 2048) | 0;
 _memcpy($$3$i$i1255 + 18484 | 0, 1328016, 2048) | 0;
 _memcpy($$3$i$i1255 + 20532 | 0, 1330064, 2048) | 0;
 _memcpy($$3$i$i1255 + 22580 | 0, 1332112, 2048) | 0;
 _memcpy($$3$i$i1255 + 24628 | 0, 1334160, 2048) | 0;
 _memcpy($$3$i$i1255 + 26676 | 0, 1336208, 2048) | 0;
 _memcpy($$3$i$i1255 + 28724 | 0, 1338256, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $104);
 if ($$3$i$i1255 | 0) {
  $8991 = $$3$i$i1255 + 5 | 0;
  $8993 = (HEAP8[$8991 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$8991 >> 0] = $8993;
  if (!($8993 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1255);
  HEAP32[$104 >> 2] = 0;
 }
 $8995 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$8995 >> 1] = 678;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 692;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1555; else {
  $9000 = HEAP32[918918] | 0;
  if (($9000 | 0) == (HEAP32[918916] | 0)) label = 1555; else {
   $$lcssa$i$i1267 = 3675672;
   $$lcssa8$i$i1266 = $9000;
   label = 1556;
  }
 }
 do if ((label | 0) == 1555) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $9007 = HEAP32[918924] | 0;
   if (($9007 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1267 = 3675696;
    $$lcssa8$i$i1266 = $9007;
    label = 1556;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $9012 = HEAP32[918930] | 0;
   if (($9012 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1267 = 3675720;
    $$lcssa8$i$i1266 = $9012;
    label = 1556;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $9017 = HEAP32[918936] | 0;
   if (($9017 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1267 = 3675744;
    $$lcssa8$i$i1266 = $9017;
    label = 1556;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $9022 = HEAP32[918942] | 0;
   if (($9022 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1267 = 3675768;
    $$lcssa8$i$i1266 = $9022;
    label = 1556;
    break;
   }
  }
  $$3$i$i1268 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1556) {
  $9005 = $$lcssa8$i$i1266 + -4 | 0;
  HEAP32[$$lcssa$i$i1267 >> 2] = $9005;
  $$3$i$i1268 = HEAP32[$9005 >> 2] | 0;
 }
 $9026 = $$3$i$i1268 + 52 | 0;
 HEAP16[$$3$i$i1268 >> 1] = 1024;
 HEAP16[$$3$i$i1268 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1268 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1268 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1268 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1268 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1268 + 16 >> 2] = $9026;
 HEAP32[$$3$i$i1268 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1268 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1268 + 48 >> 0] = 0;
 HEAP32[$105 >> 2] = $$3$i$i1268;
 _memcpy($9026 | 0, 1340304, 2048) | 0;
 _memcpy($$3$i$i1268 + 2100 | 0, 1342352, 2048) | 0;
 _memcpy($$3$i$i1268 + 4148 | 0, 1344400, 2048) | 0;
 _memcpy($$3$i$i1268 + 6196 | 0, 1346448, 2048) | 0;
 _memcpy($$3$i$i1268 + 8244 | 0, 1348496, 2048) | 0;
 _memcpy($$3$i$i1268 + 10292 | 0, 1350544, 2048) | 0;
 _memcpy($$3$i$i1268 + 12340 | 0, 1352592, 2048) | 0;
 _memcpy($$3$i$i1268 + 14388 | 0, 1354640, 2048) | 0;
 _memcpy($$3$i$i1268 + 16436 | 0, 1356688, 2048) | 0;
 _memcpy($$3$i$i1268 + 18484 | 0, 1358736, 2048) | 0;
 _memcpy($$3$i$i1268 + 20532 | 0, 1360784, 2048) | 0;
 _memcpy($$3$i$i1268 + 22580 | 0, 1362832, 2048) | 0;
 _memcpy($$3$i$i1268 + 24628 | 0, 1364880, 2048) | 0;
 _memcpy($$3$i$i1268 + 26676 | 0, 1366928, 2048) | 0;
 _memcpy($$3$i$i1268 + 28724 | 0, 1368976, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $105);
 if ($$3$i$i1268 | 0) {
  $9051 = $$3$i$i1268 + 5 | 0;
  $9053 = (HEAP8[$9051 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9051 >> 0] = $9053;
  if (!($9053 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1268);
  HEAP32[$105 >> 2] = 0;
 }
 $9055 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9055 >> 1] = 693;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 707;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1571; else {
  $9060 = HEAP32[918918] | 0;
  if (($9060 | 0) == (HEAP32[918916] | 0)) label = 1571; else {
   $$lcssa$i$i1280 = 3675672;
   $$lcssa8$i$i1279 = $9060;
   label = 1572;
  }
 }
 do if ((label | 0) == 1571) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $9067 = HEAP32[918924] | 0;
   if (($9067 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1280 = 3675696;
    $$lcssa8$i$i1279 = $9067;
    label = 1572;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $9072 = HEAP32[918930] | 0;
   if (($9072 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1280 = 3675720;
    $$lcssa8$i$i1279 = $9072;
    label = 1572;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $9077 = HEAP32[918936] | 0;
   if (($9077 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1280 = 3675744;
    $$lcssa8$i$i1279 = $9077;
    label = 1572;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $9082 = HEAP32[918942] | 0;
   if (($9082 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1280 = 3675768;
    $$lcssa8$i$i1279 = $9082;
    label = 1572;
    break;
   }
  }
  $$3$i$i1281 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1572) {
  $9065 = $$lcssa8$i$i1279 + -4 | 0;
  HEAP32[$$lcssa$i$i1280 >> 2] = $9065;
  $$3$i$i1281 = HEAP32[$9065 >> 2] | 0;
 }
 $9086 = $$3$i$i1281 + 52 | 0;
 HEAP16[$$3$i$i1281 >> 1] = 1024;
 HEAP16[$$3$i$i1281 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1281 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1281 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1281 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1281 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1281 + 16 >> 2] = $9086;
 HEAP32[$$3$i$i1281 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1281 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1281 + 48 >> 0] = 0;
 HEAP32[$106 >> 2] = $$3$i$i1281;
 _memcpy($9086 | 0, 1371024, 2048) | 0;
 _memcpy($$3$i$i1281 + 2100 | 0, 1373072, 2048) | 0;
 _memcpy($$3$i$i1281 + 4148 | 0, 1375120, 2048) | 0;
 _memcpy($$3$i$i1281 + 6196 | 0, 1377168, 2048) | 0;
 _memcpy($$3$i$i1281 + 8244 | 0, 1379216, 2048) | 0;
 _memcpy($$3$i$i1281 + 10292 | 0, 1381264, 2048) | 0;
 _memcpy($$3$i$i1281 + 12340 | 0, 1383312, 2048) | 0;
 _memcpy($$3$i$i1281 + 14388 | 0, 1385360, 2048) | 0;
 _memcpy($$3$i$i1281 + 16436 | 0, 1387408, 2048) | 0;
 _memcpy($$3$i$i1281 + 18484 | 0, 1389456, 2048) | 0;
 _memcpy($$3$i$i1281 + 20532 | 0, 1391504, 2048) | 0;
 _memcpy($$3$i$i1281 + 22580 | 0, 1393552, 2048) | 0;
 _memcpy($$3$i$i1281 + 24628 | 0, 1395600, 2048) | 0;
 _memcpy($$3$i$i1281 + 26676 | 0, 1397648, 2048) | 0;
 _memcpy($$3$i$i1281 + 28724 | 0, 1399696, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $106);
 if ($$3$i$i1281 | 0) {
  $9111 = $$3$i$i1281 + 5 | 0;
  $9113 = (HEAP8[$9111 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9111 >> 0] = $9113;
  if (!($9113 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1281);
  HEAP32[$106 >> 2] = 0;
 }
 $9115 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9115 >> 1] = 708;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 709;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4148) label = 1587; else {
  $9120 = HEAP32[918918] | 0;
  if (($9120 | 0) == (HEAP32[918916] | 0)) label = 1587; else {
   $$lcssa$i$i1293 = 3675672;
   $$lcssa8$i$i1292 = $9120;
   label = 1588;
  }
 }
 do if ((label | 0) == 1587) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4148) {
   $9127 = HEAP32[918924] | 0;
   if (($9127 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1293 = 3675696;
    $$lcssa8$i$i1292 = $9127;
    label = 1588;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4148) {
   $9132 = HEAP32[918930] | 0;
   if (($9132 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1293 = 3675720;
    $$lcssa8$i$i1292 = $9132;
    label = 1588;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4148) {
   $9137 = HEAP32[918936] | 0;
   if (($9137 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1293 = 3675744;
    $$lcssa8$i$i1292 = $9137;
    label = 1588;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4148) {
   $9142 = HEAP32[918942] | 0;
   if (($9142 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1293 = 3675768;
    $$lcssa8$i$i1292 = $9142;
    label = 1588;
    break;
   }
  }
  $$3$i$i1294 = __Znwj(4148) | 0;
 } while (0);
 if ((label | 0) == 1588) {
  $9125 = $$lcssa8$i$i1292 + -4 | 0;
  HEAP32[$$lcssa$i$i1293 >> 2] = $9125;
  $$3$i$i1294 = HEAP32[$9125 >> 2] | 0;
 }
 $9146 = $$3$i$i1294 + 52 | 0;
 HEAP16[$$3$i$i1294 >> 1] = 1024;
 HEAP16[$$3$i$i1294 + 2 >> 1] = 2;
 HEAP8[$$3$i$i1294 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1294 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1294 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1294 + 12 >> 2] = 4096;
 HEAP32[$$3$i$i1294 + 16 >> 2] = $9146;
 HEAP32[$$3$i$i1294 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1294 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1294 + 48 >> 0] = 0;
 HEAP32[$107 >> 2] = $$3$i$i1294;
 _memcpy($9146 | 0, 1401744, 2048) | 0;
 _memcpy($$3$i$i1294 + 2100 | 0, 1403792, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $107);
 if ($$3$i$i1294 | 0) {
  $9158 = $$3$i$i1294 + 5 | 0;
  $9160 = (HEAP8[$9158 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9158 >> 0] = $9160;
  if (!($9160 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1294);
  HEAP32[$107 >> 2] = 0;
 }
 $9162 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9162 >> 1] = 710;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 711;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4148) label = 1603; else {
  $9167 = HEAP32[918918] | 0;
  if (($9167 | 0) == (HEAP32[918916] | 0)) label = 1603; else {
   $$lcssa$i$i1306 = 3675672;
   $$lcssa8$i$i1305 = $9167;
   label = 1604;
  }
 }
 do if ((label | 0) == 1603) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4148) {
   $9174 = HEAP32[918924] | 0;
   if (($9174 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1306 = 3675696;
    $$lcssa8$i$i1305 = $9174;
    label = 1604;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4148) {
   $9179 = HEAP32[918930] | 0;
   if (($9179 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1306 = 3675720;
    $$lcssa8$i$i1305 = $9179;
    label = 1604;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4148) {
   $9184 = HEAP32[918936] | 0;
   if (($9184 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1306 = 3675744;
    $$lcssa8$i$i1305 = $9184;
    label = 1604;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4148) {
   $9189 = HEAP32[918942] | 0;
   if (($9189 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1306 = 3675768;
    $$lcssa8$i$i1305 = $9189;
    label = 1604;
    break;
   }
  }
  $$3$i$i1307 = __Znwj(4148) | 0;
 } while (0);
 if ((label | 0) == 1604) {
  $9172 = $$lcssa8$i$i1305 + -4 | 0;
  HEAP32[$$lcssa$i$i1306 >> 2] = $9172;
  $$3$i$i1307 = HEAP32[$9172 >> 2] | 0;
 }
 $9193 = $$3$i$i1307 + 52 | 0;
 HEAP16[$$3$i$i1307 >> 1] = 1024;
 HEAP16[$$3$i$i1307 + 2 >> 1] = 2;
 HEAP8[$$3$i$i1307 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1307 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1307 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1307 + 12 >> 2] = 4096;
 HEAP32[$$3$i$i1307 + 16 >> 2] = $9193;
 HEAP32[$$3$i$i1307 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1307 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1307 + 48 >> 0] = 0;
 HEAP32[$108 >> 2] = $$3$i$i1307;
 _memcpy($9193 | 0, 1405840, 2048) | 0;
 _memcpy($$3$i$i1307 + 2100 | 0, 1407888, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $108);
 if ($$3$i$i1307 | 0) {
  $9205 = $$3$i$i1307 + 5 | 0;
  $9207 = (HEAP8[$9205 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9205 >> 0] = $9207;
  if (!($9207 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1307);
  HEAP32[$108 >> 2] = 0;
 }
 $9209 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9209 >> 1] = 712;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 713;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4148) label = 1619; else {
  $9214 = HEAP32[918918] | 0;
  if (($9214 | 0) == (HEAP32[918916] | 0)) label = 1619; else {
   $$lcssa$i$i1319 = 3675672;
   $$lcssa8$i$i1318 = $9214;
   label = 1620;
  }
 }
 do if ((label | 0) == 1619) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4148) {
   $9221 = HEAP32[918924] | 0;
   if (($9221 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1319 = 3675696;
    $$lcssa8$i$i1318 = $9221;
    label = 1620;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4148) {
   $9226 = HEAP32[918930] | 0;
   if (($9226 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1319 = 3675720;
    $$lcssa8$i$i1318 = $9226;
    label = 1620;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4148) {
   $9231 = HEAP32[918936] | 0;
   if (($9231 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1319 = 3675744;
    $$lcssa8$i$i1318 = $9231;
    label = 1620;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4148) {
   $9236 = HEAP32[918942] | 0;
   if (($9236 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1319 = 3675768;
    $$lcssa8$i$i1318 = $9236;
    label = 1620;
    break;
   }
  }
  $$3$i$i1320 = __Znwj(4148) | 0;
 } while (0);
 if ((label | 0) == 1620) {
  $9219 = $$lcssa8$i$i1318 + -4 | 0;
  HEAP32[$$lcssa$i$i1319 >> 2] = $9219;
  $$3$i$i1320 = HEAP32[$9219 >> 2] | 0;
 }
 $9240 = $$3$i$i1320 + 52 | 0;
 HEAP16[$$3$i$i1320 >> 1] = 1024;
 HEAP16[$$3$i$i1320 + 2 >> 1] = 2;
 HEAP8[$$3$i$i1320 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1320 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1320 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1320 + 12 >> 2] = 4096;
 HEAP32[$$3$i$i1320 + 16 >> 2] = $9240;
 HEAP32[$$3$i$i1320 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1320 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1320 + 48 >> 0] = 0;
 HEAP32[$109 >> 2] = $$3$i$i1320;
 _memcpy($9240 | 0, 1409936, 2048) | 0;
 _memcpy($$3$i$i1320 + 2100 | 0, 1411984, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $109);
 if ($$3$i$i1320 | 0) {
  $9252 = $$3$i$i1320 + 5 | 0;
  $9254 = (HEAP8[$9252 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9252 >> 0] = $9254;
  if (!($9254 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1320);
  HEAP32[$109 >> 2] = 0;
 }
 $9256 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9256 >> 1] = 714;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 714;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2100) label = 1635; else {
  $9261 = HEAP32[918918] | 0;
  if (($9261 | 0) == (HEAP32[918916] | 0)) label = 1635; else {
   $$lcssa$i$i1332 = 3675672;
   $$lcssa8$i$i1331 = $9261;
   label = 1636;
  }
 }
 do if ((label | 0) == 1635) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2100) {
   $9268 = HEAP32[918924] | 0;
   if (($9268 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1332 = 3675696;
    $$lcssa8$i$i1331 = $9268;
    label = 1636;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2100) {
   $9273 = HEAP32[918930] | 0;
   if (($9273 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1332 = 3675720;
    $$lcssa8$i$i1331 = $9273;
    label = 1636;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2100) {
   $9278 = HEAP32[918936] | 0;
   if (($9278 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1332 = 3675744;
    $$lcssa8$i$i1331 = $9278;
    label = 1636;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2100) {
   $9283 = HEAP32[918942] | 0;
   if (($9283 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1332 = 3675768;
    $$lcssa8$i$i1331 = $9283;
    label = 1636;
    break;
   }
  }
  $$3$i$i1333 = __Znwj(2100) | 0;
 } while (0);
 if ((label | 0) == 1636) {
  $9266 = $$lcssa8$i$i1331 + -4 | 0;
  HEAP32[$$lcssa$i$i1332 >> 2] = $9266;
  $$3$i$i1333 = HEAP32[$9266 >> 2] | 0;
 }
 $9287 = $$3$i$i1333 + 52 | 0;
 HEAP16[$$3$i$i1333 >> 1] = 1024;
 HEAP16[$$3$i$i1333 + 2 >> 1] = 1;
 HEAP8[$$3$i$i1333 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1333 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1333 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1333 + 12 >> 2] = 2048;
 HEAP32[$$3$i$i1333 + 16 >> 2] = $9287;
 HEAP32[$$3$i$i1333 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1333 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1333 + 48 >> 0] = 0;
 HEAP32[$110 >> 2] = $$3$i$i1333;
 _memcpy($9287 | 0, 1414032, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $110);
 if ($$3$i$i1333 | 0) {
  $9298 = $$3$i$i1333 + 5 | 0;
  $9300 = (HEAP8[$9298 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9298 >> 0] = $9300;
  if (!($9300 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1333);
  HEAP32[$110 >> 2] = 0;
 }
 $9302 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9302 >> 1] = 715;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 715;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2100) label = 1651; else {
  $9307 = HEAP32[918918] | 0;
  if (($9307 | 0) == (HEAP32[918916] | 0)) label = 1651; else {
   $$lcssa$i$i1345 = 3675672;
   $$lcssa8$i$i1344 = $9307;
   label = 1652;
  }
 }
 do if ((label | 0) == 1651) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2100) {
   $9314 = HEAP32[918924] | 0;
   if (($9314 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1345 = 3675696;
    $$lcssa8$i$i1344 = $9314;
    label = 1652;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2100) {
   $9319 = HEAP32[918930] | 0;
   if (($9319 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1345 = 3675720;
    $$lcssa8$i$i1344 = $9319;
    label = 1652;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2100) {
   $9324 = HEAP32[918936] | 0;
   if (($9324 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1345 = 3675744;
    $$lcssa8$i$i1344 = $9324;
    label = 1652;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2100) {
   $9329 = HEAP32[918942] | 0;
   if (($9329 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1345 = 3675768;
    $$lcssa8$i$i1344 = $9329;
    label = 1652;
    break;
   }
  }
  $$3$i$i1346 = __Znwj(2100) | 0;
 } while (0);
 if ((label | 0) == 1652) {
  $9312 = $$lcssa8$i$i1344 + -4 | 0;
  HEAP32[$$lcssa$i$i1345 >> 2] = $9312;
  $$3$i$i1346 = HEAP32[$9312 >> 2] | 0;
 }
 $9333 = $$3$i$i1346 + 52 | 0;
 HEAP16[$$3$i$i1346 >> 1] = 1024;
 HEAP16[$$3$i$i1346 + 2 >> 1] = 1;
 HEAP8[$$3$i$i1346 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1346 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1346 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1346 + 12 >> 2] = 2048;
 HEAP32[$$3$i$i1346 + 16 >> 2] = $9333;
 HEAP32[$$3$i$i1346 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1346 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1346 + 48 >> 0] = 0;
 HEAP32[$111 >> 2] = $$3$i$i1346;
 _memcpy($9333 | 0, 1416080, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $111);
 if ($$3$i$i1346 | 0) {
  $9344 = $$3$i$i1346 + 5 | 0;
  $9346 = (HEAP8[$9344 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9344 >> 0] = $9346;
  if (!($9346 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1346);
  HEAP32[$111 >> 2] = 0;
 }
 $9348 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9348 >> 1] = 716;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 716;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2100) label = 1667; else {
  $9353 = HEAP32[918918] | 0;
  if (($9353 | 0) == (HEAP32[918916] | 0)) label = 1667; else {
   $$lcssa$i$i1358 = 3675672;
   $$lcssa8$i$i1357 = $9353;
   label = 1668;
  }
 }
 do if ((label | 0) == 1667) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2100) {
   $9360 = HEAP32[918924] | 0;
   if (($9360 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1358 = 3675696;
    $$lcssa8$i$i1357 = $9360;
    label = 1668;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2100) {
   $9365 = HEAP32[918930] | 0;
   if (($9365 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1358 = 3675720;
    $$lcssa8$i$i1357 = $9365;
    label = 1668;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2100) {
   $9370 = HEAP32[918936] | 0;
   if (($9370 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1358 = 3675744;
    $$lcssa8$i$i1357 = $9370;
    label = 1668;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2100) {
   $9375 = HEAP32[918942] | 0;
   if (($9375 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1358 = 3675768;
    $$lcssa8$i$i1357 = $9375;
    label = 1668;
    break;
   }
  }
  $$3$i$i1359 = __Znwj(2100) | 0;
 } while (0);
 if ((label | 0) == 1668) {
  $9358 = $$lcssa8$i$i1357 + -4 | 0;
  HEAP32[$$lcssa$i$i1358 >> 2] = $9358;
  $$3$i$i1359 = HEAP32[$9358 >> 2] | 0;
 }
 $9379 = $$3$i$i1359 + 52 | 0;
 HEAP16[$$3$i$i1359 >> 1] = 1024;
 HEAP16[$$3$i$i1359 + 2 >> 1] = 1;
 HEAP8[$$3$i$i1359 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1359 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1359 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1359 + 12 >> 2] = 2048;
 HEAP32[$$3$i$i1359 + 16 >> 2] = $9379;
 HEAP32[$$3$i$i1359 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1359 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1359 + 48 >> 0] = 0;
 HEAP32[$112 >> 2] = $$3$i$i1359;
 _memcpy($9379 | 0, 1418128, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $112);
 if ($$3$i$i1359 | 0) {
  $9390 = $$3$i$i1359 + 5 | 0;
  $9392 = (HEAP8[$9390 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9390 >> 0] = $9392;
  if (!($9392 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1359);
  HEAP32[$112 >> 2] = 0;
 }
 $9394 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9394 >> 1] = 717;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 717;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2100) label = 1683; else {
  $9399 = HEAP32[918918] | 0;
  if (($9399 | 0) == (HEAP32[918916] | 0)) label = 1683; else {
   $$lcssa$i$i1371 = 3675672;
   $$lcssa8$i$i1370 = $9399;
   label = 1684;
  }
 }
 do if ((label | 0) == 1683) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2100) {
   $9406 = HEAP32[918924] | 0;
   if (($9406 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1371 = 3675696;
    $$lcssa8$i$i1370 = $9406;
    label = 1684;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2100) {
   $9411 = HEAP32[918930] | 0;
   if (($9411 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1371 = 3675720;
    $$lcssa8$i$i1370 = $9411;
    label = 1684;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2100) {
   $9416 = HEAP32[918936] | 0;
   if (($9416 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1371 = 3675744;
    $$lcssa8$i$i1370 = $9416;
    label = 1684;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2100) {
   $9421 = HEAP32[918942] | 0;
   if (($9421 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1371 = 3675768;
    $$lcssa8$i$i1370 = $9421;
    label = 1684;
    break;
   }
  }
  $$3$i$i1372 = __Znwj(2100) | 0;
 } while (0);
 if ((label | 0) == 1684) {
  $9404 = $$lcssa8$i$i1370 + -4 | 0;
  HEAP32[$$lcssa$i$i1371 >> 2] = $9404;
  $$3$i$i1372 = HEAP32[$9404 >> 2] | 0;
 }
 $9425 = $$3$i$i1372 + 52 | 0;
 HEAP16[$$3$i$i1372 >> 1] = 1024;
 HEAP16[$$3$i$i1372 + 2 >> 1] = 1;
 HEAP8[$$3$i$i1372 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1372 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1372 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1372 + 12 >> 2] = 2048;
 HEAP32[$$3$i$i1372 + 16 >> 2] = $9425;
 HEAP32[$$3$i$i1372 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1372 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1372 + 48 >> 0] = 0;
 HEAP32[$113 >> 2] = $$3$i$i1372;
 _memcpy($9425 | 0, 1420176, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $113);
 if ($$3$i$i1372 | 0) {
  $9436 = $$3$i$i1372 + 5 | 0;
  $9438 = (HEAP8[$9436 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9436 >> 0] = $9438;
  if (!($9438 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1372);
  HEAP32[$113 >> 2] = 0;
 }
 $9440 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9440 >> 1] = 718;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 732;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1699; else {
  $9445 = HEAP32[918918] | 0;
  if (($9445 | 0) == (HEAP32[918916] | 0)) label = 1699; else {
   $$lcssa$i$i1384 = 3675672;
   $$lcssa8$i$i1383 = $9445;
   label = 1700;
  }
 }
 do if ((label | 0) == 1699) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $9452 = HEAP32[918924] | 0;
   if (($9452 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1384 = 3675696;
    $$lcssa8$i$i1383 = $9452;
    label = 1700;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $9457 = HEAP32[918930] | 0;
   if (($9457 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1384 = 3675720;
    $$lcssa8$i$i1383 = $9457;
    label = 1700;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $9462 = HEAP32[918936] | 0;
   if (($9462 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1384 = 3675744;
    $$lcssa8$i$i1383 = $9462;
    label = 1700;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $9467 = HEAP32[918942] | 0;
   if (($9467 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1384 = 3675768;
    $$lcssa8$i$i1383 = $9467;
    label = 1700;
    break;
   }
  }
  $$3$i$i1385 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1700) {
  $9450 = $$lcssa8$i$i1383 + -4 | 0;
  HEAP32[$$lcssa$i$i1384 >> 2] = $9450;
  $$3$i$i1385 = HEAP32[$9450 >> 2] | 0;
 }
 $9471 = $$3$i$i1385 + 52 | 0;
 HEAP16[$$3$i$i1385 >> 1] = 1024;
 HEAP16[$$3$i$i1385 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1385 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1385 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1385 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1385 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1385 + 16 >> 2] = $9471;
 HEAP32[$$3$i$i1385 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1385 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1385 + 48 >> 0] = 0;
 HEAP32[$114 >> 2] = $$3$i$i1385;
 _memcpy($9471 | 0, 1422224, 2048) | 0;
 _memcpy($$3$i$i1385 + 2100 | 0, 1424272, 2048) | 0;
 _memcpy($$3$i$i1385 + 4148 | 0, 1426320, 2048) | 0;
 _memcpy($$3$i$i1385 + 6196 | 0, 1428368, 2048) | 0;
 _memcpy($$3$i$i1385 + 8244 | 0, 1430416, 2048) | 0;
 _memcpy($$3$i$i1385 + 10292 | 0, 1432464, 2048) | 0;
 _memcpy($$3$i$i1385 + 12340 | 0, 1434512, 2048) | 0;
 _memcpy($$3$i$i1385 + 14388 | 0, 1436560, 2048) | 0;
 _memcpy($$3$i$i1385 + 16436 | 0, 1438608, 2048) | 0;
 _memcpy($$3$i$i1385 + 18484 | 0, 1440656, 2048) | 0;
 _memcpy($$3$i$i1385 + 20532 | 0, 1442704, 2048) | 0;
 _memcpy($$3$i$i1385 + 22580 | 0, 1444752, 2048) | 0;
 _memcpy($$3$i$i1385 + 24628 | 0, 1446800, 2048) | 0;
 _memcpy($$3$i$i1385 + 26676 | 0, 1448848, 2048) | 0;
 _memcpy($$3$i$i1385 + 28724 | 0, 1450896, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $114);
 if ($$3$i$i1385 | 0) {
  $9496 = $$3$i$i1385 + 5 | 0;
  $9498 = (HEAP8[$9496 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9496 >> 0] = $9498;
  if (!($9498 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1385);
  HEAP32[$114 >> 2] = 0;
 }
 $9500 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9500 >> 1] = 733;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 738;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 12340) label = 1715; else {
  $9505 = HEAP32[918918] | 0;
  if (($9505 | 0) == (HEAP32[918916] | 0)) label = 1715; else {
   $$lcssa$i$i1397 = 3675672;
   $$lcssa8$i$i1396 = $9505;
   label = 1716;
  }
 }
 do if ((label | 0) == 1715) {
  if ((HEAP32[918925] | 0) >>> 0 >= 12340) {
   $9512 = HEAP32[918924] | 0;
   if (($9512 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1397 = 3675696;
    $$lcssa8$i$i1396 = $9512;
    label = 1716;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 12340) {
   $9517 = HEAP32[918930] | 0;
   if (($9517 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1397 = 3675720;
    $$lcssa8$i$i1396 = $9517;
    label = 1716;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 12340) {
   $9522 = HEAP32[918936] | 0;
   if (($9522 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1397 = 3675744;
    $$lcssa8$i$i1396 = $9522;
    label = 1716;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 12340) {
   $9527 = HEAP32[918942] | 0;
   if (($9527 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1397 = 3675768;
    $$lcssa8$i$i1396 = $9527;
    label = 1716;
    break;
   }
  }
  $$3$i$i1398 = __Znwj(12340) | 0;
 } while (0);
 if ((label | 0) == 1716) {
  $9510 = $$lcssa8$i$i1396 + -4 | 0;
  HEAP32[$$lcssa$i$i1397 >> 2] = $9510;
  $$3$i$i1398 = HEAP32[$9510 >> 2] | 0;
 }
 $9531 = $$3$i$i1398 + 52 | 0;
 HEAP16[$$3$i$i1398 >> 1] = 1024;
 HEAP16[$$3$i$i1398 + 2 >> 1] = 6;
 HEAP8[$$3$i$i1398 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1398 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1398 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1398 + 12 >> 2] = 12288;
 HEAP32[$$3$i$i1398 + 16 >> 2] = $9531;
 HEAP32[$$3$i$i1398 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1398 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1398 + 48 >> 0] = 0;
 HEAP32[$115 >> 2] = $$3$i$i1398;
 _memcpy($9531 | 0, 1452944, 2048) | 0;
 _memcpy($$3$i$i1398 + 2100 | 0, 1454992, 2048) | 0;
 _memcpy($$3$i$i1398 + 4148 | 0, 1457040, 2048) | 0;
 _memcpy($$3$i$i1398 + 6196 | 0, 1459088, 2048) | 0;
 _memcpy($$3$i$i1398 + 8244 | 0, 1461136, 2048) | 0;
 _memcpy($$3$i$i1398 + 10292 | 0, 1463184, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $115);
 if ($$3$i$i1398 | 0) {
  $9547 = $$3$i$i1398 + 5 | 0;
  $9549 = (HEAP8[$9547 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9547 >> 0] = $9549;
  if (!($9549 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1398);
  HEAP32[$115 >> 2] = 0;
 }
 $9551 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9551 >> 1] = 739;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 753;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30772) label = 1731; else {
  $9556 = HEAP32[918918] | 0;
  if (($9556 | 0) == (HEAP32[918916] | 0)) label = 1731; else {
   $$lcssa$i$i1410 = 3675672;
   $$lcssa8$i$i1409 = $9556;
   label = 1732;
  }
 }
 do if ((label | 0) == 1731) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30772) {
   $9563 = HEAP32[918924] | 0;
   if (($9563 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1410 = 3675696;
    $$lcssa8$i$i1409 = $9563;
    label = 1732;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30772) {
   $9568 = HEAP32[918930] | 0;
   if (($9568 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1410 = 3675720;
    $$lcssa8$i$i1409 = $9568;
    label = 1732;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30772) {
   $9573 = HEAP32[918936] | 0;
   if (($9573 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1410 = 3675744;
    $$lcssa8$i$i1409 = $9573;
    label = 1732;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30772) {
   $9578 = HEAP32[918942] | 0;
   if (($9578 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1410 = 3675768;
    $$lcssa8$i$i1409 = $9578;
    label = 1732;
    break;
   }
  }
  $$3$i$i1411 = __Znwj(30772) | 0;
 } while (0);
 if ((label | 0) == 1732) {
  $9561 = $$lcssa8$i$i1409 + -4 | 0;
  HEAP32[$$lcssa$i$i1410 >> 2] = $9561;
  $$3$i$i1411 = HEAP32[$9561 >> 2] | 0;
 }
 $9582 = $$3$i$i1411 + 52 | 0;
 HEAP16[$$3$i$i1411 >> 1] = 1024;
 HEAP16[$$3$i$i1411 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1411 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1411 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1411 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1411 + 12 >> 2] = 30720;
 HEAP32[$$3$i$i1411 + 16 >> 2] = $9582;
 HEAP32[$$3$i$i1411 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1411 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1411 + 48 >> 0] = 0;
 HEAP32[$116 >> 2] = $$3$i$i1411;
 _memcpy($9582 | 0, 1465232, 2048) | 0;
 _memcpy($$3$i$i1411 + 2100 | 0, 1467280, 2048) | 0;
 _memcpy($$3$i$i1411 + 4148 | 0, 1469328, 2048) | 0;
 _memcpy($$3$i$i1411 + 6196 | 0, 1471376, 2048) | 0;
 _memcpy($$3$i$i1411 + 8244 | 0, 1473424, 2048) | 0;
 _memcpy($$3$i$i1411 + 10292 | 0, 1475472, 2048) | 0;
 _memcpy($$3$i$i1411 + 12340 | 0, 1477520, 2048) | 0;
 _memcpy($$3$i$i1411 + 14388 | 0, 1479568, 2048) | 0;
 _memcpy($$3$i$i1411 + 16436 | 0, 1481616, 2048) | 0;
 _memcpy($$3$i$i1411 + 18484 | 0, 1483664, 2048) | 0;
 _memcpy($$3$i$i1411 + 20532 | 0, 1485712, 2048) | 0;
 _memcpy($$3$i$i1411 + 22580 | 0, 1487760, 2048) | 0;
 _memcpy($$3$i$i1411 + 24628 | 0, 1489808, 2048) | 0;
 _memcpy($$3$i$i1411 + 26676 | 0, 1491856, 2048) | 0;
 _memcpy($$3$i$i1411 + 28724 | 0, 1493904, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $116);
 if ($$3$i$i1411 | 0) {
  $9607 = $$3$i$i1411 + 5 | 0;
  $9609 = (HEAP8[$9607 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9607 >> 0] = $9609;
  if (!($9609 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1411);
  HEAP32[$116 >> 2] = 0;
 }
 $9611 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9611 >> 1] = 754;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 24628) label = 1747; else {
  $9616 = HEAP32[918918] | 0;
  if (($9616 | 0) == (HEAP32[918916] | 0)) label = 1747; else {
   $$lcssa$i$i1423 = 3675672;
   $$lcssa8$i$i1422 = $9616;
   label = 1748;
  }
 }
 do if ((label | 0) == 1747) {
  if ((HEAP32[918925] | 0) >>> 0 >= 24628) {
   $9623 = HEAP32[918924] | 0;
   if (($9623 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1423 = 3675696;
    $$lcssa8$i$i1422 = $9623;
    label = 1748;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 24628) {
   $9628 = HEAP32[918930] | 0;
   if (($9628 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1423 = 3675720;
    $$lcssa8$i$i1422 = $9628;
    label = 1748;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 24628) {
   $9633 = HEAP32[918936] | 0;
   if (($9633 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1423 = 3675744;
    $$lcssa8$i$i1422 = $9633;
    label = 1748;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 24628) {
   $9638 = HEAP32[918942] | 0;
   if (($9638 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1423 = 3675768;
    $$lcssa8$i$i1422 = $9638;
    label = 1748;
    break;
   }
  }
  $$3$i$i1424 = __Znwj(24628) | 0;
 } while (0);
 if ((label | 0) == 1748) {
  $9621 = $$lcssa8$i$i1422 + -4 | 0;
  HEAP32[$$lcssa$i$i1423 >> 2] = $9621;
  $$3$i$i1424 = HEAP32[$9621 >> 2] | 0;
 }
 $9642 = $$3$i$i1424 + 52 | 0;
 HEAP16[$$3$i$i1424 >> 1] = 1024;
 HEAP16[$$3$i$i1424 + 2 >> 1] = 12;
 HEAP8[$$3$i$i1424 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1424 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1424 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1424 + 12 >> 2] = 24576;
 HEAP32[$$3$i$i1424 + 16 >> 2] = $9642;
 HEAP32[$$3$i$i1424 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1424 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1424 + 48 >> 0] = 0;
 HEAP32[$117 >> 2] = $$3$i$i1424;
 _memcpy($9642 | 0, 1495952, 2048) | 0;
 _memcpy($$3$i$i1424 + 2100 | 0, 1498e3, 2048) | 0;
 _memcpy($$3$i$i1424 + 4148 | 0, 1500048, 2048) | 0;
 _memcpy($$3$i$i1424 + 6196 | 0, 1502096, 2048) | 0;
 _memcpy($$3$i$i1424 + 8244 | 0, 1504144, 2048) | 0;
 _memcpy($$3$i$i1424 + 10292 | 0, 1506192, 2048) | 0;
 _memcpy($$3$i$i1424 + 12340 | 0, 1508240, 2048) | 0;
 _memcpy($$3$i$i1424 + 14388 | 0, 1510288, 2048) | 0;
 _memcpy($$3$i$i1424 + 16436 | 0, 1512336, 2048) | 0;
 _memcpy($$3$i$i1424 + 18484 | 0, 1514384, 2048) | 0;
 _memcpy($$3$i$i1424 + 20532 | 0, 1516432, 2048) | 0;
 _memcpy($$3$i$i1424 + 22580 | 0, 1518480, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $117);
 if ($$3$i$i1424 | 0) {
  $9664 = $$3$i$i1424 + 5 | 0;
  $9666 = (HEAP8[$9664 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9664 >> 0] = $9666;
  if (!($9666 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1424);
  HEAP32[$117 >> 2] = 0;
 }
 $9668 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9668 >> 1] = 766;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 767;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4148) label = 1763; else {
  $9673 = HEAP32[918918] | 0;
  if (($9673 | 0) == (HEAP32[918916] | 0)) label = 1763; else {
   $$lcssa$i$i1436 = 3675672;
   $$lcssa8$i$i1435 = $9673;
   label = 1764;
  }
 }
 do if ((label | 0) == 1763) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4148) {
   $9680 = HEAP32[918924] | 0;
   if (($9680 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1436 = 3675696;
    $$lcssa8$i$i1435 = $9680;
    label = 1764;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4148) {
   $9685 = HEAP32[918930] | 0;
   if (($9685 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1436 = 3675720;
    $$lcssa8$i$i1435 = $9685;
    label = 1764;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4148) {
   $9690 = HEAP32[918936] | 0;
   if (($9690 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1436 = 3675744;
    $$lcssa8$i$i1435 = $9690;
    label = 1764;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4148) {
   $9695 = HEAP32[918942] | 0;
   if (($9695 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1436 = 3675768;
    $$lcssa8$i$i1435 = $9695;
    label = 1764;
    break;
   }
  }
  $$3$i$i1437 = __Znwj(4148) | 0;
 } while (0);
 if ((label | 0) == 1764) {
  $9678 = $$lcssa8$i$i1435 + -4 | 0;
  HEAP32[$$lcssa$i$i1436 >> 2] = $9678;
  $$3$i$i1437 = HEAP32[$9678 >> 2] | 0;
 }
 $9699 = $$3$i$i1437 + 52 | 0;
 HEAP16[$$3$i$i1437 >> 1] = 1024;
 HEAP16[$$3$i$i1437 + 2 >> 1] = 2;
 HEAP8[$$3$i$i1437 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1437 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1437 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1437 + 12 >> 2] = 4096;
 HEAP32[$$3$i$i1437 + 16 >> 2] = $9699;
 HEAP32[$$3$i$i1437 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1437 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1437 + 48 >> 0] = 0;
 HEAP32[$118 >> 2] = $$3$i$i1437;
 _memcpy($9699 | 0, 1520528, 2048) | 0;
 _memcpy($$3$i$i1437 + 2100 | 0, 1522576, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $118);
 if ($$3$i$i1437 | 0) {
  $9711 = $$3$i$i1437 + 5 | 0;
  $9713 = (HEAP8[$9711 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9711 >> 0] = $9713;
  if (!($9713 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1437);
  HEAP32[$118 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 161;
 HEAP16[$bitmapData + 2 >> 1] = 5;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 22;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31156) label = 1779; else {
  $9720 = HEAP32[918918] | 0;
  if (($9720 | 0) == (HEAP32[918916] | 0)) label = 1779; else {
   $$lcssa$i$i1449 = 3675672;
   $$lcssa8$i$i1448 = $9720;
   label = 1780;
  }
 }
 do if ((label | 0) == 1779) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31156) {
   $9727 = HEAP32[918924] | 0;
   if (($9727 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1449 = 3675696;
    $$lcssa8$i$i1448 = $9727;
    label = 1780;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31156) {
   $9732 = HEAP32[918930] | 0;
   if (($9732 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1449 = 3675720;
    $$lcssa8$i$i1448 = $9732;
    label = 1780;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31156) {
   $9737 = HEAP32[918936] | 0;
   if (($9737 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1449 = 3675744;
    $$lcssa8$i$i1448 = $9737;
    label = 1780;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31156) {
   $9742 = HEAP32[918942] | 0;
   if (($9742 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1449 = 3675768;
    $$lcssa8$i$i1448 = $9742;
    label = 1780;
    break;
   }
  }
  $$3$i$i1450 = __Znwj(31156) | 0;
 } while (0);
 if ((label | 0) == 1780) {
  $9725 = $$lcssa8$i$i1448 + -4 | 0;
  HEAP32[$$lcssa$i$i1449 >> 2] = $9725;
  $$3$i$i1450 = HEAP32[$9725 >> 2] | 0;
 }
 $9746 = $$3$i$i1450 + 52 | 0;
 HEAP16[$$3$i$i1450 >> 1] = 864;
 HEAP16[$$3$i$i1450 + 2 >> 1] = 18;
 HEAP8[$$3$i$i1450 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1450 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1450 + 8 >> 2] = 1728;
 HEAP32[$$3$i$i1450 + 12 >> 2] = 31104;
 HEAP32[$$3$i$i1450 + 16 >> 2] = $9746;
 HEAP32[$$3$i$i1450 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1450 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1450 + 48 >> 0] = 0;
 HEAP32[$119 >> 2] = $$3$i$i1450;
 _memcpy($9746 | 0, 1524624, 1728) | 0;
 _memcpy($$3$i$i1450 + 1780 | 0, 1526352, 1728) | 0;
 _memcpy($$3$i$i1450 + 3508 | 0, 1528080, 1728) | 0;
 _memcpy($$3$i$i1450 + 5236 | 0, 1529808, 1728) | 0;
 _memcpy($$3$i$i1450 + 6964 | 0, 1531536, 1728) | 0;
 _memcpy($$3$i$i1450 + 8692 | 0, 1533264, 1728) | 0;
 _memcpy($$3$i$i1450 + 10420 | 0, 1534992, 1728) | 0;
 _memcpy($$3$i$i1450 + 12148 | 0, 1536720, 1728) | 0;
 _memcpy($$3$i$i1450 + 13876 | 0, 1538448, 1728) | 0;
 _memcpy($$3$i$i1450 + 15604 | 0, 1540176, 1728) | 0;
 _memcpy($$3$i$i1450 + 17332 | 0, 1541904, 1728) | 0;
 _memcpy($$3$i$i1450 + 19060 | 0, 1543632, 1728) | 0;
 _memcpy($$3$i$i1450 + 20788 | 0, 1545360, 1728) | 0;
 _memcpy($$3$i$i1450 + 22516 | 0, 1547088, 1728) | 0;
 _memcpy($$3$i$i1450 + 24244 | 0, 1548816, 1728) | 0;
 _memcpy($$3$i$i1450 + 25972 | 0, 1550544, 1728) | 0;
 _memcpy($$3$i$i1450 + 27700 | 0, 1552272, 1728) | 0;
 _memcpy($$3$i$i1450 + 29428 | 0, 1554e3, 1728) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $119);
 if ($$3$i$i1450 | 0) {
  $9774 = $$3$i$i1450 + 5 | 0;
  $9776 = (HEAP8[$9774 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9774 >> 0] = $9776;
  if (!($9776 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1450);
  HEAP32[$119 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 161;
 HEAP16[$bitmapData + 2 >> 1] = 23;
 HEAP16[$bitmapData + 4 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 32;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 17332) label = 1795; else {
  $9783 = HEAP32[918918] | 0;
  if (($9783 | 0) == (HEAP32[918916] | 0)) label = 1795; else {
   $$lcssa$i$i1462 = 3675672;
   $$lcssa8$i$i1461 = $9783;
   label = 1796;
  }
 }
 do if ((label | 0) == 1795) {
  if ((HEAP32[918925] | 0) >>> 0 >= 17332) {
   $9790 = HEAP32[918924] | 0;
   if (($9790 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1462 = 3675696;
    $$lcssa8$i$i1461 = $9790;
    label = 1796;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 17332) {
   $9795 = HEAP32[918930] | 0;
   if (($9795 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1462 = 3675720;
    $$lcssa8$i$i1461 = $9795;
    label = 1796;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 17332) {
   $9800 = HEAP32[918936] | 0;
   if (($9800 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1462 = 3675744;
    $$lcssa8$i$i1461 = $9800;
    label = 1796;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 17332) {
   $9805 = HEAP32[918942] | 0;
   if (($9805 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1462 = 3675768;
    $$lcssa8$i$i1461 = $9805;
    label = 1796;
    break;
   }
  }
  $$3$i$i1463 = __Znwj(17332) | 0;
 } while (0);
 if ((label | 0) == 1796) {
  $9788 = $$lcssa8$i$i1461 + -4 | 0;
  HEAP32[$$lcssa$i$i1462 >> 2] = $9788;
  $$3$i$i1463 = HEAP32[$9788 >> 2] | 0;
 }
 $9809 = $$3$i$i1463 + 52 | 0;
 HEAP16[$$3$i$i1463 >> 1] = 864;
 HEAP16[$$3$i$i1463 + 2 >> 1] = 10;
 HEAP8[$$3$i$i1463 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1463 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1463 + 8 >> 2] = 1728;
 HEAP32[$$3$i$i1463 + 12 >> 2] = 17280;
 HEAP32[$$3$i$i1463 + 16 >> 2] = $9809;
 HEAP32[$$3$i$i1463 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1463 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1463 + 48 >> 0] = 0;
 HEAP32[$120 >> 2] = $$3$i$i1463;
 _memcpy($9809 | 0, 1555728, 1728) | 0;
 _memcpy($$3$i$i1463 + 1780 | 0, 1557456, 1728) | 0;
 _memcpy($$3$i$i1463 + 3508 | 0, 1559184, 1728) | 0;
 _memcpy($$3$i$i1463 + 5236 | 0, 1560912, 1728) | 0;
 _memcpy($$3$i$i1463 + 6964 | 0, 1562640, 1728) | 0;
 _memcpy($$3$i$i1463 + 8692 | 0, 1564368, 1728) | 0;
 _memcpy($$3$i$i1463 + 10420 | 0, 1566096, 1728) | 0;
 _memcpy($$3$i$i1463 + 12148 | 0, 1567824, 1728) | 0;
 _memcpy($$3$i$i1463 + 13876 | 0, 1569552, 1728) | 0;
 _memcpy($$3$i$i1463 + 15604 | 0, 1571280, 1728) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $120);
 if ($$3$i$i1463 | 0) {
  $9829 = $$3$i$i1463 + 5 | 0;
  $9831 = (HEAP8[$9829 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9829 >> 0] = $9831;
  if (!($9831 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1463);
  HEAP32[$120 >> 2] = 0;
 }
 $9833 = $bitmapData + 2 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9833 >> 1] = 5;
 HEAP16[$bitmapData + 4 >> 1] = 4;
 HEAP16[$bitmapData + 6 >> 1] = 32;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 500) label = 1811; else {
  $9838 = HEAP32[918918] | 0;
  if (($9838 | 0) == (HEAP32[918916] | 0)) label = 1811; else {
   $$lcssa$i$i1475 = 3675672;
   $$lcssa8$i$i1474 = $9838;
   label = 1812;
  }
 }
 do if ((label | 0) == 1811) {
  if ((HEAP32[918925] | 0) >>> 0 >= 500) {
   $9845 = HEAP32[918924] | 0;
   if (($9845 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1475 = 3675696;
    $$lcssa8$i$i1474 = $9845;
    label = 1812;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 500) {
   $9850 = HEAP32[918930] | 0;
   if (($9850 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1475 = 3675720;
    $$lcssa8$i$i1474 = $9850;
    label = 1812;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 500) {
   $9855 = HEAP32[918936] | 0;
   if (($9855 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1475 = 3675744;
    $$lcssa8$i$i1474 = $9855;
    label = 1812;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 500) {
   $9860 = HEAP32[918942] | 0;
   if (($9860 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1475 = 3675768;
    $$lcssa8$i$i1474 = $9860;
    label = 1812;
    break;
   }
  }
  $$3$i$i1476 = __Znwj(500) | 0;
 } while (0);
 if ((label | 0) == 1812) {
  $9843 = $$lcssa8$i$i1474 + -4 | 0;
  HEAP32[$$lcssa$i$i1475 >> 2] = $9843;
  $$3$i$i1476 = HEAP32[$9843 >> 2] | 0;
 }
 $9864 = $$3$i$i1476 + 52 | 0;
 HEAP16[$$3$i$i1476 >> 1] = 8;
 HEAP16[$$3$i$i1476 + 2 >> 1] = 28;
 HEAP8[$$3$i$i1476 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1476 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1476 + 8 >> 2] = 16;
 HEAP32[$$3$i$i1476 + 12 >> 2] = 448;
 HEAP32[$$3$i$i1476 + 16 >> 2] = $9864;
 HEAP32[$$3$i$i1476 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1476 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1476 + 48 >> 0] = 0;
 HEAP32[$121 >> 2] = $$3$i$i1476;
 dest = $9864;
 src = 1573008;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 68 | 0;
 src = 1573024;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 84 | 0;
 src = 1573040;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 100 | 0;
 src = 1573056;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 116 | 0;
 src = 1573072;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 132 | 0;
 src = 1573088;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 148 | 0;
 src = 1573104;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 164 | 0;
 src = 1573120;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 180 | 0;
 src = 1573136;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 196 | 0;
 src = 1573152;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 212 | 0;
 src = 1573168;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 228 | 0;
 src = 1573184;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 244 | 0;
 src = 1573200;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 260 | 0;
 src = 1573216;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 276 | 0;
 src = 1573232;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 292 | 0;
 src = 1573248;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 308 | 0;
 src = 1573264;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 324 | 0;
 src = 1573280;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 340 | 0;
 src = 1573296;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 356 | 0;
 src = 1573312;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 372 | 0;
 src = 1573328;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 388 | 0;
 src = 1573344;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 404 | 0;
 src = 1573360;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 420 | 0;
 src = 1573376;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 436 | 0;
 src = 1573392;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 452 | 0;
 src = 1573408;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 468 | 0;
 src = 1573424;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1476 + 484 | 0;
 src = 1573440;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $121);
 if ($$3$i$i1476 | 0) {
  $9902 = $$3$i$i1476 + 5 | 0;
  $9904 = (HEAP8[$9902 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9902 >> 0] = $9904;
  if (!($9904 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1476);
  HEAP32[$121 >> 2] = 0;
 }
 $9906 = $bitmapData + 4 | 0;
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9906 >> 1] = 1023;
 HEAP16[$bitmapData + 6 >> 1] = 4;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 10292) label = 1827; else {
  $9910 = HEAP32[918918] | 0;
  if (($9910 | 0) == (HEAP32[918916] | 0)) label = 1827; else {
   $$lcssa$i$i1488 = 3675672;
   $$lcssa8$i$i1487 = $9910;
   label = 1828;
  }
 }
 do if ((label | 0) == 1827) {
  if ((HEAP32[918925] | 0) >>> 0 >= 10292) {
   $9917 = HEAP32[918924] | 0;
   if (($9917 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1488 = 3675696;
    $$lcssa8$i$i1487 = $9917;
    label = 1828;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 10292) {
   $9922 = HEAP32[918930] | 0;
   if (($9922 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1488 = 3675720;
    $$lcssa8$i$i1487 = $9922;
    label = 1828;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 10292) {
   $9927 = HEAP32[918936] | 0;
   if (($9927 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1488 = 3675744;
    $$lcssa8$i$i1487 = $9927;
    label = 1828;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 10292) {
   $9932 = HEAP32[918942] | 0;
   if (($9932 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1488 = 3675768;
    $$lcssa8$i$i1487 = $9932;
    label = 1828;
    break;
   }
  }
  $$3$i$i1489 = __Znwj(10292) | 0;
 } while (0);
 if ((label | 0) == 1828) {
  $9915 = $$lcssa8$i$i1487 + -4 | 0;
  HEAP32[$$lcssa$i$i1488 >> 2] = $9915;
  $$3$i$i1489 = HEAP32[$9915 >> 2] | 0;
 }
 $9936 = $$3$i$i1489 + 52 | 0;
 HEAP16[$$3$i$i1489 >> 1] = 1024;
 HEAP16[$$3$i$i1489 + 2 >> 1] = 5;
 HEAP8[$$3$i$i1489 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1489 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1489 + 8 >> 2] = 2048;
 HEAP32[$$3$i$i1489 + 12 >> 2] = 10240;
 HEAP32[$$3$i$i1489 + 16 >> 2] = $9936;
 HEAP32[$$3$i$i1489 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1489 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1489 + 48 >> 0] = 0;
 HEAP32[$122 >> 2] = $$3$i$i1489;
 _memcpy($9936 | 0, 1573456, 2048) | 0;
 _memcpy($$3$i$i1489 + 2100 | 0, 1575504, 2048) | 0;
 _memcpy($$3$i$i1489 + 4148 | 0, 1577552, 2048) | 0;
 _memcpy($$3$i$i1489 + 6196 | 0, 1579600, 2048) | 0;
 _memcpy($$3$i$i1489 + 8244 | 0, 1581648, 2048) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $122);
 if ($$3$i$i1489 | 0) {
  $9951 = $$3$i$i1489 + 5 | 0;
  $9953 = (HEAP8[$9951 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$9951 >> 0] = $9953;
  if (!($9953 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1489);
  HEAP32[$122 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 7;
 HEAP16[$bitmapData + 2 >> 1] = 5;
 HEAP16[$bitmapData + 4 >> 1] = 41;
 HEAP16[$bitmapData + 6 >> 1] = 32;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2068) label = 1843; else {
  $9960 = HEAP32[918918] | 0;
  if (($9960 | 0) == (HEAP32[918916] | 0)) label = 1843; else {
   $$lcssa$i$i1501 = 3675672;
   $$lcssa8$i$i1500 = $9960;
   label = 1844;
  }
 }
 do if ((label | 0) == 1843) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2068) {
   $9967 = HEAP32[918924] | 0;
   if (($9967 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1501 = 3675696;
    $$lcssa8$i$i1500 = $9967;
    label = 1844;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2068) {
   $9972 = HEAP32[918930] | 0;
   if (($9972 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1501 = 3675720;
    $$lcssa8$i$i1500 = $9972;
    label = 1844;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2068) {
   $9977 = HEAP32[918936] | 0;
   if (($9977 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1501 = 3675744;
    $$lcssa8$i$i1500 = $9977;
    label = 1844;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2068) {
   $9982 = HEAP32[918942] | 0;
   if (($9982 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1501 = 3675768;
    $$lcssa8$i$i1500 = $9982;
    label = 1844;
    break;
   }
  }
  $$3$i$i1502 = __Znwj(2068) | 0;
 } while (0);
 if ((label | 0) == 1844) {
  $9965 = $$lcssa8$i$i1500 + -4 | 0;
  HEAP32[$$lcssa$i$i1501 >> 2] = $9965;
  $$3$i$i1502 = HEAP32[$9965 >> 2] | 0;
 }
 $9986 = $$3$i$i1502 + 52 | 0;
 HEAP16[$$3$i$i1502 >> 1] = 36;
 HEAP16[$$3$i$i1502 + 2 >> 1] = 28;
 HEAP8[$$3$i$i1502 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1502 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1502 + 8 >> 2] = 72;
 HEAP32[$$3$i$i1502 + 12 >> 2] = 2016;
 HEAP32[$$3$i$i1502 + 16 >> 2] = $9986;
 HEAP32[$$3$i$i1502 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1502 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1502 + 48 >> 0] = 0;
 HEAP32[$123 >> 2] = $$3$i$i1502;
 dest = $9986;
 src = 1583696;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 124 | 0;
 src = 1583768;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 196 | 0;
 src = 1583840;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 268 | 0;
 src = 1583912;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 340 | 0;
 src = 1583984;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 412 | 0;
 src = 1584056;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 484 | 0;
 src = 1584128;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 556 | 0;
 src = 1584200;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 628 | 0;
 src = 1584272;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 700 | 0;
 src = 1584344;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 772 | 0;
 src = 1584416;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 844 | 0;
 src = 1584488;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 916 | 0;
 src = 1584560;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 988 | 0;
 src = 1584632;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1060 | 0;
 src = 1584704;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1132 | 0;
 src = 1584776;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1204 | 0;
 src = 1584848;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1276 | 0;
 src = 1584920;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1348 | 0;
 src = 1584992;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1420 | 0;
 src = 1585064;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1492 | 0;
 src = 1585136;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1564 | 0;
 src = 1585208;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1636 | 0;
 src = 1585280;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1708 | 0;
 src = 1585352;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1780 | 0;
 src = 1585424;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1852 | 0;
 src = 1585496;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1924 | 0;
 src = 1585568;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1502 + 1996 | 0;
 src = 1585640;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $123);
 if ($$3$i$i1502 | 0) {
  $10024 = $$3$i$i1502 + 5 | 0;
  $10026 = (HEAP8[$10024 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10024 >> 0] = $10026;
  if (!($10026 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1502);
  HEAP32[$123 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 220;
 HEAP16[$bitmapData + 2 >> 1] = 318;
 HEAP16[$bitmapData + 4 >> 1] = 802;
 HEAP16[$bitmapData + 6 >> 1] = 323;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 7060) label = 1859; else {
  $10033 = HEAP32[918918] | 0;
  if (($10033 | 0) == (HEAP32[918916] | 0)) label = 1859; else {
   $$lcssa$i$i1514 = 3675672;
   $$lcssa8$i$i1513 = $10033;
   label = 1860;
  }
 }
 do if ((label | 0) == 1859) {
  if ((HEAP32[918925] | 0) >>> 0 >= 7060) {
   $10040 = HEAP32[918924] | 0;
   if (($10040 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1514 = 3675696;
    $$lcssa8$i$i1513 = $10040;
    label = 1860;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 7060) {
   $10045 = HEAP32[918930] | 0;
   if (($10045 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1514 = 3675720;
    $$lcssa8$i$i1513 = $10045;
    label = 1860;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 7060) {
   $10050 = HEAP32[918936] | 0;
   if (($10050 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1514 = 3675744;
    $$lcssa8$i$i1513 = $10050;
    label = 1860;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 7060) {
   $10055 = HEAP32[918942] | 0;
   if (($10055 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1514 = 3675768;
    $$lcssa8$i$i1513 = $10055;
    label = 1860;
    break;
   }
  }
  $$3$i$i1515 = __Znwj(7060) | 0;
 } while (0);
 if ((label | 0) == 1860) {
  $10038 = $$lcssa8$i$i1513 + -4 | 0;
  HEAP32[$$lcssa$i$i1514 >> 2] = $10038;
  $$3$i$i1515 = HEAP32[$10038 >> 2] | 0;
 }
 $10059 = $$3$i$i1515 + 52 | 0;
 HEAP16[$$3$i$i1515 >> 1] = 584;
 HEAP16[$$3$i$i1515 + 2 >> 1] = 6;
 HEAP8[$$3$i$i1515 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1515 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1515 + 8 >> 2] = 1168;
 HEAP32[$$3$i$i1515 + 12 >> 2] = 7008;
 HEAP32[$$3$i$i1515 + 16 >> 2] = $10059;
 HEAP32[$$3$i$i1515 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1515 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1515 + 48 >> 0] = 0;
 HEAP32[$124 >> 2] = $$3$i$i1515;
 _memcpy($10059 | 0, 1585712, 1168) | 0;
 _memcpy($$3$i$i1515 + 1220 | 0, 1586880, 1168) | 0;
 _memcpy($$3$i$i1515 + 2388 | 0, 1588048, 1168) | 0;
 _memcpy($$3$i$i1515 + 3556 | 0, 1589216, 1168) | 0;
 _memcpy($$3$i$i1515 + 4724 | 0, 1590384, 1168) | 0;
 _memcpy($$3$i$i1515 + 5892 | 0, 1591552, 1168) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $124);
 if ($$3$i$i1515 | 0) {
  $10075 = $$3$i$i1515 + 5 | 0;
  $10077 = (HEAP8[$10075 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10075 >> 0] = $10077;
  if (!($10077 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1515);
  HEAP32[$124 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 220;
 HEAP16[$bitmapData + 2 >> 1] = 324;
 HEAP16[$bitmapData + 4 >> 1] = 802;
 HEAP16[$bitmapData + 6 >> 1] = 329;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 7060) label = 1875; else {
  $10084 = HEAP32[918918] | 0;
  if (($10084 | 0) == (HEAP32[918916] | 0)) label = 1875; else {
   $$lcssa$i$i1527 = 3675672;
   $$lcssa8$i$i1526 = $10084;
   label = 1876;
  }
 }
 do if ((label | 0) == 1875) {
  if ((HEAP32[918925] | 0) >>> 0 >= 7060) {
   $10091 = HEAP32[918924] | 0;
   if (($10091 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1527 = 3675696;
    $$lcssa8$i$i1526 = $10091;
    label = 1876;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 7060) {
   $10096 = HEAP32[918930] | 0;
   if (($10096 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1527 = 3675720;
    $$lcssa8$i$i1526 = $10096;
    label = 1876;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 7060) {
   $10101 = HEAP32[918936] | 0;
   if (($10101 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1527 = 3675744;
    $$lcssa8$i$i1526 = $10101;
    label = 1876;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 7060) {
   $10106 = HEAP32[918942] | 0;
   if (($10106 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1527 = 3675768;
    $$lcssa8$i$i1526 = $10106;
    label = 1876;
    break;
   }
  }
  $$3$i$i1528 = __Znwj(7060) | 0;
 } while (0);
 if ((label | 0) == 1876) {
  $10089 = $$lcssa8$i$i1526 + -4 | 0;
  HEAP32[$$lcssa$i$i1527 >> 2] = $10089;
  $$3$i$i1528 = HEAP32[$10089 >> 2] | 0;
 }
 $10110 = $$3$i$i1528 + 52 | 0;
 HEAP16[$$3$i$i1528 >> 1] = 584;
 HEAP16[$$3$i$i1528 + 2 >> 1] = 6;
 HEAP8[$$3$i$i1528 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1528 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1528 + 8 >> 2] = 1168;
 HEAP32[$$3$i$i1528 + 12 >> 2] = 7008;
 HEAP32[$$3$i$i1528 + 16 >> 2] = $10110;
 HEAP32[$$3$i$i1528 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1528 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1528 + 48 >> 0] = 0;
 HEAP32[$125 >> 2] = $$3$i$i1528;
 _memcpy($10110 | 0, 1592720, 1168) | 0;
 _memcpy($$3$i$i1528 + 1220 | 0, 1593888, 1168) | 0;
 _memcpy($$3$i$i1528 + 2388 | 0, 1595056, 1168) | 0;
 _memcpy($$3$i$i1528 + 3556 | 0, 1596224, 1168) | 0;
 _memcpy($$3$i$i1528 + 4724 | 0, 1597392, 1168) | 0;
 _memcpy($$3$i$i1528 + 5892 | 0, 1598560, 1168) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $125);
 if ($$3$i$i1528 | 0) {
  $10126 = $$3$i$i1528 + 5 | 0;
  $10128 = (HEAP8[$10126 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10126 >> 0] = $10128;
  if (!($10128 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1528);
  HEAP32[$125 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 220;
 HEAP16[$bitmapData + 2 >> 1] = 330;
 HEAP16[$bitmapData + 4 >> 1] = 802;
 HEAP16[$bitmapData + 6 >> 1] = 334;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 5892) label = 1891; else {
  $10135 = HEAP32[918918] | 0;
  if (($10135 | 0) == (HEAP32[918916] | 0)) label = 1891; else {
   $$lcssa$i$i1540 = 3675672;
   $$lcssa8$i$i1539 = $10135;
   label = 1892;
  }
 }
 do if ((label | 0) == 1891) {
  if ((HEAP32[918925] | 0) >>> 0 >= 5892) {
   $10142 = HEAP32[918924] | 0;
   if (($10142 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1540 = 3675696;
    $$lcssa8$i$i1539 = $10142;
    label = 1892;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 5892) {
   $10147 = HEAP32[918930] | 0;
   if (($10147 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1540 = 3675720;
    $$lcssa8$i$i1539 = $10147;
    label = 1892;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 5892) {
   $10152 = HEAP32[918936] | 0;
   if (($10152 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1540 = 3675744;
    $$lcssa8$i$i1539 = $10152;
    label = 1892;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 5892) {
   $10157 = HEAP32[918942] | 0;
   if (($10157 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1540 = 3675768;
    $$lcssa8$i$i1539 = $10157;
    label = 1892;
    break;
   }
  }
  $$3$i$i1541 = __Znwj(5892) | 0;
 } while (0);
 if ((label | 0) == 1892) {
  $10140 = $$lcssa8$i$i1539 + -4 | 0;
  HEAP32[$$lcssa$i$i1540 >> 2] = $10140;
  $$3$i$i1541 = HEAP32[$10140 >> 2] | 0;
 }
 $10161 = $$3$i$i1541 + 52 | 0;
 HEAP16[$$3$i$i1541 >> 1] = 584;
 HEAP16[$$3$i$i1541 + 2 >> 1] = 5;
 HEAP8[$$3$i$i1541 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1541 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1541 + 8 >> 2] = 1168;
 HEAP32[$$3$i$i1541 + 12 >> 2] = 5840;
 HEAP32[$$3$i$i1541 + 16 >> 2] = $10161;
 HEAP32[$$3$i$i1541 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1541 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1541 + 48 >> 0] = 0;
 HEAP32[$126 >> 2] = $$3$i$i1541;
 _memcpy($10161 | 0, 1599728, 1168) | 0;
 _memcpy($$3$i$i1541 + 1220 | 0, 1600896, 1168) | 0;
 _memcpy($$3$i$i1541 + 2388 | 0, 1602064, 1168) | 0;
 _memcpy($$3$i$i1541 + 3556 | 0, 1603232, 1168) | 0;
 _memcpy($$3$i$i1541 + 4724 | 0, 1604400, 1168) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $126);
 if ($$3$i$i1541 | 0) {
  $10176 = $$3$i$i1541 + 5 | 0;
  $10178 = (HEAP8[$10176 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10176 >> 0] = $10178;
  if (!($10178 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1541);
  HEAP32[$126 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 220;
 HEAP16[$bitmapData + 2 >> 1] = 335;
 HEAP16[$bitmapData + 4 >> 1] = 802;
 HEAP16[$bitmapData + 6 >> 1] = 337;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 3556) label = 1907; else {
  $10185 = HEAP32[918918] | 0;
  if (($10185 | 0) == (HEAP32[918916] | 0)) label = 1907; else {
   $$lcssa$i$i1553 = 3675672;
   $$lcssa8$i$i1552 = $10185;
   label = 1908;
  }
 }
 do if ((label | 0) == 1907) {
  if ((HEAP32[918925] | 0) >>> 0 >= 3556) {
   $10192 = HEAP32[918924] | 0;
   if (($10192 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1553 = 3675696;
    $$lcssa8$i$i1552 = $10192;
    label = 1908;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 3556) {
   $10197 = HEAP32[918930] | 0;
   if (($10197 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1553 = 3675720;
    $$lcssa8$i$i1552 = $10197;
    label = 1908;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 3556) {
   $10202 = HEAP32[918936] | 0;
   if (($10202 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1553 = 3675744;
    $$lcssa8$i$i1552 = $10202;
    label = 1908;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 3556) {
   $10207 = HEAP32[918942] | 0;
   if (($10207 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1553 = 3675768;
    $$lcssa8$i$i1552 = $10207;
    label = 1908;
    break;
   }
  }
  $$3$i$i1554 = __Znwj(3556) | 0;
 } while (0);
 if ((label | 0) == 1908) {
  $10190 = $$lcssa8$i$i1552 + -4 | 0;
  HEAP32[$$lcssa$i$i1553 >> 2] = $10190;
  $$3$i$i1554 = HEAP32[$10190 >> 2] | 0;
 }
 $10211 = $$3$i$i1554 + 52 | 0;
 HEAP16[$$3$i$i1554 >> 1] = 584;
 HEAP16[$$3$i$i1554 + 2 >> 1] = 3;
 HEAP8[$$3$i$i1554 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1554 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1554 + 8 >> 2] = 1168;
 HEAP32[$$3$i$i1554 + 12 >> 2] = 3504;
 HEAP32[$$3$i$i1554 + 16 >> 2] = $10211;
 HEAP32[$$3$i$i1554 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1554 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1554 + 48 >> 0] = 0;
 HEAP32[$127 >> 2] = $$3$i$i1554;
 _memcpy($10211 | 0, 1605568, 1168) | 0;
 _memcpy($$3$i$i1554 + 1220 | 0, 1606736, 1168) | 0;
 _memcpy($$3$i$i1554 + 2388 | 0, 1607904, 1168) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $127);
 if ($$3$i$i1554 | 0) {
  $10224 = $$3$i$i1554 + 5 | 0;
  $10226 = (HEAP8[$10224 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10224 >> 0] = $10226;
  if (!($10226 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1554);
  HEAP32[$127 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 220;
 HEAP16[$bitmapData + 2 >> 1] = 338;
 HEAP16[$bitmapData + 4 >> 1] = 802;
 HEAP16[$bitmapData + 6 >> 1] = 338;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1220) label = 1923; else {
  $10233 = HEAP32[918918] | 0;
  if (($10233 | 0) == (HEAP32[918916] | 0)) label = 1923; else {
   $$lcssa$i$i1566 = 3675672;
   $$lcssa8$i$i1565 = $10233;
   label = 1924;
  }
 }
 do if ((label | 0) == 1923) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1220) {
   $10240 = HEAP32[918924] | 0;
   if (($10240 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1566 = 3675696;
    $$lcssa8$i$i1565 = $10240;
    label = 1924;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1220) {
   $10245 = HEAP32[918930] | 0;
   if (($10245 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1566 = 3675720;
    $$lcssa8$i$i1565 = $10245;
    label = 1924;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1220) {
   $10250 = HEAP32[918936] | 0;
   if (($10250 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1566 = 3675744;
    $$lcssa8$i$i1565 = $10250;
    label = 1924;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1220) {
   $10255 = HEAP32[918942] | 0;
   if (($10255 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1566 = 3675768;
    $$lcssa8$i$i1565 = $10255;
    label = 1924;
    break;
   }
  }
  $$3$i$i1567 = __Znwj(1220) | 0;
 } while (0);
 if ((label | 0) == 1924) {
  $10238 = $$lcssa8$i$i1565 + -4 | 0;
  HEAP32[$$lcssa$i$i1566 >> 2] = $10238;
  $$3$i$i1567 = HEAP32[$10238 >> 2] | 0;
 }
 $10259 = $$3$i$i1567 + 52 | 0;
 HEAP16[$$3$i$i1567 >> 1] = 584;
 HEAP16[$$3$i$i1567 + 2 >> 1] = 1;
 HEAP8[$$3$i$i1567 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1567 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1567 + 8 >> 2] = 1168;
 HEAP32[$$3$i$i1567 + 12 >> 2] = 1168;
 HEAP32[$$3$i$i1567 + 16 >> 2] = $10259;
 HEAP32[$$3$i$i1567 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1567 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1567 + 48 >> 0] = 0;
 HEAP32[$128 >> 2] = $$3$i$i1567;
 _memcpy($10259 | 0, 1609072, 1168) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $128);
 if ($$3$i$i1567 | 0) {
  $10270 = $$3$i$i1567 + 5 | 0;
  $10272 = (HEAP8[$10270 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10270 >> 0] = $10272;
  if (!($10272 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1567);
  HEAP32[$128 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 220;
 HEAP16[$bitmapData + 2 >> 1] = 339;
 HEAP16[$bitmapData + 4 >> 1] = 802;
 HEAP16[$bitmapData + 6 >> 1] = 353;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 17572) label = 1939; else {
  $10279 = HEAP32[918918] | 0;
  if (($10279 | 0) == (HEAP32[918916] | 0)) label = 1939; else {
   $$lcssa$i$i1579 = 3675672;
   $$lcssa8$i$i1578 = $10279;
   label = 1940;
  }
 }
 do if ((label | 0) == 1939) {
  if ((HEAP32[918925] | 0) >>> 0 >= 17572) {
   $10286 = HEAP32[918924] | 0;
   if (($10286 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1579 = 3675696;
    $$lcssa8$i$i1578 = $10286;
    label = 1940;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 17572) {
   $10291 = HEAP32[918930] | 0;
   if (($10291 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1579 = 3675720;
    $$lcssa8$i$i1578 = $10291;
    label = 1940;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 17572) {
   $10296 = HEAP32[918936] | 0;
   if (($10296 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1579 = 3675744;
    $$lcssa8$i$i1578 = $10296;
    label = 1940;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 17572) {
   $10301 = HEAP32[918942] | 0;
   if (($10301 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1579 = 3675768;
    $$lcssa8$i$i1578 = $10301;
    label = 1940;
    break;
   }
  }
  $$3$i$i1580 = __Znwj(17572) | 0;
 } while (0);
 if ((label | 0) == 1940) {
  $10284 = $$lcssa8$i$i1578 + -4 | 0;
  HEAP32[$$lcssa$i$i1579 >> 2] = $10284;
  $$3$i$i1580 = HEAP32[$10284 >> 2] | 0;
 }
 $10305 = $$3$i$i1580 + 52 | 0;
 HEAP16[$$3$i$i1580 >> 1] = 584;
 HEAP16[$$3$i$i1580 + 2 >> 1] = 15;
 HEAP8[$$3$i$i1580 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1580 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1580 + 8 >> 2] = 1168;
 HEAP32[$$3$i$i1580 + 12 >> 2] = 17520;
 HEAP32[$$3$i$i1580 + 16 >> 2] = $10305;
 HEAP32[$$3$i$i1580 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1580 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1580 + 48 >> 0] = 0;
 HEAP32[$129 >> 2] = $$3$i$i1580;
 _memcpy($10305 | 0, 1610240, 1168) | 0;
 _memcpy($$3$i$i1580 + 1220 | 0, 1611408, 1168) | 0;
 _memcpy($$3$i$i1580 + 2388 | 0, 1612576, 1168) | 0;
 _memcpy($$3$i$i1580 + 3556 | 0, 1613744, 1168) | 0;
 _memcpy($$3$i$i1580 + 4724 | 0, 1614912, 1168) | 0;
 _memcpy($$3$i$i1580 + 5892 | 0, 1616080, 1168) | 0;
 _memcpy($$3$i$i1580 + 7060 | 0, 1617248, 1168) | 0;
 _memcpy($$3$i$i1580 + 8228 | 0, 1618416, 1168) | 0;
 _memcpy($$3$i$i1580 + 9396 | 0, 1619584, 1168) | 0;
 _memcpy($$3$i$i1580 + 10564 | 0, 1620752, 1168) | 0;
 _memcpy($$3$i$i1580 + 11732 | 0, 1621920, 1168) | 0;
 _memcpy($$3$i$i1580 + 12900 | 0, 1623088, 1168) | 0;
 _memcpy($$3$i$i1580 + 14068 | 0, 1624256, 1168) | 0;
 _memcpy($$3$i$i1580 + 15236 | 0, 1625424, 1168) | 0;
 _memcpy($$3$i$i1580 + 16404 | 0, 1626592, 1168) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $129);
 if ($$3$i$i1580 | 0) {
  $10330 = $$3$i$i1580 + 5 | 0;
  $10332 = (HEAP8[$10330 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10330 >> 0] = $10332;
  if (!($10332 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1580);
  HEAP32[$129 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 220;
 HEAP16[$bitmapData + 2 >> 1] = 324;
 HEAP16[$bitmapData + 4 >> 1] = 239;
 HEAP16[$bitmapData + 6 >> 1] = 343;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 852) label = 1955; else {
  $10339 = HEAP32[918918] | 0;
  if (($10339 | 0) == (HEAP32[918916] | 0)) label = 1955; else {
   $$lcssa$i$i1592 = 3675672;
   $$lcssa8$i$i1591 = $10339;
   label = 1956;
  }
 }
 do if ((label | 0) == 1955) {
  if ((HEAP32[918925] | 0) >>> 0 >= 852) {
   $10346 = HEAP32[918924] | 0;
   if (($10346 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1592 = 3675696;
    $$lcssa8$i$i1591 = $10346;
    label = 1956;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 852) {
   $10351 = HEAP32[918930] | 0;
   if (($10351 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1592 = 3675720;
    $$lcssa8$i$i1591 = $10351;
    label = 1956;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 852) {
   $10356 = HEAP32[918936] | 0;
   if (($10356 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1592 = 3675744;
    $$lcssa8$i$i1591 = $10356;
    label = 1956;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 852) {
   $10361 = HEAP32[918942] | 0;
   if (($10361 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1592 = 3675768;
    $$lcssa8$i$i1591 = $10361;
    label = 1956;
    break;
   }
  }
  $$3$i$i1593 = __Znwj(852) | 0;
 } while (0);
 if ((label | 0) == 1956) {
  $10344 = $$lcssa8$i$i1591 + -4 | 0;
  HEAP32[$$lcssa$i$i1592 >> 2] = $10344;
  $$3$i$i1593 = HEAP32[$10344 >> 2] | 0;
 }
 $10365 = $$3$i$i1593 + 52 | 0;
 HEAP16[$$3$i$i1593 >> 1] = 20;
 HEAP16[$$3$i$i1593 + 2 >> 1] = 20;
 HEAP8[$$3$i$i1593 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1593 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1593 + 8 >> 2] = 40;
 HEAP32[$$3$i$i1593 + 12 >> 2] = 800;
 HEAP32[$$3$i$i1593 + 16 >> 2] = $10365;
 HEAP32[$$3$i$i1593 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1593 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1593 + 48 >> 0] = 0;
 HEAP32[$130 >> 2] = $$3$i$i1593;
 dest = $10365;
 src = 1627760;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 92 | 0;
 src = 1627800;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 132 | 0;
 src = 1627840;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 172 | 0;
 src = 1627880;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 212 | 0;
 src = 1627920;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 252 | 0;
 src = 1627960;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 292 | 0;
 src = 1628e3;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 332 | 0;
 src = 1628040;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 372 | 0;
 src = 1628080;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 412 | 0;
 src = 1628120;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 452 | 0;
 src = 1628160;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 492 | 0;
 src = 1628200;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 532 | 0;
 src = 1628240;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 572 | 0;
 src = 1628280;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 612 | 0;
 src = 1628320;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 652 | 0;
 src = 1628360;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 692 | 0;
 src = 1628400;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 732 | 0;
 src = 1628440;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 772 | 0;
 src = 1628480;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1593 + 812 | 0;
 src = 1628520;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $130);
 if ($$3$i$i1593 | 0) {
  $10395 = $$3$i$i1593 + 5 | 0;
  $10397 = (HEAP8[$10395 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10395 >> 0] = $10397;
  if (!($10397 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1593);
  HEAP32[$130 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 136;
 HEAP16[$bitmapData + 2 >> 1] = 318;
 HEAP16[$bitmapData + 4 >> 1] = 887;
 HEAP16[$bitmapData + 6 >> 1] = 336;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 28628) label = 1971; else {
  $10404 = HEAP32[918918] | 0;
  if (($10404 | 0) == (HEAP32[918916] | 0)) label = 1971; else {
   $$lcssa$i$i1605 = 3675672;
   $$lcssa8$i$i1604 = $10404;
   label = 1972;
  }
 }
 do if ((label | 0) == 1971) {
  if ((HEAP32[918925] | 0) >>> 0 >= 28628) {
   $10411 = HEAP32[918924] | 0;
   if (($10411 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1605 = 3675696;
    $$lcssa8$i$i1604 = $10411;
    label = 1972;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 28628) {
   $10416 = HEAP32[918930] | 0;
   if (($10416 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1605 = 3675720;
    $$lcssa8$i$i1604 = $10416;
    label = 1972;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 28628) {
   $10421 = HEAP32[918936] | 0;
   if (($10421 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1605 = 3675744;
    $$lcssa8$i$i1604 = $10421;
    label = 1972;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 28628) {
   $10426 = HEAP32[918942] | 0;
   if (($10426 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1605 = 3675768;
    $$lcssa8$i$i1604 = $10426;
    label = 1972;
    break;
   }
  }
  $$3$i$i1606 = __Znwj(28628) | 0;
 } while (0);
 if ((label | 0) == 1972) {
  $10409 = $$lcssa8$i$i1604 + -4 | 0;
  HEAP32[$$lcssa$i$i1605 >> 2] = $10409;
  $$3$i$i1606 = HEAP32[$10409 >> 2] | 0;
 }
 $10430 = $$3$i$i1606 + 52 | 0;
 HEAP16[$$3$i$i1606 >> 1] = 752;
 HEAP16[$$3$i$i1606 + 2 >> 1] = 19;
 HEAP8[$$3$i$i1606 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1606 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1606 + 8 >> 2] = 1504;
 HEAP32[$$3$i$i1606 + 12 >> 2] = 28576;
 HEAP32[$$3$i$i1606 + 16 >> 2] = $10430;
 HEAP32[$$3$i$i1606 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1606 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1606 + 48 >> 0] = 0;
 HEAP32[$131 >> 2] = $$3$i$i1606;
 _memcpy($10430 | 0, 1628560, 1504) | 0;
 _memcpy($$3$i$i1606 + 1556 | 0, 1630064, 1504) | 0;
 _memcpy($$3$i$i1606 + 3060 | 0, 1631568, 1504) | 0;
 _memcpy($$3$i$i1606 + 4564 | 0, 1633072, 1504) | 0;
 _memcpy($$3$i$i1606 + 6068 | 0, 1634576, 1504) | 0;
 _memcpy($$3$i$i1606 + 7572 | 0, 1636080, 1504) | 0;
 _memcpy($$3$i$i1606 + 9076 | 0, 1637584, 1504) | 0;
 _memcpy($$3$i$i1606 + 10580 | 0, 1639088, 1504) | 0;
 _memcpy($$3$i$i1606 + 12084 | 0, 1640592, 1504) | 0;
 _memcpy($$3$i$i1606 + 13588 | 0, 1642096, 1504) | 0;
 _memcpy($$3$i$i1606 + 15092 | 0, 1643600, 1504) | 0;
 _memcpy($$3$i$i1606 + 16596 | 0, 1645104, 1504) | 0;
 _memcpy($$3$i$i1606 + 18100 | 0, 1646608, 1504) | 0;
 _memcpy($$3$i$i1606 + 19604 | 0, 1648112, 1504) | 0;
 _memcpy($$3$i$i1606 + 21108 | 0, 1649616, 1504) | 0;
 _memcpy($$3$i$i1606 + 22612 | 0, 1651120, 1504) | 0;
 _memcpy($$3$i$i1606 + 24116 | 0, 1652624, 1504) | 0;
 _memcpy($$3$i$i1606 + 25620 | 0, 1654128, 1504) | 0;
 _memcpy($$3$i$i1606 + 27124 | 0, 1655632, 1504) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $131);
 if ($$3$i$i1606 | 0) {
  $10459 = $$3$i$i1606 + 5 | 0;
  $10461 = (HEAP8[$10459 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10459 >> 0] = $10461;
  if (!($10461 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1606);
  HEAP32[$131 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 136;
 HEAP16[$bitmapData + 2 >> 1] = 337;
 HEAP16[$bitmapData + 4 >> 1] = 887;
 HEAP16[$bitmapData + 6 >> 1] = 350;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 21108) label = 1987; else {
  $10468 = HEAP32[918918] | 0;
  if (($10468 | 0) == (HEAP32[918916] | 0)) label = 1987; else {
   $$lcssa$i$i1618 = 3675672;
   $$lcssa8$i$i1617 = $10468;
   label = 1988;
  }
 }
 do if ((label | 0) == 1987) {
  if ((HEAP32[918925] | 0) >>> 0 >= 21108) {
   $10475 = HEAP32[918924] | 0;
   if (($10475 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1618 = 3675696;
    $$lcssa8$i$i1617 = $10475;
    label = 1988;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 21108) {
   $10480 = HEAP32[918930] | 0;
   if (($10480 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1618 = 3675720;
    $$lcssa8$i$i1617 = $10480;
    label = 1988;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 21108) {
   $10485 = HEAP32[918936] | 0;
   if (($10485 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1618 = 3675744;
    $$lcssa8$i$i1617 = $10485;
    label = 1988;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 21108) {
   $10490 = HEAP32[918942] | 0;
   if (($10490 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1618 = 3675768;
    $$lcssa8$i$i1617 = $10490;
    label = 1988;
    break;
   }
  }
  $$3$i$i1619 = __Znwj(21108) | 0;
 } while (0);
 if ((label | 0) == 1988) {
  $10473 = $$lcssa8$i$i1617 + -4 | 0;
  HEAP32[$$lcssa$i$i1618 >> 2] = $10473;
  $$3$i$i1619 = HEAP32[$10473 >> 2] | 0;
 }
 $10494 = $$3$i$i1619 + 52 | 0;
 HEAP16[$$3$i$i1619 >> 1] = 752;
 HEAP16[$$3$i$i1619 + 2 >> 1] = 14;
 HEAP8[$$3$i$i1619 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1619 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1619 + 8 >> 2] = 1504;
 HEAP32[$$3$i$i1619 + 12 >> 2] = 21056;
 HEAP32[$$3$i$i1619 + 16 >> 2] = $10494;
 HEAP32[$$3$i$i1619 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1619 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1619 + 48 >> 0] = 0;
 HEAP32[$132 >> 2] = $$3$i$i1619;
 _memcpy($10494 | 0, 1657136, 1504) | 0;
 _memcpy($$3$i$i1619 + 1556 | 0, 1658640, 1504) | 0;
 _memcpy($$3$i$i1619 + 3060 | 0, 1660144, 1504) | 0;
 _memcpy($$3$i$i1619 + 4564 | 0, 1661648, 1504) | 0;
 _memcpy($$3$i$i1619 + 6068 | 0, 1663152, 1504) | 0;
 _memcpy($$3$i$i1619 + 7572 | 0, 1664656, 1504) | 0;
 _memcpy($$3$i$i1619 + 9076 | 0, 1666160, 1504) | 0;
 _memcpy($$3$i$i1619 + 10580 | 0, 1667664, 1504) | 0;
 _memcpy($$3$i$i1619 + 12084 | 0, 1669168, 1504) | 0;
 _memcpy($$3$i$i1619 + 13588 | 0, 1670672, 1504) | 0;
 _memcpy($$3$i$i1619 + 15092 | 0, 1672176, 1504) | 0;
 _memcpy($$3$i$i1619 + 16596 | 0, 1673680, 1504) | 0;
 _memcpy($$3$i$i1619 + 18100 | 0, 1675184, 1504) | 0;
 _memcpy($$3$i$i1619 + 19604 | 0, 1676688, 1504) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $132);
 if ($$3$i$i1619 | 0) {
  $10518 = $$3$i$i1619 + 5 | 0;
  $10520 = (HEAP8[$10518 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10518 >> 0] = $10520;
  if (!($10520 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1619);
  HEAP32[$132 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 136;
 HEAP16[$bitmapData + 2 >> 1] = 351;
 HEAP16[$bitmapData + 4 >> 1] = 887;
 HEAP16[$bitmapData + 6 >> 1] = 353;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4564) label = 2003; else {
  $10527 = HEAP32[918918] | 0;
  if (($10527 | 0) == (HEAP32[918916] | 0)) label = 2003; else {
   $$lcssa$i$i1631 = 3675672;
   $$lcssa8$i$i1630 = $10527;
   label = 2004;
  }
 }
 do if ((label | 0) == 2003) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4564) {
   $10534 = HEAP32[918924] | 0;
   if (($10534 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1631 = 3675696;
    $$lcssa8$i$i1630 = $10534;
    label = 2004;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4564) {
   $10539 = HEAP32[918930] | 0;
   if (($10539 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1631 = 3675720;
    $$lcssa8$i$i1630 = $10539;
    label = 2004;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4564) {
   $10544 = HEAP32[918936] | 0;
   if (($10544 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1631 = 3675744;
    $$lcssa8$i$i1630 = $10544;
    label = 2004;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4564) {
   $10549 = HEAP32[918942] | 0;
   if (($10549 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1631 = 3675768;
    $$lcssa8$i$i1630 = $10549;
    label = 2004;
    break;
   }
  }
  $$3$i$i1632 = __Znwj(4564) | 0;
 } while (0);
 if ((label | 0) == 2004) {
  $10532 = $$lcssa8$i$i1630 + -4 | 0;
  HEAP32[$$lcssa$i$i1631 >> 2] = $10532;
  $$3$i$i1632 = HEAP32[$10532 >> 2] | 0;
 }
 $10553 = $$3$i$i1632 + 52 | 0;
 HEAP16[$$3$i$i1632 >> 1] = 752;
 HEAP16[$$3$i$i1632 + 2 >> 1] = 3;
 HEAP8[$$3$i$i1632 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1632 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1632 + 8 >> 2] = 1504;
 HEAP32[$$3$i$i1632 + 12 >> 2] = 4512;
 HEAP32[$$3$i$i1632 + 16 >> 2] = $10553;
 HEAP32[$$3$i$i1632 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1632 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1632 + 48 >> 0] = 0;
 HEAP32[$133 >> 2] = $$3$i$i1632;
 _memcpy($10553 | 0, 1678192, 1504) | 0;
 _memcpy($$3$i$i1632 + 1556 | 0, 1679696, 1504) | 0;
 _memcpy($$3$i$i1632 + 3060 | 0, 1681200, 1504) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $133);
 if ($$3$i$i1632 | 0) {
  $10566 = $$3$i$i1632 + 5 | 0;
  $10568 = (HEAP8[$10566 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10566 >> 0] = $10568;
  if (!($10568 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1632);
  HEAP32[$133 >> 2] = 0;
 }
 $10570 = $134;
 HEAP32[$10570 >> 2] = 327685;
 HEAP32[$10570 + 4 >> 2] = 1835164;
 HEAP32[$134 + 8 >> 2] = 6895;
 HEAP16[$135 >> 1] = 5;
 HEAP16[$135 + 2 >> 1] = 5;
 HEAP16[$135 + 4 >> 1] = 156;
 HEAP16[$135 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $134, $135);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 7;
 HEAP16[$bitmapData + 2 >> 1] = 5;
 HEAP16[$bitmapData + 4 >> 1] = 41;
 HEAP16[$bitmapData + 6 >> 1] = 32;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2068) label = 2019; else {
  $10583 = HEAP32[918918] | 0;
  if (($10583 | 0) == (HEAP32[918916] | 0)) label = 2019; else {
   $$lcssa$i$i1647 = 3675672;
   $$lcssa8$i$i1646 = $10583;
   label = 2020;
  }
 }
 do if ((label | 0) == 2019) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2068) {
   $10590 = HEAP32[918924] | 0;
   if (($10590 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1647 = 3675696;
    $$lcssa8$i$i1646 = $10590;
    label = 2020;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2068) {
   $10595 = HEAP32[918930] | 0;
   if (($10595 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1647 = 3675720;
    $$lcssa8$i$i1646 = $10595;
    label = 2020;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2068) {
   $10600 = HEAP32[918936] | 0;
   if (($10600 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1647 = 3675744;
    $$lcssa8$i$i1646 = $10600;
    label = 2020;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2068) {
   $10605 = HEAP32[918942] | 0;
   if (($10605 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1647 = 3675768;
    $$lcssa8$i$i1646 = $10605;
    label = 2020;
    break;
   }
  }
  $$3$i$i1648 = __Znwj(2068) | 0;
 } while (0);
 if ((label | 0) == 2020) {
  $10588 = $$lcssa8$i$i1646 + -4 | 0;
  HEAP32[$$lcssa$i$i1647 >> 2] = $10588;
  $$3$i$i1648 = HEAP32[$10588 >> 2] | 0;
 }
 $10609 = $$3$i$i1648 + 52 | 0;
 HEAP16[$$3$i$i1648 >> 1] = 36;
 HEAP16[$$3$i$i1648 + 2 >> 1] = 28;
 HEAP8[$$3$i$i1648 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1648 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1648 + 8 >> 2] = 72;
 HEAP32[$$3$i$i1648 + 12 >> 2] = 2016;
 HEAP32[$$3$i$i1648 + 16 >> 2] = $10609;
 HEAP32[$$3$i$i1648 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1648 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1648 + 48 >> 0] = 0;
 HEAP32[$136 >> 2] = $$3$i$i1648;
 dest = $10609;
 src = 1682704;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 124 | 0;
 src = 1682776;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 196 | 0;
 src = 1682848;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 268 | 0;
 src = 1682920;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 340 | 0;
 src = 1682992;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 412 | 0;
 src = 1683064;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 484 | 0;
 src = 1683136;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 556 | 0;
 src = 1683208;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 628 | 0;
 src = 1683280;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 700 | 0;
 src = 1683352;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 772 | 0;
 src = 1683424;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 844 | 0;
 src = 1683496;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 916 | 0;
 src = 1683568;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 988 | 0;
 src = 1683640;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1060 | 0;
 src = 1683712;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1132 | 0;
 src = 1683784;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1204 | 0;
 src = 1683856;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1276 | 0;
 src = 1683928;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1348 | 0;
 src = 1684e3;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1420 | 0;
 src = 1684072;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1492 | 0;
 src = 1684144;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1564 | 0;
 src = 1684216;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1636 | 0;
 src = 1684288;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1708 | 0;
 src = 1684360;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1780 | 0;
 src = 1684432;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1852 | 0;
 src = 1684504;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1924 | 0;
 src = 1684576;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1648 + 1996 | 0;
 src = 1684648;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $136);
 if ($$3$i$i1648 | 0) {
  $10647 = $$3$i$i1648 + 5 | 0;
  $10649 = (HEAP8[$10647 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10647 >> 0] = $10649;
  if (!($10649 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1648);
  HEAP32[$136 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 368;
 HEAP16[$bitmapData + 2 >> 1] = 324;
 HEAP16[$bitmapData + 4 >> 1] = 387;
 HEAP16[$bitmapData + 6 >> 1] = 343;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 852) label = 2035; else {
  $10656 = HEAP32[918918] | 0;
  if (($10656 | 0) == (HEAP32[918916] | 0)) label = 2035; else {
   $$lcssa$i$i1660 = 3675672;
   $$lcssa8$i$i1659 = $10656;
   label = 2036;
  }
 }
 do if ((label | 0) == 2035) {
  if ((HEAP32[918925] | 0) >>> 0 >= 852) {
   $10663 = HEAP32[918924] | 0;
   if (($10663 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1660 = 3675696;
    $$lcssa8$i$i1659 = $10663;
    label = 2036;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 852) {
   $10668 = HEAP32[918930] | 0;
   if (($10668 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1660 = 3675720;
    $$lcssa8$i$i1659 = $10668;
    label = 2036;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 852) {
   $10673 = HEAP32[918936] | 0;
   if (($10673 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1660 = 3675744;
    $$lcssa8$i$i1659 = $10673;
    label = 2036;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 852) {
   $10678 = HEAP32[918942] | 0;
   if (($10678 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1660 = 3675768;
    $$lcssa8$i$i1659 = $10678;
    label = 2036;
    break;
   }
  }
  $$3$i$i1661 = __Znwj(852) | 0;
 } while (0);
 if ((label | 0) == 2036) {
  $10661 = $$lcssa8$i$i1659 + -4 | 0;
  HEAP32[$$lcssa$i$i1660 >> 2] = $10661;
  $$3$i$i1661 = HEAP32[$10661 >> 2] | 0;
 }
 $10682 = $$3$i$i1661 + 52 | 0;
 HEAP16[$$3$i$i1661 >> 1] = 20;
 HEAP16[$$3$i$i1661 + 2 >> 1] = 20;
 HEAP8[$$3$i$i1661 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1661 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1661 + 8 >> 2] = 40;
 HEAP32[$$3$i$i1661 + 12 >> 2] = 800;
 HEAP32[$$3$i$i1661 + 16 >> 2] = $10682;
 HEAP32[$$3$i$i1661 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1661 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1661 + 48 >> 0] = 0;
 HEAP32[$137 >> 2] = $$3$i$i1661;
 dest = $10682;
 src = 1684720;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 92 | 0;
 src = 1684760;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 132 | 0;
 src = 1684800;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 172 | 0;
 src = 1684840;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 212 | 0;
 src = 1684880;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 252 | 0;
 src = 1684920;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 292 | 0;
 src = 1684960;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 332 | 0;
 src = 1685e3;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 372 | 0;
 src = 1685040;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 412 | 0;
 src = 1685080;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 452 | 0;
 src = 1685120;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 492 | 0;
 src = 1685160;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 532 | 0;
 src = 1685200;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 572 | 0;
 src = 1685240;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 612 | 0;
 src = 1685280;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 652 | 0;
 src = 1685320;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 692 | 0;
 src = 1685360;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 732 | 0;
 src = 1685400;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 772 | 0;
 src = 1685440;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1661 + 812 | 0;
 src = 1685480;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $137);
 if ($$3$i$i1661 | 0) {
  $10712 = $$3$i$i1661 + 5 | 0;
  $10714 = (HEAP8[$10712 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10712 >> 0] = $10714;
  if (!($10714 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1661);
  HEAP32[$137 >> 2] = 0;
 }
 $10716 = $138;
 HEAP32[$10716 >> 2] = 0;
 HEAP32[$10716 + 4 >> 2] = 50332672;
 HEAP32[$138 + 8 >> 2] = 15220;
 HEAP16[$139 >> 1] = 0;
 HEAP16[$139 + 2 >> 1] = 0;
 HEAP16[$139 + 4 >> 1] = 1024;
 HEAP16[$139 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $138, $139);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 368;
 HEAP16[$bitmapData + 2 >> 1] = 324;
 HEAP16[$bitmapData + 4 >> 1] = 387;
 HEAP16[$bitmapData + 6 >> 1] = 343;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 852) label = 2051; else {
  $10729 = HEAP32[918918] | 0;
  if (($10729 | 0) == (HEAP32[918916] | 0)) label = 2051; else {
   $$lcssa$i$i1676 = 3675672;
   $$lcssa8$i$i1675 = $10729;
   label = 2052;
  }
 }
 do if ((label | 0) == 2051) {
  if ((HEAP32[918925] | 0) >>> 0 >= 852) {
   $10736 = HEAP32[918924] | 0;
   if (($10736 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1676 = 3675696;
    $$lcssa8$i$i1675 = $10736;
    label = 2052;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 852) {
   $10741 = HEAP32[918930] | 0;
   if (($10741 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1676 = 3675720;
    $$lcssa8$i$i1675 = $10741;
    label = 2052;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 852) {
   $10746 = HEAP32[918936] | 0;
   if (($10746 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1676 = 3675744;
    $$lcssa8$i$i1675 = $10746;
    label = 2052;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 852) {
   $10751 = HEAP32[918942] | 0;
   if (($10751 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1676 = 3675768;
    $$lcssa8$i$i1675 = $10751;
    label = 2052;
    break;
   }
  }
  $$3$i$i1677 = __Znwj(852) | 0;
 } while (0);
 if ((label | 0) == 2052) {
  $10734 = $$lcssa8$i$i1675 + -4 | 0;
  HEAP32[$$lcssa$i$i1676 >> 2] = $10734;
  $$3$i$i1677 = HEAP32[$10734 >> 2] | 0;
 }
 $10755 = $$3$i$i1677 + 52 | 0;
 HEAP16[$$3$i$i1677 >> 1] = 20;
 HEAP16[$$3$i$i1677 + 2 >> 1] = 20;
 HEAP8[$$3$i$i1677 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1677 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1677 + 8 >> 2] = 40;
 HEAP32[$$3$i$i1677 + 12 >> 2] = 800;
 HEAP32[$$3$i$i1677 + 16 >> 2] = $10755;
 HEAP32[$$3$i$i1677 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1677 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1677 + 48 >> 0] = 0;
 HEAP32[$140 >> 2] = $$3$i$i1677;
 dest = $10755;
 src = 1685520;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 92 | 0;
 src = 1685560;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 132 | 0;
 src = 1685600;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 172 | 0;
 src = 1685640;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 212 | 0;
 src = 1685680;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 252 | 0;
 src = 1685720;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 292 | 0;
 src = 1685760;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 332 | 0;
 src = 1685800;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 372 | 0;
 src = 1685840;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 412 | 0;
 src = 1685880;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 452 | 0;
 src = 1685920;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 492 | 0;
 src = 1685960;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 532 | 0;
 src = 1686e3;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 572 | 0;
 src = 1686040;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 612 | 0;
 src = 1686080;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 652 | 0;
 src = 1686120;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 692 | 0;
 src = 1686160;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 732 | 0;
 src = 1686200;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 772 | 0;
 src = 1686240;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1677 + 812 | 0;
 src = 1686280;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $140);
 if ($$3$i$i1677 | 0) {
  $10785 = $$3$i$i1677 + 5 | 0;
  $10787 = (HEAP8[$10785 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$10785 >> 0] = $10787;
  if (!($10787 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1677);
  HEAP32[$140 >> 2] = 0;
 }
 $10789 = $141;
 HEAP32[$10789 >> 2] = 0;
 HEAP32[$10789 + 4 >> 2] = 50332672;
 HEAP32[$141 + 8 >> 2] = 15220;
 HEAP16[$142 >> 1] = 0;
 HEAP16[$142 + 2 >> 1] = 0;
 HEAP16[$142 + 4 >> 1] = 1024;
 HEAP16[$142 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $141, $142);
 $10797 = $143;
 HEAP32[$10797 >> 2] = 47448064;
 HEAP32[$10797 + 4 >> 2] = 66560;
 HEAP32[$143 + 8 >> 2] = 54937;
 HEAP16[$144 >> 1] = 0;
 HEAP16[$144 + 2 >> 1] = 724;
 HEAP16[$144 + 4 >> 1] = 1024;
 HEAP16[$144 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $143, $144);
 $10805 = $145;
 HEAP32[$10805 >> 2] = 47513600;
 HEAP32[$10805 + 4 >> 2] = 66560;
 HEAP32[$145 + 8 >> 2] = 65535;
 HEAP16[$146 >> 1] = 0;
 HEAP16[$146 + 2 >> 1] = 725;
 HEAP16[$146 + 4 >> 1] = 1024;
 HEAP16[$146 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $145, $146);
 $10813 = $147;
 HEAP32[$10813 >> 2] = 47579136;
 HEAP32[$10813 + 4 >> 2] = 2686977;
 HEAP32[$147 + 8 >> 2] = 54937;
 HEAP16[$148 >> 1] = 0;
 HEAP16[$148 + 2 >> 1] = 726;
 HEAP16[$148 + 4 >> 1] = 1;
 HEAP16[$148 + 6 >> 1] = 41;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $147, $148);
 $10821 = $149;
 HEAP32[$10821 >> 2] = 47579137;
 HEAP32[$10821 + 4 >> 2] = 66559;
 HEAP32[$149 + 8 >> 2] = 54937;
 HEAP16[$150 >> 1] = 1;
 HEAP16[$150 + 2 >> 1] = 726;
 HEAP16[$150 + 4 >> 1] = 1023;
 HEAP16[$150 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $149, $150);
 $10829 = $151;
 HEAP32[$10829 >> 2] = 50266112;
 HEAP32[$10829 + 4 >> 2] = 66559;
 HEAP32[$151 + 8 >> 2] = 54937;
 HEAP16[$152 >> 1] = 0;
 HEAP16[$152 + 2 >> 1] = 767;
 HEAP16[$152 + 4 >> 1] = 1023;
 HEAP16[$152 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $151, $152);
 $10837 = $153;
 HEAP32[$10837 >> 2] = 47645695;
 HEAP32[$10837 + 4 >> 2] = 2686977;
 HEAP32[$153 + 8 >> 2] = 54937;
 HEAP16[$154 >> 1] = 1023;
 HEAP16[$154 + 2 >> 1] = 727;
 HEAP16[$154 + 4 >> 1] = 1;
 HEAP16[$154 + 6 >> 1] = 41;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $153, $154);
 $10845 = $155;
 HEAP32[$10845 >> 2] = 47644673;
 HEAP32[$10845 + 4 >> 2] = 2555905;
 HEAP32[$155 + 8 >> 2] = 54937;
 HEAP16[$156 >> 1] = 1;
 HEAP16[$156 + 2 >> 1] = 727;
 HEAP16[$156 + 4 >> 1] = 1;
 HEAP16[$156 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $155, $156);
 $10853 = $157;
 HEAP32[$10853 >> 2] = 47644674;
 HEAP32[$10853 + 4 >> 2] = 66557;
 HEAP32[$157 + 8 >> 2] = 54937;
 HEAP16[$158 >> 1] = 2;
 HEAP16[$158 + 2 >> 1] = 727;
 HEAP16[$158 + 4 >> 1] = 1021;
 HEAP16[$158 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $157, $158);
 $10861 = $159;
 HEAP32[$10861 >> 2] = 50200577;
 HEAP32[$10861 + 4 >> 2] = 66557;
 HEAP32[$159 + 8 >> 2] = 54937;
 HEAP16[$160 >> 1] = 1;
 HEAP16[$160 + 2 >> 1] = 766;
 HEAP16[$160 + 4 >> 1] = 1021;
 HEAP16[$160 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $159, $160);
 $10869 = $161;
 HEAP32[$10869 >> 2] = 47711230;
 HEAP32[$10869 + 4 >> 2] = 2555905;
 HEAP32[$161 + 8 >> 2] = 54937;
 HEAP16[$162 >> 1] = 1022;
 HEAP16[$162 + 2 >> 1] = 728;
 HEAP16[$162 + 4 >> 1] = 1;
 HEAP16[$162 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $161, $162);
 $10877 = $163;
 HEAP32[$10877 >> 2] = 47710210;
 HEAP32[$10877 + 4 >> 2] = 2490451;
 HEAP32[$163 + 8 >> 2] = 54937;
 HEAP16[$164 >> 1] = 2;
 HEAP16[$164 + 2 >> 1] = 728;
 HEAP16[$164 + 4 >> 1] = 83;
 HEAP16[$164 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $163, $164);
 $10885 = $165;
 HEAP32[$10885 >> 2] = 47711229;
 HEAP32[$10885 + 4 >> 2] = 2490369;
 HEAP32[$165 + 8 >> 2] = 65535;
 HEAP16[$166 >> 1] = 1021;
 HEAP16[$166 + 2 >> 1] = 728;
 HEAP16[$166 + 4 >> 1] = 1;
 HEAP16[$166 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $165, $166);
 $10893 = $167;
 HEAP32[$10893 >> 2] = 50135974;
 HEAP32[$10893 + 4 >> 2] = 65623;
 HEAP32[$167 + 8 >> 2] = 65535;
 HEAP16[$168 >> 1] = 934;
 HEAP16[$168 + 2 >> 1] = 765;
 HEAP16[$168 + 4 >> 1] = 87;
 HEAP16[$168 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $167, $168);
 $10901 = $169;
 HEAP32[$10901 >> 2] = 47711142;
 HEAP32[$10901 + 4 >> 2] = 2424833;
 HEAP32[$169 + 8 >> 2] = 33808;
 HEAP16[$170 >> 1] = 934;
 HEAP16[$170 + 2 >> 1] = 728;
 HEAP16[$170 + 4 >> 1] = 1;
 HEAP16[$170 + 6 >> 1] = 37;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $169, $170);
 $10909 = $171;
 HEAP32[$10909 >> 2] = 47711143;
 HEAP32[$10909 + 4 >> 2] = 65622;
 HEAP32[$171 + 8 >> 2] = 33808;
 HEAP16[$172 >> 1] = 935;
 HEAP16[$172 + 2 >> 1] = 728;
 HEAP16[$172 + 4 >> 1] = 86;
 HEAP16[$172 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $171, $172);
 $10917 = $173;
 HEAP32[$10917 >> 2] = 47710210;
 HEAP32[$10917 + 4 >> 2] = 2490451;
 HEAP32[$173 + 8 >> 2] = 54937;
 HEAP16[$174 >> 1] = 2;
 HEAP16[$174 + 2 >> 1] = 728;
 HEAP16[$174 + 4 >> 1] = 83;
 HEAP16[$174 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $173, $174);
 $10925 = $175;
 HEAP32[$10925 >> 2] = 47710210;
 HEAP32[$10925 + 4 >> 2] = 65537;
 HEAP32[$175 + 8 >> 2] = 16904;
 HEAP16[$176 >> 1] = 2;
 HEAP16[$176 + 2 >> 1] = 728;
 HEAP16[$176 + 4 >> 1] = 1;
 HEAP16[$176 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $175, $176);
 $10933 = $177;
 HEAP32[$10933 >> 2] = 47710210;
 HEAP32[$10933 + 4 >> 2] = 65537;
 HEAP32[$177 + 8 >> 2] = 65535;
 HEAP16[$178 >> 1] = 2;
 HEAP16[$178 + 2 >> 1] = 728;
 HEAP16[$178 + 4 >> 1] = 1;
 HEAP16[$178 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $177, $178);
 $10941 = $179;
 HEAP32[$10941 >> 2] = 47710210;
 HEAP32[$10941 + 4 >> 2] = 65537;
 HEAP32[$179 + 8 >> 2] = 54937;
 HEAP16[$180 >> 1] = 2;
 HEAP16[$180 + 2 >> 1] = 728;
 HEAP16[$180 + 4 >> 1] = 1;
 HEAP16[$180 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $179, $180);
 $10949 = $181;
 HEAP32[$10949 >> 2] = 47710210;
 HEAP32[$10949 + 4 >> 2] = 2490451;
 HEAP32[$181 + 8 >> 2] = 54937;
 HEAP16[$182 >> 1] = 2;
 HEAP16[$182 + 2 >> 1] = 728;
 HEAP16[$182 + 4 >> 1] = 83;
 HEAP16[$182 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $181, $182);
 $10957 = $183;
 HEAP32[$10957 >> 2] = 47710210;
 HEAP32[$10957 + 4 >> 2] = 2490451;
 HEAP32[$183 + 8 >> 2] = 54937;
 HEAP16[$184 >> 1] = 2;
 HEAP16[$184 + 2 >> 1] = 728;
 HEAP16[$184 + 4 >> 1] = 83;
 HEAP16[$184 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $183, $184);
 $10965 = $185;
 HEAP32[$10965 >> 2] = 47710210;
 HEAP32[$10965 + 4 >> 2] = 65537;
 HEAP32[$185 + 8 >> 2] = 16904;
 HEAP16[$186 >> 1] = 2;
 HEAP16[$186 + 2 >> 1] = 728;
 HEAP16[$186 + 4 >> 1] = 1;
 HEAP16[$186 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $185, $186);
 $10973 = $187;
 HEAP32[$10973 >> 2] = 47710210;
 HEAP32[$10973 + 4 >> 2] = 65537;
 HEAP32[$187 + 8 >> 2] = 65535;
 HEAP16[$188 >> 1] = 2;
 HEAP16[$188 + 2 >> 1] = 728;
 HEAP16[$188 + 4 >> 1] = 1;
 HEAP16[$188 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $187, $188);
 $10981 = $189;
 HEAP32[$10981 >> 2] = 47710210;
 HEAP32[$10981 + 4 >> 2] = 65537;
 HEAP32[$189 + 8 >> 2] = 54937;
 HEAP16[$190 >> 1] = 2;
 HEAP16[$190 + 2 >> 1] = 728;
 HEAP16[$190 + 4 >> 1] = 1;
 HEAP16[$190 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $189, $190);
 $10989 = $191;
 HEAP32[$10989 >> 2] = 47710210;
 HEAP32[$10989 + 4 >> 2] = 2490451;
 HEAP32[$191 + 8 >> 2] = 54937;
 HEAP16[$192 >> 1] = 80;
 HEAP16[$192 + 2 >> 1] = 728;
 HEAP16[$192 + 4 >> 1] = 5;
 HEAP16[$192 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $191, $192);
 $10997 = $193;
 HEAP32[$10997 >> 2] = 47710210;
 HEAP32[$10997 + 4 >> 2] = 2490451;
 HEAP32[$193 + 8 >> 2] = 54937;
 HEAP16[$194 >> 1] = 80;
 HEAP16[$194 + 2 >> 1] = 728;
 HEAP16[$194 + 4 >> 1] = 5;
 HEAP16[$194 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $193, $194);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 79;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6132) label = 2067; else {
  $11010 = HEAP32[918918] | 0;
  if (($11010 | 0) == (HEAP32[918916] | 0)) label = 2067; else {
   $$lcssa$i$i1770 = 3675672;
   $$lcssa8$i$i1769 = $11010;
   label = 2068;
  }
 }
 do if ((label | 0) == 2067) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6132) {
   $11017 = HEAP32[918924] | 0;
   if (($11017 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1770 = 3675696;
    $$lcssa8$i$i1769 = $11017;
    label = 2068;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6132) {
   $11022 = HEAP32[918930] | 0;
   if (($11022 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1770 = 3675720;
    $$lcssa8$i$i1769 = $11022;
    label = 2068;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6132) {
   $11027 = HEAP32[918936] | 0;
   if (($11027 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1770 = 3675744;
    $$lcssa8$i$i1769 = $11027;
    label = 2068;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6132) {
   $11032 = HEAP32[918942] | 0;
   if (($11032 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1770 = 3675768;
    $$lcssa8$i$i1769 = $11032;
    label = 2068;
    break;
   }
  }
  $$3$i$i1771 = __Znwj(6132) | 0;
 } while (0);
 if ((label | 0) == 2068) {
  $11015 = $$lcssa8$i$i1769 + -4 | 0;
  HEAP32[$$lcssa$i$i1770 >> 2] = $11015;
  $$3$i$i1771 = HEAP32[$11015 >> 2] | 0;
 }
 $11036 = $$3$i$i1771 + 52 | 0;
 HEAP16[$$3$i$i1771 >> 1] = 80;
 HEAP16[$$3$i$i1771 + 2 >> 1] = 38;
 HEAP8[$$3$i$i1771 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1771 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1771 + 8 >> 2] = 160;
 HEAP32[$$3$i$i1771 + 12 >> 2] = 6080;
 HEAP32[$$3$i$i1771 + 16 >> 2] = $11036;
 HEAP32[$$3$i$i1771 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1771 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1771 + 48 >> 0] = 0;
 HEAP32[$195 >> 2] = $$3$i$i1771;
 _memcpy($11036 | 0, 1686320, 160) | 0;
 _memcpy($$3$i$i1771 + 212 | 0, 1686480, 160) | 0;
 _memcpy($$3$i$i1771 + 372 | 0, 1686640, 160) | 0;
 _memcpy($$3$i$i1771 + 532 | 0, 1686800, 160) | 0;
 _memcpy($$3$i$i1771 + 692 | 0, 1686960, 160) | 0;
 _memcpy($$3$i$i1771 + 852 | 0, 1687120, 160) | 0;
 _memcpy($$3$i$i1771 + 1012 | 0, 1687280, 160) | 0;
 _memcpy($$3$i$i1771 + 1172 | 0, 1687440, 160) | 0;
 _memcpy($$3$i$i1771 + 1332 | 0, 1687600, 160) | 0;
 _memcpy($$3$i$i1771 + 1492 | 0, 1687760, 160) | 0;
 _memcpy($$3$i$i1771 + 1652 | 0, 1687920, 160) | 0;
 _memcpy($$3$i$i1771 + 1812 | 0, 1688080, 160) | 0;
 _memcpy($$3$i$i1771 + 1972 | 0, 1688240, 160) | 0;
 _memcpy($$3$i$i1771 + 2132 | 0, 1688400, 160) | 0;
 _memcpy($$3$i$i1771 + 2292 | 0, 1688560, 160) | 0;
 _memcpy($$3$i$i1771 + 2452 | 0, 1688720, 160) | 0;
 _memcpy($$3$i$i1771 + 2612 | 0, 1688880, 160) | 0;
 _memcpy($$3$i$i1771 + 2772 | 0, 1689040, 160) | 0;
 _memcpy($$3$i$i1771 + 2932 | 0, 1689200, 160) | 0;
 _memcpy($$3$i$i1771 + 3092 | 0, 1689360, 160) | 0;
 _memcpy($$3$i$i1771 + 3252 | 0, 1689520, 160) | 0;
 _memcpy($$3$i$i1771 + 3412 | 0, 1689680, 160) | 0;
 _memcpy($$3$i$i1771 + 3572 | 0, 1689840, 160) | 0;
 _memcpy($$3$i$i1771 + 3732 | 0, 169e4, 160) | 0;
 _memcpy($$3$i$i1771 + 3892 | 0, 1690160, 160) | 0;
 _memcpy($$3$i$i1771 + 4052 | 0, 1690320, 160) | 0;
 _memcpy($$3$i$i1771 + 4212 | 0, 1690480, 160) | 0;
 _memcpy($$3$i$i1771 + 4372 | 0, 1690640, 160) | 0;
 _memcpy($$3$i$i1771 + 4532 | 0, 1690800, 160) | 0;
 _memcpy($$3$i$i1771 + 4692 | 0, 1690960, 160) | 0;
 _memcpy($$3$i$i1771 + 4852 | 0, 1691120, 160) | 0;
 _memcpy($$3$i$i1771 + 5012 | 0, 1691280, 160) | 0;
 _memcpy($$3$i$i1771 + 5172 | 0, 1691440, 160) | 0;
 _memcpy($$3$i$i1771 + 5332 | 0, 1691600, 160) | 0;
 _memcpy($$3$i$i1771 + 5492 | 0, 1691760, 160) | 0;
 _memcpy($$3$i$i1771 + 5652 | 0, 1691920, 160) | 0;
 _memcpy($$3$i$i1771 + 5812 | 0, 1692080, 160) | 0;
 _memcpy($$3$i$i1771 + 5972 | 0, 1692240, 160) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $195);
 if ($$3$i$i1771 | 0) {
  $11084 = $$3$i$i1771 + 5 | 0;
  $11086 = (HEAP8[$11084 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11084 >> 0] = $11086;
  if (!($11086 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1771);
  HEAP32[$195 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 935;
 HEAP16[$bitmapData + 2 >> 1] = 729;
 HEAP16[$bitmapData + 4 >> 1] = 1002;
 HEAP16[$bitmapData + 6 >> 1] = 764;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4948) label = 2083; else {
  $11093 = HEAP32[918918] | 0;
  if (($11093 | 0) == (HEAP32[918916] | 0)) label = 2083; else {
   $$lcssa$i$i1783 = 3675672;
   $$lcssa8$i$i1782 = $11093;
   label = 2084;
  }
 }
 do if ((label | 0) == 2083) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4948) {
   $11100 = HEAP32[918924] | 0;
   if (($11100 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1783 = 3675696;
    $$lcssa8$i$i1782 = $11100;
    label = 2084;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4948) {
   $11105 = HEAP32[918930] | 0;
   if (($11105 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1783 = 3675720;
    $$lcssa8$i$i1782 = $11105;
    label = 2084;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4948) {
   $11110 = HEAP32[918936] | 0;
   if (($11110 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1783 = 3675744;
    $$lcssa8$i$i1782 = $11110;
    label = 2084;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4948) {
   $11115 = HEAP32[918942] | 0;
   if (($11115 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1783 = 3675768;
    $$lcssa8$i$i1782 = $11115;
    label = 2084;
    break;
   }
  }
  $$3$i$i1784 = __Znwj(4948) | 0;
 } while (0);
 if ((label | 0) == 2084) {
  $11098 = $$lcssa8$i$i1782 + -4 | 0;
  HEAP32[$$lcssa$i$i1783 >> 2] = $11098;
  $$3$i$i1784 = HEAP32[$11098 >> 2] | 0;
 }
 $11119 = $$3$i$i1784 + 52 | 0;
 HEAP16[$$3$i$i1784 >> 1] = 68;
 HEAP16[$$3$i$i1784 + 2 >> 1] = 36;
 HEAP8[$$3$i$i1784 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1784 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1784 + 8 >> 2] = 136;
 HEAP32[$$3$i$i1784 + 12 >> 2] = 4896;
 HEAP32[$$3$i$i1784 + 16 >> 2] = $11119;
 HEAP32[$$3$i$i1784 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1784 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1784 + 48 >> 0] = 0;
 HEAP32[$196 >> 2] = $$3$i$i1784;
 _memcpy($11119 | 0, 1692400, 136) | 0;
 _memcpy($$3$i$i1784 + 188 | 0, 1692536, 136) | 0;
 _memcpy($$3$i$i1784 + 324 | 0, 1692672, 136) | 0;
 _memcpy($$3$i$i1784 + 460 | 0, 1692808, 136) | 0;
 _memcpy($$3$i$i1784 + 596 | 0, 1692944, 136) | 0;
 _memcpy($$3$i$i1784 + 732 | 0, 1693080, 136) | 0;
 _memcpy($$3$i$i1784 + 868 | 0, 1693216, 136) | 0;
 _memcpy($$3$i$i1784 + 1004 | 0, 1693352, 136) | 0;
 _memcpy($$3$i$i1784 + 1140 | 0, 1693488, 136) | 0;
 _memcpy($$3$i$i1784 + 1276 | 0, 1693624, 136) | 0;
 _memcpy($$3$i$i1784 + 1412 | 0, 1693760, 136) | 0;
 _memcpy($$3$i$i1784 + 1548 | 0, 1693896, 136) | 0;
 _memcpy($$3$i$i1784 + 1684 | 0, 1694032, 136) | 0;
 _memcpy($$3$i$i1784 + 1820 | 0, 1694168, 136) | 0;
 _memcpy($$3$i$i1784 + 1956 | 0, 1694304, 136) | 0;
 _memcpy($$3$i$i1784 + 2092 | 0, 1694440, 136) | 0;
 _memcpy($$3$i$i1784 + 2228 | 0, 1694576, 136) | 0;
 _memcpy($$3$i$i1784 + 2364 | 0, 1694712, 136) | 0;
 _memcpy($$3$i$i1784 + 2500 | 0, 1694848, 136) | 0;
 _memcpy($$3$i$i1784 + 2636 | 0, 1694984, 136) | 0;
 _memcpy($$3$i$i1784 + 2772 | 0, 1695120, 136) | 0;
 _memcpy($$3$i$i1784 + 2908 | 0, 1695256, 136) | 0;
 _memcpy($$3$i$i1784 + 3044 | 0, 1695392, 136) | 0;
 _memcpy($$3$i$i1784 + 3180 | 0, 1695528, 136) | 0;
 _memcpy($$3$i$i1784 + 3316 | 0, 1695664, 136) | 0;
 _memcpy($$3$i$i1784 + 3452 | 0, 1695800, 136) | 0;
 _memcpy($$3$i$i1784 + 3588 | 0, 1695936, 136) | 0;
 _memcpy($$3$i$i1784 + 3724 | 0, 1696072, 136) | 0;
 _memcpy($$3$i$i1784 + 3860 | 0, 1696208, 136) | 0;
 _memcpy($$3$i$i1784 + 3996 | 0, 1696344, 136) | 0;
 _memcpy($$3$i$i1784 + 4132 | 0, 1696480, 136) | 0;
 _memcpy($$3$i$i1784 + 4268 | 0, 1696616, 136) | 0;
 _memcpy($$3$i$i1784 + 4404 | 0, 1696752, 136) | 0;
 _memcpy($$3$i$i1784 + 4540 | 0, 1696888, 136) | 0;
 _memcpy($$3$i$i1784 + 4676 | 0, 1697024, 136) | 0;
 _memcpy($$3$i$i1784 + 4812 | 0, 1697160, 136) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $196);
 if ($$3$i$i1784 | 0) {
  $11165 = $$3$i$i1784 + 5 | 0;
  $11167 = (HEAP8[$11165 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11165 >> 0] = $11167;
  if (!($11167 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1784);
  HEAP32[$196 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 85;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 933;
 HEAP16[$bitmapData + 6 >> 1] = 745;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30724) label = 2099; else {
  $11174 = HEAP32[918918] | 0;
  if (($11174 | 0) == (HEAP32[918916] | 0)) label = 2099; else {
   $$lcssa$i$i1796 = 3675672;
   $$lcssa8$i$i1795 = $11174;
   label = 2100;
  }
 }
 do if ((label | 0) == 2099) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30724) {
   $11181 = HEAP32[918924] | 0;
   if (($11181 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1796 = 3675696;
    $$lcssa8$i$i1795 = $11181;
    label = 2100;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30724) {
   $11186 = HEAP32[918930] | 0;
   if (($11186 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1796 = 3675720;
    $$lcssa8$i$i1795 = $11186;
    label = 2100;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30724) {
   $11191 = HEAP32[918936] | 0;
   if (($11191 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1796 = 3675744;
    $$lcssa8$i$i1795 = $11191;
    label = 2100;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30724) {
   $11196 = HEAP32[918942] | 0;
   if (($11196 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1796 = 3675768;
    $$lcssa8$i$i1795 = $11196;
    label = 2100;
    break;
   }
  }
  $$3$i$i1797 = __Znwj(30724) | 0;
 } while (0);
 if ((label | 0) == 2100) {
  $11179 = $$lcssa8$i$i1795 + -4 | 0;
  HEAP32[$$lcssa$i$i1796 >> 2] = $11179;
  $$3$i$i1797 = HEAP32[$11179 >> 2] | 0;
 }
 $11200 = $$3$i$i1797 + 52 | 0;
 HEAP16[$$3$i$i1797 >> 1] = 852;
 HEAP16[$$3$i$i1797 + 2 >> 1] = 18;
 HEAP8[$$3$i$i1797 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1797 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1797 + 8 >> 2] = 1704;
 HEAP32[$$3$i$i1797 + 12 >> 2] = 30672;
 HEAP32[$$3$i$i1797 + 16 >> 2] = $11200;
 HEAP32[$$3$i$i1797 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1797 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1797 + 48 >> 0] = 0;
 HEAP32[$197 >> 2] = $$3$i$i1797;
 _memcpy($11200 | 0, 1697296, 1704) | 0;
 _memcpy($$3$i$i1797 + 1756 | 0, 1699e3, 1704) | 0;
 _memcpy($$3$i$i1797 + 3460 | 0, 1700704, 1704) | 0;
 _memcpy($$3$i$i1797 + 5164 | 0, 1702408, 1704) | 0;
 _memcpy($$3$i$i1797 + 6868 | 0, 1704112, 1704) | 0;
 _memcpy($$3$i$i1797 + 8572 | 0, 1705816, 1704) | 0;
 _memcpy($$3$i$i1797 + 10276 | 0, 1707520, 1704) | 0;
 _memcpy($$3$i$i1797 + 11980 | 0, 1709224, 1704) | 0;
 _memcpy($$3$i$i1797 + 13684 | 0, 1710928, 1704) | 0;
 _memcpy($$3$i$i1797 + 15388 | 0, 1712632, 1704) | 0;
 _memcpy($$3$i$i1797 + 17092 | 0, 1714336, 1704) | 0;
 _memcpy($$3$i$i1797 + 18796 | 0, 1716040, 1704) | 0;
 _memcpy($$3$i$i1797 + 20500 | 0, 1717744, 1704) | 0;
 _memcpy($$3$i$i1797 + 22204 | 0, 1719448, 1704) | 0;
 _memcpy($$3$i$i1797 + 23908 | 0, 1721152, 1704) | 0;
 _memcpy($$3$i$i1797 + 25612 | 0, 1722856, 1704) | 0;
 _memcpy($$3$i$i1797 + 27316 | 0, 1724560, 1704) | 0;
 _memcpy($$3$i$i1797 + 29020 | 0, 1726264, 1704) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $197);
 if ($$3$i$i1797 | 0) {
  $11228 = $$3$i$i1797 + 5 | 0;
  $11230 = (HEAP8[$11228 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11228 >> 0] = $11230;
  if (!($11230 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1797);
  HEAP32[$197 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 85;
 HEAP16[$bitmapData + 2 >> 1] = 746;
 HEAP16[$bitmapData + 4 >> 1] = 933;
 HEAP16[$bitmapData + 6 >> 1] = 753;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 13684) label = 2115; else {
  $11237 = HEAP32[918918] | 0;
  if (($11237 | 0) == (HEAP32[918916] | 0)) label = 2115; else {
   $$lcssa$i$i1809 = 3675672;
   $$lcssa8$i$i1808 = $11237;
   label = 2116;
  }
 }
 do if ((label | 0) == 2115) {
  if ((HEAP32[918925] | 0) >>> 0 >= 13684) {
   $11244 = HEAP32[918924] | 0;
   if (($11244 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1809 = 3675696;
    $$lcssa8$i$i1808 = $11244;
    label = 2116;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 13684) {
   $11249 = HEAP32[918930] | 0;
   if (($11249 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1809 = 3675720;
    $$lcssa8$i$i1808 = $11249;
    label = 2116;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 13684) {
   $11254 = HEAP32[918936] | 0;
   if (($11254 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1809 = 3675744;
    $$lcssa8$i$i1808 = $11254;
    label = 2116;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 13684) {
   $11259 = HEAP32[918942] | 0;
   if (($11259 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1809 = 3675768;
    $$lcssa8$i$i1808 = $11259;
    label = 2116;
    break;
   }
  }
  $$3$i$i1810 = __Znwj(13684) | 0;
 } while (0);
 if ((label | 0) == 2116) {
  $11242 = $$lcssa8$i$i1808 + -4 | 0;
  HEAP32[$$lcssa$i$i1809 >> 2] = $11242;
  $$3$i$i1810 = HEAP32[$11242 >> 2] | 0;
 }
 $11263 = $$3$i$i1810 + 52 | 0;
 HEAP16[$$3$i$i1810 >> 1] = 852;
 HEAP16[$$3$i$i1810 + 2 >> 1] = 8;
 HEAP8[$$3$i$i1810 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1810 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1810 + 8 >> 2] = 1704;
 HEAP32[$$3$i$i1810 + 12 >> 2] = 13632;
 HEAP32[$$3$i$i1810 + 16 >> 2] = $11263;
 HEAP32[$$3$i$i1810 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1810 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1810 + 48 >> 0] = 0;
 HEAP32[$198 >> 2] = $$3$i$i1810;
 _memcpy($11263 | 0, 1727968, 1704) | 0;
 _memcpy($$3$i$i1810 + 1756 | 0, 1729672, 1704) | 0;
 _memcpy($$3$i$i1810 + 3460 | 0, 1731376, 1704) | 0;
 _memcpy($$3$i$i1810 + 5164 | 0, 1733080, 1704) | 0;
 _memcpy($$3$i$i1810 + 6868 | 0, 1734784, 1704) | 0;
 _memcpy($$3$i$i1810 + 8572 | 0, 1736488, 1704) | 0;
 _memcpy($$3$i$i1810 + 10276 | 0, 1738192, 1704) | 0;
 _memcpy($$3$i$i1810 + 11980 | 0, 1739896, 1704) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $198);
 if ($$3$i$i1810 | 0) {
  $11281 = $$3$i$i1810 + 5 | 0;
  $11283 = (HEAP8[$11281 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11281 >> 0] = $11283;
  if (!($11283 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1810);
  HEAP32[$198 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 85;
 HEAP16[$bitmapData + 2 >> 1] = 754;
 HEAP16[$bitmapData + 4 >> 1] = 933;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 20500) label = 2131; else {
  $11290 = HEAP32[918918] | 0;
  if (($11290 | 0) == (HEAP32[918916] | 0)) label = 2131; else {
   $$lcssa$i$i1822 = 3675672;
   $$lcssa8$i$i1821 = $11290;
   label = 2132;
  }
 }
 do if ((label | 0) == 2131) {
  if ((HEAP32[918925] | 0) >>> 0 >= 20500) {
   $11297 = HEAP32[918924] | 0;
   if (($11297 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1822 = 3675696;
    $$lcssa8$i$i1821 = $11297;
    label = 2132;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 20500) {
   $11302 = HEAP32[918930] | 0;
   if (($11302 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1822 = 3675720;
    $$lcssa8$i$i1821 = $11302;
    label = 2132;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 20500) {
   $11307 = HEAP32[918936] | 0;
   if (($11307 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1822 = 3675744;
    $$lcssa8$i$i1821 = $11307;
    label = 2132;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 20500) {
   $11312 = HEAP32[918942] | 0;
   if (($11312 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1822 = 3675768;
    $$lcssa8$i$i1821 = $11312;
    label = 2132;
    break;
   }
  }
  $$3$i$i1823 = __Znwj(20500) | 0;
 } while (0);
 if ((label | 0) == 2132) {
  $11295 = $$lcssa8$i$i1821 + -4 | 0;
  HEAP32[$$lcssa$i$i1822 >> 2] = $11295;
  $$3$i$i1823 = HEAP32[$11295 >> 2] | 0;
 }
 $11316 = $$3$i$i1823 + 52 | 0;
 HEAP16[$$3$i$i1823 >> 1] = 852;
 HEAP16[$$3$i$i1823 + 2 >> 1] = 12;
 HEAP8[$$3$i$i1823 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1823 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1823 + 8 >> 2] = 1704;
 HEAP32[$$3$i$i1823 + 12 >> 2] = 20448;
 HEAP32[$$3$i$i1823 + 16 >> 2] = $11316;
 HEAP32[$$3$i$i1823 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1823 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1823 + 48 >> 0] = 0;
 HEAP32[$199 >> 2] = $$3$i$i1823;
 _memcpy($11316 | 0, 1741600, 1704) | 0;
 _memcpy($$3$i$i1823 + 1756 | 0, 1743304, 1704) | 0;
 _memcpy($$3$i$i1823 + 3460 | 0, 1745008, 1704) | 0;
 _memcpy($$3$i$i1823 + 5164 | 0, 1746712, 1704) | 0;
 _memcpy($$3$i$i1823 + 6868 | 0, 1748416, 1704) | 0;
 _memcpy($$3$i$i1823 + 8572 | 0, 1750120, 1704) | 0;
 _memcpy($$3$i$i1823 + 10276 | 0, 1751824, 1704) | 0;
 _memcpy($$3$i$i1823 + 11980 | 0, 1753528, 1704) | 0;
 _memcpy($$3$i$i1823 + 13684 | 0, 1755232, 1704) | 0;
 _memcpy($$3$i$i1823 + 15388 | 0, 1756936, 1704) | 0;
 _memcpy($$3$i$i1823 + 17092 | 0, 1758640, 1704) | 0;
 _memcpy($$3$i$i1823 + 18796 | 0, 1760344, 1704) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $199);
 if ($$3$i$i1823 | 0) {
  $11338 = $$3$i$i1823 + 5 | 0;
  $11340 = (HEAP8[$11338 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11338 >> 0] = $11340;
  if (!($11340 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1823);
  HEAP32[$199 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 1003;
 HEAP16[$bitmapData + 2 >> 1] = 729;
 HEAP16[$bitmapData + 4 >> 1] = 1020;
 HEAP16[$bitmapData + 6 >> 1] = 764;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1492) label = 2147; else {
  $11347 = HEAP32[918918] | 0;
  if (($11347 | 0) == (HEAP32[918916] | 0)) label = 2147; else {
   $$lcssa$i$i1835 = 3675672;
   $$lcssa8$i$i1834 = $11347;
   label = 2148;
  }
 }
 do if ((label | 0) == 2147) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1492) {
   $11354 = HEAP32[918924] | 0;
   if (($11354 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1835 = 3675696;
    $$lcssa8$i$i1834 = $11354;
    label = 2148;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1492) {
   $11359 = HEAP32[918930] | 0;
   if (($11359 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1835 = 3675720;
    $$lcssa8$i$i1834 = $11359;
    label = 2148;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1492) {
   $11364 = HEAP32[918936] | 0;
   if (($11364 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1835 = 3675744;
    $$lcssa8$i$i1834 = $11364;
    label = 2148;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1492) {
   $11369 = HEAP32[918942] | 0;
   if (($11369 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1835 = 3675768;
    $$lcssa8$i$i1834 = $11369;
    label = 2148;
    break;
   }
  }
  $$3$i$i1836 = __Znwj(1492) | 0;
 } while (0);
 if ((label | 0) == 2148) {
  $11352 = $$lcssa8$i$i1834 + -4 | 0;
  HEAP32[$$lcssa$i$i1835 >> 2] = $11352;
  $$3$i$i1836 = HEAP32[$11352 >> 2] | 0;
 }
 $11373 = $$3$i$i1836 + 52 | 0;
 HEAP16[$$3$i$i1836 >> 1] = 20;
 HEAP16[$$3$i$i1836 + 2 >> 1] = 36;
 HEAP8[$$3$i$i1836 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1836 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1836 + 8 >> 2] = 40;
 HEAP32[$$3$i$i1836 + 12 >> 2] = 1440;
 HEAP32[$$3$i$i1836 + 16 >> 2] = $11373;
 HEAP32[$$3$i$i1836 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1836 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1836 + 48 >> 0] = 0;
 HEAP32[$200 >> 2] = $$3$i$i1836;
 dest = $11373;
 src = 1762048;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 92 | 0;
 src = 1762088;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 132 | 0;
 src = 1762128;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 172 | 0;
 src = 1762168;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 212 | 0;
 src = 1762208;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 252 | 0;
 src = 1762248;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 292 | 0;
 src = 1762288;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 332 | 0;
 src = 1762328;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 372 | 0;
 src = 1762368;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 412 | 0;
 src = 1762408;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 452 | 0;
 src = 1762448;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 492 | 0;
 src = 1762488;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 532 | 0;
 src = 1762528;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 572 | 0;
 src = 1762568;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 612 | 0;
 src = 1762608;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 652 | 0;
 src = 1762648;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 692 | 0;
 src = 1762688;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 732 | 0;
 src = 1762728;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 772 | 0;
 src = 1762768;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 812 | 0;
 src = 1762808;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 852 | 0;
 src = 1762848;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 892 | 0;
 src = 1762888;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 932 | 0;
 src = 1762928;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 972 | 0;
 src = 1762968;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1012 | 0;
 src = 1763008;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1052 | 0;
 src = 1763048;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1092 | 0;
 src = 1763088;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1132 | 0;
 src = 1763128;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1172 | 0;
 src = 1763168;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1212 | 0;
 src = 1763208;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1252 | 0;
 src = 1763248;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1292 | 0;
 src = 1763288;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1332 | 0;
 src = 1763328;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1372 | 0;
 src = 1763368;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1412 | 0;
 src = 1763408;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i1836 + 1452 | 0;
 src = 1763448;
 stop = dest + 40 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $200);
 if ($$3$i$i1836 | 0) {
  $11419 = $$3$i$i1836 + 5 | 0;
  $11421 = (HEAP8[$11419 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11419 >> 0] = $11421;
  if (!($11421 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1836);
  HEAP32[$200 >> 2] = 0;
 }
 $11423 = $201;
 HEAP32[$11423 >> 2] = 0;
 HEAP32[$11423 + 4 >> 2] = 47449088;
 HEAP32[$201 + 8 >> 2] = 15220;
 HEAP16[$202 >> 1] = 0;
 HEAP16[$202 + 2 >> 1] = 0;
 HEAP16[$202 + 4 >> 1] = 1024;
 HEAP16[$202 + 6 >> 1] = 724;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $201, $202);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 79;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6132) label = 2163; else {
  $11436 = HEAP32[918918] | 0;
  if (($11436 | 0) == (HEAP32[918916] | 0)) label = 2163; else {
   $$lcssa$i$i1851 = 3675672;
   $$lcssa8$i$i1850 = $11436;
   label = 2164;
  }
 }
 do if ((label | 0) == 2163) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6132) {
   $11443 = HEAP32[918924] | 0;
   if (($11443 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1851 = 3675696;
    $$lcssa8$i$i1850 = $11443;
    label = 2164;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6132) {
   $11448 = HEAP32[918930] | 0;
   if (($11448 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1851 = 3675720;
    $$lcssa8$i$i1850 = $11448;
    label = 2164;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6132) {
   $11453 = HEAP32[918936] | 0;
   if (($11453 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1851 = 3675744;
    $$lcssa8$i$i1850 = $11453;
    label = 2164;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6132) {
   $11458 = HEAP32[918942] | 0;
   if (($11458 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1851 = 3675768;
    $$lcssa8$i$i1850 = $11458;
    label = 2164;
    break;
   }
  }
  $$3$i$i1852 = __Znwj(6132) | 0;
 } while (0);
 if ((label | 0) == 2164) {
  $11441 = $$lcssa8$i$i1850 + -4 | 0;
  HEAP32[$$lcssa$i$i1851 >> 2] = $11441;
  $$3$i$i1852 = HEAP32[$11441 >> 2] | 0;
 }
 $11462 = $$3$i$i1852 + 52 | 0;
 HEAP16[$$3$i$i1852 >> 1] = 80;
 HEAP16[$$3$i$i1852 + 2 >> 1] = 38;
 HEAP8[$$3$i$i1852 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1852 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1852 + 8 >> 2] = 160;
 HEAP32[$$3$i$i1852 + 12 >> 2] = 6080;
 HEAP32[$$3$i$i1852 + 16 >> 2] = $11462;
 HEAP32[$$3$i$i1852 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1852 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1852 + 48 >> 0] = 0;
 HEAP32[$203 >> 2] = $$3$i$i1852;
 _memcpy($11462 | 0, 1763488, 160) | 0;
 _memcpy($$3$i$i1852 + 212 | 0, 1763648, 160) | 0;
 _memcpy($$3$i$i1852 + 372 | 0, 1763808, 160) | 0;
 _memcpy($$3$i$i1852 + 532 | 0, 1763968, 160) | 0;
 _memcpy($$3$i$i1852 + 692 | 0, 1764128, 160) | 0;
 _memcpy($$3$i$i1852 + 852 | 0, 1764288, 160) | 0;
 _memcpy($$3$i$i1852 + 1012 | 0, 1764448, 160) | 0;
 _memcpy($$3$i$i1852 + 1172 | 0, 1764608, 160) | 0;
 _memcpy($$3$i$i1852 + 1332 | 0, 1764768, 160) | 0;
 _memcpy($$3$i$i1852 + 1492 | 0, 1764928, 160) | 0;
 _memcpy($$3$i$i1852 + 1652 | 0, 1765088, 160) | 0;
 _memcpy($$3$i$i1852 + 1812 | 0, 1765248, 160) | 0;
 _memcpy($$3$i$i1852 + 1972 | 0, 1765408, 160) | 0;
 _memcpy($$3$i$i1852 + 2132 | 0, 1765568, 160) | 0;
 _memcpy($$3$i$i1852 + 2292 | 0, 1765728, 160) | 0;
 _memcpy($$3$i$i1852 + 2452 | 0, 1765888, 160) | 0;
 _memcpy($$3$i$i1852 + 2612 | 0, 1766048, 160) | 0;
 _memcpy($$3$i$i1852 + 2772 | 0, 1766208, 160) | 0;
 _memcpy($$3$i$i1852 + 2932 | 0, 1766368, 160) | 0;
 _memcpy($$3$i$i1852 + 3092 | 0, 1766528, 160) | 0;
 _memcpy($$3$i$i1852 + 3252 | 0, 1766688, 160) | 0;
 _memcpy($$3$i$i1852 + 3412 | 0, 1766848, 160) | 0;
 _memcpy($$3$i$i1852 + 3572 | 0, 1767008, 160) | 0;
 _memcpy($$3$i$i1852 + 3732 | 0, 1767168, 160) | 0;
 _memcpy($$3$i$i1852 + 3892 | 0, 1767328, 160) | 0;
 _memcpy($$3$i$i1852 + 4052 | 0, 1767488, 160) | 0;
 _memcpy($$3$i$i1852 + 4212 | 0, 1767648, 160) | 0;
 _memcpy($$3$i$i1852 + 4372 | 0, 1767808, 160) | 0;
 _memcpy($$3$i$i1852 + 4532 | 0, 1767968, 160) | 0;
 _memcpy($$3$i$i1852 + 4692 | 0, 1768128, 160) | 0;
 _memcpy($$3$i$i1852 + 4852 | 0, 1768288, 160) | 0;
 _memcpy($$3$i$i1852 + 5012 | 0, 1768448, 160) | 0;
 _memcpy($$3$i$i1852 + 5172 | 0, 1768608, 160) | 0;
 _memcpy($$3$i$i1852 + 5332 | 0, 1768768, 160) | 0;
 _memcpy($$3$i$i1852 + 5492 | 0, 1768928, 160) | 0;
 _memcpy($$3$i$i1852 + 5652 | 0, 1769088, 160) | 0;
 _memcpy($$3$i$i1852 + 5812 | 0, 1769248, 160) | 0;
 _memcpy($$3$i$i1852 + 5972 | 0, 1769408, 160) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $203);
 if ($$3$i$i1852 | 0) {
  $11510 = $$3$i$i1852 + 5 | 0;
  $11512 = (HEAP8[$11510 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11510 >> 0] = $11512;
  if (!($11512 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1852);
  HEAP32[$203 >> 2] = 0;
 }
 $11514 = $204;
 HEAP32[$11514 >> 2] = 47711229;
 HEAP32[$11514 + 4 >> 2] = 2490369;
 HEAP32[$204 + 8 >> 2] = 65535;
 HEAP16[$205 >> 1] = 1021;
 HEAP16[$205 + 2 >> 1] = 728;
 HEAP16[$205 + 4 >> 1] = 1;
 HEAP16[$205 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $204, $205);
 $11522 = $206;
 HEAP32[$11522 >> 2] = 50135958;
 HEAP32[$11522 + 4 >> 2] = 65639;
 HEAP32[$206 + 8 >> 2] = 65535;
 HEAP16[$207 >> 1] = 918;
 HEAP16[$207 + 2 >> 1] = 765;
 HEAP16[$207 + 4 >> 1] = 103;
 HEAP16[$207 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $206, $207);
 $11530 = $208;
 HEAP32[$11530 >> 2] = 47711126;
 HEAP32[$11530 + 4 >> 2] = 2424833;
 HEAP32[$208 + 8 >> 2] = 33808;
 HEAP16[$209 >> 1] = 918;
 HEAP16[$209 + 2 >> 1] = 728;
 HEAP16[$209 + 4 >> 1] = 1;
 HEAP16[$209 + 6 >> 1] = 37;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $208, $209);
 $11538 = $210;
 HEAP32[$11538 >> 2] = 47711127;
 HEAP32[$11538 + 4 >> 2] = 65638;
 HEAP32[$210 + 8 >> 2] = 33808;
 HEAP16[$211 >> 1] = 919;
 HEAP16[$211 + 2 >> 1] = 728;
 HEAP16[$211 + 4 >> 1] = 102;
 HEAP16[$211 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $210, $211);
 $11546 = $212;
 HEAP32[$11546 >> 2] = 47776749;
 HEAP32[$11546 + 4 >> 2] = 2359312;
 HEAP32[$212 + 8 >> 2] = 54937;
 HEAP16[$213 >> 1] = 1005;
 HEAP16[$213 + 2 >> 1] = 729;
 HEAP16[$213 + 4 >> 1] = 16;
 HEAP16[$213 + 6 >> 1] = 36;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $212, $213);
 $11554 = $214;
 HEAP32[$11554 >> 2] = 47710210;
 HEAP32[$11554 + 4 >> 2] = 2490451;
 HEAP32[$214 + 8 >> 2] = 54937;
 HEAP16[$215 >> 1] = 80;
 HEAP16[$215 + 2 >> 1] = 728;
 HEAP16[$215 + 4 >> 1] = 5;
 HEAP16[$215 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $214, $215);
 $11562 = $216;
 HEAP32[$11562 >> 2] = 47710210;
 HEAP32[$11562 + 4 >> 2] = 2490451;
 HEAP32[$216 + 8 >> 2] = 54937;
 HEAP16[$217 >> 1] = 80;
 HEAP16[$217 + 2 >> 1] = 728;
 HEAP16[$217 + 4 >> 1] = 5;
 HEAP16[$217 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $216, $217);
 $11570 = $218;
 HEAP32[$11570 >> 2] = 47776663;
 HEAP32[$11570 + 4 >> 2] = 2359312;
 HEAP32[$218 + 8 >> 2] = 54937;
 HEAP16[$219 >> 1] = 919;
 HEAP16[$219 + 2 >> 1] = 729;
 HEAP16[$219 + 4 >> 1] = 16;
 HEAP16[$219 + 6 >> 1] = 36;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $218, $219);
 $11578 = $220;
 HEAP32[$11578 >> 2] = 48694173;
 HEAP32[$11578 + 4 >> 2] = 131073;
 HEAP32[$220 + 8 >> 2] = 0;
 HEAP16[$221 >> 1] = 925;
 HEAP16[$221 + 2 >> 1] = 743;
 HEAP16[$221 + 4 >> 1] = 1;
 HEAP16[$221 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $220, $221);
 $11586 = $222;
 HEAP32[$11586 >> 2] = 48956317;
 HEAP32[$11586 + 4 >> 2] = 131073;
 HEAP32[$222 + 8 >> 2] = 0;
 HEAP16[$223 >> 1] = 925;
 HEAP16[$223 + 2 >> 1] = 747;
 HEAP16[$223 + 4 >> 1] = 1;
 HEAP16[$223 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $222, $223);
 $11594 = $224;
 HEAP32[$11594 >> 2] = 48628638;
 HEAP32[$11594 + 4 >> 2] = 131073;
 HEAP32[$224 + 8 >> 2] = 0;
 HEAP16[$225 >> 1] = 926;
 HEAP16[$225 + 2 >> 1] = 742;
 HEAP16[$225 + 4 >> 1] = 1;
 HEAP16[$225 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $224, $225);
 $11602 = $226;
 HEAP32[$11602 >> 2] = 48890782;
 HEAP32[$11602 + 4 >> 2] = 131073;
 HEAP32[$226 + 8 >> 2] = 0;
 HEAP16[$227 >> 1] = 926;
 HEAP16[$227 + 2 >> 1] = 746;
 HEAP16[$227 + 4 >> 1] = 1;
 HEAP16[$227 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $226, $227);
 $11610 = $228;
 HEAP32[$11610 >> 2] = 48563103;
 HEAP32[$11610 + 4 >> 2] = 131073;
 HEAP32[$228 + 8 >> 2] = 0;
 HEAP16[$229 >> 1] = 927;
 HEAP16[$229 + 2 >> 1] = 741;
 HEAP16[$229 + 4 >> 1] = 1;
 HEAP16[$229 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $228, $229);
 $11618 = $230;
 HEAP32[$11618 >> 2] = 48825247;
 HEAP32[$11618 + 4 >> 2] = 131073;
 HEAP32[$230 + 8 >> 2] = 0;
 HEAP16[$231 >> 1] = 927;
 HEAP16[$231 + 2 >> 1] = 745;
 HEAP16[$231 + 4 >> 1] = 1;
 HEAP16[$231 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $230, $231);
 $11626 = $232;
 HEAP32[$11626 >> 2] = 48628640;
 HEAP32[$11626 + 4 >> 2] = 131073;
 HEAP32[$232 + 8 >> 2] = 0;
 HEAP16[$233 >> 1] = 928;
 HEAP16[$233 + 2 >> 1] = 742;
 HEAP16[$233 + 4 >> 1] = 1;
 HEAP16[$233 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $232, $233);
 $11634 = $234;
 HEAP32[$11634 >> 2] = 48890784;
 HEAP32[$11634 + 4 >> 2] = 131073;
 HEAP32[$234 + 8 >> 2] = 0;
 HEAP16[$235 >> 1] = 928;
 HEAP16[$235 + 2 >> 1] = 746;
 HEAP16[$235 + 4 >> 1] = 1;
 HEAP16[$235 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $234, $235);
 $11642 = $236;
 HEAP32[$11642 >> 2] = 48694177;
 HEAP32[$11642 + 4 >> 2] = 131073;
 HEAP32[$236 + 8 >> 2] = 0;
 HEAP16[$237 >> 1] = 929;
 HEAP16[$237 + 2 >> 1] = 743;
 HEAP16[$237 + 4 >> 1] = 1;
 HEAP16[$237 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $236, $237);
 $11650 = $238;
 HEAP32[$11650 >> 2] = 48956321;
 HEAP32[$11650 + 4 >> 2] = 131073;
 HEAP32[$238 + 8 >> 2] = 0;
 HEAP16[$239 >> 1] = 929;
 HEAP16[$239 + 2 >> 1] = 747;
 HEAP16[$239 + 4 >> 1] = 1;
 HEAP16[$239 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $238, $239);
 $11658 = $240;
 HEAP32[$11658 >> 2] = 47710210;
 HEAP32[$11658 + 4 >> 2] = 2490451;
 HEAP32[$240 + 8 >> 2] = 54937;
 HEAP16[$241 >> 1] = 80;
 HEAP16[$241 + 2 >> 1] = 728;
 HEAP16[$241 + 4 >> 1] = 5;
 HEAP16[$241 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $240, $241);
 $11666 = $242;
 HEAP32[$11666 >> 2] = 47710210;
 HEAP32[$11666 + 4 >> 2] = 2490451;
 HEAP32[$242 + 8 >> 2] = 54937;
 HEAP16[$243 >> 1] = 80;
 HEAP16[$243 + 2 >> 1] = 728;
 HEAP16[$243 + 4 >> 1] = 5;
 HEAP16[$243 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $242, $243);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 79;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6132) label = 2179; else {
  $11679 = HEAP32[918918] | 0;
  if (($11679 | 0) == (HEAP32[918916] | 0)) label = 2179; else {
   $$lcssa$i$i1924 = 3675672;
   $$lcssa8$i$i1923 = $11679;
   label = 2180;
  }
 }
 do if ((label | 0) == 2179) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6132) {
   $11686 = HEAP32[918924] | 0;
   if (($11686 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1924 = 3675696;
    $$lcssa8$i$i1923 = $11686;
    label = 2180;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6132) {
   $11691 = HEAP32[918930] | 0;
   if (($11691 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1924 = 3675720;
    $$lcssa8$i$i1923 = $11691;
    label = 2180;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6132) {
   $11696 = HEAP32[918936] | 0;
   if (($11696 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1924 = 3675744;
    $$lcssa8$i$i1923 = $11696;
    label = 2180;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6132) {
   $11701 = HEAP32[918942] | 0;
   if (($11701 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1924 = 3675768;
    $$lcssa8$i$i1923 = $11701;
    label = 2180;
    break;
   }
  }
  $$3$i$i1925 = __Znwj(6132) | 0;
 } while (0);
 if ((label | 0) == 2180) {
  $11684 = $$lcssa8$i$i1923 + -4 | 0;
  HEAP32[$$lcssa$i$i1924 >> 2] = $11684;
  $$3$i$i1925 = HEAP32[$11684 >> 2] | 0;
 }
 $11705 = $$3$i$i1925 + 52 | 0;
 HEAP16[$$3$i$i1925 >> 1] = 80;
 HEAP16[$$3$i$i1925 + 2 >> 1] = 38;
 HEAP8[$$3$i$i1925 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1925 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1925 + 8 >> 2] = 160;
 HEAP32[$$3$i$i1925 + 12 >> 2] = 6080;
 HEAP32[$$3$i$i1925 + 16 >> 2] = $11705;
 HEAP32[$$3$i$i1925 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1925 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1925 + 48 >> 0] = 0;
 HEAP32[$244 >> 2] = $$3$i$i1925;
 _memcpy($11705 | 0, 1769568, 160) | 0;
 _memcpy($$3$i$i1925 + 212 | 0, 1769728, 160) | 0;
 _memcpy($$3$i$i1925 + 372 | 0, 1769888, 160) | 0;
 _memcpy($$3$i$i1925 + 532 | 0, 1770048, 160) | 0;
 _memcpy($$3$i$i1925 + 692 | 0, 1770208, 160) | 0;
 _memcpy($$3$i$i1925 + 852 | 0, 1770368, 160) | 0;
 _memcpy($$3$i$i1925 + 1012 | 0, 1770528, 160) | 0;
 _memcpy($$3$i$i1925 + 1172 | 0, 1770688, 160) | 0;
 _memcpy($$3$i$i1925 + 1332 | 0, 1770848, 160) | 0;
 _memcpy($$3$i$i1925 + 1492 | 0, 1771008, 160) | 0;
 _memcpy($$3$i$i1925 + 1652 | 0, 1771168, 160) | 0;
 _memcpy($$3$i$i1925 + 1812 | 0, 1771328, 160) | 0;
 _memcpy($$3$i$i1925 + 1972 | 0, 1771488, 160) | 0;
 _memcpy($$3$i$i1925 + 2132 | 0, 1771648, 160) | 0;
 _memcpy($$3$i$i1925 + 2292 | 0, 1771808, 160) | 0;
 _memcpy($$3$i$i1925 + 2452 | 0, 1771968, 160) | 0;
 _memcpy($$3$i$i1925 + 2612 | 0, 1772128, 160) | 0;
 _memcpy($$3$i$i1925 + 2772 | 0, 1772288, 160) | 0;
 _memcpy($$3$i$i1925 + 2932 | 0, 1772448, 160) | 0;
 _memcpy($$3$i$i1925 + 3092 | 0, 1772608, 160) | 0;
 _memcpy($$3$i$i1925 + 3252 | 0, 1772768, 160) | 0;
 _memcpy($$3$i$i1925 + 3412 | 0, 1772928, 160) | 0;
 _memcpy($$3$i$i1925 + 3572 | 0, 1773088, 160) | 0;
 _memcpy($$3$i$i1925 + 3732 | 0, 1773248, 160) | 0;
 _memcpy($$3$i$i1925 + 3892 | 0, 1773408, 160) | 0;
 _memcpy($$3$i$i1925 + 4052 | 0, 1773568, 160) | 0;
 _memcpy($$3$i$i1925 + 4212 | 0, 1773728, 160) | 0;
 _memcpy($$3$i$i1925 + 4372 | 0, 1773888, 160) | 0;
 _memcpy($$3$i$i1925 + 4532 | 0, 1774048, 160) | 0;
 _memcpy($$3$i$i1925 + 4692 | 0, 1774208, 160) | 0;
 _memcpy($$3$i$i1925 + 4852 | 0, 1774368, 160) | 0;
 _memcpy($$3$i$i1925 + 5012 | 0, 1774528, 160) | 0;
 _memcpy($$3$i$i1925 + 5172 | 0, 1774688, 160) | 0;
 _memcpy($$3$i$i1925 + 5332 | 0, 1774848, 160) | 0;
 _memcpy($$3$i$i1925 + 5492 | 0, 1775008, 160) | 0;
 _memcpy($$3$i$i1925 + 5652 | 0, 1775168, 160) | 0;
 _memcpy($$3$i$i1925 + 5812 | 0, 1775328, 160) | 0;
 _memcpy($$3$i$i1925 + 5972 | 0, 1775488, 160) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $244);
 if ($$3$i$i1925 | 0) {
  $11753 = $$3$i$i1925 + 5 | 0;
  $11755 = (HEAP8[$11753 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11753 >> 0] = $11755;
  if (!($11755 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1925);
  HEAP32[$244 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 85;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 917;
 HEAP16[$bitmapData + 6 >> 1] = 746;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31820) label = 2195; else {
  $11762 = HEAP32[918918] | 0;
  if (($11762 | 0) == (HEAP32[918916] | 0)) label = 2195; else {
   $$lcssa$i$i1937 = 3675672;
   $$lcssa8$i$i1936 = $11762;
   label = 2196;
  }
 }
 do if ((label | 0) == 2195) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31820) {
   $11769 = HEAP32[918924] | 0;
   if (($11769 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1937 = 3675696;
    $$lcssa8$i$i1936 = $11769;
    label = 2196;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31820) {
   $11774 = HEAP32[918930] | 0;
   if (($11774 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1937 = 3675720;
    $$lcssa8$i$i1936 = $11774;
    label = 2196;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31820) {
   $11779 = HEAP32[918936] | 0;
   if (($11779 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1937 = 3675744;
    $$lcssa8$i$i1936 = $11779;
    label = 2196;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31820) {
   $11784 = HEAP32[918942] | 0;
   if (($11784 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1937 = 3675768;
    $$lcssa8$i$i1936 = $11784;
    label = 2196;
    break;
   }
  }
  $$3$i$i1938 = __Znwj(31820) | 0;
 } while (0);
 if ((label | 0) == 2196) {
  $11767 = $$lcssa8$i$i1936 + -4 | 0;
  HEAP32[$$lcssa$i$i1937 >> 2] = $11767;
  $$3$i$i1938 = HEAP32[$11767 >> 2] | 0;
 }
 $11788 = $$3$i$i1938 + 52 | 0;
 HEAP16[$$3$i$i1938 >> 1] = 836;
 HEAP16[$$3$i$i1938 + 2 >> 1] = 19;
 HEAP8[$$3$i$i1938 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1938 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1938 + 8 >> 2] = 1672;
 HEAP32[$$3$i$i1938 + 12 >> 2] = 31768;
 HEAP32[$$3$i$i1938 + 16 >> 2] = $11788;
 HEAP32[$$3$i$i1938 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1938 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1938 + 48 >> 0] = 0;
 HEAP32[$245 >> 2] = $$3$i$i1938;
 _memcpy($11788 | 0, 1775648, 1672) | 0;
 _memcpy($$3$i$i1938 + 1724 | 0, 1777320, 1672) | 0;
 _memcpy($$3$i$i1938 + 3396 | 0, 1778992, 1672) | 0;
 _memcpy($$3$i$i1938 + 5068 | 0, 1780664, 1672) | 0;
 _memcpy($$3$i$i1938 + 6740 | 0, 1782336, 1672) | 0;
 _memcpy($$3$i$i1938 + 8412 | 0, 1784008, 1672) | 0;
 _memcpy($$3$i$i1938 + 10084 | 0, 1785680, 1672) | 0;
 _memcpy($$3$i$i1938 + 11756 | 0, 1787352, 1672) | 0;
 _memcpy($$3$i$i1938 + 13428 | 0, 1789024, 1672) | 0;
 _memcpy($$3$i$i1938 + 15100 | 0, 1790696, 1672) | 0;
 _memcpy($$3$i$i1938 + 16772 | 0, 1792368, 1672) | 0;
 _memcpy($$3$i$i1938 + 18444 | 0, 1794040, 1672) | 0;
 _memcpy($$3$i$i1938 + 20116 | 0, 1795712, 1672) | 0;
 _memcpy($$3$i$i1938 + 21788 | 0, 1797384, 1672) | 0;
 _memcpy($$3$i$i1938 + 23460 | 0, 1799056, 1672) | 0;
 _memcpy($$3$i$i1938 + 25132 | 0, 1800728, 1672) | 0;
 _memcpy($$3$i$i1938 + 26804 | 0, 1802400, 1672) | 0;
 _memcpy($$3$i$i1938 + 28476 | 0, 1804072, 1672) | 0;
 _memcpy($$3$i$i1938 + 30148 | 0, 1805744, 1672) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $245);
 if ($$3$i$i1938 | 0) {
  $11817 = $$3$i$i1938 + 5 | 0;
  $11819 = (HEAP8[$11817 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11817 >> 0] = $11819;
  if (!($11819 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1938);
  HEAP32[$245 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 85;
 HEAP16[$bitmapData + 2 >> 1] = 747;
 HEAP16[$bitmapData + 4 >> 1] = 917;
 HEAP16[$bitmapData + 6 >> 1] = 748;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 3396) label = 2211; else {
  $11826 = HEAP32[918918] | 0;
  if (($11826 | 0) == (HEAP32[918916] | 0)) label = 2211; else {
   $$lcssa$i$i1950 = 3675672;
   $$lcssa8$i$i1949 = $11826;
   label = 2212;
  }
 }
 do if ((label | 0) == 2211) {
  if ((HEAP32[918925] | 0) >>> 0 >= 3396) {
   $11833 = HEAP32[918924] | 0;
   if (($11833 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1950 = 3675696;
    $$lcssa8$i$i1949 = $11833;
    label = 2212;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 3396) {
   $11838 = HEAP32[918930] | 0;
   if (($11838 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1950 = 3675720;
    $$lcssa8$i$i1949 = $11838;
    label = 2212;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 3396) {
   $11843 = HEAP32[918936] | 0;
   if (($11843 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1950 = 3675744;
    $$lcssa8$i$i1949 = $11843;
    label = 2212;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 3396) {
   $11848 = HEAP32[918942] | 0;
   if (($11848 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1950 = 3675768;
    $$lcssa8$i$i1949 = $11848;
    label = 2212;
    break;
   }
  }
  $$3$i$i1951 = __Znwj(3396) | 0;
 } while (0);
 if ((label | 0) == 2212) {
  $11831 = $$lcssa8$i$i1949 + -4 | 0;
  HEAP32[$$lcssa$i$i1950 >> 2] = $11831;
  $$3$i$i1951 = HEAP32[$11831 >> 2] | 0;
 }
 $11852 = $$3$i$i1951 + 52 | 0;
 HEAP16[$$3$i$i1951 >> 1] = 836;
 HEAP16[$$3$i$i1951 + 2 >> 1] = 2;
 HEAP8[$$3$i$i1951 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1951 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1951 + 8 >> 2] = 1672;
 HEAP32[$$3$i$i1951 + 12 >> 2] = 3344;
 HEAP32[$$3$i$i1951 + 16 >> 2] = $11852;
 HEAP32[$$3$i$i1951 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1951 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1951 + 48 >> 0] = 0;
 HEAP32[$246 >> 2] = $$3$i$i1951;
 _memcpy($11852 | 0, 1807416, 1672) | 0;
 _memcpy($$3$i$i1951 + 1724 | 0, 1809088, 1672) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $246);
 if ($$3$i$i1951 | 0) {
  $11864 = $$3$i$i1951 + 5 | 0;
  $11866 = (HEAP8[$11864 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11864 >> 0] = $11866;
  if (!($11866 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1951);
  HEAP32[$246 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 85;
 HEAP16[$bitmapData + 2 >> 1] = 749;
 HEAP16[$bitmapData + 4 >> 1] = 917;
 HEAP16[$bitmapData + 6 >> 1] = 758;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 16772) label = 2227; else {
  $11873 = HEAP32[918918] | 0;
  if (($11873 | 0) == (HEAP32[918916] | 0)) label = 2227; else {
   $$lcssa$i$i1963 = 3675672;
   $$lcssa8$i$i1962 = $11873;
   label = 2228;
  }
 }
 do if ((label | 0) == 2227) {
  if ((HEAP32[918925] | 0) >>> 0 >= 16772) {
   $11880 = HEAP32[918924] | 0;
   if (($11880 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1963 = 3675696;
    $$lcssa8$i$i1962 = $11880;
    label = 2228;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 16772) {
   $11885 = HEAP32[918930] | 0;
   if (($11885 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1963 = 3675720;
    $$lcssa8$i$i1962 = $11885;
    label = 2228;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 16772) {
   $11890 = HEAP32[918936] | 0;
   if (($11890 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1963 = 3675744;
    $$lcssa8$i$i1962 = $11890;
    label = 2228;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 16772) {
   $11895 = HEAP32[918942] | 0;
   if (($11895 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1963 = 3675768;
    $$lcssa8$i$i1962 = $11895;
    label = 2228;
    break;
   }
  }
  $$3$i$i1964 = __Znwj(16772) | 0;
 } while (0);
 if ((label | 0) == 2228) {
  $11878 = $$lcssa8$i$i1962 + -4 | 0;
  HEAP32[$$lcssa$i$i1963 >> 2] = $11878;
  $$3$i$i1964 = HEAP32[$11878 >> 2] | 0;
 }
 $11899 = $$3$i$i1964 + 52 | 0;
 HEAP16[$$3$i$i1964 >> 1] = 836;
 HEAP16[$$3$i$i1964 + 2 >> 1] = 10;
 HEAP8[$$3$i$i1964 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1964 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1964 + 8 >> 2] = 1672;
 HEAP32[$$3$i$i1964 + 12 >> 2] = 16720;
 HEAP32[$$3$i$i1964 + 16 >> 2] = $11899;
 HEAP32[$$3$i$i1964 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1964 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1964 + 48 >> 0] = 0;
 HEAP32[$247 >> 2] = $$3$i$i1964;
 _memcpy($11899 | 0, 1810760, 1672) | 0;
 _memcpy($$3$i$i1964 + 1724 | 0, 1812432, 1672) | 0;
 _memcpy($$3$i$i1964 + 3396 | 0, 1814104, 1672) | 0;
 _memcpy($$3$i$i1964 + 5068 | 0, 1815776, 1672) | 0;
 _memcpy($$3$i$i1964 + 6740 | 0, 1817448, 1672) | 0;
 _memcpy($$3$i$i1964 + 8412 | 0, 1819120, 1672) | 0;
 _memcpy($$3$i$i1964 + 10084 | 0, 1820792, 1672) | 0;
 _memcpy($$3$i$i1964 + 11756 | 0, 1822464, 1672) | 0;
 _memcpy($$3$i$i1964 + 13428 | 0, 1824136, 1672) | 0;
 _memcpy($$3$i$i1964 + 15100 | 0, 1825808, 1672) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $247);
 if ($$3$i$i1964 | 0) {
  $11919 = $$3$i$i1964 + 5 | 0;
  $11921 = (HEAP8[$11919 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11919 >> 0] = $11921;
  if (!($11921 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1964);
  HEAP32[$247 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 85;
 HEAP16[$bitmapData + 2 >> 1] = 759;
 HEAP16[$bitmapData + 4 >> 1] = 917;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 11756) label = 2243; else {
  $11928 = HEAP32[918918] | 0;
  if (($11928 | 0) == (HEAP32[918916] | 0)) label = 2243; else {
   $$lcssa$i$i1976 = 3675672;
   $$lcssa8$i$i1975 = $11928;
   label = 2244;
  }
 }
 do if ((label | 0) == 2243) {
  if ((HEAP32[918925] | 0) >>> 0 >= 11756) {
   $11935 = HEAP32[918924] | 0;
   if (($11935 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1976 = 3675696;
    $$lcssa8$i$i1975 = $11935;
    label = 2244;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 11756) {
   $11940 = HEAP32[918930] | 0;
   if (($11940 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1976 = 3675720;
    $$lcssa8$i$i1975 = $11940;
    label = 2244;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 11756) {
   $11945 = HEAP32[918936] | 0;
   if (($11945 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1976 = 3675744;
    $$lcssa8$i$i1975 = $11945;
    label = 2244;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 11756) {
   $11950 = HEAP32[918942] | 0;
   if (($11950 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1976 = 3675768;
    $$lcssa8$i$i1975 = $11950;
    label = 2244;
    break;
   }
  }
  $$3$i$i1977 = __Znwj(11756) | 0;
 } while (0);
 if ((label | 0) == 2244) {
  $11933 = $$lcssa8$i$i1975 + -4 | 0;
  HEAP32[$$lcssa$i$i1976 >> 2] = $11933;
  $$3$i$i1977 = HEAP32[$11933 >> 2] | 0;
 }
 $11954 = $$3$i$i1977 + 52 | 0;
 HEAP16[$$3$i$i1977 >> 1] = 836;
 HEAP16[$$3$i$i1977 + 2 >> 1] = 7;
 HEAP8[$$3$i$i1977 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1977 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1977 + 8 >> 2] = 1672;
 HEAP32[$$3$i$i1977 + 12 >> 2] = 11704;
 HEAP32[$$3$i$i1977 + 16 >> 2] = $11954;
 HEAP32[$$3$i$i1977 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1977 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1977 + 48 >> 0] = 0;
 HEAP32[$248 >> 2] = $$3$i$i1977;
 _memcpy($11954 | 0, 1827480, 1672) | 0;
 _memcpy($$3$i$i1977 + 1724 | 0, 1829152, 1672) | 0;
 _memcpy($$3$i$i1977 + 3396 | 0, 1830824, 1672) | 0;
 _memcpy($$3$i$i1977 + 5068 | 0, 1832496, 1672) | 0;
 _memcpy($$3$i$i1977 + 6740 | 0, 1834168, 1672) | 0;
 _memcpy($$3$i$i1977 + 8412 | 0, 1835840, 1672) | 0;
 _memcpy($$3$i$i1977 + 10084 | 0, 1837512, 1672) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $248);
 if ($$3$i$i1977 | 0) {
  $11971 = $$3$i$i1977 + 5 | 0;
  $11973 = (HEAP8[$11971 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$11971 >> 0] = $11973;
  if (!($11973 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1977);
  HEAP32[$248 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 935;
 HEAP16[$bitmapData + 2 >> 1] = 729;
 HEAP16[$bitmapData + 4 >> 1] = 1020;
 HEAP16[$bitmapData + 6 >> 1] = 764;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6388) label = 2259; else {
  $11980 = HEAP32[918918] | 0;
  if (($11980 | 0) == (HEAP32[918916] | 0)) label = 2259; else {
   $$lcssa$i$i1989 = 3675672;
   $$lcssa8$i$i1988 = $11980;
   label = 2260;
  }
 }
 do if ((label | 0) == 2259) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6388) {
   $11987 = HEAP32[918924] | 0;
   if (($11987 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i1989 = 3675696;
    $$lcssa8$i$i1988 = $11987;
    label = 2260;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6388) {
   $11992 = HEAP32[918930] | 0;
   if (($11992 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i1989 = 3675720;
    $$lcssa8$i$i1988 = $11992;
    label = 2260;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6388) {
   $11997 = HEAP32[918936] | 0;
   if (($11997 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i1989 = 3675744;
    $$lcssa8$i$i1988 = $11997;
    label = 2260;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6388) {
   $12002 = HEAP32[918942] | 0;
   if (($12002 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i1989 = 3675768;
    $$lcssa8$i$i1988 = $12002;
    label = 2260;
    break;
   }
  }
  $$3$i$i1990 = __Znwj(6388) | 0;
 } while (0);
 if ((label | 0) == 2260) {
  $11985 = $$lcssa8$i$i1988 + -4 | 0;
  HEAP32[$$lcssa$i$i1989 >> 2] = $11985;
  $$3$i$i1990 = HEAP32[$11985 >> 2] | 0;
 }
 $12006 = $$3$i$i1990 + 52 | 0;
 HEAP16[$$3$i$i1990 >> 1] = 88;
 HEAP16[$$3$i$i1990 + 2 >> 1] = 36;
 HEAP8[$$3$i$i1990 + 4 >> 0] = 16;
 HEAP8[$$3$i$i1990 + 5 >> 0] = 1;
 HEAP32[$$3$i$i1990 + 8 >> 2] = 176;
 HEAP32[$$3$i$i1990 + 12 >> 2] = 6336;
 HEAP32[$$3$i$i1990 + 16 >> 2] = $12006;
 HEAP32[$$3$i$i1990 + 20 >> 2] = 0;
 HEAP32[$$3$i$i1990 + 24 >> 2] = 0;
 HEAP8[$$3$i$i1990 + 48 >> 0] = 0;
 HEAP32[$249 >> 2] = $$3$i$i1990;
 _memcpy($12006 | 0, 1839184, 176) | 0;
 _memcpy($$3$i$i1990 + 228 | 0, 1839360, 176) | 0;
 _memcpy($$3$i$i1990 + 404 | 0, 1839536, 176) | 0;
 _memcpy($$3$i$i1990 + 580 | 0, 1839712, 176) | 0;
 _memcpy($$3$i$i1990 + 756 | 0, 1839888, 176) | 0;
 _memcpy($$3$i$i1990 + 932 | 0, 1840064, 176) | 0;
 _memcpy($$3$i$i1990 + 1108 | 0, 1840240, 176) | 0;
 _memcpy($$3$i$i1990 + 1284 | 0, 1840416, 176) | 0;
 _memcpy($$3$i$i1990 + 1460 | 0, 1840592, 176) | 0;
 _memcpy($$3$i$i1990 + 1636 | 0, 1840768, 176) | 0;
 _memcpy($$3$i$i1990 + 1812 | 0, 1840944, 176) | 0;
 _memcpy($$3$i$i1990 + 1988 | 0, 1841120, 176) | 0;
 _memcpy($$3$i$i1990 + 2164 | 0, 1841296, 176) | 0;
 _memcpy($$3$i$i1990 + 2340 | 0, 1841472, 176) | 0;
 _memcpy($$3$i$i1990 + 2516 | 0, 1841648, 176) | 0;
 _memcpy($$3$i$i1990 + 2692 | 0, 1841824, 176) | 0;
 _memcpy($$3$i$i1990 + 2868 | 0, 1842e3, 176) | 0;
 _memcpy($$3$i$i1990 + 3044 | 0, 1842176, 176) | 0;
 _memcpy($$3$i$i1990 + 3220 | 0, 1842352, 176) | 0;
 _memcpy($$3$i$i1990 + 3396 | 0, 1842528, 176) | 0;
 _memcpy($$3$i$i1990 + 3572 | 0, 1842704, 176) | 0;
 _memcpy($$3$i$i1990 + 3748 | 0, 1842880, 176) | 0;
 _memcpy($$3$i$i1990 + 3924 | 0, 1843056, 176) | 0;
 _memcpy($$3$i$i1990 + 4100 | 0, 1843232, 176) | 0;
 _memcpy($$3$i$i1990 + 4276 | 0, 1843408, 176) | 0;
 _memcpy($$3$i$i1990 + 4452 | 0, 1843584, 176) | 0;
 _memcpy($$3$i$i1990 + 4628 | 0, 1843760, 176) | 0;
 _memcpy($$3$i$i1990 + 4804 | 0, 1843936, 176) | 0;
 _memcpy($$3$i$i1990 + 4980 | 0, 1844112, 176) | 0;
 _memcpy($$3$i$i1990 + 5156 | 0, 1844288, 176) | 0;
 _memcpy($$3$i$i1990 + 5332 | 0, 1844464, 176) | 0;
 _memcpy($$3$i$i1990 + 5508 | 0, 1844640, 176) | 0;
 _memcpy($$3$i$i1990 + 5684 | 0, 1844816, 176) | 0;
 _memcpy($$3$i$i1990 + 5860 | 0, 1844992, 176) | 0;
 _memcpy($$3$i$i1990 + 6036 | 0, 1845168, 176) | 0;
 _memcpy($$3$i$i1990 + 6212 | 0, 1845344, 176) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $249);
 if ($$3$i$i1990 | 0) {
  $12052 = $$3$i$i1990 + 5 | 0;
  $12054 = (HEAP8[$12052 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$12052 >> 0] = $12054;
  if (!($12054 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i1990);
  HEAP32[$249 >> 2] = 0;
 }
 $12056 = $250;
 HEAP32[$12056 >> 2] = 0;
 HEAP32[$12056 + 4 >> 2] = 47449088;
 HEAP32[$250 + 8 >> 2] = 15220;
 HEAP16[$251 >> 1] = 0;
 HEAP16[$251 + 2 >> 1] = 0;
 HEAP16[$251 + 4 >> 1] = 1024;
 HEAP16[$251 + 6 >> 1] = 724;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $250, $251);
 $12064 = $252;
 HEAP32[$12064 >> 2] = 458774;
 HEAP32[$12064 + 4 >> 2] = 3145776;
 HEAP32[$252 + 8 >> 2] = 15220;
 HEAP16[$253 >> 1] = 22;
 HEAP16[$253 + 2 >> 1] = 7;
 HEAP16[$253 + 4 >> 1] = 48;
 HEAP16[$253 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $252, $253);
 $12072 = $254;
 HEAP32[$12072 >> 2] = 3801111;
 HEAP32[$12072 + 4 >> 2] = 983085;
 HEAP32[$254 + 8 >> 2] = 15220;
 HEAP16[$255 >> 1] = 23;
 HEAP16[$255 + 2 >> 1] = 58;
 HEAP16[$255 + 4 >> 1] = 45;
 HEAP16[$255 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $254, $255);
 $12080 = $256;
 HEAP32[$12080 >> 2] = 7208982;
 HEAP32[$12080 + 4 >> 2] = 3145776;
 HEAP32[$256 + 8 >> 2] = 15220;
 HEAP16[$257 >> 1] = 22;
 HEAP16[$257 + 2 >> 1] = 110;
 HEAP16[$257 + 4 >> 1] = 48;
 HEAP16[$257 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $256, $257);
 $12088 = $258;
 HEAP32[$12088 >> 2] = 10551299;
 HEAP32[$12088 + 4 >> 2] = 983126;
 HEAP32[$258 + 8 >> 2] = 15220;
 HEAP16[$259 >> 1] = 3;
 HEAP16[$259 + 2 >> 1] = 161;
 HEAP16[$259 + 4 >> 1] = 86;
 HEAP16[$259 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $258, $259);
 $12096 = $260;
 HEAP32[$12096 >> 2] = 13959190;
 HEAP32[$12096 + 4 >> 2] = 3145776;
 HEAP32[$260 + 8 >> 2] = 15220;
 HEAP16[$261 >> 1] = 22;
 HEAP16[$261 + 2 >> 1] = 213;
 HEAP16[$261 + 4 >> 1] = 48;
 HEAP16[$261 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $260, $261);
 $12104 = $262;
 HEAP32[$12104 >> 2] = 17301529;
 HEAP32[$12104 + 4 >> 2] = 983081;
 HEAP32[$262 + 8 >> 2] = 15220;
 HEAP16[$263 >> 1] = 25;
 HEAP16[$263 + 2 >> 1] = 264;
 HEAP16[$263 + 4 >> 1] = 41;
 HEAP16[$263 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $262, $263);
 $12112 = $264;
 HEAP32[$12112 >> 2] = 20709398;
 HEAP32[$12112 + 4 >> 2] = 3145776;
 HEAP32[$264 + 8 >> 2] = 15220;
 HEAP16[$265 >> 1] = 22;
 HEAP16[$265 + 2 >> 1] = 316;
 HEAP16[$265 + 4 >> 1] = 48;
 HEAP16[$265 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $264, $265);
 $12120 = $266;
 HEAP32[$12120 >> 2] = 24051713;
 HEAP32[$12120 + 4 >> 2] = 983130;
 HEAP32[$266 + 8 >> 2] = 15220;
 HEAP16[$267 >> 1] = 1;
 HEAP16[$267 + 2 >> 1] = 367;
 HEAP16[$267 + 4 >> 1] = 90;
 HEAP16[$267 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $266, $267);
 $12128 = $268;
 HEAP32[$12128 >> 2] = 27459606;
 HEAP32[$12128 + 4 >> 2] = 3145776;
 HEAP32[$268 + 8 >> 2] = 15220;
 HEAP16[$269 >> 1] = 22;
 HEAP16[$269 + 2 >> 1] = 419;
 HEAP16[$269 + 4 >> 1] = 48;
 HEAP16[$269 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $268, $269);
 $12136 = $270;
 HEAP32[$12136 >> 2] = 30801942;
 HEAP32[$12136 + 4 >> 2] = 983088;
 HEAP32[$270 + 8 >> 2] = 15220;
 HEAP16[$271 >> 1] = 22;
 HEAP16[$271 + 2 >> 1] = 470;
 HEAP16[$271 + 4 >> 1] = 48;
 HEAP16[$271 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $270, $271);
 $12144 = $272;
 HEAP32[$12144 >> 2] = 34209814;
 HEAP32[$12144 + 4 >> 2] = 3145776;
 HEAP32[$272 + 8 >> 2] = 15220;
 HEAP16[$273 >> 1] = 22;
 HEAP16[$273 + 2 >> 1] = 522;
 HEAP16[$273 + 4 >> 1] = 48;
 HEAP16[$273 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $272, $273);
 $12152 = $274;
 HEAP32[$12152 >> 2] = 37552154;
 HEAP32[$12152 + 4 >> 2] = 983080;
 HEAP32[$274 + 8 >> 2] = 15220;
 HEAP16[$275 >> 1] = 26;
 HEAP16[$275 + 2 >> 1] = 573;
 HEAP16[$275 + 4 >> 1] = 40;
 HEAP16[$275 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $274, $275);
 $12160 = $276;
 HEAP32[$12160 >> 2] = 40960022;
 HEAP32[$12160 + 4 >> 2] = 3145776;
 HEAP32[$276 + 8 >> 2] = 15220;
 HEAP16[$277 >> 1] = 22;
 HEAP16[$277 + 2 >> 1] = 625;
 HEAP16[$277 + 4 >> 1] = 48;
 HEAP16[$277 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $276, $277);
 $12168 = $278;
 HEAP32[$12168 >> 2] = 44302346;
 HEAP32[$12168 + 4 >> 2] = 983112;
 HEAP32[$278 + 8 >> 2] = 15220;
 HEAP16[$279 >> 1] = 10;
 HEAP16[$279 + 2 >> 1] = 676;
 HEAP16[$279 + 4 >> 1] = 72;
 HEAP16[$279 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $278, $279);
 $12176 = $280;
 HEAP32[$12176 >> 2] = 458867;
 HEAP32[$12176 + 4 >> 2] = 3145776;
 HEAP32[$280 + 8 >> 2] = 15220;
 HEAP16[$281 >> 1] = 115;
 HEAP16[$281 + 2 >> 1] = 7;
 HEAP16[$281 + 4 >> 1] = 48;
 HEAP16[$281 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $280, $281);
 $12184 = $282;
 HEAP32[$12184 >> 2] = 3801182;
 HEAP32[$12184 + 4 >> 2] = 983130;
 HEAP32[$282 + 8 >> 2] = 15220;
 HEAP16[$283 >> 1] = 94;
 HEAP16[$283 + 2 >> 1] = 58;
 HEAP16[$283 + 4 >> 1] = 90;
 HEAP16[$283 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $282, $283);
 $12192 = $284;
 HEAP32[$12192 >> 2] = 7209075;
 HEAP32[$12192 + 4 >> 2] = 3145776;
 HEAP32[$284 + 8 >> 2] = 15220;
 HEAP16[$285 >> 1] = 115;
 HEAP16[$285 + 2 >> 1] = 110;
 HEAP16[$285 + 4 >> 1] = 48;
 HEAP16[$285 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $284, $285);
 $12200 = $286;
 HEAP32[$12200 >> 2] = 10551391;
 HEAP32[$12200 + 4 >> 2] = 983128;
 HEAP32[$286 + 8 >> 2] = 15220;
 HEAP16[$287 >> 1] = 95;
 HEAP16[$287 + 2 >> 1] = 161;
 HEAP16[$287 + 4 >> 1] = 88;
 HEAP16[$287 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $286, $287);
 $12208 = $288;
 HEAP32[$12208 >> 2] = 6422611;
 HEAP32[$12208 + 4 >> 2] = 5767280;
 HEAP32[$288 + 8 >> 2] = 15220;
 HEAP16[$289 >> 1] = 83;
 HEAP16[$289 + 2 >> 1] = 98;
 HEAP16[$289 + 4 >> 1] = 112;
 HEAP16[$289 + 6 >> 1] = 88;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $288, $289);
 $12216 = $290;
 HEAP32[$12216 >> 2] = 10551379;
 HEAP32[$12216 + 4 >> 2] = 983046;
 HEAP32[$290 + 8 >> 2] = 15220;
 HEAP16[$291 >> 1] = 83;
 HEAP16[$291 + 2 >> 1] = 161;
 HEAP16[$291 + 4 >> 1] = 6;
 HEAP16[$291 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $290, $291);
 $12224 = $292;
 HEAP32[$12224 >> 2] = 7209075;
 HEAP32[$12224 + 4 >> 2] = 3145776;
 HEAP32[$292 + 8 >> 2] = 15220;
 HEAP16[$293 >> 1] = 115;
 HEAP16[$293 + 2 >> 1] = 110;
 HEAP16[$293 + 4 >> 1] = 48;
 HEAP16[$293 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $292, $293);
 $12232 = $294;
 HEAP32[$12232 >> 2] = 10551391;
 HEAP32[$12232 + 4 >> 2] = 983128;
 HEAP32[$294 + 8 >> 2] = 15220;
 HEAP16[$295 >> 1] = 95;
 HEAP16[$295 + 2 >> 1] = 161;
 HEAP16[$295 + 4 >> 1] = 88;
 HEAP16[$295 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $294, $295);
 $12240 = $296;
 HEAP32[$12240 >> 2] = 83;
 HEAP32[$12240 + 4 >> 2] = 5439600;
 HEAP32[$296 + 8 >> 2] = 15220;
 HEAP16[$297 >> 1] = 83;
 HEAP16[$297 + 2 >> 1] = 0;
 HEAP16[$297 + 4 >> 1] = 112;
 HEAP16[$297 + 6 >> 1] = 83;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $296, $297);
 $12248 = $298;
 HEAP32[$12248 >> 2] = 458867;
 HEAP32[$12248 + 4 >> 2] = 3145776;
 HEAP32[$298 + 8 >> 2] = 15220;
 HEAP16[$299 >> 1] = 115;
 HEAP16[$299 + 2 >> 1] = 7;
 HEAP16[$299 + 4 >> 1] = 48;
 HEAP16[$299 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $298, $299);
 $12256 = $300;
 HEAP32[$12256 >> 2] = 3801182;
 HEAP32[$12256 + 4 >> 2] = 983130;
 HEAP32[$300 + 8 >> 2] = 15220;
 HEAP16[$301 >> 1] = 94;
 HEAP16[$301 + 2 >> 1] = 58;
 HEAP16[$301 + 4 >> 1] = 90;
 HEAP16[$301 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $300, $301);
 $12264 = $302;
 HEAP32[$12264 >> 2] = 40173568;
 HEAP32[$12264 + 4 >> 2] = 5767270;
 HEAP32[$302 + 8 >> 2] = 15220;
 HEAP16[$303 >> 1] = 0;
 HEAP16[$303 + 2 >> 1] = 613;
 HEAP16[$303 + 4 >> 1] = 102;
 HEAP16[$303 + 6 >> 1] = 88;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $302, $303);
 $12272 = $304;
 HEAP32[$12272 >> 2] = 40960022;
 HEAP32[$12272 + 4 >> 2] = 3145776;
 HEAP32[$304 + 8 >> 2] = 15220;
 HEAP16[$305 >> 1] = 22;
 HEAP16[$305 + 2 >> 1] = 625;
 HEAP16[$305 + 4 >> 1] = 48;
 HEAP16[$305 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $304, $305);
 $12280 = $306;
 HEAP32[$12280 >> 2] = 44302346;
 HEAP32[$12280 + 4 >> 2] = 983112;
 HEAP32[$306 + 8 >> 2] = 15220;
 HEAP16[$307 >> 1] = 10;
 HEAP16[$307 + 2 >> 1] = 676;
 HEAP16[$307 + 4 >> 1] = 72;
 HEAP16[$307 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $306, $307);
 $12288 = $308;
 HEAP32[$12288 >> 2] = 33423360;
 HEAP32[$12288 + 4 >> 2] = 5767270;
 HEAP32[$308 + 8 >> 2] = 15220;
 HEAP16[$309 >> 1] = 0;
 HEAP16[$309 + 2 >> 1] = 510;
 HEAP16[$309 + 4 >> 1] = 102;
 HEAP16[$309 + 6 >> 1] = 88;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $308, $309);
 $12296 = $310;
 HEAP32[$12296 >> 2] = 34209814;
 HEAP32[$12296 + 4 >> 2] = 3145776;
 HEAP32[$310 + 8 >> 2] = 15220;
 HEAP16[$311 >> 1] = 22;
 HEAP16[$311 + 2 >> 1] = 522;
 HEAP16[$311 + 4 >> 1] = 48;
 HEAP16[$311 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $310, $311);
 $12304 = $312;
 HEAP32[$12304 >> 2] = 37552154;
 HEAP32[$12304 + 4 >> 2] = 983080;
 HEAP32[$312 + 8 >> 2] = 15220;
 HEAP16[$313 >> 1] = 26;
 HEAP16[$313 + 2 >> 1] = 573;
 HEAP16[$313 + 4 >> 1] = 40;
 HEAP16[$313 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $312, $313);
 $12312 = $314;
 HEAP32[$12312 >> 2] = 26673152;
 HEAP32[$12312 + 4 >> 2] = 5767270;
 HEAP32[$314 + 8 >> 2] = 15220;
 HEAP16[$315 >> 1] = 0;
 HEAP16[$315 + 2 >> 1] = 407;
 HEAP16[$315 + 4 >> 1] = 102;
 HEAP16[$315 + 6 >> 1] = 88;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $314, $315);
 $12320 = $316;
 HEAP32[$12320 >> 2] = 27459606;
 HEAP32[$12320 + 4 >> 2] = 3145776;
 HEAP32[$316 + 8 >> 2] = 15220;
 HEAP16[$317 >> 1] = 22;
 HEAP16[$317 + 2 >> 1] = 419;
 HEAP16[$317 + 4 >> 1] = 48;
 HEAP16[$317 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $316, $317);
 $12328 = $318;
 HEAP32[$12328 >> 2] = 30801942;
 HEAP32[$12328 + 4 >> 2] = 983088;
 HEAP32[$318 + 8 >> 2] = 15220;
 HEAP16[$319 >> 1] = 22;
 HEAP16[$319 + 2 >> 1] = 470;
 HEAP16[$319 + 4 >> 1] = 48;
 HEAP16[$319 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $318, $319);
 $12336 = $320;
 HEAP32[$12336 >> 2] = 19922944;
 HEAP32[$12336 + 4 >> 2] = 5767270;
 HEAP32[$320 + 8 >> 2] = 15220;
 HEAP16[$321 >> 1] = 0;
 HEAP16[$321 + 2 >> 1] = 304;
 HEAP16[$321 + 4 >> 1] = 102;
 HEAP16[$321 + 6 >> 1] = 88;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $320, $321);
 $12344 = $322;
 HEAP32[$12344 >> 2] = 20709398;
 HEAP32[$12344 + 4 >> 2] = 3145776;
 HEAP32[$322 + 8 >> 2] = 15220;
 HEAP16[$323 >> 1] = 22;
 HEAP16[$323 + 2 >> 1] = 316;
 HEAP16[$323 + 4 >> 1] = 48;
 HEAP16[$323 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $322, $323);
 $12352 = $324;
 HEAP32[$12352 >> 2] = 24051713;
 HEAP32[$12352 + 4 >> 2] = 983130;
 HEAP32[$324 + 8 >> 2] = 15220;
 HEAP16[$325 >> 1] = 1;
 HEAP16[$325 + 2 >> 1] = 367;
 HEAP16[$325 + 4 >> 1] = 90;
 HEAP16[$325 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $324, $325);
 $12360 = $326;
 HEAP32[$12360 >> 2] = 13172736;
 HEAP32[$12360 + 4 >> 2] = 5767270;
 HEAP32[$326 + 8 >> 2] = 15220;
 HEAP16[$327 >> 1] = 0;
 HEAP16[$327 + 2 >> 1] = 201;
 HEAP16[$327 + 4 >> 1] = 102;
 HEAP16[$327 + 6 >> 1] = 88;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $326, $327);
 $12368 = $328;
 HEAP32[$12368 >> 2] = 13959190;
 HEAP32[$12368 + 4 >> 2] = 3145776;
 HEAP32[$328 + 8 >> 2] = 15220;
 HEAP16[$329 >> 1] = 22;
 HEAP16[$329 + 2 >> 1] = 213;
 HEAP16[$329 + 4 >> 1] = 48;
 HEAP16[$329 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $328, $329);
 $12376 = $330;
 HEAP32[$12376 >> 2] = 17301529;
 HEAP32[$12376 + 4 >> 2] = 983081;
 HEAP32[$330 + 8 >> 2] = 15220;
 HEAP16[$331 >> 1] = 25;
 HEAP16[$331 + 2 >> 1] = 264;
 HEAP16[$331 + 4 >> 1] = 41;
 HEAP16[$331 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $330, $331);
 $12384 = $332;
 HEAP32[$12384 >> 2] = 6422528;
 HEAP32[$12384 + 4 >> 2] = 5767270;
 HEAP32[$332 + 8 >> 2] = 15220;
 HEAP16[$333 >> 1] = 0;
 HEAP16[$333 + 2 >> 1] = 98;
 HEAP16[$333 + 4 >> 1] = 102;
 HEAP16[$333 + 6 >> 1] = 88;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $332, $333);
 $12392 = $334;
 HEAP32[$12392 >> 2] = 7208982;
 HEAP32[$12392 + 4 >> 2] = 3145776;
 HEAP32[$334 + 8 >> 2] = 15220;
 HEAP16[$335 >> 1] = 22;
 HEAP16[$335 + 2 >> 1] = 110;
 HEAP16[$335 + 4 >> 1] = 48;
 HEAP16[$335 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $334, $335);
 $12400 = $336;
 HEAP32[$12400 >> 2] = 10551299;
 HEAP32[$12400 + 4 >> 2] = 983126;
 HEAP32[$336 + 8 >> 2] = 15220;
 HEAP16[$337 >> 1] = 3;
 HEAP16[$337 + 2 >> 1] = 161;
 HEAP16[$337 + 4 >> 1] = 86;
 HEAP16[$337 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $336, $337);
 $12408 = $338;
 HEAP32[$12408 >> 2] = 10551391;
 HEAP32[$12408 + 4 >> 2] = 983047;
 HEAP32[$338 + 8 >> 2] = 15220;
 HEAP16[$339 >> 1] = 95;
 HEAP16[$339 + 2 >> 1] = 161;
 HEAP16[$339 + 4 >> 1] = 7;
 HEAP16[$339 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $338, $339);
 $12416 = $340;
 HEAP32[$12416 >> 2] = 0;
 HEAP32[$12416 + 4 >> 2] = 5439590;
 HEAP32[$340 + 8 >> 2] = 15220;
 HEAP16[$341 >> 1] = 0;
 HEAP16[$341 + 2 >> 1] = 0;
 HEAP16[$341 + 4 >> 1] = 102;
 HEAP16[$341 + 6 >> 1] = 83;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $340, $341);
 $12424 = $342;
 HEAP32[$12424 >> 2] = 458774;
 HEAP32[$12424 + 4 >> 2] = 3145776;
 HEAP32[$342 + 8 >> 2] = 15220;
 HEAP16[$343 >> 1] = 22;
 HEAP16[$343 + 2 >> 1] = 7;
 HEAP16[$343 + 4 >> 1] = 48;
 HEAP16[$343 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $342, $343);
 $12432 = $344;
 HEAP32[$12432 >> 2] = 3801111;
 HEAP32[$12432 + 4 >> 2] = 983085;
 HEAP32[$344 + 8 >> 2] = 15220;
 HEAP16[$345 >> 1] = 23;
 HEAP16[$345 + 2 >> 1] = 58;
 HEAP16[$345 + 4 >> 1] = 45;
 HEAP16[$345 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $344, $345);
 $12440 = $346;
 HEAP32[$12440 >> 2] = 3801182;
 HEAP32[$12440 + 4 >> 2] = 983048;
 HEAP32[$346 + 8 >> 2] = 15220;
 HEAP16[$347 >> 1] = 94;
 HEAP16[$347 + 2 >> 1] = 58;
 HEAP16[$347 + 4 >> 1] = 8;
 HEAP16[$347 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $346, $347);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 96;
 HEAP16[$bitmapData + 2 >> 1] = 58;
 HEAP16[$bitmapData + 4 >> 1] = 101;
 HEAP16[$bitmapData + 6 >> 1] = 70;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 260) label = 2275; else {
  $12453 = HEAP32[918918] | 0;
  if (($12453 | 0) == (HEAP32[918916] | 0)) label = 2275; else {
   $$lcssa$i$i2254 = 3675672;
   $$lcssa8$i$i2253 = $12453;
   label = 2276;
  }
 }
 do if ((label | 0) == 2275) {
  if ((HEAP32[918925] | 0) >>> 0 >= 260) {
   $12460 = HEAP32[918924] | 0;
   if (($12460 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2254 = 3675696;
    $$lcssa8$i$i2253 = $12460;
    label = 2276;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 260) {
   $12465 = HEAP32[918930] | 0;
   if (($12465 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2254 = 3675720;
    $$lcssa8$i$i2253 = $12465;
    label = 2276;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 260) {
   $12470 = HEAP32[918936] | 0;
   if (($12470 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2254 = 3675744;
    $$lcssa8$i$i2253 = $12470;
    label = 2276;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 260) {
   $12475 = HEAP32[918942] | 0;
   if (($12475 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2254 = 3675768;
    $$lcssa8$i$i2253 = $12475;
    label = 2276;
    break;
   }
  }
  $$3$i$i2255 = __Znwj(260) | 0;
 } while (0);
 if ((label | 0) == 2276) {
  $12458 = $$lcssa8$i$i2253 + -4 | 0;
  HEAP32[$$lcssa$i$i2254 >> 2] = $12458;
  $$3$i$i2255 = HEAP32[$12458 >> 2] | 0;
 }
 $12479 = $$3$i$i2255 + 52 | 0;
 HEAP16[$$3$i$i2255 >> 1] = 8;
 HEAP16[$$3$i$i2255 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2255 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2255 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2255 + 8 >> 2] = 16;
 HEAP32[$$3$i$i2255 + 12 >> 2] = 208;
 HEAP32[$$3$i$i2255 + 16 >> 2] = $12479;
 HEAP32[$$3$i$i2255 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2255 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2255 + 48 >> 0] = 0;
 HEAP32[$348 >> 2] = $$3$i$i2255;
 dest = $12479;
 src = 1845520;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 68 | 0;
 src = 1845536;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 84 | 0;
 src = 1845552;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 100 | 0;
 src = 1845568;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 116 | 0;
 src = 1845584;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 132 | 0;
 src = 1845600;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 148 | 0;
 src = 1845616;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 164 | 0;
 src = 1845632;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 180 | 0;
 src = 1845648;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 196 | 0;
 src = 1845664;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 212 | 0;
 src = 1845680;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 228 | 0;
 src = 1845696;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2255 + 244 | 0;
 src = 1845712;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $348);
 if ($$3$i$i2255 | 0) {
  $12502 = $$3$i$i2255 + 5 | 0;
  $12504 = (HEAP8[$12502 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$12502 >> 0] = $12504;
  if (!($12504 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2255);
  HEAP32[$348 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 99;
 HEAP16[$bitmapData + 2 >> 1] = 161;
 HEAP16[$bitmapData + 4 >> 1] = 101;
 HEAP16[$bitmapData + 6 >> 1] = 173;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 156) label = 2291; else {
  $12511 = HEAP32[918918] | 0;
  if (($12511 | 0) == (HEAP32[918916] | 0)) label = 2291; else {
   $$lcssa$i$i2266 = 3675672;
   $$lcssa8$i$i2265 = $12511;
   label = 2292;
  }
 }
 do if ((label | 0) == 2291) {
  if ((HEAP32[918925] | 0) >>> 0 >= 156) {
   $12518 = HEAP32[918924] | 0;
   if (($12518 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2266 = 3675696;
    $$lcssa8$i$i2265 = $12518;
    label = 2292;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 156) {
   $12523 = HEAP32[918930] | 0;
   if (($12523 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2266 = 3675720;
    $$lcssa8$i$i2265 = $12523;
    label = 2292;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 156) {
   $12528 = HEAP32[918936] | 0;
   if (($12528 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2266 = 3675744;
    $$lcssa8$i$i2265 = $12528;
    label = 2292;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 156) {
   $12533 = HEAP32[918942] | 0;
   if (($12533 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2266 = 3675768;
    $$lcssa8$i$i2265 = $12533;
    label = 2292;
    break;
   }
  }
  $$3$i$i2267 = __Znwj(156) | 0;
 } while (0);
 if ((label | 0) == 2292) {
  $12516 = $$lcssa8$i$i2265 + -4 | 0;
  HEAP32[$$lcssa$i$i2266 >> 2] = $12516;
  $$3$i$i2267 = HEAP32[$12516 >> 2] | 0;
 }
 $12537 = $$3$i$i2267 + 52 | 0;
 HEAP16[$$3$i$i2267 >> 1] = 4;
 HEAP16[$$3$i$i2267 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2267 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2267 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2267 + 8 >> 2] = 8;
 HEAP32[$$3$i$i2267 + 12 >> 2] = 104;
 HEAP32[$$3$i$i2267 + 16 >> 2] = $12537;
 HEAP32[$$3$i$i2267 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2267 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2267 + 48 >> 0] = 0;
 HEAP32[$349 >> 2] = $$3$i$i2267;
 $12547 = $12537;
 $12548 = $12547;
 HEAP8[$12548 >> 0] = 116;
 HEAP8[$12548 + 1 >> 0] = 59;
 HEAP8[$12548 + 2 >> 0] = 116;
 HEAP8[$12548 + 3 >> 0] = 59;
 $12550 = $12547 + 4 | 0;
 HEAP8[$12550 >> 0] = 116;
 HEAP8[$12550 + 1 >> 0] = 59;
 HEAP8[$12550 + 2 >> 0] = 0;
 HEAP8[$12550 + 3 >> 0] = 0;
 $12552 = $$3$i$i2267 + 60 | 0;
 $12553 = $12552;
 HEAP8[$12553 >> 0] = 116;
 HEAP8[$12553 + 1 >> 0] = 59;
 HEAP8[$12553 + 2 >> 0] = 116;
 HEAP8[$12553 + 3 >> 0] = 59;
 $12555 = $12552 + 4 | 0;
 HEAP8[$12555 >> 0] = 116;
 HEAP8[$12555 + 1 >> 0] = 59;
 HEAP8[$12555 + 2 >> 0] = 0;
 HEAP8[$12555 + 3 >> 0] = 0;
 $12557 = $$3$i$i2267 + 68 | 0;
 $12558 = $12557;
 HEAP8[$12558 >> 0] = 116;
 HEAP8[$12558 + 1 >> 0] = 59;
 HEAP8[$12558 + 2 >> 0] = 116;
 HEAP8[$12558 + 3 >> 0] = 59;
 $12560 = $12557 + 4 | 0;
 HEAP8[$12560 >> 0] = 255;
 HEAP8[$12560 + 1 >> 0] = 255;
 HEAP8[$12560 + 2 >> 0] = 0;
 HEAP8[$12560 + 3 >> 0] = 0;
 $12562 = $$3$i$i2267 + 76 | 0;
 $12563 = $12562;
 HEAP8[$12563 >> 0] = 116;
 HEAP8[$12563 + 1 >> 0] = 59;
 HEAP8[$12563 + 2 >> 0] = 116;
 HEAP8[$12563 + 3 >> 0] = 59;
 $12565 = $12562 + 4 | 0;
 HEAP8[$12565 >> 0] = 255;
 HEAP8[$12565 + 1 >> 0] = 255;
 HEAP8[$12565 + 2 >> 0] = 0;
 HEAP8[$12565 + 3 >> 0] = 0;
 $12567 = $$3$i$i2267 + 84 | 0;
 $12568 = $12567;
 HEAP8[$12568 >> 0] = -50316;
 HEAP8[$12568 + 1 >> 0] = -50316 >> 8;
 HEAP8[$12568 + 2 >> 0] = -50316 >> 16;
 HEAP8[$12568 + 3 >> 0] = -50316 >> 24;
 $12570 = $12567 + 4 | 0;
 HEAP8[$12570 >> 0] = 116;
 HEAP8[$12570 + 1 >> 0] = 59;
 HEAP8[$12570 + 2 >> 0] = 0;
 HEAP8[$12570 + 3 >> 0] = 0;
 $12572 = $$3$i$i2267 + 92 | 0;
 $12573 = $12572;
 HEAP8[$12573 >> 0] = -50316;
 HEAP8[$12573 + 1 >> 0] = -50316 >> 8;
 HEAP8[$12573 + 2 >> 0] = -50316 >> 16;
 HEAP8[$12573 + 3 >> 0] = -50316 >> 24;
 $12575 = $12572 + 4 | 0;
 HEAP8[$12575 >> 0] = 116;
 HEAP8[$12575 + 1 >> 0] = 59;
 HEAP8[$12575 + 2 >> 0] = 0;
 HEAP8[$12575 + 3 >> 0] = 0;
 $12577 = $$3$i$i2267 + 100 | 0;
 $12578 = $12577;
 HEAP8[$12578 >> 0] = -50316;
 HEAP8[$12578 + 1 >> 0] = -50316 >> 8;
 HEAP8[$12578 + 2 >> 0] = -50316 >> 16;
 HEAP8[$12578 + 3 >> 0] = -50316 >> 24;
 $12580 = $12577 + 4 | 0;
 HEAP8[$12580 >> 0] = 116;
 HEAP8[$12580 + 1 >> 0] = 59;
 HEAP8[$12580 + 2 >> 0] = 0;
 HEAP8[$12580 + 3 >> 0] = 0;
 $12582 = $$3$i$i2267 + 108 | 0;
 $12583 = $12582;
 HEAP8[$12583 >> 0] = 255;
 HEAP8[$12583 + 1 >> 0] = 255;
 HEAP8[$12583 + 2 >> 0] = 116;
 HEAP8[$12583 + 3 >> 0] = 59;
 $12585 = $12582 + 4 | 0;
 HEAP8[$12585 >> 0] = 116;
 HEAP8[$12585 + 1 >> 0] = 59;
 HEAP8[$12585 + 2 >> 0] = 0;
 HEAP8[$12585 + 3 >> 0] = 0;
 $12587 = $$3$i$i2267 + 116 | 0;
 $12588 = $12587;
 HEAP8[$12588 >> 0] = 255;
 HEAP8[$12588 + 1 >> 0] = 255;
 HEAP8[$12588 + 2 >> 0] = 116;
 HEAP8[$12588 + 3 >> 0] = 59;
 $12590 = $12587 + 4 | 0;
 HEAP8[$12590 >> 0] = 116;
 HEAP8[$12590 + 1 >> 0] = 59;
 HEAP8[$12590 + 2 >> 0] = 0;
 HEAP8[$12590 + 3 >> 0] = 0;
 $12592 = $$3$i$i2267 + 124 | 0;
 $12593 = $12592;
 HEAP8[$12593 >> 0] = 255;
 HEAP8[$12593 + 1 >> 0] = 255;
 HEAP8[$12593 + 2 >> 0] = 116;
 HEAP8[$12593 + 3 >> 0] = 59;
 $12595 = $12592 + 4 | 0;
 HEAP8[$12595 >> 0] = 116;
 HEAP8[$12595 + 1 >> 0] = 59;
 HEAP8[$12595 + 2 >> 0] = 0;
 HEAP8[$12595 + 3 >> 0] = 0;
 $12597 = $$3$i$i2267 + 132 | 0;
 $12598 = $12597;
 HEAP8[$12598 >> 0] = 116;
 HEAP8[$12598 + 1 >> 0] = 59;
 HEAP8[$12598 + 2 >> 0] = 116;
 HEAP8[$12598 + 3 >> 0] = 59;
 $12600 = $12597 + 4 | 0;
 HEAP8[$12600 >> 0] = 116;
 HEAP8[$12600 + 1 >> 0] = 59;
 HEAP8[$12600 + 2 >> 0] = 0;
 HEAP8[$12600 + 3 >> 0] = 0;
 $12602 = $$3$i$i2267 + 140 | 0;
 $12603 = $12602;
 HEAP8[$12603 >> 0] = 116;
 HEAP8[$12603 + 1 >> 0] = 59;
 HEAP8[$12603 + 2 >> 0] = 116;
 HEAP8[$12603 + 3 >> 0] = 59;
 $12605 = $12602 + 4 | 0;
 HEAP8[$12605 >> 0] = 116;
 HEAP8[$12605 + 1 >> 0] = 59;
 HEAP8[$12605 + 2 >> 0] = 0;
 HEAP8[$12605 + 3 >> 0] = 0;
 $12607 = $$3$i$i2267 + 148 | 0;
 $12608 = $12607;
 HEAP8[$12608 >> 0] = 116;
 HEAP8[$12608 + 1 >> 0] = 59;
 HEAP8[$12608 + 2 >> 0] = 116;
 HEAP8[$12608 + 3 >> 0] = 59;
 $12610 = $12607 + 4 | 0;
 HEAP8[$12610 >> 0] = 116;
 HEAP8[$12610 + 1 >> 0] = 59;
 HEAP8[$12610 + 2 >> 0] = 0;
 HEAP8[$12610 + 3 >> 0] = 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $349);
 if ($$3$i$i2267 | 0) {
  $12612 = $$3$i$i2267 + 5 | 0;
  $12614 = (HEAP8[$12612 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$12612 >> 0] = $12614;
  if (!($12614 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2267);
  HEAP32[$349 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 5;
 HEAP16[$bitmapData + 2 >> 1] = 161;
 HEAP16[$bitmapData + 4 >> 1] = 86;
 HEAP16[$bitmapData + 6 >> 1] = 173;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2236) label = 2307; else {
  $12621 = HEAP32[918918] | 0;
  if (($12621 | 0) == (HEAP32[918916] | 0)) label = 2307; else {
   $$lcssa$i$i2279 = 3675672;
   $$lcssa8$i$i2278 = $12621;
   label = 2308;
  }
 }
 do if ((label | 0) == 2307) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2236) {
   $12628 = HEAP32[918924] | 0;
   if (($12628 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2279 = 3675696;
    $$lcssa8$i$i2278 = $12628;
    label = 2308;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2236) {
   $12633 = HEAP32[918930] | 0;
   if (($12633 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2279 = 3675720;
    $$lcssa8$i$i2278 = $12633;
    label = 2308;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2236) {
   $12638 = HEAP32[918936] | 0;
   if (($12638 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2279 = 3675744;
    $$lcssa8$i$i2278 = $12638;
    label = 2308;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2236) {
   $12643 = HEAP32[918942] | 0;
   if (($12643 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2279 = 3675768;
    $$lcssa8$i$i2278 = $12643;
    label = 2308;
    break;
   }
  }
  $$3$i$i2280 = __Znwj(2236) | 0;
 } while (0);
 if ((label | 0) == 2308) {
  $12626 = $$lcssa8$i$i2278 + -4 | 0;
  HEAP32[$$lcssa$i$i2279 >> 2] = $12626;
  $$3$i$i2280 = HEAP32[$12626 >> 2] | 0;
 }
 $12647 = $$3$i$i2280 + 52 | 0;
 HEAP16[$$3$i$i2280 >> 1] = 84;
 HEAP16[$$3$i$i2280 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2280 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2280 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2280 + 8 >> 2] = 168;
 HEAP32[$$3$i$i2280 + 12 >> 2] = 2184;
 HEAP32[$$3$i$i2280 + 16 >> 2] = $12647;
 HEAP32[$$3$i$i2280 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2280 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2280 + 48 >> 0] = 0;
 HEAP32[$350 >> 2] = $$3$i$i2280;
 _memcpy($12647 | 0, 1845728, 168) | 0;
 _memcpy($$3$i$i2280 + 220 | 0, 1845896, 168) | 0;
 _memcpy($$3$i$i2280 + 388 | 0, 1846064, 168) | 0;
 _memcpy($$3$i$i2280 + 556 | 0, 1846232, 168) | 0;
 _memcpy($$3$i$i2280 + 724 | 0, 1846400, 168) | 0;
 _memcpy($$3$i$i2280 + 892 | 0, 1846568, 168) | 0;
 _memcpy($$3$i$i2280 + 1060 | 0, 1846736, 168) | 0;
 _memcpy($$3$i$i2280 + 1228 | 0, 1846904, 168) | 0;
 _memcpy($$3$i$i2280 + 1396 | 0, 1847072, 168) | 0;
 _memcpy($$3$i$i2280 + 1564 | 0, 1847240, 168) | 0;
 _memcpy($$3$i$i2280 + 1732 | 0, 1847408, 168) | 0;
 _memcpy($$3$i$i2280 + 1900 | 0, 1847576, 168) | 0;
 _memcpy($$3$i$i2280 + 2068 | 0, 1847744, 168) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $350);
 if ($$3$i$i2280 | 0) {
  $12670 = $$3$i$i2280 + 5 | 0;
  $12672 = (HEAP8[$12670 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$12670 >> 0] = $12672;
  if (!($12672 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2280);
  HEAP32[$350 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 102;
 HEAP16[$bitmapData + 2 >> 1] = 161;
 HEAP16[$bitmapData + 4 >> 1] = 178;
 HEAP16[$bitmapData + 6 >> 1] = 173;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2132) label = 2323; else {
  $12679 = HEAP32[918918] | 0;
  if (($12679 | 0) == (HEAP32[918916] | 0)) label = 2323; else {
   $$lcssa$i$i2291 = 3675672;
   $$lcssa8$i$i2290 = $12679;
   label = 2324;
  }
 }
 do if ((label | 0) == 2323) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2132) {
   $12686 = HEAP32[918924] | 0;
   if (($12686 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2291 = 3675696;
    $$lcssa8$i$i2290 = $12686;
    label = 2324;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2132) {
   $12691 = HEAP32[918930] | 0;
   if (($12691 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2291 = 3675720;
    $$lcssa8$i$i2290 = $12691;
    label = 2324;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2132) {
   $12696 = HEAP32[918936] | 0;
   if (($12696 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2291 = 3675744;
    $$lcssa8$i$i2290 = $12696;
    label = 2324;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2132) {
   $12701 = HEAP32[918942] | 0;
   if (($12701 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2291 = 3675768;
    $$lcssa8$i$i2290 = $12701;
    label = 2324;
    break;
   }
  }
  $$3$i$i2292 = __Znwj(2132) | 0;
 } while (0);
 if ((label | 0) == 2324) {
  $12684 = $$lcssa8$i$i2290 + -4 | 0;
  HEAP32[$$lcssa$i$i2291 >> 2] = $12684;
  $$3$i$i2292 = HEAP32[$12684 >> 2] | 0;
 }
 $12705 = $$3$i$i2292 + 52 | 0;
 HEAP16[$$3$i$i2292 >> 1] = 80;
 HEAP16[$$3$i$i2292 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2292 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2292 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2292 + 8 >> 2] = 160;
 HEAP32[$$3$i$i2292 + 12 >> 2] = 2080;
 HEAP32[$$3$i$i2292 + 16 >> 2] = $12705;
 HEAP32[$$3$i$i2292 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2292 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2292 + 48 >> 0] = 0;
 HEAP32[$351 >> 2] = $$3$i$i2292;
 _memcpy($12705 | 0, 1847912, 160) | 0;
 _memcpy($$3$i$i2292 + 212 | 0, 1848072, 160) | 0;
 _memcpy($$3$i$i2292 + 372 | 0, 1848232, 160) | 0;
 _memcpy($$3$i$i2292 + 532 | 0, 1848392, 160) | 0;
 _memcpy($$3$i$i2292 + 692 | 0, 1848552, 160) | 0;
 _memcpy($$3$i$i2292 + 852 | 0, 1848712, 160) | 0;
 _memcpy($$3$i$i2292 + 1012 | 0, 1848872, 160) | 0;
 _memcpy($$3$i$i2292 + 1172 | 0, 1849032, 160) | 0;
 _memcpy($$3$i$i2292 + 1332 | 0, 1849192, 160) | 0;
 _memcpy($$3$i$i2292 + 1492 | 0, 1849352, 160) | 0;
 _memcpy($$3$i$i2292 + 1652 | 0, 1849512, 160) | 0;
 _memcpy($$3$i$i2292 + 1812 | 0, 1849672, 160) | 0;
 _memcpy($$3$i$i2292 + 1972 | 0, 1849832, 160) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $351);
 if ($$3$i$i2292 | 0) {
  $12728 = $$3$i$i2292 + 5 | 0;
  $12730 = (HEAP8[$12728 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$12728 >> 0] = $12730;
  if (!($12730 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2292);
  HEAP32[$351 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 115;
 HEAP16[$bitmapData + 2 >> 1] = 110;
 HEAP16[$bitmapData + 4 >> 1] = 162;
 HEAP16[$bitmapData + 6 >> 1] = 157;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4660) label = 2339; else {
  $12737 = HEAP32[918918] | 0;
  if (($12737 | 0) == (HEAP32[918916] | 0)) label = 2339; else {
   $$lcssa$i$i2314 = 3675672;
   $$lcssa8$i$i2313 = $12737;
   label = 2340;
  }
 }
 do if ((label | 0) == 2339) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4660) {
   $12744 = HEAP32[918924] | 0;
   if (($12744 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2314 = 3675696;
    $$lcssa8$i$i2313 = $12744;
    label = 2340;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4660) {
   $12749 = HEAP32[918930] | 0;
   if (($12749 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2314 = 3675720;
    $$lcssa8$i$i2313 = $12749;
    label = 2340;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4660) {
   $12754 = HEAP32[918936] | 0;
   if (($12754 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2314 = 3675744;
    $$lcssa8$i$i2313 = $12754;
    label = 2340;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4660) {
   $12759 = HEAP32[918942] | 0;
   if (($12759 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2314 = 3675768;
    $$lcssa8$i$i2313 = $12759;
    label = 2340;
    break;
   }
  }
  $$3$i$i2315 = __Znwj(4660) | 0;
 } while (0);
 if ((label | 0) == 2340) {
  $12742 = $$lcssa8$i$i2313 + -4 | 0;
  HEAP32[$$lcssa$i$i2314 >> 2] = $12742;
  $$3$i$i2315 = HEAP32[$12742 >> 2] | 0;
 }
 $12763 = $$3$i$i2315 + 52 | 0;
 HEAP16[$$3$i$i2315 >> 1] = 48;
 HEAP16[$$3$i$i2315 + 2 >> 1] = 48;
 HEAP8[$$3$i$i2315 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2315 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2315 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2315 + 12 >> 2] = 4608;
 HEAP32[$$3$i$i2315 + 16 >> 2] = $12763;
 HEAP32[$$3$i$i2315 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2315 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2315 + 48 >> 0] = 0;
 HEAP32[$352 >> 2] = $$3$i$i2315;
 dest = $12763;
 src = 1849992;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 148 | 0;
 src = 1850088;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 244 | 0;
 src = 1850184;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 340 | 0;
 src = 1850280;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 436 | 0;
 src = 1850376;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 532 | 0;
 src = 1850472;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 628 | 0;
 src = 1850568;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 724 | 0;
 src = 1850664;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 820 | 0;
 src = 1850760;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 916 | 0;
 src = 1850856;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1012 | 0;
 src = 1850952;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1108 | 0;
 src = 1851048;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1204 | 0;
 src = 1851144;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1300 | 0;
 src = 1851240;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1396 | 0;
 src = 1851336;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1492 | 0;
 src = 1851432;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1588 | 0;
 src = 1851528;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1684 | 0;
 src = 1851624;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1780 | 0;
 src = 1851720;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1876 | 0;
 src = 1851816;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 1972 | 0;
 src = 1851912;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 2068 | 0;
 src = 1852008;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 2164 | 0;
 src = 1852104;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 2260 | 0;
 src = 1852200;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 2356 | 0;
 src = 1852296;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 2452 | 0;
 src = 1852392;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 2548 | 0;
 src = 1852488;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 2644 | 0;
 src = 1852584;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 2740 | 0;
 src = 1852680;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 2836 | 0;
 src = 1852776;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 2932 | 0;
 src = 1852872;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3028 | 0;
 src = 1852968;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3124 | 0;
 src = 1853064;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3220 | 0;
 src = 1853160;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3316 | 0;
 src = 1853256;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3412 | 0;
 src = 1853352;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3508 | 0;
 src = 1853448;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3604 | 0;
 src = 1853544;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3700 | 0;
 src = 1853640;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3796 | 0;
 src = 1853736;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3892 | 0;
 src = 1853832;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 3988 | 0;
 src = 1853928;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 4084 | 0;
 src = 1854024;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 4180 | 0;
 src = 1854120;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 4276 | 0;
 src = 1854216;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 4372 | 0;
 src = 1854312;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 4468 | 0;
 src = 1854408;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2315 + 4564 | 0;
 src = 1854504;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $352);
 if ($$3$i$i2315 | 0) {
  $12821 = $$3$i$i2315 + 5 | 0;
  $12823 = (HEAP8[$12821 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$12821 >> 0] = $12823;
  if (!($12823 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2315);
  HEAP32[$352 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 102;
 HEAP16[$bitmapData + 2 >> 1] = 58;
 HEAP16[$bitmapData + 4 >> 1] = 181;
 HEAP16[$bitmapData + 6 >> 1] = 70;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2132) label = 2355; else {
  $12830 = HEAP32[918918] | 0;
  if (($12830 | 0) == (HEAP32[918916] | 0)) label = 2355; else {
   $$lcssa$i$i2326 = 3675672;
   $$lcssa8$i$i2325 = $12830;
   label = 2356;
  }
 }
 do if ((label | 0) == 2355) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2132) {
   $12837 = HEAP32[918924] | 0;
   if (($12837 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2326 = 3675696;
    $$lcssa8$i$i2325 = $12837;
    label = 2356;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2132) {
   $12842 = HEAP32[918930] | 0;
   if (($12842 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2326 = 3675720;
    $$lcssa8$i$i2325 = $12842;
    label = 2356;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2132) {
   $12847 = HEAP32[918936] | 0;
   if (($12847 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2326 = 3675744;
    $$lcssa8$i$i2325 = $12847;
    label = 2356;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2132) {
   $12852 = HEAP32[918942] | 0;
   if (($12852 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2326 = 3675768;
    $$lcssa8$i$i2325 = $12852;
    label = 2356;
    break;
   }
  }
  $$3$i$i2327 = __Znwj(2132) | 0;
 } while (0);
 if ((label | 0) == 2356) {
  $12835 = $$lcssa8$i$i2325 + -4 | 0;
  HEAP32[$$lcssa$i$i2326 >> 2] = $12835;
  $$3$i$i2327 = HEAP32[$12835 >> 2] | 0;
 }
 $12856 = $$3$i$i2327 + 52 | 0;
 HEAP16[$$3$i$i2327 >> 1] = 80;
 HEAP16[$$3$i$i2327 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2327 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2327 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2327 + 8 >> 2] = 160;
 HEAP32[$$3$i$i2327 + 12 >> 2] = 2080;
 HEAP32[$$3$i$i2327 + 16 >> 2] = $12856;
 HEAP32[$$3$i$i2327 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2327 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2327 + 48 >> 0] = 0;
 HEAP32[$353 >> 2] = $$3$i$i2327;
 _memcpy($12856 | 0, 1854600, 160) | 0;
 _memcpy($$3$i$i2327 + 212 | 0, 1854760, 160) | 0;
 _memcpy($$3$i$i2327 + 372 | 0, 1854920, 160) | 0;
 _memcpy($$3$i$i2327 + 532 | 0, 1855080, 160) | 0;
 _memcpy($$3$i$i2327 + 692 | 0, 1855240, 160) | 0;
 _memcpy($$3$i$i2327 + 852 | 0, 1855400, 160) | 0;
 _memcpy($$3$i$i2327 + 1012 | 0, 1855560, 160) | 0;
 _memcpy($$3$i$i2327 + 1172 | 0, 1855720, 160) | 0;
 _memcpy($$3$i$i2327 + 1332 | 0, 1855880, 160) | 0;
 _memcpy($$3$i$i2327 + 1492 | 0, 1856040, 160) | 0;
 _memcpy($$3$i$i2327 + 1652 | 0, 1856200, 160) | 0;
 _memcpy($$3$i$i2327 + 1812 | 0, 1856360, 160) | 0;
 _memcpy($$3$i$i2327 + 1972 | 0, 1856520, 160) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $353);
 if ($$3$i$i2327 | 0) {
  $12879 = $$3$i$i2327 + 5 | 0;
  $12881 = (HEAP8[$12879 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$12879 >> 0] = $12881;
  if (!($12881 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2327);
  HEAP32[$353 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 115;
 HEAP16[$bitmapData + 2 >> 1] = 7;
 HEAP16[$bitmapData + 4 >> 1] = 162;
 HEAP16[$bitmapData + 6 >> 1] = 54;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4660) label = 2371; else {
  $12888 = HEAP32[918918] | 0;
  if (($12888 | 0) == (HEAP32[918916] | 0)) label = 2371; else {
   $$lcssa$i$i2339 = 3675672;
   $$lcssa8$i$i2338 = $12888;
   label = 2372;
  }
 }
 do if ((label | 0) == 2371) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4660) {
   $12895 = HEAP32[918924] | 0;
   if (($12895 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2339 = 3675696;
    $$lcssa8$i$i2338 = $12895;
    label = 2372;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4660) {
   $12900 = HEAP32[918930] | 0;
   if (($12900 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2339 = 3675720;
    $$lcssa8$i$i2338 = $12900;
    label = 2372;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4660) {
   $12905 = HEAP32[918936] | 0;
   if (($12905 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2339 = 3675744;
    $$lcssa8$i$i2338 = $12905;
    label = 2372;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4660) {
   $12910 = HEAP32[918942] | 0;
   if (($12910 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2339 = 3675768;
    $$lcssa8$i$i2338 = $12910;
    label = 2372;
    break;
   }
  }
  $$3$i$i2340 = __Znwj(4660) | 0;
 } while (0);
 if ((label | 0) == 2372) {
  $12893 = $$lcssa8$i$i2338 + -4 | 0;
  HEAP32[$$lcssa$i$i2339 >> 2] = $12893;
  $$3$i$i2340 = HEAP32[$12893 >> 2] | 0;
 }
 $12914 = $$3$i$i2340 + 52 | 0;
 HEAP16[$$3$i$i2340 >> 1] = 48;
 HEAP16[$$3$i$i2340 + 2 >> 1] = 48;
 HEAP8[$$3$i$i2340 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2340 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2340 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2340 + 12 >> 2] = 4608;
 HEAP32[$$3$i$i2340 + 16 >> 2] = $12914;
 HEAP32[$$3$i$i2340 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2340 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2340 + 48 >> 0] = 0;
 HEAP32[$354 >> 2] = $$3$i$i2340;
 dest = $12914;
 src = 1856680;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 148 | 0;
 src = 1856776;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 244 | 0;
 src = 1856872;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 340 | 0;
 src = 1856968;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 436 | 0;
 src = 1857064;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 532 | 0;
 src = 1857160;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 628 | 0;
 src = 1857256;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 724 | 0;
 src = 1857352;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 820 | 0;
 src = 1857448;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 916 | 0;
 src = 1857544;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1012 | 0;
 src = 1857640;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1108 | 0;
 src = 1857736;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1204 | 0;
 src = 1857832;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1300 | 0;
 src = 1857928;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1396 | 0;
 src = 1858024;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1492 | 0;
 src = 1858120;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1588 | 0;
 src = 1858216;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1684 | 0;
 src = 1858312;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1780 | 0;
 src = 1858408;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1876 | 0;
 src = 1858504;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 1972 | 0;
 src = 1858600;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 2068 | 0;
 src = 1858696;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 2164 | 0;
 src = 1858792;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 2260 | 0;
 src = 1858888;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 2356 | 0;
 src = 1858984;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 2452 | 0;
 src = 1859080;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 2548 | 0;
 src = 1859176;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 2644 | 0;
 src = 1859272;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 2740 | 0;
 src = 1859368;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 2836 | 0;
 src = 1859464;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 2932 | 0;
 src = 1859560;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3028 | 0;
 src = 1859656;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3124 | 0;
 src = 1859752;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3220 | 0;
 src = 1859848;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3316 | 0;
 src = 1859944;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3412 | 0;
 src = 1860040;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3508 | 0;
 src = 1860136;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3604 | 0;
 src = 1860232;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3700 | 0;
 src = 1860328;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3796 | 0;
 src = 1860424;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3892 | 0;
 src = 1860520;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 3988 | 0;
 src = 1860616;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 4084 | 0;
 src = 1860712;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 4180 | 0;
 src = 1860808;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 4276 | 0;
 src = 1860904;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 4372 | 0;
 src = 1861e3;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 4468 | 0;
 src = 1861096;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2340 + 4564 | 0;
 src = 1861192;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $354);
 if ($$3$i$i2340 | 0) {
  $12972 = $$3$i$i2340 + 5 | 0;
  $12974 = (HEAP8[$12972 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$12972 >> 0] = $12974;
  if (!($12974 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2340);
  HEAP32[$354 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 12;
 HEAP16[$bitmapData + 2 >> 1] = 676;
 HEAP16[$bitmapData + 4 >> 1] = 79;
 HEAP16[$bitmapData + 6 >> 1] = 688;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1820) label = 2387; else {
  $12981 = HEAP32[918918] | 0;
  if (($12981 | 0) == (HEAP32[918916] | 0)) label = 2387; else {
   $$lcssa$i$i2351 = 3675672;
   $$lcssa8$i$i2350 = $12981;
   label = 2388;
  }
 }
 do if ((label | 0) == 2387) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1820) {
   $12988 = HEAP32[918924] | 0;
   if (($12988 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2351 = 3675696;
    $$lcssa8$i$i2350 = $12988;
    label = 2388;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1820) {
   $12993 = HEAP32[918930] | 0;
   if (($12993 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2351 = 3675720;
    $$lcssa8$i$i2350 = $12993;
    label = 2388;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1820) {
   $12998 = HEAP32[918936] | 0;
   if (($12998 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2351 = 3675744;
    $$lcssa8$i$i2350 = $12998;
    label = 2388;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1820) {
   $13003 = HEAP32[918942] | 0;
   if (($13003 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2351 = 3675768;
    $$lcssa8$i$i2350 = $13003;
    label = 2388;
    break;
   }
  }
  $$3$i$i2352 = __Znwj(1820) | 0;
 } while (0);
 if ((label | 0) == 2388) {
  $12986 = $$lcssa8$i$i2350 + -4 | 0;
  HEAP32[$$lcssa$i$i2351 >> 2] = $12986;
  $$3$i$i2352 = HEAP32[$12986 >> 2] | 0;
 }
 $13007 = $$3$i$i2352 + 52 | 0;
 HEAP16[$$3$i$i2352 >> 1] = 68;
 HEAP16[$$3$i$i2352 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2352 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2352 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2352 + 8 >> 2] = 136;
 HEAP32[$$3$i$i2352 + 12 >> 2] = 1768;
 HEAP32[$$3$i$i2352 + 16 >> 2] = $13007;
 HEAP32[$$3$i$i2352 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2352 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2352 + 48 >> 0] = 0;
 HEAP32[$355 >> 2] = $$3$i$i2352;
 _memcpy($13007 | 0, 1861288, 136) | 0;
 _memcpy($$3$i$i2352 + 188 | 0, 1861424, 136) | 0;
 _memcpy($$3$i$i2352 + 324 | 0, 1861560, 136) | 0;
 _memcpy($$3$i$i2352 + 460 | 0, 1861696, 136) | 0;
 _memcpy($$3$i$i2352 + 596 | 0, 1861832, 136) | 0;
 _memcpy($$3$i$i2352 + 732 | 0, 1861968, 136) | 0;
 _memcpy($$3$i$i2352 + 868 | 0, 1862104, 136) | 0;
 _memcpy($$3$i$i2352 + 1004 | 0, 1862240, 136) | 0;
 _memcpy($$3$i$i2352 + 1140 | 0, 1862376, 136) | 0;
 _memcpy($$3$i$i2352 + 1276 | 0, 1862512, 136) | 0;
 _memcpy($$3$i$i2352 + 1412 | 0, 1862648, 136) | 0;
 _memcpy($$3$i$i2352 + 1548 | 0, 1862784, 136) | 0;
 _memcpy($$3$i$i2352 + 1684 | 0, 1862920, 136) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $355);
 if ($$3$i$i2352 | 0) {
  $13030 = $$3$i$i2352 + 5 | 0;
  $13032 = (HEAP8[$13030 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13030 >> 0] = $13032;
  if (!($13032 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2352);
  HEAP32[$355 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 625;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 649;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2452) label = 2403; else {
  $13039 = HEAP32[918918] | 0;
  if (($13039 | 0) == (HEAP32[918916] | 0)) label = 2403; else {
   $$lcssa$i$i2374 = 3675672;
   $$lcssa8$i$i2373 = $13039;
   label = 2404;
  }
 }
 do if ((label | 0) == 2403) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2452) {
   $13046 = HEAP32[918924] | 0;
   if (($13046 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2374 = 3675696;
    $$lcssa8$i$i2373 = $13046;
    label = 2404;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2452) {
   $13051 = HEAP32[918930] | 0;
   if (($13051 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2374 = 3675720;
    $$lcssa8$i$i2373 = $13051;
    label = 2404;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2452) {
   $13056 = HEAP32[918936] | 0;
   if (($13056 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2374 = 3675744;
    $$lcssa8$i$i2373 = $13056;
    label = 2404;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2452) {
   $13061 = HEAP32[918942] | 0;
   if (($13061 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2374 = 3675768;
    $$lcssa8$i$i2373 = $13061;
    label = 2404;
    break;
   }
  }
  $$3$i$i2375 = __Znwj(2452) | 0;
 } while (0);
 if ((label | 0) == 2404) {
  $13044 = $$lcssa8$i$i2373 + -4 | 0;
  HEAP32[$$lcssa$i$i2374 >> 2] = $13044;
  $$3$i$i2375 = HEAP32[$13044 >> 2] | 0;
 }
 $13065 = $$3$i$i2375 + 52 | 0;
 HEAP16[$$3$i$i2375 >> 1] = 48;
 HEAP16[$$3$i$i2375 + 2 >> 1] = 25;
 HEAP8[$$3$i$i2375 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2375 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2375 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2375 + 12 >> 2] = 2400;
 HEAP32[$$3$i$i2375 + 16 >> 2] = $13065;
 HEAP32[$$3$i$i2375 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2375 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2375 + 48 >> 0] = 0;
 HEAP32[$356 >> 2] = $$3$i$i2375;
 dest = $13065;
 src = 1863056;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 148 | 0;
 src = 1863152;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 244 | 0;
 src = 1863248;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 340 | 0;
 src = 1863344;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 436 | 0;
 src = 1863440;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 532 | 0;
 src = 1863536;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 628 | 0;
 src = 1863632;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 724 | 0;
 src = 1863728;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 820 | 0;
 src = 1863824;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 916 | 0;
 src = 1863920;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1012 | 0;
 src = 1864016;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1108 | 0;
 src = 1864112;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1204 | 0;
 src = 1864208;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1300 | 0;
 src = 1864304;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1396 | 0;
 src = 1864400;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1492 | 0;
 src = 1864496;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1588 | 0;
 src = 1864592;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1684 | 0;
 src = 1864688;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1780 | 0;
 src = 1864784;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1876 | 0;
 src = 1864880;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 1972 | 0;
 src = 1864976;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 2068 | 0;
 src = 1865072;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 2164 | 0;
 src = 1865168;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 2260 | 0;
 src = 1865264;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2375 + 2356 | 0;
 src = 1865360;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $356);
 if ($$3$i$i2375 | 0) {
  $13100 = $$3$i$i2375 + 5 | 0;
  $13102 = (HEAP8[$13100 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13100 >> 0] = $13102;
  if (!($13102 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2375);
  HEAP32[$356 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 650;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 661;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1204) label = 2419; else {
  $13109 = HEAP32[918918] | 0;
  if (($13109 | 0) == (HEAP32[918916] | 0)) label = 2419; else {
   $$lcssa$i$i2386 = 3675672;
   $$lcssa8$i$i2385 = $13109;
   label = 2420;
  }
 }
 do if ((label | 0) == 2419) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1204) {
   $13116 = HEAP32[918924] | 0;
   if (($13116 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2386 = 3675696;
    $$lcssa8$i$i2385 = $13116;
    label = 2420;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1204) {
   $13121 = HEAP32[918930] | 0;
   if (($13121 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2386 = 3675720;
    $$lcssa8$i$i2385 = $13121;
    label = 2420;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1204) {
   $13126 = HEAP32[918936] | 0;
   if (($13126 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2386 = 3675744;
    $$lcssa8$i$i2385 = $13126;
    label = 2420;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1204) {
   $13131 = HEAP32[918942] | 0;
   if (($13131 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2386 = 3675768;
    $$lcssa8$i$i2385 = $13131;
    label = 2420;
    break;
   }
  }
  $$3$i$i2387 = __Znwj(1204) | 0;
 } while (0);
 if ((label | 0) == 2420) {
  $13114 = $$lcssa8$i$i2385 + -4 | 0;
  HEAP32[$$lcssa$i$i2386 >> 2] = $13114;
  $$3$i$i2387 = HEAP32[$13114 >> 2] | 0;
 }
 $13135 = $$3$i$i2387 + 52 | 0;
 HEAP16[$$3$i$i2387 >> 1] = 48;
 HEAP16[$$3$i$i2387 + 2 >> 1] = 12;
 HEAP8[$$3$i$i2387 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2387 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2387 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2387 + 12 >> 2] = 1152;
 HEAP32[$$3$i$i2387 + 16 >> 2] = $13135;
 HEAP32[$$3$i$i2387 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2387 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2387 + 48 >> 0] = 0;
 HEAP32[$357 >> 2] = $$3$i$i2387;
 dest = $13135;
 src = 1865456;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 148 | 0;
 src = 1865552;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 244 | 0;
 src = 1865648;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 340 | 0;
 src = 1865744;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 436 | 0;
 src = 1865840;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 532 | 0;
 src = 1865936;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 628 | 0;
 src = 1866032;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 724 | 0;
 src = 1866128;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 820 | 0;
 src = 1866224;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 916 | 0;
 src = 1866320;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 1012 | 0;
 src = 1866416;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2387 + 1108 | 0;
 src = 1866512;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $357);
 if ($$3$i$i2387 | 0) {
  $13157 = $$3$i$i2387 + 5 | 0;
  $13159 = (HEAP8[$13157 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13157 >> 0] = $13159;
  if (!($13159 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2387);
  HEAP32[$357 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 662;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 662;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 148) label = 2435; else {
  $13166 = HEAP32[918918] | 0;
  if (($13166 | 0) == (HEAP32[918916] | 0)) label = 2435; else {
   $$lcssa$i$i2399 = 3675672;
   $$lcssa8$i$i2398 = $13166;
   label = 2436;
  }
 }
 do if ((label | 0) == 2435) {
  if ((HEAP32[918925] | 0) >>> 0 >= 148) {
   $13173 = HEAP32[918924] | 0;
   if (($13173 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2399 = 3675696;
    $$lcssa8$i$i2398 = $13173;
    label = 2436;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 148) {
   $13178 = HEAP32[918930] | 0;
   if (($13178 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2399 = 3675720;
    $$lcssa8$i$i2398 = $13178;
    label = 2436;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 148) {
   $13183 = HEAP32[918936] | 0;
   if (($13183 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2399 = 3675744;
    $$lcssa8$i$i2398 = $13183;
    label = 2436;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 148) {
   $13188 = HEAP32[918942] | 0;
   if (($13188 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2399 = 3675768;
    $$lcssa8$i$i2398 = $13188;
    label = 2436;
    break;
   }
  }
  $$3$i$i2400 = __Znwj(148) | 0;
 } while (0);
 if ((label | 0) == 2436) {
  $13171 = $$lcssa8$i$i2398 + -4 | 0;
  HEAP32[$$lcssa$i$i2399 >> 2] = $13171;
  $$3$i$i2400 = HEAP32[$13171 >> 2] | 0;
 }
 $13192 = $$3$i$i2400 + 52 | 0;
 HEAP16[$$3$i$i2400 >> 1] = 48;
 HEAP16[$$3$i$i2400 + 2 >> 1] = 1;
 HEAP8[$$3$i$i2400 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2400 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2400 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2400 + 12 >> 2] = 96;
 HEAP32[$$3$i$i2400 + 16 >> 2] = $13192;
 HEAP32[$$3$i$i2400 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2400 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2400 + 48 >> 0] = 0;
 HEAP32[$358 >> 2] = $$3$i$i2400;
 dest = $13192;
 src = 1866608;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $358);
 if ($$3$i$i2400 | 0) {
  $13203 = $$3$i$i2400 + 5 | 0;
  $13205 = (HEAP8[$13203 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13203 >> 0] = $13205;
  if (!($13205 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2400);
  HEAP32[$358 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 663;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 672;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1012) label = 2451; else {
  $13212 = HEAP32[918918] | 0;
  if (($13212 | 0) == (HEAP32[918916] | 0)) label = 2451; else {
   $$lcssa$i$i2411 = 3675672;
   $$lcssa8$i$i2410 = $13212;
   label = 2452;
  }
 }
 do if ((label | 0) == 2451) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1012) {
   $13219 = HEAP32[918924] | 0;
   if (($13219 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2411 = 3675696;
    $$lcssa8$i$i2410 = $13219;
    label = 2452;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1012) {
   $13224 = HEAP32[918930] | 0;
   if (($13224 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2411 = 3675720;
    $$lcssa8$i$i2410 = $13224;
    label = 2452;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1012) {
   $13229 = HEAP32[918936] | 0;
   if (($13229 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2411 = 3675744;
    $$lcssa8$i$i2410 = $13229;
    label = 2452;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1012) {
   $13234 = HEAP32[918942] | 0;
   if (($13234 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2411 = 3675768;
    $$lcssa8$i$i2410 = $13234;
    label = 2452;
    break;
   }
  }
  $$3$i$i2412 = __Znwj(1012) | 0;
 } while (0);
 if ((label | 0) == 2452) {
  $13217 = $$lcssa8$i$i2410 + -4 | 0;
  HEAP32[$$lcssa$i$i2411 >> 2] = $13217;
  $$3$i$i2412 = HEAP32[$13217 >> 2] | 0;
 }
 $13238 = $$3$i$i2412 + 52 | 0;
 HEAP16[$$3$i$i2412 >> 1] = 48;
 HEAP16[$$3$i$i2412 + 2 >> 1] = 10;
 HEAP8[$$3$i$i2412 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2412 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2412 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2412 + 12 >> 2] = 960;
 HEAP32[$$3$i$i2412 + 16 >> 2] = $13238;
 HEAP32[$$3$i$i2412 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2412 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2412 + 48 >> 0] = 0;
 HEAP32[$359 >> 2] = $$3$i$i2412;
 dest = $13238;
 src = 1866704;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2412 + 148 | 0;
 src = 1866800;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2412 + 244 | 0;
 src = 1866896;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2412 + 340 | 0;
 src = 1866992;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2412 + 436 | 0;
 src = 1867088;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2412 + 532 | 0;
 src = 1867184;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2412 + 628 | 0;
 src = 1867280;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2412 + 724 | 0;
 src = 1867376;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2412 + 820 | 0;
 src = 1867472;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2412 + 916 | 0;
 src = 1867568;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $359);
 if ($$3$i$i2412 | 0) {
  $13258 = $$3$i$i2412 + 5 | 0;
  $13260 = (HEAP8[$13258 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13258 >> 0] = $13260;
  if (!($13260 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2412);
  HEAP32[$359 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 28;
 HEAP16[$bitmapData + 2 >> 1] = 573;
 HEAP16[$bitmapData + 4 >> 1] = 63;
 HEAP16[$bitmapData + 6 >> 1] = 585;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 988) label = 2467; else {
  $13267 = HEAP32[918918] | 0;
  if (($13267 | 0) == (HEAP32[918916] | 0)) label = 2467; else {
   $$lcssa$i$i2434 = 3675672;
   $$lcssa8$i$i2433 = $13267;
   label = 2468;
  }
 }
 do if ((label | 0) == 2467) {
  if ((HEAP32[918925] | 0) >>> 0 >= 988) {
   $13274 = HEAP32[918924] | 0;
   if (($13274 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2434 = 3675696;
    $$lcssa8$i$i2433 = $13274;
    label = 2468;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 988) {
   $13279 = HEAP32[918930] | 0;
   if (($13279 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2434 = 3675720;
    $$lcssa8$i$i2433 = $13279;
    label = 2468;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 988) {
   $13284 = HEAP32[918936] | 0;
   if (($13284 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2434 = 3675744;
    $$lcssa8$i$i2433 = $13284;
    label = 2468;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 988) {
   $13289 = HEAP32[918942] | 0;
   if (($13289 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2434 = 3675768;
    $$lcssa8$i$i2433 = $13289;
    label = 2468;
    break;
   }
  }
  $$3$i$i2435 = __Znwj(988) | 0;
 } while (0);
 if ((label | 0) == 2468) {
  $13272 = $$lcssa8$i$i2433 + -4 | 0;
  HEAP32[$$lcssa$i$i2434 >> 2] = $13272;
  $$3$i$i2435 = HEAP32[$13272 >> 2] | 0;
 }
 $13293 = $$3$i$i2435 + 52 | 0;
 HEAP16[$$3$i$i2435 >> 1] = 36;
 HEAP16[$$3$i$i2435 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2435 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2435 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2435 + 8 >> 2] = 72;
 HEAP32[$$3$i$i2435 + 12 >> 2] = 936;
 HEAP32[$$3$i$i2435 + 16 >> 2] = $13293;
 HEAP32[$$3$i$i2435 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2435 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2435 + 48 >> 0] = 0;
 HEAP32[$360 >> 2] = $$3$i$i2435;
 dest = $13293;
 src = 1867664;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 124 | 0;
 src = 1867736;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 196 | 0;
 src = 1867808;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 268 | 0;
 src = 1867880;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 340 | 0;
 src = 1867952;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 412 | 0;
 src = 1868024;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 484 | 0;
 src = 1868096;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 556 | 0;
 src = 1868168;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 628 | 0;
 src = 1868240;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 700 | 0;
 src = 1868312;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 772 | 0;
 src = 1868384;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 844 | 0;
 src = 1868456;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2435 + 916 | 0;
 src = 1868528;
 stop = dest + 72 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $360);
 if ($$3$i$i2435 | 0) {
  $13316 = $$3$i$i2435 + 5 | 0;
  $13318 = (HEAP8[$13316 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13316 >> 0] = $13318;
  if (!($13318 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2435);
  HEAP32[$360 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 522;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 569;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4660) label = 2483; else {
  $13325 = HEAP32[918918] | 0;
  if (($13325 | 0) == (HEAP32[918916] | 0)) label = 2483; else {
   $$lcssa$i$i2446 = 3675672;
   $$lcssa8$i$i2445 = $13325;
   label = 2484;
  }
 }
 do if ((label | 0) == 2483) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4660) {
   $13332 = HEAP32[918924] | 0;
   if (($13332 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2446 = 3675696;
    $$lcssa8$i$i2445 = $13332;
    label = 2484;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4660) {
   $13337 = HEAP32[918930] | 0;
   if (($13337 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2446 = 3675720;
    $$lcssa8$i$i2445 = $13337;
    label = 2484;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4660) {
   $13342 = HEAP32[918936] | 0;
   if (($13342 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2446 = 3675744;
    $$lcssa8$i$i2445 = $13342;
    label = 2484;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4660) {
   $13347 = HEAP32[918942] | 0;
   if (($13347 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2446 = 3675768;
    $$lcssa8$i$i2445 = $13347;
    label = 2484;
    break;
   }
  }
  $$3$i$i2447 = __Znwj(4660) | 0;
 } while (0);
 if ((label | 0) == 2484) {
  $13330 = $$lcssa8$i$i2445 + -4 | 0;
  HEAP32[$$lcssa$i$i2446 >> 2] = $13330;
  $$3$i$i2447 = HEAP32[$13330 >> 2] | 0;
 }
 $13351 = $$3$i$i2447 + 52 | 0;
 HEAP16[$$3$i$i2447 >> 1] = 48;
 HEAP16[$$3$i$i2447 + 2 >> 1] = 48;
 HEAP8[$$3$i$i2447 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2447 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2447 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2447 + 12 >> 2] = 4608;
 HEAP32[$$3$i$i2447 + 16 >> 2] = $13351;
 HEAP32[$$3$i$i2447 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2447 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2447 + 48 >> 0] = 0;
 HEAP32[$361 >> 2] = $$3$i$i2447;
 dest = $13351;
 src = 1868600;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 148 | 0;
 src = 1868696;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 244 | 0;
 src = 1868792;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 340 | 0;
 src = 1868888;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 436 | 0;
 src = 1868984;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 532 | 0;
 src = 1869080;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 628 | 0;
 src = 1869176;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 724 | 0;
 src = 1869272;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 820 | 0;
 src = 1869368;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 916 | 0;
 src = 1869464;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1012 | 0;
 src = 1869560;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1108 | 0;
 src = 1869656;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1204 | 0;
 src = 1869752;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1300 | 0;
 src = 1869848;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1396 | 0;
 src = 1869944;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1492 | 0;
 src = 1870040;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1588 | 0;
 src = 1870136;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1684 | 0;
 src = 1870232;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1780 | 0;
 src = 1870328;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1876 | 0;
 src = 1870424;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 1972 | 0;
 src = 1870520;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 2068 | 0;
 src = 1870616;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 2164 | 0;
 src = 1870712;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 2260 | 0;
 src = 1870808;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 2356 | 0;
 src = 1870904;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 2452 | 0;
 src = 1871e3;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 2548 | 0;
 src = 1871096;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 2644 | 0;
 src = 1871192;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 2740 | 0;
 src = 1871288;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 2836 | 0;
 src = 1871384;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 2932 | 0;
 src = 1871480;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3028 | 0;
 src = 1871576;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3124 | 0;
 src = 1871672;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3220 | 0;
 src = 1871768;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3316 | 0;
 src = 1871864;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3412 | 0;
 src = 1871960;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3508 | 0;
 src = 1872056;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3604 | 0;
 src = 1872152;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3700 | 0;
 src = 1872248;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3796 | 0;
 src = 1872344;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3892 | 0;
 src = 1872440;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 3988 | 0;
 src = 1872536;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 4084 | 0;
 src = 1872632;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 4180 | 0;
 src = 1872728;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 4276 | 0;
 src = 1872824;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 4372 | 0;
 src = 1872920;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 4468 | 0;
 src = 1873016;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2447 + 4564 | 0;
 src = 1873112;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $361);
 if ($$3$i$i2447 | 0) {
  $13409 = $$3$i$i2447 + 5 | 0;
  $13411 = (HEAP8[$13409 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13409 >> 0] = $13411;
  if (!($13411 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2447);
  HEAP32[$361 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 24;
 HEAP16[$bitmapData + 2 >> 1] = 470;
 HEAP16[$bitmapData + 4 >> 1] = 67;
 HEAP16[$bitmapData + 6 >> 1] = 482;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1196) label = 2499; else {
  $13418 = HEAP32[918918] | 0;
  if (($13418 | 0) == (HEAP32[918916] | 0)) label = 2499; else {
   $$lcssa$i$i2459 = 3675672;
   $$lcssa8$i$i2458 = $13418;
   label = 2500;
  }
 }
 do if ((label | 0) == 2499) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1196) {
   $13425 = HEAP32[918924] | 0;
   if (($13425 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2459 = 3675696;
    $$lcssa8$i$i2458 = $13425;
    label = 2500;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1196) {
   $13430 = HEAP32[918930] | 0;
   if (($13430 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2459 = 3675720;
    $$lcssa8$i$i2458 = $13430;
    label = 2500;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1196) {
   $13435 = HEAP32[918936] | 0;
   if (($13435 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2459 = 3675744;
    $$lcssa8$i$i2458 = $13435;
    label = 2500;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1196) {
   $13440 = HEAP32[918942] | 0;
   if (($13440 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2459 = 3675768;
    $$lcssa8$i$i2458 = $13440;
    label = 2500;
    break;
   }
  }
  $$3$i$i2460 = __Znwj(1196) | 0;
 } while (0);
 if ((label | 0) == 2500) {
  $13423 = $$lcssa8$i$i2458 + -4 | 0;
  HEAP32[$$lcssa$i$i2459 >> 2] = $13423;
  $$3$i$i2460 = HEAP32[$13423 >> 2] | 0;
 }
 $13444 = $$3$i$i2460 + 52 | 0;
 HEAP16[$$3$i$i2460 >> 1] = 44;
 HEAP16[$$3$i$i2460 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2460 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2460 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2460 + 8 >> 2] = 88;
 HEAP32[$$3$i$i2460 + 12 >> 2] = 1144;
 HEAP32[$$3$i$i2460 + 16 >> 2] = $13444;
 HEAP32[$$3$i$i2460 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2460 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2460 + 48 >> 0] = 0;
 HEAP32[$362 >> 2] = $$3$i$i2460;
 dest = $13444;
 src = 1873208;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 140 | 0;
 src = 1873296;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 228 | 0;
 src = 1873384;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 316 | 0;
 src = 1873472;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 404 | 0;
 src = 1873560;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 492 | 0;
 src = 1873648;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 580 | 0;
 src = 1873736;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 668 | 0;
 src = 1873824;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 756 | 0;
 src = 1873912;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 844 | 0;
 src = 1874e3;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 932 | 0;
 src = 1874088;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 1020 | 0;
 src = 1874176;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2460 + 1108 | 0;
 src = 1874264;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $362);
 if ($$3$i$i2460 | 0) {
  $13467 = $$3$i$i2460 + 5 | 0;
  $13469 = (HEAP8[$13467 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13467 >> 0] = $13469;
  if (!($13469 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2460);
  HEAP32[$362 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 419;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 466;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4660) label = 2515; else {
  $13476 = HEAP32[918918] | 0;
  if (($13476 | 0) == (HEAP32[918916] | 0)) label = 2515; else {
   $$lcssa$i$i2471 = 3675672;
   $$lcssa8$i$i2470 = $13476;
   label = 2516;
  }
 }
 do if ((label | 0) == 2515) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4660) {
   $13483 = HEAP32[918924] | 0;
   if (($13483 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2471 = 3675696;
    $$lcssa8$i$i2470 = $13483;
    label = 2516;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4660) {
   $13488 = HEAP32[918930] | 0;
   if (($13488 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2471 = 3675720;
    $$lcssa8$i$i2470 = $13488;
    label = 2516;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4660) {
   $13493 = HEAP32[918936] | 0;
   if (($13493 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2471 = 3675744;
    $$lcssa8$i$i2470 = $13493;
    label = 2516;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4660) {
   $13498 = HEAP32[918942] | 0;
   if (($13498 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2471 = 3675768;
    $$lcssa8$i$i2470 = $13498;
    label = 2516;
    break;
   }
  }
  $$3$i$i2472 = __Znwj(4660) | 0;
 } while (0);
 if ((label | 0) == 2516) {
  $13481 = $$lcssa8$i$i2470 + -4 | 0;
  HEAP32[$$lcssa$i$i2471 >> 2] = $13481;
  $$3$i$i2472 = HEAP32[$13481 >> 2] | 0;
 }
 $13502 = $$3$i$i2472 + 52 | 0;
 HEAP16[$$3$i$i2472 >> 1] = 48;
 HEAP16[$$3$i$i2472 + 2 >> 1] = 48;
 HEAP8[$$3$i$i2472 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2472 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2472 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2472 + 12 >> 2] = 4608;
 HEAP32[$$3$i$i2472 + 16 >> 2] = $13502;
 HEAP32[$$3$i$i2472 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2472 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2472 + 48 >> 0] = 0;
 HEAP32[$363 >> 2] = $$3$i$i2472;
 dest = $13502;
 src = 1874352;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 148 | 0;
 src = 1874448;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 244 | 0;
 src = 1874544;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 340 | 0;
 src = 1874640;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 436 | 0;
 src = 1874736;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 532 | 0;
 src = 1874832;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 628 | 0;
 src = 1874928;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 724 | 0;
 src = 1875024;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 820 | 0;
 src = 1875120;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 916 | 0;
 src = 1875216;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1012 | 0;
 src = 1875312;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1108 | 0;
 src = 1875408;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1204 | 0;
 src = 1875504;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1300 | 0;
 src = 1875600;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1396 | 0;
 src = 1875696;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1492 | 0;
 src = 1875792;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1588 | 0;
 src = 1875888;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1684 | 0;
 src = 1875984;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1780 | 0;
 src = 1876080;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1876 | 0;
 src = 1876176;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 1972 | 0;
 src = 1876272;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 2068 | 0;
 src = 1876368;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 2164 | 0;
 src = 1876464;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 2260 | 0;
 src = 1876560;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 2356 | 0;
 src = 1876656;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 2452 | 0;
 src = 1876752;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 2548 | 0;
 src = 1876848;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 2644 | 0;
 src = 1876944;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 2740 | 0;
 src = 1877040;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 2836 | 0;
 src = 1877136;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 2932 | 0;
 src = 1877232;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3028 | 0;
 src = 1877328;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3124 | 0;
 src = 1877424;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3220 | 0;
 src = 1877520;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3316 | 0;
 src = 1877616;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3412 | 0;
 src = 1877712;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3508 | 0;
 src = 1877808;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3604 | 0;
 src = 1877904;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3700 | 0;
 src = 1878e3;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3796 | 0;
 src = 1878096;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3892 | 0;
 src = 1878192;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 3988 | 0;
 src = 1878288;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 4084 | 0;
 src = 1878384;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 4180 | 0;
 src = 1878480;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 4276 | 0;
 src = 1878576;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 4372 | 0;
 src = 1878672;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 4468 | 0;
 src = 1878768;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2472 + 4564 | 0;
 src = 1878864;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $363);
 if ($$3$i$i2472 | 0) {
  $13560 = $$3$i$i2472 + 5 | 0;
  $13562 = (HEAP8[$13560 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13560 >> 0] = $13562;
  if (!($13562 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2472);
  HEAP32[$363 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 3;
 HEAP16[$bitmapData + 2 >> 1] = 367;
 HEAP16[$bitmapData + 4 >> 1] = 88;
 HEAP16[$bitmapData + 6 >> 1] = 379;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2340) label = 2531; else {
  $13569 = HEAP32[918918] | 0;
  if (($13569 | 0) == (HEAP32[918916] | 0)) label = 2531; else {
   $$lcssa$i$i2494 = 3675672;
   $$lcssa8$i$i2493 = $13569;
   label = 2532;
  }
 }
 do if ((label | 0) == 2531) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2340) {
   $13576 = HEAP32[918924] | 0;
   if (($13576 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2494 = 3675696;
    $$lcssa8$i$i2493 = $13576;
    label = 2532;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2340) {
   $13581 = HEAP32[918930] | 0;
   if (($13581 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2494 = 3675720;
    $$lcssa8$i$i2493 = $13581;
    label = 2532;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2340) {
   $13586 = HEAP32[918936] | 0;
   if (($13586 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2494 = 3675744;
    $$lcssa8$i$i2493 = $13586;
    label = 2532;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2340) {
   $13591 = HEAP32[918942] | 0;
   if (($13591 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2494 = 3675768;
    $$lcssa8$i$i2493 = $13591;
    label = 2532;
    break;
   }
  }
  $$3$i$i2495 = __Znwj(2340) | 0;
 } while (0);
 if ((label | 0) == 2532) {
  $13574 = $$lcssa8$i$i2493 + -4 | 0;
  HEAP32[$$lcssa$i$i2494 >> 2] = $13574;
  $$3$i$i2495 = HEAP32[$13574 >> 2] | 0;
 }
 $13595 = $$3$i$i2495 + 52 | 0;
 HEAP16[$$3$i$i2495 >> 1] = 88;
 HEAP16[$$3$i$i2495 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2495 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2495 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2495 + 8 >> 2] = 176;
 HEAP32[$$3$i$i2495 + 12 >> 2] = 2288;
 HEAP32[$$3$i$i2495 + 16 >> 2] = $13595;
 HEAP32[$$3$i$i2495 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2495 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2495 + 48 >> 0] = 0;
 HEAP32[$364 >> 2] = $$3$i$i2495;
 _memcpy($13595 | 0, 1878960, 176) | 0;
 _memcpy($$3$i$i2495 + 228 | 0, 1879136, 176) | 0;
 _memcpy($$3$i$i2495 + 404 | 0, 1879312, 176) | 0;
 _memcpy($$3$i$i2495 + 580 | 0, 1879488, 176) | 0;
 _memcpy($$3$i$i2495 + 756 | 0, 1879664, 176) | 0;
 _memcpy($$3$i$i2495 + 932 | 0, 1879840, 176) | 0;
 _memcpy($$3$i$i2495 + 1108 | 0, 1880016, 176) | 0;
 _memcpy($$3$i$i2495 + 1284 | 0, 1880192, 176) | 0;
 _memcpy($$3$i$i2495 + 1460 | 0, 1880368, 176) | 0;
 _memcpy($$3$i$i2495 + 1636 | 0, 1880544, 176) | 0;
 _memcpy($$3$i$i2495 + 1812 | 0, 1880720, 176) | 0;
 _memcpy($$3$i$i2495 + 1988 | 0, 1880896, 176) | 0;
 _memcpy($$3$i$i2495 + 2164 | 0, 1881072, 176) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $364);
 if ($$3$i$i2495 | 0) {
  $13618 = $$3$i$i2495 + 5 | 0;
  $13620 = (HEAP8[$13618 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13618 >> 0] = $13620;
  if (!($13620 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2495);
  HEAP32[$364 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 316;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 327;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1204) label = 2547; else {
  $13627 = HEAP32[918918] | 0;
  if (($13627 | 0) == (HEAP32[918916] | 0)) label = 2547; else {
   $$lcssa$i$i2506 = 3675672;
   $$lcssa8$i$i2505 = $13627;
   label = 2548;
  }
 }
 do if ((label | 0) == 2547) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1204) {
   $13634 = HEAP32[918924] | 0;
   if (($13634 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2506 = 3675696;
    $$lcssa8$i$i2505 = $13634;
    label = 2548;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1204) {
   $13639 = HEAP32[918930] | 0;
   if (($13639 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2506 = 3675720;
    $$lcssa8$i$i2505 = $13639;
    label = 2548;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1204) {
   $13644 = HEAP32[918936] | 0;
   if (($13644 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2506 = 3675744;
    $$lcssa8$i$i2505 = $13644;
    label = 2548;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1204) {
   $13649 = HEAP32[918942] | 0;
   if (($13649 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2506 = 3675768;
    $$lcssa8$i$i2505 = $13649;
    label = 2548;
    break;
   }
  }
  $$3$i$i2507 = __Znwj(1204) | 0;
 } while (0);
 if ((label | 0) == 2548) {
  $13632 = $$lcssa8$i$i2505 + -4 | 0;
  HEAP32[$$lcssa$i$i2506 >> 2] = $13632;
  $$3$i$i2507 = HEAP32[$13632 >> 2] | 0;
 }
 $13653 = $$3$i$i2507 + 52 | 0;
 HEAP16[$$3$i$i2507 >> 1] = 48;
 HEAP16[$$3$i$i2507 + 2 >> 1] = 12;
 HEAP8[$$3$i$i2507 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2507 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2507 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2507 + 12 >> 2] = 1152;
 HEAP32[$$3$i$i2507 + 16 >> 2] = $13653;
 HEAP32[$$3$i$i2507 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2507 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2507 + 48 >> 0] = 0;
 HEAP32[$365 >> 2] = $$3$i$i2507;
 dest = $13653;
 src = 1881248;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 148 | 0;
 src = 1881344;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 244 | 0;
 src = 1881440;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 340 | 0;
 src = 1881536;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 436 | 0;
 src = 1881632;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 532 | 0;
 src = 1881728;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 628 | 0;
 src = 1881824;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 724 | 0;
 src = 1881920;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 820 | 0;
 src = 1882016;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 916 | 0;
 src = 1882112;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 1012 | 0;
 src = 1882208;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2507 + 1108 | 0;
 src = 1882304;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $365);
 if ($$3$i$i2507 | 0) {
  $13675 = $$3$i$i2507 + 5 | 0;
  $13677 = (HEAP8[$13675 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13675 >> 0] = $13677;
  if (!($13677 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2507);
  HEAP32[$365 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 328;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 333;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 628) label = 2563; else {
  $13684 = HEAP32[918918] | 0;
  if (($13684 | 0) == (HEAP32[918916] | 0)) label = 2563; else {
   $$lcssa$i$i2519 = 3675672;
   $$lcssa8$i$i2518 = $13684;
   label = 2564;
  }
 }
 do if ((label | 0) == 2563) {
  if ((HEAP32[918925] | 0) >>> 0 >= 628) {
   $13691 = HEAP32[918924] | 0;
   if (($13691 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2519 = 3675696;
    $$lcssa8$i$i2518 = $13691;
    label = 2564;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 628) {
   $13696 = HEAP32[918930] | 0;
   if (($13696 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2519 = 3675720;
    $$lcssa8$i$i2518 = $13696;
    label = 2564;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 628) {
   $13701 = HEAP32[918936] | 0;
   if (($13701 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2519 = 3675744;
    $$lcssa8$i$i2518 = $13701;
    label = 2564;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 628) {
   $13706 = HEAP32[918942] | 0;
   if (($13706 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2519 = 3675768;
    $$lcssa8$i$i2518 = $13706;
    label = 2564;
    break;
   }
  }
  $$3$i$i2520 = __Znwj(628) | 0;
 } while (0);
 if ((label | 0) == 2564) {
  $13689 = $$lcssa8$i$i2518 + -4 | 0;
  HEAP32[$$lcssa$i$i2519 >> 2] = $13689;
  $$3$i$i2520 = HEAP32[$13689 >> 2] | 0;
 }
 $13710 = $$3$i$i2520 + 52 | 0;
 HEAP16[$$3$i$i2520 >> 1] = 48;
 HEAP16[$$3$i$i2520 + 2 >> 1] = 6;
 HEAP8[$$3$i$i2520 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2520 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2520 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2520 + 12 >> 2] = 576;
 HEAP32[$$3$i$i2520 + 16 >> 2] = $13710;
 HEAP32[$$3$i$i2520 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2520 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2520 + 48 >> 0] = 0;
 HEAP32[$366 >> 2] = $$3$i$i2520;
 dest = $13710;
 src = 1882400;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2520 + 148 | 0;
 src = 1882496;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2520 + 244 | 0;
 src = 1882592;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2520 + 340 | 0;
 src = 1882688;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2520 + 436 | 0;
 src = 1882784;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2520 + 532 | 0;
 src = 1882880;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $366);
 if ($$3$i$i2520 | 0) {
  $13726 = $$3$i$i2520 + 5 | 0;
  $13728 = (HEAP8[$13726 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13726 >> 0] = $13728;
  if (!($13728 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2520);
  HEAP32[$366 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 334;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 336;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 340) label = 2579; else {
  $13735 = HEAP32[918918] | 0;
  if (($13735 | 0) == (HEAP32[918916] | 0)) label = 2579; else {
   $$lcssa$i$i2531 = 3675672;
   $$lcssa8$i$i2530 = $13735;
   label = 2580;
  }
 }
 do if ((label | 0) == 2579) {
  if ((HEAP32[918925] | 0) >>> 0 >= 340) {
   $13742 = HEAP32[918924] | 0;
   if (($13742 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2531 = 3675696;
    $$lcssa8$i$i2530 = $13742;
    label = 2580;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 340) {
   $13747 = HEAP32[918930] | 0;
   if (($13747 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2531 = 3675720;
    $$lcssa8$i$i2530 = $13747;
    label = 2580;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 340) {
   $13752 = HEAP32[918936] | 0;
   if (($13752 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2531 = 3675744;
    $$lcssa8$i$i2530 = $13752;
    label = 2580;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 340) {
   $13757 = HEAP32[918942] | 0;
   if (($13757 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2531 = 3675768;
    $$lcssa8$i$i2530 = $13757;
    label = 2580;
    break;
   }
  }
  $$3$i$i2532 = __Znwj(340) | 0;
 } while (0);
 if ((label | 0) == 2580) {
  $13740 = $$lcssa8$i$i2530 + -4 | 0;
  HEAP32[$$lcssa$i$i2531 >> 2] = $13740;
  $$3$i$i2532 = HEAP32[$13740 >> 2] | 0;
 }
 $13761 = $$3$i$i2532 + 52 | 0;
 HEAP16[$$3$i$i2532 >> 1] = 48;
 HEAP16[$$3$i$i2532 + 2 >> 1] = 3;
 HEAP8[$$3$i$i2532 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2532 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2532 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2532 + 12 >> 2] = 288;
 HEAP32[$$3$i$i2532 + 16 >> 2] = $13761;
 HEAP32[$$3$i$i2532 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2532 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2532 + 48 >> 0] = 0;
 HEAP32[$367 >> 2] = $$3$i$i2532;
 dest = $13761;
 src = 1882976;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2532 + 148 | 0;
 src = 1883072;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2532 + 244 | 0;
 src = 1883168;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $367);
 if ($$3$i$i2532 | 0) {
  $13774 = $$3$i$i2532 + 5 | 0;
  $13776 = (HEAP8[$13774 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13774 >> 0] = $13776;
  if (!($13776 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2532);
  HEAP32[$367 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 337;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 338;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 244) label = 2595; else {
  $13783 = HEAP32[918918] | 0;
  if (($13783 | 0) == (HEAP32[918916] | 0)) label = 2595; else {
   $$lcssa$i$i2554 = 3675672;
   $$lcssa8$i$i2553 = $13783;
   label = 2596;
  }
 }
 do if ((label | 0) == 2595) {
  if ((HEAP32[918925] | 0) >>> 0 >= 244) {
   $13790 = HEAP32[918924] | 0;
   if (($13790 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2554 = 3675696;
    $$lcssa8$i$i2553 = $13790;
    label = 2596;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 244) {
   $13795 = HEAP32[918930] | 0;
   if (($13795 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2554 = 3675720;
    $$lcssa8$i$i2553 = $13795;
    label = 2596;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 244) {
   $13800 = HEAP32[918936] | 0;
   if (($13800 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2554 = 3675744;
    $$lcssa8$i$i2553 = $13800;
    label = 2596;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 244) {
   $13805 = HEAP32[918942] | 0;
   if (($13805 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2554 = 3675768;
    $$lcssa8$i$i2553 = $13805;
    label = 2596;
    break;
   }
  }
  $$3$i$i2555 = __Znwj(244) | 0;
 } while (0);
 if ((label | 0) == 2596) {
  $13788 = $$lcssa8$i$i2553 + -4 | 0;
  HEAP32[$$lcssa$i$i2554 >> 2] = $13788;
  $$3$i$i2555 = HEAP32[$13788 >> 2] | 0;
 }
 $13809 = $$3$i$i2555 + 52 | 0;
 HEAP16[$$3$i$i2555 >> 1] = 48;
 HEAP16[$$3$i$i2555 + 2 >> 1] = 2;
 HEAP8[$$3$i$i2555 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2555 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2555 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2555 + 12 >> 2] = 192;
 HEAP32[$$3$i$i2555 + 16 >> 2] = $13809;
 HEAP32[$$3$i$i2555 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2555 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2555 + 48 >> 0] = 0;
 HEAP32[$368 >> 2] = $$3$i$i2555;
 dest = $13809;
 src = 1883264;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2555 + 148 | 0;
 src = 1883360;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $368);
 if ($$3$i$i2555 | 0) {
  $13821 = $$3$i$i2555 + 5 | 0;
  $13823 = (HEAP8[$13821 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13821 >> 0] = $13823;
  if (!($13823 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2555);
  HEAP32[$368 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 339;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 344;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 628) label = 2611; else {
  $13830 = HEAP32[918918] | 0;
  if (($13830 | 0) == (HEAP32[918916] | 0)) label = 2611; else {
   $$lcssa$i$i2566 = 3675672;
   $$lcssa8$i$i2565 = $13830;
   label = 2612;
  }
 }
 do if ((label | 0) == 2611) {
  if ((HEAP32[918925] | 0) >>> 0 >= 628) {
   $13837 = HEAP32[918924] | 0;
   if (($13837 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2566 = 3675696;
    $$lcssa8$i$i2565 = $13837;
    label = 2612;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 628) {
   $13842 = HEAP32[918930] | 0;
   if (($13842 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2566 = 3675720;
    $$lcssa8$i$i2565 = $13842;
    label = 2612;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 628) {
   $13847 = HEAP32[918936] | 0;
   if (($13847 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2566 = 3675744;
    $$lcssa8$i$i2565 = $13847;
    label = 2612;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 628) {
   $13852 = HEAP32[918942] | 0;
   if (($13852 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2566 = 3675768;
    $$lcssa8$i$i2565 = $13852;
    label = 2612;
    break;
   }
  }
  $$3$i$i2567 = __Znwj(628) | 0;
 } while (0);
 if ((label | 0) == 2612) {
  $13835 = $$lcssa8$i$i2565 + -4 | 0;
  HEAP32[$$lcssa$i$i2566 >> 2] = $13835;
  $$3$i$i2567 = HEAP32[$13835 >> 2] | 0;
 }
 $13856 = $$3$i$i2567 + 52 | 0;
 HEAP16[$$3$i$i2567 >> 1] = 48;
 HEAP16[$$3$i$i2567 + 2 >> 1] = 6;
 HEAP8[$$3$i$i2567 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2567 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2567 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2567 + 12 >> 2] = 576;
 HEAP32[$$3$i$i2567 + 16 >> 2] = $13856;
 HEAP32[$$3$i$i2567 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2567 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2567 + 48 >> 0] = 0;
 HEAP32[$369 >> 2] = $$3$i$i2567;
 dest = $13856;
 src = 1883456;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2567 + 148 | 0;
 src = 1883552;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2567 + 244 | 0;
 src = 1883648;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2567 + 340 | 0;
 src = 1883744;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2567 + 436 | 0;
 src = 1883840;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2567 + 532 | 0;
 src = 1883936;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $369);
 if ($$3$i$i2567 | 0) {
  $13872 = $$3$i$i2567 + 5 | 0;
  $13874 = (HEAP8[$13872 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13872 >> 0] = $13874;
  if (!($13874 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2567);
  HEAP32[$369 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 345;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 363;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1876) label = 2627; else {
  $13881 = HEAP32[918918] | 0;
  if (($13881 | 0) == (HEAP32[918916] | 0)) label = 2627; else {
   $$lcssa$i$i2579 = 3675672;
   $$lcssa8$i$i2578 = $13881;
   label = 2628;
  }
 }
 do if ((label | 0) == 2627) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1876) {
   $13888 = HEAP32[918924] | 0;
   if (($13888 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2579 = 3675696;
    $$lcssa8$i$i2578 = $13888;
    label = 2628;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1876) {
   $13893 = HEAP32[918930] | 0;
   if (($13893 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2579 = 3675720;
    $$lcssa8$i$i2578 = $13893;
    label = 2628;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1876) {
   $13898 = HEAP32[918936] | 0;
   if (($13898 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2579 = 3675744;
    $$lcssa8$i$i2578 = $13898;
    label = 2628;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1876) {
   $13903 = HEAP32[918942] | 0;
   if (($13903 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2579 = 3675768;
    $$lcssa8$i$i2578 = $13903;
    label = 2628;
    break;
   }
  }
  $$3$i$i2580 = __Znwj(1876) | 0;
 } while (0);
 if ((label | 0) == 2628) {
  $13886 = $$lcssa8$i$i2578 + -4 | 0;
  HEAP32[$$lcssa$i$i2579 >> 2] = $13886;
  $$3$i$i2580 = HEAP32[$13886 >> 2] | 0;
 }
 $13907 = $$3$i$i2580 + 52 | 0;
 HEAP16[$$3$i$i2580 >> 1] = 48;
 HEAP16[$$3$i$i2580 + 2 >> 1] = 19;
 HEAP8[$$3$i$i2580 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2580 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2580 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2580 + 12 >> 2] = 1824;
 HEAP32[$$3$i$i2580 + 16 >> 2] = $13907;
 HEAP32[$$3$i$i2580 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2580 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2580 + 48 >> 0] = 0;
 HEAP32[$370 >> 2] = $$3$i$i2580;
 dest = $13907;
 src = 1884032;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 148 | 0;
 src = 1884128;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 244 | 0;
 src = 1884224;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 340 | 0;
 src = 1884320;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 436 | 0;
 src = 1884416;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 532 | 0;
 src = 1884512;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 628 | 0;
 src = 1884608;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 724 | 0;
 src = 1884704;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 820 | 0;
 src = 1884800;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 916 | 0;
 src = 1884896;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 1012 | 0;
 src = 1884992;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 1108 | 0;
 src = 1885088;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 1204 | 0;
 src = 1885184;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 1300 | 0;
 src = 1885280;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 1396 | 0;
 src = 1885376;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 1492 | 0;
 src = 1885472;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 1588 | 0;
 src = 1885568;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 1684 | 0;
 src = 1885664;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2580 + 1780 | 0;
 src = 1885760;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $370);
 if ($$3$i$i2580 | 0) {
  $13936 = $$3$i$i2580 + 5 | 0;
  $13938 = (HEAP8[$13936 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13936 >> 0] = $13938;
  if (!($13938 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2580);
  HEAP32[$370 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 27;
 HEAP16[$bitmapData + 2 >> 1] = 264;
 HEAP16[$bitmapData + 4 >> 1] = 63;
 HEAP16[$bitmapData + 6 >> 1] = 276;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1092) label = 2643; else {
  $13945 = HEAP32[918918] | 0;
  if (($13945 | 0) == (HEAP32[918916] | 0)) label = 2643; else {
   $$lcssa$i$i2591 = 3675672;
   $$lcssa8$i$i2590 = $13945;
   label = 2644;
  }
 }
 do if ((label | 0) == 2643) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1092) {
   $13952 = HEAP32[918924] | 0;
   if (($13952 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2591 = 3675696;
    $$lcssa8$i$i2590 = $13952;
    label = 2644;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1092) {
   $13957 = HEAP32[918930] | 0;
   if (($13957 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2591 = 3675720;
    $$lcssa8$i$i2590 = $13957;
    label = 2644;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1092) {
   $13962 = HEAP32[918936] | 0;
   if (($13962 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2591 = 3675744;
    $$lcssa8$i$i2590 = $13962;
    label = 2644;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1092) {
   $13967 = HEAP32[918942] | 0;
   if (($13967 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2591 = 3675768;
    $$lcssa8$i$i2590 = $13967;
    label = 2644;
    break;
   }
  }
  $$3$i$i2592 = __Znwj(1092) | 0;
 } while (0);
 if ((label | 0) == 2644) {
  $13950 = $$lcssa8$i$i2590 + -4 | 0;
  HEAP32[$$lcssa$i$i2591 >> 2] = $13950;
  $$3$i$i2592 = HEAP32[$13950 >> 2] | 0;
 }
 $13971 = $$3$i$i2592 + 52 | 0;
 HEAP16[$$3$i$i2592 >> 1] = 40;
 HEAP16[$$3$i$i2592 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2592 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2592 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2592 + 8 >> 2] = 80;
 HEAP32[$$3$i$i2592 + 12 >> 2] = 1040;
 HEAP32[$$3$i$i2592 + 16 >> 2] = $13971;
 HEAP32[$$3$i$i2592 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2592 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2592 + 48 >> 0] = 0;
 HEAP32[$371 >> 2] = $$3$i$i2592;
 dest = $13971;
 src = 1885856;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 132 | 0;
 src = 1885936;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 212 | 0;
 src = 1886016;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 292 | 0;
 src = 1886096;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 372 | 0;
 src = 1886176;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 452 | 0;
 src = 1886256;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 532 | 0;
 src = 1886336;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 612 | 0;
 src = 1886416;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 692 | 0;
 src = 1886496;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 772 | 0;
 src = 1886576;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 852 | 0;
 src = 1886656;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 932 | 0;
 src = 1886736;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2592 + 1012 | 0;
 src = 1886816;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $371);
 if ($$3$i$i2592 | 0) {
  $13994 = $$3$i$i2592 + 5 | 0;
  $13996 = (HEAP8[$13994 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$13994 >> 0] = $13996;
  if (!($13996 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2592);
  HEAP32[$371 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 213;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 260;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4660) label = 2659; else {
  $14003 = HEAP32[918918] | 0;
  if (($14003 | 0) == (HEAP32[918916] | 0)) label = 2659; else {
   $$lcssa$i$i2614 = 3675672;
   $$lcssa8$i$i2613 = $14003;
   label = 2660;
  }
 }
 do if ((label | 0) == 2659) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4660) {
   $14010 = HEAP32[918924] | 0;
   if (($14010 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2614 = 3675696;
    $$lcssa8$i$i2613 = $14010;
    label = 2660;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4660) {
   $14015 = HEAP32[918930] | 0;
   if (($14015 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2614 = 3675720;
    $$lcssa8$i$i2613 = $14015;
    label = 2660;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4660) {
   $14020 = HEAP32[918936] | 0;
   if (($14020 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2614 = 3675744;
    $$lcssa8$i$i2613 = $14020;
    label = 2660;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4660) {
   $14025 = HEAP32[918942] | 0;
   if (($14025 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2614 = 3675768;
    $$lcssa8$i$i2613 = $14025;
    label = 2660;
    break;
   }
  }
  $$3$i$i2615 = __Znwj(4660) | 0;
 } while (0);
 if ((label | 0) == 2660) {
  $14008 = $$lcssa8$i$i2613 + -4 | 0;
  HEAP32[$$lcssa$i$i2614 >> 2] = $14008;
  $$3$i$i2615 = HEAP32[$14008 >> 2] | 0;
 }
 $14029 = $$3$i$i2615 + 52 | 0;
 HEAP16[$$3$i$i2615 >> 1] = 48;
 HEAP16[$$3$i$i2615 + 2 >> 1] = 48;
 HEAP8[$$3$i$i2615 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2615 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2615 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2615 + 12 >> 2] = 4608;
 HEAP32[$$3$i$i2615 + 16 >> 2] = $14029;
 HEAP32[$$3$i$i2615 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2615 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2615 + 48 >> 0] = 0;
 HEAP32[$372 >> 2] = $$3$i$i2615;
 dest = $14029;
 src = 1886896;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 148 | 0;
 src = 1886992;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 244 | 0;
 src = 1887088;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 340 | 0;
 src = 1887184;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 436 | 0;
 src = 1887280;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 532 | 0;
 src = 1887376;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 628 | 0;
 src = 1887472;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 724 | 0;
 src = 1887568;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 820 | 0;
 src = 1887664;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 916 | 0;
 src = 1887760;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1012 | 0;
 src = 1887856;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1108 | 0;
 src = 1887952;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1204 | 0;
 src = 1888048;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1300 | 0;
 src = 1888144;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1396 | 0;
 src = 1888240;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1492 | 0;
 src = 1888336;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1588 | 0;
 src = 1888432;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1684 | 0;
 src = 1888528;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1780 | 0;
 src = 1888624;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1876 | 0;
 src = 1888720;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 1972 | 0;
 src = 1888816;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 2068 | 0;
 src = 1888912;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 2164 | 0;
 src = 1889008;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 2260 | 0;
 src = 1889104;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 2356 | 0;
 src = 1889200;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 2452 | 0;
 src = 1889296;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 2548 | 0;
 src = 1889392;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 2644 | 0;
 src = 1889488;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 2740 | 0;
 src = 1889584;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 2836 | 0;
 src = 1889680;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 2932 | 0;
 src = 1889776;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3028 | 0;
 src = 1889872;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3124 | 0;
 src = 1889968;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3220 | 0;
 src = 1890064;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3316 | 0;
 src = 1890160;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3412 | 0;
 src = 1890256;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3508 | 0;
 src = 1890352;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3604 | 0;
 src = 1890448;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3700 | 0;
 src = 1890544;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3796 | 0;
 src = 1890640;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3892 | 0;
 src = 1890736;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 3988 | 0;
 src = 1890832;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 4084 | 0;
 src = 1890928;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 4180 | 0;
 src = 1891024;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 4276 | 0;
 src = 1891120;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 4372 | 0;
 src = 1891216;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 4468 | 0;
 src = 1891312;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2615 + 4564 | 0;
 src = 1891408;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $372);
 if ($$3$i$i2615 | 0) {
  $14087 = $$3$i$i2615 + 5 | 0;
  $14089 = (HEAP8[$14087 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14087 >> 0] = $14089;
  if (!($14089 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2615);
  HEAP32[$372 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 110;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 157;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4660) label = 2675; else {
  $14096 = HEAP32[918918] | 0;
  if (($14096 | 0) == (HEAP32[918916] | 0)) label = 2675; else {
   $$lcssa$i$i2626 = 3675672;
   $$lcssa8$i$i2625 = $14096;
   label = 2676;
  }
 }
 do if ((label | 0) == 2675) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4660) {
   $14103 = HEAP32[918924] | 0;
   if (($14103 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2626 = 3675696;
    $$lcssa8$i$i2625 = $14103;
    label = 2676;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4660) {
   $14108 = HEAP32[918930] | 0;
   if (($14108 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2626 = 3675720;
    $$lcssa8$i$i2625 = $14108;
    label = 2676;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4660) {
   $14113 = HEAP32[918936] | 0;
   if (($14113 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2626 = 3675744;
    $$lcssa8$i$i2625 = $14113;
    label = 2676;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4660) {
   $14118 = HEAP32[918942] | 0;
   if (($14118 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2626 = 3675768;
    $$lcssa8$i$i2625 = $14118;
    label = 2676;
    break;
   }
  }
  $$3$i$i2627 = __Znwj(4660) | 0;
 } while (0);
 if ((label | 0) == 2676) {
  $14101 = $$lcssa8$i$i2625 + -4 | 0;
  HEAP32[$$lcssa$i$i2626 >> 2] = $14101;
  $$3$i$i2627 = HEAP32[$14101 >> 2] | 0;
 }
 $14122 = $$3$i$i2627 + 52 | 0;
 HEAP16[$$3$i$i2627 >> 1] = 48;
 HEAP16[$$3$i$i2627 + 2 >> 1] = 48;
 HEAP8[$$3$i$i2627 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2627 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2627 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2627 + 12 >> 2] = 4608;
 HEAP32[$$3$i$i2627 + 16 >> 2] = $14122;
 HEAP32[$$3$i$i2627 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2627 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2627 + 48 >> 0] = 0;
 HEAP32[$373 >> 2] = $$3$i$i2627;
 dest = $14122;
 src = 1891504;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 148 | 0;
 src = 1891600;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 244 | 0;
 src = 1891696;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 340 | 0;
 src = 1891792;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 436 | 0;
 src = 1891888;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 532 | 0;
 src = 1891984;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 628 | 0;
 src = 1892080;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 724 | 0;
 src = 1892176;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 820 | 0;
 src = 1892272;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 916 | 0;
 src = 1892368;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1012 | 0;
 src = 1892464;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1108 | 0;
 src = 1892560;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1204 | 0;
 src = 1892656;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1300 | 0;
 src = 1892752;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1396 | 0;
 src = 1892848;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1492 | 0;
 src = 1892944;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1588 | 0;
 src = 1893040;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1684 | 0;
 src = 1893136;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1780 | 0;
 src = 1893232;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1876 | 0;
 src = 1893328;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 1972 | 0;
 src = 1893424;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 2068 | 0;
 src = 1893520;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 2164 | 0;
 src = 1893616;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 2260 | 0;
 src = 1893712;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 2356 | 0;
 src = 1893808;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 2452 | 0;
 src = 1893904;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 2548 | 0;
 src = 1894e3;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 2644 | 0;
 src = 1894096;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 2740 | 0;
 src = 1894192;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 2836 | 0;
 src = 1894288;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 2932 | 0;
 src = 1894384;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3028 | 0;
 src = 1894480;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3124 | 0;
 src = 1894576;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3220 | 0;
 src = 1894672;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3316 | 0;
 src = 1894768;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3412 | 0;
 src = 1894864;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3508 | 0;
 src = 1894960;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3604 | 0;
 src = 1895056;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3700 | 0;
 src = 1895152;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3796 | 0;
 src = 1895248;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3892 | 0;
 src = 1895344;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 3988 | 0;
 src = 1895440;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 4084 | 0;
 src = 1895536;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 4180 | 0;
 src = 1895632;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 4276 | 0;
 src = 1895728;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 4372 | 0;
 src = 1895824;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 4468 | 0;
 src = 1895920;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2627 + 4564 | 0;
 src = 1896016;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $373);
 if ($$3$i$i2627 | 0) {
  $14180 = $$3$i$i2627 + 5 | 0;
  $14182 = (HEAP8[$14180 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14180 >> 0] = $14182;
  if (!($14182 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2627);
  HEAP32[$373 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 25;
 HEAP16[$bitmapData + 2 >> 1] = 58;
 HEAP16[$bitmapData + 4 >> 1] = 65;
 HEAP16[$bitmapData + 6 >> 1] = 70;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1196) label = 2691; else {
  $14189 = HEAP32[918918] | 0;
  if (($14189 | 0) == (HEAP32[918916] | 0)) label = 2691; else {
   $$lcssa$i$i2639 = 3675672;
   $$lcssa8$i$i2638 = $14189;
   label = 2692;
  }
 }
 do if ((label | 0) == 2691) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1196) {
   $14196 = HEAP32[918924] | 0;
   if (($14196 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2639 = 3675696;
    $$lcssa8$i$i2638 = $14196;
    label = 2692;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1196) {
   $14201 = HEAP32[918930] | 0;
   if (($14201 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2639 = 3675720;
    $$lcssa8$i$i2638 = $14201;
    label = 2692;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1196) {
   $14206 = HEAP32[918936] | 0;
   if (($14206 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2639 = 3675744;
    $$lcssa8$i$i2638 = $14206;
    label = 2692;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1196) {
   $14211 = HEAP32[918942] | 0;
   if (($14211 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2639 = 3675768;
    $$lcssa8$i$i2638 = $14211;
    label = 2692;
    break;
   }
  }
  $$3$i$i2640 = __Znwj(1196) | 0;
 } while (0);
 if ((label | 0) == 2692) {
  $14194 = $$lcssa8$i$i2638 + -4 | 0;
  HEAP32[$$lcssa$i$i2639 >> 2] = $14194;
  $$3$i$i2640 = HEAP32[$14194 >> 2] | 0;
 }
 $14215 = $$3$i$i2640 + 52 | 0;
 HEAP16[$$3$i$i2640 >> 1] = 44;
 HEAP16[$$3$i$i2640 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2640 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2640 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2640 + 8 >> 2] = 88;
 HEAP32[$$3$i$i2640 + 12 >> 2] = 1144;
 HEAP32[$$3$i$i2640 + 16 >> 2] = $14215;
 HEAP32[$$3$i$i2640 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2640 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2640 + 48 >> 0] = 0;
 HEAP32[$374 >> 2] = $$3$i$i2640;
 dest = $14215;
 src = 1896112;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 140 | 0;
 src = 1896200;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 228 | 0;
 src = 1896288;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 316 | 0;
 src = 1896376;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 404 | 0;
 src = 1896464;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 492 | 0;
 src = 1896552;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 580 | 0;
 src = 1896640;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 668 | 0;
 src = 1896728;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 756 | 0;
 src = 1896816;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 844 | 0;
 src = 1896904;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 932 | 0;
 src = 1896992;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 1020 | 0;
 src = 1897080;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2640 + 1108 | 0;
 src = 1897168;
 stop = dest + 88 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $374);
 if ($$3$i$i2640 | 0) {
  $14238 = $$3$i$i2640 + 5 | 0;
  $14240 = (HEAP8[$14238 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14238 >> 0] = $14240;
  if (!($14240 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2640);
  HEAP32[$374 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 7;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 21;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1492) label = 2707; else {
  $14247 = HEAP32[918918] | 0;
  if (($14247 | 0) == (HEAP32[918916] | 0)) label = 2707; else {
   $$lcssa$i$i2651 = 3675672;
   $$lcssa8$i$i2650 = $14247;
   label = 2708;
  }
 }
 do if ((label | 0) == 2707) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1492) {
   $14254 = HEAP32[918924] | 0;
   if (($14254 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2651 = 3675696;
    $$lcssa8$i$i2650 = $14254;
    label = 2708;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1492) {
   $14259 = HEAP32[918930] | 0;
   if (($14259 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2651 = 3675720;
    $$lcssa8$i$i2650 = $14259;
    label = 2708;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1492) {
   $14264 = HEAP32[918936] | 0;
   if (($14264 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2651 = 3675744;
    $$lcssa8$i$i2650 = $14264;
    label = 2708;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1492) {
   $14269 = HEAP32[918942] | 0;
   if (($14269 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2651 = 3675768;
    $$lcssa8$i$i2650 = $14269;
    label = 2708;
    break;
   }
  }
  $$3$i$i2652 = __Znwj(1492) | 0;
 } while (0);
 if ((label | 0) == 2708) {
  $14252 = $$lcssa8$i$i2650 + -4 | 0;
  HEAP32[$$lcssa$i$i2651 >> 2] = $14252;
  $$3$i$i2652 = HEAP32[$14252 >> 2] | 0;
 }
 $14273 = $$3$i$i2652 + 52 | 0;
 HEAP16[$$3$i$i2652 >> 1] = 48;
 HEAP16[$$3$i$i2652 + 2 >> 1] = 15;
 HEAP8[$$3$i$i2652 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2652 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2652 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2652 + 12 >> 2] = 1440;
 HEAP32[$$3$i$i2652 + 16 >> 2] = $14273;
 HEAP32[$$3$i$i2652 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2652 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2652 + 48 >> 0] = 0;
 HEAP32[$375 >> 2] = $$3$i$i2652;
 dest = $14273;
 src = 1897256;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 148 | 0;
 src = 1897352;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 244 | 0;
 src = 1897448;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 340 | 0;
 src = 1897544;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 436 | 0;
 src = 1897640;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 532 | 0;
 src = 1897736;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 628 | 0;
 src = 1897832;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 724 | 0;
 src = 1897928;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 820 | 0;
 src = 1898024;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 916 | 0;
 src = 1898120;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 1012 | 0;
 src = 1898216;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 1108 | 0;
 src = 1898312;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 1204 | 0;
 src = 1898408;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 1300 | 0;
 src = 1898504;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2652 + 1396 | 0;
 src = 1898600;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $375);
 if ($$3$i$i2652 | 0) {
  $14298 = $$3$i$i2652 + 5 | 0;
  $14300 = (HEAP8[$14298 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14298 >> 0] = $14300;
  if (!($14300 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2652);
  HEAP32[$375 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 22;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 28;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 724) label = 2723; else {
  $14307 = HEAP32[918918] | 0;
  if (($14307 | 0) == (HEAP32[918916] | 0)) label = 2723; else {
   $$lcssa$i$i2674 = 3675672;
   $$lcssa8$i$i2673 = $14307;
   label = 2724;
  }
 }
 do if ((label | 0) == 2723) {
  if ((HEAP32[918925] | 0) >>> 0 >= 724) {
   $14314 = HEAP32[918924] | 0;
   if (($14314 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2674 = 3675696;
    $$lcssa8$i$i2673 = $14314;
    label = 2724;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 724) {
   $14319 = HEAP32[918930] | 0;
   if (($14319 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2674 = 3675720;
    $$lcssa8$i$i2673 = $14319;
    label = 2724;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 724) {
   $14324 = HEAP32[918936] | 0;
   if (($14324 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2674 = 3675744;
    $$lcssa8$i$i2673 = $14324;
    label = 2724;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 724) {
   $14329 = HEAP32[918942] | 0;
   if (($14329 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2674 = 3675768;
    $$lcssa8$i$i2673 = $14329;
    label = 2724;
    break;
   }
  }
  $$3$i$i2675 = __Znwj(724) | 0;
 } while (0);
 if ((label | 0) == 2724) {
  $14312 = $$lcssa8$i$i2673 + -4 | 0;
  HEAP32[$$lcssa$i$i2674 >> 2] = $14312;
  $$3$i$i2675 = HEAP32[$14312 >> 2] | 0;
 }
 $14333 = $$3$i$i2675 + 52 | 0;
 HEAP16[$$3$i$i2675 >> 1] = 48;
 HEAP16[$$3$i$i2675 + 2 >> 1] = 7;
 HEAP8[$$3$i$i2675 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2675 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2675 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2675 + 12 >> 2] = 672;
 HEAP32[$$3$i$i2675 + 16 >> 2] = $14333;
 HEAP32[$$3$i$i2675 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2675 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2675 + 48 >> 0] = 0;
 HEAP32[$376 >> 2] = $$3$i$i2675;
 dest = $14333;
 src = 1898696;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2675 + 148 | 0;
 src = 1898792;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2675 + 244 | 0;
 src = 1898888;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2675 + 340 | 0;
 src = 1898984;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2675 + 436 | 0;
 src = 1899080;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2675 + 532 | 0;
 src = 1899176;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2675 + 628 | 0;
 src = 1899272;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $376);
 if ($$3$i$i2675 | 0) {
  $14350 = $$3$i$i2675 + 5 | 0;
  $14352 = (HEAP8[$14350 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14350 >> 0] = $14352;
  if (!($14352 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2675);
  HEAP32[$376 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 29;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 31;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 340) label = 2739; else {
  $14359 = HEAP32[918918] | 0;
  if (($14359 | 0) == (HEAP32[918916] | 0)) label = 2739; else {
   $$lcssa$i$i2686 = 3675672;
   $$lcssa8$i$i2685 = $14359;
   label = 2740;
  }
 }
 do if ((label | 0) == 2739) {
  if ((HEAP32[918925] | 0) >>> 0 >= 340) {
   $14366 = HEAP32[918924] | 0;
   if (($14366 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2686 = 3675696;
    $$lcssa8$i$i2685 = $14366;
    label = 2740;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 340) {
   $14371 = HEAP32[918930] | 0;
   if (($14371 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2686 = 3675720;
    $$lcssa8$i$i2685 = $14371;
    label = 2740;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 340) {
   $14376 = HEAP32[918936] | 0;
   if (($14376 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2686 = 3675744;
    $$lcssa8$i$i2685 = $14376;
    label = 2740;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 340) {
   $14381 = HEAP32[918942] | 0;
   if (($14381 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2686 = 3675768;
    $$lcssa8$i$i2685 = $14381;
    label = 2740;
    break;
   }
  }
  $$3$i$i2687 = __Znwj(340) | 0;
 } while (0);
 if ((label | 0) == 2740) {
  $14364 = $$lcssa8$i$i2685 + -4 | 0;
  HEAP32[$$lcssa$i$i2686 >> 2] = $14364;
  $$3$i$i2687 = HEAP32[$14364 >> 2] | 0;
 }
 $14385 = $$3$i$i2687 + 52 | 0;
 HEAP16[$$3$i$i2687 >> 1] = 48;
 HEAP16[$$3$i$i2687 + 2 >> 1] = 3;
 HEAP8[$$3$i$i2687 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2687 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2687 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2687 + 12 >> 2] = 288;
 HEAP32[$$3$i$i2687 + 16 >> 2] = $14385;
 HEAP32[$$3$i$i2687 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2687 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2687 + 48 >> 0] = 0;
 HEAP32[$377 >> 2] = $$3$i$i2687;
 dest = $14385;
 src = 1899368;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2687 + 148 | 0;
 src = 1899464;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2687 + 244 | 0;
 src = 1899560;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $377);
 if ($$3$i$i2687 | 0) {
  $14398 = $$3$i$i2687 + 5 | 0;
  $14400 = (HEAP8[$14398 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14398 >> 0] = $14400;
  if (!($14400 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2687);
  HEAP32[$377 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 22;
 HEAP16[$bitmapData + 2 >> 1] = 32;
 HEAP16[$bitmapData + 4 >> 1] = 69;
 HEAP16[$bitmapData + 6 >> 1] = 54;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2260) label = 2755; else {
  $14407 = HEAP32[918918] | 0;
  if (($14407 | 0) == (HEAP32[918916] | 0)) label = 2755; else {
   $$lcssa$i$i2699 = 3675672;
   $$lcssa8$i$i2698 = $14407;
   label = 2756;
  }
 }
 do if ((label | 0) == 2755) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2260) {
   $14414 = HEAP32[918924] | 0;
   if (($14414 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2699 = 3675696;
    $$lcssa8$i$i2698 = $14414;
    label = 2756;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2260) {
   $14419 = HEAP32[918930] | 0;
   if (($14419 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2699 = 3675720;
    $$lcssa8$i$i2698 = $14419;
    label = 2756;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2260) {
   $14424 = HEAP32[918936] | 0;
   if (($14424 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2699 = 3675744;
    $$lcssa8$i$i2698 = $14424;
    label = 2756;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2260) {
   $14429 = HEAP32[918942] | 0;
   if (($14429 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2699 = 3675768;
    $$lcssa8$i$i2698 = $14429;
    label = 2756;
    break;
   }
  }
  $$3$i$i2700 = __Znwj(2260) | 0;
 } while (0);
 if ((label | 0) == 2756) {
  $14412 = $$lcssa8$i$i2698 + -4 | 0;
  HEAP32[$$lcssa$i$i2699 >> 2] = $14412;
  $$3$i$i2700 = HEAP32[$14412 >> 2] | 0;
 }
 $14433 = $$3$i$i2700 + 52 | 0;
 HEAP16[$$3$i$i2700 >> 1] = 48;
 HEAP16[$$3$i$i2700 + 2 >> 1] = 23;
 HEAP8[$$3$i$i2700 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2700 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2700 + 8 >> 2] = 96;
 HEAP32[$$3$i$i2700 + 12 >> 2] = 2208;
 HEAP32[$$3$i$i2700 + 16 >> 2] = $14433;
 HEAP32[$$3$i$i2700 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2700 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2700 + 48 >> 0] = 0;
 HEAP32[$378 >> 2] = $$3$i$i2700;
 dest = $14433;
 src = 1899656;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 148 | 0;
 src = 1899752;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 244 | 0;
 src = 1899848;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 340 | 0;
 src = 1899944;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 436 | 0;
 src = 1900040;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 532 | 0;
 src = 1900136;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 628 | 0;
 src = 1900232;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 724 | 0;
 src = 1900328;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 820 | 0;
 src = 1900424;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 916 | 0;
 src = 1900520;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1012 | 0;
 src = 1900616;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1108 | 0;
 src = 1900712;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1204 | 0;
 src = 1900808;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1300 | 0;
 src = 1900904;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1396 | 0;
 src = 1901e3;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1492 | 0;
 src = 1901096;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1588 | 0;
 src = 1901192;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1684 | 0;
 src = 1901288;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1780 | 0;
 src = 1901384;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1876 | 0;
 src = 1901480;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 1972 | 0;
 src = 1901576;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 2068 | 0;
 src = 1901672;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2700 + 2164 | 0;
 src = 1901768;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $378);
 if ($$3$i$i2700 | 0) {
  $14466 = $$3$i$i2700 + 5 | 0;
  $14468 = (HEAP8[$14466 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14466 >> 0] = $14468;
  if (!($14468 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2700);
  HEAP32[$378 >> 2] = 0;
 }
 $14470 = $379;
 HEAP32[$14470 >> 2] = 47711094;
 HEAP32[$14470 + 4 >> 2] = 2490400;
 HEAP32[$379 + 8 >> 2] = 54937;
 HEAP16[$380 >> 1] = 886;
 HEAP16[$380 + 2 >> 1] = 728;
 HEAP16[$380 + 4 >> 1] = 32;
 HEAP16[$380 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $379, $380);
 $14478 = $381;
 HEAP32[$14478 >> 2] = 47711094;
 HEAP32[$14478 + 4 >> 2] = 2490400;
 HEAP32[$381 + 8 >> 2] = 54937;
 HEAP16[$382 >> 1] = 886;
 HEAP16[$382 + 2 >> 1] = 736;
 HEAP16[$382 + 4 >> 1] = 4;
 HEAP16[$382 + 6 >> 1] = 22;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $381, $382);
 $14486 = $383;
 HEAP32[$14486 >> 2] = 47711094;
 HEAP32[$14486 + 4 >> 2] = 2490400;
 HEAP32[$383 + 8 >> 2] = 54937;
 HEAP16[$384 >> 1] = 886;
 HEAP16[$384 + 2 >> 1] = 758;
 HEAP16[$384 + 4 >> 1] = 32;
 HEAP16[$384 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $383, $384);
 $14494 = $385;
 HEAP32[$14494 >> 2] = 47710293;
 HEAP32[$14494 + 4 >> 2] = 2491173;
 HEAP32[$385 + 8 >> 2] = 54937;
 HEAP16[$386 >> 1] = 85;
 HEAP16[$386 + 2 >> 1] = 728;
 HEAP16[$386 + 4 >> 1] = 9;
 HEAP16[$386 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $385, $386);
 $14502 = $387;
 HEAP32[$14502 >> 2] = 47710293;
 HEAP32[$14502 + 4 >> 2] = 2491173;
 HEAP32[$387 + 8 >> 2] = 54937;
 HEAP16[$388 >> 1] = 877;
 HEAP16[$388 + 2 >> 1] = 728;
 HEAP16[$388 + 4 >> 1] = 13;
 HEAP16[$388 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $387, $388);
 $14510 = $389;
 HEAP32[$14510 >> 2] = 47710293;
 HEAP32[$14510 + 4 >> 2] = 2491173;
 HEAP32[$389 + 8 >> 2] = 54937;
 HEAP16[$390 >> 1] = 85;
 HEAP16[$390 + 2 >> 1] = 728;
 HEAP16[$390 + 4 >> 1] = 9;
 HEAP16[$390 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $389, $390);
 $14518 = $391;
 HEAP32[$14518 >> 2] = 47710293;
 HEAP32[$14518 + 4 >> 2] = 2491173;
 HEAP32[$391 + 8 >> 2] = 54937;
 HEAP16[$392 >> 1] = 877;
 HEAP16[$392 + 2 >> 1] = 728;
 HEAP16[$392 + 4 >> 1] = 13;
 HEAP16[$392 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $391, $392);
 $14526 = $393;
 HEAP32[$14526 >> 2] = 47841369;
 HEAP32[$14526 + 4 >> 2] = 2228225;
 HEAP32[$393 + 8 >> 2] = 33808;
 HEAP16[$394 >> 1] = 89;
 HEAP16[$394 + 2 >> 1] = 730;
 HEAP16[$394 + 4 >> 1] = 1;
 HEAP16[$394 + 6 >> 1] = 34;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $393, $394);
 $14534 = $395;
 HEAP32[$14534 >> 2] = 50004055;
 HEAP32[$14534 + 4 >> 2] = 65538;
 HEAP32[$395 + 8 >> 2] = 33808;
 HEAP16[$396 >> 1] = 87;
 HEAP16[$396 + 2 >> 1] = 763;
 HEAP16[$396 + 4 >> 1] = 2;
 HEAP16[$396 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $395, $396);
 $14542 = $397;
 HEAP32[$14542 >> 2] = 47841367;
 HEAP32[$14542 + 4 >> 2] = 2162689;
 HEAP32[$397 + 8 >> 2] = 65535;
 HEAP16[$398 >> 1] = 87;
 HEAP16[$398 + 2 >> 1] = 730;
 HEAP16[$398 + 4 >> 1] = 1;
 HEAP16[$398 + 6 >> 1] = 33;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $397, $398);
 $14550 = $399;
 HEAP32[$14550 >> 2] = 47841368;
 HEAP32[$14550 + 4 >> 2] = 65537;
 HEAP32[$399 + 8 >> 2] = 65535;
 HEAP16[$400 >> 1] = 88;
 HEAP16[$400 + 2 >> 1] = 730;
 HEAP16[$400 + 4 >> 1] = 1;
 HEAP16[$400 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $399, $400);
 $14558 = $401;
 HEAP32[$14558 >> 2] = 47906904;
 HEAP32[$14558 + 4 >> 2] = 2097153;
 HEAP32[$401 + 8 >> 2] = 54937;
 HEAP16[$402 >> 1] = 88;
 HEAP16[$402 + 2 >> 1] = 731;
 HEAP16[$402 + 4 >> 1] = 1;
 HEAP16[$402 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $401, $402);
 $14566 = $403;
 HEAP32[$14566 >> 2] = 47842165;
 HEAP32[$14566 + 4 >> 2] = 2228225;
 HEAP32[$403 + 8 >> 2] = 33808;
 HEAP16[$404 >> 1] = 885;
 HEAP16[$404 + 2 >> 1] = 730;
 HEAP16[$404 + 4 >> 1] = 1;
 HEAP16[$404 + 6 >> 1] = 34;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $403, $404);
 $14574 = $405;
 HEAP32[$14574 >> 2] = 50004851;
 HEAP32[$14574 + 4 >> 2] = 65538;
 HEAP32[$405 + 8 >> 2] = 33808;
 HEAP16[$406 >> 1] = 883;
 HEAP16[$406 + 2 >> 1] = 763;
 HEAP16[$406 + 4 >> 1] = 2;
 HEAP16[$406 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $405, $406);
 $14582 = $407;
 HEAP32[$14582 >> 2] = 47842163;
 HEAP32[$14582 + 4 >> 2] = 2162689;
 HEAP32[$407 + 8 >> 2] = 65535;
 HEAP16[$408 >> 1] = 883;
 HEAP16[$408 + 2 >> 1] = 730;
 HEAP16[$408 + 4 >> 1] = 1;
 HEAP16[$408 + 6 >> 1] = 33;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $407, $408);
 $14590 = $409;
 HEAP32[$14590 >> 2] = 47842164;
 HEAP32[$14590 + 4 >> 2] = 65537;
 HEAP32[$409 + 8 >> 2] = 65535;
 HEAP16[$410 >> 1] = 884;
 HEAP16[$410 + 2 >> 1] = 730;
 HEAP16[$410 + 4 >> 1] = 1;
 HEAP16[$410 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $409, $410);
 $14598 = $411;
 HEAP32[$14598 >> 2] = 47907700;
 HEAP32[$14598 + 4 >> 2] = 2097153;
 HEAP32[$411 + 8 >> 2] = 54937;
 HEAP16[$412 >> 1] = 884;
 HEAP16[$412 + 2 >> 1] = 731;
 HEAP16[$412 + 4 >> 1] = 1;
 HEAP16[$412 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $411, $412);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 876;
 HEAP16[$bitmapData + 6 >> 1] = 747;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31412) label = 2771; else {
  $14611 = HEAP32[918918] | 0;
  if (($14611 | 0) == (HEAP32[918916] | 0)) label = 2771; else {
   $$lcssa$i$i2867 = 3675672;
   $$lcssa8$i$i2866 = $14611;
   label = 2772;
  }
 }
 do if ((label | 0) == 2771) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31412) {
   $14618 = HEAP32[918924] | 0;
   if (($14618 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2867 = 3675696;
    $$lcssa8$i$i2866 = $14618;
    label = 2772;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31412) {
   $14623 = HEAP32[918930] | 0;
   if (($14623 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2867 = 3675720;
    $$lcssa8$i$i2866 = $14623;
    label = 2772;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31412) {
   $14628 = HEAP32[918936] | 0;
   if (($14628 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2867 = 3675744;
    $$lcssa8$i$i2866 = $14628;
    label = 2772;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31412) {
   $14633 = HEAP32[918942] | 0;
   if (($14633 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2867 = 3675768;
    $$lcssa8$i$i2866 = $14633;
    label = 2772;
    break;
   }
  }
  $$3$i$i2868 = __Znwj(31412) | 0;
 } while (0);
 if ((label | 0) == 2772) {
  $14616 = $$lcssa8$i$i2866 + -4 | 0;
  HEAP32[$$lcssa$i$i2867 >> 2] = $14616;
  $$3$i$i2868 = HEAP32[$14616 >> 2] | 0;
 }
 $14637 = $$3$i$i2868 + 52 | 0;
 HEAP16[$$3$i$i2868 >> 1] = 784;
 HEAP16[$$3$i$i2868 + 2 >> 1] = 20;
 HEAP8[$$3$i$i2868 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2868 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2868 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i2868 + 12 >> 2] = 31360;
 HEAP32[$$3$i$i2868 + 16 >> 2] = $14637;
 HEAP32[$$3$i$i2868 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2868 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2868 + 48 >> 0] = 0;
 HEAP32[$413 >> 2] = $$3$i$i2868;
 _memcpy($14637 | 0, 1901864, 1568) | 0;
 _memcpy($$3$i$i2868 + 1620 | 0, 1903432, 1568) | 0;
 _memcpy($$3$i$i2868 + 3188 | 0, 1905e3, 1568) | 0;
 _memcpy($$3$i$i2868 + 4756 | 0, 1906568, 1568) | 0;
 _memcpy($$3$i$i2868 + 6324 | 0, 1908136, 1568) | 0;
 _memcpy($$3$i$i2868 + 7892 | 0, 1909704, 1568) | 0;
 _memcpy($$3$i$i2868 + 9460 | 0, 1911272, 1568) | 0;
 _memcpy($$3$i$i2868 + 11028 | 0, 1912840, 1568) | 0;
 _memcpy($$3$i$i2868 + 12596 | 0, 1914408, 1568) | 0;
 _memcpy($$3$i$i2868 + 14164 | 0, 1915976, 1568) | 0;
 _memcpy($$3$i$i2868 + 15732 | 0, 1917544, 1568) | 0;
 _memcpy($$3$i$i2868 + 17300 | 0, 1919112, 1568) | 0;
 _memcpy($$3$i$i2868 + 18868 | 0, 1920680, 1568) | 0;
 _memcpy($$3$i$i2868 + 20436 | 0, 1922248, 1568) | 0;
 _memcpy($$3$i$i2868 + 22004 | 0, 1923816, 1568) | 0;
 _memcpy($$3$i$i2868 + 23572 | 0, 1925384, 1568) | 0;
 _memcpy($$3$i$i2868 + 25140 | 0, 1926952, 1568) | 0;
 _memcpy($$3$i$i2868 + 26708 | 0, 1928520, 1568) | 0;
 _memcpy($$3$i$i2868 + 28276 | 0, 1930088, 1568) | 0;
 _memcpy($$3$i$i2868 + 29844 | 0, 1931656, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $413);
 if ($$3$i$i2868 | 0) {
  $14667 = $$3$i$i2868 + 5 | 0;
  $14669 = (HEAP8[$14667 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14667 >> 0] = $14669;
  if (!($14669 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2868);
  HEAP32[$413 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 748;
 HEAP16[$bitmapData + 4 >> 1] = 876;
 HEAP16[$bitmapData + 6 >> 1] = 753;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 9460) label = 2787; else {
  $14676 = HEAP32[918918] | 0;
  if (($14676 | 0) == (HEAP32[918916] | 0)) label = 2787; else {
   $$lcssa$i$i2879 = 3675672;
   $$lcssa8$i$i2878 = $14676;
   label = 2788;
  }
 }
 do if ((label | 0) == 2787) {
  if ((HEAP32[918925] | 0) >>> 0 >= 9460) {
   $14683 = HEAP32[918924] | 0;
   if (($14683 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2879 = 3675696;
    $$lcssa8$i$i2878 = $14683;
    label = 2788;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 9460) {
   $14688 = HEAP32[918930] | 0;
   if (($14688 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2879 = 3675720;
    $$lcssa8$i$i2878 = $14688;
    label = 2788;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 9460) {
   $14693 = HEAP32[918936] | 0;
   if (($14693 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2879 = 3675744;
    $$lcssa8$i$i2878 = $14693;
    label = 2788;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 9460) {
   $14698 = HEAP32[918942] | 0;
   if (($14698 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2879 = 3675768;
    $$lcssa8$i$i2878 = $14698;
    label = 2788;
    break;
   }
  }
  $$3$i$i2880 = __Znwj(9460) | 0;
 } while (0);
 if ((label | 0) == 2788) {
  $14681 = $$lcssa8$i$i2878 + -4 | 0;
  HEAP32[$$lcssa$i$i2879 >> 2] = $14681;
  $$3$i$i2880 = HEAP32[$14681 >> 2] | 0;
 }
 $14702 = $$3$i$i2880 + 52 | 0;
 HEAP16[$$3$i$i2880 >> 1] = 784;
 HEAP16[$$3$i$i2880 + 2 >> 1] = 6;
 HEAP8[$$3$i$i2880 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2880 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2880 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i2880 + 12 >> 2] = 9408;
 HEAP32[$$3$i$i2880 + 16 >> 2] = $14702;
 HEAP32[$$3$i$i2880 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2880 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2880 + 48 >> 0] = 0;
 HEAP32[$414 >> 2] = $$3$i$i2880;
 _memcpy($14702 | 0, 1933224, 1568) | 0;
 _memcpy($$3$i$i2880 + 1620 | 0, 1934792, 1568) | 0;
 _memcpy($$3$i$i2880 + 3188 | 0, 1936360, 1568) | 0;
 _memcpy($$3$i$i2880 + 4756 | 0, 1937928, 1568) | 0;
 _memcpy($$3$i$i2880 + 6324 | 0, 1939496, 1568) | 0;
 _memcpy($$3$i$i2880 + 7892 | 0, 1941064, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $414);
 if ($$3$i$i2880 | 0) {
  $14718 = $$3$i$i2880 + 5 | 0;
  $14720 = (HEAP8[$14718 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14718 >> 0] = $14720;
  if (!($14720 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2880);
  HEAP32[$414 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 754;
 HEAP16[$bitmapData + 4 >> 1] = 876;
 HEAP16[$bitmapData + 6 >> 1] = 756;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4756) label = 2803; else {
  $14727 = HEAP32[918918] | 0;
  if (($14727 | 0) == (HEAP32[918916] | 0)) label = 2803; else {
   $$lcssa$i$i2902 = 3675672;
   $$lcssa8$i$i2901 = $14727;
   label = 2804;
  }
 }
 do if ((label | 0) == 2803) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4756) {
   $14734 = HEAP32[918924] | 0;
   if (($14734 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2902 = 3675696;
    $$lcssa8$i$i2901 = $14734;
    label = 2804;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4756) {
   $14739 = HEAP32[918930] | 0;
   if (($14739 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2902 = 3675720;
    $$lcssa8$i$i2901 = $14739;
    label = 2804;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4756) {
   $14744 = HEAP32[918936] | 0;
   if (($14744 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2902 = 3675744;
    $$lcssa8$i$i2901 = $14744;
    label = 2804;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4756) {
   $14749 = HEAP32[918942] | 0;
   if (($14749 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2902 = 3675768;
    $$lcssa8$i$i2901 = $14749;
    label = 2804;
    break;
   }
  }
  $$3$i$i2903 = __Znwj(4756) | 0;
 } while (0);
 if ((label | 0) == 2804) {
  $14732 = $$lcssa8$i$i2901 + -4 | 0;
  HEAP32[$$lcssa$i$i2902 >> 2] = $14732;
  $$3$i$i2903 = HEAP32[$14732 >> 2] | 0;
 }
 $14753 = $$3$i$i2903 + 52 | 0;
 HEAP16[$$3$i$i2903 >> 1] = 784;
 HEAP16[$$3$i$i2903 + 2 >> 1] = 3;
 HEAP8[$$3$i$i2903 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2903 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2903 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i2903 + 12 >> 2] = 4704;
 HEAP32[$$3$i$i2903 + 16 >> 2] = $14753;
 HEAP32[$$3$i$i2903 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2903 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2903 + 48 >> 0] = 0;
 HEAP32[$415 >> 2] = $$3$i$i2903;
 _memcpy($14753 | 0, 1942632, 1568) | 0;
 _memcpy($$3$i$i2903 + 1620 | 0, 1944200, 1568) | 0;
 _memcpy($$3$i$i2903 + 3188 | 0, 1945768, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $415);
 if ($$3$i$i2903 | 0) {
  $14766 = $$3$i$i2903 + 5 | 0;
  $14768 = (HEAP8[$14766 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14766 >> 0] = $14768;
  if (!($14768 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2903);
  HEAP32[$415 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 757;
 HEAP16[$bitmapData + 4 >> 1] = 876;
 HEAP16[$bitmapData + 6 >> 1] = 759;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4756) label = 2819; else {
  $14775 = HEAP32[918918] | 0;
  if (($14775 | 0) == (HEAP32[918916] | 0)) label = 2819; else {
   $$lcssa$i$i2914 = 3675672;
   $$lcssa8$i$i2913 = $14775;
   label = 2820;
  }
 }
 do if ((label | 0) == 2819) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4756) {
   $14782 = HEAP32[918924] | 0;
   if (($14782 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2914 = 3675696;
    $$lcssa8$i$i2913 = $14782;
    label = 2820;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4756) {
   $14787 = HEAP32[918930] | 0;
   if (($14787 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2914 = 3675720;
    $$lcssa8$i$i2913 = $14787;
    label = 2820;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4756) {
   $14792 = HEAP32[918936] | 0;
   if (($14792 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2914 = 3675744;
    $$lcssa8$i$i2913 = $14792;
    label = 2820;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4756) {
   $14797 = HEAP32[918942] | 0;
   if (($14797 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2914 = 3675768;
    $$lcssa8$i$i2913 = $14797;
    label = 2820;
    break;
   }
  }
  $$3$i$i2915 = __Znwj(4756) | 0;
 } while (0);
 if ((label | 0) == 2820) {
  $14780 = $$lcssa8$i$i2913 + -4 | 0;
  HEAP32[$$lcssa$i$i2914 >> 2] = $14780;
  $$3$i$i2915 = HEAP32[$14780 >> 2] | 0;
 }
 $14801 = $$3$i$i2915 + 52 | 0;
 HEAP16[$$3$i$i2915 >> 1] = 784;
 HEAP16[$$3$i$i2915 + 2 >> 1] = 3;
 HEAP8[$$3$i$i2915 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2915 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2915 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i2915 + 12 >> 2] = 4704;
 HEAP32[$$3$i$i2915 + 16 >> 2] = $14801;
 HEAP32[$$3$i$i2915 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2915 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2915 + 48 >> 0] = 0;
 HEAP32[$416 >> 2] = $$3$i$i2915;
 _memcpy($14801 | 0, 1947336, 1568) | 0;
 _memcpy($$3$i$i2915 + 1620 | 0, 1948904, 1568) | 0;
 _memcpy($$3$i$i2915 + 3188 | 0, 1950472, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $416);
 if ($$3$i$i2915 | 0) {
  $14814 = $$3$i$i2915 + 5 | 0;
  $14816 = (HEAP8[$14814 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14814 >> 0] = $14816;
  if (!($14816 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2915);
  HEAP32[$416 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 760;
 HEAP16[$bitmapData + 4 >> 1] = 876;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 9460) label = 2835; else {
  $14823 = HEAP32[918918] | 0;
  if (($14823 | 0) == (HEAP32[918916] | 0)) label = 2835; else {
   $$lcssa$i$i2927 = 3675672;
   $$lcssa8$i$i2926 = $14823;
   label = 2836;
  }
 }
 do if ((label | 0) == 2835) {
  if ((HEAP32[918925] | 0) >>> 0 >= 9460) {
   $14830 = HEAP32[918924] | 0;
   if (($14830 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2927 = 3675696;
    $$lcssa8$i$i2926 = $14830;
    label = 2836;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 9460) {
   $14835 = HEAP32[918930] | 0;
   if (($14835 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2927 = 3675720;
    $$lcssa8$i$i2926 = $14835;
    label = 2836;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 9460) {
   $14840 = HEAP32[918936] | 0;
   if (($14840 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2927 = 3675744;
    $$lcssa8$i$i2926 = $14840;
    label = 2836;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 9460) {
   $14845 = HEAP32[918942] | 0;
   if (($14845 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2927 = 3675768;
    $$lcssa8$i$i2926 = $14845;
    label = 2836;
    break;
   }
  }
  $$3$i$i2928 = __Znwj(9460) | 0;
 } while (0);
 if ((label | 0) == 2836) {
  $14828 = $$lcssa8$i$i2926 + -4 | 0;
  HEAP32[$$lcssa$i$i2927 >> 2] = $14828;
  $$3$i$i2928 = HEAP32[$14828 >> 2] | 0;
 }
 $14849 = $$3$i$i2928 + 52 | 0;
 HEAP16[$$3$i$i2928 >> 1] = 784;
 HEAP16[$$3$i$i2928 + 2 >> 1] = 6;
 HEAP8[$$3$i$i2928 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2928 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2928 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i2928 + 12 >> 2] = 9408;
 HEAP32[$$3$i$i2928 + 16 >> 2] = $14849;
 HEAP32[$$3$i$i2928 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2928 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2928 + 48 >> 0] = 0;
 HEAP32[$417 >> 2] = $$3$i$i2928;
 _memcpy($14849 | 0, 1952040, 1568) | 0;
 _memcpy($$3$i$i2928 + 1620 | 0, 1953608, 1568) | 0;
 _memcpy($$3$i$i2928 + 3188 | 0, 1955176, 1568) | 0;
 _memcpy($$3$i$i2928 + 4756 | 0, 1956744, 1568) | 0;
 _memcpy($$3$i$i2928 + 6324 | 0, 1958312, 1568) | 0;
 _memcpy($$3$i$i2928 + 7892 | 0, 1959880, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $417);
 if ($$3$i$i2928 | 0) {
  $14865 = $$3$i$i2928 + 5 | 0;
  $14867 = (HEAP8[$14865 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14865 >> 0] = $14867;
  if (!($14867 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2928);
  HEAP32[$417 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 890;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 917;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2180) label = 2851; else {
  $14874 = HEAP32[918918] | 0;
  if (($14874 | 0) == (HEAP32[918916] | 0)) label = 2851; else {
   $$lcssa$i$i2939 = 3675672;
   $$lcssa8$i$i2938 = $14874;
   label = 2852;
  }
 }
 do if ((label | 0) == 2851) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2180) {
   $14881 = HEAP32[918924] | 0;
   if (($14881 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2939 = 3675696;
    $$lcssa8$i$i2938 = $14881;
    label = 2852;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2180) {
   $14886 = HEAP32[918930] | 0;
   if (($14886 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2939 = 3675720;
    $$lcssa8$i$i2938 = $14886;
    label = 2852;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2180) {
   $14891 = HEAP32[918936] | 0;
   if (($14891 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2939 = 3675744;
    $$lcssa8$i$i2938 = $14891;
    label = 2852;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2180) {
   $14896 = HEAP32[918942] | 0;
   if (($14896 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2939 = 3675768;
    $$lcssa8$i$i2938 = $14896;
    label = 2852;
    break;
   }
  }
  $$3$i$i2940 = __Znwj(2180) | 0;
 } while (0);
 if ((label | 0) == 2852) {
  $14879 = $$lcssa8$i$i2938 + -4 | 0;
  HEAP32[$$lcssa$i$i2939 >> 2] = $14879;
  $$3$i$i2940 = HEAP32[$14879 >> 2] | 0;
 }
 $14900 = $$3$i$i2940 + 52 | 0;
 HEAP16[$$3$i$i2940 >> 1] = 28;
 HEAP16[$$3$i$i2940 + 2 >> 1] = 38;
 HEAP8[$$3$i$i2940 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2940 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2940 + 8 >> 2] = 56;
 HEAP32[$$3$i$i2940 + 12 >> 2] = 2128;
 HEAP32[$$3$i$i2940 + 16 >> 2] = $14900;
 HEAP32[$$3$i$i2940 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2940 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2940 + 48 >> 0] = 0;
 HEAP32[$418 >> 2] = $$3$i$i2940;
 dest = $14900;
 src = 1961448;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 108 | 0;
 src = 1961504;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 164 | 0;
 src = 1961560;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 220 | 0;
 src = 1961616;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 276 | 0;
 src = 1961672;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 332 | 0;
 src = 1961728;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 388 | 0;
 src = 1961784;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 444 | 0;
 src = 1961840;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 500 | 0;
 src = 1961896;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 556 | 0;
 src = 1961952;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 612 | 0;
 src = 1962008;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 668 | 0;
 src = 1962064;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 724 | 0;
 src = 1962120;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 780 | 0;
 src = 1962176;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 836 | 0;
 src = 1962232;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 892 | 0;
 src = 1962288;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 948 | 0;
 src = 1962344;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1004 | 0;
 src = 1962400;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1060 | 0;
 src = 1962456;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1116 | 0;
 src = 1962512;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1172 | 0;
 src = 1962568;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1228 | 0;
 src = 1962624;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1284 | 0;
 src = 1962680;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1340 | 0;
 src = 1962736;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1396 | 0;
 src = 1962792;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1452 | 0;
 src = 1962848;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1508 | 0;
 src = 1962904;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1564 | 0;
 src = 1962960;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1620 | 0;
 src = 1963016;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1676 | 0;
 src = 1963072;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1732 | 0;
 src = 1963128;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1788 | 0;
 src = 1963184;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1844 | 0;
 src = 1963240;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1900 | 0;
 src = 1963296;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 1956 | 0;
 src = 1963352;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 2012 | 0;
 src = 1963408;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 2068 | 0;
 src = 1963464;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2940 + 2124 | 0;
 src = 1963520;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $418);
 if ($$3$i$i2940 | 0) {
  $14948 = $$3$i$i2940 + 5 | 0;
  $14950 = (HEAP8[$14948 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$14948 >> 0] = $14950;
  if (!($14950 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2940);
  HEAP32[$418 >> 2] = 0;
 }
 $14952 = $419;
 HEAP32[$14952 >> 2] = 47710210;
 HEAP32[$14952 + 4 >> 2] = 2490451;
 HEAP32[$419 + 8 >> 2] = 54937;
 HEAP16[$420 >> 1] = 80;
 HEAP16[$420 + 2 >> 1] = 728;
 HEAP16[$420 + 4 >> 1] = 5;
 HEAP16[$420 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $419, $420);
 $14960 = $421;
 HEAP32[$14960 >> 2] = 47710210;
 HEAP32[$14960 + 4 >> 2] = 2490451;
 HEAP32[$421 + 8 >> 2] = 54937;
 HEAP16[$422 >> 1] = 80;
 HEAP16[$422 + 2 >> 1] = 728;
 HEAP16[$422 + 4 >> 1] = 5;
 HEAP16[$422 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $421, $422);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 79;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6132) label = 2867; else {
  $14973 = HEAP32[918918] | 0;
  if (($14973 | 0) == (HEAP32[918916] | 0)) label = 2867; else {
   $$lcssa$i$i2975 = 3675672;
   $$lcssa8$i$i2974 = $14973;
   label = 2868;
  }
 }
 do if ((label | 0) == 2867) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6132) {
   $14980 = HEAP32[918924] | 0;
   if (($14980 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2975 = 3675696;
    $$lcssa8$i$i2974 = $14980;
    label = 2868;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6132) {
   $14985 = HEAP32[918930] | 0;
   if (($14985 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2975 = 3675720;
    $$lcssa8$i$i2974 = $14985;
    label = 2868;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6132) {
   $14990 = HEAP32[918936] | 0;
   if (($14990 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2975 = 3675744;
    $$lcssa8$i$i2974 = $14990;
    label = 2868;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6132) {
   $14995 = HEAP32[918942] | 0;
   if (($14995 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2975 = 3675768;
    $$lcssa8$i$i2974 = $14995;
    label = 2868;
    break;
   }
  }
  $$3$i$i2976 = __Znwj(6132) | 0;
 } while (0);
 if ((label | 0) == 2868) {
  $14978 = $$lcssa8$i$i2974 + -4 | 0;
  HEAP32[$$lcssa$i$i2975 >> 2] = $14978;
  $$3$i$i2976 = HEAP32[$14978 >> 2] | 0;
 }
 $14999 = $$3$i$i2976 + 52 | 0;
 HEAP16[$$3$i$i2976 >> 1] = 80;
 HEAP16[$$3$i$i2976 + 2 >> 1] = 38;
 HEAP8[$$3$i$i2976 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2976 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2976 + 8 >> 2] = 160;
 HEAP32[$$3$i$i2976 + 12 >> 2] = 6080;
 HEAP32[$$3$i$i2976 + 16 >> 2] = $14999;
 HEAP32[$$3$i$i2976 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2976 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2976 + 48 >> 0] = 0;
 HEAP32[$423 >> 2] = $$3$i$i2976;
 _memcpy($14999 | 0, 1963576, 160) | 0;
 _memcpy($$3$i$i2976 + 212 | 0, 1963736, 160) | 0;
 _memcpy($$3$i$i2976 + 372 | 0, 1963896, 160) | 0;
 _memcpy($$3$i$i2976 + 532 | 0, 1964056, 160) | 0;
 _memcpy($$3$i$i2976 + 692 | 0, 1964216, 160) | 0;
 _memcpy($$3$i$i2976 + 852 | 0, 1964376, 160) | 0;
 _memcpy($$3$i$i2976 + 1012 | 0, 1964536, 160) | 0;
 _memcpy($$3$i$i2976 + 1172 | 0, 1964696, 160) | 0;
 _memcpy($$3$i$i2976 + 1332 | 0, 1964856, 160) | 0;
 _memcpy($$3$i$i2976 + 1492 | 0, 1965016, 160) | 0;
 _memcpy($$3$i$i2976 + 1652 | 0, 1965176, 160) | 0;
 _memcpy($$3$i$i2976 + 1812 | 0, 1965336, 160) | 0;
 _memcpy($$3$i$i2976 + 1972 | 0, 1965496, 160) | 0;
 _memcpy($$3$i$i2976 + 2132 | 0, 1965656, 160) | 0;
 _memcpy($$3$i$i2976 + 2292 | 0, 1965816, 160) | 0;
 _memcpy($$3$i$i2976 + 2452 | 0, 1965976, 160) | 0;
 _memcpy($$3$i$i2976 + 2612 | 0, 1966136, 160) | 0;
 _memcpy($$3$i$i2976 + 2772 | 0, 1966296, 160) | 0;
 _memcpy($$3$i$i2976 + 2932 | 0, 1966456, 160) | 0;
 _memcpy($$3$i$i2976 + 3092 | 0, 1966616, 160) | 0;
 _memcpy($$3$i$i2976 + 3252 | 0, 1966776, 160) | 0;
 _memcpy($$3$i$i2976 + 3412 | 0, 1966936, 160) | 0;
 _memcpy($$3$i$i2976 + 3572 | 0, 1967096, 160) | 0;
 _memcpy($$3$i$i2976 + 3732 | 0, 1967256, 160) | 0;
 _memcpy($$3$i$i2976 + 3892 | 0, 1967416, 160) | 0;
 _memcpy($$3$i$i2976 + 4052 | 0, 1967576, 160) | 0;
 _memcpy($$3$i$i2976 + 4212 | 0, 1967736, 160) | 0;
 _memcpy($$3$i$i2976 + 4372 | 0, 1967896, 160) | 0;
 _memcpy($$3$i$i2976 + 4532 | 0, 1968056, 160) | 0;
 _memcpy($$3$i$i2976 + 4692 | 0, 1968216, 160) | 0;
 _memcpy($$3$i$i2976 + 4852 | 0, 1968376, 160) | 0;
 _memcpy($$3$i$i2976 + 5012 | 0, 1968536, 160) | 0;
 _memcpy($$3$i$i2976 + 5172 | 0, 1968696, 160) | 0;
 _memcpy($$3$i$i2976 + 5332 | 0, 1968856, 160) | 0;
 _memcpy($$3$i$i2976 + 5492 | 0, 1969016, 160) | 0;
 _memcpy($$3$i$i2976 + 5652 | 0, 1969176, 160) | 0;
 _memcpy($$3$i$i2976 + 5812 | 0, 1969336, 160) | 0;
 _memcpy($$3$i$i2976 + 5972 | 0, 1969496, 160) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $423);
 if ($$3$i$i2976 | 0) {
  $15047 = $$3$i$i2976 + 5 | 0;
  $15049 = (HEAP8[$15047 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$15047 >> 0] = $15049;
  if (!($15049 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2976);
  HEAP32[$423 >> 2] = 0;
 }
 $15051 = $424;
 HEAP32[$15051 >> 2] = 47711229;
 HEAP32[$15051 + 4 >> 2] = 2490369;
 HEAP32[$424 + 8 >> 2] = 65535;
 HEAP16[$425 >> 1] = 1021;
 HEAP16[$425 + 2 >> 1] = 728;
 HEAP16[$425 + 4 >> 1] = 1;
 HEAP16[$425 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $424, $425);
 $15059 = $426;
 HEAP32[$15059 >> 2] = 50135928;
 HEAP32[$15059 + 4 >> 2] = 65669;
 HEAP32[$426 + 8 >> 2] = 65535;
 HEAP16[$427 >> 1] = 888;
 HEAP16[$427 + 2 >> 1] = 765;
 HEAP16[$427 + 4 >> 1] = 133;
 HEAP16[$427 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $426, $427);
 $15067 = $428;
 HEAP32[$15067 >> 2] = 47711096;
 HEAP32[$15067 + 4 >> 2] = 2424833;
 HEAP32[$428 + 8 >> 2] = 33808;
 HEAP16[$429 >> 1] = 888;
 HEAP16[$429 + 2 >> 1] = 728;
 HEAP16[$429 + 4 >> 1] = 1;
 HEAP16[$429 + 6 >> 1] = 37;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $428, $429);
 $15075 = $430;
 HEAP32[$15075 >> 2] = 47711097;
 HEAP32[$15075 + 4 >> 2] = 65668;
 HEAP32[$430 + 8 >> 2] = 33808;
 HEAP16[$431 >> 1] = 889;
 HEAP16[$431 + 2 >> 1] = 728;
 HEAP16[$431 + 4 >> 1] = 132;
 HEAP16[$431 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $430, $431);
 $15083 = $432;
 HEAP32[$15083 >> 2] = 47776735;
 HEAP32[$15083 + 4 >> 2] = 2359326;
 HEAP32[$432 + 8 >> 2] = 54937;
 HEAP16[$433 >> 1] = 991;
 HEAP16[$433 + 2 >> 1] = 729;
 HEAP16[$433 + 4 >> 1] = 30;
 HEAP16[$433 + 6 >> 1] = 36;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $432, $433);
 $15091 = $434;
 HEAP32[$15091 >> 2] = 47710293;
 HEAP32[$15091 + 4 >> 2] = 2491171;
 HEAP32[$434 + 8 >> 2] = 54937;
 HEAP16[$435 >> 1] = 85;
 HEAP16[$435 + 2 >> 1] = 728;
 HEAP16[$435 + 4 >> 1] = 9;
 HEAP16[$435 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $434, $435);
 $15099 = $436;
 HEAP32[$15099 >> 2] = 47710293;
 HEAP32[$15099 + 4 >> 2] = 2491171;
 HEAP32[$436 + 8 >> 2] = 54937;
 HEAP16[$437 >> 1] = 877;
 HEAP16[$437 + 2 >> 1] = 728;
 HEAP16[$437 + 4 >> 1] = 11;
 HEAP16[$437 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $436, $437);
 $15107 = $438;
 HEAP32[$15107 >> 2] = 47710293;
 HEAP32[$15107 + 4 >> 2] = 2491143;
 HEAP32[$438 + 8 >> 2] = 54937;
 HEAP16[$439 >> 1] = 85;
 HEAP16[$439 + 2 >> 1] = 728;
 HEAP16[$439 + 4 >> 1] = 9;
 HEAP16[$439 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $438, $439);
 $15115 = $440;
 HEAP32[$15115 >> 2] = 47710293;
 HEAP32[$15115 + 4 >> 2] = 2491143;
 HEAP32[$440 + 8 >> 2] = 54937;
 HEAP16[$441 >> 1] = 847;
 HEAP16[$441 + 2 >> 1] = 728;
 HEAP16[$441 + 4 >> 1] = 13;
 HEAP16[$441 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $440, $441);
 $15123 = $442;
 HEAP32[$15123 >> 2] = 47776649;
 HEAP32[$15123 + 4 >> 2] = 2359326;
 HEAP32[$442 + 8 >> 2] = 54937;
 HEAP16[$443 >> 1] = 905;
 HEAP16[$443 + 2 >> 1] = 729;
 HEAP16[$443 + 4 >> 1] = 30;
 HEAP16[$443 + 6 >> 1] = 36;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $442, $443);
 $15131 = $444;
 HEAP32[$15131 >> 2] = 47710210;
 HEAP32[$15131 + 4 >> 2] = 2490451;
 HEAP32[$444 + 8 >> 2] = 54937;
 HEAP16[$445 >> 1] = 80;
 HEAP16[$445 + 2 >> 1] = 728;
 HEAP16[$445 + 4 >> 1] = 5;
 HEAP16[$445 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $444, $445);
 $15139 = $446;
 HEAP32[$15139 >> 2] = 47710210;
 HEAP32[$15139 + 4 >> 2] = 2490451;
 HEAP32[$446 + 8 >> 2] = 54937;
 HEAP16[$447 >> 1] = 80;
 HEAP16[$447 + 2 >> 1] = 728;
 HEAP16[$447 + 4 >> 1] = 5;
 HEAP16[$447 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $446, $447);
 $15147 = $448;
 HEAP32[$15147 >> 2] = 47776633;
 HEAP32[$15147 + 4 >> 2] = 2359312;
 HEAP32[$448 + 8 >> 2] = 54937;
 HEAP16[$449 >> 1] = 889;
 HEAP16[$449 + 2 >> 1] = 729;
 HEAP16[$449 + 4 >> 1] = 16;
 HEAP16[$449 + 6 >> 1] = 36;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $448, $449);
 $15155 = $450;
 HEAP32[$15155 >> 2] = 48694143;
 HEAP32[$15155 + 4 >> 2] = 131073;
 HEAP32[$450 + 8 >> 2] = 0;
 HEAP16[$451 >> 1] = 895;
 HEAP16[$451 + 2 >> 1] = 743;
 HEAP16[$451 + 4 >> 1] = 1;
 HEAP16[$451 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $450, $451);
 $15163 = $452;
 HEAP32[$15163 >> 2] = 48956287;
 HEAP32[$15163 + 4 >> 2] = 131073;
 HEAP32[$452 + 8 >> 2] = 0;
 HEAP16[$453 >> 1] = 895;
 HEAP16[$453 + 2 >> 1] = 747;
 HEAP16[$453 + 4 >> 1] = 1;
 HEAP16[$453 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $452, $453);
 $15171 = $454;
 HEAP32[$15171 >> 2] = 48628608;
 HEAP32[$15171 + 4 >> 2] = 131073;
 HEAP32[$454 + 8 >> 2] = 0;
 HEAP16[$455 >> 1] = 896;
 HEAP16[$455 + 2 >> 1] = 742;
 HEAP16[$455 + 4 >> 1] = 1;
 HEAP16[$455 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $454, $455);
 $15179 = $456;
 HEAP32[$15179 >> 2] = 48890752;
 HEAP32[$15179 + 4 >> 2] = 131073;
 HEAP32[$456 + 8 >> 2] = 0;
 HEAP16[$457 >> 1] = 896;
 HEAP16[$457 + 2 >> 1] = 746;
 HEAP16[$457 + 4 >> 1] = 1;
 HEAP16[$457 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $456, $457);
 $15187 = $458;
 HEAP32[$15187 >> 2] = 48563073;
 HEAP32[$15187 + 4 >> 2] = 131073;
 HEAP32[$458 + 8 >> 2] = 0;
 HEAP16[$459 >> 1] = 897;
 HEAP16[$459 + 2 >> 1] = 741;
 HEAP16[$459 + 4 >> 1] = 1;
 HEAP16[$459 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $458, $459);
 $15195 = $460;
 HEAP32[$15195 >> 2] = 48825217;
 HEAP32[$15195 + 4 >> 2] = 131073;
 HEAP32[$460 + 8 >> 2] = 0;
 HEAP16[$461 >> 1] = 897;
 HEAP16[$461 + 2 >> 1] = 745;
 HEAP16[$461 + 4 >> 1] = 1;
 HEAP16[$461 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $460, $461);
 $15203 = $462;
 HEAP32[$15203 >> 2] = 48628610;
 HEAP32[$15203 + 4 >> 2] = 131073;
 HEAP32[$462 + 8 >> 2] = 0;
 HEAP16[$463 >> 1] = 898;
 HEAP16[$463 + 2 >> 1] = 742;
 HEAP16[$463 + 4 >> 1] = 1;
 HEAP16[$463 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $462, $463);
 $15211 = $464;
 HEAP32[$15211 >> 2] = 48890754;
 HEAP32[$15211 + 4 >> 2] = 131073;
 HEAP32[$464 + 8 >> 2] = 0;
 HEAP16[$465 >> 1] = 898;
 HEAP16[$465 + 2 >> 1] = 746;
 HEAP16[$465 + 4 >> 1] = 1;
 HEAP16[$465 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $464, $465);
 $15219 = $466;
 HEAP32[$15219 >> 2] = 48694147;
 HEAP32[$15219 + 4 >> 2] = 131073;
 HEAP32[$466 + 8 >> 2] = 0;
 HEAP16[$467 >> 1] = 899;
 HEAP16[$467 + 2 >> 1] = 743;
 HEAP16[$467 + 4 >> 1] = 1;
 HEAP16[$467 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $466, $467);
 $15227 = $468;
 HEAP32[$15227 >> 2] = 48956291;
 HEAP32[$15227 + 4 >> 2] = 131073;
 HEAP32[$468 + 8 >> 2] = 0;
 HEAP16[$469 >> 1] = 899;
 HEAP16[$469 + 2 >> 1] = 747;
 HEAP16[$469 + 4 >> 1] = 1;
 HEAP16[$469 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $468, $469);
 $15235 = $470;
 HEAP32[$15235 >> 2] = 47841369;
 HEAP32[$15235 + 4 >> 2] = 2228225;
 HEAP32[$470 + 8 >> 2] = 33808;
 HEAP16[$471 >> 1] = 89;
 HEAP16[$471 + 2 >> 1] = 730;
 HEAP16[$471 + 4 >> 1] = 1;
 HEAP16[$471 + 6 >> 1] = 34;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $470, $471);
 $15243 = $472;
 HEAP32[$15243 >> 2] = 50004055;
 HEAP32[$15243 + 4 >> 2] = 65538;
 HEAP32[$472 + 8 >> 2] = 33808;
 HEAP16[$473 >> 1] = 87;
 HEAP16[$473 + 2 >> 1] = 763;
 HEAP16[$473 + 4 >> 1] = 2;
 HEAP16[$473 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $472, $473);
 $15251 = $474;
 HEAP32[$15251 >> 2] = 47841367;
 HEAP32[$15251 + 4 >> 2] = 2162689;
 HEAP32[$474 + 8 >> 2] = 65535;
 HEAP16[$475 >> 1] = 87;
 HEAP16[$475 + 2 >> 1] = 730;
 HEAP16[$475 + 4 >> 1] = 1;
 HEAP16[$475 + 6 >> 1] = 33;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $474, $475);
 $15259 = $476;
 HEAP32[$15259 >> 2] = 47841368;
 HEAP32[$15259 + 4 >> 2] = 65537;
 HEAP32[$476 + 8 >> 2] = 65535;
 HEAP16[$477 >> 1] = 88;
 HEAP16[$477 + 2 >> 1] = 730;
 HEAP16[$477 + 4 >> 1] = 1;
 HEAP16[$477 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $476, $477);
 $15267 = $478;
 HEAP32[$15267 >> 2] = 47906904;
 HEAP32[$15267 + 4 >> 2] = 2097153;
 HEAP32[$478 + 8 >> 2] = 54937;
 HEAP16[$479 >> 1] = 88;
 HEAP16[$479 + 2 >> 1] = 731;
 HEAP16[$479 + 4 >> 1] = 1;
 HEAP16[$479 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $478, $479);
 $15275 = $480;
 HEAP32[$15275 >> 2] = 47842135;
 HEAP32[$15275 + 4 >> 2] = 2228225;
 HEAP32[$480 + 8 >> 2] = 33808;
 HEAP16[$481 >> 1] = 855;
 HEAP16[$481 + 2 >> 1] = 730;
 HEAP16[$481 + 4 >> 1] = 1;
 HEAP16[$481 + 6 >> 1] = 34;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $480, $481);
 $15283 = $482;
 HEAP32[$15283 >> 2] = 50004821;
 HEAP32[$15283 + 4 >> 2] = 65538;
 HEAP32[$482 + 8 >> 2] = 33808;
 HEAP16[$483 >> 1] = 853;
 HEAP16[$483 + 2 >> 1] = 763;
 HEAP16[$483 + 4 >> 1] = 2;
 HEAP16[$483 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $482, $483);
 $15291 = $484;
 HEAP32[$15291 >> 2] = 47842133;
 HEAP32[$15291 + 4 >> 2] = 2162689;
 HEAP32[$484 + 8 >> 2] = 65535;
 HEAP16[$485 >> 1] = 853;
 HEAP16[$485 + 2 >> 1] = 730;
 HEAP16[$485 + 4 >> 1] = 1;
 HEAP16[$485 + 6 >> 1] = 33;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $484, $485);
 $15299 = $486;
 HEAP32[$15299 >> 2] = 47842134;
 HEAP32[$15299 + 4 >> 2] = 65537;
 HEAP32[$486 + 8 >> 2] = 65535;
 HEAP16[$487 >> 1] = 854;
 HEAP16[$487 + 2 >> 1] = 730;
 HEAP16[$487 + 4 >> 1] = 1;
 HEAP16[$487 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $486, $487);
 $15307 = $488;
 HEAP32[$15307 >> 2] = 47907670;
 HEAP32[$15307 + 4 >> 2] = 2097153;
 HEAP32[$488 + 8 >> 2] = 54937;
 HEAP16[$489 >> 1] = 854;
 HEAP16[$489 + 2 >> 1] = 731;
 HEAP16[$489 + 4 >> 1] = 1;
 HEAP16[$489 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $488, $489);
 $15315 = $490;
 HEAP32[$15315 >> 2] = 47710210;
 HEAP32[$15315 + 4 >> 2] = 2490451;
 HEAP32[$490 + 8 >> 2] = 54937;
 HEAP16[$491 >> 1] = 80;
 HEAP16[$491 + 2 >> 1] = 728;
 HEAP16[$491 + 4 >> 1] = 5;
 HEAP16[$491 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $490, $491);
 $15323 = $492;
 HEAP32[$15323 >> 2] = 47710210;
 HEAP32[$15323 + 4 >> 2] = 2490451;
 HEAP32[$492 + 8 >> 2] = 54937;
 HEAP16[$493 >> 1] = 80;
 HEAP16[$493 + 2 >> 1] = 728;
 HEAP16[$493 + 4 >> 1] = 5;
 HEAP16[$493 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $492, $493);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 79;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6132) label = 2883; else {
  $15336 = HEAP32[918918] | 0;
  if (($15336 | 0) == (HEAP32[918916] | 0)) label = 2883; else {
   $$lcssa$i$i3106 = 3675672;
   $$lcssa8$i$i3105 = $15336;
   label = 2884;
  }
 }
 do if ((label | 0) == 2883) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6132) {
   $15343 = HEAP32[918924] | 0;
   if (($15343 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3106 = 3675696;
    $$lcssa8$i$i3105 = $15343;
    label = 2884;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6132) {
   $15348 = HEAP32[918930] | 0;
   if (($15348 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3106 = 3675720;
    $$lcssa8$i$i3105 = $15348;
    label = 2884;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6132) {
   $15353 = HEAP32[918936] | 0;
   if (($15353 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3106 = 3675744;
    $$lcssa8$i$i3105 = $15353;
    label = 2884;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6132) {
   $15358 = HEAP32[918942] | 0;
   if (($15358 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3106 = 3675768;
    $$lcssa8$i$i3105 = $15358;
    label = 2884;
    break;
   }
  }
  $$3$i$i3107 = __Znwj(6132) | 0;
 } while (0);
 if ((label | 0) == 2884) {
  $15341 = $$lcssa8$i$i3105 + -4 | 0;
  HEAP32[$$lcssa$i$i3106 >> 2] = $15341;
  $$3$i$i3107 = HEAP32[$15341 >> 2] | 0;
 }
 $15362 = $$3$i$i3107 + 52 | 0;
 HEAP16[$$3$i$i3107 >> 1] = 80;
 HEAP16[$$3$i$i3107 + 2 >> 1] = 38;
 HEAP8[$$3$i$i3107 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3107 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3107 + 8 >> 2] = 160;
 HEAP32[$$3$i$i3107 + 12 >> 2] = 6080;
 HEAP32[$$3$i$i3107 + 16 >> 2] = $15362;
 HEAP32[$$3$i$i3107 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3107 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3107 + 48 >> 0] = 0;
 HEAP32[$494 >> 2] = $$3$i$i3107;
 _memcpy($15362 | 0, 1969656, 160) | 0;
 _memcpy($$3$i$i3107 + 212 | 0, 1969816, 160) | 0;
 _memcpy($$3$i$i3107 + 372 | 0, 1969976, 160) | 0;
 _memcpy($$3$i$i3107 + 532 | 0, 1970136, 160) | 0;
 _memcpy($$3$i$i3107 + 692 | 0, 1970296, 160) | 0;
 _memcpy($$3$i$i3107 + 852 | 0, 1970456, 160) | 0;
 _memcpy($$3$i$i3107 + 1012 | 0, 1970616, 160) | 0;
 _memcpy($$3$i$i3107 + 1172 | 0, 1970776, 160) | 0;
 _memcpy($$3$i$i3107 + 1332 | 0, 1970936, 160) | 0;
 _memcpy($$3$i$i3107 + 1492 | 0, 1971096, 160) | 0;
 _memcpy($$3$i$i3107 + 1652 | 0, 1971256, 160) | 0;
 _memcpy($$3$i$i3107 + 1812 | 0, 1971416, 160) | 0;
 _memcpy($$3$i$i3107 + 1972 | 0, 1971576, 160) | 0;
 _memcpy($$3$i$i3107 + 2132 | 0, 1971736, 160) | 0;
 _memcpy($$3$i$i3107 + 2292 | 0, 1971896, 160) | 0;
 _memcpy($$3$i$i3107 + 2452 | 0, 1972056, 160) | 0;
 _memcpy($$3$i$i3107 + 2612 | 0, 1972216, 160) | 0;
 _memcpy($$3$i$i3107 + 2772 | 0, 1972376, 160) | 0;
 _memcpy($$3$i$i3107 + 2932 | 0, 1972536, 160) | 0;
 _memcpy($$3$i$i3107 + 3092 | 0, 1972696, 160) | 0;
 _memcpy($$3$i$i3107 + 3252 | 0, 1972856, 160) | 0;
 _memcpy($$3$i$i3107 + 3412 | 0, 1973016, 160) | 0;
 _memcpy($$3$i$i3107 + 3572 | 0, 1973176, 160) | 0;
 _memcpy($$3$i$i3107 + 3732 | 0, 1973336, 160) | 0;
 _memcpy($$3$i$i3107 + 3892 | 0, 1973496, 160) | 0;
 _memcpy($$3$i$i3107 + 4052 | 0, 1973656, 160) | 0;
 _memcpy($$3$i$i3107 + 4212 | 0, 1973816, 160) | 0;
 _memcpy($$3$i$i3107 + 4372 | 0, 1973976, 160) | 0;
 _memcpy($$3$i$i3107 + 4532 | 0, 1974136, 160) | 0;
 _memcpy($$3$i$i3107 + 4692 | 0, 1974296, 160) | 0;
 _memcpy($$3$i$i3107 + 4852 | 0, 1974456, 160) | 0;
 _memcpy($$3$i$i3107 + 5012 | 0, 1974616, 160) | 0;
 _memcpy($$3$i$i3107 + 5172 | 0, 1974776, 160) | 0;
 _memcpy($$3$i$i3107 + 5332 | 0, 1974936, 160) | 0;
 _memcpy($$3$i$i3107 + 5492 | 0, 1975096, 160) | 0;
 _memcpy($$3$i$i3107 + 5652 | 0, 1975256, 160) | 0;
 _memcpy($$3$i$i3107 + 5812 | 0, 1975416, 160) | 0;
 _memcpy($$3$i$i3107 + 5972 | 0, 1975576, 160) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $494);
 if ($$3$i$i3107 | 0) {
  $15410 = $$3$i$i3107 + 5 | 0;
  $15412 = (HEAP8[$15410 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$15410 >> 0] = $15412;
  if (!($15412 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3107);
  HEAP32[$494 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 846;
 HEAP16[$bitmapData + 6 >> 1] = 740;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 19708) label = 2899; else {
  $15419 = HEAP32[918918] | 0;
  if (($15419 | 0) == (HEAP32[918916] | 0)) label = 2899; else {
   $$lcssa$i$i3118 = 3675672;
   $$lcssa8$i$i3117 = $15419;
   label = 2900;
  }
 }
 do if ((label | 0) == 2899) {
  if ((HEAP32[918925] | 0) >>> 0 >= 19708) {
   $15426 = HEAP32[918924] | 0;
   if (($15426 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3118 = 3675696;
    $$lcssa8$i$i3117 = $15426;
    label = 2900;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 19708) {
   $15431 = HEAP32[918930] | 0;
   if (($15431 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3118 = 3675720;
    $$lcssa8$i$i3117 = $15431;
    label = 2900;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 19708) {
   $15436 = HEAP32[918936] | 0;
   if (($15436 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3118 = 3675744;
    $$lcssa8$i$i3117 = $15436;
    label = 2900;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 19708) {
   $15441 = HEAP32[918942] | 0;
   if (($15441 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3118 = 3675768;
    $$lcssa8$i$i3117 = $15441;
    label = 2900;
    break;
   }
  }
  $$3$i$i3119 = __Znwj(19708) | 0;
 } while (0);
 if ((label | 0) == 2900) {
  $15424 = $$lcssa8$i$i3117 + -4 | 0;
  HEAP32[$$lcssa$i$i3118 >> 2] = $15424;
  $$3$i$i3119 = HEAP32[$15424 >> 2] | 0;
 }
 $15445 = $$3$i$i3119 + 52 | 0;
 HEAP16[$$3$i$i3119 >> 1] = 756;
 HEAP16[$$3$i$i3119 + 2 >> 1] = 13;
 HEAP8[$$3$i$i3119 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3119 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3119 + 8 >> 2] = 1512;
 HEAP32[$$3$i$i3119 + 12 >> 2] = 19656;
 HEAP32[$$3$i$i3119 + 16 >> 2] = $15445;
 HEAP32[$$3$i$i3119 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3119 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3119 + 48 >> 0] = 0;
 HEAP32[$495 >> 2] = $$3$i$i3119;
 _memcpy($15445 | 0, 1975736, 1512) | 0;
 _memcpy($$3$i$i3119 + 1564 | 0, 1977248, 1512) | 0;
 _memcpy($$3$i$i3119 + 3076 | 0, 1978760, 1512) | 0;
 _memcpy($$3$i$i3119 + 4588 | 0, 1980272, 1512) | 0;
 _memcpy($$3$i$i3119 + 6100 | 0, 1981784, 1512) | 0;
 _memcpy($$3$i$i3119 + 7612 | 0, 1983296, 1512) | 0;
 _memcpy($$3$i$i3119 + 9124 | 0, 1984808, 1512) | 0;
 _memcpy($$3$i$i3119 + 10636 | 0, 1986320, 1512) | 0;
 _memcpy($$3$i$i3119 + 12148 | 0, 1987832, 1512) | 0;
 _memcpy($$3$i$i3119 + 13660 | 0, 1989344, 1512) | 0;
 _memcpy($$3$i$i3119 + 15172 | 0, 1990856, 1512) | 0;
 _memcpy($$3$i$i3119 + 16684 | 0, 1992368, 1512) | 0;
 _memcpy($$3$i$i3119 + 18196 | 0, 1993880, 1512) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $495);
 if ($$3$i$i3119 | 0) {
  $15468 = $$3$i$i3119 + 5 | 0;
  $15470 = (HEAP8[$15468 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$15468 >> 0] = $15470;
  if (!($15470 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3119);
  HEAP32[$495 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 741;
 HEAP16[$bitmapData + 4 >> 1] = 846;
 HEAP16[$bitmapData + 6 >> 1] = 761;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31804) label = 2915; else {
  $15477 = HEAP32[918918] | 0;
  if (($15477 | 0) == (HEAP32[918916] | 0)) label = 2915; else {
   $$lcssa$i$i3130 = 3675672;
   $$lcssa8$i$i3129 = $15477;
   label = 2916;
  }
 }
 do if ((label | 0) == 2915) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31804) {
   $15484 = HEAP32[918924] | 0;
   if (($15484 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3130 = 3675696;
    $$lcssa8$i$i3129 = $15484;
    label = 2916;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31804) {
   $15489 = HEAP32[918930] | 0;
   if (($15489 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3130 = 3675720;
    $$lcssa8$i$i3129 = $15489;
    label = 2916;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31804) {
   $15494 = HEAP32[918936] | 0;
   if (($15494 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3130 = 3675744;
    $$lcssa8$i$i3129 = $15494;
    label = 2916;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31804) {
   $15499 = HEAP32[918942] | 0;
   if (($15499 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3130 = 3675768;
    $$lcssa8$i$i3129 = $15499;
    label = 2916;
    break;
   }
  }
  $$3$i$i3131 = __Znwj(31804) | 0;
 } while (0);
 if ((label | 0) == 2916) {
  $15482 = $$lcssa8$i$i3129 + -4 | 0;
  HEAP32[$$lcssa$i$i3130 >> 2] = $15482;
  $$3$i$i3131 = HEAP32[$15482 >> 2] | 0;
 }
 $15503 = $$3$i$i3131 + 52 | 0;
 HEAP16[$$3$i$i3131 >> 1] = 756;
 HEAP16[$$3$i$i3131 + 2 >> 1] = 21;
 HEAP8[$$3$i$i3131 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3131 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3131 + 8 >> 2] = 1512;
 HEAP32[$$3$i$i3131 + 12 >> 2] = 31752;
 HEAP32[$$3$i$i3131 + 16 >> 2] = $15503;
 HEAP32[$$3$i$i3131 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3131 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3131 + 48 >> 0] = 0;
 HEAP32[$496 >> 2] = $$3$i$i3131;
 _memcpy($15503 | 0, 1995392, 1512) | 0;
 _memcpy($$3$i$i3131 + 1564 | 0, 1996904, 1512) | 0;
 _memcpy($$3$i$i3131 + 3076 | 0, 1998416, 1512) | 0;
 _memcpy($$3$i$i3131 + 4588 | 0, 1999928, 1512) | 0;
 _memcpy($$3$i$i3131 + 6100 | 0, 2001440, 1512) | 0;
 _memcpy($$3$i$i3131 + 7612 | 0, 2002952, 1512) | 0;
 _memcpy($$3$i$i3131 + 9124 | 0, 2004464, 1512) | 0;
 _memcpy($$3$i$i3131 + 10636 | 0, 2005976, 1512) | 0;
 _memcpy($$3$i$i3131 + 12148 | 0, 2007488, 1512) | 0;
 _memcpy($$3$i$i3131 + 13660 | 0, 2009e3, 1512) | 0;
 _memcpy($$3$i$i3131 + 15172 | 0, 2010512, 1512) | 0;
 _memcpy($$3$i$i3131 + 16684 | 0, 2012024, 1512) | 0;
 _memcpy($$3$i$i3131 + 18196 | 0, 2013536, 1512) | 0;
 _memcpy($$3$i$i3131 + 19708 | 0, 2015048, 1512) | 0;
 _memcpy($$3$i$i3131 + 21220 | 0, 2016560, 1512) | 0;
 _memcpy($$3$i$i3131 + 22732 | 0, 2018072, 1512) | 0;
 _memcpy($$3$i$i3131 + 24244 | 0, 2019584, 1512) | 0;
 _memcpy($$3$i$i3131 + 25756 | 0, 2021096, 1512) | 0;
 _memcpy($$3$i$i3131 + 27268 | 0, 2022608, 1512) | 0;
 _memcpy($$3$i$i3131 + 28780 | 0, 2024120, 1512) | 0;
 _memcpy($$3$i$i3131 + 30292 | 0, 2025632, 1512) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $496);
 if ($$3$i$i3131 | 0) {
  $15534 = $$3$i$i3131 + 5 | 0;
  $15536 = (HEAP8[$15534 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$15534 >> 0] = $15536;
  if (!($15536 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3131);
  HEAP32[$496 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 762;
 HEAP16[$bitmapData + 4 >> 1] = 846;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6100) label = 2931; else {
  $15543 = HEAP32[918918] | 0;
  if (($15543 | 0) == (HEAP32[918916] | 0)) label = 2931; else {
   $$lcssa$i$i3142 = 3675672;
   $$lcssa8$i$i3141 = $15543;
   label = 2932;
  }
 }
 do if ((label | 0) == 2931) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6100) {
   $15550 = HEAP32[918924] | 0;
   if (($15550 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3142 = 3675696;
    $$lcssa8$i$i3141 = $15550;
    label = 2932;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6100) {
   $15555 = HEAP32[918930] | 0;
   if (($15555 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3142 = 3675720;
    $$lcssa8$i$i3141 = $15555;
    label = 2932;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6100) {
   $15560 = HEAP32[918936] | 0;
   if (($15560 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3142 = 3675744;
    $$lcssa8$i$i3141 = $15560;
    label = 2932;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6100) {
   $15565 = HEAP32[918942] | 0;
   if (($15565 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3142 = 3675768;
    $$lcssa8$i$i3141 = $15565;
    label = 2932;
    break;
   }
  }
  $$3$i$i3143 = __Znwj(6100) | 0;
 } while (0);
 if ((label | 0) == 2932) {
  $15548 = $$lcssa8$i$i3141 + -4 | 0;
  HEAP32[$$lcssa$i$i3142 >> 2] = $15548;
  $$3$i$i3143 = HEAP32[$15548 >> 2] | 0;
 }
 $15569 = $$3$i$i3143 + 52 | 0;
 HEAP16[$$3$i$i3143 >> 1] = 756;
 HEAP16[$$3$i$i3143 + 2 >> 1] = 4;
 HEAP8[$$3$i$i3143 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3143 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3143 + 8 >> 2] = 1512;
 HEAP32[$$3$i$i3143 + 12 >> 2] = 6048;
 HEAP32[$$3$i$i3143 + 16 >> 2] = $15569;
 HEAP32[$$3$i$i3143 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3143 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3143 + 48 >> 0] = 0;
 HEAP32[$497 >> 2] = $$3$i$i3143;
 _memcpy($15569 | 0, 2027144, 1512) | 0;
 _memcpy($$3$i$i3143 + 1564 | 0, 2028656, 1512) | 0;
 _memcpy($$3$i$i3143 + 3076 | 0, 2030168, 1512) | 0;
 _memcpy($$3$i$i3143 + 4588 | 0, 2031680, 1512) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $497);
 if ($$3$i$i3143 | 0) {
  $15583 = $$3$i$i3143 + 5 | 0;
  $15585 = (HEAP8[$15583 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$15583 >> 0] = $15585;
  if (!($15585 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3143);
  HEAP32[$497 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 860;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 887;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2180) label = 2947; else {
  $15592 = HEAP32[918918] | 0;
  if (($15592 | 0) == (HEAP32[918916] | 0)) label = 2947; else {
   $$lcssa$i$i3154 = 3675672;
   $$lcssa8$i$i3153 = $15592;
   label = 2948;
  }
 }
 do if ((label | 0) == 2947) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2180) {
   $15599 = HEAP32[918924] | 0;
   if (($15599 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3154 = 3675696;
    $$lcssa8$i$i3153 = $15599;
    label = 2948;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2180) {
   $15604 = HEAP32[918930] | 0;
   if (($15604 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3154 = 3675720;
    $$lcssa8$i$i3153 = $15604;
    label = 2948;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2180) {
   $15609 = HEAP32[918936] | 0;
   if (($15609 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3154 = 3675744;
    $$lcssa8$i$i3153 = $15609;
    label = 2948;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2180) {
   $15614 = HEAP32[918942] | 0;
   if (($15614 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3154 = 3675768;
    $$lcssa8$i$i3153 = $15614;
    label = 2948;
    break;
   }
  }
  $$3$i$i3155 = __Znwj(2180) | 0;
 } while (0);
 if ((label | 0) == 2948) {
  $15597 = $$lcssa8$i$i3153 + -4 | 0;
  HEAP32[$$lcssa$i$i3154 >> 2] = $15597;
  $$3$i$i3155 = HEAP32[$15597 >> 2] | 0;
 }
 $15618 = $$3$i$i3155 + 52 | 0;
 HEAP16[$$3$i$i3155 >> 1] = 28;
 HEAP16[$$3$i$i3155 + 2 >> 1] = 38;
 HEAP8[$$3$i$i3155 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3155 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3155 + 8 >> 2] = 56;
 HEAP32[$$3$i$i3155 + 12 >> 2] = 2128;
 HEAP32[$$3$i$i3155 + 16 >> 2] = $15618;
 HEAP32[$$3$i$i3155 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3155 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3155 + 48 >> 0] = 0;
 HEAP32[$498 >> 2] = $$3$i$i3155;
 dest = $15618;
 src = 2033192;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 108 | 0;
 src = 2033248;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 164 | 0;
 src = 2033304;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 220 | 0;
 src = 2033360;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 276 | 0;
 src = 2033416;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 332 | 0;
 src = 2033472;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 388 | 0;
 src = 2033528;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 444 | 0;
 src = 2033584;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 500 | 0;
 src = 2033640;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 556 | 0;
 src = 2033696;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 612 | 0;
 src = 2033752;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 668 | 0;
 src = 2033808;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 724 | 0;
 src = 2033864;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 780 | 0;
 src = 2033920;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 836 | 0;
 src = 2033976;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 892 | 0;
 src = 2034032;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 948 | 0;
 src = 2034088;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1004 | 0;
 src = 2034144;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1060 | 0;
 src = 2034200;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1116 | 0;
 src = 2034256;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1172 | 0;
 src = 2034312;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1228 | 0;
 src = 2034368;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1284 | 0;
 src = 2034424;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1340 | 0;
 src = 2034480;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1396 | 0;
 src = 2034536;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1452 | 0;
 src = 2034592;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1508 | 0;
 src = 2034648;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1564 | 0;
 src = 2034704;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1620 | 0;
 src = 2034760;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1676 | 0;
 src = 2034816;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1732 | 0;
 src = 2034872;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1788 | 0;
 src = 2034928;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1844 | 0;
 src = 2034984;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1900 | 0;
 src = 2035040;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 1956 | 0;
 src = 2035096;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 2012 | 0;
 src = 2035152;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 2068 | 0;
 src = 2035208;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3155 + 2124 | 0;
 src = 2035264;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $498);
 if ($$3$i$i3155 | 0) {
  $15666 = $$3$i$i3155 + 5 | 0;
  $15668 = (HEAP8[$15666 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$15666 >> 0] = $15668;
  if (!($15668 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3155);
  HEAP32[$498 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 905;
 HEAP16[$bitmapData + 2 >> 1] = 729;
 HEAP16[$bitmapData + 4 >> 1] = 1020;
 HEAP16[$bitmapData + 6 >> 1] = 764;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 8404) label = 2963; else {
  $15675 = HEAP32[918918] | 0;
  if (($15675 | 0) == (HEAP32[918916] | 0)) label = 2963; else {
   $$lcssa$i$i3166 = 3675672;
   $$lcssa8$i$i3165 = $15675;
   label = 2964;
  }
 }
 do if ((label | 0) == 2963) {
  if ((HEAP32[918925] | 0) >>> 0 >= 8404) {
   $15682 = HEAP32[918924] | 0;
   if (($15682 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3166 = 3675696;
    $$lcssa8$i$i3165 = $15682;
    label = 2964;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 8404) {
   $15687 = HEAP32[918930] | 0;
   if (($15687 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3166 = 3675720;
    $$lcssa8$i$i3165 = $15687;
    label = 2964;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 8404) {
   $15692 = HEAP32[918936] | 0;
   if (($15692 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3166 = 3675744;
    $$lcssa8$i$i3165 = $15692;
    label = 2964;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 8404) {
   $15697 = HEAP32[918942] | 0;
   if (($15697 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3166 = 3675768;
    $$lcssa8$i$i3165 = $15697;
    label = 2964;
    break;
   }
  }
  $$3$i$i3167 = __Znwj(8404) | 0;
 } while (0);
 if ((label | 0) == 2964) {
  $15680 = $$lcssa8$i$i3165 + -4 | 0;
  HEAP32[$$lcssa$i$i3166 >> 2] = $15680;
  $$3$i$i3167 = HEAP32[$15680 >> 2] | 0;
 }
 $15701 = $$3$i$i3167 + 52 | 0;
 HEAP16[$$3$i$i3167 >> 1] = 116;
 HEAP16[$$3$i$i3167 + 2 >> 1] = 36;
 HEAP8[$$3$i$i3167 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3167 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3167 + 8 >> 2] = 232;
 HEAP32[$$3$i$i3167 + 12 >> 2] = 8352;
 HEAP32[$$3$i$i3167 + 16 >> 2] = $15701;
 HEAP32[$$3$i$i3167 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3167 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3167 + 48 >> 0] = 0;
 HEAP32[$499 >> 2] = $$3$i$i3167;
 _memcpy($15701 | 0, 2035320, 232) | 0;
 _memcpy($$3$i$i3167 + 284 | 0, 2035552, 232) | 0;
 _memcpy($$3$i$i3167 + 516 | 0, 2035784, 232) | 0;
 _memcpy($$3$i$i3167 + 748 | 0, 2036016, 232) | 0;
 _memcpy($$3$i$i3167 + 980 | 0, 2036248, 232) | 0;
 _memcpy($$3$i$i3167 + 1212 | 0, 2036480, 232) | 0;
 _memcpy($$3$i$i3167 + 1444 | 0, 2036712, 232) | 0;
 _memcpy($$3$i$i3167 + 1676 | 0, 2036944, 232) | 0;
 _memcpy($$3$i$i3167 + 1908 | 0, 2037176, 232) | 0;
 _memcpy($$3$i$i3167 + 2140 | 0, 2037408, 232) | 0;
 _memcpy($$3$i$i3167 + 2372 | 0, 2037640, 232) | 0;
 _memcpy($$3$i$i3167 + 2604 | 0, 2037872, 232) | 0;
 _memcpy($$3$i$i3167 + 2836 | 0, 2038104, 232) | 0;
 _memcpy($$3$i$i3167 + 3068 | 0, 2038336, 232) | 0;
 _memcpy($$3$i$i3167 + 3300 | 0, 2038568, 232) | 0;
 _memcpy($$3$i$i3167 + 3532 | 0, 2038800, 232) | 0;
 _memcpy($$3$i$i3167 + 3764 | 0, 2039032, 232) | 0;
 _memcpy($$3$i$i3167 + 3996 | 0, 2039264, 232) | 0;
 _memcpy($$3$i$i3167 + 4228 | 0, 2039496, 232) | 0;
 _memcpy($$3$i$i3167 + 4460 | 0, 2039728, 232) | 0;
 _memcpy($$3$i$i3167 + 4692 | 0, 2039960, 232) | 0;
 _memcpy($$3$i$i3167 + 4924 | 0, 2040192, 232) | 0;
 _memcpy($$3$i$i3167 + 5156 | 0, 2040424, 232) | 0;
 _memcpy($$3$i$i3167 + 5388 | 0, 2040656, 232) | 0;
 _memcpy($$3$i$i3167 + 5620 | 0, 2040888, 232) | 0;
 _memcpy($$3$i$i3167 + 5852 | 0, 2041120, 232) | 0;
 _memcpy($$3$i$i3167 + 6084 | 0, 2041352, 232) | 0;
 _memcpy($$3$i$i3167 + 6316 | 0, 2041584, 232) | 0;
 _memcpy($$3$i$i3167 + 6548 | 0, 2041816, 232) | 0;
 _memcpy($$3$i$i3167 + 6780 | 0, 2042048, 232) | 0;
 _memcpy($$3$i$i3167 + 7012 | 0, 2042280, 232) | 0;
 _memcpy($$3$i$i3167 + 7244 | 0, 2042512, 232) | 0;
 _memcpy($$3$i$i3167 + 7476 | 0, 2042744, 232) | 0;
 _memcpy($$3$i$i3167 + 7708 | 0, 2042976, 232) | 0;
 _memcpy($$3$i$i3167 + 7940 | 0, 2043208, 232) | 0;
 _memcpy($$3$i$i3167 + 8172 | 0, 2043440, 232) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $499);
 if ($$3$i$i3167 | 0) {
  $15747 = $$3$i$i3167 + 5 | 0;
  $15749 = (HEAP8[$15747 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$15747 >> 0] = $15749;
  if (!($15749 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3167);
  HEAP32[$499 >> 2] = 0;
 }
 $15751 = $500;
 HEAP32[$15751 >> 2] = 1179648;
 HEAP32[$15751 + 4 >> 2] = 66560;
 HEAP32[$500 + 8 >> 2] = 54937;
 HEAP16[$501 >> 1] = 0;
 HEAP16[$501 + 2 >> 1] = 18;
 HEAP16[$501 + 4 >> 1] = 1024;
 HEAP16[$501 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $500, $501);
 $15759 = $502;
 HEAP32[$15759 >> 2] = 132094;
 HEAP32[$15759 + 4 >> 2] = 917506;
 HEAP32[$502 + 8 >> 2] = 2349;
 HEAP16[$503 >> 1] = 1022;
 HEAP16[$503 + 2 >> 1] = 2;
 HEAP16[$503 + 4 >> 1] = 2;
 HEAP16[$503 + 6 >> 1] = 14;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $502, $503);
 $15767 = $504;
 HEAP32[$15767 >> 2] = 132076;
 HEAP32[$15767 + 4 >> 2] = 917506;
 HEAP32[$504 + 8 >> 2] = 2349;
 HEAP16[$505 >> 1] = 1004;
 HEAP16[$505 + 2 >> 1] = 2;
 HEAP16[$505 + 4 >> 1] = 2;
 HEAP16[$505 + 6 >> 1] = 14;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $504, $505);
 $15775 = $506;
 HEAP32[$15775 >> 2] = 132042;
 HEAP32[$15775 + 4 >> 2] = 917506;
 HEAP32[$506 + 8 >> 2] = 2349;
 HEAP16[$507 >> 1] = 970;
 HEAP16[$507 + 2 >> 1] = 2;
 HEAP16[$507 + 4 >> 1] = 2;
 HEAP16[$507 + 6 >> 1] = 14;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $506, $507);
 $15783 = $508;
 HEAP32[$15783 >> 2] = 970;
 HEAP32[$15783 + 4 >> 2] = 131126;
 HEAP32[$508 + 8 >> 2] = 2349;
 HEAP16[$509 >> 1] = 970;
 HEAP16[$509 + 2 >> 1] = 0;
 HEAP16[$509 + 4 >> 1] = 54;
 HEAP16[$509 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $508, $509);
 $15791 = $510;
 HEAP32[$15791 >> 2] = 1049546;
 HEAP32[$15791 + 4 >> 2] = 131126;
 HEAP32[$510 + 8 >> 2] = 2349;
 HEAP16[$511 >> 1] = 970;
 HEAP16[$511 + 2 >> 1] = 16;
 HEAP16[$511 + 4 >> 1] = 54;
 HEAP16[$511 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $510, $511);
 $15799 = $512;
 HEAP32[$15799 >> 2] = 0;
 HEAP32[$15799 + 4 >> 2] = 1179666;
 HEAP32[$512 + 8 >> 2] = 2349;
 HEAP16[$513 >> 1] = 0;
 HEAP16[$513 + 2 >> 1] = 0;
 HEAP16[$513 + 4 >> 1] = 18;
 HEAP16[$513 + 6 >> 1] = 18;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $512, $513);
 $15807 = $514;
 HEAP32[$15807 >> 2] = 18;
 HEAP32[$15807 + 4 >> 2] = 1180600;
 HEAP32[$514 + 8 >> 2] = 2349;
 HEAP16[$515 >> 1] = 18;
 HEAP16[$515 + 2 >> 1] = 0;
 HEAP16[$515 + 4 >> 1] = 952;
 HEAP16[$515 + 6 >> 1] = 18;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $514, $515);
 $15815 = $516;
 HEAP32[$15815 >> 2] = 4653056;
 HEAP32[$15815 + 4 >> 2] = 41485312;
 HEAP32[$516 + 8 >> 2] = 65535;
 HEAP16[$517 >> 1] = 196;
 HEAP16[$517 + 2 >> 1] = 71;
 HEAP16[$517 + 4 >> 1] = 3;
 HEAP16[$517 + 6 >> 1] = 625;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $516, $517);
 $15823 = $518;
 HEAP32[$15823 >> 2] = 4653056;
 HEAP32[$15823 + 4 >> 2] = 41485312;
 HEAP32[$518 + 8 >> 2] = 65535;
 HEAP16[$519 >> 1] = 1016;
 HEAP16[$519 + 2 >> 1] = 71;
 HEAP16[$519 + 4 >> 1] = 8;
 HEAP16[$519 + 6 >> 1] = 625;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $518, $519);
 $15831 = $520;
 HEAP32[$15831 >> 2] = 4653056;
 HEAP32[$15831 + 4 >> 2] = 41485312;
 HEAP32[$520 + 8 >> 2] = 65535;
 HEAP16[$521 >> 1] = 0;
 HEAP16[$521 + 2 >> 1] = 696;
 HEAP16[$521 + 4 >> 1] = 1024;
 HEAP16[$521 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $520, $521);
 $15839 = $522;
 HEAP32[$15839 >> 2] = 6226935;
 HEAP32[$15839 + 4 >> 2] = 39387137;
 HEAP32[$522 + 8 >> 2] = 65535;
 HEAP16[$523 >> 1] = 1015;
 HEAP16[$523 + 2 >> 1] = 95;
 HEAP16[$523 + 4 >> 1] = 1;
 HEAP16[$523 + 6 >> 1] = 601;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $522, $523);
 $15847 = $524;
 HEAP32[$15847 >> 2] = 45547719;
 HEAP32[$15847 + 4 >> 2] = 66352;
 HEAP32[$524 + 8 >> 2] = 65535;
 HEAP16[$525 >> 1] = 199;
 HEAP16[$525 + 2 >> 1] = 695;
 HEAP16[$525 + 4 >> 1] = 816;
 HEAP16[$525 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $524, $525);
 $15855 = $526;
 HEAP32[$15855 >> 2] = 6226119;
 HEAP32[$15855 + 4 >> 2] = 39321601;
 HEAP32[$526 + 8 >> 2] = 33808;
 HEAP16[$527 >> 1] = 199;
 HEAP16[$527 + 2 >> 1] = 95;
 HEAP16[$527 + 4 >> 1] = 1;
 HEAP16[$527 + 6 >> 1] = 600;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $526, $527);
 $15863 = $528;
 HEAP32[$15863 >> 2] = 6226120;
 HEAP32[$15863 + 4 >> 2] = 66351;
 HEAP32[$528 + 8 >> 2] = 33808;
 HEAP16[$529 >> 1] = 200;
 HEAP16[$529 + 2 >> 1] = 95;
 HEAP16[$529 + 4 >> 1] = 815;
 HEAP16[$529 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $528, $529);
 $15871 = $530;
 HEAP32[$15871 >> 2] = 6292470;
 HEAP32[$15871 + 4 >> 2] = 39256065;
 HEAP32[$530 + 8 >> 2] = 54937;
 HEAP16[$531 >> 1] = 1014;
 HEAP16[$531 + 2 >> 1] = 96;
 HEAP16[$531 + 4 >> 1] = 1;
 HEAP16[$531 + 6 >> 1] = 599;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $530, $531);
 $15879 = $532;
 HEAP32[$15879 >> 2] = 45482184;
 HEAP32[$15879 + 4 >> 2] = 66350;
 HEAP32[$532 + 8 >> 2] = 54937;
 HEAP16[$533 >> 1] = 200;
 HEAP16[$533 + 2 >> 1] = 694;
 HEAP16[$533 + 4 >> 1] = 814;
 HEAP16[$533 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $532, $533);
 $15887 = $534;
 HEAP32[$15887 >> 2] = 6291656;
 HEAP32[$15887 + 4 >> 2] = 39190529;
 HEAP32[$534 + 8 >> 2] = 16904;
 HEAP16[$535 >> 1] = 200;
 HEAP16[$535 + 2 >> 1] = 96;
 HEAP16[$535 + 4 >> 1] = 1;
 HEAP16[$535 + 6 >> 1] = 598;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $534, $535);
 $15895 = $536;
 HEAP32[$15895 >> 2] = 6291657;
 HEAP32[$15895 + 4 >> 2] = 66349;
 HEAP32[$536 + 8 >> 2] = 16904;
 HEAP16[$537 >> 1] = 201;
 HEAP16[$537 + 2 >> 1] = 96;
 HEAP16[$537 + 4 >> 1] = 813;
 HEAP16[$537 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $536, $537);
 $15903 = $538;
 HEAP32[$15903 >> 2] = 6357193;
 HEAP32[$15903 + 4 >> 2] = 39125805;
 HEAP32[$538 + 8 >> 2] = 65535;
 HEAP16[$539 >> 1] = 201;
 HEAP16[$539 + 2 >> 1] = 97;
 HEAP16[$539 + 4 >> 1] = 813;
 HEAP16[$539 + 6 >> 1] = 597;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $538, $539);
 $15911 = $540;
 HEAP32[$15911 >> 2] = 4653251;
 HEAP32[$15911 + 4 >> 2] = 40960001;
 HEAP32[$540 + 8 >> 2] = 65535;
 HEAP16[$541 >> 1] = 195;
 HEAP16[$541 + 2 >> 1] = 71;
 HEAP16[$541 + 4 >> 1] = 1;
 HEAP16[$541 + 6 >> 1] = 625;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $540, $541);
 $15919 = $542;
 HEAP32[$15919 >> 2] = 45547520;
 HEAP32[$15919 + 4 >> 2] = 65731;
 HEAP32[$542 + 8 >> 2] = 65535;
 HEAP16[$543 >> 1] = 0;
 HEAP16[$543 + 2 >> 1] = 695;
 HEAP16[$543 + 4 >> 1] = 195;
 HEAP16[$543 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $542, $543);
 $15927 = $544;
 HEAP32[$15927 >> 2] = 4653056;
 HEAP32[$15927 + 4 >> 2] = 40894465;
 HEAP32[$544 + 8 >> 2] = 33808;
 HEAP16[$545 >> 1] = 0;
 HEAP16[$545 + 2 >> 1] = 71;
 HEAP16[$545 + 4 >> 1] = 1;
 HEAP16[$545 + 6 >> 1] = 624;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $544, $545);
 $15935 = $546;
 HEAP32[$15935 >> 2] = 4653057;
 HEAP32[$15935 + 4 >> 2] = 65730;
 HEAP32[$546 + 8 >> 2] = 33808;
 HEAP16[$547 >> 1] = 1;
 HEAP16[$547 + 2 >> 1] = 71;
 HEAP16[$547 + 4 >> 1] = 194;
 HEAP16[$547 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $546, $547);
 $15943 = $548;
 HEAP32[$15943 >> 2] = 4718786;
 HEAP32[$15943 + 4 >> 2] = 40828929;
 HEAP32[$548 + 8 >> 2] = 54937;
 HEAP16[$549 >> 1] = 194;
 HEAP16[$549 + 2 >> 1] = 72;
 HEAP16[$549 + 4 >> 1] = 1;
 HEAP16[$549 + 6 >> 1] = 623;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $548, $549);
 $15951 = $550;
 HEAP32[$15951 >> 2] = 45481985;
 HEAP32[$15951 + 4 >> 2] = 65729;
 HEAP32[$550 + 8 >> 2] = 54937;
 HEAP16[$551 >> 1] = 1;
 HEAP16[$551 + 2 >> 1] = 694;
 HEAP16[$551 + 4 >> 1] = 193;
 HEAP16[$551 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $550, $551);
 $15959 = $552;
 HEAP32[$15959 >> 2] = 4718593;
 HEAP32[$15959 + 4 >> 2] = 40763393;
 HEAP32[$552 + 8 >> 2] = 16904;
 HEAP16[$553 >> 1] = 1;
 HEAP16[$553 + 2 >> 1] = 72;
 HEAP16[$553 + 4 >> 1] = 1;
 HEAP16[$553 + 6 >> 1] = 622;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $552, $553);
 $15967 = $554;
 HEAP32[$15967 >> 2] = 4718594;
 HEAP32[$15967 + 4 >> 2] = 65728;
 HEAP32[$554 + 8 >> 2] = 16904;
 HEAP16[$555 >> 1] = 2;
 HEAP16[$555 + 2 >> 1] = 72;
 HEAP16[$555 + 4 >> 1] = 192;
 HEAP16[$555 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $554, $555);
 $15975 = $556;
 HEAP32[$15975 >> 2] = 44433548;
 HEAP32[$15975 + 4 >> 2] = 1048614;
 HEAP8[$556 + 8 >> 0] = -16;
 HEAP32[$556 + 12 >> 2] = 65535;
 HEAP32[$556 + 16 >> 2] = 54937;
 HEAP8[$556 + 20 >> 0] = 0;
 HEAP8[$556 + 21 >> 0] = 7;
 HEAP8[$556 + 22 >> 0] = 3;
 HEAP8[$556 + 23 >> 0] = -86;
 $15986 = $556 + 24 | 0;
 HEAP32[$15986 >> 2] = 0;
 HEAP16[$15986 + 4 >> 1] = 0;
 HEAP8[$15986 + 6 >> 0] = 0;
 HEAP16[$557 >> 1] = 140;
 HEAP16[$557 + 2 >> 1] = 678;
 HEAP16[$557 + 4 >> 1] = 38;
 HEAP16[$557 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $556, $557);
 $15990 = $558;
 HEAP32[$15990 >> 2] = 44433547;
 HEAP32[$15990 + 4 >> 2] = 1048577;
 HEAP32[$558 + 8 >> 2] = 16904;
 HEAP16[$559 >> 1] = 139;
 HEAP16[$559 + 2 >> 1] = 678;
 HEAP16[$559 + 4 >> 1] = 1;
 HEAP16[$559 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $558, $559);
 $15998 = $560;
 HEAP32[$15998 >> 2] = 45416466;
 HEAP32[$15998 + 4 >> 2] = 65657;
 HEAP32[$560 + 8 >> 2] = 16904;
 HEAP16[$561 >> 1] = 18;
 HEAP16[$561 + 2 >> 1] = 693;
 HEAP16[$561 + 4 >> 1] = 121;
 HEAP16[$561 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $560, $561);
 $16006 = $562;
 HEAP32[$16006 >> 2] = 44433426;
 HEAP32[$16006 + 4 >> 2] = 983041;
 HEAP32[$562 + 8 >> 2] = 54937;
 HEAP16[$563 >> 1] = 18;
 HEAP16[$563 + 2 >> 1] = 678;
 HEAP16[$563 + 4 >> 1] = 1;
 HEAP16[$563 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $562, $563);
 $16014 = $564;
 HEAP32[$16014 >> 2] = 44433427;
 HEAP32[$16014 + 4 >> 2] = 65656;
 HEAP32[$564 + 8 >> 2] = 54937;
 HEAP16[$565 >> 1] = 19;
 HEAP16[$565 + 2 >> 1] = 678;
 HEAP16[$565 + 4 >> 1] = 120;
 HEAP16[$565 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $564, $565);
 $16022 = $566;
 HEAP32[$16022 >> 2] = 44499082;
 HEAP32[$16022 + 4 >> 2] = 917505;
 HEAP32[$566 + 8 >> 2] = 33808;
 HEAP16[$567 >> 1] = 138;
 HEAP16[$567 + 2 >> 1] = 679;
 HEAP16[$567 + 4 >> 1] = 1;
 HEAP16[$567 + 6 >> 1] = 14;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $566, $567);
 $16030 = $568;
 HEAP32[$16030 >> 2] = 45350931;
 HEAP32[$16030 + 4 >> 2] = 65655;
 HEAP32[$568 + 8 >> 2] = 33808;
 HEAP16[$569 >> 1] = 19;
 HEAP16[$569 + 2 >> 1] = 692;
 HEAP16[$569 + 4 >> 1] = 119;
 HEAP16[$569 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $568, $569);
 $16038 = $570;
 HEAP32[$16038 >> 2] = 44498963;
 HEAP32[$16038 + 4 >> 2] = 851969;
 HEAP32[$570 + 8 >> 2] = 65535;
 HEAP16[$571 >> 1] = 19;
 HEAP16[$571 + 2 >> 1] = 679;
 HEAP16[$571 + 4 >> 1] = 1;
 HEAP16[$571 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $570, $571);
 $16046 = $572;
 HEAP32[$16046 >> 2] = 44498964;
 HEAP32[$16046 + 4 >> 2] = 65654;
 HEAP32[$572 + 8 >> 2] = 65535;
 HEAP16[$573 >> 1] = 20;
 HEAP16[$573 + 2 >> 1] = 679;
 HEAP16[$573 + 4 >> 1] = 118;
 HEAP16[$573 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $572, $573);
 $16054 = $574;
 HEAP32[$16054 >> 2] = 44564500;
 HEAP32[$16054 + 4 >> 2] = 786550;
 HEAP32[$574 + 8 >> 2] = 54937;
 HEAP16[$575 >> 1] = 20;
 HEAP16[$575 + 2 >> 1] = 680;
 HEAP16[$575 + 4 >> 1] = 118;
 HEAP16[$575 + 6 >> 1] = 12;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $574, $575);
 $16062 = $576;
 HEAP32[$16062 >> 2] = 4784130;
 HEAP32[$16062 + 4 >> 2] = 39649472;
 HEAP32[$576 + 8 >> 2] = 65535;
 HEAP16[$577 >> 1] = 2;
 HEAP16[$577 + 2 >> 1] = 73;
 HEAP16[$577 + 4 >> 1] = 192;
 HEAP16[$577 + 6 >> 1] = 605;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $576, $577);
 $16070 = $578;
 HEAP32[$16070 >> 2] = 4654071;
 HEAP32[$16070 + 4 >> 2] = 1572865;
 HEAP32[$578 + 8 >> 2] = 65535;
 HEAP16[$579 >> 1] = 1015;
 HEAP16[$579 + 2 >> 1] = 71;
 HEAP16[$579 + 4 >> 1] = 1;
 HEAP16[$579 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $578, $579);
 $16078 = $580;
 HEAP32[$16078 >> 2] = 6160583;
 HEAP32[$16078 + 4 >> 2] = 66352;
 HEAP32[$580 + 8 >> 2] = 65535;
 HEAP16[$581 >> 1] = 199;
 HEAP16[$581 + 2 >> 1] = 94;
 HEAP16[$581 + 4 >> 1] = 816;
 HEAP16[$581 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $580, $581);
 $16086 = $582;
 HEAP32[$16086 >> 2] = 4653255;
 HEAP32[$16086 + 4 >> 2] = 1507329;
 HEAP32[$582 + 8 >> 2] = 33808;
 HEAP16[$583 >> 1] = 199;
 HEAP16[$583 + 2 >> 1] = 71;
 HEAP16[$583 + 4 >> 1] = 1;
 HEAP16[$583 + 6 >> 1] = 23;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $582, $583);
 $16094 = $584;
 HEAP32[$16094 >> 2] = 4653256;
 HEAP32[$16094 + 4 >> 2] = 66351;
 HEAP32[$584 + 8 >> 2] = 33808;
 HEAP16[$585 >> 1] = 200;
 HEAP16[$585 + 2 >> 1] = 71;
 HEAP16[$585 + 4 >> 1] = 815;
 HEAP16[$585 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $584, $585);
 $16102 = $586;
 HEAP32[$16102 >> 2] = 46137344;
 HEAP32[$16102 + 4 >> 2] = 1311744;
 HEAP32[$586 + 8 >> 2] = 54937;
 HEAP16[$587 >> 1] = 0;
 HEAP16[$587 + 2 >> 1] = 704;
 HEAP16[$587 + 4 >> 1] = 1024;
 HEAP16[$587 + 6 >> 1] = 20;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $586, $587);
 $16110 = $588;
 HEAP32[$16110 >> 2] = 46137344;
 HEAP32[$16110 + 4 >> 2] = 1311744;
 HEAP32[$588 + 8 >> 2] = 54937;
 HEAP16[$589 >> 1] = 0;
 HEAP16[$589 + 2 >> 1] = 704;
 HEAP16[$589 + 4 >> 1] = 1024;
 HEAP16[$589 + 6 >> 1] = 20;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $588, $589);
 $16118 = $590;
 HEAP32[$16118 >> 2] = 4653252;
 HEAP32[$16118 + 4 >> 2] = 41484291;
 HEAP32[$590 + 8 >> 2] = 65535;
 HEAP16[$591 >> 1] = 196;
 HEAP16[$591 + 2 >> 1] = 71;
 HEAP16[$591 + 4 >> 1] = 3;
 HEAP16[$591 + 6 >> 1] = 633;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $590, $591);
 $16126 = $592;
 HEAP32[$16126 >> 2] = 6226943;
 HEAP32[$16126 + 4 >> 2] = 39911425;
 HEAP32[$592 + 8 >> 2] = 65535;
 HEAP16[$593 >> 1] = 1023;
 HEAP16[$593 + 2 >> 1] = 95;
 HEAP16[$593 + 4 >> 1] = 1;
 HEAP16[$593 + 6 >> 1] = 609;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $592, $593);
 $16134 = $594;
 HEAP32[$16134 >> 2] = 46072007;
 HEAP32[$16134 + 4 >> 2] = 66360;
 HEAP32[$594 + 8 >> 2] = 65535;
 HEAP16[$595 >> 1] = 199;
 HEAP16[$595 + 2 >> 1] = 703;
 HEAP16[$595 + 4 >> 1] = 824;
 HEAP16[$595 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $594, $595);
 $16142 = $596;
 HEAP32[$16142 >> 2] = 6226119;
 HEAP32[$16142 + 4 >> 2] = 39845889;
 HEAP32[$596 + 8 >> 2] = 33808;
 HEAP16[$597 >> 1] = 199;
 HEAP16[$597 + 2 >> 1] = 95;
 HEAP16[$597 + 4 >> 1] = 1;
 HEAP16[$597 + 6 >> 1] = 608;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $596, $597);
 $16150 = $598;
 HEAP32[$16150 >> 2] = 6226120;
 HEAP32[$16150 + 4 >> 2] = 66359;
 HEAP32[$598 + 8 >> 2] = 33808;
 HEAP16[$599 >> 1] = 200;
 HEAP16[$599 + 2 >> 1] = 95;
 HEAP16[$599 + 4 >> 1] = 823;
 HEAP16[$599 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $598, $599);
 $16158 = $600;
 HEAP32[$16158 >> 2] = 6292478;
 HEAP32[$16158 + 4 >> 2] = 39780353;
 HEAP32[$600 + 8 >> 2] = 54937;
 HEAP16[$601 >> 1] = 1022;
 HEAP16[$601 + 2 >> 1] = 96;
 HEAP16[$601 + 4 >> 1] = 1;
 HEAP16[$601 + 6 >> 1] = 607;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $600, $601);
 $16166 = $602;
 HEAP32[$16166 >> 2] = 46006472;
 HEAP32[$16166 + 4 >> 2] = 66358;
 HEAP32[$602 + 8 >> 2] = 54937;
 HEAP16[$603 >> 1] = 200;
 HEAP16[$603 + 2 >> 1] = 702;
 HEAP16[$603 + 4 >> 1] = 822;
 HEAP16[$603 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $602, $603);
 $16174 = $604;
 HEAP32[$16174 >> 2] = 6291656;
 HEAP32[$16174 + 4 >> 2] = 39714817;
 HEAP32[$604 + 8 >> 2] = 16904;
 HEAP16[$605 >> 1] = 200;
 HEAP16[$605 + 2 >> 1] = 96;
 HEAP16[$605 + 4 >> 1] = 1;
 HEAP16[$605 + 6 >> 1] = 606;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $604, $605);
 $16182 = $606;
 HEAP32[$16182 >> 2] = 6291657;
 HEAP32[$16182 + 4 >> 2] = 66357;
 HEAP32[$606 + 8 >> 2] = 16904;
 HEAP16[$607 >> 1] = 201;
 HEAP16[$607 + 2 >> 1] = 96;
 HEAP16[$607 + 4 >> 1] = 821;
 HEAP16[$607 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $606, $607);
 $16190 = $608;
 HEAP32[$16190 >> 2] = 6357193;
 HEAP32[$16190 + 4 >> 2] = 39650101;
 HEAP32[$608 + 8 >> 2] = 65535;
 HEAP16[$609 >> 1] = 1014;
 HEAP16[$609 + 2 >> 1] = 97;
 HEAP16[$609 + 4 >> 1] = 8;
 HEAP16[$609 + 6 >> 1] = 597;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $608, $609);
 $16198 = $610;
 HEAP32[$16198 >> 2] = 6357193;
 HEAP32[$16198 + 4 >> 2] = 39650101;
 HEAP32[$610 + 8 >> 2] = 65535;
 HEAP16[$611 >> 1] = 201;
 HEAP16[$611 + 2 >> 1] = 694;
 HEAP16[$611 + 4 >> 1] = 821;
 HEAP16[$611 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $610, $611);
 $16206 = $612;
 HEAP32[$16206 >> 2] = 6357193;
 HEAP32[$16206 + 4 >> 2] = 39125805;
 HEAP32[$612 + 8 >> 2] = 65535;
 HEAP16[$613 >> 1] = 201;
 HEAP16[$613 + 2 >> 1] = 97;
 HEAP16[$613 + 4 >> 1] = 813;
 HEAP16[$613 + 6 >> 1] = 597;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $612, $613);
 $16214 = $614;
 HEAP32[$16214 >> 2] = 4653251;
 HEAP32[$16214 + 4 >> 2] = 41484289;
 HEAP32[$614 + 8 >> 2] = 65535;
 HEAP16[$615 >> 1] = 195;
 HEAP16[$615 + 2 >> 1] = 71;
 HEAP16[$615 + 4 >> 1] = 1;
 HEAP16[$615 + 6 >> 1] = 633;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $614, $615);
 $16222 = $616;
 HEAP32[$16222 >> 2] = 46071808;
 HEAP32[$16222 + 4 >> 2] = 65731;
 HEAP32[$616 + 8 >> 2] = 65535;
 HEAP16[$617 >> 1] = 0;
 HEAP16[$617 + 2 >> 1] = 703;
 HEAP16[$617 + 4 >> 1] = 195;
 HEAP16[$617 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $616, $617);
 $16230 = $618;
 HEAP32[$16230 >> 2] = 4653056;
 HEAP32[$16230 + 4 >> 2] = 41418753;
 HEAP32[$618 + 8 >> 2] = 33808;
 HEAP16[$619 >> 1] = 0;
 HEAP16[$619 + 2 >> 1] = 71;
 HEAP16[$619 + 4 >> 1] = 1;
 HEAP16[$619 + 6 >> 1] = 632;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $618, $619);
 $16238 = $620;
 HEAP32[$16238 >> 2] = 4653057;
 HEAP32[$16238 + 4 >> 2] = 65730;
 HEAP32[$620 + 8 >> 2] = 33808;
 HEAP16[$621 >> 1] = 1;
 HEAP16[$621 + 2 >> 1] = 71;
 HEAP16[$621 + 4 >> 1] = 194;
 HEAP16[$621 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $620, $621);
 $16246 = $622;
 HEAP32[$16246 >> 2] = 4718786;
 HEAP32[$16246 + 4 >> 2] = 41353217;
 HEAP32[$622 + 8 >> 2] = 54937;
 HEAP16[$623 >> 1] = 194;
 HEAP16[$623 + 2 >> 1] = 72;
 HEAP16[$623 + 4 >> 1] = 1;
 HEAP16[$623 + 6 >> 1] = 631;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $622, $623);
 $16254 = $624;
 HEAP32[$16254 >> 2] = 46006273;
 HEAP32[$16254 + 4 >> 2] = 65729;
 HEAP32[$624 + 8 >> 2] = 54937;
 HEAP16[$625 >> 1] = 1;
 HEAP16[$625 + 2 >> 1] = 702;
 HEAP16[$625 + 4 >> 1] = 193;
 HEAP16[$625 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $624, $625);
 $16262 = $626;
 HEAP32[$16262 >> 2] = 4718593;
 HEAP32[$16262 + 4 >> 2] = 41287681;
 HEAP32[$626 + 8 >> 2] = 16904;
 HEAP16[$627 >> 1] = 1;
 HEAP16[$627 + 2 >> 1] = 72;
 HEAP16[$627 + 4 >> 1] = 1;
 HEAP16[$627 + 6 >> 1] = 630;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $626, $627);
 $16270 = $628;
 HEAP32[$16270 >> 2] = 4718594;
 HEAP32[$16270 + 4 >> 2] = 65728;
 HEAP32[$628 + 8 >> 2] = 16904;
 HEAP16[$629 >> 1] = 2;
 HEAP16[$629 + 2 >> 1] = 72;
 HEAP16[$629 + 4 >> 1] = 192;
 HEAP16[$629 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $628, $629);
 $16278 = $630;
 HEAP32[$16278 >> 2] = 44957836;
 HEAP32[$16278 + 4 >> 2] = 1048614;
 HEAP8[$630 + 8 >> 0] = -16;
 HEAP32[$630 + 12 >> 2] = 65535;
 HEAP32[$630 + 16 >> 2] = 54937;
 HEAP8[$630 + 20 >> 0] = 0;
 HEAP8[$630 + 21 >> 0] = 7;
 HEAP8[$630 + 22 >> 0] = 3;
 HEAP8[$630 + 23 >> 0] = -86;
 $16289 = $630 + 24 | 0;
 HEAP32[$16289 >> 2] = 0;
 HEAP16[$16289 + 4 >> 1] = 0;
 HEAP8[$16289 + 6 >> 0] = 0;
 HEAP16[$631 >> 1] = 140;
 HEAP16[$631 + 2 >> 1] = 686;
 HEAP16[$631 + 4 >> 1] = 38;
 HEAP16[$631 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $630, $631);
 $16293 = $632;
 HEAP32[$16293 >> 2] = 44957835;
 HEAP32[$16293 + 4 >> 2] = 1048577;
 HEAP32[$632 + 8 >> 2] = 16904;
 HEAP16[$633 >> 1] = 139;
 HEAP16[$633 + 2 >> 1] = 686;
 HEAP16[$633 + 4 >> 1] = 1;
 HEAP16[$633 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $632, $633);
 $16301 = $634;
 HEAP32[$16301 >> 2] = 45940754;
 HEAP32[$16301 + 4 >> 2] = 65657;
 HEAP32[$634 + 8 >> 2] = 16904;
 HEAP16[$635 >> 1] = 18;
 HEAP16[$635 + 2 >> 1] = 701;
 HEAP16[$635 + 4 >> 1] = 121;
 HEAP16[$635 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $634, $635);
 $16309 = $636;
 HEAP32[$16309 >> 2] = 44957714;
 HEAP32[$16309 + 4 >> 2] = 983041;
 HEAP32[$636 + 8 >> 2] = 54937;
 HEAP16[$637 >> 1] = 18;
 HEAP16[$637 + 2 >> 1] = 686;
 HEAP16[$637 + 4 >> 1] = 1;
 HEAP16[$637 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $636, $637);
 $16317 = $638;
 HEAP32[$16317 >> 2] = 44957715;
 HEAP32[$16317 + 4 >> 2] = 65656;
 HEAP32[$638 + 8 >> 2] = 54937;
 HEAP16[$639 >> 1] = 19;
 HEAP16[$639 + 2 >> 1] = 686;
 HEAP16[$639 + 4 >> 1] = 120;
 HEAP16[$639 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $638, $639);
 $16325 = $640;
 HEAP32[$16325 >> 2] = 45023370;
 HEAP32[$16325 + 4 >> 2] = 917505;
 HEAP32[$640 + 8 >> 2] = 33808;
 HEAP16[$641 >> 1] = 138;
 HEAP16[$641 + 2 >> 1] = 687;
 HEAP16[$641 + 4 >> 1] = 1;
 HEAP16[$641 + 6 >> 1] = 14;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $640, $641);
 $16333 = $642;
 HEAP32[$16333 >> 2] = 45875219;
 HEAP32[$16333 + 4 >> 2] = 65655;
 HEAP32[$642 + 8 >> 2] = 33808;
 HEAP16[$643 >> 1] = 19;
 HEAP16[$643 + 2 >> 1] = 700;
 HEAP16[$643 + 4 >> 1] = 119;
 HEAP16[$643 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $642, $643);
 $16341 = $644;
 HEAP32[$16341 >> 2] = 45023251;
 HEAP32[$16341 + 4 >> 2] = 851969;
 HEAP32[$644 + 8 >> 2] = 65535;
 HEAP16[$645 >> 1] = 19;
 HEAP16[$645 + 2 >> 1] = 687;
 HEAP16[$645 + 4 >> 1] = 1;
 HEAP16[$645 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $644, $645);
 $16349 = $646;
 HEAP32[$16349 >> 2] = 45023252;
 HEAP32[$16349 + 4 >> 2] = 65654;
 HEAP32[$646 + 8 >> 2] = 65535;
 HEAP16[$647 >> 1] = 20;
 HEAP16[$647 + 2 >> 1] = 687;
 HEAP16[$647 + 4 >> 1] = 118;
 HEAP16[$647 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $646, $647);
 $16357 = $648;
 HEAP32[$16357 >> 2] = 45088788;
 HEAP32[$16357 + 4 >> 2] = 786550;
 HEAP32[$648 + 8 >> 2] = 54937;
 HEAP16[$649 >> 1] = 20;
 HEAP16[$649 + 2 >> 1] = 688;
 HEAP16[$649 + 4 >> 1] = 118;
 HEAP16[$649 + 6 >> 1] = 12;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $648, $649);
 $16365 = $650;
 HEAP32[$16365 >> 2] = 4784130;
 HEAP32[$16365 + 4 >> 2] = 40173760;
 HEAP32[$650 + 8 >> 2] = 65535;
 HEAP16[$651 >> 1] = 2;
 HEAP16[$651 + 2 >> 1] = 73;
 HEAP16[$651 + 4 >> 1] = 192;
 HEAP16[$651 + 6 >> 1] = 613;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $650, $651);
 $16373 = $652;
 HEAP32[$16373 >> 2] = 4654079;
 HEAP32[$16373 + 4 >> 2] = 1572865;
 HEAP32[$652 + 8 >> 2] = 65535;
 HEAP16[$653 >> 1] = 1023;
 HEAP16[$653 + 2 >> 1] = 71;
 HEAP16[$653 + 4 >> 1] = 1;
 HEAP16[$653 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $652, $653);
 $16381 = $654;
 HEAP32[$16381 >> 2] = 6160583;
 HEAP32[$16381 + 4 >> 2] = 66360;
 HEAP32[$654 + 8 >> 2] = 65535;
 HEAP16[$655 >> 1] = 199;
 HEAP16[$655 + 2 >> 1] = 94;
 HEAP16[$655 + 4 >> 1] = 824;
 HEAP16[$655 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $654, $655);
 $16389 = $656;
 HEAP32[$16389 >> 2] = 4653255;
 HEAP32[$16389 + 4 >> 2] = 1507329;
 HEAP32[$656 + 8 >> 2] = 33808;
 HEAP16[$657 >> 1] = 199;
 HEAP16[$657 + 2 >> 1] = 71;
 HEAP16[$657 + 4 >> 1] = 1;
 HEAP16[$657 + 6 >> 1] = 23;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $656, $657);
 $16397 = $658;
 HEAP32[$16397 >> 2] = 4653256;
 HEAP32[$16397 + 4 >> 2] = 66359;
 HEAP32[$658 + 8 >> 2] = 33808;
 HEAP16[$659 >> 1] = 200;
 HEAP16[$659 + 2 >> 1] = 71;
 HEAP16[$659 + 4 >> 1] = 823;
 HEAP16[$659 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $658, $659);
 $16405 = $660;
 HEAP32[$16405 >> 2] = 44957836;
 HEAP32[$16405 + 4 >> 2] = 1048614;
 HEAP8[$660 + 8 >> 0] = -16;
 HEAP32[$660 + 12 >> 2] = 65535;
 HEAP32[$660 + 16 >> 2] = 54937;
 HEAP8[$660 + 20 >> 0] = 0;
 HEAP8[$660 + 21 >> 0] = 7;
 HEAP8[$660 + 22 >> 0] = 3;
 HEAP8[$660 + 23 >> 0] = -86;
 $16416 = $660 + 24 | 0;
 HEAP32[$16416 >> 2] = 0;
 HEAP16[$16416 + 4 >> 1] = 0;
 HEAP8[$16416 + 6 >> 0] = 0;
 HEAP16[$661 >> 1] = 140;
 HEAP16[$661 + 2 >> 1] = 686;
 HEAP16[$661 + 4 >> 1] = 38;
 HEAP16[$661 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $660, $661);
 $16420 = $662;
 HEAP32[$16420 >> 2] = 44957835;
 HEAP32[$16420 + 4 >> 2] = 1048577;
 HEAP32[$662 + 8 >> 2] = 16904;
 HEAP16[$663 >> 1] = 139;
 HEAP16[$663 + 2 >> 1] = 686;
 HEAP16[$663 + 4 >> 1] = 1;
 HEAP16[$663 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $662, $663);
 $16428 = $664;
 HEAP32[$16428 >> 2] = 45940754;
 HEAP32[$16428 + 4 >> 2] = 65657;
 HEAP32[$664 + 8 >> 2] = 16904;
 HEAP16[$665 >> 1] = 18;
 HEAP16[$665 + 2 >> 1] = 701;
 HEAP16[$665 + 4 >> 1] = 121;
 HEAP16[$665 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $664, $665);
 $16436 = $666;
 HEAP32[$16436 >> 2] = 44957714;
 HEAP32[$16436 + 4 >> 2] = 983041;
 HEAP32[$666 + 8 >> 2] = 54937;
 HEAP16[$667 >> 1] = 18;
 HEAP16[$667 + 2 >> 1] = 686;
 HEAP16[$667 + 4 >> 1] = 1;
 HEAP16[$667 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $666, $667);
 $16444 = $668;
 HEAP32[$16444 >> 2] = 44957715;
 HEAP32[$16444 + 4 >> 2] = 65656;
 HEAP32[$668 + 8 >> 2] = 54937;
 HEAP16[$669 >> 1] = 19;
 HEAP16[$669 + 2 >> 1] = 686;
 HEAP16[$669 + 4 >> 1] = 120;
 HEAP16[$669 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $668, $669);
 $16452 = $670;
 HEAP32[$16452 >> 2] = 45023370;
 HEAP32[$16452 + 4 >> 2] = 917505;
 HEAP32[$670 + 8 >> 2] = 33808;
 HEAP16[$671 >> 1] = 138;
 HEAP16[$671 + 2 >> 1] = 687;
 HEAP16[$671 + 4 >> 1] = 1;
 HEAP16[$671 + 6 >> 1] = 14;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $670, $671);
 $16460 = $672;
 HEAP32[$16460 >> 2] = 45875219;
 HEAP32[$16460 + 4 >> 2] = 65655;
 HEAP32[$672 + 8 >> 2] = 33808;
 HEAP16[$673 >> 1] = 19;
 HEAP16[$673 + 2 >> 1] = 700;
 HEAP16[$673 + 4 >> 1] = 119;
 HEAP16[$673 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $672, $673);
 $16468 = $674;
 HEAP32[$16468 >> 2] = 45023251;
 HEAP32[$16468 + 4 >> 2] = 851969;
 HEAP32[$674 + 8 >> 2] = 65535;
 HEAP16[$675 >> 1] = 19;
 HEAP16[$675 + 2 >> 1] = 687;
 HEAP16[$675 + 4 >> 1] = 1;
 HEAP16[$675 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $674, $675);
 $16476 = $676;
 HEAP32[$16476 >> 2] = 45023252;
 HEAP32[$16476 + 4 >> 2] = 65654;
 HEAP32[$676 + 8 >> 2] = 65535;
 HEAP16[$677 >> 1] = 20;
 HEAP16[$677 + 2 >> 1] = 687;
 HEAP16[$677 + 4 >> 1] = 118;
 HEAP16[$677 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $676, $677);
 $16484 = $678;
 HEAP32[$16484 >> 2] = 45088788;
 HEAP32[$16484 + 4 >> 2] = 786550;
 HEAP32[$678 + 8 >> 2] = 54937;
 HEAP16[$679 >> 1] = 20;
 HEAP16[$679 + 2 >> 1] = 688;
 HEAP16[$679 + 4 >> 1] = 118;
 HEAP16[$679 + 6 >> 1] = 12;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $678, $679);
 $16492 = $680;
 HEAP32[$16492 >> 2] = 6357193;
 HEAP32[$16492 + 4 >> 2] = 39125805;
 HEAP32[$680 + 8 >> 2] = 65535;
 HEAP16[$681 >> 1] = 201;
 HEAP16[$681 + 2 >> 1] = 97;
 HEAP16[$681 + 4 >> 1] = 813;
 HEAP16[$681 + 6 >> 1] = 597;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $680, $681);
 $16500 = $682;
 HEAP32[$16500 >> 2] = 6357193;
 HEAP32[$16500 + 4 >> 2] = 39650101;
 HEAP32[$682 + 8 >> 2] = 65535;
 HEAP16[$683 >> 1] = 201;
 HEAP16[$683 + 2 >> 1] = 97;
 HEAP16[$683 + 4 >> 1] = 821;
 HEAP16[$683 + 6 >> 1] = 605;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $682, $683);
 $16508 = $684;
 HEAP32[$16508 >> 2] = 4653252;
 HEAP32[$16508 + 4 >> 2] = 41484291;
 HEAP32[$684 + 8 >> 2] = 54937;
 HEAP16[$685 >> 1] = 196;
 HEAP16[$685 + 2 >> 1] = 71;
 HEAP16[$685 + 4 >> 1] = 3;
 HEAP16[$685 + 6 >> 1] = 633;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $684, $685);
 $16516 = $686;
 HEAP32[$16516 >> 2] = 4718792;
 HEAP32[$16516 + 4 >> 2] = 1442615;
 HEAP32[$686 + 8 >> 2] = 16904;
 HEAP16[$687 >> 1] = 200;
 HEAP16[$687 + 2 >> 1] = 72;
 HEAP16[$687 + 4 >> 1] = 823;
 HEAP16[$687 + 6 >> 1] = 22;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $686, $687);
 $16524 = $688;
 HEAP32[$16524 >> 2] = 4784152;
 HEAP32[$16524 + 4 >> 2] = 1048746;
 HEAP32[$688 + 8 >> 2] = 2349;
 HEAP16[$689 >> 1] = 24;
 HEAP16[$689 + 2 >> 1] = 73;
 HEAP16[$689 + 4 >> 1] = 170;
 HEAP16[$689 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $688, $689);
 $16532 = $690;
 HEAP32[$16532 >> 2] = 5832747;
 HEAP32[$16532 + 4 >> 2] = 1048606;
 HEAP32[$690 + 8 >> 2] = 65535;
 HEAP16[$691 >> 1] = 43;
 HEAP16[$691 + 2 >> 1] = 89;
 HEAP16[$691 + 4 >> 1] = 30;
 HEAP16[$691 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $690, $691);
 $16540 = $692;
 HEAP32[$16540 >> 2] = 6094857;
 HEAP32[$16540 + 4 >> 2] = 524296;
 HEAP32[$692 + 8 >> 2] = 65535;
 HEAP16[$693 >> 1] = 9;
 HEAP16[$693 + 2 >> 1] = 93;
 HEAP16[$693 + 4 >> 1] = 8;
 HEAP16[$693 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $692, $693);
 $16548 = $694;
 HEAP32[$16548 >> 2] = 6357003;
 HEAP32[$16548 + 4 >> 2] = 65541;
 HEAP32[$694 + 8 >> 2] = 0;
 HEAP16[$695 >> 1] = 11;
 HEAP16[$695 + 2 >> 1] = 97;
 HEAP16[$695 + 4 >> 1] = 5;
 HEAP16[$695 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $694, $695);
 $16556 = $696;
 HEAP32[$16556 >> 2] = 6225933;
 HEAP32[$16556 + 4 >> 2] = 327681;
 HEAP32[$696 + 8 >> 2] = 0;
 HEAP16[$697 >> 1] = 13;
 HEAP16[$697 + 2 >> 1] = 95;
 HEAP16[$697 + 4 >> 1] = 1;
 HEAP16[$697 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $696, $697);
 $16564 = $698;
 HEAP32[$16564 >> 2] = 6094857;
 HEAP32[$16564 + 4 >> 2] = 65545;
 HEAP32[$698 + 8 >> 2] = 33808;
 HEAP16[$699 >> 1] = 9;
 HEAP16[$699 + 2 >> 1] = 93;
 HEAP16[$699 + 4 >> 1] = 9;
 HEAP16[$699 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $698, $699);
 $16572 = $700;
 HEAP32[$16572 >> 2] = 6094857;
 HEAP32[$16572 + 4 >> 2] = 589825;
 HEAP32[$700 + 8 >> 2] = 33808;
 HEAP16[$701 >> 1] = 9;
 HEAP16[$701 + 2 >> 1] = 93;
 HEAP16[$701 + 4 >> 1] = 1;
 HEAP16[$701 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $700, $701);
 $16580 = $702;
 HEAP32[$16580 >> 2] = 6619145;
 HEAP32[$16580 + 4 >> 2] = 65545;
 HEAP32[$702 + 8 >> 2] = 33808;
 HEAP16[$703 >> 1] = 9;
 HEAP16[$703 + 2 >> 1] = 101;
 HEAP16[$703 + 4 >> 1] = 9;
 HEAP16[$703 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $702, $703);
 $16588 = $704;
 HEAP32[$16588 >> 2] = 6094865;
 HEAP32[$16588 + 4 >> 2] = 589825;
 HEAP32[$704 + 8 >> 2] = 33808;
 HEAP16[$705 >> 1] = 17;
 HEAP16[$705 + 2 >> 1] = 93;
 HEAP16[$705 + 4 >> 1] = 1;
 HEAP16[$705 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $704, $705);
 $16596 = $706;
 HEAP32[$16596 >> 2] = 6881323;
 HEAP32[$16596 + 4 >> 2] = 1048652;
 HEAP32[$706 + 8 >> 2] = 65535;
 HEAP16[$707 >> 1] = 43;
 HEAP16[$707 + 2 >> 1] = 105;
 HEAP16[$707 + 4 >> 1] = 76;
 HEAP16[$707 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $706, $707);
 $16604 = $708;
 HEAP32[$16604 >> 2] = 7143433;
 HEAP32[$16604 + 4 >> 2] = 524296;
 HEAP32[$708 + 8 >> 2] = 65535;
 HEAP16[$709 >> 1] = 9;
 HEAP16[$709 + 2 >> 1] = 109;
 HEAP16[$709 + 4 >> 1] = 8;
 HEAP16[$709 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $708, $709);
 $16612 = $710;
 HEAP32[$16612 >> 2] = 7405579;
 HEAP32[$16612 + 4 >> 2] = 65541;
 HEAP32[$710 + 8 >> 2] = 0;
 HEAP16[$711 >> 1] = 11;
 HEAP16[$711 + 2 >> 1] = 113;
 HEAP16[$711 + 4 >> 1] = 5;
 HEAP16[$711 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $710, $711);
 $16620 = $712;
 HEAP32[$16620 >> 2] = 7274509;
 HEAP32[$16620 + 4 >> 2] = 327681;
 HEAP32[$712 + 8 >> 2] = 0;
 HEAP16[$713 >> 1] = 13;
 HEAP16[$713 + 2 >> 1] = 111;
 HEAP16[$713 + 4 >> 1] = 1;
 HEAP16[$713 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $712, $713);
 $16628 = $714;
 HEAP32[$16628 >> 2] = 7143433;
 HEAP32[$16628 + 4 >> 2] = 65545;
 HEAP32[$714 + 8 >> 2] = 33808;
 HEAP16[$715 >> 1] = 9;
 HEAP16[$715 + 2 >> 1] = 109;
 HEAP16[$715 + 4 >> 1] = 9;
 HEAP16[$715 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $714, $715);
 $16636 = $716;
 HEAP32[$16636 >> 2] = 7143433;
 HEAP32[$16636 + 4 >> 2] = 589825;
 HEAP32[$716 + 8 >> 2] = 33808;
 HEAP16[$717 >> 1] = 9;
 HEAP16[$717 + 2 >> 1] = 109;
 HEAP16[$717 + 4 >> 1] = 1;
 HEAP16[$717 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $716, $717);
 $16644 = $718;
 HEAP32[$16644 >> 2] = 7667721;
 HEAP32[$16644 + 4 >> 2] = 65545;
 HEAP32[$718 + 8 >> 2] = 33808;
 HEAP16[$719 >> 1] = 9;
 HEAP16[$719 + 2 >> 1] = 117;
 HEAP16[$719 + 4 >> 1] = 9;
 HEAP16[$719 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $718, $719);
 $16652 = $720;
 HEAP32[$16652 >> 2] = 7143441;
 HEAP32[$16652 + 4 >> 2] = 589825;
 HEAP32[$720 + 8 >> 2] = 33808;
 HEAP16[$721 >> 1] = 17;
 HEAP16[$721 + 2 >> 1] = 109;
 HEAP16[$721 + 4 >> 1] = 1;
 HEAP16[$721 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $720, $721);
 $16660 = $722;
 HEAP32[$16660 >> 2] = 7929899;
 HEAP32[$16660 + 4 >> 2] = 1048634;
 HEAP32[$722 + 8 >> 2] = 65535;
 HEAP16[$723 >> 1] = 43;
 HEAP16[$723 + 2 >> 1] = 121;
 HEAP16[$723 + 4 >> 1] = 58;
 HEAP16[$723 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $722, $723);
 $16668 = $724;
 HEAP32[$16668 >> 2] = 8192009;
 HEAP32[$16668 + 4 >> 2] = 524296;
 HEAP32[$724 + 8 >> 2] = 65535;
 HEAP16[$725 >> 1] = 9;
 HEAP16[$725 + 2 >> 1] = 125;
 HEAP16[$725 + 4 >> 1] = 8;
 HEAP16[$725 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $724, $725);
 $16676 = $726;
 HEAP32[$16676 >> 2] = 8454155;
 HEAP32[$16676 + 4 >> 2] = 65541;
 HEAP32[$726 + 8 >> 2] = 0;
 HEAP16[$727 >> 1] = 11;
 HEAP16[$727 + 2 >> 1] = 129;
 HEAP16[$727 + 4 >> 1] = 5;
 HEAP16[$727 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $726, $727);
 $16684 = $728;
 HEAP32[$16684 >> 2] = 8323085;
 HEAP32[$16684 + 4 >> 2] = 327681;
 HEAP32[$728 + 8 >> 2] = 0;
 HEAP16[$729 >> 1] = 13;
 HEAP16[$729 + 2 >> 1] = 127;
 HEAP16[$729 + 4 >> 1] = 1;
 HEAP16[$729 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $728, $729);
 $16692 = $730;
 HEAP32[$16692 >> 2] = 8192009;
 HEAP32[$16692 + 4 >> 2] = 65545;
 HEAP32[$730 + 8 >> 2] = 33808;
 HEAP16[$731 >> 1] = 9;
 HEAP16[$731 + 2 >> 1] = 125;
 HEAP16[$731 + 4 >> 1] = 9;
 HEAP16[$731 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $730, $731);
 $16700 = $732;
 HEAP32[$16700 >> 2] = 8192009;
 HEAP32[$16700 + 4 >> 2] = 589825;
 HEAP32[$732 + 8 >> 2] = 33808;
 HEAP16[$733 >> 1] = 9;
 HEAP16[$733 + 2 >> 1] = 125;
 HEAP16[$733 + 4 >> 1] = 1;
 HEAP16[$733 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $732, $733);
 $16708 = $734;
 HEAP32[$16708 >> 2] = 8716297;
 HEAP32[$16708 + 4 >> 2] = 65545;
 HEAP32[$734 + 8 >> 2] = 33808;
 HEAP16[$735 >> 1] = 9;
 HEAP16[$735 + 2 >> 1] = 133;
 HEAP16[$735 + 4 >> 1] = 9;
 HEAP16[$735 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $734, $735);
 $16716 = $736;
 HEAP32[$16716 >> 2] = 8192017;
 HEAP32[$16716 + 4 >> 2] = 589825;
 HEAP32[$736 + 8 >> 2] = 33808;
 HEAP16[$737 >> 1] = 17;
 HEAP16[$737 + 2 >> 1] = 125;
 HEAP16[$737 + 4 >> 1] = 1;
 HEAP16[$737 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $736, $737);
 $16724 = $738;
 HEAP32[$16724 >> 2] = 8978475;
 HEAP32[$16724 + 4 >> 2] = 1048645;
 HEAP32[$738 + 8 >> 2] = 65535;
 HEAP16[$739 >> 1] = 43;
 HEAP16[$739 + 2 >> 1] = 137;
 HEAP16[$739 + 4 >> 1] = 69;
 HEAP16[$739 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $738, $739);
 $16732 = $740;
 HEAP32[$16732 >> 2] = 9240585;
 HEAP32[$16732 + 4 >> 2] = 524296;
 HEAP32[$740 + 8 >> 2] = 65535;
 HEAP16[$741 >> 1] = 9;
 HEAP16[$741 + 2 >> 1] = 141;
 HEAP16[$741 + 4 >> 1] = 8;
 HEAP16[$741 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $740, $741);
 $16740 = $742;
 HEAP32[$16740 >> 2] = 9502731;
 HEAP32[$16740 + 4 >> 2] = 65541;
 HEAP32[$742 + 8 >> 2] = 0;
 HEAP16[$743 >> 1] = 11;
 HEAP16[$743 + 2 >> 1] = 145;
 HEAP16[$743 + 4 >> 1] = 5;
 HEAP16[$743 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $742, $743);
 $16748 = $744;
 HEAP32[$16748 >> 2] = 9371661;
 HEAP32[$16748 + 4 >> 2] = 327681;
 HEAP32[$744 + 8 >> 2] = 0;
 HEAP16[$745 >> 1] = 13;
 HEAP16[$745 + 2 >> 1] = 143;
 HEAP16[$745 + 4 >> 1] = 1;
 HEAP16[$745 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $744, $745);
 $16756 = $746;
 HEAP32[$16756 >> 2] = 9240585;
 HEAP32[$16756 + 4 >> 2] = 65545;
 HEAP32[$746 + 8 >> 2] = 33808;
 HEAP16[$747 >> 1] = 9;
 HEAP16[$747 + 2 >> 1] = 141;
 HEAP16[$747 + 4 >> 1] = 9;
 HEAP16[$747 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $746, $747);
 $16764 = $748;
 HEAP32[$16764 >> 2] = 9240585;
 HEAP32[$16764 + 4 >> 2] = 589825;
 HEAP32[$748 + 8 >> 2] = 33808;
 HEAP16[$749 >> 1] = 9;
 HEAP16[$749 + 2 >> 1] = 141;
 HEAP16[$749 + 4 >> 1] = 1;
 HEAP16[$749 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $748, $749);
 $16772 = $750;
 HEAP32[$16772 >> 2] = 9764873;
 HEAP32[$16772 + 4 >> 2] = 65545;
 HEAP32[$750 + 8 >> 2] = 33808;
 HEAP16[$751 >> 1] = 9;
 HEAP16[$751 + 2 >> 1] = 149;
 HEAP16[$751 + 4 >> 1] = 9;
 HEAP16[$751 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $750, $751);
 $16780 = $752;
 HEAP32[$16780 >> 2] = 9240593;
 HEAP32[$16780 + 4 >> 2] = 589825;
 HEAP32[$752 + 8 >> 2] = 33808;
 HEAP16[$753 >> 1] = 17;
 HEAP16[$753 + 2 >> 1] = 141;
 HEAP16[$753 + 4 >> 1] = 1;
 HEAP16[$753 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $752, $753);
 $16788 = $754;
 HEAP32[$16788 >> 2] = 10027051;
 HEAP32[$16788 + 4 >> 2] = 1048624;
 HEAP32[$754 + 8 >> 2] = 65535;
 HEAP16[$755 >> 1] = 43;
 HEAP16[$755 + 2 >> 1] = 153;
 HEAP16[$755 + 4 >> 1] = 48;
 HEAP16[$755 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $754, $755);
 $16796 = $756;
 HEAP32[$16796 >> 2] = 10289161;
 HEAP32[$16796 + 4 >> 2] = 524296;
 HEAP32[$756 + 8 >> 2] = 65535;
 HEAP16[$757 >> 1] = 9;
 HEAP16[$757 + 2 >> 1] = 157;
 HEAP16[$757 + 4 >> 1] = 8;
 HEAP16[$757 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $756, $757);
 $16804 = $758;
 HEAP32[$16804 >> 2] = 10551307;
 HEAP32[$16804 + 4 >> 2] = 65541;
 HEAP32[$758 + 8 >> 2] = 0;
 HEAP16[$759 >> 1] = 11;
 HEAP16[$759 + 2 >> 1] = 161;
 HEAP16[$759 + 4 >> 1] = 5;
 HEAP16[$759 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $758, $759);
 $16812 = $760;
 HEAP32[$16812 >> 2] = 10420237;
 HEAP32[$16812 + 4 >> 2] = 327681;
 HEAP32[$760 + 8 >> 2] = 0;
 HEAP16[$761 >> 1] = 13;
 HEAP16[$761 + 2 >> 1] = 159;
 HEAP16[$761 + 4 >> 1] = 1;
 HEAP16[$761 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $760, $761);
 $16820 = $762;
 HEAP32[$16820 >> 2] = 10289161;
 HEAP32[$16820 + 4 >> 2] = 65545;
 HEAP32[$762 + 8 >> 2] = 33808;
 HEAP16[$763 >> 1] = 9;
 HEAP16[$763 + 2 >> 1] = 157;
 HEAP16[$763 + 4 >> 1] = 9;
 HEAP16[$763 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $762, $763);
 $16828 = $764;
 HEAP32[$16828 >> 2] = 10289161;
 HEAP32[$16828 + 4 >> 2] = 589825;
 HEAP32[$764 + 8 >> 2] = 33808;
 HEAP16[$765 >> 1] = 9;
 HEAP16[$765 + 2 >> 1] = 157;
 HEAP16[$765 + 4 >> 1] = 1;
 HEAP16[$765 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $764, $765);
 $16836 = $766;
 HEAP32[$16836 >> 2] = 10813449;
 HEAP32[$16836 + 4 >> 2] = 65545;
 HEAP32[$766 + 8 >> 2] = 33808;
 HEAP16[$767 >> 1] = 9;
 HEAP16[$767 + 2 >> 1] = 165;
 HEAP16[$767 + 4 >> 1] = 9;
 HEAP16[$767 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $766, $767);
 $16844 = $768;
 HEAP32[$16844 >> 2] = 10289169;
 HEAP32[$16844 + 4 >> 2] = 589825;
 HEAP32[$768 + 8 >> 2] = 33808;
 HEAP16[$769 >> 1] = 17;
 HEAP16[$769 + 2 >> 1] = 157;
 HEAP16[$769 + 4 >> 1] = 1;
 HEAP16[$769 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $768, $769);
 $16852 = $770;
 HEAP32[$16852 >> 2] = 4718792;
 HEAP32[$16852 + 4 >> 2] = 1442615;
 HEAP32[$770 + 8 >> 2] = 16904;
 HEAP16[$771 >> 1] = 200;
 HEAP16[$771 + 2 >> 1] = 72;
 HEAP16[$771 + 4 >> 1] = 823;
 HEAP16[$771 + 6 >> 1] = 22;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $770, $771);
 $16860 = $772;
 HEAP32[$16860 >> 2] = 46269219;
 HEAP32[$16860 + 4 >> 2] = 1179649;
 HEAP32[$772 + 8 >> 2] = 65535;
 HEAP16[$773 >> 1] = 803;
 HEAP16[$773 + 2 >> 1] = 706;
 HEAP16[$773 + 4 >> 1] = 1;
 HEAP16[$773 + 6 >> 1] = 18;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $772, $773);
 $16868 = $774;
 HEAP32[$16868 >> 2] = 47382528;
 HEAP32[$16868 + 4 >> 2] = 66339;
 HEAP32[$774 + 8 >> 2] = 65535;
 HEAP16[$775 >> 1] = 0;
 HEAP16[$775 + 2 >> 1] = 723;
 HEAP16[$775 + 4 >> 1] = 803;
 HEAP16[$775 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $774, $775);
 $16876 = $776;
 HEAP32[$16876 >> 2] = 46268416;
 HEAP32[$16876 + 4 >> 2] = 1114113;
 HEAP32[$776 + 8 >> 2] = 33808;
 HEAP16[$777 >> 1] = 0;
 HEAP16[$777 + 2 >> 1] = 706;
 HEAP16[$777 + 4 >> 1] = 1;
 HEAP16[$777 + 6 >> 1] = 17;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $776, $777);
 $16884 = $778;
 HEAP32[$16884 >> 2] = 46268417;
 HEAP32[$16884 + 4 >> 2] = 66338;
 HEAP32[$778 + 8 >> 2] = 33808;
 HEAP16[$779 >> 1] = 1;
 HEAP16[$779 + 2 >> 1] = 706;
 HEAP16[$779 + 4 >> 1] = 802;
 HEAP16[$779 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $778, $779);
 $16892 = $780;
 HEAP32[$16892 >> 2] = 46333953;
 HEAP32[$16892 + 4 >> 2] = 1049378;
 HEAP32[$780 + 8 >> 2] = 54937;
 HEAP16[$781 >> 1] = 1;
 HEAP16[$781 + 2 >> 1] = 707;
 HEAP16[$781 + 4 >> 1] = 802;
 HEAP16[$781 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $780, $781);
 $16900 = $782;
 HEAP32[$16900 >> 2] = 46269352;
 HEAP32[$16900 + 4 >> 2] = 1179649;
 HEAP32[$782 + 8 >> 2] = 65535;
 HEAP16[$783 >> 1] = 936;
 HEAP16[$783 + 2 >> 1] = 706;
 HEAP16[$783 + 4 >> 1] = 1;
 HEAP16[$783 + 6 >> 1] = 18;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $782, $783);
 $16908 = $784;
 HEAP32[$16908 >> 2] = 47383334;
 HEAP32[$16908 + 4 >> 2] = 65666;
 HEAP32[$784 + 8 >> 2] = 65535;
 HEAP16[$785 >> 1] = 806;
 HEAP16[$785 + 2 >> 1] = 723;
 HEAP16[$785 + 4 >> 1] = 130;
 HEAP16[$785 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $784, $785);
 $16916 = $786;
 HEAP32[$16916 >> 2] = 46269222;
 HEAP32[$16916 + 4 >> 2] = 1114113;
 HEAP32[$786 + 8 >> 2] = 33808;
 HEAP16[$787 >> 1] = 806;
 HEAP16[$787 + 2 >> 1] = 706;
 HEAP16[$787 + 4 >> 1] = 1;
 HEAP16[$787 + 6 >> 1] = 17;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $786, $787);
 $16924 = $788;
 HEAP32[$16924 >> 2] = 46269223;
 HEAP32[$16924 + 4 >> 2] = 65665;
 HEAP32[$788 + 8 >> 2] = 33808;
 HEAP16[$789 >> 1] = 807;
 HEAP16[$789 + 2 >> 1] = 706;
 HEAP16[$789 + 4 >> 1] = 129;
 HEAP16[$789 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $788, $789);
 $16932 = $790;
 HEAP32[$16932 >> 2] = 46334759;
 HEAP32[$16932 + 4 >> 2] = 1048705;
 HEAP32[$790 + 8 >> 2] = 54937;
 HEAP16[$791 >> 1] = 807;
 HEAP16[$791 + 2 >> 1] = 707;
 HEAP16[$791 + 4 >> 1] = 129;
 HEAP16[$791 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $790, $791);
 $16940 = $792;
 HEAP32[$16940 >> 2] = 46269437;
 HEAP32[$16940 + 4 >> 2] = 1179649;
 HEAP32[$792 + 8 >> 2] = 65535;
 HEAP16[$793 >> 1] = 1021;
 HEAP16[$793 + 2 >> 1] = 706;
 HEAP16[$793 + 4 >> 1] = 1;
 HEAP16[$793 + 6 >> 1] = 18;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $792, $793);
 $16948 = $794;
 HEAP32[$16948 >> 2] = 47383467;
 HEAP32[$16948 + 4 >> 2] = 65618;
 HEAP32[$794 + 8 >> 2] = 65535;
 HEAP16[$795 >> 1] = 939;
 HEAP16[$795 + 2 >> 1] = 723;
 HEAP16[$795 + 4 >> 1] = 82;
 HEAP16[$795 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $794, $795);
 $16956 = $796;
 HEAP32[$16956 >> 2] = 46269355;
 HEAP32[$16956 + 4 >> 2] = 1114113;
 HEAP32[$796 + 8 >> 2] = 33808;
 HEAP16[$797 >> 1] = 939;
 HEAP16[$797 + 2 >> 1] = 706;
 HEAP16[$797 + 4 >> 1] = 1;
 HEAP16[$797 + 6 >> 1] = 17;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $796, $797);
 $16964 = $798;
 HEAP32[$16964 >> 2] = 46269356;
 HEAP32[$16964 + 4 >> 2] = 65617;
 HEAP32[$798 + 8 >> 2] = 33808;
 HEAP16[$799 >> 1] = 940;
 HEAP16[$799 + 2 >> 1] = 706;
 HEAP16[$799 + 4 >> 1] = 81;
 HEAP16[$799 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $798, $799);
 $16972 = $800;
 HEAP32[$16972 >> 2] = 46334892;
 HEAP32[$16972 + 4 >> 2] = 1048657;
 HEAP32[$800 + 8 >> 2] = 54937;
 HEAP16[$801 >> 1] = 940;
 HEAP16[$801 + 2 >> 1] = 707;
 HEAP16[$801 + 4 >> 1] = 81;
 HEAP16[$801 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $800, $801);
 $16980 = $802;
 HEAP32[$16980 >> 2] = 1245184;
 HEAP32[$16980 + 4 >> 2] = 3408896;
 HEAP32[$802 + 8 >> 2] = 54937;
 HEAP16[$803 >> 1] = 0;
 HEAP16[$803 + 2 >> 1] = 19;
 HEAP16[$803 + 4 >> 1] = 1024;
 HEAP16[$803 + 6 >> 1] = 52;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $802, $803);
 $16988 = $804;
 HEAP32[$16988 >> 2] = 1246207;
 HEAP32[$16988 + 4 >> 2] = 3276801;
 HEAP32[$804 + 8 >> 2] = 65535;
 HEAP16[$805 >> 1] = 1023;
 HEAP16[$805 + 2 >> 1] = 19;
 HEAP16[$805 + 4 >> 1] = 1;
 HEAP16[$805 + 6 >> 1] = 50;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $804, $805);
 $16996 = $806;
 HEAP32[$16996 >> 2] = 4456448;
 HEAP32[$16996 + 4 >> 2] = 66559;
 HEAP32[$806 + 8 >> 2] = 65535;
 HEAP16[$807 >> 1] = 0;
 HEAP16[$807 + 2 >> 1] = 68;
 HEAP16[$807 + 4 >> 1] = 1023;
 HEAP16[$807 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $806, $807);
 $17004 = $808;
 HEAP32[$17004 >> 2] = 1245184;
 HEAP32[$17004 + 4 >> 2] = 3211265;
 HEAP32[$808 + 8 >> 2] = 33808;
 HEAP16[$809 >> 1] = 0;
 HEAP16[$809 + 2 >> 1] = 19;
 HEAP16[$809 + 4 >> 1] = 1;
 HEAP16[$809 + 6 >> 1] = 49;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $808, $809);
 $17012 = $810;
 HEAP32[$17012 >> 2] = 1245185;
 HEAP32[$17012 + 4 >> 2] = 66558;
 HEAP32[$810 + 8 >> 2] = 33808;
 HEAP16[$811 >> 1] = 1;
 HEAP16[$811 + 2 >> 1] = 19;
 HEAP16[$811 + 4 >> 1] = 1022;
 HEAP16[$811 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $810, $811);
 $17020 = $812;
 HEAP32[$17020 >> 2] = 1311742;
 HEAP32[$17020 + 4 >> 2] = 3145729;
 HEAP32[$812 + 8 >> 2] = 33808;
 HEAP16[$813 >> 1] = 1022;
 HEAP16[$813 + 2 >> 1] = 20;
 HEAP16[$813 + 4 >> 1] = 1;
 HEAP16[$813 + 6 >> 1] = 48;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $812, $813);
 $17028 = $814;
 HEAP32[$17028 >> 2] = 4390913;
 HEAP32[$17028 + 4 >> 2] = 66557;
 HEAP32[$814 + 8 >> 2] = 33808;
 HEAP16[$815 >> 1] = 1;
 HEAP16[$815 + 2 >> 1] = 67;
 HEAP16[$815 + 4 >> 1] = 1021;
 HEAP16[$815 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $814, $815);
 $17036 = $816;
 HEAP32[$17036 >> 2] = 1310721;
 HEAP32[$17036 + 4 >> 2] = 3080193;
 HEAP32[$816 + 8 >> 2] = 65535;
 HEAP16[$817 >> 1] = 1;
 HEAP16[$817 + 2 >> 1] = 20;
 HEAP16[$817 + 4 >> 1] = 1;
 HEAP16[$817 + 6 >> 1] = 47;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $816, $817);
 $17044 = $818;
 HEAP32[$17044 >> 2] = 1310722;
 HEAP32[$17044 + 4 >> 2] = 66556;
 HEAP32[$818 + 8 >> 2] = 65535;
 HEAP16[$819 >> 1] = 2;
 HEAP16[$819 + 2 >> 1] = 20;
 HEAP16[$819 + 4 >> 1] = 1020;
 HEAP16[$819 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $818, $819);
 $17052 = $820;
 HEAP32[$17052 >> 2] = 1376258;
 HEAP32[$17052 + 4 >> 2] = 3015676;
 HEAP32[$820 + 8 >> 2] = 54937;
 HEAP16[$821 >> 1] = 2;
 HEAP16[$821 + 2 >> 1] = 21;
 HEAP16[$821 + 4 >> 1] = 1020;
 HEAP16[$821 + 6 >> 1] = 46;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $820, $821);
 $17060 = $822;
 HEAP32[$17060 >> 2] = 2883586;
 HEAP32[$17060 + 4 >> 2] = 66556;
 HEAP32[$822 + 8 >> 2] = 65535;
 HEAP16[$823 >> 1] = 2;
 HEAP16[$823 + 2 >> 1] = 44;
 HEAP16[$823 + 4 >> 1] = 1020;
 HEAP16[$823 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $822, $823);
 $17068 = $824;
 HEAP32[$17068 >> 2] = 2818050;
 HEAP32[$17068 + 4 >> 2] = 66556;
 HEAP32[$824 + 8 >> 2] = 33808;
 HEAP16[$825 >> 1] = 2;
 HEAP16[$825 + 2 >> 1] = 43;
 HEAP16[$825 + 4 >> 1] = 1020;
 HEAP16[$825 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $824, $825);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 846;
 HEAP16[$bitmapData + 6 >> 1] = 748;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31804) label = 2979; else {
  $17081 = HEAP32[918918] | 0;
  if (($17081 | 0) == (HEAP32[918916] | 0)) label = 2979; else {
   $$lcssa$i$i3563 = 3675672;
   $$lcssa8$i$i3562 = $17081;
   label = 2980;
  }
 }
 do if ((label | 0) == 2979) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31804) {
   $17088 = HEAP32[918924] | 0;
   if (($17088 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3563 = 3675696;
    $$lcssa8$i$i3562 = $17088;
    label = 2980;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31804) {
   $17093 = HEAP32[918930] | 0;
   if (($17093 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3563 = 3675720;
    $$lcssa8$i$i3562 = $17093;
    label = 2980;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31804) {
   $17098 = HEAP32[918936] | 0;
   if (($17098 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3563 = 3675744;
    $$lcssa8$i$i3562 = $17098;
    label = 2980;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31804) {
   $17103 = HEAP32[918942] | 0;
   if (($17103 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3563 = 3675768;
    $$lcssa8$i$i3562 = $17103;
    label = 2980;
    break;
   }
  }
  $$3$i$i3564 = __Znwj(31804) | 0;
 } while (0);
 if ((label | 0) == 2980) {
  $17086 = $$lcssa8$i$i3562 + -4 | 0;
  HEAP32[$$lcssa$i$i3563 >> 2] = $17086;
  $$3$i$i3564 = HEAP32[$17086 >> 2] | 0;
 }
 $17107 = $$3$i$i3564 + 52 | 0;
 HEAP16[$$3$i$i3564 >> 1] = 756;
 HEAP16[$$3$i$i3564 + 2 >> 1] = 21;
 HEAP8[$$3$i$i3564 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3564 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3564 + 8 >> 2] = 1512;
 HEAP32[$$3$i$i3564 + 12 >> 2] = 31752;
 HEAP32[$$3$i$i3564 + 16 >> 2] = $17107;
 HEAP32[$$3$i$i3564 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3564 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3564 + 48 >> 0] = 0;
 HEAP32[$826 >> 2] = $$3$i$i3564;
 _memcpy($17107 | 0, 2043672, 1512) | 0;
 _memcpy($$3$i$i3564 + 1564 | 0, 2045184, 1512) | 0;
 _memcpy($$3$i$i3564 + 3076 | 0, 2046696, 1512) | 0;
 _memcpy($$3$i$i3564 + 4588 | 0, 2048208, 1512) | 0;
 _memcpy($$3$i$i3564 + 6100 | 0, 2049720, 1512) | 0;
 _memcpy($$3$i$i3564 + 7612 | 0, 2051232, 1512) | 0;
 _memcpy($$3$i$i3564 + 9124 | 0, 2052744, 1512) | 0;
 _memcpy($$3$i$i3564 + 10636 | 0, 2054256, 1512) | 0;
 _memcpy($$3$i$i3564 + 12148 | 0, 2055768, 1512) | 0;
 _memcpy($$3$i$i3564 + 13660 | 0, 2057280, 1512) | 0;
 _memcpy($$3$i$i3564 + 15172 | 0, 2058792, 1512) | 0;
 _memcpy($$3$i$i3564 + 16684 | 0, 2060304, 1512) | 0;
 _memcpy($$3$i$i3564 + 18196 | 0, 2061816, 1512) | 0;
 _memcpy($$3$i$i3564 + 19708 | 0, 2063328, 1512) | 0;
 _memcpy($$3$i$i3564 + 21220 | 0, 2064840, 1512) | 0;
 _memcpy($$3$i$i3564 + 22732 | 0, 2066352, 1512) | 0;
 _memcpy($$3$i$i3564 + 24244 | 0, 2067864, 1512) | 0;
 _memcpy($$3$i$i3564 + 25756 | 0, 2069376, 1512) | 0;
 _memcpy($$3$i$i3564 + 27268 | 0, 2070888, 1512) | 0;
 _memcpy($$3$i$i3564 + 28780 | 0, 2072400, 1512) | 0;
 _memcpy($$3$i$i3564 + 30292 | 0, 2073912, 1512) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $826);
 if ($$3$i$i3564 | 0) {
  $17138 = $$3$i$i3564 + 5 | 0;
  $17140 = (HEAP8[$17138 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17138 >> 0] = $17140;
  if (!($17140 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3564);
  HEAP32[$826 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 749;
 HEAP16[$bitmapData + 4 >> 1] = 846;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 25756) label = 2995; else {
  $17147 = HEAP32[918918] | 0;
  if (($17147 | 0) == (HEAP32[918916] | 0)) label = 2995; else {
   $$lcssa$i$i3586 = 3675672;
   $$lcssa8$i$i3585 = $17147;
   label = 2996;
  }
 }
 do if ((label | 0) == 2995) {
  if ((HEAP32[918925] | 0) >>> 0 >= 25756) {
   $17154 = HEAP32[918924] | 0;
   if (($17154 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3586 = 3675696;
    $$lcssa8$i$i3585 = $17154;
    label = 2996;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 25756) {
   $17159 = HEAP32[918930] | 0;
   if (($17159 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3586 = 3675720;
    $$lcssa8$i$i3585 = $17159;
    label = 2996;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 25756) {
   $17164 = HEAP32[918936] | 0;
   if (($17164 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3586 = 3675744;
    $$lcssa8$i$i3585 = $17164;
    label = 2996;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 25756) {
   $17169 = HEAP32[918942] | 0;
   if (($17169 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3586 = 3675768;
    $$lcssa8$i$i3585 = $17169;
    label = 2996;
    break;
   }
  }
  $$3$i$i3587 = __Znwj(25756) | 0;
 } while (0);
 if ((label | 0) == 2996) {
  $17152 = $$lcssa8$i$i3585 + -4 | 0;
  HEAP32[$$lcssa$i$i3586 >> 2] = $17152;
  $$3$i$i3587 = HEAP32[$17152 >> 2] | 0;
 }
 $17173 = $$3$i$i3587 + 52 | 0;
 HEAP16[$$3$i$i3587 >> 1] = 756;
 HEAP16[$$3$i$i3587 + 2 >> 1] = 17;
 HEAP8[$$3$i$i3587 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3587 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3587 + 8 >> 2] = 1512;
 HEAP32[$$3$i$i3587 + 12 >> 2] = 25704;
 HEAP32[$$3$i$i3587 + 16 >> 2] = $17173;
 HEAP32[$$3$i$i3587 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3587 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3587 + 48 >> 0] = 0;
 HEAP32[$827 >> 2] = $$3$i$i3587;
 _memcpy($17173 | 0, 2075424, 1512) | 0;
 _memcpy($$3$i$i3587 + 1564 | 0, 2076936, 1512) | 0;
 _memcpy($$3$i$i3587 + 3076 | 0, 2078448, 1512) | 0;
 _memcpy($$3$i$i3587 + 4588 | 0, 2079960, 1512) | 0;
 _memcpy($$3$i$i3587 + 6100 | 0, 2081472, 1512) | 0;
 _memcpy($$3$i$i3587 + 7612 | 0, 2082984, 1512) | 0;
 _memcpy($$3$i$i3587 + 9124 | 0, 2084496, 1512) | 0;
 _memcpy($$3$i$i3587 + 10636 | 0, 2086008, 1512) | 0;
 _memcpy($$3$i$i3587 + 12148 | 0, 2087520, 1512) | 0;
 _memcpy($$3$i$i3587 + 13660 | 0, 2089032, 1512) | 0;
 _memcpy($$3$i$i3587 + 15172 | 0, 2090544, 1512) | 0;
 _memcpy($$3$i$i3587 + 16684 | 0, 2092056, 1512) | 0;
 _memcpy($$3$i$i3587 + 18196 | 0, 2093568, 1512) | 0;
 _memcpy($$3$i$i3587 + 19708 | 0, 2095080, 1512) | 0;
 _memcpy($$3$i$i3587 + 21220 | 0, 2096592, 1512) | 0;
 _memcpy($$3$i$i3587 + 22732 | 0, 2098104, 1512) | 0;
 _memcpy($$3$i$i3587 + 24244 | 0, 2099616, 1512) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $827);
 if ($$3$i$i3587 | 0) {
  $17200 = $$3$i$i3587 + 5 | 0;
  $17202 = (HEAP8[$17200 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17200 >> 0] = $17202;
  if (!($17202 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3587);
  HEAP32[$827 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 21;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 35;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30652) label = 3011; else {
  $17209 = HEAP32[918918] | 0;
  if (($17209 | 0) == (HEAP32[918916] | 0)) label = 3011; else {
   $$lcssa$i$i3598 = 3675672;
   $$lcssa8$i$i3597 = $17209;
   label = 3012;
  }
 }
 do if ((label | 0) == 3011) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30652) {
   $17216 = HEAP32[918924] | 0;
   if (($17216 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3598 = 3675696;
    $$lcssa8$i$i3597 = $17216;
    label = 3012;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30652) {
   $17221 = HEAP32[918930] | 0;
   if (($17221 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3598 = 3675720;
    $$lcssa8$i$i3597 = $17221;
    label = 3012;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30652) {
   $17226 = HEAP32[918936] | 0;
   if (($17226 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3598 = 3675744;
    $$lcssa8$i$i3597 = $17226;
    label = 3012;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30652) {
   $17231 = HEAP32[918942] | 0;
   if (($17231 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3598 = 3675768;
    $$lcssa8$i$i3597 = $17231;
    label = 3012;
    break;
   }
  }
  $$3$i$i3599 = __Znwj(30652) | 0;
 } while (0);
 if ((label | 0) == 3012) {
  $17214 = $$lcssa8$i$i3597 + -4 | 0;
  HEAP32[$$lcssa$i$i3598 >> 2] = $17214;
  $$3$i$i3599 = HEAP32[$17214 >> 2] | 0;
 }
 $17235 = $$3$i$i3599 + 52 | 0;
 HEAP16[$$3$i$i3599 >> 1] = 1020;
 HEAP16[$$3$i$i3599 + 2 >> 1] = 15;
 HEAP8[$$3$i$i3599 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3599 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3599 + 8 >> 2] = 2040;
 HEAP32[$$3$i$i3599 + 12 >> 2] = 30600;
 HEAP32[$$3$i$i3599 + 16 >> 2] = $17235;
 HEAP32[$$3$i$i3599 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3599 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3599 + 48 >> 0] = 0;
 HEAP32[$828 >> 2] = $$3$i$i3599;
 _memcpy($17235 | 0, 2101128, 2040) | 0;
 _memcpy($$3$i$i3599 + 2092 | 0, 2103168, 2040) | 0;
 _memcpy($$3$i$i3599 + 4132 | 0, 2105208, 2040) | 0;
 _memcpy($$3$i$i3599 + 6172 | 0, 2107248, 2040) | 0;
 _memcpy($$3$i$i3599 + 8212 | 0, 2109288, 2040) | 0;
 _memcpy($$3$i$i3599 + 10252 | 0, 2111328, 2040) | 0;
 _memcpy($$3$i$i3599 + 12292 | 0, 2113368, 2040) | 0;
 _memcpy($$3$i$i3599 + 14332 | 0, 2115408, 2040) | 0;
 _memcpy($$3$i$i3599 + 16372 | 0, 2117448, 2040) | 0;
 _memcpy($$3$i$i3599 + 18412 | 0, 2119488, 2040) | 0;
 _memcpy($$3$i$i3599 + 20452 | 0, 2121528, 2040) | 0;
 _memcpy($$3$i$i3599 + 22492 | 0, 2123568, 2040) | 0;
 _memcpy($$3$i$i3599 + 24532 | 0, 2125608, 2040) | 0;
 _memcpy($$3$i$i3599 + 26572 | 0, 2127648, 2040) | 0;
 _memcpy($$3$i$i3599 + 28612 | 0, 2129688, 2040) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $828);
 if ($$3$i$i3599 | 0) {
  $17260 = $$3$i$i3599 + 5 | 0;
  $17262 = (HEAP8[$17260 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17260 >> 0] = $17262;
  if (!($17262 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3599);
  HEAP32[$828 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 36;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 42;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 14332) label = 3027; else {
  $17269 = HEAP32[918918] | 0;
  if (($17269 | 0) == (HEAP32[918916] | 0)) label = 3027; else {
   $$lcssa$i$i3611 = 3675672;
   $$lcssa8$i$i3610 = $17269;
   label = 3028;
  }
 }
 do if ((label | 0) == 3027) {
  if ((HEAP32[918925] | 0) >>> 0 >= 14332) {
   $17276 = HEAP32[918924] | 0;
   if (($17276 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3611 = 3675696;
    $$lcssa8$i$i3610 = $17276;
    label = 3028;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 14332) {
   $17281 = HEAP32[918930] | 0;
   if (($17281 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3611 = 3675720;
    $$lcssa8$i$i3610 = $17281;
    label = 3028;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 14332) {
   $17286 = HEAP32[918936] | 0;
   if (($17286 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3611 = 3675744;
    $$lcssa8$i$i3610 = $17286;
    label = 3028;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 14332) {
   $17291 = HEAP32[918942] | 0;
   if (($17291 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3611 = 3675768;
    $$lcssa8$i$i3610 = $17291;
    label = 3028;
    break;
   }
  }
  $$3$i$i3612 = __Znwj(14332) | 0;
 } while (0);
 if ((label | 0) == 3028) {
  $17274 = $$lcssa8$i$i3610 + -4 | 0;
  HEAP32[$$lcssa$i$i3611 >> 2] = $17274;
  $$3$i$i3612 = HEAP32[$17274 >> 2] | 0;
 }
 $17295 = $$3$i$i3612 + 52 | 0;
 HEAP16[$$3$i$i3612 >> 1] = 1020;
 HEAP16[$$3$i$i3612 + 2 >> 1] = 7;
 HEAP8[$$3$i$i3612 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3612 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3612 + 8 >> 2] = 2040;
 HEAP32[$$3$i$i3612 + 12 >> 2] = 14280;
 HEAP32[$$3$i$i3612 + 16 >> 2] = $17295;
 HEAP32[$$3$i$i3612 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3612 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3612 + 48 >> 0] = 0;
 HEAP32[$829 >> 2] = $$3$i$i3612;
 _memcpy($17295 | 0, 2131728, 2040) | 0;
 _memcpy($$3$i$i3612 + 2092 | 0, 2133768, 2040) | 0;
 _memcpy($$3$i$i3612 + 4132 | 0, 2135808, 2040) | 0;
 _memcpy($$3$i$i3612 + 6172 | 0, 2137848, 2040) | 0;
 _memcpy($$3$i$i3612 + 8212 | 0, 2139888, 2040) | 0;
 _memcpy($$3$i$i3612 + 10252 | 0, 2141928, 2040) | 0;
 _memcpy($$3$i$i3612 + 12292 | 0, 2143968, 2040) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $829);
 if ($$3$i$i3612 | 0) {
  $17312 = $$3$i$i3612 + 5 | 0;
  $17314 = (HEAP8[$17312 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17312 >> 0] = $17314;
  if (!($17314 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3612);
  HEAP32[$829 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 45;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 59;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30652) label = 3043; else {
  $17321 = HEAP32[918918] | 0;
  if (($17321 | 0) == (HEAP32[918916] | 0)) label = 3043; else {
   $$lcssa$i$i3623 = 3675672;
   $$lcssa8$i$i3622 = $17321;
   label = 3044;
  }
 }
 do if ((label | 0) == 3043) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30652) {
   $17328 = HEAP32[918924] | 0;
   if (($17328 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3623 = 3675696;
    $$lcssa8$i$i3622 = $17328;
    label = 3044;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30652) {
   $17333 = HEAP32[918930] | 0;
   if (($17333 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3623 = 3675720;
    $$lcssa8$i$i3622 = $17333;
    label = 3044;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30652) {
   $17338 = HEAP32[918936] | 0;
   if (($17338 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3623 = 3675744;
    $$lcssa8$i$i3622 = $17338;
    label = 3044;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30652) {
   $17343 = HEAP32[918942] | 0;
   if (($17343 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3623 = 3675768;
    $$lcssa8$i$i3622 = $17343;
    label = 3044;
    break;
   }
  }
  $$3$i$i3624 = __Znwj(30652) | 0;
 } while (0);
 if ((label | 0) == 3044) {
  $17326 = $$lcssa8$i$i3622 + -4 | 0;
  HEAP32[$$lcssa$i$i3623 >> 2] = $17326;
  $$3$i$i3624 = HEAP32[$17326 >> 2] | 0;
 }
 $17347 = $$3$i$i3624 + 52 | 0;
 HEAP16[$$3$i$i3624 >> 1] = 1020;
 HEAP16[$$3$i$i3624 + 2 >> 1] = 15;
 HEAP8[$$3$i$i3624 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3624 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3624 + 8 >> 2] = 2040;
 HEAP32[$$3$i$i3624 + 12 >> 2] = 30600;
 HEAP32[$$3$i$i3624 + 16 >> 2] = $17347;
 HEAP32[$$3$i$i3624 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3624 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3624 + 48 >> 0] = 0;
 HEAP32[$830 >> 2] = $$3$i$i3624;
 _memcpy($17347 | 0, 2146008, 2040) | 0;
 _memcpy($$3$i$i3624 + 2092 | 0, 2148048, 2040) | 0;
 _memcpy($$3$i$i3624 + 4132 | 0, 2150088, 2040) | 0;
 _memcpy($$3$i$i3624 + 6172 | 0, 2152128, 2040) | 0;
 _memcpy($$3$i$i3624 + 8212 | 0, 2154168, 2040) | 0;
 _memcpy($$3$i$i3624 + 10252 | 0, 2156208, 2040) | 0;
 _memcpy($$3$i$i3624 + 12292 | 0, 2158248, 2040) | 0;
 _memcpy($$3$i$i3624 + 14332 | 0, 2160288, 2040) | 0;
 _memcpy($$3$i$i3624 + 16372 | 0, 2162328, 2040) | 0;
 _memcpy($$3$i$i3624 + 18412 | 0, 2164368, 2040) | 0;
 _memcpy($$3$i$i3624 + 20452 | 0, 2166408, 2040) | 0;
 _memcpy($$3$i$i3624 + 22492 | 0, 2168448, 2040) | 0;
 _memcpy($$3$i$i3624 + 24532 | 0, 2170488, 2040) | 0;
 _memcpy($$3$i$i3624 + 26572 | 0, 2172528, 2040) | 0;
 _memcpy($$3$i$i3624 + 28612 | 0, 2174568, 2040) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $830);
 if ($$3$i$i3624 | 0) {
  $17372 = $$3$i$i3624 + 5 | 0;
  $17374 = (HEAP8[$17372 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17372 >> 0] = $17374;
  if (!($17374 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3624);
  HEAP32[$830 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 60;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 66;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 14332) label = 3059; else {
  $17381 = HEAP32[918918] | 0;
  if (($17381 | 0) == (HEAP32[918916] | 0)) label = 3059; else {
   $$lcssa$i$i3646 = 3675672;
   $$lcssa8$i$i3645 = $17381;
   label = 3060;
  }
 }
 do if ((label | 0) == 3059) {
  if ((HEAP32[918925] | 0) >>> 0 >= 14332) {
   $17388 = HEAP32[918924] | 0;
   if (($17388 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3646 = 3675696;
    $$lcssa8$i$i3645 = $17388;
    label = 3060;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 14332) {
   $17393 = HEAP32[918930] | 0;
   if (($17393 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3646 = 3675720;
    $$lcssa8$i$i3645 = $17393;
    label = 3060;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 14332) {
   $17398 = HEAP32[918936] | 0;
   if (($17398 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3646 = 3675744;
    $$lcssa8$i$i3645 = $17398;
    label = 3060;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 14332) {
   $17403 = HEAP32[918942] | 0;
   if (($17403 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3646 = 3675768;
    $$lcssa8$i$i3645 = $17403;
    label = 3060;
    break;
   }
  }
  $$3$i$i3647 = __Znwj(14332) | 0;
 } while (0);
 if ((label | 0) == 3060) {
  $17386 = $$lcssa8$i$i3645 + -4 | 0;
  HEAP32[$$lcssa$i$i3646 >> 2] = $17386;
  $$3$i$i3647 = HEAP32[$17386 >> 2] | 0;
 }
 $17407 = $$3$i$i3647 + 52 | 0;
 HEAP16[$$3$i$i3647 >> 1] = 1020;
 HEAP16[$$3$i$i3647 + 2 >> 1] = 7;
 HEAP8[$$3$i$i3647 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3647 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3647 + 8 >> 2] = 2040;
 HEAP32[$$3$i$i3647 + 12 >> 2] = 14280;
 HEAP32[$$3$i$i3647 + 16 >> 2] = $17407;
 HEAP32[$$3$i$i3647 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3647 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3647 + 48 >> 0] = 0;
 HEAP32[$831 >> 2] = $$3$i$i3647;
 _memcpy($17407 | 0, 2176608, 2040) | 0;
 _memcpy($$3$i$i3647 + 2092 | 0, 2178648, 2040) | 0;
 _memcpy($$3$i$i3647 + 4132 | 0, 2180688, 2040) | 0;
 _memcpy($$3$i$i3647 + 6172 | 0, 2182728, 2040) | 0;
 _memcpy($$3$i$i3647 + 8212 | 0, 2184768, 2040) | 0;
 _memcpy($$3$i$i3647 + 10252 | 0, 2186808, 2040) | 0;
 _memcpy($$3$i$i3647 + 12292 | 0, 2188848, 2040) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $831);
 if ($$3$i$i3647 | 0) {
  $17424 = $$3$i$i3647 + 5 | 0;
  $17426 = (HEAP8[$17424 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17424 >> 0] = $17426;
  if (!($17426 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3647);
  HEAP32[$831 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 43;
 HEAP16[$bitmapData + 2 >> 1] = 153;
 HEAP16[$bitmapData + 4 >> 1] = 90;
 HEAP16[$bitmapData + 6 >> 1] = 168;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1588) label = 3075; else {
  $17433 = HEAP32[918918] | 0;
  if (($17433 | 0) == (HEAP32[918916] | 0)) label = 3075; else {
   $$lcssa$i$i3658 = 3675672;
   $$lcssa8$i$i3657 = $17433;
   label = 3076;
  }
 }
 do if ((label | 0) == 3075) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1588) {
   $17440 = HEAP32[918924] | 0;
   if (($17440 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3658 = 3675696;
    $$lcssa8$i$i3657 = $17440;
    label = 3076;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1588) {
   $17445 = HEAP32[918930] | 0;
   if (($17445 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3658 = 3675720;
    $$lcssa8$i$i3657 = $17445;
    label = 3076;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1588) {
   $17450 = HEAP32[918936] | 0;
   if (($17450 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3658 = 3675744;
    $$lcssa8$i$i3657 = $17450;
    label = 3076;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1588) {
   $17455 = HEAP32[918942] | 0;
   if (($17455 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3658 = 3675768;
    $$lcssa8$i$i3657 = $17455;
    label = 3076;
    break;
   }
  }
  $$3$i$i3659 = __Znwj(1588) | 0;
 } while (0);
 if ((label | 0) == 3076) {
  $17438 = $$lcssa8$i$i3657 + -4 | 0;
  HEAP32[$$lcssa$i$i3658 >> 2] = $17438;
  $$3$i$i3659 = HEAP32[$17438 >> 2] | 0;
 }
 $17459 = $$3$i$i3659 + 52 | 0;
 HEAP16[$$3$i$i3659 >> 1] = 48;
 HEAP16[$$3$i$i3659 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3659 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3659 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3659 + 8 >> 2] = 96;
 HEAP32[$$3$i$i3659 + 12 >> 2] = 1536;
 HEAP32[$$3$i$i3659 + 16 >> 2] = $17459;
 HEAP32[$$3$i$i3659 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3659 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3659 + 48 >> 0] = 0;
 HEAP32[$832 >> 2] = $$3$i$i3659;
 dest = $17459;
 src = 2190888;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 148 | 0;
 src = 2190984;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 244 | 0;
 src = 2191080;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 340 | 0;
 src = 2191176;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 436 | 0;
 src = 2191272;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 532 | 0;
 src = 2191368;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 628 | 0;
 src = 2191464;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 724 | 0;
 src = 2191560;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 820 | 0;
 src = 2191656;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 916 | 0;
 src = 2191752;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 1012 | 0;
 src = 2191848;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 1108 | 0;
 src = 2191944;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 1204 | 0;
 src = 2192040;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 1300 | 0;
 src = 2192136;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 1396 | 0;
 src = 2192232;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3659 + 1492 | 0;
 src = 2192328;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $832);
 if ($$3$i$i3659 | 0) {
  $17485 = $$3$i$i3659 + 5 | 0;
  $17487 = (HEAP8[$17485 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17485 >> 0] = $17487;
  if (!($17487 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3659);
  HEAP32[$832 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 43;
 HEAP16[$bitmapData + 2 >> 1] = 137;
 HEAP16[$bitmapData + 4 >> 1] = 111;
 HEAP16[$bitmapData + 6 >> 1] = 152;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2356) label = 3091; else {
  $17494 = HEAP32[918918] | 0;
  if (($17494 | 0) == (HEAP32[918916] | 0)) label = 3091; else {
   $$lcssa$i$i3670 = 3675672;
   $$lcssa8$i$i3669 = $17494;
   label = 3092;
  }
 }
 do if ((label | 0) == 3091) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2356) {
   $17501 = HEAP32[918924] | 0;
   if (($17501 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3670 = 3675696;
    $$lcssa8$i$i3669 = $17501;
    label = 3092;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2356) {
   $17506 = HEAP32[918930] | 0;
   if (($17506 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3670 = 3675720;
    $$lcssa8$i$i3669 = $17506;
    label = 3092;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2356) {
   $17511 = HEAP32[918936] | 0;
   if (($17511 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3670 = 3675744;
    $$lcssa8$i$i3669 = $17511;
    label = 3092;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2356) {
   $17516 = HEAP32[918942] | 0;
   if (($17516 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3670 = 3675768;
    $$lcssa8$i$i3669 = $17516;
    label = 3092;
    break;
   }
  }
  $$3$i$i3671 = __Znwj(2356) | 0;
 } while (0);
 if ((label | 0) == 3092) {
  $17499 = $$lcssa8$i$i3669 + -4 | 0;
  HEAP32[$$lcssa$i$i3670 >> 2] = $17499;
  $$3$i$i3671 = HEAP32[$17499 >> 2] | 0;
 }
 $17520 = $$3$i$i3671 + 52 | 0;
 HEAP16[$$3$i$i3671 >> 1] = 72;
 HEAP16[$$3$i$i3671 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3671 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3671 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3671 + 8 >> 2] = 144;
 HEAP32[$$3$i$i3671 + 12 >> 2] = 2304;
 HEAP32[$$3$i$i3671 + 16 >> 2] = $17520;
 HEAP32[$$3$i$i3671 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3671 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3671 + 48 >> 0] = 0;
 HEAP32[$833 >> 2] = $$3$i$i3671;
 _memcpy($17520 | 0, 2192424, 144) | 0;
 _memcpy($$3$i$i3671 + 196 | 0, 2192568, 144) | 0;
 _memcpy($$3$i$i3671 + 340 | 0, 2192712, 144) | 0;
 _memcpy($$3$i$i3671 + 484 | 0, 2192856, 144) | 0;
 _memcpy($$3$i$i3671 + 628 | 0, 2193e3, 144) | 0;
 _memcpy($$3$i$i3671 + 772 | 0, 2193144, 144) | 0;
 _memcpy($$3$i$i3671 + 916 | 0, 2193288, 144) | 0;
 _memcpy($$3$i$i3671 + 1060 | 0, 2193432, 144) | 0;
 _memcpy($$3$i$i3671 + 1204 | 0, 2193576, 144) | 0;
 _memcpy($$3$i$i3671 + 1348 | 0, 2193720, 144) | 0;
 _memcpy($$3$i$i3671 + 1492 | 0, 2193864, 144) | 0;
 _memcpy($$3$i$i3671 + 1636 | 0, 2194008, 144) | 0;
 _memcpy($$3$i$i3671 + 1780 | 0, 2194152, 144) | 0;
 _memcpy($$3$i$i3671 + 1924 | 0, 2194296, 144) | 0;
 _memcpy($$3$i$i3671 + 2068 | 0, 2194440, 144) | 0;
 _memcpy($$3$i$i3671 + 2212 | 0, 2194584, 144) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $833);
 if ($$3$i$i3671 | 0) {
  $17546 = $$3$i$i3671 + 5 | 0;
  $17548 = (HEAP8[$17546 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17546 >> 0] = $17548;
  if (!($17548 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3671);
  HEAP32[$833 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 43;
 HEAP16[$bitmapData + 2 >> 1] = 121;
 HEAP16[$bitmapData + 4 >> 1] = 100;
 HEAP16[$bitmapData + 6 >> 1] = 136;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1972) label = 3107; else {
  $17555 = HEAP32[918918] | 0;
  if (($17555 | 0) == (HEAP32[918916] | 0)) label = 3107; else {
   $$lcssa$i$i3682 = 3675672;
   $$lcssa8$i$i3681 = $17555;
   label = 3108;
  }
 }
 do if ((label | 0) == 3107) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1972) {
   $17562 = HEAP32[918924] | 0;
   if (($17562 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3682 = 3675696;
    $$lcssa8$i$i3681 = $17562;
    label = 3108;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1972) {
   $17567 = HEAP32[918930] | 0;
   if (($17567 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3682 = 3675720;
    $$lcssa8$i$i3681 = $17567;
    label = 3108;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1972) {
   $17572 = HEAP32[918936] | 0;
   if (($17572 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3682 = 3675744;
    $$lcssa8$i$i3681 = $17572;
    label = 3108;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1972) {
   $17577 = HEAP32[918942] | 0;
   if (($17577 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3682 = 3675768;
    $$lcssa8$i$i3681 = $17577;
    label = 3108;
    break;
   }
  }
  $$3$i$i3683 = __Znwj(1972) | 0;
 } while (0);
 if ((label | 0) == 3108) {
  $17560 = $$lcssa8$i$i3681 + -4 | 0;
  HEAP32[$$lcssa$i$i3682 >> 2] = $17560;
  $$3$i$i3683 = HEAP32[$17560 >> 2] | 0;
 }
 $17581 = $$3$i$i3683 + 52 | 0;
 HEAP16[$$3$i$i3683 >> 1] = 60;
 HEAP16[$$3$i$i3683 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3683 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3683 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3683 + 8 >> 2] = 120;
 HEAP32[$$3$i$i3683 + 12 >> 2] = 1920;
 HEAP32[$$3$i$i3683 + 16 >> 2] = $17581;
 HEAP32[$$3$i$i3683 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3683 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3683 + 48 >> 0] = 0;
 HEAP32[$834 >> 2] = $$3$i$i3683;
 dest = $17581;
 src = 2194728;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 172 | 0;
 src = 2194848;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 292 | 0;
 src = 2194968;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 412 | 0;
 src = 2195088;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 532 | 0;
 src = 2195208;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 652 | 0;
 src = 2195328;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 772 | 0;
 src = 2195448;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 892 | 0;
 src = 2195568;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 1012 | 0;
 src = 2195688;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 1132 | 0;
 src = 2195808;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 1252 | 0;
 src = 2195928;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 1372 | 0;
 src = 2196048;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 1492 | 0;
 src = 2196168;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 1612 | 0;
 src = 2196288;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 1732 | 0;
 src = 2196408;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3683 + 1852 | 0;
 src = 2196528;
 stop = dest + 120 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $834);
 if ($$3$i$i3683 | 0) {
  $17607 = $$3$i$i3683 + 5 | 0;
  $17609 = (HEAP8[$17607 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17607 >> 0] = $17609;
  if (!($17609 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3683);
  HEAP32[$834 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 43;
 HEAP16[$bitmapData + 2 >> 1] = 105;
 HEAP16[$bitmapData + 4 >> 1] = 118;
 HEAP16[$bitmapData + 6 >> 1] = 120;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2484) label = 3123; else {
  $17616 = HEAP32[918918] | 0;
  if (($17616 | 0) == (HEAP32[918916] | 0)) label = 3123; else {
   $$lcssa$i$i3694 = 3675672;
   $$lcssa8$i$i3693 = $17616;
   label = 3124;
  }
 }
 do if ((label | 0) == 3123) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2484) {
   $17623 = HEAP32[918924] | 0;
   if (($17623 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3694 = 3675696;
    $$lcssa8$i$i3693 = $17623;
    label = 3124;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2484) {
   $17628 = HEAP32[918930] | 0;
   if (($17628 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3694 = 3675720;
    $$lcssa8$i$i3693 = $17628;
    label = 3124;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2484) {
   $17633 = HEAP32[918936] | 0;
   if (($17633 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3694 = 3675744;
    $$lcssa8$i$i3693 = $17633;
    label = 3124;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2484) {
   $17638 = HEAP32[918942] | 0;
   if (($17638 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3694 = 3675768;
    $$lcssa8$i$i3693 = $17638;
    label = 3124;
    break;
   }
  }
  $$3$i$i3695 = __Znwj(2484) | 0;
 } while (0);
 if ((label | 0) == 3124) {
  $17621 = $$lcssa8$i$i3693 + -4 | 0;
  HEAP32[$$lcssa$i$i3694 >> 2] = $17621;
  $$3$i$i3695 = HEAP32[$17621 >> 2] | 0;
 }
 $17642 = $$3$i$i3695 + 52 | 0;
 HEAP16[$$3$i$i3695 >> 1] = 76;
 HEAP16[$$3$i$i3695 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3695 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3695 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3695 + 8 >> 2] = 152;
 HEAP32[$$3$i$i3695 + 12 >> 2] = 2432;
 HEAP32[$$3$i$i3695 + 16 >> 2] = $17642;
 HEAP32[$$3$i$i3695 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3695 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3695 + 48 >> 0] = 0;
 HEAP32[$835 >> 2] = $$3$i$i3695;
 _memcpy($17642 | 0, 2196648, 152) | 0;
 _memcpy($$3$i$i3695 + 204 | 0, 2196800, 152) | 0;
 _memcpy($$3$i$i3695 + 356 | 0, 2196952, 152) | 0;
 _memcpy($$3$i$i3695 + 508 | 0, 2197104, 152) | 0;
 _memcpy($$3$i$i3695 + 660 | 0, 2197256, 152) | 0;
 _memcpy($$3$i$i3695 + 812 | 0, 2197408, 152) | 0;
 _memcpy($$3$i$i3695 + 964 | 0, 2197560, 152) | 0;
 _memcpy($$3$i$i3695 + 1116 | 0, 2197712, 152) | 0;
 _memcpy($$3$i$i3695 + 1268 | 0, 2197864, 152) | 0;
 _memcpy($$3$i$i3695 + 1420 | 0, 2198016, 152) | 0;
 _memcpy($$3$i$i3695 + 1572 | 0, 2198168, 152) | 0;
 _memcpy($$3$i$i3695 + 1724 | 0, 2198320, 152) | 0;
 _memcpy($$3$i$i3695 + 1876 | 0, 2198472, 152) | 0;
 _memcpy($$3$i$i3695 + 2028 | 0, 2198624, 152) | 0;
 _memcpy($$3$i$i3695 + 2180 | 0, 2198776, 152) | 0;
 _memcpy($$3$i$i3695 + 2332 | 0, 2198928, 152) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $835);
 if ($$3$i$i3695 | 0) {
  $17668 = $$3$i$i3695 + 5 | 0;
  $17670 = (HEAP8[$17668 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17668 >> 0] = $17670;
  if (!($17670 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3695);
  HEAP32[$835 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 43;
 HEAP16[$bitmapData + 2 >> 1] = 89;
 HEAP16[$bitmapData + 4 >> 1] = 72;
 HEAP16[$bitmapData + 6 >> 1] = 104;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1076) label = 3139; else {
  $17677 = HEAP32[918918] | 0;
  if (($17677 | 0) == (HEAP32[918916] | 0)) label = 3139; else {
   $$lcssa$i$i3706 = 3675672;
   $$lcssa8$i$i3705 = $17677;
   label = 3140;
  }
 }
 do if ((label | 0) == 3139) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1076) {
   $17684 = HEAP32[918924] | 0;
   if (($17684 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3706 = 3675696;
    $$lcssa8$i$i3705 = $17684;
    label = 3140;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1076) {
   $17689 = HEAP32[918930] | 0;
   if (($17689 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3706 = 3675720;
    $$lcssa8$i$i3705 = $17689;
    label = 3140;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1076) {
   $17694 = HEAP32[918936] | 0;
   if (($17694 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3706 = 3675744;
    $$lcssa8$i$i3705 = $17694;
    label = 3140;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1076) {
   $17699 = HEAP32[918942] | 0;
   if (($17699 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3706 = 3675768;
    $$lcssa8$i$i3705 = $17699;
    label = 3140;
    break;
   }
  }
  $$3$i$i3707 = __Znwj(1076) | 0;
 } while (0);
 if ((label | 0) == 3140) {
  $17682 = $$lcssa8$i$i3705 + -4 | 0;
  HEAP32[$$lcssa$i$i3706 >> 2] = $17682;
  $$3$i$i3707 = HEAP32[$17682 >> 2] | 0;
 }
 $17703 = $$3$i$i3707 + 52 | 0;
 HEAP16[$$3$i$i3707 >> 1] = 32;
 HEAP16[$$3$i$i3707 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3707 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3707 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3707 + 8 >> 2] = 64;
 HEAP32[$$3$i$i3707 + 12 >> 2] = 1024;
 HEAP32[$$3$i$i3707 + 16 >> 2] = $17703;
 HEAP32[$$3$i$i3707 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3707 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3707 + 48 >> 0] = 0;
 HEAP32[$836 >> 2] = $$3$i$i3707;
 dest = $17703;
 src = 2199080;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 116 | 0;
 src = 2199144;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 180 | 0;
 src = 2199208;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 244 | 0;
 src = 2199272;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 308 | 0;
 src = 2199336;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 372 | 0;
 src = 2199400;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 436 | 0;
 src = 2199464;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 500 | 0;
 src = 2199528;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 564 | 0;
 src = 2199592;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 628 | 0;
 src = 2199656;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 692 | 0;
 src = 2199720;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 756 | 0;
 src = 2199784;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 820 | 0;
 src = 2199848;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 884 | 0;
 src = 2199912;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 948 | 0;
 src = 2199976;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3707 + 1012 | 0;
 src = 2200040;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $836);
 if ($$3$i$i3707 | 0) {
  $17729 = $$3$i$i3707 + 5 | 0;
  $17731 = (HEAP8[$17729 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17729 >> 0] = $17731;
  if (!($17731 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3707);
  HEAP32[$836 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 24;
 HEAP16[$bitmapData + 2 >> 1] = 89;
 HEAP16[$bitmapData + 4 >> 1] = 39;
 HEAP16[$bitmapData + 6 >> 1] = 133;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1492) label = 3155; else {
  $17738 = HEAP32[918918] | 0;
  if (($17738 | 0) == (HEAP32[918916] | 0)) label = 3155; else {
   $$lcssa$i$i3718 = 3675672;
   $$lcssa8$i$i3717 = $17738;
   label = 3156;
  }
 }
 do if ((label | 0) == 3155) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1492) {
   $17745 = HEAP32[918924] | 0;
   if (($17745 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3718 = 3675696;
    $$lcssa8$i$i3717 = $17745;
    label = 3156;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1492) {
   $17750 = HEAP32[918930] | 0;
   if (($17750 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3718 = 3675720;
    $$lcssa8$i$i3717 = $17750;
    label = 3156;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1492) {
   $17755 = HEAP32[918936] | 0;
   if (($17755 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3718 = 3675744;
    $$lcssa8$i$i3717 = $17755;
    label = 3156;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1492) {
   $17760 = HEAP32[918942] | 0;
   if (($17760 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3718 = 3675768;
    $$lcssa8$i$i3717 = $17760;
    label = 3156;
    break;
   }
  }
  $$3$i$i3719 = __Znwj(1492) | 0;
 } while (0);
 if ((label | 0) == 3156) {
  $17743 = $$lcssa8$i$i3717 + -4 | 0;
  HEAP32[$$lcssa$i$i3718 >> 2] = $17743;
  $$3$i$i3719 = HEAP32[$17743 >> 2] | 0;
 }
 $17764 = $$3$i$i3719 + 52 | 0;
 HEAP16[$$3$i$i3719 >> 1] = 16;
 HEAP16[$$3$i$i3719 + 2 >> 1] = 45;
 HEAP8[$$3$i$i3719 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3719 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3719 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3719 + 12 >> 2] = 1440;
 HEAP32[$$3$i$i3719 + 16 >> 2] = $17764;
 HEAP32[$$3$i$i3719 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3719 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3719 + 48 >> 0] = 0;
 HEAP32[$837 >> 2] = $$3$i$i3719;
 dest = $17764;
 src = 2200104;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 84 | 0;
 src = 2200136;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 116 | 0;
 src = 2200168;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 148 | 0;
 src = 2200200;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 180 | 0;
 src = 2200232;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 212 | 0;
 src = 2200264;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 244 | 0;
 src = 2200296;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 276 | 0;
 src = 2200328;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 308 | 0;
 src = 2200360;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 340 | 0;
 src = 2200392;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 372 | 0;
 src = 2200424;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 404 | 0;
 src = 2200456;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 436 | 0;
 src = 2200488;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 468 | 0;
 src = 2200520;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 500 | 0;
 src = 2200552;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 532 | 0;
 src = 2200584;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 564 | 0;
 src = 2200616;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 596 | 0;
 src = 2200648;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 628 | 0;
 src = 2200680;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 660 | 0;
 src = 2200712;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 692 | 0;
 src = 2200744;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 724 | 0;
 src = 2200776;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 756 | 0;
 src = 2200808;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 788 | 0;
 src = 2200840;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 820 | 0;
 src = 2200872;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 852 | 0;
 src = 2200904;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 884 | 0;
 src = 2200936;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 916 | 0;
 src = 2200968;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 948 | 0;
 src = 2201e3;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 980 | 0;
 src = 2201032;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1012 | 0;
 src = 2201064;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1044 | 0;
 src = 2201096;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1076 | 0;
 src = 2201128;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1108 | 0;
 src = 2201160;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1140 | 0;
 src = 2201192;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1172 | 0;
 src = 2201224;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1204 | 0;
 src = 2201256;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1236 | 0;
 src = 2201288;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1268 | 0;
 src = 2201320;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1300 | 0;
 src = 2201352;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1332 | 0;
 src = 2201384;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1364 | 0;
 src = 2201416;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1396 | 0;
 src = 2201448;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1428 | 0;
 src = 2201480;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3719 + 1460 | 0;
 src = 2201512;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $837);
 if ($$3$i$i3719 | 0) {
  $17819 = $$3$i$i3719 + 5 | 0;
  $17821 = (HEAP8[$17819 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17819 >> 0] = $17821;
  if (!($17821 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3719);
  HEAP32[$837 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 24;
 HEAP16[$bitmapData + 2 >> 1] = 134;
 HEAP16[$bitmapData + 4 >> 1] = 39;
 HEAP16[$bitmapData + 6 >> 1] = 140;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 276) label = 3171; else {
  $17828 = HEAP32[918918] | 0;
  if (($17828 | 0) == (HEAP32[918916] | 0)) label = 3171; else {
   $$lcssa$i$i3730 = 3675672;
   $$lcssa8$i$i3729 = $17828;
   label = 3172;
  }
 }
 do if ((label | 0) == 3171) {
  if ((HEAP32[918925] | 0) >>> 0 >= 276) {
   $17835 = HEAP32[918924] | 0;
   if (($17835 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3730 = 3675696;
    $$lcssa8$i$i3729 = $17835;
    label = 3172;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 276) {
   $17840 = HEAP32[918930] | 0;
   if (($17840 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3730 = 3675720;
    $$lcssa8$i$i3729 = $17840;
    label = 3172;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 276) {
   $17845 = HEAP32[918936] | 0;
   if (($17845 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3730 = 3675744;
    $$lcssa8$i$i3729 = $17845;
    label = 3172;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 276) {
   $17850 = HEAP32[918942] | 0;
   if (($17850 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3730 = 3675768;
    $$lcssa8$i$i3729 = $17850;
    label = 3172;
    break;
   }
  }
  $$3$i$i3731 = __Znwj(276) | 0;
 } while (0);
 if ((label | 0) == 3172) {
  $17833 = $$lcssa8$i$i3729 + -4 | 0;
  HEAP32[$$lcssa$i$i3730 >> 2] = $17833;
  $$3$i$i3731 = HEAP32[$17833 >> 2] | 0;
 }
 $17854 = $$3$i$i3731 + 52 | 0;
 HEAP16[$$3$i$i3731 >> 1] = 16;
 HEAP16[$$3$i$i3731 + 2 >> 1] = 7;
 HEAP8[$$3$i$i3731 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3731 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3731 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3731 + 12 >> 2] = 224;
 HEAP32[$$3$i$i3731 + 16 >> 2] = $17854;
 HEAP32[$$3$i$i3731 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3731 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3731 + 48 >> 0] = 0;
 HEAP32[$838 >> 2] = $$3$i$i3731;
 dest = $17854;
 src = 2201544;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3731 + 84 | 0;
 src = 2201576;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3731 + 116 | 0;
 src = 2201608;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3731 + 148 | 0;
 src = 2201640;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3731 + 180 | 0;
 src = 2201672;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3731 + 212 | 0;
 src = 2201704;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3731 + 244 | 0;
 src = 2201736;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $838);
 if ($$3$i$i3731 | 0) {
  $17871 = $$3$i$i3731 + 5 | 0;
  $17873 = (HEAP8[$17871 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17871 >> 0] = $17873;
  if (!($17873 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3731);
  HEAP32[$838 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 24;
 HEAP16[$bitmapData + 2 >> 1] = 141;
 HEAP16[$bitmapData + 4 >> 1] = 39;
 HEAP16[$bitmapData + 6 >> 1] = 168;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 948) label = 3187; else {
  $17880 = HEAP32[918918] | 0;
  if (($17880 | 0) == (HEAP32[918916] | 0)) label = 3187; else {
   $$lcssa$i$i3742 = 3675672;
   $$lcssa8$i$i3741 = $17880;
   label = 3188;
  }
 }
 do if ((label | 0) == 3187) {
  if ((HEAP32[918925] | 0) >>> 0 >= 948) {
   $17887 = HEAP32[918924] | 0;
   if (($17887 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3742 = 3675696;
    $$lcssa8$i$i3741 = $17887;
    label = 3188;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 948) {
   $17892 = HEAP32[918930] | 0;
   if (($17892 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3742 = 3675720;
    $$lcssa8$i$i3741 = $17892;
    label = 3188;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 948) {
   $17897 = HEAP32[918936] | 0;
   if (($17897 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3742 = 3675744;
    $$lcssa8$i$i3741 = $17897;
    label = 3188;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 948) {
   $17902 = HEAP32[918942] | 0;
   if (($17902 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3742 = 3675768;
    $$lcssa8$i$i3741 = $17902;
    label = 3188;
    break;
   }
  }
  $$3$i$i3743 = __Znwj(948) | 0;
 } while (0);
 if ((label | 0) == 3188) {
  $17885 = $$lcssa8$i$i3741 + -4 | 0;
  HEAP32[$$lcssa$i$i3742 >> 2] = $17885;
  $$3$i$i3743 = HEAP32[$17885 >> 2] | 0;
 }
 $17906 = $$3$i$i3743 + 52 | 0;
 HEAP16[$$3$i$i3743 >> 1] = 16;
 HEAP16[$$3$i$i3743 + 2 >> 1] = 28;
 HEAP8[$$3$i$i3743 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3743 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3743 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3743 + 12 >> 2] = 896;
 HEAP32[$$3$i$i3743 + 16 >> 2] = $17906;
 HEAP32[$$3$i$i3743 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3743 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3743 + 48 >> 0] = 0;
 HEAP32[$839 >> 2] = $$3$i$i3743;
 dest = $17906;
 src = 2201768;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 84 | 0;
 src = 2201800;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 116 | 0;
 src = 2201832;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 148 | 0;
 src = 2201864;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 180 | 0;
 src = 2201896;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 212 | 0;
 src = 2201928;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 244 | 0;
 src = 2201960;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 276 | 0;
 src = 2201992;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 308 | 0;
 src = 2202024;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 340 | 0;
 src = 2202056;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 372 | 0;
 src = 2202088;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 404 | 0;
 src = 2202120;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 436 | 0;
 src = 2202152;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 468 | 0;
 src = 2202184;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 500 | 0;
 src = 2202216;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 532 | 0;
 src = 2202248;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 564 | 0;
 src = 2202280;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 596 | 0;
 src = 2202312;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 628 | 0;
 src = 2202344;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 660 | 0;
 src = 2202376;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 692 | 0;
 src = 2202408;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 724 | 0;
 src = 2202440;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 756 | 0;
 src = 2202472;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 788 | 0;
 src = 2202504;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 820 | 0;
 src = 2202536;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 852 | 0;
 src = 2202568;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 884 | 0;
 src = 2202600;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3743 + 916 | 0;
 src = 2202632;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $839);
 if ($$3$i$i3743 | 0) {
  $17944 = $$3$i$i3743 + 5 | 0;
  $17946 = (HEAP8[$17944 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$17944 >> 0] = $17946;
  if (!($17946 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3743);
  HEAP32[$839 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 24;
 HEAP16[$bitmapData + 2 >> 1] = 73;
 HEAP16[$bitmapData + 4 >> 1] = 193;
 HEAP16[$bitmapData + 6 >> 1] = 88;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 5556) label = 3203; else {
  $17953 = HEAP32[918918] | 0;
  if (($17953 | 0) == (HEAP32[918916] | 0)) label = 3203; else {
   $$lcssa$i$i3754 = 3675672;
   $$lcssa8$i$i3753 = $17953;
   label = 3204;
  }
 }
 do if ((label | 0) == 3203) {
  if ((HEAP32[918925] | 0) >>> 0 >= 5556) {
   $17960 = HEAP32[918924] | 0;
   if (($17960 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3754 = 3675696;
    $$lcssa8$i$i3753 = $17960;
    label = 3204;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 5556) {
   $17965 = HEAP32[918930] | 0;
   if (($17965 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3754 = 3675720;
    $$lcssa8$i$i3753 = $17965;
    label = 3204;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 5556) {
   $17970 = HEAP32[918936] | 0;
   if (($17970 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3754 = 3675744;
    $$lcssa8$i$i3753 = $17970;
    label = 3204;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 5556) {
   $17975 = HEAP32[918942] | 0;
   if (($17975 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3754 = 3675768;
    $$lcssa8$i$i3753 = $17975;
    label = 3204;
    break;
   }
  }
  $$3$i$i3755 = __Znwj(5556) | 0;
 } while (0);
 if ((label | 0) == 3204) {
  $17958 = $$lcssa8$i$i3753 + -4 | 0;
  HEAP32[$$lcssa$i$i3754 >> 2] = $17958;
  $$3$i$i3755 = HEAP32[$17958 >> 2] | 0;
 }
 $17979 = $$3$i$i3755 + 52 | 0;
 HEAP16[$$3$i$i3755 >> 1] = 172;
 HEAP16[$$3$i$i3755 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3755 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3755 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3755 + 8 >> 2] = 344;
 HEAP32[$$3$i$i3755 + 12 >> 2] = 5504;
 HEAP32[$$3$i$i3755 + 16 >> 2] = $17979;
 HEAP32[$$3$i$i3755 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3755 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3755 + 48 >> 0] = 0;
 HEAP32[$840 >> 2] = $$3$i$i3755;
 _memcpy($17979 | 0, 2202664, 344) | 0;
 _memcpy($$3$i$i3755 + 396 | 0, 2203008, 344) | 0;
 _memcpy($$3$i$i3755 + 740 | 0, 2203352, 344) | 0;
 _memcpy($$3$i$i3755 + 1084 | 0, 2203696, 344) | 0;
 _memcpy($$3$i$i3755 + 1428 | 0, 2204040, 344) | 0;
 _memcpy($$3$i$i3755 + 1772 | 0, 2204384, 344) | 0;
 _memcpy($$3$i$i3755 + 2116 | 0, 2204728, 344) | 0;
 _memcpy($$3$i$i3755 + 2460 | 0, 2205072, 344) | 0;
 _memcpy($$3$i$i3755 + 2804 | 0, 2205416, 344) | 0;
 _memcpy($$3$i$i3755 + 3148 | 0, 2205760, 344) | 0;
 _memcpy($$3$i$i3755 + 3492 | 0, 2206104, 344) | 0;
 _memcpy($$3$i$i3755 + 3836 | 0, 2206448, 344) | 0;
 _memcpy($$3$i$i3755 + 4180 | 0, 2206792, 344) | 0;
 _memcpy($$3$i$i3755 + 4524 | 0, 2207136, 344) | 0;
 _memcpy($$3$i$i3755 + 4868 | 0, 2207480, 344) | 0;
 _memcpy($$3$i$i3755 + 5212 | 0, 2207824, 344) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $840);
 if ($$3$i$i3755 | 0) {
  $18005 = $$3$i$i3755 + 5 | 0;
  $18007 = (HEAP8[$18005 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18005 >> 0] = $18007;
  if (!($18007 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3755);
  HEAP32[$840 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 5;
 HEAP16[$bitmapData + 2 >> 1] = 73;
 HEAP16[$bitmapData + 4 >> 1] = 20;
 HEAP16[$bitmapData + 6 >> 1] = 88;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 564) label = 3219; else {
  $18014 = HEAP32[918918] | 0;
  if (($18014 | 0) == (HEAP32[918916] | 0)) label = 3219; else {
   $$lcssa$i$i3766 = 3675672;
   $$lcssa8$i$i3765 = $18014;
   label = 3220;
  }
 }
 do if ((label | 0) == 3219) {
  if ((HEAP32[918925] | 0) >>> 0 >= 564) {
   $18021 = HEAP32[918924] | 0;
   if (($18021 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3766 = 3675696;
    $$lcssa8$i$i3765 = $18021;
    label = 3220;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 564) {
   $18026 = HEAP32[918930] | 0;
   if (($18026 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3766 = 3675720;
    $$lcssa8$i$i3765 = $18026;
    label = 3220;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 564) {
   $18031 = HEAP32[918936] | 0;
   if (($18031 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3766 = 3675744;
    $$lcssa8$i$i3765 = $18031;
    label = 3220;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 564) {
   $18036 = HEAP32[918942] | 0;
   if (($18036 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3766 = 3675768;
    $$lcssa8$i$i3765 = $18036;
    label = 3220;
    break;
   }
  }
  $$3$i$i3767 = __Znwj(564) | 0;
 } while (0);
 if ((label | 0) == 3220) {
  $18019 = $$lcssa8$i$i3765 + -4 | 0;
  HEAP32[$$lcssa$i$i3766 >> 2] = $18019;
  $$3$i$i3767 = HEAP32[$18019 >> 2] | 0;
 }
 $18040 = $$3$i$i3767 + 52 | 0;
 HEAP16[$$3$i$i3767 >> 1] = 16;
 HEAP16[$$3$i$i3767 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3767 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3767 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3767 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3767 + 12 >> 2] = 512;
 HEAP32[$$3$i$i3767 + 16 >> 2] = $18040;
 HEAP32[$$3$i$i3767 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3767 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3767 + 48 >> 0] = 0;
 HEAP32[$841 >> 2] = $$3$i$i3767;
 dest = $18040;
 src = 2208168;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 84 | 0;
 src = 2208200;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 116 | 0;
 src = 2208232;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 148 | 0;
 src = 2208264;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 180 | 0;
 src = 2208296;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 212 | 0;
 src = 2208328;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 244 | 0;
 src = 2208360;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 276 | 0;
 src = 2208392;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 308 | 0;
 src = 2208424;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 340 | 0;
 src = 2208456;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 372 | 0;
 src = 2208488;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 404 | 0;
 src = 2208520;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 436 | 0;
 src = 2208552;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 468 | 0;
 src = 2208584;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 500 | 0;
 src = 2208616;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3767 + 532 | 0;
 src = 2208648;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $841);
 if ($$3$i$i3767 | 0) {
  $18066 = $$3$i$i3767 + 5 | 0;
  $18068 = (HEAP8[$18066 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18066 >> 0] = $18068;
  if (!($18068 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3767);
  HEAP32[$841 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 206;
 HEAP16[$bitmapData + 2 >> 1] = 76;
 HEAP16[$bitmapData + 4 >> 1] = 465;
 HEAP16[$bitmapData + 6 >> 1] = 88;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6812) label = 3235; else {
  $18075 = HEAP32[918918] | 0;
  if (($18075 | 0) == (HEAP32[918916] | 0)) label = 3235; else {
   $$lcssa$i$i3778 = 3675672;
   $$lcssa8$i$i3777 = $18075;
   label = 3236;
  }
 }
 do if ((label | 0) == 3235) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6812) {
   $18082 = HEAP32[918924] | 0;
   if (($18082 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3778 = 3675696;
    $$lcssa8$i$i3777 = $18082;
    label = 3236;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6812) {
   $18087 = HEAP32[918930] | 0;
   if (($18087 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3778 = 3675720;
    $$lcssa8$i$i3777 = $18087;
    label = 3236;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6812) {
   $18092 = HEAP32[918936] | 0;
   if (($18092 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3778 = 3675744;
    $$lcssa8$i$i3777 = $18092;
    label = 3236;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6812) {
   $18097 = HEAP32[918942] | 0;
   if (($18097 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3778 = 3675768;
    $$lcssa8$i$i3777 = $18097;
    label = 3236;
    break;
   }
  }
  $$3$i$i3779 = __Znwj(6812) | 0;
 } while (0);
 if ((label | 0) == 3236) {
  $18080 = $$lcssa8$i$i3777 + -4 | 0;
  HEAP32[$$lcssa$i$i3778 >> 2] = $18080;
  $$3$i$i3779 = HEAP32[$18080 >> 2] | 0;
 }
 $18101 = $$3$i$i3779 + 52 | 0;
 HEAP16[$$3$i$i3779 >> 1] = 260;
 HEAP16[$$3$i$i3779 + 2 >> 1] = 13;
 HEAP8[$$3$i$i3779 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3779 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3779 + 8 >> 2] = 520;
 HEAP32[$$3$i$i3779 + 12 >> 2] = 6760;
 HEAP32[$$3$i$i3779 + 16 >> 2] = $18101;
 HEAP32[$$3$i$i3779 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3779 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3779 + 48 >> 0] = 0;
 HEAP32[$842 >> 2] = $$3$i$i3779;
 _memcpy($18101 | 0, 2208680, 520) | 0;
 _memcpy($$3$i$i3779 + 572 | 0, 2209200, 520) | 0;
 _memcpy($$3$i$i3779 + 1092 | 0, 2209720, 520) | 0;
 _memcpy($$3$i$i3779 + 1612 | 0, 2210240, 520) | 0;
 _memcpy($$3$i$i3779 + 2132 | 0, 2210760, 520) | 0;
 _memcpy($$3$i$i3779 + 2652 | 0, 2211280, 520) | 0;
 _memcpy($$3$i$i3779 + 3172 | 0, 2211800, 520) | 0;
 _memcpy($$3$i$i3779 + 3692 | 0, 2212320, 520) | 0;
 _memcpy($$3$i$i3779 + 4212 | 0, 2212840, 520) | 0;
 _memcpy($$3$i$i3779 + 4732 | 0, 2213360, 520) | 0;
 _memcpy($$3$i$i3779 + 5252 | 0, 2213880, 520) | 0;
 _memcpy($$3$i$i3779 + 5772 | 0, 2214400, 520) | 0;
 _memcpy($$3$i$i3779 + 6292 | 0, 2214920, 520) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $842);
 if ($$3$i$i3779 | 0) {
  $18124 = $$3$i$i3779 + 5 | 0;
  $18126 = (HEAP8[$18124 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18124 >> 0] = $18126;
  if (!($18126 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3779);
  HEAP32[$842 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 178;
 HEAP16[$bitmapData + 2 >> 1] = 678;
 HEAP16[$bitmapData + 4 >> 1] = 193;
 HEAP16[$bitmapData + 6 >> 1] = 701;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 820) label = 3251; else {
  $18133 = HEAP32[918918] | 0;
  if (($18133 | 0) == (HEAP32[918916] | 0)) label = 3251; else {
   $$lcssa$i$i3790 = 3675672;
   $$lcssa8$i$i3789 = $18133;
   label = 3252;
  }
 }
 do if ((label | 0) == 3251) {
  if ((HEAP32[918925] | 0) >>> 0 >= 820) {
   $18140 = HEAP32[918924] | 0;
   if (($18140 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3790 = 3675696;
    $$lcssa8$i$i3789 = $18140;
    label = 3252;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 820) {
   $18145 = HEAP32[918930] | 0;
   if (($18145 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3790 = 3675720;
    $$lcssa8$i$i3789 = $18145;
    label = 3252;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 820) {
   $18150 = HEAP32[918936] | 0;
   if (($18150 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3790 = 3675744;
    $$lcssa8$i$i3789 = $18150;
    label = 3252;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 820) {
   $18155 = HEAP32[918942] | 0;
   if (($18155 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3790 = 3675768;
    $$lcssa8$i$i3789 = $18155;
    label = 3252;
    break;
   }
  }
  $$3$i$i3791 = __Znwj(820) | 0;
 } while (0);
 if ((label | 0) == 3252) {
  $18138 = $$lcssa8$i$i3789 + -4 | 0;
  HEAP32[$$lcssa$i$i3790 >> 2] = $18138;
  $$3$i$i3791 = HEAP32[$18138 >> 2] | 0;
 }
 $18159 = $$3$i$i3791 + 52 | 0;
 HEAP16[$$3$i$i3791 >> 1] = 16;
 HEAP16[$$3$i$i3791 + 2 >> 1] = 24;
 HEAP8[$$3$i$i3791 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3791 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3791 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3791 + 12 >> 2] = 768;
 HEAP32[$$3$i$i3791 + 16 >> 2] = $18159;
 HEAP32[$$3$i$i3791 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3791 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3791 + 48 >> 0] = 0;
 HEAP32[$843 >> 2] = $$3$i$i3791;
 dest = $18159;
 src = 2215440;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 84 | 0;
 src = 2215472;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 116 | 0;
 src = 2215504;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 148 | 0;
 src = 2215536;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 180 | 0;
 src = 2215568;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 212 | 0;
 src = 2215600;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 244 | 0;
 src = 2215632;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 276 | 0;
 src = 2215664;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 308 | 0;
 src = 2215696;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 340 | 0;
 src = 2215728;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 372 | 0;
 src = 2215760;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 404 | 0;
 src = 2215792;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 436 | 0;
 src = 2215824;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 468 | 0;
 src = 2215856;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 500 | 0;
 src = 2215888;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 532 | 0;
 src = 2215920;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 564 | 0;
 src = 2215952;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 596 | 0;
 src = 2215984;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 628 | 0;
 src = 2216016;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 660 | 0;
 src = 2216048;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 692 | 0;
 src = 2216080;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 724 | 0;
 src = 2216112;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 756 | 0;
 src = 2216144;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3791 + 788 | 0;
 src = 2216176;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $843);
 if ($$3$i$i3791 | 0) {
  $18193 = $$3$i$i3791 + 5 | 0;
  $18195 = (HEAP8[$18193 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18193 >> 0] = $18195;
  if (!($18195 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3791);
  HEAP32[$843 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 678;
 HEAP16[$bitmapData + 4 >> 1] = 17;
 HEAP16[$bitmapData + 6 >> 1] = 701;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 820) label = 3267; else {
  $18202 = HEAP32[918918] | 0;
  if (($18202 | 0) == (HEAP32[918916] | 0)) label = 3267; else {
   $$lcssa$i$i3802 = 3675672;
   $$lcssa8$i$i3801 = $18202;
   label = 3268;
  }
 }
 do if ((label | 0) == 3267) {
  if ((HEAP32[918925] | 0) >>> 0 >= 820) {
   $18209 = HEAP32[918924] | 0;
   if (($18209 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3802 = 3675696;
    $$lcssa8$i$i3801 = $18209;
    label = 3268;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 820) {
   $18214 = HEAP32[918930] | 0;
   if (($18214 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3802 = 3675720;
    $$lcssa8$i$i3801 = $18214;
    label = 3268;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 820) {
   $18219 = HEAP32[918936] | 0;
   if (($18219 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3802 = 3675744;
    $$lcssa8$i$i3801 = $18219;
    label = 3268;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 820) {
   $18224 = HEAP32[918942] | 0;
   if (($18224 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3802 = 3675768;
    $$lcssa8$i$i3801 = $18224;
    label = 3268;
    break;
   }
  }
  $$3$i$i3803 = __Znwj(820) | 0;
 } while (0);
 if ((label | 0) == 3268) {
  $18207 = $$lcssa8$i$i3801 + -4 | 0;
  HEAP32[$$lcssa$i$i3802 >> 2] = $18207;
  $$3$i$i3803 = HEAP32[$18207 >> 2] | 0;
 }
 $18228 = $$3$i$i3803 + 52 | 0;
 HEAP16[$$3$i$i3803 >> 1] = 16;
 HEAP16[$$3$i$i3803 + 2 >> 1] = 24;
 HEAP8[$$3$i$i3803 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3803 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3803 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3803 + 12 >> 2] = 768;
 HEAP32[$$3$i$i3803 + 16 >> 2] = $18228;
 HEAP32[$$3$i$i3803 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3803 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3803 + 48 >> 0] = 0;
 HEAP32[$844 >> 2] = $$3$i$i3803;
 dest = $18228;
 src = 2216208;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 84 | 0;
 src = 2216240;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 116 | 0;
 src = 2216272;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 148 | 0;
 src = 2216304;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 180 | 0;
 src = 2216336;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 212 | 0;
 src = 2216368;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 244 | 0;
 src = 2216400;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 276 | 0;
 src = 2216432;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 308 | 0;
 src = 2216464;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 340 | 0;
 src = 2216496;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 372 | 0;
 src = 2216528;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 404 | 0;
 src = 2216560;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 436 | 0;
 src = 2216592;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 468 | 0;
 src = 2216624;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 500 | 0;
 src = 2216656;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 532 | 0;
 src = 2216688;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 564 | 0;
 src = 2216720;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 596 | 0;
 src = 2216752;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 628 | 0;
 src = 2216784;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 660 | 0;
 src = 2216816;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 692 | 0;
 src = 2216848;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 724 | 0;
 src = 2216880;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 756 | 0;
 src = 2216912;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3803 + 788 | 0;
 src = 2216944;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $844);
 if ($$3$i$i3803 | 0) {
  $18262 = $$3$i$i3803 + 5 | 0;
  $18264 = (HEAP8[$18262 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18262 >> 0] = $18264;
  if (!($18264 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3803);
  HEAP32[$844 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 20;
 HEAP16[$bitmapData + 2 >> 1] = 2;
 HEAP16[$bitmapData + 4 >> 1] = 155;
 HEAP16[$bitmapData + 6 >> 1] = 14;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 3588) label = 3283; else {
  $18271 = HEAP32[918918] | 0;
  if (($18271 | 0) == (HEAP32[918916] | 0)) label = 3283; else {
   $$lcssa$i$i3814 = 3675672;
   $$lcssa8$i$i3813 = $18271;
   label = 3284;
  }
 }
 do if ((label | 0) == 3283) {
  if ((HEAP32[918925] | 0) >>> 0 >= 3588) {
   $18278 = HEAP32[918924] | 0;
   if (($18278 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3814 = 3675696;
    $$lcssa8$i$i3813 = $18278;
    label = 3284;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 3588) {
   $18283 = HEAP32[918930] | 0;
   if (($18283 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3814 = 3675720;
    $$lcssa8$i$i3813 = $18283;
    label = 3284;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 3588) {
   $18288 = HEAP32[918936] | 0;
   if (($18288 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3814 = 3675744;
    $$lcssa8$i$i3813 = $18288;
    label = 3284;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 3588) {
   $18293 = HEAP32[918942] | 0;
   if (($18293 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3814 = 3675768;
    $$lcssa8$i$i3813 = $18293;
    label = 3284;
    break;
   }
  }
  $$3$i$i3815 = __Znwj(3588) | 0;
 } while (0);
 if ((label | 0) == 3284) {
  $18276 = $$lcssa8$i$i3813 + -4 | 0;
  HEAP32[$$lcssa$i$i3814 >> 2] = $18276;
  $$3$i$i3815 = HEAP32[$18276 >> 2] | 0;
 }
 $18297 = $$3$i$i3815 + 52 | 0;
 HEAP16[$$3$i$i3815 >> 1] = 136;
 HEAP16[$$3$i$i3815 + 2 >> 1] = 13;
 HEAP8[$$3$i$i3815 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3815 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3815 + 8 >> 2] = 272;
 HEAP32[$$3$i$i3815 + 12 >> 2] = 3536;
 HEAP32[$$3$i$i3815 + 16 >> 2] = $18297;
 HEAP32[$$3$i$i3815 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3815 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3815 + 48 >> 0] = 0;
 HEAP32[$845 >> 2] = $$3$i$i3815;
 _memcpy($18297 | 0, 2216976, 272) | 0;
 _memcpy($$3$i$i3815 + 324 | 0, 2217248, 272) | 0;
 _memcpy($$3$i$i3815 + 596 | 0, 2217520, 272) | 0;
 _memcpy($$3$i$i3815 + 868 | 0, 2217792, 272) | 0;
 _memcpy($$3$i$i3815 + 1140 | 0, 2218064, 272) | 0;
 _memcpy($$3$i$i3815 + 1412 | 0, 2218336, 272) | 0;
 _memcpy($$3$i$i3815 + 1684 | 0, 2218608, 272) | 0;
 _memcpy($$3$i$i3815 + 1956 | 0, 2218880, 272) | 0;
 _memcpy($$3$i$i3815 + 2228 | 0, 2219152, 272) | 0;
 _memcpy($$3$i$i3815 + 2500 | 0, 2219424, 272) | 0;
 _memcpy($$3$i$i3815 + 2772 | 0, 2219696, 272) | 0;
 _memcpy($$3$i$i3815 + 3044 | 0, 2219968, 272) | 0;
 _memcpy($$3$i$i3815 + 3316 | 0, 2220240, 272) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $845);
 if ($$3$i$i3815 | 0) {
  $18320 = $$3$i$i3815 + 5 | 0;
  $18322 = (HEAP8[$18320 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18320 >> 0] = $18322;
  if (!($18322 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3815);
  HEAP32[$845 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 1;
 HEAP16[$bitmapData + 4 >> 1] = 17;
 HEAP16[$bitmapData + 6 >> 1] = 16;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 564) label = 3299; else {
  $18329 = HEAP32[918918] | 0;
  if (($18329 | 0) == (HEAP32[918916] | 0)) label = 3299; else {
   $$lcssa$i$i3826 = 3675672;
   $$lcssa8$i$i3825 = $18329;
   label = 3300;
  }
 }
 do if ((label | 0) == 3299) {
  if ((HEAP32[918925] | 0) >>> 0 >= 564) {
   $18336 = HEAP32[918924] | 0;
   if (($18336 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3826 = 3675696;
    $$lcssa8$i$i3825 = $18336;
    label = 3300;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 564) {
   $18341 = HEAP32[918930] | 0;
   if (($18341 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3826 = 3675720;
    $$lcssa8$i$i3825 = $18341;
    label = 3300;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 564) {
   $18346 = HEAP32[918936] | 0;
   if (($18346 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3826 = 3675744;
    $$lcssa8$i$i3825 = $18346;
    label = 3300;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 564) {
   $18351 = HEAP32[918942] | 0;
   if (($18351 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3826 = 3675768;
    $$lcssa8$i$i3825 = $18351;
    label = 3300;
    break;
   }
  }
  $$3$i$i3827 = __Znwj(564) | 0;
 } while (0);
 if ((label | 0) == 3300) {
  $18334 = $$lcssa8$i$i3825 + -4 | 0;
  HEAP32[$$lcssa$i$i3826 >> 2] = $18334;
  $$3$i$i3827 = HEAP32[$18334 >> 2] | 0;
 }
 $18355 = $$3$i$i3827 + 52 | 0;
 HEAP16[$$3$i$i3827 >> 1] = 16;
 HEAP16[$$3$i$i3827 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3827 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3827 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3827 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3827 + 12 >> 2] = 512;
 HEAP32[$$3$i$i3827 + 16 >> 2] = $18355;
 HEAP32[$$3$i$i3827 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3827 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3827 + 48 >> 0] = 0;
 HEAP32[$846 >> 2] = $$3$i$i3827;
 dest = $18355;
 src = 2220512;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 84 | 0;
 src = 2220544;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 116 | 0;
 src = 2220576;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 148 | 0;
 src = 2220608;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 180 | 0;
 src = 2220640;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 212 | 0;
 src = 2220672;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 244 | 0;
 src = 2220704;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 276 | 0;
 src = 2220736;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 308 | 0;
 src = 2220768;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 340 | 0;
 src = 2220800;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 372 | 0;
 src = 2220832;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 404 | 0;
 src = 2220864;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 436 | 0;
 src = 2220896;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 468 | 0;
 src = 2220928;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 500 | 0;
 src = 2220960;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3827 + 532 | 0;
 src = 2220992;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $846);
 if ($$3$i$i3827 | 0) {
  $18381 = $$3$i$i3827 + 5 | 0;
  $18383 = (HEAP8[$18381 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18381 >> 0] = $18383;
  if (!($18383 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3827);
  HEAP32[$846 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 972;
 HEAP16[$bitmapData + 2 >> 1] = 2;
 HEAP16[$bitmapData + 4 >> 1] = 1003;
 HEAP16[$bitmapData + 6 >> 1] = 15;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 948) label = 3315; else {
  $18390 = HEAP32[918918] | 0;
  if (($18390 | 0) == (HEAP32[918916] | 0)) label = 3315; else {
   $$lcssa$i$i3838 = 3675672;
   $$lcssa8$i$i3837 = $18390;
   label = 3316;
  }
 }
 do if ((label | 0) == 3315) {
  if ((HEAP32[918925] | 0) >>> 0 >= 948) {
   $18397 = HEAP32[918924] | 0;
   if (($18397 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3838 = 3675696;
    $$lcssa8$i$i3837 = $18397;
    label = 3316;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 948) {
   $18402 = HEAP32[918930] | 0;
   if (($18402 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3838 = 3675720;
    $$lcssa8$i$i3837 = $18402;
    label = 3316;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 948) {
   $18407 = HEAP32[918936] | 0;
   if (($18407 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3838 = 3675744;
    $$lcssa8$i$i3837 = $18407;
    label = 3316;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 948) {
   $18412 = HEAP32[918942] | 0;
   if (($18412 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3838 = 3675768;
    $$lcssa8$i$i3837 = $18412;
    label = 3316;
    break;
   }
  }
  $$3$i$i3839 = __Znwj(948) | 0;
 } while (0);
 if ((label | 0) == 3316) {
  $18395 = $$lcssa8$i$i3837 + -4 | 0;
  HEAP32[$$lcssa$i$i3838 >> 2] = $18395;
  $$3$i$i3839 = HEAP32[$18395 >> 2] | 0;
 }
 $18416 = $$3$i$i3839 + 52 | 0;
 HEAP16[$$3$i$i3839 >> 1] = 32;
 HEAP16[$$3$i$i3839 + 2 >> 1] = 14;
 HEAP8[$$3$i$i3839 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3839 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3839 + 8 >> 2] = 64;
 HEAP32[$$3$i$i3839 + 12 >> 2] = 896;
 HEAP32[$$3$i$i3839 + 16 >> 2] = $18416;
 HEAP32[$$3$i$i3839 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3839 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3839 + 48 >> 0] = 0;
 HEAP32[$847 >> 2] = $$3$i$i3839;
 dest = $18416;
 src = 2221024;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 116 | 0;
 src = 2221088;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 180 | 0;
 src = 2221152;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 244 | 0;
 src = 2221216;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 308 | 0;
 src = 2221280;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 372 | 0;
 src = 2221344;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 436 | 0;
 src = 2221408;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 500 | 0;
 src = 2221472;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 564 | 0;
 src = 2221536;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 628 | 0;
 src = 2221600;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 692 | 0;
 src = 2221664;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 756 | 0;
 src = 2221728;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 820 | 0;
 src = 2221792;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3839 + 884 | 0;
 src = 2221856;
 stop = dest + 64 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $847);
 if ($$3$i$i3839 | 0) {
  $18440 = $$3$i$i3839 + 5 | 0;
  $18442 = (HEAP8[$18440 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18440 >> 0] = $18442;
  if (!($18442 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3839);
  HEAP32[$847 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 1006;
 HEAP16[$bitmapData + 2 >> 1] = 2;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 15;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 500) label = 3331; else {
  $18449 = HEAP32[918918] | 0;
  if (($18449 | 0) == (HEAP32[918916] | 0)) label = 3331; else {
   $$lcssa$i$i3850 = 3675672;
   $$lcssa8$i$i3849 = $18449;
   label = 3332;
  }
 }
 do if ((label | 0) == 3331) {
  if ((HEAP32[918925] | 0) >>> 0 >= 500) {
   $18456 = HEAP32[918924] | 0;
   if (($18456 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3850 = 3675696;
    $$lcssa8$i$i3849 = $18456;
    label = 3332;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 500) {
   $18461 = HEAP32[918930] | 0;
   if (($18461 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3850 = 3675720;
    $$lcssa8$i$i3849 = $18461;
    label = 3332;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 500) {
   $18466 = HEAP32[918936] | 0;
   if (($18466 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3850 = 3675744;
    $$lcssa8$i$i3849 = $18466;
    label = 3332;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 500) {
   $18471 = HEAP32[918942] | 0;
   if (($18471 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3850 = 3675768;
    $$lcssa8$i$i3849 = $18471;
    label = 3332;
    break;
   }
  }
  $$3$i$i3851 = __Znwj(500) | 0;
 } while (0);
 if ((label | 0) == 3332) {
  $18454 = $$lcssa8$i$i3849 + -4 | 0;
  HEAP32[$$lcssa$i$i3850 >> 2] = $18454;
  $$3$i$i3851 = HEAP32[$18454 >> 2] | 0;
 }
 $18475 = $$3$i$i3851 + 52 | 0;
 HEAP16[$$3$i$i3851 >> 1] = 16;
 HEAP16[$$3$i$i3851 + 2 >> 1] = 14;
 HEAP8[$$3$i$i3851 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3851 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3851 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3851 + 12 >> 2] = 448;
 HEAP32[$$3$i$i3851 + 16 >> 2] = $18475;
 HEAP32[$$3$i$i3851 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3851 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3851 + 48 >> 0] = 0;
 HEAP32[$848 >> 2] = $$3$i$i3851;
 dest = $18475;
 src = 2221920;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 84 | 0;
 src = 2221952;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 116 | 0;
 src = 2221984;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 148 | 0;
 src = 2222016;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 180 | 0;
 src = 2222048;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 212 | 0;
 src = 2222080;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 244 | 0;
 src = 2222112;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 276 | 0;
 src = 2222144;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 308 | 0;
 src = 2222176;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 340 | 0;
 src = 2222208;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 372 | 0;
 src = 2222240;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 404 | 0;
 src = 2222272;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 436 | 0;
 src = 2222304;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3851 + 468 | 0;
 src = 2222336;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $848);
 if ($$3$i$i3851 | 0) {
  $18499 = $$3$i$i3851 + 5 | 0;
  $18501 = (HEAP8[$18499 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18499 >> 0] = $18501;
  if (!($18501 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3851);
  HEAP32[$848 >> 2] = 0;
 }
 $18503 = $849;
 HEAP32[$18503 >> 2] = 2949122;
 HEAP32[$18503 + 4 >> 2] = 1442812;
 HEAP32[$849 + 8 >> 2] = 54937;
 HEAP16[$850 >> 1] = 2;
 HEAP16[$850 + 2 >> 1] = 45;
 HEAP16[$850 + 4 >> 1] = 1020;
 HEAP16[$850 + 6 >> 1] = 22;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $849, $850);
 $18511 = $851;
 HEAP32[$18511 >> 2] = 4653252;
 HEAP32[$18511 + 4 >> 2] = 41484291;
 HEAP32[$851 + 8 >> 2] = 65535;
 HEAP16[$852 >> 1] = 196;
 HEAP16[$852 + 2 >> 1] = 71;
 HEAP16[$852 + 4 >> 1] = 3;
 HEAP16[$852 + 6 >> 1] = 633;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $851, $852);
 $18519 = $853;
 HEAP32[$18519 >> 2] = 4653252;
 HEAP32[$18519 + 4 >> 2] = 41484291;
 HEAP32[$853 + 8 >> 2] = 54937;
 HEAP16[$854 >> 1] = 196;
 HEAP16[$854 + 2 >> 1] = 71;
 HEAP16[$854 + 4 >> 1] = 3;
 HEAP16[$854 + 6 >> 1] = 633;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $853, $854);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 45;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 59;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30652) label = 3347; else {
  $18532 = HEAP32[918918] | 0;
  if (($18532 | 0) == (HEAP32[918916] | 0)) label = 3347; else {
   $$lcssa$i$i3862 = 3675672;
   $$lcssa8$i$i3861 = $18532;
   label = 3348;
  }
 }
 do if ((label | 0) == 3347) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30652) {
   $18539 = HEAP32[918924] | 0;
   if (($18539 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3862 = 3675696;
    $$lcssa8$i$i3861 = $18539;
    label = 3348;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30652) {
   $18544 = HEAP32[918930] | 0;
   if (($18544 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3862 = 3675720;
    $$lcssa8$i$i3861 = $18544;
    label = 3348;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30652) {
   $18549 = HEAP32[918936] | 0;
   if (($18549 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3862 = 3675744;
    $$lcssa8$i$i3861 = $18549;
    label = 3348;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30652) {
   $18554 = HEAP32[918942] | 0;
   if (($18554 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3862 = 3675768;
    $$lcssa8$i$i3861 = $18554;
    label = 3348;
    break;
   }
  }
  $$3$i$i3863 = __Znwj(30652) | 0;
 } while (0);
 if ((label | 0) == 3348) {
  $18537 = $$lcssa8$i$i3861 + -4 | 0;
  HEAP32[$$lcssa$i$i3862 >> 2] = $18537;
  $$3$i$i3863 = HEAP32[$18537 >> 2] | 0;
 }
 $18558 = $$3$i$i3863 + 52 | 0;
 HEAP16[$$3$i$i3863 >> 1] = 1020;
 HEAP16[$$3$i$i3863 + 2 >> 1] = 15;
 HEAP8[$$3$i$i3863 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3863 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3863 + 8 >> 2] = 2040;
 HEAP32[$$3$i$i3863 + 12 >> 2] = 30600;
 HEAP32[$$3$i$i3863 + 16 >> 2] = $18558;
 HEAP32[$$3$i$i3863 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3863 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3863 + 48 >> 0] = 0;
 HEAP32[$855 >> 2] = $$3$i$i3863;
 _memcpy($18558 | 0, 2222368, 2040) | 0;
 _memcpy($$3$i$i3863 + 2092 | 0, 2224408, 2040) | 0;
 _memcpy($$3$i$i3863 + 4132 | 0, 2226448, 2040) | 0;
 _memcpy($$3$i$i3863 + 6172 | 0, 2228488, 2040) | 0;
 _memcpy($$3$i$i3863 + 8212 | 0, 2230528, 2040) | 0;
 _memcpy($$3$i$i3863 + 10252 | 0, 2232568, 2040) | 0;
 _memcpy($$3$i$i3863 + 12292 | 0, 2234608, 2040) | 0;
 _memcpy($$3$i$i3863 + 14332 | 0, 2236648, 2040) | 0;
 _memcpy($$3$i$i3863 + 16372 | 0, 2238688, 2040) | 0;
 _memcpy($$3$i$i3863 + 18412 | 0, 2240728, 2040) | 0;
 _memcpy($$3$i$i3863 + 20452 | 0, 2242768, 2040) | 0;
 _memcpy($$3$i$i3863 + 22492 | 0, 2244808, 2040) | 0;
 _memcpy($$3$i$i3863 + 24532 | 0, 2246848, 2040) | 0;
 _memcpy($$3$i$i3863 + 26572 | 0, 2248888, 2040) | 0;
 _memcpy($$3$i$i3863 + 28612 | 0, 2250928, 2040) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $855);
 if ($$3$i$i3863 | 0) {
  $18583 = $$3$i$i3863 + 5 | 0;
  $18585 = (HEAP8[$18583 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18583 >> 0] = $18585;
  if (!($18585 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3863);
  HEAP32[$855 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 60;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 66;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 14332) label = 3363; else {
  $18592 = HEAP32[918918] | 0;
  if (($18592 | 0) == (HEAP32[918916] | 0)) label = 3363; else {
   $$lcssa$i$i3874 = 3675672;
   $$lcssa8$i$i3873 = $18592;
   label = 3364;
  }
 }
 do if ((label | 0) == 3363) {
  if ((HEAP32[918925] | 0) >>> 0 >= 14332) {
   $18599 = HEAP32[918924] | 0;
   if (($18599 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3874 = 3675696;
    $$lcssa8$i$i3873 = $18599;
    label = 3364;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 14332) {
   $18604 = HEAP32[918930] | 0;
   if (($18604 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3874 = 3675720;
    $$lcssa8$i$i3873 = $18604;
    label = 3364;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 14332) {
   $18609 = HEAP32[918936] | 0;
   if (($18609 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3874 = 3675744;
    $$lcssa8$i$i3873 = $18609;
    label = 3364;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 14332) {
   $18614 = HEAP32[918942] | 0;
   if (($18614 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3874 = 3675768;
    $$lcssa8$i$i3873 = $18614;
    label = 3364;
    break;
   }
  }
  $$3$i$i3875 = __Znwj(14332) | 0;
 } while (0);
 if ((label | 0) == 3364) {
  $18597 = $$lcssa8$i$i3873 + -4 | 0;
  HEAP32[$$lcssa$i$i3874 >> 2] = $18597;
  $$3$i$i3875 = HEAP32[$18597 >> 2] | 0;
 }
 $18618 = $$3$i$i3875 + 52 | 0;
 HEAP16[$$3$i$i3875 >> 1] = 1020;
 HEAP16[$$3$i$i3875 + 2 >> 1] = 7;
 HEAP8[$$3$i$i3875 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3875 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3875 + 8 >> 2] = 2040;
 HEAP32[$$3$i$i3875 + 12 >> 2] = 14280;
 HEAP32[$$3$i$i3875 + 16 >> 2] = $18618;
 HEAP32[$$3$i$i3875 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3875 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3875 + 48 >> 0] = 0;
 HEAP32[$856 >> 2] = $$3$i$i3875;
 _memcpy($18618 | 0, 2252968, 2040) | 0;
 _memcpy($$3$i$i3875 + 2092 | 0, 2255008, 2040) | 0;
 _memcpy($$3$i$i3875 + 4132 | 0, 2257048, 2040) | 0;
 _memcpy($$3$i$i3875 + 6172 | 0, 2259088, 2040) | 0;
 _memcpy($$3$i$i3875 + 8212 | 0, 2261128, 2040) | 0;
 _memcpy($$3$i$i3875 + 10252 | 0, 2263168, 2040) | 0;
 _memcpy($$3$i$i3875 + 12292 | 0, 2265208, 2040) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $856);
 if ($$3$i$i3875 | 0) {
  $18635 = $$3$i$i3875 + 5 | 0;
  $18637 = (HEAP8[$18635 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$18635 >> 0] = $18637;
  if (!($18637 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3875);
  HEAP32[$856 >> 2] = 0;
 }
 $18639 = $857;
 HEAP32[$18639 >> 2] = 6357193;
 HEAP32[$18639 + 4 >> 2] = 39650101;
 HEAP32[$857 + 8 >> 2] = 54937;
 HEAP16[$858 >> 1] = 201;
 HEAP16[$858 + 2 >> 1] = 97;
 HEAP16[$858 + 4 >> 1] = 821;
 HEAP16[$858 + 6 >> 1] = 605;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $857, $858);
 $18647 = $859;
 HEAP32[$18647 >> 2] = 12125158;
 HEAP32[$18647 + 4 >> 2] = 1572880;
 HEAP8[$859 + 8 >> 0] = -16;
 HEAP32[$859 + 12 >> 2] = 65535;
 HEAP32[$859 + 16 >> 2] = 54937;
 HEAP8[$859 + 20 >> 0] = 1;
 HEAP8[$859 + 21 >> 0] = 1;
 HEAP8[$859 + 22 >> 0] = 3;
 HEAP8[$859 + 23 >> 0] = -86;
 $18658 = $859 + 24 | 0;
 HEAP32[$18658 >> 2] = 0;
 HEAP16[$18658 + 4 >> 1] = 0;
 HEAP8[$18658 + 6 >> 0] = 0;
 HEAP16[$860 >> 1] = 998;
 HEAP16[$860 + 2 >> 1] = 185;
 HEAP16[$860 + 4 >> 1] = 16;
 HEAP16[$860 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $859, $860);
 $18662 = $861;
 HEAP32[$18662 >> 2] = 11600885;
 HEAP32[$18662 + 4 >> 2] = 524289;
 HEAP32[$861 + 8 >> 2] = 16904;
 HEAP16[$862 >> 1] = 1013;
 HEAP16[$862 + 2 >> 1] = 177;
 HEAP16[$862 + 4 >> 1] = 1;
 HEAP16[$862 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $861, $862);
 $18670 = $863;
 HEAP32[$18670 >> 2] = 12059622;
 HEAP32[$18670 + 4 >> 2] = 65551;
 HEAP32[$863 + 8 >> 2] = 16904;
 HEAP16[$864 >> 1] = 998;
 HEAP16[$864 + 2 >> 1] = 184;
 HEAP16[$864 + 4 >> 1] = 15;
 HEAP16[$864 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $863, $864);
 $18678 = $865;
 HEAP32[$18678 >> 2] = 11600870;
 HEAP32[$18678 + 4 >> 2] = 458753;
 HEAP32[$865 + 8 >> 2] = 54937;
 HEAP16[$866 >> 1] = 998;
 HEAP16[$866 + 2 >> 1] = 177;
 HEAP16[$866 + 4 >> 1] = 1;
 HEAP16[$866 + 6 >> 1] = 7;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $865, $866);
 $18686 = $867;
 HEAP32[$18686 >> 2] = 11600871;
 HEAP32[$18686 + 4 >> 2] = 65550;
 HEAP32[$867 + 8 >> 2] = 54937;
 HEAP16[$868 >> 1] = 999;
 HEAP16[$868 + 2 >> 1] = 177;
 HEAP16[$868 + 4 >> 1] = 14;
 HEAP16[$868 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $867, $868);
 $18694 = $869;
 HEAP32[$18694 >> 2] = 11666420;
 HEAP32[$18694 + 4 >> 2] = 393217;
 HEAP32[$869 + 8 >> 2] = 33808;
 HEAP16[$870 >> 1] = 1012;
 HEAP16[$870 + 2 >> 1] = 178;
 HEAP16[$870 + 4 >> 1] = 1;
 HEAP16[$870 + 6 >> 1] = 6;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $869, $870);
 $18702 = $871;
 HEAP32[$18702 >> 2] = 11994087;
 HEAP32[$18702 + 4 >> 2] = 65549;
 HEAP32[$871 + 8 >> 2] = 33808;
 HEAP16[$872 >> 1] = 999;
 HEAP16[$872 + 2 >> 1] = 183;
 HEAP16[$872 + 4 >> 1] = 13;
 HEAP16[$872 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $871, $872);
 $18710 = $873;
 HEAP32[$18710 >> 2] = 11666407;
 HEAP32[$18710 + 4 >> 2] = 327681;
 HEAP32[$873 + 8 >> 2] = 65535;
 HEAP16[$874 >> 1] = 999;
 HEAP16[$874 + 2 >> 1] = 178;
 HEAP16[$874 + 4 >> 1] = 1;
 HEAP16[$874 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $873, $874);
 $18718 = $875;
 HEAP32[$18718 >> 2] = 11666408;
 HEAP32[$18718 + 4 >> 2] = 65548;
 HEAP32[$875 + 8 >> 2] = 65535;
 HEAP16[$876 >> 1] = 1e3;
 HEAP16[$876 + 2 >> 1] = 178;
 HEAP16[$876 + 4 >> 1] = 12;
 HEAP16[$876 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $875, $876);
 $18726 = $877;
 HEAP32[$18726 >> 2] = 11731944;
 HEAP32[$18726 + 4 >> 2] = 262156;
 HEAP32[$877 + 8 >> 2] = 54937;
 HEAP16[$878 >> 1] = 1e3;
 HEAP16[$878 + 2 >> 1] = 179;
 HEAP16[$878 + 4 >> 1] = 12;
 HEAP16[$878 + 6 >> 1] = 4;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $877, $878);
 $18734 = $879;
 HEAP32[$18734 >> 2] = 10551497;
 HEAP32[$18734 + 4 >> 2] = 4195101;
 HEAP32[$879 + 8 >> 2] = 65535;
 HEAP16[$880 >> 1] = 201;
 HEAP16[$880 + 2 >> 1] = 161;
 HEAP16[$880 + 4 >> 1] = 797;
 HEAP16[$880 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $879, $880);
 $18742 = $881;
 HEAP32[$18742 >> 2] = 10551497;
 HEAP32[$18742 + 4 >> 2] = 4195101;
 HEAP32[$881 + 8 >> 2] = 65535;
 HEAP16[$882 >> 1] = 201;
 HEAP16[$882 + 2 >> 1] = 171;
 HEAP16[$882 + 4 >> 1] = 10;
 HEAP16[$882 + 6 >> 1] = 54;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $881, $882);
 $18750 = $883;
 HEAP32[$18750 >> 2] = 10551497;
 HEAP32[$18750 + 4 >> 2] = 4195101;
 HEAP32[$883 + 8 >> 2] = 65535;
 HEAP16[$884 >> 1] = 988;
 HEAP16[$884 + 2 >> 1] = 171;
 HEAP16[$884 + 4 >> 1] = 10;
 HEAP16[$884 + 6 >> 1] = 54;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $883, $884);
 $18758 = $885;
 HEAP32[$18758 >> 2] = 12910803;
 HEAP32[$18758 + 4 >> 2] = 1835785;
 HEAP32[$885 + 8 >> 2] = 54938;
 HEAP16[$886 >> 1] = 211;
 HEAP16[$886 + 2 >> 1] = 197;
 HEAP16[$886 + 4 >> 1] = 1;
 HEAP16[$886 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $885, $886);
 $18766 = $887;
 HEAP32[$18766 >> 2] = 12910803;
 HEAP32[$18766 + 4 >> 2] = 1835785;
 HEAP32[$887 + 8 >> 2] = 54938;
 HEAP16[$888 >> 1] = 987;
 HEAP16[$888 + 2 >> 1] = 197;
 HEAP16[$888 + 4 >> 1] = 1;
 HEAP16[$888 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $887, $888);
 $18774 = $889;
 HEAP32[$18774 >> 2] = 11206867;
 HEAP32[$18774 + 4 >> 2] = 1704713;
 HEAP32[$889 + 8 >> 2] = 54938;
 HEAP16[$890 >> 1] = 211;
 HEAP16[$890 + 2 >> 1] = 171;
 HEAP16[$890 + 4 >> 1] = 777;
 HEAP16[$890 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $889, $890);
 $18782 = $891;
 HEAP32[$18782 >> 2] = 11206867;
 HEAP32[$18782 + 4 >> 2] = 1704713;
 HEAP32[$891 + 8 >> 2] = 54938;
 HEAP16[$892 >> 1] = 211;
 HEAP16[$892 + 2 >> 1] = 172;
 HEAP16[$892 + 4 >> 1] = 1;
 HEAP16[$892 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $891, $892);
 $18790 = $893;
 HEAP32[$18790 >> 2] = 11206867;
 HEAP32[$18790 + 4 >> 2] = 1704713;
 HEAP32[$893 + 8 >> 2] = 54938;
 HEAP16[$894 >> 1] = 987;
 HEAP16[$894 + 2 >> 1] = 172;
 HEAP16[$894 + 4 >> 1] = 1;
 HEAP16[$894 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $893, $894);
 $18798 = $895;
 HEAP32[$18798 >> 2] = 11206867;
 HEAP32[$18798 + 4 >> 2] = 1704713;
 HEAP32[$895 + 8 >> 2] = 54938;
 HEAP16[$896 >> 1] = 211;
 HEAP16[$896 + 2 >> 1] = 196;
 HEAP16[$896 + 4 >> 1] = 777;
 HEAP16[$896 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $895, $896);
 $18806 = $897;
 HEAP32[$18806 >> 2] = 6357193;
 HEAP32[$18806 + 4 >> 2] = 39650101;
 HEAP32[$897 + 8 >> 2] = 54937;
 HEAP16[$898 >> 1] = 1014;
 HEAP16[$898 + 2 >> 1] = 97;
 HEAP16[$898 + 4 >> 1] = 8;
 HEAP16[$898 + 6 >> 1] = 150;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $897, $898);
 $18814 = $899;
 HEAP32[$18814 >> 2] = 6357193;
 HEAP32[$18814 + 4 >> 2] = 39650101;
 HEAP32[$899 + 8 >> 2] = 54937;
 HEAP16[$900 >> 1] = 201;
 HEAP16[$900 + 2 >> 1] = 247;
 HEAP16[$900 + 4 >> 1] = 821;
 HEAP16[$900 + 6 >> 1] = 455;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $899, $900);
 $18822 = $901;
 HEAP32[$18822 >> 2] = 6357193;
 HEAP32[$18822 + 4 >> 2] = 38208309;
 HEAP32[$901 + 8 >> 2] = 54937;
 HEAP16[$902 >> 1] = 1014;
 HEAP16[$902 + 2 >> 1] = 97;
 HEAP16[$902 + 4 >> 1] = 8;
 HEAP16[$902 + 6 >> 1] = 128;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $901, $902);
 $18830 = $903;
 HEAP32[$18830 >> 2] = 6357193;
 HEAP32[$18830 + 4 >> 2] = 38208309;
 HEAP32[$903 + 8 >> 2] = 54937;
 HEAP16[$904 >> 1] = 201;
 HEAP16[$904 + 2 >> 1] = 225;
 HEAP16[$904 + 4 >> 1] = 821;
 HEAP16[$904 + 6 >> 1] = 455;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $903, $904);
 $18838 = $905;
 HEAP32[$18838 >> 2] = 13698030;
 HEAP32[$18838 + 4 >> 2] = 29818896;
 HEAP8[$905 + 8 >> 0] = -16;
 HEAP32[$905 + 12 >> 2] = 65535;
 HEAP32[$905 + 16 >> 2] = 54937;
 HEAP8[$905 + 20 >> 0] = 1;
 HEAP8[$905 + 21 >> 0] = 1;
 HEAP8[$905 + 22 >> 0] = 3;
 HEAP8[$905 + 23 >> 0] = -86;
 $18849 = $905 + 24 | 0;
 HEAP32[$18849 >> 2] = 0;
 HEAP16[$18849 + 4 >> 1] = 0;
 HEAP8[$18849 + 6 >> 0] = 0;
 HEAP16[$906 >> 1] = 1006;
 HEAP16[$906 + 2 >> 1] = 209;
 HEAP16[$906 + 4 >> 1] = 16;
 HEAP16[$906 + 6 >> 1] = 455;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $905, $906);
 $18853 = $907;
 HEAP32[$18853 >> 2] = 11600893;
 HEAP32[$18853 + 4 >> 2] = 2097153;
 HEAP32[$907 + 8 >> 2] = 16904;
 HEAP16[$908 >> 1] = 1021;
 HEAP16[$908 + 2 >> 1] = 177;
 HEAP16[$908 + 4 >> 1] = 1;
 HEAP16[$908 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $907, $908);
 $18861 = $909;
 HEAP32[$18861 >> 2] = 13632494;
 HEAP32[$18861 + 4 >> 2] = 65551;
 HEAP32[$909 + 8 >> 2] = 16904;
 HEAP16[$910 >> 1] = 1006;
 HEAP16[$910 + 2 >> 1] = 208;
 HEAP16[$910 + 4 >> 1] = 15;
 HEAP16[$910 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $909, $910);
 $18869 = $911;
 HEAP32[$18869 >> 2] = 11600878;
 HEAP32[$18869 + 4 >> 2] = 2031617;
 HEAP32[$911 + 8 >> 2] = 54937;
 HEAP16[$912 >> 1] = 1006;
 HEAP16[$912 + 2 >> 1] = 177;
 HEAP16[$912 + 4 >> 1] = 1;
 HEAP16[$912 + 6 >> 1] = 31;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $911, $912);
 $18877 = $913;
 HEAP32[$18877 >> 2] = 11600879;
 HEAP32[$18877 + 4 >> 2] = 65550;
 HEAP32[$913 + 8 >> 2] = 54937;
 HEAP16[$914 >> 1] = 1007;
 HEAP16[$914 + 2 >> 1] = 177;
 HEAP16[$914 + 4 >> 1] = 14;
 HEAP16[$914 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $913, $914);
 $18885 = $915;
 HEAP32[$18885 >> 2] = 11666428;
 HEAP32[$18885 + 4 >> 2] = 1966081;
 HEAP32[$915 + 8 >> 2] = 33808;
 HEAP16[$916 >> 1] = 1020;
 HEAP16[$916 + 2 >> 1] = 178;
 HEAP16[$916 + 4 >> 1] = 1;
 HEAP16[$916 + 6 >> 1] = 30;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $915, $916);
 $18893 = $917;
 HEAP32[$18893 >> 2] = 13566959;
 HEAP32[$18893 + 4 >> 2] = 65549;
 HEAP32[$917 + 8 >> 2] = 33808;
 HEAP16[$918 >> 1] = 1007;
 HEAP16[$918 + 2 >> 1] = 207;
 HEAP16[$918 + 4 >> 1] = 13;
 HEAP16[$918 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $917, $918);
 $18901 = $919;
 HEAP32[$18901 >> 2] = 11666415;
 HEAP32[$18901 + 4 >> 2] = 1900545;
 HEAP32[$919 + 8 >> 2] = 65535;
 HEAP16[$920 >> 1] = 1007;
 HEAP16[$920 + 2 >> 1] = 178;
 HEAP16[$920 + 4 >> 1] = 1;
 HEAP16[$920 + 6 >> 1] = 29;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $919, $920);
 $18909 = $921;
 HEAP32[$18909 >> 2] = 11666416;
 HEAP32[$18909 + 4 >> 2] = 65548;
 HEAP32[$921 + 8 >> 2] = 65535;
 HEAP16[$922 >> 1] = 1008;
 HEAP16[$922 + 2 >> 1] = 178;
 HEAP16[$922 + 4 >> 1] = 12;
 HEAP16[$922 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $921, $922);
 $18917 = $923;
 HEAP32[$18917 >> 2] = 11731952;
 HEAP32[$18917 + 4 >> 2] = 1835020;
 HEAP32[$923 + 8 >> 2] = 54937;
 HEAP16[$924 >> 1] = 1008;
 HEAP16[$924 + 2 >> 1] = 179;
 HEAP16[$924 + 4 >> 1] = 12;
 HEAP16[$924 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $923, $924);
 $18925 = $925;
 HEAP32[$18925 >> 2] = 10551497;
 HEAP32[$18925 + 4 >> 2] = 34013989;
 HEAP32[$925 + 8 >> 2] = 65535;
 HEAP16[$926 >> 1] = 201;
 HEAP16[$926 + 2 >> 1] = 161;
 HEAP16[$926 + 4 >> 1] = 805;
 HEAP16[$926 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $925, $926);
 $18933 = $927;
 HEAP32[$18933 >> 2] = 10551497;
 HEAP32[$18933 + 4 >> 2] = 34013989;
 HEAP32[$927 + 8 >> 2] = 65535;
 HEAP16[$928 >> 1] = 201;
 HEAP16[$928 + 2 >> 1] = 171;
 HEAP16[$928 + 4 >> 1] = 10;
 HEAP16[$928 + 6 >> 1] = 509;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $927, $928);
 $18941 = $929;
 HEAP32[$18941 >> 2] = 10551497;
 HEAP32[$18941 + 4 >> 2] = 34013989;
 HEAP32[$929 + 8 >> 2] = 65535;
 HEAP16[$930 >> 1] = 988;
 HEAP16[$930 + 2 >> 1] = 171;
 HEAP16[$930 + 4 >> 1] = 18;
 HEAP16[$930 + 6 >> 1] = 509;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $929, $930);
 $18949 = $931;
 HEAP32[$18949 >> 2] = 42991827;
 HEAP32[$18949 + 4 >> 2] = 1573641;
 HEAP32[$931 + 8 >> 2] = 54938;
 HEAP16[$932 >> 1] = 211;
 HEAP16[$932 + 2 >> 1] = 656;
 HEAP16[$932 + 4 >> 1] = 1;
 HEAP16[$932 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $931, $932);
 $18957 = $933;
 HEAP32[$18957 >> 2] = 42991827;
 HEAP32[$18957 + 4 >> 2] = 1573641;
 HEAP32[$933 + 8 >> 2] = 54938;
 HEAP16[$934 >> 1] = 987;
 HEAP16[$934 + 2 >> 1] = 656;
 HEAP16[$934 + 4 >> 1] = 1;
 HEAP16[$934 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $933, $934);
 $18965 = $935;
 HEAP32[$18965 >> 2] = 43713274;
 HEAP32[$18965 + 4 >> 2] = 852182;
 HEAP32[$935 + 8 >> 2] = 63422;
 HEAP16[$936 >> 1] = 762;
 HEAP16[$936 + 2 >> 1] = 667;
 HEAP16[$936 + 4 >> 1] = 214;
 HEAP16[$936 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $935, $936);
 $18973 = $937;
 HEAP32[$18973 >> 2] = 43713274;
 HEAP32[$18973 + 4 >> 2] = 852182;
 HEAP32[$937 + 8 >> 2] = 63422;
 HEAP16[$938 >> 1] = 762;
 HEAP16[$938 + 2 >> 1] = 672;
 HEAP16[$938 + 4 >> 1] = 5;
 HEAP16[$938 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $937, $938);
 $18981 = $939;
 HEAP32[$18981 >> 2] = 43713274;
 HEAP32[$18981 + 4 >> 2] = 852182;
 HEAP32[$939 + 8 >> 2] = 63422;
 HEAP16[$940 >> 1] = 971;
 HEAP16[$940 + 2 >> 1] = 672;
 HEAP16[$940 + 4 >> 1] = 5;
 HEAP16[$940 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $939, $940);
 $18989 = $941;
 HEAP32[$18989 >> 2] = 41287891;
 HEAP32[$18989 + 4 >> 2] = 1704713;
 HEAP32[$941 + 8 >> 2] = 54938;
 HEAP16[$942 >> 1] = 211;
 HEAP16[$942 + 2 >> 1] = 630;
 HEAP16[$942 + 4 >> 1] = 777;
 HEAP16[$942 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $941, $942);
 $18997 = $943;
 HEAP32[$18997 >> 2] = 41287891;
 HEAP32[$18997 + 4 >> 2] = 1704713;
 HEAP32[$943 + 8 >> 2] = 54938;
 HEAP16[$944 >> 1] = 211;
 HEAP16[$944 + 2 >> 1] = 631;
 HEAP16[$944 + 4 >> 1] = 1;
 HEAP16[$944 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $943, $944);
 $19005 = $945;
 HEAP32[$19005 >> 2] = 41287891;
 HEAP32[$19005 + 4 >> 2] = 1704713;
 HEAP32[$945 + 8 >> 2] = 54938;
 HEAP16[$946 >> 1] = 987;
 HEAP16[$946 + 2 >> 1] = 631;
 HEAP16[$946 + 4 >> 1] = 1;
 HEAP16[$946 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $945, $946);
 $19013 = $947;
 HEAP32[$19013 >> 2] = 41287891;
 HEAP32[$19013 + 4 >> 2] = 1704713;
 HEAP32[$947 + 8 >> 2] = 54938;
 HEAP16[$948 >> 1] = 211;
 HEAP16[$948 + 2 >> 1] = 655;
 HEAP16[$948 + 4 >> 1] = 777;
 HEAP16[$948 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $947, $948);
 $19021 = $949;
 HEAP32[$19021 >> 2] = 40632531;
 HEAP32[$19021 + 4 >> 2] = 656137;
 HEAP32[$949 + 8 >> 2] = 65535;
 HEAP16[$950 >> 1] = 211;
 HEAP16[$950 + 2 >> 1] = 620;
 HEAP16[$950 + 4 >> 1] = 777;
 HEAP16[$950 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $949, $950);
 $19029 = $951;
 HEAP32[$19029 >> 2] = 12910803;
 HEAP32[$19029 + 4 >> 2] = 27722505;
 HEAP32[$951 + 8 >> 2] = 54938;
 HEAP16[$952 >> 1] = 211;
 HEAP16[$952 + 2 >> 1] = 197;
 HEAP16[$952 + 4 >> 1] = 1;
 HEAP16[$952 + 6 >> 1] = 422;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $951, $952);
 $19037 = $953;
 HEAP32[$19037 >> 2] = 12910803;
 HEAP32[$19037 + 4 >> 2] = 27722505;
 HEAP32[$953 + 8 >> 2] = 54938;
 HEAP16[$954 >> 1] = 987;
 HEAP16[$954 + 2 >> 1] = 197;
 HEAP16[$954 + 4 >> 1] = 1;
 HEAP16[$954 + 6 >> 1] = 422;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $953, $954);
 $19045 = $955;
 HEAP32[$19045 >> 2] = 12910803;
 HEAP32[$19045 + 4 >> 2] = 27722505;
 HEAP32[$955 + 8 >> 2] = 54938;
 HEAP16[$956 >> 1] = 211;
 HEAP16[$956 + 2 >> 1] = 619;
 HEAP16[$956 + 4 >> 1] = 777;
 HEAP16[$956 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $955, $956);
 $19053 = $957;
 HEAP32[$19053 >> 2] = 39977172;
 HEAP32[$19053 + 4 >> 2] = 590599;
 HEAP32[$957 + 8 >> 2] = 63422;
 HEAP16[$958 >> 1] = 212;
 HEAP16[$958 + 2 >> 1] = 610;
 HEAP16[$958 + 4 >> 1] = 775;
 HEAP16[$958 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $957, $958);
 $19061 = $959;
 HEAP32[$19061 >> 2] = 29950174;
 HEAP32[$19061 + 4 >> 2] = 10027547;
 HEAP32[$959 + 8 >> 2] = 63422;
 HEAP16[$960 >> 1] = 222;
 HEAP16[$960 + 2 >> 1] = 457;
 HEAP16[$960 + 4 >> 1] = 3;
 HEAP16[$960 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $959, $960);
 $19069 = $961;
 HEAP32[$19069 >> 2] = 29950174;
 HEAP32[$19069 + 4 >> 2] = 10027547;
 HEAP32[$961 + 8 >> 2] = 63422;
 HEAP16[$962 >> 1] = 434;
 HEAP16[$962 + 2 >> 1] = 457;
 HEAP16[$962 + 4 >> 1] = 6;
 HEAP16[$962 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $961, $962);
 $19077 = $963;
 HEAP32[$19077 >> 2] = 29950174;
 HEAP32[$19077 + 4 >> 2] = 10027547;
 HEAP32[$963 + 8 >> 2] = 63422;
 HEAP16[$964 >> 1] = 758;
 HEAP16[$964 + 2 >> 1] = 457;
 HEAP16[$964 + 4 >> 1] = 3;
 HEAP16[$964 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $963, $964);
 $19085 = $965;
 HEAP32[$19085 >> 2] = 29950174;
 HEAP32[$19085 + 4 >> 2] = 10027547;
 HEAP32[$965 + 8 >> 2] = 63422;
 HEAP16[$966 >> 1] = 222;
 HEAP16[$966 + 2 >> 1] = 591;
 HEAP16[$966 + 4 >> 1] = 3;
 HEAP16[$966 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $965, $966);
 $19093 = $967;
 HEAP32[$19093 >> 2] = 29950174;
 HEAP32[$19093 + 4 >> 2] = 10027547;
 HEAP32[$967 + 8 >> 2] = 63422;
 HEAP16[$968 >> 1] = 434;
 HEAP16[$968 + 2 >> 1] = 591;
 HEAP16[$968 + 4 >> 1] = 327;
 HEAP16[$968 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $967, $968);
 $19101 = $969;
 HEAP32[$19101 >> 2] = 28181242;
 HEAP32[$19101 + 4 >> 2] = 9371862;
 HEAP32[$969 + 8 >> 2] = 63422;
 HEAP16[$970 >> 1] = 762;
 HEAP16[$970 + 2 >> 1] = 430;
 HEAP16[$970 + 4 >> 1] = 214;
 HEAP16[$970 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $969, $970);
 $19109 = $971;
 HEAP32[$19109 >> 2] = 28181242;
 HEAP32[$19109 + 4 >> 2] = 9371862;
 HEAP32[$971 + 8 >> 2] = 63422;
 HEAP16[$972 >> 1] = 762;
 HEAP16[$972 + 2 >> 1] = 435;
 HEAP16[$972 + 4 >> 1] = 5;
 HEAP16[$972 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $971, $972);
 $19117 = $973;
 HEAP32[$19117 >> 2] = 28181242;
 HEAP32[$19117 + 4 >> 2] = 9371862;
 HEAP32[$973 + 8 >> 2] = 63422;
 HEAP16[$974 >> 1] = 971;
 HEAP16[$974 + 2 >> 1] = 435;
 HEAP16[$974 + 4 >> 1] = 5;
 HEAP16[$974 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $973, $974);
 $19125 = $975;
 HEAP32[$19125 >> 2] = 28181242;
 HEAP32[$19125 + 4 >> 2] = 9371862;
 HEAP32[$975 + 8 >> 2] = 63422;
 HEAP16[$976 >> 1] = 762;
 HEAP16[$976 + 2 >> 1] = 451;
 HEAP16[$976 + 4 >> 1] = 214;
 HEAP16[$976 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $975, $976);
 $19133 = $977;
 HEAP32[$19133 >> 2] = 28181242;
 HEAP32[$19133 + 4 >> 2] = 9371862;
 HEAP32[$977 + 8 >> 2] = 63422;
 HEAP16[$978 >> 1] = 762;
 HEAP16[$978 + 2 >> 1] = 456;
 HEAP16[$978 + 4 >> 1] = 5;
 HEAP16[$978 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $977, $978);
 $19141 = $979;
 HEAP32[$19141 >> 2] = 28181242;
 HEAP32[$19141 + 4 >> 2] = 9371862;
 HEAP32[$979 + 8 >> 2] = 63422;
 HEAP16[$980 >> 1] = 971;
 HEAP16[$980 + 2 >> 1] = 456;
 HEAP16[$980 + 4 >> 1] = 5;
 HEAP16[$980 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $979, $980);
 $19149 = $981;
 HEAP32[$19149 >> 2] = 28181242;
 HEAP32[$19149 + 4 >> 2] = 9371862;
 HEAP32[$981 + 8 >> 2] = 63422;
 HEAP16[$982 >> 1] = 762;
 HEAP16[$982 + 2 >> 1] = 472;
 HEAP16[$982 + 4 >> 1] = 214;
 HEAP16[$982 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $981, $982);
 $19157 = $983;
 HEAP32[$19157 >> 2] = 28181242;
 HEAP32[$19157 + 4 >> 2] = 9371862;
 HEAP32[$983 + 8 >> 2] = 63422;
 HEAP16[$984 >> 1] = 762;
 HEAP16[$984 + 2 >> 1] = 477;
 HEAP16[$984 + 4 >> 1] = 5;
 HEAP16[$984 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $983, $984);
 $19165 = $985;
 HEAP32[$19165 >> 2] = 28181242;
 HEAP32[$19165 + 4 >> 2] = 9371862;
 HEAP32[$985 + 8 >> 2] = 63422;
 HEAP16[$986 >> 1] = 971;
 HEAP16[$986 + 2 >> 1] = 477;
 HEAP16[$986 + 4 >> 1] = 5;
 HEAP16[$986 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $985, $986);
 $19173 = $987;
 HEAP32[$19173 >> 2] = 28181242;
 HEAP32[$19173 + 4 >> 2] = 9371862;
 HEAP32[$987 + 8 >> 2] = 63422;
 HEAP16[$988 >> 1] = 762;
 HEAP16[$988 + 2 >> 1] = 493;
 HEAP16[$988 + 4 >> 1] = 214;
 HEAP16[$988 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $987, $988);
 $19181 = $989;
 HEAP32[$19181 >> 2] = 28181242;
 HEAP32[$19181 + 4 >> 2] = 9371862;
 HEAP32[$989 + 8 >> 2] = 63422;
 HEAP16[$990 >> 1] = 762;
 HEAP16[$990 + 2 >> 1] = 498;
 HEAP16[$990 + 4 >> 1] = 5;
 HEAP16[$990 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $989, $990);
 $19189 = $991;
 HEAP32[$19189 >> 2] = 28181242;
 HEAP32[$19189 + 4 >> 2] = 9371862;
 HEAP32[$991 + 8 >> 2] = 63422;
 HEAP16[$992 >> 1] = 971;
 HEAP16[$992 + 2 >> 1] = 498;
 HEAP16[$992 + 4 >> 1] = 5;
 HEAP16[$992 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $991, $992);
 $19197 = $993;
 HEAP32[$19197 >> 2] = 28181242;
 HEAP32[$19197 + 4 >> 2] = 9371862;
 HEAP32[$993 + 8 >> 2] = 63422;
 HEAP16[$994 >> 1] = 762;
 HEAP16[$994 + 2 >> 1] = 524;
 HEAP16[$994 + 4 >> 1] = 214;
 HEAP16[$994 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $993, $994);
 $19205 = $995;
 HEAP32[$19205 >> 2] = 28181242;
 HEAP32[$19205 + 4 >> 2] = 9371862;
 HEAP32[$995 + 8 >> 2] = 63422;
 HEAP16[$996 >> 1] = 762;
 HEAP16[$996 + 2 >> 1] = 529;
 HEAP16[$996 + 4 >> 1] = 5;
 HEAP16[$996 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $995, $996);
 $19213 = $997;
 HEAP32[$19213 >> 2] = 28181242;
 HEAP32[$19213 + 4 >> 2] = 9371862;
 HEAP32[$997 + 8 >> 2] = 63422;
 HEAP16[$998 >> 1] = 971;
 HEAP16[$998 + 2 >> 1] = 529;
 HEAP16[$998 + 4 >> 1] = 5;
 HEAP16[$998 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $997, $998);
 $19221 = $999;
 HEAP32[$19221 >> 2] = 28181242;
 HEAP32[$19221 + 4 >> 2] = 9371862;
 HEAP32[$999 + 8 >> 2] = 63422;
 HEAP16[$1000 >> 1] = 762;
 HEAP16[$1000 + 2 >> 1] = 568;
 HEAP16[$1000 + 4 >> 1] = 214;
 HEAP16[$1000 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $999, $1000);
 $19229 = $1001;
 HEAP32[$19229 >> 2] = 14942430;
 HEAP32[$19229 + 4 >> 2] = 12517915;
 HEAP32[$1001 + 8 >> 2] = 63422;
 HEAP16[$1002 >> 1] = 222;
 HEAP16[$1002 + 2 >> 1] = 228;
 HEAP16[$1002 + 4 >> 1] = 3;
 HEAP16[$1002 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1001, $1002);
 $19237 = $1003;
 HEAP32[$19237 >> 2] = 14942430;
 HEAP32[$19237 + 4 >> 2] = 12517915;
 HEAP32[$1003 + 8 >> 2] = 63422;
 HEAP16[$1004 >> 1] = 434;
 HEAP16[$1004 + 2 >> 1] = 228;
 HEAP16[$1004 + 4 >> 1] = 6;
 HEAP16[$1004 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1003, $1004);
 $19245 = $1005;
 HEAP32[$19245 >> 2] = 14942430;
 HEAP32[$19245 + 4 >> 2] = 12517915;
 HEAP32[$1005 + 8 >> 2] = 63422;
 HEAP16[$1006 >> 1] = 758;
 HEAP16[$1006 + 2 >> 1] = 228;
 HEAP16[$1006 + 4 >> 1] = 3;
 HEAP16[$1006 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1005, $1006);
 $19253 = $1007;
 HEAP32[$19253 >> 2] = 14942430;
 HEAP32[$19253 + 4 >> 2] = 12517915;
 HEAP32[$1007 + 8 >> 2] = 63422;
 HEAP16[$1008 >> 1] = 222;
 HEAP16[$1008 + 2 >> 1] = 381;
 HEAP16[$1008 + 4 >> 1] = 539;
 HEAP16[$1008 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1007, $1008);
 $19261 = $1009;
 HEAP32[$19261 >> 2] = 14942430;
 HEAP32[$19261 + 4 >> 2] = 12517915;
 HEAP32[$1009 + 8 >> 2] = 63422;
 HEAP16[$1010 >> 1] = 222;
 HEAP16[$1010 + 2 >> 1] = 384;
 HEAP16[$1010 + 4 >> 1] = 3;
 HEAP16[$1010 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1009, $1010);
 $19269 = $1011;
 HEAP32[$19269 >> 2] = 14942430;
 HEAP32[$19269 + 4 >> 2] = 12517915;
 HEAP32[$1011 + 8 >> 2] = 63422;
 HEAP16[$1012 >> 1] = 531;
 HEAP16[$1012 + 2 >> 1] = 384;
 HEAP16[$1012 + 4 >> 1] = 230;
 HEAP16[$1012 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1011, $1012);
 $19277 = $1013;
 HEAP32[$19277 >> 2] = 14942430;
 HEAP32[$19277 + 4 >> 2] = 12517915;
 HEAP32[$1013 + 8 >> 2] = 63422;
 HEAP16[$1014 >> 1] = 222;
 HEAP16[$1014 + 2 >> 1] = 416;
 HEAP16[$1014 + 4 >> 1] = 539;
 HEAP16[$1014 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1013, $1014);
 $19285 = $1015;
 HEAP32[$19285 >> 2] = 11206867;
 HEAP32[$19285 + 4 >> 2] = 1704713;
 HEAP32[$1015 + 8 >> 2] = 54938;
 HEAP16[$1016 >> 1] = 211;
 HEAP16[$1016 + 2 >> 1] = 171;
 HEAP16[$1016 + 4 >> 1] = 777;
 HEAP16[$1016 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1015, $1016);
 $19293 = $1017;
 HEAP32[$19293 >> 2] = 11206867;
 HEAP32[$19293 + 4 >> 2] = 1704713;
 HEAP32[$1017 + 8 >> 2] = 54938;
 HEAP16[$1018 >> 1] = 211;
 HEAP16[$1018 + 2 >> 1] = 172;
 HEAP16[$1018 + 4 >> 1] = 1;
 HEAP16[$1018 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1017, $1018);
 $19301 = $1019;
 HEAP32[$19301 >> 2] = 11206867;
 HEAP32[$19301 + 4 >> 2] = 1704713;
 HEAP32[$1019 + 8 >> 2] = 54938;
 HEAP16[$1020 >> 1] = 987;
 HEAP16[$1020 + 2 >> 1] = 172;
 HEAP16[$1020 + 4 >> 1] = 1;
 HEAP16[$1020 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1019, $1020);
 $19309 = $1021;
 HEAP32[$19309 >> 2] = 11206867;
 HEAP32[$19309 + 4 >> 2] = 1704713;
 HEAP32[$1021 + 8 >> 2] = 54938;
 HEAP16[$1022 >> 1] = 211;
 HEAP16[$1022 + 2 >> 1] = 196;
 HEAP16[$1022 + 4 >> 1] = 777;
 HEAP16[$1022 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1021, $1022);
 $19317 = $1023;
 HEAP32[$19317 >> 2] = 12910803;
 HEAP32[$19317 + 4 >> 2] = 27722505;
 HEAP32[$1023 + 8 >> 2] = 54938;
 HEAP16[$1024 >> 1] = 211;
 HEAP16[$1024 + 2 >> 1] = 197;
 HEAP16[$1024 + 4 >> 1] = 1;
 HEAP16[$1024 + 6 >> 1] = 422;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1023, $1024);
 $19325 = $1025;
 HEAP32[$19325 >> 2] = 12910803;
 HEAP32[$19325 + 4 >> 2] = 27722505;
 HEAP32[$1025 + 8 >> 2] = 54938;
 HEAP16[$1026 >> 1] = 987;
 HEAP16[$1026 + 2 >> 1] = 197;
 HEAP16[$1026 + 4 >> 1] = 1;
 HEAP16[$1026 + 6 >> 1] = 422;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1025, $1026);
 $19333 = $1027;
 HEAP32[$19333 >> 2] = 12910803;
 HEAP32[$19333 + 4 >> 2] = 27722505;
 HEAP32[$1027 + 8 >> 2] = 54938;
 HEAP16[$1028 >> 1] = 211;
 HEAP16[$1028 + 2 >> 1] = 619;
 HEAP16[$1028 + 4 >> 1] = 777;
 HEAP16[$1028 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1027, $1028);
 $19341 = $1029;
 HEAP32[$19341 >> 2] = 39977172;
 HEAP32[$19341 + 4 >> 2] = 590599;
 HEAP32[$1029 + 8 >> 2] = 63422;
 HEAP16[$1030 >> 1] = 212;
 HEAP16[$1030 + 2 >> 1] = 610;
 HEAP16[$1030 + 4 >> 1] = 775;
 HEAP16[$1030 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1029, $1030);
 $19349 = $1031;
 HEAP32[$19349 >> 2] = 29950174;
 HEAP32[$19349 + 4 >> 2] = 10027547;
 HEAP32[$1031 + 8 >> 2] = 63422;
 HEAP16[$1032 >> 1] = 222;
 HEAP16[$1032 + 2 >> 1] = 457;
 HEAP16[$1032 + 4 >> 1] = 3;
 HEAP16[$1032 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1031, $1032);
 $19357 = $1033;
 HEAP32[$19357 >> 2] = 29950174;
 HEAP32[$19357 + 4 >> 2] = 10027547;
 HEAP32[$1033 + 8 >> 2] = 63422;
 HEAP16[$1034 >> 1] = 434;
 HEAP16[$1034 + 2 >> 1] = 457;
 HEAP16[$1034 + 4 >> 1] = 6;
 HEAP16[$1034 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1033, $1034);
 $19365 = $1035;
 HEAP32[$19365 >> 2] = 29950174;
 HEAP32[$19365 + 4 >> 2] = 10027547;
 HEAP32[$1035 + 8 >> 2] = 63422;
 HEAP16[$1036 >> 1] = 758;
 HEAP16[$1036 + 2 >> 1] = 457;
 HEAP16[$1036 + 4 >> 1] = 3;
 HEAP16[$1036 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1035, $1036);
 $19373 = $1037;
 HEAP32[$19373 >> 2] = 29950174;
 HEAP32[$19373 + 4 >> 2] = 10027547;
 HEAP32[$1037 + 8 >> 2] = 63422;
 HEAP16[$1038 >> 1] = 222;
 HEAP16[$1038 + 2 >> 1] = 591;
 HEAP16[$1038 + 4 >> 1] = 3;
 HEAP16[$1038 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1037, $1038);
 $19381 = $1039;
 HEAP32[$19381 >> 2] = 29950174;
 HEAP32[$19381 + 4 >> 2] = 10027547;
 HEAP32[$1039 + 8 >> 2] = 63422;
 HEAP16[$1040 >> 1] = 434;
 HEAP16[$1040 + 2 >> 1] = 591;
 HEAP16[$1040 + 4 >> 1] = 327;
 HEAP16[$1040 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1039, $1040);
 $19389 = $1041;
 HEAP32[$19389 >> 2] = 28181242;
 HEAP32[$19389 + 4 >> 2] = 9371862;
 HEAP32[$1041 + 8 >> 2] = 63422;
 HEAP16[$1042 >> 1] = 762;
 HEAP16[$1042 + 2 >> 1] = 430;
 HEAP16[$1042 + 4 >> 1] = 214;
 HEAP16[$1042 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1041, $1042);
 $19397 = $1043;
 HEAP32[$19397 >> 2] = 28181242;
 HEAP32[$19397 + 4 >> 2] = 9371862;
 HEAP32[$1043 + 8 >> 2] = 63422;
 HEAP16[$1044 >> 1] = 762;
 HEAP16[$1044 + 2 >> 1] = 435;
 HEAP16[$1044 + 4 >> 1] = 5;
 HEAP16[$1044 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1043, $1044);
 $19405 = $1045;
 HEAP32[$19405 >> 2] = 28181242;
 HEAP32[$19405 + 4 >> 2] = 9371862;
 HEAP32[$1045 + 8 >> 2] = 63422;
 HEAP16[$1046 >> 1] = 971;
 HEAP16[$1046 + 2 >> 1] = 435;
 HEAP16[$1046 + 4 >> 1] = 5;
 HEAP16[$1046 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1045, $1046);
 $19413 = $1047;
 HEAP32[$19413 >> 2] = 28181242;
 HEAP32[$19413 + 4 >> 2] = 9371862;
 HEAP32[$1047 + 8 >> 2] = 63422;
 HEAP16[$1048 >> 1] = 762;
 HEAP16[$1048 + 2 >> 1] = 451;
 HEAP16[$1048 + 4 >> 1] = 214;
 HEAP16[$1048 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1047, $1048);
 $19421 = $1049;
 HEAP32[$19421 >> 2] = 28181242;
 HEAP32[$19421 + 4 >> 2] = 9371862;
 HEAP32[$1049 + 8 >> 2] = 63422;
 HEAP16[$1050 >> 1] = 762;
 HEAP16[$1050 + 2 >> 1] = 456;
 HEAP16[$1050 + 4 >> 1] = 5;
 HEAP16[$1050 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1049, $1050);
 $19429 = $1051;
 HEAP32[$19429 >> 2] = 28181242;
 HEAP32[$19429 + 4 >> 2] = 9371862;
 HEAP32[$1051 + 8 >> 2] = 63422;
 HEAP16[$1052 >> 1] = 971;
 HEAP16[$1052 + 2 >> 1] = 456;
 HEAP16[$1052 + 4 >> 1] = 5;
 HEAP16[$1052 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1051, $1052);
 $19437 = $1053;
 HEAP32[$19437 >> 2] = 28181242;
 HEAP32[$19437 + 4 >> 2] = 9371862;
 HEAP32[$1053 + 8 >> 2] = 63422;
 HEAP16[$1054 >> 1] = 762;
 HEAP16[$1054 + 2 >> 1] = 472;
 HEAP16[$1054 + 4 >> 1] = 214;
 HEAP16[$1054 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1053, $1054);
 $19445 = $1055;
 HEAP32[$19445 >> 2] = 28181242;
 HEAP32[$19445 + 4 >> 2] = 9371862;
 HEAP32[$1055 + 8 >> 2] = 63422;
 HEAP16[$1056 >> 1] = 762;
 HEAP16[$1056 + 2 >> 1] = 477;
 HEAP16[$1056 + 4 >> 1] = 5;
 HEAP16[$1056 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1055, $1056);
 $19453 = $1057;
 HEAP32[$19453 >> 2] = 28181242;
 HEAP32[$19453 + 4 >> 2] = 9371862;
 HEAP32[$1057 + 8 >> 2] = 63422;
 HEAP16[$1058 >> 1] = 971;
 HEAP16[$1058 + 2 >> 1] = 477;
 HEAP16[$1058 + 4 >> 1] = 5;
 HEAP16[$1058 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1057, $1058);
 $19461 = $1059;
 HEAP32[$19461 >> 2] = 28181242;
 HEAP32[$19461 + 4 >> 2] = 9371862;
 HEAP32[$1059 + 8 >> 2] = 63422;
 HEAP16[$1060 >> 1] = 762;
 HEAP16[$1060 + 2 >> 1] = 493;
 HEAP16[$1060 + 4 >> 1] = 214;
 HEAP16[$1060 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1059, $1060);
 $19469 = $1061;
 HEAP32[$19469 >> 2] = 28181242;
 HEAP32[$19469 + 4 >> 2] = 9371862;
 HEAP32[$1061 + 8 >> 2] = 63422;
 HEAP16[$1062 >> 1] = 762;
 HEAP16[$1062 + 2 >> 1] = 498;
 HEAP16[$1062 + 4 >> 1] = 5;
 HEAP16[$1062 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1061, $1062);
 $19477 = $1063;
 HEAP32[$19477 >> 2] = 28181242;
 HEAP32[$19477 + 4 >> 2] = 9371862;
 HEAP32[$1063 + 8 >> 2] = 63422;
 HEAP16[$1064 >> 1] = 971;
 HEAP16[$1064 + 2 >> 1] = 498;
 HEAP16[$1064 + 4 >> 1] = 5;
 HEAP16[$1064 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1063, $1064);
 $19485 = $1065;
 HEAP32[$19485 >> 2] = 28181242;
 HEAP32[$19485 + 4 >> 2] = 9371862;
 HEAP32[$1065 + 8 >> 2] = 63422;
 HEAP16[$1066 >> 1] = 762;
 HEAP16[$1066 + 2 >> 1] = 524;
 HEAP16[$1066 + 4 >> 1] = 214;
 HEAP16[$1066 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1065, $1066);
 $19493 = $1067;
 HEAP32[$19493 >> 2] = 28181242;
 HEAP32[$19493 + 4 >> 2] = 9371862;
 HEAP32[$1067 + 8 >> 2] = 63422;
 HEAP16[$1068 >> 1] = 762;
 HEAP16[$1068 + 2 >> 1] = 529;
 HEAP16[$1068 + 4 >> 1] = 5;
 HEAP16[$1068 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1067, $1068);
 $19501 = $1069;
 HEAP32[$19501 >> 2] = 28181242;
 HEAP32[$19501 + 4 >> 2] = 9371862;
 HEAP32[$1069 + 8 >> 2] = 63422;
 HEAP16[$1070 >> 1] = 971;
 HEAP16[$1070 + 2 >> 1] = 529;
 HEAP16[$1070 + 4 >> 1] = 5;
 HEAP16[$1070 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1069, $1070);
 $19509 = $1071;
 HEAP32[$19509 >> 2] = 28181242;
 HEAP32[$19509 + 4 >> 2] = 9371862;
 HEAP32[$1071 + 8 >> 2] = 63422;
 HEAP16[$1072 >> 1] = 762;
 HEAP16[$1072 + 2 >> 1] = 568;
 HEAP16[$1072 + 4 >> 1] = 214;
 HEAP16[$1072 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1071, $1072);
 $19517 = $1073;
 HEAP32[$19517 >> 2] = 14942430;
 HEAP32[$19517 + 4 >> 2] = 12517915;
 HEAP32[$1073 + 8 >> 2] = 63422;
 HEAP16[$1074 >> 1] = 222;
 HEAP16[$1074 + 2 >> 1] = 228;
 HEAP16[$1074 + 4 >> 1] = 3;
 HEAP16[$1074 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1073, $1074);
 $19525 = $1075;
 HEAP32[$19525 >> 2] = 14942430;
 HEAP32[$19525 + 4 >> 2] = 12517915;
 HEAP32[$1075 + 8 >> 2] = 63422;
 HEAP16[$1076 >> 1] = 434;
 HEAP16[$1076 + 2 >> 1] = 228;
 HEAP16[$1076 + 4 >> 1] = 6;
 HEAP16[$1076 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1075, $1076);
 $19533 = $1077;
 HEAP32[$19533 >> 2] = 14942430;
 HEAP32[$19533 + 4 >> 2] = 12517915;
 HEAP32[$1077 + 8 >> 2] = 63422;
 HEAP16[$1078 >> 1] = 758;
 HEAP16[$1078 + 2 >> 1] = 228;
 HEAP16[$1078 + 4 >> 1] = 3;
 HEAP16[$1078 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1077, $1078);
 $19541 = $1079;
 HEAP32[$19541 >> 2] = 14942430;
 HEAP32[$19541 + 4 >> 2] = 12517915;
 HEAP32[$1079 + 8 >> 2] = 63422;
 HEAP16[$1080 >> 1] = 222;
 HEAP16[$1080 + 2 >> 1] = 381;
 HEAP16[$1080 + 4 >> 1] = 539;
 HEAP16[$1080 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1079, $1080);
 $19549 = $1081;
 HEAP32[$19549 >> 2] = 14942430;
 HEAP32[$19549 + 4 >> 2] = 12517915;
 HEAP32[$1081 + 8 >> 2] = 63422;
 HEAP16[$1082 >> 1] = 222;
 HEAP16[$1082 + 2 >> 1] = 384;
 HEAP16[$1082 + 4 >> 1] = 3;
 HEAP16[$1082 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1081, $1082);
 $19557 = $1083;
 HEAP32[$19557 >> 2] = 14942430;
 HEAP32[$19557 + 4 >> 2] = 12517915;
 HEAP32[$1083 + 8 >> 2] = 63422;
 HEAP16[$1084 >> 1] = 531;
 HEAP16[$1084 + 2 >> 1] = 384;
 HEAP16[$1084 + 4 >> 1] = 230;
 HEAP16[$1084 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1083, $1084);
 $19565 = $1085;
 HEAP32[$19565 >> 2] = 14942430;
 HEAP32[$19565 + 4 >> 2] = 12517915;
 HEAP32[$1085 + 8 >> 2] = 63422;
 HEAP16[$1086 >> 1] = 222;
 HEAP16[$1086 + 2 >> 1] = 416;
 HEAP16[$1086 + 4 >> 1] = 539;
 HEAP16[$1086 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1085, $1086);
 $19573 = $1087;
 HEAP32[$19573 >> 2] = 11206867;
 HEAP32[$19573 + 4 >> 2] = 1704713;
 HEAP32[$1087 + 8 >> 2] = 54938;
 HEAP16[$1088 >> 1] = 211;
 HEAP16[$1088 + 2 >> 1] = 171;
 HEAP16[$1088 + 4 >> 1] = 777;
 HEAP16[$1088 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1087, $1088);
 $19581 = $1089;
 HEAP32[$19581 >> 2] = 11206867;
 HEAP32[$19581 + 4 >> 2] = 1704713;
 HEAP32[$1089 + 8 >> 2] = 54938;
 HEAP16[$1090 >> 1] = 211;
 HEAP16[$1090 + 2 >> 1] = 172;
 HEAP16[$1090 + 4 >> 1] = 1;
 HEAP16[$1090 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1089, $1090);
 $19589 = $1091;
 HEAP32[$19589 >> 2] = 11206867;
 HEAP32[$19589 + 4 >> 2] = 1704713;
 HEAP32[$1091 + 8 >> 2] = 54938;
 HEAP16[$1092 >> 1] = 987;
 HEAP16[$1092 + 2 >> 1] = 172;
 HEAP16[$1092 + 4 >> 1] = 1;
 HEAP16[$1092 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1091, $1092);
 $19597 = $1093;
 HEAP32[$19597 >> 2] = 11206867;
 HEAP32[$19597 + 4 >> 2] = 1704713;
 HEAP32[$1093 + 8 >> 2] = 54938;
 HEAP16[$1094 >> 1] = 211;
 HEAP16[$1094 + 2 >> 1] = 196;
 HEAP16[$1094 + 4 >> 1] = 777;
 HEAP16[$1094 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1093, $1094);
 $19605 = $1095;
 HEAP32[$19605 >> 2] = 11206867;
 HEAP32[$19605 + 4 >> 2] = 1704721;
 HEAP32[$1095 + 8 >> 2] = 54938;
 HEAP16[$1096 >> 1] = 211;
 HEAP16[$1096 + 2 >> 1] = 171;
 HEAP16[$1096 + 4 >> 1] = 785;
 HEAP16[$1096 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1095, $1096);
 $19613 = $1097;
 HEAP32[$19613 >> 2] = 11206867;
 HEAP32[$19613 + 4 >> 2] = 1704721;
 HEAP32[$1097 + 8 >> 2] = 54938;
 HEAP16[$1098 >> 1] = 211;
 HEAP16[$1098 + 2 >> 1] = 172;
 HEAP16[$1098 + 4 >> 1] = 1;
 HEAP16[$1098 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1097, $1098);
 $19621 = $1099;
 HEAP32[$19621 >> 2] = 11206867;
 HEAP32[$19621 + 4 >> 2] = 1704721;
 HEAP32[$1099 + 8 >> 2] = 54938;
 HEAP16[$1100 >> 1] = 987;
 HEAP16[$1100 + 2 >> 1] = 172;
 HEAP16[$1100 + 4 >> 1] = 9;
 HEAP16[$1100 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1099, $1100);
 $19629 = $1101;
 HEAP32[$19629 >> 2] = 11206867;
 HEAP32[$19629 + 4 >> 2] = 1704721;
 HEAP32[$1101 + 8 >> 2] = 54938;
 HEAP16[$1102 >> 1] = 211;
 HEAP16[$1102 + 2 >> 1] = 196;
 HEAP16[$1102 + 4 >> 1] = 785;
 HEAP16[$1102 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1101, $1102);
 $19637 = $1103;
 HEAP32[$19637 >> 2] = 12910803;
 HEAP32[$19637 + 4 >> 2] = 27722513;
 HEAP32[$1103 + 8 >> 2] = 54938;
 HEAP16[$1104 >> 1] = 211;
 HEAP16[$1104 + 2 >> 1] = 197;
 HEAP16[$1104 + 4 >> 1] = 1;
 HEAP16[$1104 + 6 >> 1] = 422;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1103, $1104);
 $19645 = $1105;
 HEAP32[$19645 >> 2] = 12910803;
 HEAP32[$19645 + 4 >> 2] = 27722513;
 HEAP32[$1105 + 8 >> 2] = 54938;
 HEAP16[$1106 >> 1] = 987;
 HEAP16[$1106 + 2 >> 1] = 197;
 HEAP16[$1106 + 4 >> 1] = 9;
 HEAP16[$1106 + 6 >> 1] = 422;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1105, $1106);
 $19653 = $1107;
 HEAP32[$19653 >> 2] = 12910803;
 HEAP32[$19653 + 4 >> 2] = 27722513;
 HEAP32[$1107 + 8 >> 2] = 54938;
 HEAP16[$1108 >> 1] = 211;
 HEAP16[$1108 + 2 >> 1] = 619;
 HEAP16[$1108 + 4 >> 1] = 785;
 HEAP16[$1108 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1107, $1108);
 $19661 = $1109;
 HEAP32[$19661 >> 2] = 39977172;
 HEAP32[$19661 + 4 >> 2] = 590599;
 HEAP32[$1109 + 8 >> 2] = 63422;
 HEAP16[$1110 >> 1] = 212;
 HEAP16[$1110 + 2 >> 1] = 610;
 HEAP16[$1110 + 4 >> 1] = 775;
 HEAP16[$1110 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1109, $1110);
 $19669 = $1111;
 HEAP32[$19669 >> 2] = 29950174;
 HEAP32[$19669 + 4 >> 2] = 10027547;
 HEAP32[$1111 + 8 >> 2] = 63422;
 HEAP16[$1112 >> 1] = 222;
 HEAP16[$1112 + 2 >> 1] = 457;
 HEAP16[$1112 + 4 >> 1] = 3;
 HEAP16[$1112 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1111, $1112);
 $19677 = $1113;
 HEAP32[$19677 >> 2] = 29950174;
 HEAP32[$19677 + 4 >> 2] = 10027547;
 HEAP32[$1113 + 8 >> 2] = 63422;
 HEAP16[$1114 >> 1] = 434;
 HEAP16[$1114 + 2 >> 1] = 457;
 HEAP16[$1114 + 4 >> 1] = 6;
 HEAP16[$1114 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1113, $1114);
 $19685 = $1115;
 HEAP32[$19685 >> 2] = 29950174;
 HEAP32[$19685 + 4 >> 2] = 10027547;
 HEAP32[$1115 + 8 >> 2] = 63422;
 HEAP16[$1116 >> 1] = 758;
 HEAP16[$1116 + 2 >> 1] = 457;
 HEAP16[$1116 + 4 >> 1] = 3;
 HEAP16[$1116 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1115, $1116);
 $19693 = $1117;
 HEAP32[$19693 >> 2] = 29950174;
 HEAP32[$19693 + 4 >> 2] = 10027547;
 HEAP32[$1117 + 8 >> 2] = 63422;
 HEAP16[$1118 >> 1] = 222;
 HEAP16[$1118 + 2 >> 1] = 591;
 HEAP16[$1118 + 4 >> 1] = 3;
 HEAP16[$1118 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1117, $1118);
 $19701 = $1119;
 HEAP32[$19701 >> 2] = 29950174;
 HEAP32[$19701 + 4 >> 2] = 10027547;
 HEAP32[$1119 + 8 >> 2] = 63422;
 HEAP16[$1120 >> 1] = 434;
 HEAP16[$1120 + 2 >> 1] = 591;
 HEAP16[$1120 + 4 >> 1] = 327;
 HEAP16[$1120 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1119, $1120);
 $19709 = $1121;
 HEAP32[$19709 >> 2] = 28181242;
 HEAP32[$19709 + 4 >> 2] = 9371862;
 HEAP32[$1121 + 8 >> 2] = 63422;
 HEAP16[$1122 >> 1] = 762;
 HEAP16[$1122 + 2 >> 1] = 430;
 HEAP16[$1122 + 4 >> 1] = 214;
 HEAP16[$1122 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1121, $1122);
 $19717 = $1123;
 HEAP32[$19717 >> 2] = 28181242;
 HEAP32[$19717 + 4 >> 2] = 9371862;
 HEAP32[$1123 + 8 >> 2] = 63422;
 HEAP16[$1124 >> 1] = 762;
 HEAP16[$1124 + 2 >> 1] = 435;
 HEAP16[$1124 + 4 >> 1] = 5;
 HEAP16[$1124 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1123, $1124);
 $19725 = $1125;
 HEAP32[$19725 >> 2] = 28181242;
 HEAP32[$19725 + 4 >> 2] = 9371862;
 HEAP32[$1125 + 8 >> 2] = 63422;
 HEAP16[$1126 >> 1] = 971;
 HEAP16[$1126 + 2 >> 1] = 435;
 HEAP16[$1126 + 4 >> 1] = 5;
 HEAP16[$1126 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1125, $1126);
 $19733 = $1127;
 HEAP32[$19733 >> 2] = 28181242;
 HEAP32[$19733 + 4 >> 2] = 9371862;
 HEAP32[$1127 + 8 >> 2] = 63422;
 HEAP16[$1128 >> 1] = 762;
 HEAP16[$1128 + 2 >> 1] = 451;
 HEAP16[$1128 + 4 >> 1] = 214;
 HEAP16[$1128 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1127, $1128);
 $19741 = $1129;
 HEAP32[$19741 >> 2] = 28181242;
 HEAP32[$19741 + 4 >> 2] = 9371862;
 HEAP32[$1129 + 8 >> 2] = 63422;
 HEAP16[$1130 >> 1] = 762;
 HEAP16[$1130 + 2 >> 1] = 456;
 HEAP16[$1130 + 4 >> 1] = 5;
 HEAP16[$1130 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1129, $1130);
 $19749 = $1131;
 HEAP32[$19749 >> 2] = 28181242;
 HEAP32[$19749 + 4 >> 2] = 9371862;
 HEAP32[$1131 + 8 >> 2] = 63422;
 HEAP16[$1132 >> 1] = 971;
 HEAP16[$1132 + 2 >> 1] = 456;
 HEAP16[$1132 + 4 >> 1] = 5;
 HEAP16[$1132 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1131, $1132);
 $19757 = $1133;
 HEAP32[$19757 >> 2] = 28181242;
 HEAP32[$19757 + 4 >> 2] = 9371862;
 HEAP32[$1133 + 8 >> 2] = 63422;
 HEAP16[$1134 >> 1] = 762;
 HEAP16[$1134 + 2 >> 1] = 472;
 HEAP16[$1134 + 4 >> 1] = 214;
 HEAP16[$1134 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1133, $1134);
 $19765 = $1135;
 HEAP32[$19765 >> 2] = 28181242;
 HEAP32[$19765 + 4 >> 2] = 9371862;
 HEAP32[$1135 + 8 >> 2] = 63422;
 HEAP16[$1136 >> 1] = 762;
 HEAP16[$1136 + 2 >> 1] = 477;
 HEAP16[$1136 + 4 >> 1] = 5;
 HEAP16[$1136 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1135, $1136);
 $19773 = $1137;
 HEAP32[$19773 >> 2] = 28181242;
 HEAP32[$19773 + 4 >> 2] = 9371862;
 HEAP32[$1137 + 8 >> 2] = 63422;
 HEAP16[$1138 >> 1] = 971;
 HEAP16[$1138 + 2 >> 1] = 477;
 HEAP16[$1138 + 4 >> 1] = 5;
 HEAP16[$1138 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1137, $1138);
 $19781 = $1139;
 HEAP32[$19781 >> 2] = 28181242;
 HEAP32[$19781 + 4 >> 2] = 9371862;
 HEAP32[$1139 + 8 >> 2] = 63422;
 HEAP16[$1140 >> 1] = 762;
 HEAP16[$1140 + 2 >> 1] = 493;
 HEAP16[$1140 + 4 >> 1] = 214;
 HEAP16[$1140 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1139, $1140);
 $19789 = $1141;
 HEAP32[$19789 >> 2] = 28181242;
 HEAP32[$19789 + 4 >> 2] = 9371862;
 HEAP32[$1141 + 8 >> 2] = 63422;
 HEAP16[$1142 >> 1] = 762;
 HEAP16[$1142 + 2 >> 1] = 498;
 HEAP16[$1142 + 4 >> 1] = 5;
 HEAP16[$1142 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1141, $1142);
 $19797 = $1143;
 HEAP32[$19797 >> 2] = 28181242;
 HEAP32[$19797 + 4 >> 2] = 9371862;
 HEAP32[$1143 + 8 >> 2] = 63422;
 HEAP16[$1144 >> 1] = 971;
 HEAP16[$1144 + 2 >> 1] = 498;
 HEAP16[$1144 + 4 >> 1] = 5;
 HEAP16[$1144 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1143, $1144);
 $19805 = $1145;
 HEAP32[$19805 >> 2] = 28181242;
 HEAP32[$19805 + 4 >> 2] = 9371862;
 HEAP32[$1145 + 8 >> 2] = 63422;
 HEAP16[$1146 >> 1] = 762;
 HEAP16[$1146 + 2 >> 1] = 524;
 HEAP16[$1146 + 4 >> 1] = 214;
 HEAP16[$1146 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1145, $1146);
 $19813 = $1147;
 HEAP32[$19813 >> 2] = 28181242;
 HEAP32[$19813 + 4 >> 2] = 9371862;
 HEAP32[$1147 + 8 >> 2] = 63422;
 HEAP16[$1148 >> 1] = 762;
 HEAP16[$1148 + 2 >> 1] = 529;
 HEAP16[$1148 + 4 >> 1] = 5;
 HEAP16[$1148 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1147, $1148);
 $19821 = $1149;
 HEAP32[$19821 >> 2] = 28181242;
 HEAP32[$19821 + 4 >> 2] = 9371862;
 HEAP32[$1149 + 8 >> 2] = 63422;
 HEAP16[$1150 >> 1] = 971;
 HEAP16[$1150 + 2 >> 1] = 529;
 HEAP16[$1150 + 4 >> 1] = 5;
 HEAP16[$1150 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1149, $1150);
 $19829 = $1151;
 HEAP32[$19829 >> 2] = 28181242;
 HEAP32[$19829 + 4 >> 2] = 9371862;
 HEAP32[$1151 + 8 >> 2] = 63422;
 HEAP16[$1152 >> 1] = 762;
 HEAP16[$1152 + 2 >> 1] = 568;
 HEAP16[$1152 + 4 >> 1] = 214;
 HEAP16[$1152 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1151, $1152);
 $19837 = $1153;
 HEAP32[$19837 >> 2] = 14942430;
 HEAP32[$19837 + 4 >> 2] = 12517915;
 HEAP32[$1153 + 8 >> 2] = 63422;
 HEAP16[$1154 >> 1] = 222;
 HEAP16[$1154 + 2 >> 1] = 228;
 HEAP16[$1154 + 4 >> 1] = 3;
 HEAP16[$1154 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1153, $1154);
 $19845 = $1155;
 HEAP32[$19845 >> 2] = 14942430;
 HEAP32[$19845 + 4 >> 2] = 12517915;
 HEAP32[$1155 + 8 >> 2] = 63422;
 HEAP16[$1156 >> 1] = 434;
 HEAP16[$1156 + 2 >> 1] = 228;
 HEAP16[$1156 + 4 >> 1] = 6;
 HEAP16[$1156 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1155, $1156);
 $19853 = $1157;
 HEAP32[$19853 >> 2] = 14942430;
 HEAP32[$19853 + 4 >> 2] = 12517915;
 HEAP32[$1157 + 8 >> 2] = 63422;
 HEAP16[$1158 >> 1] = 758;
 HEAP16[$1158 + 2 >> 1] = 228;
 HEAP16[$1158 + 4 >> 1] = 3;
 HEAP16[$1158 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1157, $1158);
 $19861 = $1159;
 HEAP32[$19861 >> 2] = 14942430;
 HEAP32[$19861 + 4 >> 2] = 12517915;
 HEAP32[$1159 + 8 >> 2] = 63422;
 HEAP16[$1160 >> 1] = 222;
 HEAP16[$1160 + 2 >> 1] = 381;
 HEAP16[$1160 + 4 >> 1] = 539;
 HEAP16[$1160 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1159, $1160);
 $19869 = $1161;
 HEAP32[$19869 >> 2] = 14942430;
 HEAP32[$19869 + 4 >> 2] = 12517915;
 HEAP32[$1161 + 8 >> 2] = 63422;
 HEAP16[$1162 >> 1] = 222;
 HEAP16[$1162 + 2 >> 1] = 384;
 HEAP16[$1162 + 4 >> 1] = 3;
 HEAP16[$1162 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1161, $1162);
 $19877 = $1163;
 HEAP32[$19877 >> 2] = 14942430;
 HEAP32[$19877 + 4 >> 2] = 12517915;
 HEAP32[$1163 + 8 >> 2] = 63422;
 HEAP16[$1164 >> 1] = 531;
 HEAP16[$1164 + 2 >> 1] = 384;
 HEAP16[$1164 + 4 >> 1] = 230;
 HEAP16[$1164 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1163, $1164);
 $19885 = $1165;
 HEAP32[$19885 >> 2] = 14942430;
 HEAP32[$19885 + 4 >> 2] = 12517915;
 HEAP32[$1165 + 8 >> 2] = 63422;
 HEAP16[$1166 >> 1] = 222;
 HEAP16[$1166 + 2 >> 1] = 416;
 HEAP16[$1166 + 4 >> 1] = 539;
 HEAP16[$1166 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1165, $1166);
 $19893 = $1167;
 HEAP32[$19893 >> 2] = 12910804;
 HEAP32[$19893 + 4 >> 2] = 27656975;
 HEAP32[$1167 + 8 >> 2] = 63422;
 HEAP16[$1168 >> 1] = 987;
 HEAP16[$1168 + 2 >> 1] = 197;
 HEAP16[$1168 + 4 >> 1] = 8;
 HEAP16[$1168 + 6 >> 1] = 413;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1167, $1168);
 $19901 = $1169;
 HEAP32[$19901 >> 2] = 12910804;
 HEAP32[$19901 + 4 >> 2] = 27656975;
 HEAP32[$1169 + 8 >> 2] = 63422;
 HEAP16[$1170 >> 1] = 212;
 HEAP16[$1170 + 2 >> 1] = 610;
 HEAP16[$1170 + 4 >> 1] = 783;
 HEAP16[$1170 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1169, $1170);
 $19909 = $1171;
 HEAP32[$19909 >> 2] = 29950174;
 HEAP32[$19909 + 4 >> 2] = 10027547;
 HEAP32[$1171 + 8 >> 2] = 63422;
 HEAP16[$1172 >> 1] = 222;
 HEAP16[$1172 + 2 >> 1] = 457;
 HEAP16[$1172 + 4 >> 1] = 3;
 HEAP16[$1172 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1171, $1172);
 $19917 = $1173;
 HEAP32[$19917 >> 2] = 29950174;
 HEAP32[$19917 + 4 >> 2] = 10027547;
 HEAP32[$1173 + 8 >> 2] = 63422;
 HEAP16[$1174 >> 1] = 434;
 HEAP16[$1174 + 2 >> 1] = 457;
 HEAP16[$1174 + 4 >> 1] = 6;
 HEAP16[$1174 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1173, $1174);
 $19925 = $1175;
 HEAP32[$19925 >> 2] = 29950174;
 HEAP32[$19925 + 4 >> 2] = 10027547;
 HEAP32[$1175 + 8 >> 2] = 63422;
 HEAP16[$1176 >> 1] = 758;
 HEAP16[$1176 + 2 >> 1] = 457;
 HEAP16[$1176 + 4 >> 1] = 3;
 HEAP16[$1176 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1175, $1176);
 $19933 = $1177;
 HEAP32[$19933 >> 2] = 29950174;
 HEAP32[$19933 + 4 >> 2] = 10027547;
 HEAP32[$1177 + 8 >> 2] = 63422;
 HEAP16[$1178 >> 1] = 222;
 HEAP16[$1178 + 2 >> 1] = 591;
 HEAP16[$1178 + 4 >> 1] = 3;
 HEAP16[$1178 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1177, $1178);
 $19941 = $1179;
 HEAP32[$19941 >> 2] = 29950174;
 HEAP32[$19941 + 4 >> 2] = 10027547;
 HEAP32[$1179 + 8 >> 2] = 63422;
 HEAP16[$1180 >> 1] = 434;
 HEAP16[$1180 + 2 >> 1] = 591;
 HEAP16[$1180 + 4 >> 1] = 327;
 HEAP16[$1180 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1179, $1180);
 $19949 = $1181;
 HEAP32[$19949 >> 2] = 28181242;
 HEAP32[$19949 + 4 >> 2] = 9371862;
 HEAP32[$1181 + 8 >> 2] = 63422;
 HEAP16[$1182 >> 1] = 762;
 HEAP16[$1182 + 2 >> 1] = 430;
 HEAP16[$1182 + 4 >> 1] = 214;
 HEAP16[$1182 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1181, $1182);
 $19957 = $1183;
 HEAP32[$19957 >> 2] = 28181242;
 HEAP32[$19957 + 4 >> 2] = 9371862;
 HEAP32[$1183 + 8 >> 2] = 63422;
 HEAP16[$1184 >> 1] = 762;
 HEAP16[$1184 + 2 >> 1] = 435;
 HEAP16[$1184 + 4 >> 1] = 5;
 HEAP16[$1184 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1183, $1184);
 $19965 = $1185;
 HEAP32[$19965 >> 2] = 28181242;
 HEAP32[$19965 + 4 >> 2] = 9371862;
 HEAP32[$1185 + 8 >> 2] = 63422;
 HEAP16[$1186 >> 1] = 971;
 HEAP16[$1186 + 2 >> 1] = 435;
 HEAP16[$1186 + 4 >> 1] = 5;
 HEAP16[$1186 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1185, $1186);
 $19973 = $1187;
 HEAP32[$19973 >> 2] = 28181242;
 HEAP32[$19973 + 4 >> 2] = 9371862;
 HEAP32[$1187 + 8 >> 2] = 63422;
 HEAP16[$1188 >> 1] = 762;
 HEAP16[$1188 + 2 >> 1] = 451;
 HEAP16[$1188 + 4 >> 1] = 214;
 HEAP16[$1188 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1187, $1188);
 $19981 = $1189;
 HEAP32[$19981 >> 2] = 28181242;
 HEAP32[$19981 + 4 >> 2] = 9371862;
 HEAP32[$1189 + 8 >> 2] = 63422;
 HEAP16[$1190 >> 1] = 762;
 HEAP16[$1190 + 2 >> 1] = 456;
 HEAP16[$1190 + 4 >> 1] = 5;
 HEAP16[$1190 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1189, $1190);
 $19989 = $1191;
 HEAP32[$19989 >> 2] = 28181242;
 HEAP32[$19989 + 4 >> 2] = 9371862;
 HEAP32[$1191 + 8 >> 2] = 63422;
 HEAP16[$1192 >> 1] = 971;
 HEAP16[$1192 + 2 >> 1] = 456;
 HEAP16[$1192 + 4 >> 1] = 5;
 HEAP16[$1192 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1191, $1192);
 $19997 = $1193;
 HEAP32[$19997 >> 2] = 28181242;
 HEAP32[$19997 + 4 >> 2] = 9371862;
 HEAP32[$1193 + 8 >> 2] = 63422;
 HEAP16[$1194 >> 1] = 762;
 HEAP16[$1194 + 2 >> 1] = 472;
 HEAP16[$1194 + 4 >> 1] = 214;
 HEAP16[$1194 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1193, $1194);
 $20005 = $1195;
 HEAP32[$20005 >> 2] = 28181242;
 HEAP32[$20005 + 4 >> 2] = 9371862;
 HEAP32[$1195 + 8 >> 2] = 63422;
 HEAP16[$1196 >> 1] = 762;
 HEAP16[$1196 + 2 >> 1] = 477;
 HEAP16[$1196 + 4 >> 1] = 5;
 HEAP16[$1196 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1195, $1196);
 $20013 = $1197;
 HEAP32[$20013 >> 2] = 28181242;
 HEAP32[$20013 + 4 >> 2] = 9371862;
 HEAP32[$1197 + 8 >> 2] = 63422;
 HEAP16[$1198 >> 1] = 971;
 HEAP16[$1198 + 2 >> 1] = 477;
 HEAP16[$1198 + 4 >> 1] = 5;
 HEAP16[$1198 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1197, $1198);
 $20021 = $1199;
 HEAP32[$20021 >> 2] = 28181242;
 HEAP32[$20021 + 4 >> 2] = 9371862;
 HEAP32[$1199 + 8 >> 2] = 63422;
 HEAP16[$1200 >> 1] = 762;
 HEAP16[$1200 + 2 >> 1] = 493;
 HEAP16[$1200 + 4 >> 1] = 214;
 HEAP16[$1200 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1199, $1200);
 $20029 = $1201;
 HEAP32[$20029 >> 2] = 28181242;
 HEAP32[$20029 + 4 >> 2] = 9371862;
 HEAP32[$1201 + 8 >> 2] = 63422;
 HEAP16[$1202 >> 1] = 762;
 HEAP16[$1202 + 2 >> 1] = 498;
 HEAP16[$1202 + 4 >> 1] = 5;
 HEAP16[$1202 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1201, $1202);
 $20037 = $1203;
 HEAP32[$20037 >> 2] = 28181242;
 HEAP32[$20037 + 4 >> 2] = 9371862;
 HEAP32[$1203 + 8 >> 2] = 63422;
 HEAP16[$1204 >> 1] = 971;
 HEAP16[$1204 + 2 >> 1] = 498;
 HEAP16[$1204 + 4 >> 1] = 5;
 HEAP16[$1204 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1203, $1204);
 $20045 = $1205;
 HEAP32[$20045 >> 2] = 28181242;
 HEAP32[$20045 + 4 >> 2] = 9371862;
 HEAP32[$1205 + 8 >> 2] = 63422;
 HEAP16[$1206 >> 1] = 762;
 HEAP16[$1206 + 2 >> 1] = 524;
 HEAP16[$1206 + 4 >> 1] = 214;
 HEAP16[$1206 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1205, $1206);
 $20053 = $1207;
 HEAP32[$20053 >> 2] = 28181242;
 HEAP32[$20053 + 4 >> 2] = 9371862;
 HEAP32[$1207 + 8 >> 2] = 63422;
 HEAP16[$1208 >> 1] = 762;
 HEAP16[$1208 + 2 >> 1] = 529;
 HEAP16[$1208 + 4 >> 1] = 5;
 HEAP16[$1208 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1207, $1208);
 $20061 = $1209;
 HEAP32[$20061 >> 2] = 28181242;
 HEAP32[$20061 + 4 >> 2] = 9371862;
 HEAP32[$1209 + 8 >> 2] = 63422;
 HEAP16[$1210 >> 1] = 971;
 HEAP16[$1210 + 2 >> 1] = 529;
 HEAP16[$1210 + 4 >> 1] = 5;
 HEAP16[$1210 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1209, $1210);
 $20069 = $1211;
 HEAP32[$20069 >> 2] = 28181242;
 HEAP32[$20069 + 4 >> 2] = 9371862;
 HEAP32[$1211 + 8 >> 2] = 63422;
 HEAP16[$1212 >> 1] = 762;
 HEAP16[$1212 + 2 >> 1] = 568;
 HEAP16[$1212 + 4 >> 1] = 214;
 HEAP16[$1212 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1211, $1212);
 $20077 = $1213;
 HEAP32[$20077 >> 2] = 14942430;
 HEAP32[$20077 + 4 >> 2] = 12517915;
 HEAP32[$1213 + 8 >> 2] = 63422;
 HEAP16[$1214 >> 1] = 222;
 HEAP16[$1214 + 2 >> 1] = 228;
 HEAP16[$1214 + 4 >> 1] = 3;
 HEAP16[$1214 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1213, $1214);
 $20085 = $1215;
 HEAP32[$20085 >> 2] = 14942430;
 HEAP32[$20085 + 4 >> 2] = 12517915;
 HEAP32[$1215 + 8 >> 2] = 63422;
 HEAP16[$1216 >> 1] = 434;
 HEAP16[$1216 + 2 >> 1] = 228;
 HEAP16[$1216 + 4 >> 1] = 6;
 HEAP16[$1216 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1215, $1216);
 $20093 = $1217;
 HEAP32[$20093 >> 2] = 14942430;
 HEAP32[$20093 + 4 >> 2] = 12517915;
 HEAP32[$1217 + 8 >> 2] = 63422;
 HEAP16[$1218 >> 1] = 758;
 HEAP16[$1218 + 2 >> 1] = 228;
 HEAP16[$1218 + 4 >> 1] = 3;
 HEAP16[$1218 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1217, $1218);
 $20101 = $1219;
 HEAP32[$20101 >> 2] = 14942430;
 HEAP32[$20101 + 4 >> 2] = 12517915;
 HEAP32[$1219 + 8 >> 2] = 63422;
 HEAP16[$1220 >> 1] = 222;
 HEAP16[$1220 + 2 >> 1] = 381;
 HEAP16[$1220 + 4 >> 1] = 539;
 HEAP16[$1220 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1219, $1220);
 $20109 = $1221;
 HEAP32[$20109 >> 2] = 14942430;
 HEAP32[$20109 + 4 >> 2] = 12517915;
 HEAP32[$1221 + 8 >> 2] = 63422;
 HEAP16[$1222 >> 1] = 222;
 HEAP16[$1222 + 2 >> 1] = 384;
 HEAP16[$1222 + 4 >> 1] = 3;
 HEAP16[$1222 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1221, $1222);
 $20117 = $1223;
 HEAP32[$20117 >> 2] = 14942430;
 HEAP32[$20117 + 4 >> 2] = 12517915;
 HEAP32[$1223 + 8 >> 2] = 63422;
 HEAP16[$1224 >> 1] = 531;
 HEAP16[$1224 + 2 >> 1] = 384;
 HEAP16[$1224 + 4 >> 1] = 230;
 HEAP16[$1224 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1223, $1224);
 $20125 = $1225;
 HEAP32[$20125 >> 2] = 14942430;
 HEAP32[$20125 + 4 >> 2] = 12517915;
 HEAP32[$1225 + 8 >> 2] = 63422;
 HEAP16[$1226 >> 1] = 222;
 HEAP16[$1226 + 2 >> 1] = 416;
 HEAP16[$1226 + 4 >> 1] = 539;
 HEAP16[$1226 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1225, $1226);
 $20133 = $1227;
 HEAP32[$20133 >> 2] = 14942430;
 HEAP32[$20133 + 4 >> 2] = 12517915;
 HEAP32[$1227 + 8 >> 2] = 63422;
 HEAP16[$1228 >> 1] = 222;
 HEAP16[$1228 + 2 >> 1] = 228;
 HEAP16[$1228 + 4 >> 1] = 3;
 HEAP16[$1228 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1227, $1228);
 $20141 = $1229;
 HEAP32[$20141 >> 2] = 14942430;
 HEAP32[$20141 + 4 >> 2] = 12517915;
 HEAP32[$1229 + 8 >> 2] = 63422;
 HEAP16[$1230 >> 1] = 434;
 HEAP16[$1230 + 2 >> 1] = 228;
 HEAP16[$1230 + 4 >> 1] = 6;
 HEAP16[$1230 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1229, $1230);
 $20149 = $1231;
 HEAP32[$20149 >> 2] = 14942430;
 HEAP32[$20149 + 4 >> 2] = 12517915;
 HEAP32[$1231 + 8 >> 2] = 63422;
 HEAP16[$1232 >> 1] = 758;
 HEAP16[$1232 + 2 >> 1] = 228;
 HEAP16[$1232 + 4 >> 1] = 3;
 HEAP16[$1232 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1231, $1232);
 $20157 = $1233;
 HEAP32[$20157 >> 2] = 14942430;
 HEAP32[$20157 + 4 >> 2] = 12517915;
 HEAP32[$1233 + 8 >> 2] = 63422;
 HEAP16[$1234 >> 1] = 222;
 HEAP16[$1234 + 2 >> 1] = 381;
 HEAP16[$1234 + 4 >> 1] = 539;
 HEAP16[$1234 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1233, $1234);
 $20165 = $1235;
 HEAP32[$20165 >> 2] = 14942430;
 HEAP32[$20165 + 4 >> 2] = 12517915;
 HEAP32[$1235 + 8 >> 2] = 63422;
 HEAP16[$1236 >> 1] = 222;
 HEAP16[$1236 + 2 >> 1] = 384;
 HEAP16[$1236 + 4 >> 1] = 3;
 HEAP16[$1236 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1235, $1236);
 $20173 = $1237;
 HEAP32[$20173 >> 2] = 14942430;
 HEAP32[$20173 + 4 >> 2] = 12517915;
 HEAP32[$1237 + 8 >> 2] = 63422;
 HEAP16[$1238 >> 1] = 531;
 HEAP16[$1238 + 2 >> 1] = 384;
 HEAP16[$1238 + 4 >> 1] = 230;
 HEAP16[$1238 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1237, $1238);
 $20181 = $1239;
 HEAP32[$20181 >> 2] = 14942430;
 HEAP32[$20181 + 4 >> 2] = 12517915;
 HEAP32[$1239 + 8 >> 2] = 63422;
 HEAP16[$1240 >> 1] = 222;
 HEAP16[$1240 + 2 >> 1] = 416;
 HEAP16[$1240 + 4 >> 1] = 539;
 HEAP16[$1240 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1239, $1240);
 $20189 = $1241;
 HEAP32[$20189 >> 2] = 14942430;
 HEAP32[$20189 + 4 >> 2] = 12517923;
 HEAP32[$1241 + 8 >> 2] = 63422;
 HEAP16[$1242 >> 1] = 222;
 HEAP16[$1242 + 2 >> 1] = 228;
 HEAP16[$1242 + 4 >> 1] = 3;
 HEAP16[$1242 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1241, $1242);
 $20197 = $1243;
 HEAP32[$20197 >> 2] = 14942430;
 HEAP32[$20197 + 4 >> 2] = 12517923;
 HEAP32[$1243 + 8 >> 2] = 63422;
 HEAP16[$1244 >> 1] = 434;
 HEAP16[$1244 + 2 >> 1] = 228;
 HEAP16[$1244 + 4 >> 1] = 6;
 HEAP16[$1244 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1243, $1244);
 $20205 = $1245;
 HEAP32[$20205 >> 2] = 14942430;
 HEAP32[$20205 + 4 >> 2] = 12517923;
 HEAP32[$1245 + 8 >> 2] = 63422;
 HEAP16[$1246 >> 1] = 758;
 HEAP16[$1246 + 2 >> 1] = 228;
 HEAP16[$1246 + 4 >> 1] = 11;
 HEAP16[$1246 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1245, $1246);
 $20213 = $1247;
 HEAP32[$20213 >> 2] = 14942430;
 HEAP32[$20213 + 4 >> 2] = 12517923;
 HEAP32[$1247 + 8 >> 2] = 63422;
 HEAP16[$1248 >> 1] = 222;
 HEAP16[$1248 + 2 >> 1] = 381;
 HEAP16[$1248 + 4 >> 1] = 547;
 HEAP16[$1248 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1247, $1248);
 $20221 = $1249;
 HEAP32[$20221 >> 2] = 14942430;
 HEAP32[$20221 + 4 >> 2] = 12517923;
 HEAP32[$1249 + 8 >> 2] = 63422;
 HEAP16[$1250 >> 1] = 222;
 HEAP16[$1250 + 2 >> 1] = 384;
 HEAP16[$1250 + 4 >> 1] = 3;
 HEAP16[$1250 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1249, $1250);
 $20229 = $1251;
 HEAP32[$20229 >> 2] = 14942430;
 HEAP32[$20229 + 4 >> 2] = 12517923;
 HEAP32[$1251 + 8 >> 2] = 63422;
 HEAP16[$1252 >> 1] = 531;
 HEAP16[$1252 + 2 >> 1] = 384;
 HEAP16[$1252 + 4 >> 1] = 238;
 HEAP16[$1252 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1251, $1252);
 $20237 = $1253;
 HEAP32[$20237 >> 2] = 14942430;
 HEAP32[$20237 + 4 >> 2] = 12517923;
 HEAP32[$1253 + 8 >> 2] = 63422;
 HEAP16[$1254 >> 1] = 222;
 HEAP16[$1254 + 2 >> 1] = 416;
 HEAP16[$1254 + 4 >> 1] = 547;
 HEAP16[$1254 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1253, $1254);
 $20245 = $1255;
 HEAP32[$20245 >> 2] = 14942430;
 HEAP32[$20245 + 4 >> 2] = 12517923;
 HEAP32[$1255 + 8 >> 2] = 63422;
 HEAP16[$1256 >> 1] = 222;
 HEAP16[$1256 + 2 >> 1] = 228;
 HEAP16[$1256 + 4 >> 1] = 3;
 HEAP16[$1256 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1255, $1256);
 $20253 = $1257;
 HEAP32[$20253 >> 2] = 14942430;
 HEAP32[$20253 + 4 >> 2] = 12517923;
 HEAP32[$1257 + 8 >> 2] = 63422;
 HEAP16[$1258 >> 1] = 437;
 HEAP16[$1258 + 2 >> 1] = 228;
 HEAP16[$1258 + 4 >> 1] = 6;
 HEAP16[$1258 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1257, $1258);
 $20261 = $1259;
 HEAP32[$20261 >> 2] = 14942430;
 HEAP32[$20261 + 4 >> 2] = 12517923;
 HEAP32[$1259 + 8 >> 2] = 63422;
 HEAP16[$1260 >> 1] = 766;
 HEAP16[$1260 + 2 >> 1] = 228;
 HEAP16[$1260 + 4 >> 1] = 3;
 HEAP16[$1260 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1259, $1260);
 $20269 = $1261;
 HEAP32[$20269 >> 2] = 14942430;
 HEAP32[$20269 + 4 >> 2] = 12517923;
 HEAP32[$1261 + 8 >> 2] = 63422;
 HEAP16[$1262 >> 1] = 222;
 HEAP16[$1262 + 2 >> 1] = 256;
 HEAP16[$1262 + 4 >> 1] = 3;
 HEAP16[$1262 + 6 >> 1] = 125;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1261, $1262);
 $20277 = $1263;
 HEAP32[$20277 >> 2] = 14942430;
 HEAP32[$20277 + 4 >> 2] = 12517923;
 HEAP32[$1263 + 8 >> 2] = 63422;
 HEAP16[$1264 >> 1] = 434;
 HEAP16[$1264 + 2 >> 1] = 256;
 HEAP16[$1264 + 4 >> 1] = 6;
 HEAP16[$1264 + 6 >> 1] = 125;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1263, $1264);
 $20285 = $1265;
 HEAP32[$20285 >> 2] = 14942430;
 HEAP32[$20285 + 4 >> 2] = 12517923;
 HEAP32[$1265 + 8 >> 2] = 63422;
 HEAP16[$1266 >> 1] = 758;
 HEAP16[$1266 + 2 >> 1] = 256;
 HEAP16[$1266 + 4 >> 1] = 11;
 HEAP16[$1266 + 6 >> 1] = 125;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1265, $1266);
 $20293 = $1267;
 HEAP32[$20293 >> 2] = 14942430;
 HEAP32[$20293 + 4 >> 2] = 12517923;
 HEAP32[$1267 + 8 >> 2] = 63422;
 HEAP16[$1268 >> 1] = 222;
 HEAP16[$1268 + 2 >> 1] = 381;
 HEAP16[$1268 + 4 >> 1] = 547;
 HEAP16[$1268 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1267, $1268);
 $20301 = $1269;
 HEAP32[$20301 >> 2] = 14942430;
 HEAP32[$20301 + 4 >> 2] = 12517923;
 HEAP32[$1269 + 8 >> 2] = 63422;
 HEAP16[$1270 >> 1] = 222;
 HEAP16[$1270 + 2 >> 1] = 384;
 HEAP16[$1270 + 4 >> 1] = 3;
 HEAP16[$1270 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1269, $1270);
 $20309 = $1271;
 HEAP32[$20309 >> 2] = 14942430;
 HEAP32[$20309 + 4 >> 2] = 12517923;
 HEAP32[$1271 + 8 >> 2] = 63422;
 HEAP16[$1272 >> 1] = 531;
 HEAP16[$1272 + 2 >> 1] = 384;
 HEAP16[$1272 + 4 >> 1] = 238;
 HEAP16[$1272 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1271, $1272);
 $20317 = $1273;
 HEAP32[$20317 >> 2] = 14942430;
 HEAP32[$20317 + 4 >> 2] = 12517923;
 HEAP32[$1273 + 8 >> 2] = 63422;
 HEAP16[$1274 >> 1] = 222;
 HEAP16[$1274 + 2 >> 1] = 416;
 HEAP16[$1274 + 4 >> 1] = 547;
 HEAP16[$1274 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1273, $1274);
 $20325 = $1275;
 HEAP32[$20325 >> 2] = 14942430;
 HEAP32[$20325 + 4 >> 2] = 12517923;
 HEAP32[$1275 + 8 >> 2] = 63422;
 HEAP16[$1276 >> 1] = 222;
 HEAP16[$1276 + 2 >> 1] = 228;
 HEAP16[$1276 + 4 >> 1] = 3;
 HEAP16[$1276 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1275, $1276);
 $20333 = $1277;
 HEAP32[$20333 >> 2] = 14942430;
 HEAP32[$20333 + 4 >> 2] = 12517923;
 HEAP32[$1277 + 8 >> 2] = 63422;
 HEAP16[$1278 >> 1] = 437;
 HEAP16[$1278 + 2 >> 1] = 228;
 HEAP16[$1278 + 4 >> 1] = 6;
 HEAP16[$1278 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1277, $1278);
 $20341 = $1279;
 HEAP32[$20341 >> 2] = 14942430;
 HEAP32[$20341 + 4 >> 2] = 12517923;
 HEAP32[$1279 + 8 >> 2] = 63422;
 HEAP16[$1280 >> 1] = 766;
 HEAP16[$1280 + 2 >> 1] = 228;
 HEAP16[$1280 + 4 >> 1] = 3;
 HEAP16[$1280 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1279, $1280);
 $20349 = $1281;
 HEAP32[$20349 >> 2] = 14942430;
 HEAP32[$20349 + 4 >> 2] = 12517923;
 HEAP32[$1281 + 8 >> 2] = 63422;
 HEAP16[$1282 >> 1] = 222;
 HEAP16[$1282 + 2 >> 1] = 284;
 HEAP16[$1282 + 4 >> 1] = 3;
 HEAP16[$1282 + 6 >> 1] = 97;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1281, $1282);
 $20357 = $1283;
 HEAP32[$20357 >> 2] = 14942430;
 HEAP32[$20357 + 4 >> 2] = 12517923;
 HEAP32[$1283 + 8 >> 2] = 63422;
 HEAP16[$1284 >> 1] = 434;
 HEAP16[$1284 + 2 >> 1] = 284;
 HEAP16[$1284 + 4 >> 1] = 6;
 HEAP16[$1284 + 6 >> 1] = 97;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1283, $1284);
 $20365 = $1285;
 HEAP32[$20365 >> 2] = 14942430;
 HEAP32[$20365 + 4 >> 2] = 12517923;
 HEAP32[$1285 + 8 >> 2] = 63422;
 HEAP16[$1286 >> 1] = 758;
 HEAP16[$1286 + 2 >> 1] = 284;
 HEAP16[$1286 + 4 >> 1] = 11;
 HEAP16[$1286 + 6 >> 1] = 97;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1285, $1286);
 $20373 = $1287;
 HEAP32[$20373 >> 2] = 14942430;
 HEAP32[$20373 + 4 >> 2] = 12517923;
 HEAP32[$1287 + 8 >> 2] = 63422;
 HEAP16[$1288 >> 1] = 222;
 HEAP16[$1288 + 2 >> 1] = 381;
 HEAP16[$1288 + 4 >> 1] = 547;
 HEAP16[$1288 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1287, $1288);
 $20381 = $1289;
 HEAP32[$20381 >> 2] = 14942430;
 HEAP32[$20381 + 4 >> 2] = 12517923;
 HEAP32[$1289 + 8 >> 2] = 63422;
 HEAP16[$1290 >> 1] = 222;
 HEAP16[$1290 + 2 >> 1] = 384;
 HEAP16[$1290 + 4 >> 1] = 3;
 HEAP16[$1290 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1289, $1290);
 $20389 = $1291;
 HEAP32[$20389 >> 2] = 14942430;
 HEAP32[$20389 + 4 >> 2] = 12517923;
 HEAP32[$1291 + 8 >> 2] = 63422;
 HEAP16[$1292 >> 1] = 531;
 HEAP16[$1292 + 2 >> 1] = 384;
 HEAP16[$1292 + 4 >> 1] = 238;
 HEAP16[$1292 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1291, $1292);
 $20397 = $1293;
 HEAP32[$20397 >> 2] = 14942430;
 HEAP32[$20397 + 4 >> 2] = 12517923;
 HEAP32[$1293 + 8 >> 2] = 63422;
 HEAP16[$1294 >> 1] = 222;
 HEAP16[$1294 + 2 >> 1] = 416;
 HEAP16[$1294 + 4 >> 1] = 547;
 HEAP16[$1294 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1293, $1294);
 $20405 = $1295;
 HEAP32[$20405 >> 2] = 14942430;
 HEAP32[$20405 + 4 >> 2] = 12517923;
 HEAP32[$1295 + 8 >> 2] = 63422;
 HEAP16[$1296 >> 1] = 222;
 HEAP16[$1296 + 2 >> 1] = 228;
 HEAP16[$1296 + 4 >> 1] = 3;
 HEAP16[$1296 + 6 >> 1] = 84;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1295, $1296);
 $20413 = $1297;
 HEAP32[$20413 >> 2] = 14942430;
 HEAP32[$20413 + 4 >> 2] = 12517923;
 HEAP32[$1297 + 8 >> 2] = 63422;
 HEAP16[$1298 >> 1] = 437;
 HEAP16[$1298 + 2 >> 1] = 228;
 HEAP16[$1298 + 4 >> 1] = 6;
 HEAP16[$1298 + 6 >> 1] = 84;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1297, $1298);
 $20421 = $1299;
 HEAP32[$20421 >> 2] = 14942430;
 HEAP32[$20421 + 4 >> 2] = 12517923;
 HEAP32[$1299 + 8 >> 2] = 63422;
 HEAP16[$1300 >> 1] = 766;
 HEAP16[$1300 + 2 >> 1] = 228;
 HEAP16[$1300 + 4 >> 1] = 3;
 HEAP16[$1300 + 6 >> 1] = 84;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1299, $1300);
 $20429 = $1301;
 HEAP32[$20429 >> 2] = 14942430;
 HEAP32[$20429 + 4 >> 2] = 12517923;
 HEAP32[$1301 + 8 >> 2] = 63422;
 HEAP16[$1302 >> 1] = 222;
 HEAP16[$1302 + 2 >> 1] = 312;
 HEAP16[$1302 + 4 >> 1] = 3;
 HEAP16[$1302 + 6 >> 1] = 69;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1301, $1302);
 $20437 = $1303;
 HEAP32[$20437 >> 2] = 14942430;
 HEAP32[$20437 + 4 >> 2] = 12517923;
 HEAP32[$1303 + 8 >> 2] = 63422;
 HEAP16[$1304 >> 1] = 434;
 HEAP16[$1304 + 2 >> 1] = 312;
 HEAP16[$1304 + 4 >> 1] = 6;
 HEAP16[$1304 + 6 >> 1] = 69;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1303, $1304);
 $20445 = $1305;
 HEAP32[$20445 >> 2] = 14942430;
 HEAP32[$20445 + 4 >> 2] = 12517923;
 HEAP32[$1305 + 8 >> 2] = 63422;
 HEAP16[$1306 >> 1] = 758;
 HEAP16[$1306 + 2 >> 1] = 312;
 HEAP16[$1306 + 4 >> 1] = 11;
 HEAP16[$1306 + 6 >> 1] = 69;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1305, $1306);
 $20453 = $1307;
 HEAP32[$20453 >> 2] = 14942430;
 HEAP32[$20453 + 4 >> 2] = 12517923;
 HEAP32[$1307 + 8 >> 2] = 63422;
 HEAP16[$1308 >> 1] = 222;
 HEAP16[$1308 + 2 >> 1] = 381;
 HEAP16[$1308 + 4 >> 1] = 547;
 HEAP16[$1308 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1307, $1308);
 $20461 = $1309;
 HEAP32[$20461 >> 2] = 14942430;
 HEAP32[$20461 + 4 >> 2] = 12517923;
 HEAP32[$1309 + 8 >> 2] = 63422;
 HEAP16[$1310 >> 1] = 222;
 HEAP16[$1310 + 2 >> 1] = 384;
 HEAP16[$1310 + 4 >> 1] = 3;
 HEAP16[$1310 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1309, $1310);
 $20469 = $1311;
 HEAP32[$20469 >> 2] = 14942430;
 HEAP32[$20469 + 4 >> 2] = 12517923;
 HEAP32[$1311 + 8 >> 2] = 63422;
 HEAP16[$1312 >> 1] = 531;
 HEAP16[$1312 + 2 >> 1] = 384;
 HEAP16[$1312 + 4 >> 1] = 238;
 HEAP16[$1312 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1311, $1312);
 $20477 = $1313;
 HEAP32[$20477 >> 2] = 14942430;
 HEAP32[$20477 + 4 >> 2] = 12517923;
 HEAP32[$1313 + 8 >> 2] = 63422;
 HEAP16[$1314 >> 1] = 222;
 HEAP16[$1314 + 2 >> 1] = 416;
 HEAP16[$1314 + 4 >> 1] = 547;
 HEAP16[$1314 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1313, $1314);
 $20485 = $1315;
 HEAP32[$20485 >> 2] = 14942430;
 HEAP32[$20485 + 4 >> 2] = 12517923;
 HEAP32[$1315 + 8 >> 2] = 63422;
 HEAP16[$1316 >> 1] = 222;
 HEAP16[$1316 + 2 >> 1] = 228;
 HEAP16[$1316 + 4 >> 1] = 3;
 HEAP16[$1316 + 6 >> 1] = 125;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1315, $1316);
 $20493 = $1317;
 HEAP32[$20493 >> 2] = 14942430;
 HEAP32[$20493 + 4 >> 2] = 12517923;
 HEAP32[$1317 + 8 >> 2] = 63422;
 HEAP16[$1318 >> 1] = 437;
 HEAP16[$1318 + 2 >> 1] = 228;
 HEAP16[$1318 + 4 >> 1] = 6;
 HEAP16[$1318 + 6 >> 1] = 125;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1317, $1318);
 $20501 = $1319;
 HEAP32[$20501 >> 2] = 14942430;
 HEAP32[$20501 + 4 >> 2] = 12517923;
 HEAP32[$1319 + 8 >> 2] = 63422;
 HEAP16[$1320 >> 1] = 766;
 HEAP16[$1320 + 2 >> 1] = 228;
 HEAP16[$1320 + 4 >> 1] = 3;
 HEAP16[$1320 + 6 >> 1] = 125;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1319, $1320);
 $20509 = $1321;
 HEAP32[$20509 >> 2] = 14942430;
 HEAP32[$20509 + 4 >> 2] = 12517923;
 HEAP32[$1321 + 8 >> 2] = 63422;
 HEAP16[$1322 >> 1] = 222;
 HEAP16[$1322 + 2 >> 1] = 353;
 HEAP16[$1322 + 4 >> 1] = 3;
 HEAP16[$1322 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1321, $1322);
 $20517 = $1323;
 HEAP32[$20517 >> 2] = 14942430;
 HEAP32[$20517 + 4 >> 2] = 12517923;
 HEAP32[$1323 + 8 >> 2] = 63422;
 HEAP16[$1324 >> 1] = 434;
 HEAP16[$1324 + 2 >> 1] = 353;
 HEAP16[$1324 + 4 >> 1] = 6;
 HEAP16[$1324 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1323, $1324);
 $20525 = $1325;
 HEAP32[$20525 >> 2] = 14942430;
 HEAP32[$20525 + 4 >> 2] = 12517923;
 HEAP32[$1325 + 8 >> 2] = 63422;
 HEAP16[$1326 >> 1] = 758;
 HEAP16[$1326 + 2 >> 1] = 353;
 HEAP16[$1326 + 4 >> 1] = 11;
 HEAP16[$1326 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1325, $1326);
 $20533 = $1327;
 HEAP32[$20533 >> 2] = 14942430;
 HEAP32[$20533 + 4 >> 2] = 12517923;
 HEAP32[$1327 + 8 >> 2] = 63422;
 HEAP16[$1328 >> 1] = 222;
 HEAP16[$1328 + 2 >> 1] = 381;
 HEAP16[$1328 + 4 >> 1] = 547;
 HEAP16[$1328 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1327, $1328);
 $20541 = $1329;
 HEAP32[$20541 >> 2] = 14942430;
 HEAP32[$20541 + 4 >> 2] = 12517923;
 HEAP32[$1329 + 8 >> 2] = 63422;
 HEAP16[$1330 >> 1] = 222;
 HEAP16[$1330 + 2 >> 1] = 384;
 HEAP16[$1330 + 4 >> 1] = 3;
 HEAP16[$1330 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1329, $1330);
 $20549 = $1331;
 HEAP32[$20549 >> 2] = 14942430;
 HEAP32[$20549 + 4 >> 2] = 12517923;
 HEAP32[$1331 + 8 >> 2] = 63422;
 HEAP16[$1332 >> 1] = 531;
 HEAP16[$1332 + 2 >> 1] = 384;
 HEAP16[$1332 + 4 >> 1] = 238;
 HEAP16[$1332 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1331, $1332);
 $20557 = $1333;
 HEAP32[$20557 >> 2] = 14942430;
 HEAP32[$20557 + 4 >> 2] = 12517923;
 HEAP32[$1333 + 8 >> 2] = 63422;
 HEAP16[$1334 >> 1] = 222;
 HEAP16[$1334 + 2 >> 1] = 416;
 HEAP16[$1334 + 4 >> 1] = 547;
 HEAP16[$1334 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1333, $1334);
 $20565 = $1335;
 HEAP32[$20565 >> 2] = 14942430;
 HEAP32[$20565 + 4 >> 2] = 12517923;
 HEAP32[$1335 + 8 >> 2] = 63422;
 HEAP16[$1336 >> 1] = 222;
 HEAP16[$1336 + 2 >> 1] = 228;
 HEAP16[$1336 + 4 >> 1] = 3;
 HEAP16[$1336 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1335, $1336);
 $20573 = $1337;
 HEAP32[$20573 >> 2] = 14942430;
 HEAP32[$20573 + 4 >> 2] = 12517923;
 HEAP32[$1337 + 8 >> 2] = 63422;
 HEAP16[$1338 >> 1] = 437;
 HEAP16[$1338 + 2 >> 1] = 228;
 HEAP16[$1338 + 4 >> 1] = 6;
 HEAP16[$1338 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1337, $1338);
 $20581 = $1339;
 HEAP32[$20581 >> 2] = 14942430;
 HEAP32[$20581 + 4 >> 2] = 12517923;
 HEAP32[$1339 + 8 >> 2] = 63422;
 HEAP16[$1340 >> 1] = 766;
 HEAP16[$1340 + 2 >> 1] = 228;
 HEAP16[$1340 + 4 >> 1] = 3;
 HEAP16[$1340 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1339, $1340);
 $20589 = $1341;
 HEAP32[$20589 >> 2] = 14942430;
 HEAP32[$20589 + 4 >> 2] = 12517923;
 HEAP32[$1341 + 8 >> 2] = 63422;
 HEAP16[$1342 >> 1] = 222;
 HEAP16[$1342 + 2 >> 1] = 381;
 HEAP16[$1342 + 4 >> 1] = 547;
 HEAP16[$1342 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1341, $1342);
 $20597 = $1343;
 HEAP32[$20597 >> 2] = 14942430;
 HEAP32[$20597 + 4 >> 2] = 12517923;
 HEAP32[$1343 + 8 >> 2] = 63422;
 HEAP16[$1344 >> 1] = 222;
 HEAP16[$1344 + 2 >> 1] = 384;
 HEAP16[$1344 + 4 >> 1] = 3;
 HEAP16[$1344 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1343, $1344);
 $20605 = $1345;
 HEAP32[$20605 >> 2] = 14942430;
 HEAP32[$20605 + 4 >> 2] = 12517923;
 HEAP32[$1345 + 8 >> 2] = 63422;
 HEAP16[$1346 >> 1] = 531;
 HEAP16[$1346 + 2 >> 1] = 384;
 HEAP16[$1346 + 4 >> 1] = 238;
 HEAP16[$1346 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1345, $1346);
 $20613 = $1347;
 HEAP32[$20613 >> 2] = 14942430;
 HEAP32[$20613 + 4 >> 2] = 12517923;
 HEAP32[$1347 + 8 >> 2] = 63422;
 HEAP16[$1348 >> 1] = 222;
 HEAP16[$1348 + 2 >> 1] = 416;
 HEAP16[$1348 + 4 >> 1] = 547;
 HEAP16[$1348 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1347, $1348);
 $20621 = $1349;
 HEAP32[$20621 >> 2] = 29950174;
 HEAP32[$20621 + 4 >> 2] = 10027547;
 HEAP32[$1349 + 8 >> 2] = 63422;
 HEAP16[$1350 >> 1] = 222;
 HEAP16[$1350 + 2 >> 1] = 457;
 HEAP16[$1350 + 4 >> 1] = 3;
 HEAP16[$1350 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1349, $1350);
 $20629 = $1351;
 HEAP32[$20629 >> 2] = 29950174;
 HEAP32[$20629 + 4 >> 2] = 10027547;
 HEAP32[$1351 + 8 >> 2] = 63422;
 HEAP16[$1352 >> 1] = 434;
 HEAP16[$1352 + 2 >> 1] = 457;
 HEAP16[$1352 + 4 >> 1] = 6;
 HEAP16[$1352 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1351, $1352);
 $20637 = $1353;
 HEAP32[$20637 >> 2] = 29950174;
 HEAP32[$20637 + 4 >> 2] = 10027547;
 HEAP32[$1353 + 8 >> 2] = 63422;
 HEAP16[$1354 >> 1] = 758;
 HEAP16[$1354 + 2 >> 1] = 457;
 HEAP16[$1354 + 4 >> 1] = 3;
 HEAP16[$1354 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1353, $1354);
 $20645 = $1355;
 HEAP32[$20645 >> 2] = 29950174;
 HEAP32[$20645 + 4 >> 2] = 10027547;
 HEAP32[$1355 + 8 >> 2] = 63422;
 HEAP16[$1356 >> 1] = 222;
 HEAP16[$1356 + 2 >> 1] = 591;
 HEAP16[$1356 + 4 >> 1] = 3;
 HEAP16[$1356 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1355, $1356);
 $20653 = $1357;
 HEAP32[$20653 >> 2] = 29950174;
 HEAP32[$20653 + 4 >> 2] = 10027547;
 HEAP32[$1357 + 8 >> 2] = 63422;
 HEAP16[$1358 >> 1] = 434;
 HEAP16[$1358 + 2 >> 1] = 591;
 HEAP16[$1358 + 4 >> 1] = 327;
 HEAP16[$1358 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1357, $1358);
 $20661 = $1359;
 HEAP32[$20661 >> 2] = 28181242;
 HEAP32[$20661 + 4 >> 2] = 9371862;
 HEAP32[$1359 + 8 >> 2] = 63422;
 HEAP16[$1360 >> 1] = 762;
 HEAP16[$1360 + 2 >> 1] = 430;
 HEAP16[$1360 + 4 >> 1] = 214;
 HEAP16[$1360 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1359, $1360);
 $20669 = $1361;
 HEAP32[$20669 >> 2] = 28181242;
 HEAP32[$20669 + 4 >> 2] = 9371862;
 HEAP32[$1361 + 8 >> 2] = 63422;
 HEAP16[$1362 >> 1] = 762;
 HEAP16[$1362 + 2 >> 1] = 435;
 HEAP16[$1362 + 4 >> 1] = 5;
 HEAP16[$1362 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1361, $1362);
 $20677 = $1363;
 HEAP32[$20677 >> 2] = 28181242;
 HEAP32[$20677 + 4 >> 2] = 9371862;
 HEAP32[$1363 + 8 >> 2] = 63422;
 HEAP16[$1364 >> 1] = 971;
 HEAP16[$1364 + 2 >> 1] = 435;
 HEAP16[$1364 + 4 >> 1] = 5;
 HEAP16[$1364 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1363, $1364);
 $20685 = $1365;
 HEAP32[$20685 >> 2] = 28181242;
 HEAP32[$20685 + 4 >> 2] = 9371862;
 HEAP32[$1365 + 8 >> 2] = 63422;
 HEAP16[$1366 >> 1] = 762;
 HEAP16[$1366 + 2 >> 1] = 451;
 HEAP16[$1366 + 4 >> 1] = 214;
 HEAP16[$1366 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1365, $1366);
 $20693 = $1367;
 HEAP32[$20693 >> 2] = 28181242;
 HEAP32[$20693 + 4 >> 2] = 9371862;
 HEAP32[$1367 + 8 >> 2] = 63422;
 HEAP16[$1368 >> 1] = 762;
 HEAP16[$1368 + 2 >> 1] = 456;
 HEAP16[$1368 + 4 >> 1] = 5;
 HEAP16[$1368 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1367, $1368);
 $20701 = $1369;
 HEAP32[$20701 >> 2] = 28181242;
 HEAP32[$20701 + 4 >> 2] = 9371862;
 HEAP32[$1369 + 8 >> 2] = 63422;
 HEAP16[$1370 >> 1] = 971;
 HEAP16[$1370 + 2 >> 1] = 456;
 HEAP16[$1370 + 4 >> 1] = 5;
 HEAP16[$1370 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1369, $1370);
 $20709 = $1371;
 HEAP32[$20709 >> 2] = 28181242;
 HEAP32[$20709 + 4 >> 2] = 9371862;
 HEAP32[$1371 + 8 >> 2] = 63422;
 HEAP16[$1372 >> 1] = 762;
 HEAP16[$1372 + 2 >> 1] = 472;
 HEAP16[$1372 + 4 >> 1] = 214;
 HEAP16[$1372 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1371, $1372);
 $20717 = $1373;
 HEAP32[$20717 >> 2] = 28181242;
 HEAP32[$20717 + 4 >> 2] = 9371862;
 HEAP32[$1373 + 8 >> 2] = 63422;
 HEAP16[$1374 >> 1] = 762;
 HEAP16[$1374 + 2 >> 1] = 477;
 HEAP16[$1374 + 4 >> 1] = 5;
 HEAP16[$1374 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1373, $1374);
 $20725 = $1375;
 HEAP32[$20725 >> 2] = 28181242;
 HEAP32[$20725 + 4 >> 2] = 9371862;
 HEAP32[$1375 + 8 >> 2] = 63422;
 HEAP16[$1376 >> 1] = 971;
 HEAP16[$1376 + 2 >> 1] = 477;
 HEAP16[$1376 + 4 >> 1] = 5;
 HEAP16[$1376 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1375, $1376);
 $20733 = $1377;
 HEAP32[$20733 >> 2] = 28181242;
 HEAP32[$20733 + 4 >> 2] = 9371862;
 HEAP32[$1377 + 8 >> 2] = 63422;
 HEAP16[$1378 >> 1] = 762;
 HEAP16[$1378 + 2 >> 1] = 493;
 HEAP16[$1378 + 4 >> 1] = 214;
 HEAP16[$1378 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1377, $1378);
 $20741 = $1379;
 HEAP32[$20741 >> 2] = 28181242;
 HEAP32[$20741 + 4 >> 2] = 9371862;
 HEAP32[$1379 + 8 >> 2] = 63422;
 HEAP16[$1380 >> 1] = 762;
 HEAP16[$1380 + 2 >> 1] = 498;
 HEAP16[$1380 + 4 >> 1] = 5;
 HEAP16[$1380 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1379, $1380);
 $20749 = $1381;
 HEAP32[$20749 >> 2] = 28181242;
 HEAP32[$20749 + 4 >> 2] = 9371862;
 HEAP32[$1381 + 8 >> 2] = 63422;
 HEAP16[$1382 >> 1] = 971;
 HEAP16[$1382 + 2 >> 1] = 498;
 HEAP16[$1382 + 4 >> 1] = 5;
 HEAP16[$1382 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1381, $1382);
 $20757 = $1383;
 HEAP32[$20757 >> 2] = 28181242;
 HEAP32[$20757 + 4 >> 2] = 9371862;
 HEAP32[$1383 + 8 >> 2] = 63422;
 HEAP16[$1384 >> 1] = 762;
 HEAP16[$1384 + 2 >> 1] = 524;
 HEAP16[$1384 + 4 >> 1] = 214;
 HEAP16[$1384 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1383, $1384);
 $20765 = $1385;
 HEAP32[$20765 >> 2] = 28181242;
 HEAP32[$20765 + 4 >> 2] = 9371862;
 HEAP32[$1385 + 8 >> 2] = 63422;
 HEAP16[$1386 >> 1] = 762;
 HEAP16[$1386 + 2 >> 1] = 529;
 HEAP16[$1386 + 4 >> 1] = 5;
 HEAP16[$1386 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1385, $1386);
 $20773 = $1387;
 HEAP32[$20773 >> 2] = 28181242;
 HEAP32[$20773 + 4 >> 2] = 9371862;
 HEAP32[$1387 + 8 >> 2] = 63422;
 HEAP16[$1388 >> 1] = 971;
 HEAP16[$1388 + 2 >> 1] = 529;
 HEAP16[$1388 + 4 >> 1] = 5;
 HEAP16[$1388 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1387, $1388);
 $20781 = $1389;
 HEAP32[$20781 >> 2] = 28181242;
 HEAP32[$20781 + 4 >> 2] = 9371862;
 HEAP32[$1389 + 8 >> 2] = 63422;
 HEAP16[$1390 >> 1] = 762;
 HEAP16[$1390 + 2 >> 1] = 568;
 HEAP16[$1390 + 4 >> 1] = 214;
 HEAP16[$1390 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1389, $1390);
 $20789 = $1391;
 HEAP32[$20789 >> 2] = 14942430;
 HEAP32[$20789 + 4 >> 2] = 12517923;
 HEAP32[$1391 + 8 >> 2] = 63422;
 HEAP16[$1392 >> 1] = 222;
 HEAP16[$1392 + 2 >> 1] = 228;
 HEAP16[$1392 + 4 >> 1] = 3;
 HEAP16[$1392 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1391, $1392);
 $20797 = $1393;
 HEAP32[$20797 >> 2] = 14942430;
 HEAP32[$20797 + 4 >> 2] = 12517923;
 HEAP32[$1393 + 8 >> 2] = 63422;
 HEAP16[$1394 >> 1] = 437;
 HEAP16[$1394 + 2 >> 1] = 228;
 HEAP16[$1394 + 4 >> 1] = 6;
 HEAP16[$1394 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1393, $1394);
 $20805 = $1395;
 HEAP32[$20805 >> 2] = 14942430;
 HEAP32[$20805 + 4 >> 2] = 12517923;
 HEAP32[$1395 + 8 >> 2] = 63422;
 HEAP16[$1396 >> 1] = 766;
 HEAP16[$1396 + 2 >> 1] = 228;
 HEAP16[$1396 + 4 >> 1] = 3;
 HEAP16[$1396 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1395, $1396);
 $20813 = $1397;
 HEAP32[$20813 >> 2] = 14942430;
 HEAP32[$20813 + 4 >> 2] = 12517923;
 HEAP32[$1397 + 8 >> 2] = 63422;
 HEAP16[$1398 >> 1] = 222;
 HEAP16[$1398 + 2 >> 1] = 381;
 HEAP16[$1398 + 4 >> 1] = 547;
 HEAP16[$1398 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1397, $1398);
 $20821 = $1399;
 HEAP32[$20821 >> 2] = 14942430;
 HEAP32[$20821 + 4 >> 2] = 12517923;
 HEAP32[$1399 + 8 >> 2] = 63422;
 HEAP16[$1400 >> 1] = 222;
 HEAP16[$1400 + 2 >> 1] = 384;
 HEAP16[$1400 + 4 >> 1] = 3;
 HEAP16[$1400 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1399, $1400);
 $20829 = $1401;
 HEAP32[$20829 >> 2] = 14942430;
 HEAP32[$20829 + 4 >> 2] = 12517923;
 HEAP32[$1401 + 8 >> 2] = 63422;
 HEAP16[$1402 >> 1] = 531;
 HEAP16[$1402 + 2 >> 1] = 384;
 HEAP16[$1402 + 4 >> 1] = 238;
 HEAP16[$1402 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1401, $1402);
 $20837 = $1403;
 HEAP32[$20837 >> 2] = 14942430;
 HEAP32[$20837 + 4 >> 2] = 12517923;
 HEAP32[$1403 + 8 >> 2] = 63422;
 HEAP16[$1404 >> 1] = 222;
 HEAP16[$1404 + 2 >> 1] = 416;
 HEAP16[$1404 + 4 >> 1] = 547;
 HEAP16[$1404 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1403, $1404);
 $20845 = $1405;
 HEAP32[$20845 >> 2] = 28181250;
 HEAP32[$20845 + 4 >> 2] = 9371862;
 HEAP32[$1405 + 8 >> 2] = 63422;
 HEAP16[$1406 >> 1] = 770;
 HEAP16[$1406 + 2 >> 1] = 430;
 HEAP16[$1406 + 4 >> 1] = 214;
 HEAP16[$1406 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1405, $1406);
 $20853 = $1407;
 HEAP32[$20853 >> 2] = 28181250;
 HEAP32[$20853 + 4 >> 2] = 9371862;
 HEAP32[$1407 + 8 >> 2] = 63422;
 HEAP16[$1408 >> 1] = 770;
 HEAP16[$1408 + 2 >> 1] = 435;
 HEAP16[$1408 + 4 >> 1] = 5;
 HEAP16[$1408 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1407, $1408);
 $20861 = $1409;
 HEAP32[$20861 >> 2] = 28181250;
 HEAP32[$20861 + 4 >> 2] = 9371862;
 HEAP32[$1409 + 8 >> 2] = 63422;
 HEAP16[$1410 >> 1] = 979;
 HEAP16[$1410 + 2 >> 1] = 435;
 HEAP16[$1410 + 4 >> 1] = 5;
 HEAP16[$1410 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1409, $1410);
 $20869 = $1411;
 HEAP32[$20869 >> 2] = 28181250;
 HEAP32[$20869 + 4 >> 2] = 9371862;
 HEAP32[$1411 + 8 >> 2] = 63422;
 HEAP16[$1412 >> 1] = 770;
 HEAP16[$1412 + 2 >> 1] = 451;
 HEAP16[$1412 + 4 >> 1] = 214;
 HEAP16[$1412 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1411, $1412);
 $20877 = $1413;
 HEAP32[$20877 >> 2] = 28181250;
 HEAP32[$20877 + 4 >> 2] = 9371862;
 HEAP32[$1413 + 8 >> 2] = 63422;
 HEAP16[$1414 >> 1] = 770;
 HEAP16[$1414 + 2 >> 1] = 456;
 HEAP16[$1414 + 4 >> 1] = 5;
 HEAP16[$1414 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1413, $1414);
 $20885 = $1415;
 HEAP32[$20885 >> 2] = 28181250;
 HEAP32[$20885 + 4 >> 2] = 9371862;
 HEAP32[$1415 + 8 >> 2] = 63422;
 HEAP16[$1416 >> 1] = 979;
 HEAP16[$1416 + 2 >> 1] = 456;
 HEAP16[$1416 + 4 >> 1] = 5;
 HEAP16[$1416 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1415, $1416);
 $20893 = $1417;
 HEAP32[$20893 >> 2] = 28181250;
 HEAP32[$20893 + 4 >> 2] = 9371862;
 HEAP32[$1417 + 8 >> 2] = 63422;
 HEAP16[$1418 >> 1] = 770;
 HEAP16[$1418 + 2 >> 1] = 472;
 HEAP16[$1418 + 4 >> 1] = 214;
 HEAP16[$1418 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1417, $1418);
 $20901 = $1419;
 HEAP32[$20901 >> 2] = 28181250;
 HEAP32[$20901 + 4 >> 2] = 9371862;
 HEAP32[$1419 + 8 >> 2] = 63422;
 HEAP16[$1420 >> 1] = 770;
 HEAP16[$1420 + 2 >> 1] = 477;
 HEAP16[$1420 + 4 >> 1] = 5;
 HEAP16[$1420 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1419, $1420);
 $20909 = $1421;
 HEAP32[$20909 >> 2] = 28181250;
 HEAP32[$20909 + 4 >> 2] = 9371862;
 HEAP32[$1421 + 8 >> 2] = 63422;
 HEAP16[$1422 >> 1] = 979;
 HEAP16[$1422 + 2 >> 1] = 477;
 HEAP16[$1422 + 4 >> 1] = 5;
 HEAP16[$1422 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1421, $1422);
 $20917 = $1423;
 HEAP32[$20917 >> 2] = 28181250;
 HEAP32[$20917 + 4 >> 2] = 9371862;
 HEAP32[$1423 + 8 >> 2] = 63422;
 HEAP16[$1424 >> 1] = 770;
 HEAP16[$1424 + 2 >> 1] = 493;
 HEAP16[$1424 + 4 >> 1] = 214;
 HEAP16[$1424 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1423, $1424);
 $20925 = $1425;
 HEAP32[$20925 >> 2] = 28181250;
 HEAP32[$20925 + 4 >> 2] = 9371862;
 HEAP32[$1425 + 8 >> 2] = 63422;
 HEAP16[$1426 >> 1] = 770;
 HEAP16[$1426 + 2 >> 1] = 498;
 HEAP16[$1426 + 4 >> 1] = 5;
 HEAP16[$1426 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1425, $1426);
 $20933 = $1427;
 HEAP32[$20933 >> 2] = 28181250;
 HEAP32[$20933 + 4 >> 2] = 9371862;
 HEAP32[$1427 + 8 >> 2] = 63422;
 HEAP16[$1428 >> 1] = 979;
 HEAP16[$1428 + 2 >> 1] = 498;
 HEAP16[$1428 + 4 >> 1] = 5;
 HEAP16[$1428 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1427, $1428);
 $20941 = $1429;
 HEAP32[$20941 >> 2] = 28181250;
 HEAP32[$20941 + 4 >> 2] = 9371862;
 HEAP32[$1429 + 8 >> 2] = 63422;
 HEAP16[$1430 >> 1] = 770;
 HEAP16[$1430 + 2 >> 1] = 524;
 HEAP16[$1430 + 4 >> 1] = 214;
 HEAP16[$1430 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1429, $1430);
 $20949 = $1431;
 HEAP32[$20949 >> 2] = 28181250;
 HEAP32[$20949 + 4 >> 2] = 9371862;
 HEAP32[$1431 + 8 >> 2] = 63422;
 HEAP16[$1432 >> 1] = 770;
 HEAP16[$1432 + 2 >> 1] = 529;
 HEAP16[$1432 + 4 >> 1] = 5;
 HEAP16[$1432 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1431, $1432);
 $20957 = $1433;
 HEAP32[$20957 >> 2] = 28181250;
 HEAP32[$20957 + 4 >> 2] = 9371862;
 HEAP32[$1433 + 8 >> 2] = 63422;
 HEAP16[$1434 >> 1] = 979;
 HEAP16[$1434 + 2 >> 1] = 529;
 HEAP16[$1434 + 4 >> 1] = 5;
 HEAP16[$1434 + 6 >> 1] = 39;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1433, $1434);
 $20965 = $1435;
 HEAP32[$20965 >> 2] = 28181250;
 HEAP32[$20965 + 4 >> 2] = 9371862;
 HEAP32[$1435 + 8 >> 2] = 63422;
 HEAP16[$1436 >> 1] = 770;
 HEAP16[$1436 + 2 >> 1] = 568;
 HEAP16[$1436 + 4 >> 1] = 214;
 HEAP16[$1436 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1435, $1436);
 $20973 = $1437;
 HEAP32[$20973 >> 2] = 29950174;
 HEAP32[$20973 + 4 >> 2] = 10027555;
 HEAP32[$1437 + 8 >> 2] = 63422;
 HEAP16[$1438 >> 1] = 222;
 HEAP16[$1438 + 2 >> 1] = 457;
 HEAP16[$1438 + 4 >> 1] = 3;
 HEAP16[$1438 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1437, $1438);
 $20981 = $1439;
 HEAP32[$20981 >> 2] = 29950174;
 HEAP32[$20981 + 4 >> 2] = 10027555;
 HEAP32[$1439 + 8 >> 2] = 63422;
 HEAP16[$1440 >> 1] = 434;
 HEAP16[$1440 + 2 >> 1] = 457;
 HEAP16[$1440 + 4 >> 1] = 6;
 HEAP16[$1440 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1439, $1440);
 $20989 = $1441;
 HEAP32[$20989 >> 2] = 29950174;
 HEAP32[$20989 + 4 >> 2] = 10027555;
 HEAP32[$1441 + 8 >> 2] = 63422;
 HEAP16[$1442 >> 1] = 758;
 HEAP16[$1442 + 2 >> 1] = 457;
 HEAP16[$1442 + 4 >> 1] = 11;
 HEAP16[$1442 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1441, $1442);
 $20997 = $1443;
 HEAP32[$20997 >> 2] = 29950174;
 HEAP32[$20997 + 4 >> 2] = 10027555;
 HEAP32[$1443 + 8 >> 2] = 63422;
 HEAP16[$1444 >> 1] = 222;
 HEAP16[$1444 + 2 >> 1] = 591;
 HEAP16[$1444 + 4 >> 1] = 3;
 HEAP16[$1444 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1443, $1444);
 $21005 = $1445;
 HEAP32[$21005 >> 2] = 29950174;
 HEAP32[$21005 + 4 >> 2] = 10027555;
 HEAP32[$1445 + 8 >> 2] = 63422;
 HEAP16[$1446 >> 1] = 434;
 HEAP16[$1446 + 2 >> 1] = 591;
 HEAP16[$1446 + 4 >> 1] = 335;
 HEAP16[$1446 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1445, $1446);
 $21013 = $1447;
 HEAP32[$21013 >> 2] = 29950174;
 HEAP32[$21013 + 4 >> 2] = 10027555;
 HEAP32[$1447 + 8 >> 2] = 63422;
 HEAP16[$1448 >> 1] = 222;
 HEAP16[$1448 + 2 >> 1] = 457;
 HEAP16[$1448 + 4 >> 1] = 3;
 HEAP16[$1448 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1447, $1448);
 $21021 = $1449;
 HEAP32[$21021 >> 2] = 29950174;
 HEAP32[$21021 + 4 >> 2] = 10027555;
 HEAP32[$1449 + 8 >> 2] = 63422;
 HEAP16[$1450 >> 1] = 437;
 HEAP16[$1450 + 2 >> 1] = 457;
 HEAP16[$1450 + 4 >> 1] = 6;
 HEAP16[$1450 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1449, $1450);
 $21029 = $1451;
 HEAP32[$21029 >> 2] = 29950174;
 HEAP32[$21029 + 4 >> 2] = 10027555;
 HEAP32[$1451 + 8 >> 2] = 63422;
 HEAP16[$1452 >> 1] = 766;
 HEAP16[$1452 + 2 >> 1] = 457;
 HEAP16[$1452 + 4 >> 1] = 3;
 HEAP16[$1452 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1451, $1452);
 $21037 = $1453;
 HEAP32[$21037 >> 2] = 29950174;
 HEAP32[$21037 + 4 >> 2] = 10027555;
 HEAP32[$1453 + 8 >> 2] = 63422;
 HEAP16[$1454 >> 1] = 222;
 HEAP16[$1454 + 2 >> 1] = 485;
 HEAP16[$1454 + 4 >> 1] = 3;
 HEAP16[$1454 + 6 >> 1] = 106;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1453, $1454);
 $21045 = $1455;
 HEAP32[$21045 >> 2] = 29950174;
 HEAP32[$21045 + 4 >> 2] = 10027555;
 HEAP32[$1455 + 8 >> 2] = 63422;
 HEAP16[$1456 >> 1] = 434;
 HEAP16[$1456 + 2 >> 1] = 485;
 HEAP16[$1456 + 4 >> 1] = 6;
 HEAP16[$1456 + 6 >> 1] = 106;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1455, $1456);
 $21053 = $1457;
 HEAP32[$21053 >> 2] = 29950174;
 HEAP32[$21053 + 4 >> 2] = 10027555;
 HEAP32[$1457 + 8 >> 2] = 63422;
 HEAP16[$1458 >> 1] = 758;
 HEAP16[$1458 + 2 >> 1] = 485;
 HEAP16[$1458 + 4 >> 1] = 11;
 HEAP16[$1458 + 6 >> 1] = 106;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1457, $1458);
 $21061 = $1459;
 HEAP32[$21061 >> 2] = 29950174;
 HEAP32[$21061 + 4 >> 2] = 10027555;
 HEAP32[$1459 + 8 >> 2] = 63422;
 HEAP16[$1460 >> 1] = 222;
 HEAP16[$1460 + 2 >> 1] = 591;
 HEAP16[$1460 + 4 >> 1] = 3;
 HEAP16[$1460 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1459, $1460);
 $21069 = $1461;
 HEAP32[$21069 >> 2] = 29950174;
 HEAP32[$21069 + 4 >> 2] = 10027555;
 HEAP32[$1461 + 8 >> 2] = 63422;
 HEAP16[$1462 >> 1] = 434;
 HEAP16[$1462 + 2 >> 1] = 591;
 HEAP16[$1462 + 4 >> 1] = 335;
 HEAP16[$1462 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1461, $1462);
 $21077 = $1463;
 HEAP32[$21077 >> 2] = 29950174;
 HEAP32[$21077 + 4 >> 2] = 10027555;
 HEAP32[$1463 + 8 >> 2] = 63422;
 HEAP16[$1464 >> 1] = 222;
 HEAP16[$1464 + 2 >> 1] = 457;
 HEAP16[$1464 + 4 >> 1] = 3;
 HEAP16[$1464 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1463, $1464);
 $21085 = $1465;
 HEAP32[$21085 >> 2] = 29950174;
 HEAP32[$21085 + 4 >> 2] = 10027555;
 HEAP32[$1465 + 8 >> 2] = 63422;
 HEAP16[$1466 >> 1] = 437;
 HEAP16[$1466 + 2 >> 1] = 457;
 HEAP16[$1466 + 4 >> 1] = 6;
 HEAP16[$1466 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1465, $1466);
 $21093 = $1467;
 HEAP32[$21093 >> 2] = 29950174;
 HEAP32[$21093 + 4 >> 2] = 10027555;
 HEAP32[$1467 + 8 >> 2] = 63422;
 HEAP16[$1468 >> 1] = 766;
 HEAP16[$1468 + 2 >> 1] = 457;
 HEAP16[$1468 + 4 >> 1] = 3;
 HEAP16[$1468 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1467, $1468);
 $21101 = $1469;
 HEAP32[$21101 >> 2] = 29950174;
 HEAP32[$21101 + 4 >> 2] = 10027555;
 HEAP32[$1469 + 8 >> 2] = 63422;
 HEAP16[$1470 >> 1] = 222;
 HEAP16[$1470 + 2 >> 1] = 513;
 HEAP16[$1470 + 4 >> 1] = 3;
 HEAP16[$1470 + 6 >> 1] = 78;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1469, $1470);
 $21109 = $1471;
 HEAP32[$21109 >> 2] = 29950174;
 HEAP32[$21109 + 4 >> 2] = 10027555;
 HEAP32[$1471 + 8 >> 2] = 63422;
 HEAP16[$1472 >> 1] = 434;
 HEAP16[$1472 + 2 >> 1] = 513;
 HEAP16[$1472 + 4 >> 1] = 6;
 HEAP16[$1472 + 6 >> 1] = 78;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1471, $1472);
 $21117 = $1473;
 HEAP32[$21117 >> 2] = 29950174;
 HEAP32[$21117 + 4 >> 2] = 10027555;
 HEAP32[$1473 + 8 >> 2] = 63422;
 HEAP16[$1474 >> 1] = 758;
 HEAP16[$1474 + 2 >> 1] = 513;
 HEAP16[$1474 + 4 >> 1] = 11;
 HEAP16[$1474 + 6 >> 1] = 78;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1473, $1474);
 $21125 = $1475;
 HEAP32[$21125 >> 2] = 29950174;
 HEAP32[$21125 + 4 >> 2] = 10027555;
 HEAP32[$1475 + 8 >> 2] = 63422;
 HEAP16[$1476 >> 1] = 222;
 HEAP16[$1476 + 2 >> 1] = 591;
 HEAP16[$1476 + 4 >> 1] = 3;
 HEAP16[$1476 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1475, $1476);
 $21133 = $1477;
 HEAP32[$21133 >> 2] = 29950174;
 HEAP32[$21133 + 4 >> 2] = 10027555;
 HEAP32[$1477 + 8 >> 2] = 63422;
 HEAP16[$1478 >> 1] = 434;
 HEAP16[$1478 + 2 >> 1] = 591;
 HEAP16[$1478 + 4 >> 1] = 335;
 HEAP16[$1478 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1477, $1478);
 $21141 = $1479;
 HEAP32[$21141 >> 2] = 29950174;
 HEAP32[$21141 + 4 >> 2] = 10027555;
 HEAP32[$1479 + 8 >> 2] = 63422;
 HEAP16[$1480 >> 1] = 222;
 HEAP16[$1480 + 2 >> 1] = 457;
 HEAP16[$1480 + 4 >> 1] = 3;
 HEAP16[$1480 + 6 >> 1] = 84;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1479, $1480);
 $21149 = $1481;
 HEAP32[$21149 >> 2] = 29950174;
 HEAP32[$21149 + 4 >> 2] = 10027555;
 HEAP32[$1481 + 8 >> 2] = 63422;
 HEAP16[$1482 >> 1] = 437;
 HEAP16[$1482 + 2 >> 1] = 457;
 HEAP16[$1482 + 4 >> 1] = 6;
 HEAP16[$1482 + 6 >> 1] = 84;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1481, $1482);
 $21157 = $1483;
 HEAP32[$21157 >> 2] = 29950174;
 HEAP32[$21157 + 4 >> 2] = 10027555;
 HEAP32[$1483 + 8 >> 2] = 63422;
 HEAP16[$1484 >> 1] = 766;
 HEAP16[$1484 + 2 >> 1] = 457;
 HEAP16[$1484 + 4 >> 1] = 3;
 HEAP16[$1484 + 6 >> 1] = 84;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1483, $1484);
 $21165 = $1485;
 HEAP32[$21165 >> 2] = 29950174;
 HEAP32[$21165 + 4 >> 2] = 10027555;
 HEAP32[$1485 + 8 >> 2] = 63422;
 HEAP16[$1486 >> 1] = 222;
 HEAP16[$1486 + 2 >> 1] = 541;
 HEAP16[$1486 + 4 >> 1] = 3;
 HEAP16[$1486 + 6 >> 1] = 50;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1485, $1486);
 $21173 = $1487;
 HEAP32[$21173 >> 2] = 29950174;
 HEAP32[$21173 + 4 >> 2] = 10027555;
 HEAP32[$1487 + 8 >> 2] = 63422;
 HEAP16[$1488 >> 1] = 434;
 HEAP16[$1488 + 2 >> 1] = 541;
 HEAP16[$1488 + 4 >> 1] = 6;
 HEAP16[$1488 + 6 >> 1] = 50;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1487, $1488);
 $21181 = $1489;
 HEAP32[$21181 >> 2] = 29950174;
 HEAP32[$21181 + 4 >> 2] = 10027555;
 HEAP32[$1489 + 8 >> 2] = 63422;
 HEAP16[$1490 >> 1] = 758;
 HEAP16[$1490 + 2 >> 1] = 541;
 HEAP16[$1490 + 4 >> 1] = 11;
 HEAP16[$1490 + 6 >> 1] = 50;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1489, $1490);
 $21189 = $1491;
 HEAP32[$21189 >> 2] = 29950174;
 HEAP32[$21189 + 4 >> 2] = 10027555;
 HEAP32[$1491 + 8 >> 2] = 63422;
 HEAP16[$1492 >> 1] = 222;
 HEAP16[$1492 + 2 >> 1] = 591;
 HEAP16[$1492 + 4 >> 1] = 3;
 HEAP16[$1492 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1491, $1492);
 $21197 = $1493;
 HEAP32[$21197 >> 2] = 29950174;
 HEAP32[$21197 + 4 >> 2] = 10027555;
 HEAP32[$1493 + 8 >> 2] = 63422;
 HEAP16[$1494 >> 1] = 434;
 HEAP16[$1494 + 2 >> 1] = 591;
 HEAP16[$1494 + 4 >> 1] = 335;
 HEAP16[$1494 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1493, $1494);
 $21205 = $1495;
 HEAP32[$21205 >> 2] = 29950174;
 HEAP32[$21205 + 4 >> 2] = 10027555;
 HEAP32[$1495 + 8 >> 2] = 63422;
 HEAP16[$1496 >> 1] = 222;
 HEAP16[$1496 + 2 >> 1] = 457;
 HEAP16[$1496 + 4 >> 1] = 3;
 HEAP16[$1496 + 6 >> 1] = 112;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1495, $1496);
 $21213 = $1497;
 HEAP32[$21213 >> 2] = 29950174;
 HEAP32[$21213 + 4 >> 2] = 10027555;
 HEAP32[$1497 + 8 >> 2] = 63422;
 HEAP16[$1498 >> 1] = 437;
 HEAP16[$1498 + 2 >> 1] = 457;
 HEAP16[$1498 + 4 >> 1] = 6;
 HEAP16[$1498 + 6 >> 1] = 112;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1497, $1498);
 $21221 = $1499;
 HEAP32[$21221 >> 2] = 29950174;
 HEAP32[$21221 + 4 >> 2] = 10027555;
 HEAP32[$1499 + 8 >> 2] = 63422;
 HEAP16[$1500 >> 1] = 766;
 HEAP16[$1500 + 2 >> 1] = 457;
 HEAP16[$1500 + 4 >> 1] = 3;
 HEAP16[$1500 + 6 >> 1] = 112;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1499, $1500);
 $21229 = $1501;
 HEAP32[$21229 >> 2] = 29950174;
 HEAP32[$21229 + 4 >> 2] = 10027555;
 HEAP32[$1501 + 8 >> 2] = 63422;
 HEAP16[$1502 >> 1] = 222;
 HEAP16[$1502 + 2 >> 1] = 569;
 HEAP16[$1502 + 4 >> 1] = 3;
 HEAP16[$1502 + 6 >> 1] = 22;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1501, $1502);
 $21237 = $1503;
 HEAP32[$21237 >> 2] = 29950174;
 HEAP32[$21237 + 4 >> 2] = 10027555;
 HEAP32[$1503 + 8 >> 2] = 63422;
 HEAP16[$1504 >> 1] = 434;
 HEAP16[$1504 + 2 >> 1] = 569;
 HEAP16[$1504 + 4 >> 1] = 6;
 HEAP16[$1504 + 6 >> 1] = 22;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1503, $1504);
 $21245 = $1505;
 HEAP32[$21245 >> 2] = 29950174;
 HEAP32[$21245 + 4 >> 2] = 10027555;
 HEAP32[$1505 + 8 >> 2] = 63422;
 HEAP16[$1506 >> 1] = 758;
 HEAP16[$1506 + 2 >> 1] = 569;
 HEAP16[$1506 + 4 >> 1] = 11;
 HEAP16[$1506 + 6 >> 1] = 22;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1505, $1506);
 $21253 = $1507;
 HEAP32[$21253 >> 2] = 29950174;
 HEAP32[$21253 + 4 >> 2] = 10027555;
 HEAP32[$1507 + 8 >> 2] = 63422;
 HEAP16[$1508 >> 1] = 222;
 HEAP16[$1508 + 2 >> 1] = 591;
 HEAP16[$1508 + 4 >> 1] = 3;
 HEAP16[$1508 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1507, $1508);
 $21261 = $1509;
 HEAP32[$21261 >> 2] = 29950174;
 HEAP32[$21261 + 4 >> 2] = 10027555;
 HEAP32[$1509 + 8 >> 2] = 63422;
 HEAP16[$1510 >> 1] = 434;
 HEAP16[$1510 + 2 >> 1] = 591;
 HEAP16[$1510 + 4 >> 1] = 335;
 HEAP16[$1510 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1509, $1510);
 $21269 = $1511;
 HEAP32[$21269 >> 2] = 29950174;
 HEAP32[$21269 + 4 >> 2] = 10027555;
 HEAP32[$1511 + 8 >> 2] = 63422;
 HEAP16[$1512 >> 1] = 222;
 HEAP16[$1512 + 2 >> 1] = 457;
 HEAP16[$1512 + 4 >> 1] = 3;
 HEAP16[$1512 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1511, $1512);
 $21277 = $1513;
 HEAP32[$21277 >> 2] = 29950174;
 HEAP32[$21277 + 4 >> 2] = 10027555;
 HEAP32[$1513 + 8 >> 2] = 63422;
 HEAP16[$1514 >> 1] = 437;
 HEAP16[$1514 + 2 >> 1] = 457;
 HEAP16[$1514 + 4 >> 1] = 6;
 HEAP16[$1514 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1513, $1514);
 $21285 = $1515;
 HEAP32[$21285 >> 2] = 29950174;
 HEAP32[$21285 + 4 >> 2] = 10027555;
 HEAP32[$1515 + 8 >> 2] = 63422;
 HEAP16[$1516 >> 1] = 766;
 HEAP16[$1516 + 2 >> 1] = 457;
 HEAP16[$1516 + 4 >> 1] = 3;
 HEAP16[$1516 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1515, $1516);
 $21293 = $1517;
 HEAP32[$21293 >> 2] = 29950174;
 HEAP32[$21293 + 4 >> 2] = 10027555;
 HEAP32[$1517 + 8 >> 2] = 63422;
 HEAP16[$1518 >> 1] = 222;
 HEAP16[$1518 + 2 >> 1] = 591;
 HEAP16[$1518 + 4 >> 1] = 3;
 HEAP16[$1518 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1517, $1518);
 $21301 = $1519;
 HEAP32[$21301 >> 2] = 29950174;
 HEAP32[$21301 + 4 >> 2] = 10027555;
 HEAP32[$1519 + 8 >> 2] = 63422;
 HEAP16[$1520 >> 1] = 437;
 HEAP16[$1520 + 2 >> 1] = 591;
 HEAP16[$1520 + 4 >> 1] = 332;
 HEAP16[$1520 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1519, $1520);
 $21309 = $1521;
 HEAP32[$21309 >> 2] = 40632531;
 HEAP32[$21309 + 4 >> 2] = 656145;
 HEAP32[$1521 + 8 >> 2] = 65535;
 HEAP16[$1522 >> 1] = 211;
 HEAP16[$1522 + 2 >> 1] = 620;
 HEAP16[$1522 + 4 >> 1] = 785;
 HEAP16[$1522 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1521, $1522);
 $21317 = $1523;
 HEAP32[$21317 >> 2] = 29950174;
 HEAP32[$21317 + 4 >> 2] = 10027555;
 HEAP32[$1523 + 8 >> 2] = 63422;
 HEAP16[$1524 >> 1] = 222;
 HEAP16[$1524 + 2 >> 1] = 457;
 HEAP16[$1524 + 4 >> 1] = 3;
 HEAP16[$1524 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1523, $1524);
 $21325 = $1525;
 HEAP32[$21325 >> 2] = 29950174;
 HEAP32[$21325 + 4 >> 2] = 10027555;
 HEAP32[$1525 + 8 >> 2] = 63422;
 HEAP16[$1526 >> 1] = 437;
 HEAP16[$1526 + 2 >> 1] = 457;
 HEAP16[$1526 + 4 >> 1] = 6;
 HEAP16[$1526 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1525, $1526);
 $21333 = $1527;
 HEAP32[$21333 >> 2] = 29950174;
 HEAP32[$21333 + 4 >> 2] = 10027555;
 HEAP32[$1527 + 8 >> 2] = 63422;
 HEAP16[$1528 >> 1] = 766;
 HEAP16[$1528 + 2 >> 1] = 457;
 HEAP16[$1528 + 4 >> 1] = 3;
 HEAP16[$1528 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1527, $1528);
 $21341 = $1529;
 HEAP32[$21341 >> 2] = 29950174;
 HEAP32[$21341 + 4 >> 2] = 10027555;
 HEAP32[$1529 + 8 >> 2] = 63422;
 HEAP16[$1530 >> 1] = 222;
 HEAP16[$1530 + 2 >> 1] = 591;
 HEAP16[$1530 + 4 >> 1] = 3;
 HEAP16[$1530 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1529, $1530);
 $21349 = $1531;
 HEAP32[$21349 >> 2] = 29950174;
 HEAP32[$21349 + 4 >> 2] = 10027555;
 HEAP32[$1531 + 8 >> 2] = 63422;
 HEAP16[$1532 >> 1] = 437;
 HEAP16[$1532 + 2 >> 1] = 591;
 HEAP16[$1532 + 4 >> 1] = 332;
 HEAP16[$1532 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1531, $1532);
 $21357 = $1533;
 HEAP32[$21357 >> 2] = 42991827;
 HEAP32[$21357 + 4 >> 2] = 1573641;
 HEAP32[$1533 + 8 >> 2] = 54938;
 HEAP16[$1534 >> 1] = 211;
 HEAP16[$1534 + 2 >> 1] = 656;
 HEAP16[$1534 + 4 >> 1] = 1;
 HEAP16[$1534 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1533, $1534);
 $21365 = $1535;
 HEAP32[$21365 >> 2] = 42991827;
 HEAP32[$21365 + 4 >> 2] = 1573641;
 HEAP32[$1535 + 8 >> 2] = 54938;
 HEAP16[$1536 >> 1] = 987;
 HEAP16[$1536 + 2 >> 1] = 656;
 HEAP16[$1536 + 4 >> 1] = 1;
 HEAP16[$1536 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1535, $1536);
 $21373 = $1537;
 HEAP32[$21373 >> 2] = 43713274;
 HEAP32[$21373 + 4 >> 2] = 852182;
 HEAP32[$1537 + 8 >> 2] = 63422;
 HEAP16[$1538 >> 1] = 762;
 HEAP16[$1538 + 2 >> 1] = 667;
 HEAP16[$1538 + 4 >> 1] = 214;
 HEAP16[$1538 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1537, $1538);
 $21381 = $1539;
 HEAP32[$21381 >> 2] = 43713274;
 HEAP32[$21381 + 4 >> 2] = 852182;
 HEAP32[$1539 + 8 >> 2] = 63422;
 HEAP16[$1540 >> 1] = 762;
 HEAP16[$1540 + 2 >> 1] = 672;
 HEAP16[$1540 + 4 >> 1] = 5;
 HEAP16[$1540 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1539, $1540);
 $21389 = $1541;
 HEAP32[$21389 >> 2] = 43713274;
 HEAP32[$21389 + 4 >> 2] = 852182;
 HEAP32[$1541 + 8 >> 2] = 63422;
 HEAP16[$1542 >> 1] = 971;
 HEAP16[$1542 + 2 >> 1] = 672;
 HEAP16[$1542 + 4 >> 1] = 5;
 HEAP16[$1542 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1541, $1542);
 $21397 = $1543;
 HEAP32[$21397 >> 2] = 41287891;
 HEAP32[$21397 + 4 >> 2] = 1704713;
 HEAP32[$1543 + 8 >> 2] = 54938;
 HEAP16[$1544 >> 1] = 211;
 HEAP16[$1544 + 2 >> 1] = 630;
 HEAP16[$1544 + 4 >> 1] = 777;
 HEAP16[$1544 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1543, $1544);
 $21405 = $1545;
 HEAP32[$21405 >> 2] = 41287891;
 HEAP32[$21405 + 4 >> 2] = 1704713;
 HEAP32[$1545 + 8 >> 2] = 54938;
 HEAP16[$1546 >> 1] = 211;
 HEAP16[$1546 + 2 >> 1] = 631;
 HEAP16[$1546 + 4 >> 1] = 1;
 HEAP16[$1546 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1545, $1546);
 $21413 = $1547;
 HEAP32[$21413 >> 2] = 41287891;
 HEAP32[$21413 + 4 >> 2] = 1704713;
 HEAP32[$1547 + 8 >> 2] = 54938;
 HEAP16[$1548 >> 1] = 987;
 HEAP16[$1548 + 2 >> 1] = 631;
 HEAP16[$1548 + 4 >> 1] = 1;
 HEAP16[$1548 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1547, $1548);
 $21421 = $1549;
 HEAP32[$21421 >> 2] = 41287891;
 HEAP32[$21421 + 4 >> 2] = 1704713;
 HEAP32[$1549 + 8 >> 2] = 54938;
 HEAP16[$1550 >> 1] = 211;
 HEAP16[$1550 + 2 >> 1] = 655;
 HEAP16[$1550 + 4 >> 1] = 777;
 HEAP16[$1550 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1549, $1550);
 $21429 = $1551;
 HEAP32[$21429 >> 2] = 41287891;
 HEAP32[$21429 + 4 >> 2] = 1704721;
 HEAP32[$1551 + 8 >> 2] = 54938;
 HEAP16[$1552 >> 1] = 211;
 HEAP16[$1552 + 2 >> 1] = 630;
 HEAP16[$1552 + 4 >> 1] = 785;
 HEAP16[$1552 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1551, $1552);
 $21437 = $1553;
 HEAP32[$21437 >> 2] = 41287891;
 HEAP32[$21437 + 4 >> 2] = 1704721;
 HEAP32[$1553 + 8 >> 2] = 54938;
 HEAP16[$1554 >> 1] = 211;
 HEAP16[$1554 + 2 >> 1] = 631;
 HEAP16[$1554 + 4 >> 1] = 1;
 HEAP16[$1554 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1553, $1554);
 $21445 = $1555;
 HEAP32[$21445 >> 2] = 41287891;
 HEAP32[$21445 + 4 >> 2] = 1704721;
 HEAP32[$1555 + 8 >> 2] = 54938;
 HEAP16[$1556 >> 1] = 987;
 HEAP16[$1556 + 2 >> 1] = 631;
 HEAP16[$1556 + 4 >> 1] = 9;
 HEAP16[$1556 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1555, $1556);
 $21453 = $1557;
 HEAP32[$21453 >> 2] = 41287891;
 HEAP32[$21453 + 4 >> 2] = 1704721;
 HEAP32[$1557 + 8 >> 2] = 54938;
 HEAP16[$1558 >> 1] = 211;
 HEAP16[$1558 + 2 >> 1] = 655;
 HEAP16[$1558 + 4 >> 1] = 785;
 HEAP16[$1558 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1557, $1558);
 $21461 = $1559;
 HEAP32[$21461 >> 2] = 42991827;
 HEAP32[$21461 + 4 >> 2] = 1573649;
 HEAP32[$1559 + 8 >> 2] = 54938;
 HEAP16[$1560 >> 1] = 211;
 HEAP16[$1560 + 2 >> 1] = 656;
 HEAP16[$1560 + 4 >> 1] = 1;
 HEAP16[$1560 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1559, $1560);
 $21469 = $1561;
 HEAP32[$21469 >> 2] = 42991827;
 HEAP32[$21469 + 4 >> 2] = 1573649;
 HEAP32[$1561 + 8 >> 2] = 54938;
 HEAP16[$1562 >> 1] = 987;
 HEAP16[$1562 + 2 >> 1] = 656;
 HEAP16[$1562 + 4 >> 1] = 9;
 HEAP16[$1562 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1561, $1562);
 $21477 = $1563;
 HEAP32[$21477 >> 2] = 43713274;
 HEAP32[$21477 + 4 >> 2] = 852182;
 HEAP32[$1563 + 8 >> 2] = 63422;
 HEAP16[$1564 >> 1] = 762;
 HEAP16[$1564 + 2 >> 1] = 667;
 HEAP16[$1564 + 4 >> 1] = 214;
 HEAP16[$1564 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1563, $1564);
 $21485 = $1565;
 HEAP32[$21485 >> 2] = 43713274;
 HEAP32[$21485 + 4 >> 2] = 852182;
 HEAP32[$1565 + 8 >> 2] = 63422;
 HEAP16[$1566 >> 1] = 762;
 HEAP16[$1566 + 2 >> 1] = 672;
 HEAP16[$1566 + 4 >> 1] = 5;
 HEAP16[$1566 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1565, $1566);
 $21493 = $1567;
 HEAP32[$21493 >> 2] = 43713274;
 HEAP32[$21493 + 4 >> 2] = 852182;
 HEAP32[$1567 + 8 >> 2] = 63422;
 HEAP16[$1568 >> 1] = 971;
 HEAP16[$1568 + 2 >> 1] = 672;
 HEAP16[$1568 + 4 >> 1] = 5;
 HEAP16[$1568 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1567, $1568);
 $21501 = $1569;
 HEAP32[$21501 >> 2] = 42992603;
 HEAP32[$21501 + 4 >> 2] = 1572872;
 HEAP32[$1569 + 8 >> 2] = 63422;
 HEAP16[$1570 >> 1] = 987;
 HEAP16[$1570 + 2 >> 1] = 656;
 HEAP16[$1570 + 4 >> 1] = 8;
 HEAP16[$1570 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1569, $1570);
 $21509 = $1571;
 HEAP32[$21509 >> 2] = 43713274;
 HEAP32[$21509 + 4 >> 2] = 852182;
 HEAP32[$1571 + 8 >> 2] = 63422;
 HEAP16[$1572 >> 1] = 762;
 HEAP16[$1572 + 2 >> 1] = 667;
 HEAP16[$1572 + 4 >> 1] = 214;
 HEAP16[$1572 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1571, $1572);
 $21517 = $1573;
 HEAP32[$21517 >> 2] = 43713274;
 HEAP32[$21517 + 4 >> 2] = 852182;
 HEAP32[$1573 + 8 >> 2] = 63422;
 HEAP16[$1574 >> 1] = 762;
 HEAP16[$1574 + 2 >> 1] = 672;
 HEAP16[$1574 + 4 >> 1] = 5;
 HEAP16[$1574 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1573, $1574);
 $21525 = $1575;
 HEAP32[$21525 >> 2] = 43713274;
 HEAP32[$21525 + 4 >> 2] = 852182;
 HEAP32[$1575 + 8 >> 2] = 63422;
 HEAP16[$1576 >> 1] = 971;
 HEAP16[$1576 + 2 >> 1] = 672;
 HEAP16[$1576 + 4 >> 1] = 5;
 HEAP16[$1576 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1575, $1576);
 $21533 = $1577;
 HEAP32[$21533 >> 2] = 43713274;
 HEAP32[$21533 + 4 >> 2] = 852182;
 HEAP32[$1577 + 8 >> 2] = 63422;
 HEAP16[$1578 >> 1] = 762;
 HEAP16[$1578 + 2 >> 1] = 667;
 HEAP16[$1578 + 4 >> 1] = 214;
 HEAP16[$1578 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1577, $1578);
 $21541 = $1579;
 HEAP32[$21541 >> 2] = 43713274;
 HEAP32[$21541 + 4 >> 2] = 852182;
 HEAP32[$1579 + 8 >> 2] = 63422;
 HEAP16[$1580 >> 1] = 762;
 HEAP16[$1580 + 2 >> 1] = 672;
 HEAP16[$1580 + 4 >> 1] = 5;
 HEAP16[$1580 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1579, $1580);
 $21549 = $1581;
 HEAP32[$21549 >> 2] = 43713274;
 HEAP32[$21549 + 4 >> 2] = 852182;
 HEAP32[$1581 + 8 >> 2] = 63422;
 HEAP16[$1582 >> 1] = 971;
 HEAP16[$1582 + 2 >> 1] = 672;
 HEAP16[$1582 + 4 >> 1] = 5;
 HEAP16[$1582 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1581, $1582);
 $21557 = $1583;
 HEAP32[$21557 >> 2] = 43713282;
 HEAP32[$21557 + 4 >> 2] = 852182;
 HEAP32[$1583 + 8 >> 2] = 63422;
 HEAP16[$1584 >> 1] = 770;
 HEAP16[$1584 + 2 >> 1] = 667;
 HEAP16[$1584 + 4 >> 1] = 214;
 HEAP16[$1584 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1583, $1584);
 $21565 = $1585;
 HEAP32[$21565 >> 2] = 43713282;
 HEAP32[$21565 + 4 >> 2] = 852182;
 HEAP32[$1585 + 8 >> 2] = 63422;
 HEAP16[$1586 >> 1] = 770;
 HEAP16[$1586 + 2 >> 1] = 672;
 HEAP16[$1586 + 4 >> 1] = 5;
 HEAP16[$1586 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1585, $1586);
 $21573 = $1587;
 HEAP32[$21573 >> 2] = 43713282;
 HEAP32[$21573 + 4 >> 2] = 852182;
 HEAP32[$1587 + 8 >> 2] = 63422;
 HEAP16[$1588 >> 1] = 979;
 HEAP16[$1588 + 2 >> 1] = 672;
 HEAP16[$1588 + 4 >> 1] = 5;
 HEAP16[$1588 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1587, $1588);
 $21581 = $1589;
 HEAP32[$21581 >> 2] = 28509166;
 HEAP32[$21581 + 4 >> 2] = 15007760;
 HEAP8[$1589 + 8 >> 0] = -16;
 HEAP32[$1589 + 12 >> 2] = 65535;
 HEAP32[$1589 + 16 >> 2] = 54937;
 HEAP8[$1589 + 20 >> 0] = 1;
 HEAP8[$1589 + 21 >> 0] = 1;
 HEAP8[$1589 + 22 >> 0] = 3;
 HEAP8[$1589 + 23 >> 0] = -86;
 $21592 = $1589 + 24 | 0;
 HEAP32[$21592 >> 2] = 0;
 HEAP16[$21592 + 4 >> 1] = 0;
 HEAP8[$21592 + 6 >> 0] = 0;
 HEAP16[$1590 >> 1] = 1006;
 HEAP16[$1590 + 2 >> 1] = 435;
 HEAP16[$1590 + 4 >> 1] = 16;
 HEAP16[$1590 + 6 >> 1] = 229;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $1589, $1590);
 $21596 = $1591;
 HEAP32[$21596 >> 2] = 11600893;
 HEAP32[$21596 + 4 >> 2] = 16908289;
 HEAP32[$1591 + 8 >> 2] = 16904;
 HEAP16[$1592 >> 1] = 1021;
 HEAP16[$1592 + 2 >> 1] = 177;
 HEAP16[$1592 + 4 >> 1] = 1;
 HEAP16[$1592 + 6 >> 1] = 258;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1591, $1592);
 $21604 = $1593;
 HEAP32[$21604 >> 2] = 28443630;
 HEAP32[$21604 + 4 >> 2] = 65551;
 HEAP32[$1593 + 8 >> 2] = 16904;
 HEAP16[$1594 >> 1] = 1006;
 HEAP16[$1594 + 2 >> 1] = 434;
 HEAP16[$1594 + 4 >> 1] = 15;
 HEAP16[$1594 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1593, $1594);
 $21612 = $1595;
 HEAP32[$21612 >> 2] = 11600878;
 HEAP32[$21612 + 4 >> 2] = 16842753;
 HEAP32[$1595 + 8 >> 2] = 54937;
 HEAP16[$1596 >> 1] = 1006;
 HEAP16[$1596 + 2 >> 1] = 177;
 HEAP16[$1596 + 4 >> 1] = 1;
 HEAP16[$1596 + 6 >> 1] = 257;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1595, $1596);
 $21620 = $1597;
 HEAP32[$21620 >> 2] = 11600879;
 HEAP32[$21620 + 4 >> 2] = 65550;
 HEAP32[$1597 + 8 >> 2] = 54937;
 HEAP16[$1598 >> 1] = 1007;
 HEAP16[$1598 + 2 >> 1] = 177;
 HEAP16[$1598 + 4 >> 1] = 14;
 HEAP16[$1598 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1597, $1598);
 $21628 = $1599;
 HEAP32[$21628 >> 2] = 11666428;
 HEAP32[$21628 + 4 >> 2] = 16777217;
 HEAP32[$1599 + 8 >> 2] = 33808;
 HEAP16[$1600 >> 1] = 1020;
 HEAP16[$1600 + 2 >> 1] = 178;
 HEAP16[$1600 + 4 >> 1] = 1;
 HEAP16[$1600 + 6 >> 1] = 256;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1599, $1600);
 $21636 = $1601;
 HEAP32[$21636 >> 2] = 28378095;
 HEAP32[$21636 + 4 >> 2] = 65549;
 HEAP32[$1601 + 8 >> 2] = 33808;
 HEAP16[$1602 >> 1] = 1007;
 HEAP16[$1602 + 2 >> 1] = 433;
 HEAP16[$1602 + 4 >> 1] = 13;
 HEAP16[$1602 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1601, $1602);
 $21644 = $1603;
 HEAP32[$21644 >> 2] = 11666415;
 HEAP32[$21644 + 4 >> 2] = 16711681;
 HEAP32[$1603 + 8 >> 2] = 65535;
 HEAP16[$1604 >> 1] = 1007;
 HEAP16[$1604 + 2 >> 1] = 178;
 HEAP16[$1604 + 4 >> 1] = 1;
 HEAP16[$1604 + 6 >> 1] = 255;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1603, $1604);
 $21652 = $1605;
 HEAP32[$21652 >> 2] = 11666416;
 HEAP32[$21652 + 4 >> 2] = 65548;
 HEAP32[$1605 + 8 >> 2] = 65535;
 HEAP16[$1606 >> 1] = 1008;
 HEAP16[$1606 + 2 >> 1] = 178;
 HEAP16[$1606 + 4 >> 1] = 12;
 HEAP16[$1606 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1605, $1606);
 $21660 = $1607;
 HEAP32[$21660 >> 2] = 11731952;
 HEAP32[$21660 + 4 >> 2] = 16646156;
 HEAP32[$1607 + 8 >> 2] = 54937;
 HEAP16[$1608 >> 1] = 1008;
 HEAP16[$1608 + 2 >> 1] = 179;
 HEAP16[$1608 + 4 >> 1] = 12;
 HEAP16[$1608 + 6 >> 1] = 254;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1607, $1608);
 $21668 = $1609;
 HEAP32[$21668 >> 2] = 44040967;
 HEAP32[$21668 + 4 >> 2] = 524492;
 HEAP32[$1609 + 8 >> 2] = 63422;
 HEAP16[$1610 >> 1] = 775;
 HEAP16[$1610 + 2 >> 1] = 672;
 HEAP16[$1610 + 4 >> 1] = 1;
 HEAP16[$1610 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1609, $1610);
 $21676 = $1611;
 HEAP32[$21676 >> 2] = 44040967;
 HEAP32[$21676 + 4 >> 2] = 524492;
 HEAP32[$1611 + 8 >> 2] = 63422;
 HEAP16[$1612 >> 1] = 792;
 HEAP16[$1612 + 2 >> 1] = 672;
 HEAP16[$1612 + 4 >> 1] = 187;
 HEAP16[$1612 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1611, $1612);
 $21684 = $1613;
 HEAP32[$21684 >> 2] = 44040967;
 HEAP32[$21684 + 4 >> 2] = 524492;
 HEAP32[$1613 + 8 >> 2] = 63422;
 HEAP16[$1614 >> 1] = 775;
 HEAP16[$1614 + 2 >> 1] = 674;
 HEAP16[$1614 + 4 >> 1] = 1;
 HEAP16[$1614 + 6 >> 1] = 6;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1613, $1614);
 $21692 = $1615;
 HEAP32[$21692 >> 2] = 44040967;
 HEAP32[$21692 + 4 >> 2] = 524492;
 HEAP32[$1615 + 8 >> 2] = 63422;
 HEAP16[$1616 >> 1] = 792;
 HEAP16[$1616 + 2 >> 1] = 674;
 HEAP16[$1616 + 4 >> 1] = 3;
 HEAP16[$1616 + 6 >> 1] = 6;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1615, $1616);
 $21700 = $1617;
 HEAP32[$21700 >> 2] = 44040967;
 HEAP32[$21700 + 4 >> 2] = 524492;
 HEAP32[$1617 + 8 >> 2] = 63422;
 HEAP16[$1618 >> 1] = 888;
 HEAP16[$1618 + 2 >> 1] = 674;
 HEAP16[$1618 + 4 >> 1] = 91;
 HEAP16[$1618 + 6 >> 1] = 6;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1617, $1618);
 $21708 = $1619;
 HEAP32[$21708 >> 2] = 41616135;
 HEAP32[$21708 + 4 >> 2] = 1048792;
 HEAP32[$1619 + 8 >> 2] = 54938;
 HEAP16[$1620 >> 1] = 775;
 HEAP16[$1620 + 2 >> 1] = 635;
 HEAP16[$1620 + 4 >> 1] = 1;
 HEAP16[$1620 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1619, $1620);
 $21716 = $1621;
 HEAP32[$21716 >> 2] = 41616135;
 HEAP32[$21716 + 4 >> 2] = 1048792;
 HEAP32[$1621 + 8 >> 2] = 54938;
 HEAP16[$1622 >> 1] = 792;
 HEAP16[$1622 + 2 >> 1] = 635;
 HEAP16[$1622 + 4 >> 1] = 199;
 HEAP16[$1622 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1621, $1622);
 $21724 = $1623;
 HEAP32[$21724 >> 2] = 41616135;
 HEAP32[$21724 + 4 >> 2] = 1048792;
 HEAP32[$1623 + 8 >> 2] = 54938;
 HEAP16[$1624 >> 1] = 775;
 HEAP16[$1624 + 2 >> 1] = 637;
 HEAP16[$1624 + 4 >> 1] = 1;
 HEAP16[$1624 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1623, $1624);
 $21732 = $1625;
 HEAP32[$21732 >> 2] = 41616135;
 HEAP32[$21732 + 4 >> 2] = 1048792;
 HEAP32[$1625 + 8 >> 2] = 54938;
 HEAP16[$1626 >> 1] = 792;
 HEAP16[$1626 + 2 >> 1] = 637;
 HEAP16[$1626 + 4 >> 1] = 3;
 HEAP16[$1626 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1625, $1626);
 $21740 = $1627;
 HEAP32[$21740 >> 2] = 41616135;
 HEAP32[$21740 + 4 >> 2] = 1048792;
 HEAP32[$1627 + 8 >> 2] = 54938;
 HEAP16[$1628 >> 1] = 928;
 HEAP16[$1628 + 2 >> 1] = 637;
 HEAP16[$1628 + 4 >> 1] = 63;
 HEAP16[$1628 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1627, $1628);
 $21748 = $1629;
 HEAP32[$21748 >> 2] = 41616135;
 HEAP32[$21748 + 4 >> 2] = 1048792;
 HEAP32[$1629 + 8 >> 2] = 54938;
 HEAP16[$1630 >> 1] = 775;
 HEAP16[$1630 + 2 >> 1] = 650;
 HEAP16[$1630 + 4 >> 1] = 1;
 HEAP16[$1630 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1629, $1630);
 $21756 = $1631;
 HEAP32[$21756 >> 2] = 41616135;
 HEAP32[$21756 + 4 >> 2] = 1048792;
 HEAP32[$1631 + 8 >> 2] = 54938;
 HEAP16[$1632 >> 1] = 792;
 HEAP16[$1632 + 2 >> 1] = 650;
 HEAP16[$1632 + 4 >> 1] = 199;
 HEAP16[$1632 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1631, $1632);
 $21764 = $1633;
 HEAP32[$21764 >> 2] = 41616135;
 HEAP32[$21764 + 4 >> 2] = 65752;
 HEAP32[$1633 + 8 >> 2] = 65470;
 HEAP16[$1634 >> 1] = 775;
 HEAP16[$1634 + 2 >> 1] = 635;
 HEAP16[$1634 + 4 >> 1] = 1;
 HEAP16[$1634 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1633, $1634);
 $21772 = $1635;
 HEAP32[$21772 >> 2] = 41616135;
 HEAP32[$21772 + 4 >> 2] = 65752;
 HEAP32[$1635 + 8 >> 2] = 65470;
 HEAP16[$1636 >> 1] = 792;
 HEAP16[$1636 + 2 >> 1] = 635;
 HEAP16[$1636 + 4 >> 1] = 199;
 HEAP16[$1636 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1635, $1636);
 $21780 = $1637;
 HEAP32[$21780 >> 2] = 41681671;
 HEAP32[$21780 + 4 >> 2] = 65752;
 HEAP32[$1637 + 8 >> 2] = 63422;
 HEAP16[$1638 >> 1] = 775;
 HEAP16[$1638 + 2 >> 1] = 636;
 HEAP16[$1638 + 4 >> 1] = 1;
 HEAP16[$1638 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1637, $1638);
 $21788 = $1639;
 HEAP32[$21788 >> 2] = 41681671;
 HEAP32[$21788 + 4 >> 2] = 65752;
 HEAP32[$1639 + 8 >> 2] = 63422;
 HEAP16[$1640 >> 1] = 792;
 HEAP16[$1640 + 2 >> 1] = 636;
 HEAP16[$1640 + 4 >> 1] = 199;
 HEAP16[$1640 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1639, $1640);
 $21796 = $1641;
 HEAP32[$21796 >> 2] = 41747207;
 HEAP32[$21796 + 4 >> 2] = 65752;
 HEAP32[$1641 + 8 >> 2] = 63390;
 HEAP16[$1642 >> 1] = 775;
 HEAP16[$1642 + 2 >> 1] = 637;
 HEAP16[$1642 + 4 >> 1] = 1;
 HEAP16[$1642 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1641, $1642);
 $21804 = $1643;
 HEAP32[$21804 >> 2] = 41747207;
 HEAP32[$21804 + 4 >> 2] = 65752;
 HEAP32[$1643 + 8 >> 2] = 63390;
 HEAP16[$1644 >> 1] = 792;
 HEAP16[$1644 + 2 >> 1] = 637;
 HEAP16[$1644 + 4 >> 1] = 3;
 HEAP16[$1644 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1643, $1644);
 $21812 = $1645;
 HEAP32[$21812 >> 2] = 41747207;
 HEAP32[$21812 + 4 >> 2] = 65752;
 HEAP32[$1645 + 8 >> 2] = 63390;
 HEAP16[$1646 >> 1] = 928;
 HEAP16[$1646 + 2 >> 1] = 637;
 HEAP16[$1646 + 4 >> 1] = 63;
 HEAP16[$1646 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1645, $1646);
 $21820 = $1647;
 HEAP32[$21820 >> 2] = 41812743;
 HEAP32[$21820 + 4 >> 2] = 65752;
 HEAP32[$1647 + 8 >> 2] = 63389;
 HEAP16[$1648 >> 1] = 775;
 HEAP16[$1648 + 2 >> 1] = 638;
 HEAP16[$1648 + 4 >> 1] = 1;
 HEAP16[$1648 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1647, $1648);
 $21828 = $1649;
 HEAP32[$21828 >> 2] = 41812743;
 HEAP32[$21828 + 4 >> 2] = 65752;
 HEAP32[$1649 + 8 >> 2] = 63389;
 HEAP16[$1650 >> 1] = 792;
 HEAP16[$1650 + 2 >> 1] = 638;
 HEAP16[$1650 + 4 >> 1] = 3;
 HEAP16[$1650 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1649, $1650);
 $21836 = $1651;
 HEAP32[$21836 >> 2] = 41812743;
 HEAP32[$21836 + 4 >> 2] = 65752;
 HEAP32[$1651 + 8 >> 2] = 63389;
 HEAP16[$1652 >> 1] = 928;
 HEAP16[$1652 + 2 >> 1] = 638;
 HEAP16[$1652 + 4 >> 1] = 63;
 HEAP16[$1652 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1651, $1652);
 $21844 = $1653;
 HEAP32[$21844 >> 2] = 41878279;
 HEAP32[$21844 + 4 >> 2] = 65752;
 HEAP32[$1653 + 8 >> 2] = 63357;
 HEAP16[$1654 >> 1] = 775;
 HEAP16[$1654 + 2 >> 1] = 639;
 HEAP16[$1654 + 4 >> 1] = 1;
 HEAP16[$1654 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1653, $1654);
 $21852 = $1655;
 HEAP32[$21852 >> 2] = 41878279;
 HEAP32[$21852 + 4 >> 2] = 65752;
 HEAP32[$1655 + 8 >> 2] = 63357;
 HEAP16[$1656 >> 1] = 792;
 HEAP16[$1656 + 2 >> 1] = 639;
 HEAP16[$1656 + 4 >> 1] = 3;
 HEAP16[$1656 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1655, $1656);
 $21860 = $1657;
 HEAP32[$21860 >> 2] = 41878279;
 HEAP32[$21860 + 4 >> 2] = 65752;
 HEAP32[$1657 + 8 >> 2] = 63357;
 HEAP16[$1658 >> 1] = 928;
 HEAP16[$1658 + 2 >> 1] = 639;
 HEAP16[$1658 + 4 >> 1] = 63;
 HEAP16[$1658 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1657, $1658);
 $21868 = $1659;
 HEAP32[$21868 >> 2] = 41943815;
 HEAP32[$21868 + 4 >> 2] = 65752;
 HEAP32[$1659 + 8 >> 2] = 61309;
 HEAP16[$1660 >> 1] = 775;
 HEAP16[$1660 + 2 >> 1] = 640;
 HEAP16[$1660 + 4 >> 1] = 1;
 HEAP16[$1660 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1659, $1660);
 $21876 = $1661;
 HEAP32[$21876 >> 2] = 41943815;
 HEAP32[$21876 + 4 >> 2] = 65752;
 HEAP32[$1661 + 8 >> 2] = 61309;
 HEAP16[$1662 >> 1] = 792;
 HEAP16[$1662 + 2 >> 1] = 640;
 HEAP16[$1662 + 4 >> 1] = 3;
 HEAP16[$1662 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1661, $1662);
 $21884 = $1663;
 HEAP32[$21884 >> 2] = 41943815;
 HEAP32[$21884 + 4 >> 2] = 65752;
 HEAP32[$1663 + 8 >> 2] = 61309;
 HEAP16[$1664 >> 1] = 928;
 HEAP16[$1664 + 2 >> 1] = 640;
 HEAP16[$1664 + 4 >> 1] = 63;
 HEAP16[$1664 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1663, $1664);
 $21892 = $1665;
 HEAP32[$21892 >> 2] = 42009351;
 HEAP32[$21892 + 4 >> 2] = 65752;
 HEAP32[$1665 + 8 >> 2] = 61277;
 HEAP16[$1666 >> 1] = 775;
 HEAP16[$1666 + 2 >> 1] = 641;
 HEAP16[$1666 + 4 >> 1] = 1;
 HEAP16[$1666 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1665, $1666);
 $21900 = $1667;
 HEAP32[$21900 >> 2] = 42009351;
 HEAP32[$21900 + 4 >> 2] = 65752;
 HEAP32[$1667 + 8 >> 2] = 61277;
 HEAP16[$1668 >> 1] = 792;
 HEAP16[$1668 + 2 >> 1] = 641;
 HEAP16[$1668 + 4 >> 1] = 3;
 HEAP16[$1668 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1667, $1668);
 $21908 = $1669;
 HEAP32[$21908 >> 2] = 42009351;
 HEAP32[$21908 + 4 >> 2] = 65752;
 HEAP32[$1669 + 8 >> 2] = 61277;
 HEAP16[$1670 >> 1] = 928;
 HEAP16[$1670 + 2 >> 1] = 641;
 HEAP16[$1670 + 4 >> 1] = 63;
 HEAP16[$1670 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1669, $1670);
 $21916 = $1671;
 HEAP32[$21916 >> 2] = 42074887;
 HEAP32[$21916 + 4 >> 2] = 65752;
 HEAP32[$1671 + 8 >> 2] = 61276;
 HEAP16[$1672 >> 1] = 775;
 HEAP16[$1672 + 2 >> 1] = 642;
 HEAP16[$1672 + 4 >> 1] = 1;
 HEAP16[$1672 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1671, $1672);
 $21924 = $1673;
 HEAP32[$21924 >> 2] = 42074887;
 HEAP32[$21924 + 4 >> 2] = 65752;
 HEAP32[$1673 + 8 >> 2] = 61276;
 HEAP16[$1674 >> 1] = 792;
 HEAP16[$1674 + 2 >> 1] = 642;
 HEAP16[$1674 + 4 >> 1] = 3;
 HEAP16[$1674 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1673, $1674);
 $21932 = $1675;
 HEAP32[$21932 >> 2] = 42074887;
 HEAP32[$21932 + 4 >> 2] = 65752;
 HEAP32[$1675 + 8 >> 2] = 61276;
 HEAP16[$1676 >> 1] = 928;
 HEAP16[$1676 + 2 >> 1] = 642;
 HEAP16[$1676 + 4 >> 1] = 63;
 HEAP16[$1676 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1675, $1676);
 $21940 = $1677;
 HEAP32[$21940 >> 2] = 42140423;
 HEAP32[$21940 + 4 >> 2] = 65752;
 HEAP32[$1677 + 8 >> 2] = 61276;
 HEAP16[$1678 >> 1] = 775;
 HEAP16[$1678 + 2 >> 1] = 643;
 HEAP16[$1678 + 4 >> 1] = 1;
 HEAP16[$1678 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1677, $1678);
 $21948 = $1679;
 HEAP32[$21948 >> 2] = 42140423;
 HEAP32[$21948 + 4 >> 2] = 65752;
 HEAP32[$1679 + 8 >> 2] = 61276;
 HEAP16[$1680 >> 1] = 792;
 HEAP16[$1680 + 2 >> 1] = 643;
 HEAP16[$1680 + 4 >> 1] = 3;
 HEAP16[$1680 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1679, $1680);
 $21956 = $1681;
 HEAP32[$21956 >> 2] = 42140423;
 HEAP32[$21956 + 4 >> 2] = 65752;
 HEAP32[$1681 + 8 >> 2] = 61276;
 HEAP16[$1682 >> 1] = 928;
 HEAP16[$1682 + 2 >> 1] = 643;
 HEAP16[$1682 + 4 >> 1] = 63;
 HEAP16[$1682 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1681, $1682);
 $21964 = $1683;
 HEAP32[$21964 >> 2] = 42205959;
 HEAP32[$21964 + 4 >> 2] = 65752;
 HEAP32[$1683 + 8 >> 2] = 61244;
 HEAP16[$1684 >> 1] = 775;
 HEAP16[$1684 + 2 >> 1] = 644;
 HEAP16[$1684 + 4 >> 1] = 1;
 HEAP16[$1684 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1683, $1684);
 $21972 = $1685;
 HEAP32[$21972 >> 2] = 42205959;
 HEAP32[$21972 + 4 >> 2] = 65752;
 HEAP32[$1685 + 8 >> 2] = 61244;
 HEAP16[$1686 >> 1] = 792;
 HEAP16[$1686 + 2 >> 1] = 644;
 HEAP16[$1686 + 4 >> 1] = 3;
 HEAP16[$1686 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1685, $1686);
 $21980 = $1687;
 HEAP32[$21980 >> 2] = 42205959;
 HEAP32[$21980 + 4 >> 2] = 65752;
 HEAP32[$1687 + 8 >> 2] = 61244;
 HEAP16[$1688 >> 1] = 928;
 HEAP16[$1688 + 2 >> 1] = 644;
 HEAP16[$1688 + 4 >> 1] = 63;
 HEAP16[$1688 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1687, $1688);
 $21988 = $1689;
 HEAP32[$21988 >> 2] = 42271495;
 HEAP32[$21988 + 4 >> 2] = 65752;
 HEAP32[$1689 + 8 >> 2] = 59195;
 HEAP16[$1690 >> 1] = 775;
 HEAP16[$1690 + 2 >> 1] = 645;
 HEAP16[$1690 + 4 >> 1] = 1;
 HEAP16[$1690 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1689, $1690);
 $21996 = $1691;
 HEAP32[$21996 >> 2] = 42271495;
 HEAP32[$21996 + 4 >> 2] = 65752;
 HEAP32[$1691 + 8 >> 2] = 59195;
 HEAP16[$1692 >> 1] = 792;
 HEAP16[$1692 + 2 >> 1] = 645;
 HEAP16[$1692 + 4 >> 1] = 3;
 HEAP16[$1692 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1691, $1692);
 $22004 = $1693;
 HEAP32[$22004 >> 2] = 42271495;
 HEAP32[$22004 + 4 >> 2] = 65752;
 HEAP32[$1693 + 8 >> 2] = 59195;
 HEAP16[$1694 >> 1] = 928;
 HEAP16[$1694 + 2 >> 1] = 645;
 HEAP16[$1694 + 4 >> 1] = 63;
 HEAP16[$1694 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1693, $1694);
 $22012 = $1695;
 HEAP32[$22012 >> 2] = 42337031;
 HEAP32[$22012 + 4 >> 2] = 65752;
 HEAP32[$1695 + 8 >> 2] = 59163;
 HEAP16[$1696 >> 1] = 775;
 HEAP16[$1696 + 2 >> 1] = 646;
 HEAP16[$1696 + 4 >> 1] = 1;
 HEAP16[$1696 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1695, $1696);
 $22020 = $1697;
 HEAP32[$22020 >> 2] = 42337031;
 HEAP32[$22020 + 4 >> 2] = 65752;
 HEAP32[$1697 + 8 >> 2] = 59163;
 HEAP16[$1698 >> 1] = 792;
 HEAP16[$1698 + 2 >> 1] = 646;
 HEAP16[$1698 + 4 >> 1] = 3;
 HEAP16[$1698 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1697, $1698);
 $22028 = $1699;
 HEAP32[$22028 >> 2] = 42337031;
 HEAP32[$22028 + 4 >> 2] = 65752;
 HEAP32[$1699 + 8 >> 2] = 59163;
 HEAP16[$1700 >> 1] = 928;
 HEAP16[$1700 + 2 >> 1] = 646;
 HEAP16[$1700 + 4 >> 1] = 63;
 HEAP16[$1700 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1699, $1700);
 $22036 = $1701;
 HEAP32[$22036 >> 2] = 42402567;
 HEAP32[$22036 + 4 >> 2] = 65752;
 HEAP32[$1701 + 8 >> 2] = 59163;
 HEAP16[$1702 >> 1] = 775;
 HEAP16[$1702 + 2 >> 1] = 647;
 HEAP16[$1702 + 4 >> 1] = 1;
 HEAP16[$1702 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1701, $1702);
 $22044 = $1703;
 HEAP32[$22044 >> 2] = 42402567;
 HEAP32[$22044 + 4 >> 2] = 65752;
 HEAP32[$1703 + 8 >> 2] = 59163;
 HEAP16[$1704 >> 1] = 792;
 HEAP16[$1704 + 2 >> 1] = 647;
 HEAP16[$1704 + 4 >> 1] = 3;
 HEAP16[$1704 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1703, $1704);
 $22052 = $1705;
 HEAP32[$22052 >> 2] = 42402567;
 HEAP32[$22052 + 4 >> 2] = 65752;
 HEAP32[$1705 + 8 >> 2] = 59163;
 HEAP16[$1706 >> 1] = 928;
 HEAP16[$1706 + 2 >> 1] = 647;
 HEAP16[$1706 + 4 >> 1] = 63;
 HEAP16[$1706 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1705, $1706);
 $22060 = $1707;
 HEAP32[$22060 >> 2] = 42468103;
 HEAP32[$22060 + 4 >> 2] = 65752;
 HEAP32[$1707 + 8 >> 2] = 59131;
 HEAP16[$1708 >> 1] = 775;
 HEAP16[$1708 + 2 >> 1] = 648;
 HEAP16[$1708 + 4 >> 1] = 1;
 HEAP16[$1708 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1707, $1708);
 $22068 = $1709;
 HEAP32[$22068 >> 2] = 42468103;
 HEAP32[$22068 + 4 >> 2] = 65752;
 HEAP32[$1709 + 8 >> 2] = 59131;
 HEAP16[$1710 >> 1] = 792;
 HEAP16[$1710 + 2 >> 1] = 648;
 HEAP16[$1710 + 4 >> 1] = 3;
 HEAP16[$1710 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1709, $1710);
 $22076 = $1711;
 HEAP32[$22076 >> 2] = 42468103;
 HEAP32[$22076 + 4 >> 2] = 65752;
 HEAP32[$1711 + 8 >> 2] = 59131;
 HEAP16[$1712 >> 1] = 928;
 HEAP16[$1712 + 2 >> 1] = 648;
 HEAP16[$1712 + 4 >> 1] = 63;
 HEAP16[$1712 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1711, $1712);
 $22084 = $1713;
 HEAP32[$22084 >> 2] = 42533639;
 HEAP32[$22084 + 4 >> 2] = 65752;
 HEAP32[$1713 + 8 >> 2] = 57082;
 HEAP16[$1714 >> 1] = 775;
 HEAP16[$1714 + 2 >> 1] = 649;
 HEAP16[$1714 + 4 >> 1] = 1;
 HEAP16[$1714 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1713, $1714);
 $22092 = $1715;
 HEAP32[$22092 >> 2] = 42533639;
 HEAP32[$22092 + 4 >> 2] = 65752;
 HEAP32[$1715 + 8 >> 2] = 57082;
 HEAP16[$1716 >> 1] = 792;
 HEAP16[$1716 + 2 >> 1] = 649;
 HEAP16[$1716 + 4 >> 1] = 3;
 HEAP16[$1716 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1715, $1716);
 $22100 = $1717;
 HEAP32[$22100 >> 2] = 42533639;
 HEAP32[$22100 + 4 >> 2] = 65752;
 HEAP32[$1717 + 8 >> 2] = 57082;
 HEAP16[$1718 >> 1] = 928;
 HEAP16[$1718 + 2 >> 1] = 649;
 HEAP16[$1718 + 4 >> 1] = 63;
 HEAP16[$1718 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1717, $1718);
 $22108 = $1719;
 HEAP32[$22108 >> 2] = 42599175;
 HEAP32[$22108 + 4 >> 2] = 65752;
 HEAP32[$1719 + 8 >> 2] = 57050;
 HEAP16[$1720 >> 1] = 775;
 HEAP16[$1720 + 2 >> 1] = 650;
 HEAP16[$1720 + 4 >> 1] = 1;
 HEAP16[$1720 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1719, $1720);
 $22116 = $1721;
 HEAP32[$22116 >> 2] = 42599175;
 HEAP32[$22116 + 4 >> 2] = 65752;
 HEAP32[$1721 + 8 >> 2] = 57050;
 HEAP16[$1722 >> 1] = 792;
 HEAP16[$1722 + 2 >> 1] = 650;
 HEAP16[$1722 + 4 >> 1] = 199;
 HEAP16[$1722 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1721, $1722);
 $22124 = $1723;
 HEAP32[$22124 >> 2] = 28508935;
 HEAP32[$22124 + 4 >> 2] = 1048780;
 HEAP32[$1723 + 8 >> 2] = 63422;
 HEAP16[$1724 >> 1] = 775;
 HEAP16[$1724 + 2 >> 1] = 435;
 HEAP16[$1724 + 4 >> 1] = 1;
 HEAP16[$1724 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1723, $1724);
 $22132 = $1725;
 HEAP32[$22132 >> 2] = 28508935;
 HEAP32[$22132 + 4 >> 2] = 1048780;
 HEAP32[$1725 + 8 >> 2] = 63422;
 HEAP16[$1726 >> 1] = 792;
 HEAP16[$1726 + 2 >> 1] = 435;
 HEAP16[$1726 + 4 >> 1] = 187;
 HEAP16[$1726 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1725, $1726);
 $22140 = $1727;
 HEAP32[$22140 >> 2] = 28508935;
 HEAP32[$22140 + 4 >> 2] = 1048780;
 HEAP32[$1727 + 8 >> 2] = 63422;
 HEAP16[$1728 >> 1] = 775;
 HEAP16[$1728 + 2 >> 1] = 437;
 HEAP16[$1728 + 4 >> 1] = 1;
 HEAP16[$1728 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1727, $1728);
 $22148 = $1729;
 HEAP32[$22148 >> 2] = 28508935;
 HEAP32[$22148 + 4 >> 2] = 1048780;
 HEAP32[$1729 + 8 >> 2] = 63422;
 HEAP16[$1730 >> 1] = 792;
 HEAP16[$1730 + 2 >> 1] = 437;
 HEAP16[$1730 + 4 >> 1] = 3;
 HEAP16[$1730 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1729, $1730);
 $22156 = $1731;
 HEAP32[$22156 >> 2] = 28508935;
 HEAP32[$22156 + 4 >> 2] = 1048780;
 HEAP32[$1731 + 8 >> 2] = 63422;
 HEAP16[$1732 >> 1] = 947;
 HEAP16[$1732 + 2 >> 1] = 437;
 HEAP16[$1732 + 4 >> 1] = 32;
 HEAP16[$1732 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1731, $1732);
 $22164 = $1733;
 HEAP32[$22164 >> 2] = 28508935;
 HEAP32[$22164 + 4 >> 2] = 1048780;
 HEAP32[$1733 + 8 >> 2] = 63422;
 HEAP16[$1734 >> 1] = 775;
 HEAP16[$1734 + 2 >> 1] = 450;
 HEAP16[$1734 + 4 >> 1] = 1;
 HEAP16[$1734 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1733, $1734);
 $22172 = $1735;
 HEAP32[$22172 >> 2] = 28508935;
 HEAP32[$22172 + 4 >> 2] = 1048780;
 HEAP32[$1735 + 8 >> 2] = 63422;
 HEAP16[$1736 >> 1] = 792;
 HEAP16[$1736 + 2 >> 1] = 450;
 HEAP16[$1736 + 4 >> 1] = 187;
 HEAP16[$1736 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1735, $1736);
 $22180 = $1737;
 HEAP32[$22180 >> 2] = 29885191;
 HEAP32[$22180 + 4 >> 2] = 1048780;
 HEAP32[$1737 + 8 >> 2] = 63422;
 HEAP16[$1738 >> 1] = 775;
 HEAP16[$1738 + 2 >> 1] = 456;
 HEAP16[$1738 + 4 >> 1] = 1;
 HEAP16[$1738 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1737, $1738);
 $22188 = $1739;
 HEAP32[$22188 >> 2] = 29885191;
 HEAP32[$22188 + 4 >> 2] = 1048780;
 HEAP32[$1739 + 8 >> 2] = 63422;
 HEAP16[$1740 >> 1] = 792;
 HEAP16[$1740 + 2 >> 1] = 456;
 HEAP16[$1740 + 4 >> 1] = 187;
 HEAP16[$1740 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1739, $1740);
 $22196 = $1741;
 HEAP32[$22196 >> 2] = 29885191;
 HEAP32[$22196 + 4 >> 2] = 1048780;
 HEAP32[$1741 + 8 >> 2] = 63422;
 HEAP16[$1742 >> 1] = 775;
 HEAP16[$1742 + 2 >> 1] = 458;
 HEAP16[$1742 + 4 >> 1] = 1;
 HEAP16[$1742 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1741, $1742);
 $22204 = $1743;
 HEAP32[$22204 >> 2] = 29885191;
 HEAP32[$22204 + 4 >> 2] = 1048780;
 HEAP32[$1743 + 8 >> 2] = 63422;
 HEAP16[$1744 >> 1] = 792;
 HEAP16[$1744 + 2 >> 1] = 458;
 HEAP16[$1744 + 4 >> 1] = 3;
 HEAP16[$1744 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1743, $1744);
 $22212 = $1745;
 HEAP32[$22212 >> 2] = 29885191;
 HEAP32[$22212 + 4 >> 2] = 1048780;
 HEAP32[$1745 + 8 >> 2] = 63422;
 HEAP16[$1746 >> 1] = 929;
 HEAP16[$1746 + 2 >> 1] = 458;
 HEAP16[$1746 + 4 >> 1] = 50;
 HEAP16[$1746 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1745, $1746);
 $22220 = $1747;
 HEAP32[$22220 >> 2] = 29885191;
 HEAP32[$22220 + 4 >> 2] = 1048780;
 HEAP32[$1747 + 8 >> 2] = 63422;
 HEAP16[$1748 >> 1] = 775;
 HEAP16[$1748 + 2 >> 1] = 471;
 HEAP16[$1748 + 4 >> 1] = 1;
 HEAP16[$1748 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1747, $1748);
 $22228 = $1749;
 HEAP32[$22228 >> 2] = 29885191;
 HEAP32[$22228 + 4 >> 2] = 1048780;
 HEAP32[$1749 + 8 >> 2] = 63422;
 HEAP16[$1750 >> 1] = 792;
 HEAP16[$1750 + 2 >> 1] = 471;
 HEAP16[$1750 + 4 >> 1] = 187;
 HEAP16[$1750 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1749, $1750);
 $22236 = $1751;
 HEAP32[$22236 >> 2] = 31261447;
 HEAP32[$22236 + 4 >> 2] = 1048780;
 HEAP32[$1751 + 8 >> 2] = 63422;
 HEAP16[$1752 >> 1] = 775;
 HEAP16[$1752 + 2 >> 1] = 477;
 HEAP16[$1752 + 4 >> 1] = 1;
 HEAP16[$1752 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1751, $1752);
 $22244 = $1753;
 HEAP32[$22244 >> 2] = 31261447;
 HEAP32[$22244 + 4 >> 2] = 1048780;
 HEAP32[$1753 + 8 >> 2] = 63422;
 HEAP16[$1754 >> 1] = 792;
 HEAP16[$1754 + 2 >> 1] = 477;
 HEAP16[$1754 + 4 >> 1] = 187;
 HEAP16[$1754 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1753, $1754);
 $22252 = $1755;
 HEAP32[$22252 >> 2] = 31261447;
 HEAP32[$22252 + 4 >> 2] = 1048780;
 HEAP32[$1755 + 8 >> 2] = 63422;
 HEAP16[$1756 >> 1] = 775;
 HEAP16[$1756 + 2 >> 1] = 479;
 HEAP16[$1756 + 4 >> 1] = 1;
 HEAP16[$1756 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1755, $1756);
 $22260 = $1757;
 HEAP32[$22260 >> 2] = 31261447;
 HEAP32[$22260 + 4 >> 2] = 1048780;
 HEAP32[$1757 + 8 >> 2] = 63422;
 HEAP16[$1758 >> 1] = 792;
 HEAP16[$1758 + 2 >> 1] = 479;
 HEAP16[$1758 + 4 >> 1] = 3;
 HEAP16[$1758 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1757, $1758);
 $22268 = $1759;
 HEAP32[$22268 >> 2] = 31261447;
 HEAP32[$22268 + 4 >> 2] = 1048780;
 HEAP32[$1759 + 8 >> 2] = 63422;
 HEAP16[$1760 >> 1] = 949;
 HEAP16[$1760 + 2 >> 1] = 479;
 HEAP16[$1760 + 4 >> 1] = 30;
 HEAP16[$1760 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1759, $1760);
 $22276 = $1761;
 HEAP32[$22276 >> 2] = 31261447;
 HEAP32[$22276 + 4 >> 2] = 1048780;
 HEAP32[$1761 + 8 >> 2] = 63422;
 HEAP16[$1762 >> 1] = 775;
 HEAP16[$1762 + 2 >> 1] = 492;
 HEAP16[$1762 + 4 >> 1] = 1;
 HEAP16[$1762 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1761, $1762);
 $22284 = $1763;
 HEAP32[$22284 >> 2] = 31261447;
 HEAP32[$22284 + 4 >> 2] = 1048780;
 HEAP32[$1763 + 8 >> 2] = 63422;
 HEAP16[$1764 >> 1] = 792;
 HEAP16[$1764 + 2 >> 1] = 492;
 HEAP16[$1764 + 4 >> 1] = 187;
 HEAP16[$1764 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1763, $1764);
 $22292 = $1765;
 HEAP32[$22292 >> 2] = 32637703;
 HEAP32[$22292 + 4 >> 2] = 1704140;
 HEAP32[$1765 + 8 >> 2] = 63422;
 HEAP16[$1766 >> 1] = 775;
 HEAP16[$1766 + 2 >> 1] = 498;
 HEAP16[$1766 + 4 >> 1] = 1;
 HEAP16[$1766 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1765, $1766);
 $22300 = $1767;
 HEAP32[$22300 >> 2] = 32637703;
 HEAP32[$22300 + 4 >> 2] = 1704140;
 HEAP32[$1767 + 8 >> 2] = 63422;
 HEAP16[$1768 >> 1] = 792;
 HEAP16[$1768 + 2 >> 1] = 498;
 HEAP16[$1768 + 4 >> 1] = 3;
 HEAP16[$1768 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1767, $1768);
 $22308 = $1769;
 HEAP32[$22308 >> 2] = 32637703;
 HEAP32[$22308 + 4 >> 2] = 1704140;
 HEAP32[$1769 + 8 >> 2] = 63422;
 HEAP16[$1770 >> 1] = 967;
 HEAP16[$1770 + 2 >> 1] = 498;
 HEAP16[$1770 + 4 >> 1] = 12;
 HEAP16[$1770 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1769, $1770);
 $22316 = $1771;
 HEAP32[$22316 >> 2] = 32637703;
 HEAP32[$22316 + 4 >> 2] = 1704140;
 HEAP32[$1771 + 8 >> 2] = 63422;
 HEAP16[$1772 >> 1] = 775;
 HEAP16[$1772 + 2 >> 1] = 514;
 HEAP16[$1772 + 4 >> 1] = 20;
 HEAP16[$1772 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1771, $1772);
 $22324 = $1773;
 HEAP32[$22324 >> 2] = 32637703;
 HEAP32[$22324 + 4 >> 2] = 1704140;
 HEAP32[$1773 + 8 >> 2] = 63422;
 HEAP16[$1774 >> 1] = 967;
 HEAP16[$1774 + 2 >> 1] = 514;
 HEAP16[$1774 + 4 >> 1] = 12;
 HEAP16[$1774 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1773, $1774);
 $22332 = $1775;
 HEAP32[$22332 >> 2] = 34669319;
 HEAP32[$22332 + 4 >> 2] = 2556108;
 HEAP32[$1775 + 8 >> 2] = 63422;
 HEAP16[$1776 >> 1] = 775;
 HEAP16[$1776 + 2 >> 1] = 529;
 HEAP16[$1776 + 4 >> 1] = 1;
 HEAP16[$1776 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1775, $1776);
 $22340 = $1777;
 HEAP32[$22340 >> 2] = 34669319;
 HEAP32[$22340 + 4 >> 2] = 2556108;
 HEAP32[$1777 + 8 >> 2] = 63422;
 HEAP16[$1778 >> 1] = 792;
 HEAP16[$1778 + 2 >> 1] = 529;
 HEAP16[$1778 + 4 >> 1] = 3;
 HEAP16[$1778 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1777, $1778);
 $22348 = $1779;
 HEAP32[$22348 >> 2] = 34669319;
 HEAP32[$22348 + 4 >> 2] = 2556108;
 HEAP32[$1779 + 8 >> 2] = 63422;
 HEAP16[$1780 >> 1] = 953;
 HEAP16[$1780 + 2 >> 1] = 529;
 HEAP16[$1780 + 4 >> 1] = 26;
 HEAP16[$1780 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1779, $1780);
 $22356 = $1781;
 HEAP32[$22356 >> 2] = 34669319;
 HEAP32[$22356 + 4 >> 2] = 2556108;
 HEAP32[$1781 + 8 >> 2] = 63422;
 HEAP16[$1782 >> 1] = 775;
 HEAP16[$1782 + 2 >> 1] = 545;
 HEAP16[$1782 + 4 >> 1] = 20;
 HEAP16[$1782 + 6 >> 1] = 23;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1781, $1782);
 $22364 = $1783;
 HEAP32[$22364 >> 2] = 34669319;
 HEAP32[$22364 + 4 >> 2] = 2556108;
 HEAP32[$1783 + 8 >> 2] = 63422;
 HEAP16[$1784 >> 1] = 953;
 HEAP16[$1784 + 2 >> 1] = 545;
 HEAP16[$1784 + 4 >> 1] = 26;
 HEAP16[$1784 + 6 >> 1] = 23;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1783, $1784);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 795;
 HEAP16[$bitmapData + 2 >> 1] = 529;
 HEAP16[$bitmapData + 4 >> 1] = 952;
 HEAP16[$bitmapData + 6 >> 1] = 567;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 12532) label = 3379; else {
  $22377 = HEAP32[918918] | 0;
  if (($22377 | 0) == (HEAP32[918916] | 0)) label = 3379; else {
   $$lcssa$i$i4355 = 3675672;
   $$lcssa8$i$i4354 = $22377;
   label = 3380;
  }
 }
 do if ((label | 0) == 3379) {
  if ((HEAP32[918925] | 0) >>> 0 >= 12532) {
   $22384 = HEAP32[918924] | 0;
   if (($22384 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4355 = 3675696;
    $$lcssa8$i$i4354 = $22384;
    label = 3380;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 12532) {
   $22389 = HEAP32[918930] | 0;
   if (($22389 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4355 = 3675720;
    $$lcssa8$i$i4354 = $22389;
    label = 3380;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 12532) {
   $22394 = HEAP32[918936] | 0;
   if (($22394 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4355 = 3675744;
    $$lcssa8$i$i4354 = $22394;
    label = 3380;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 12532) {
   $22399 = HEAP32[918942] | 0;
   if (($22399 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4355 = 3675768;
    $$lcssa8$i$i4354 = $22399;
    label = 3380;
    break;
   }
  }
  $$3$i$i4356 = __Znwj(12532) | 0;
 } while (0);
 if ((label | 0) == 3380) {
  $22382 = $$lcssa8$i$i4354 + -4 | 0;
  HEAP32[$$lcssa$i$i4355 >> 2] = $22382;
  $$3$i$i4356 = HEAP32[$22382 >> 2] | 0;
 }
 $22403 = $$3$i$i4356 + 52 | 0;
 HEAP16[$$3$i$i4356 >> 1] = 160;
 HEAP16[$$3$i$i4356 + 2 >> 1] = 39;
 HEAP8[$$3$i$i4356 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4356 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4356 + 8 >> 2] = 320;
 HEAP32[$$3$i$i4356 + 12 >> 2] = 12480;
 HEAP32[$$3$i$i4356 + 16 >> 2] = $22403;
 HEAP32[$$3$i$i4356 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4356 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4356 + 48 >> 0] = 0;
 HEAP32[$1785 >> 2] = $$3$i$i4356;
 _memcpy($22403 | 0, 2267248, 320) | 0;
 _memcpy($$3$i$i4356 + 372 | 0, 2267568, 320) | 0;
 _memcpy($$3$i$i4356 + 692 | 0, 2267888, 320) | 0;
 _memcpy($$3$i$i4356 + 1012 | 0, 2268208, 320) | 0;
 _memcpy($$3$i$i4356 + 1332 | 0, 2268528, 320) | 0;
 _memcpy($$3$i$i4356 + 1652 | 0, 2268848, 320) | 0;
 _memcpy($$3$i$i4356 + 1972 | 0, 2269168, 320) | 0;
 _memcpy($$3$i$i4356 + 2292 | 0, 2269488, 320) | 0;
 _memcpy($$3$i$i4356 + 2612 | 0, 2269808, 320) | 0;
 _memcpy($$3$i$i4356 + 2932 | 0, 2270128, 320) | 0;
 _memcpy($$3$i$i4356 + 3252 | 0, 2270448, 320) | 0;
 _memcpy($$3$i$i4356 + 3572 | 0, 2270768, 320) | 0;
 _memcpy($$3$i$i4356 + 3892 | 0, 2271088, 320) | 0;
 _memcpy($$3$i$i4356 + 4212 | 0, 2271408, 320) | 0;
 _memcpy($$3$i$i4356 + 4532 | 0, 2271728, 320) | 0;
 _memcpy($$3$i$i4356 + 4852 | 0, 2272048, 320) | 0;
 _memcpy($$3$i$i4356 + 5172 | 0, 2272368, 320) | 0;
 _memcpy($$3$i$i4356 + 5492 | 0, 2272688, 320) | 0;
 _memcpy($$3$i$i4356 + 5812 | 0, 2273008, 320) | 0;
 _memcpy($$3$i$i4356 + 6132 | 0, 2273328, 320) | 0;
 _memcpy($$3$i$i4356 + 6452 | 0, 2273648, 320) | 0;
 _memcpy($$3$i$i4356 + 6772 | 0, 2273968, 320) | 0;
 _memcpy($$3$i$i4356 + 7092 | 0, 2274288, 320) | 0;
 _memcpy($$3$i$i4356 + 7412 | 0, 2274608, 320) | 0;
 _memcpy($$3$i$i4356 + 7732 | 0, 2274928, 320) | 0;
 _memcpy($$3$i$i4356 + 8052 | 0, 2275248, 320) | 0;
 _memcpy($$3$i$i4356 + 8372 | 0, 2275568, 320) | 0;
 _memcpy($$3$i$i4356 + 8692 | 0, 2275888, 320) | 0;
 _memcpy($$3$i$i4356 + 9012 | 0, 2276208, 320) | 0;
 _memcpy($$3$i$i4356 + 9332 | 0, 2276528, 320) | 0;
 _memcpy($$3$i$i4356 + 9652 | 0, 2276848, 320) | 0;
 _memcpy($$3$i$i4356 + 9972 | 0, 2277168, 320) | 0;
 _memcpy($$3$i$i4356 + 10292 | 0, 2277488, 320) | 0;
 _memcpy($$3$i$i4356 + 10612 | 0, 2277808, 320) | 0;
 _memcpy($$3$i$i4356 + 10932 | 0, 2278128, 320) | 0;
 _memcpy($$3$i$i4356 + 11252 | 0, 2278448, 320) | 0;
 _memcpy($$3$i$i4356 + 11572 | 0, 2278768, 320) | 0;
 _memcpy($$3$i$i4356 + 11892 | 0, 2279088, 320) | 0;
 _memcpy($$3$i$i4356 + 12212 | 0, 2279408, 320) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1785);
 if ($$3$i$i4356 | 0) {
  $22452 = $$3$i$i4356 + 5 | 0;
  $22454 = (HEAP8[$22452 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$22452 >> 0] = $22454;
  if (!($22454 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4356);
  HEAP32[$1785 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 498;
 HEAP16[$bitmapData + 4 >> 1] = 966;
 HEAP16[$bitmapData + 6 >> 1] = 523;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 10036) label = 3395; else {
  $22461 = HEAP32[918918] | 0;
  if (($22461 | 0) == (HEAP32[918916] | 0)) label = 3395; else {
   $$lcssa$i$i4343 = 3675672;
   $$lcssa8$i$i4342 = $22461;
   label = 3396;
  }
 }
 do if ((label | 0) == 3395) {
  if ((HEAP32[918925] | 0) >>> 0 >= 10036) {
   $22468 = HEAP32[918924] | 0;
   if (($22468 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4343 = 3675696;
    $$lcssa8$i$i4342 = $22468;
    label = 3396;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 10036) {
   $22473 = HEAP32[918930] | 0;
   if (($22473 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4343 = 3675720;
    $$lcssa8$i$i4342 = $22473;
    label = 3396;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 10036) {
   $22478 = HEAP32[918936] | 0;
   if (($22478 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4343 = 3675744;
    $$lcssa8$i$i4342 = $22478;
    label = 3396;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 10036) {
   $22483 = HEAP32[918942] | 0;
   if (($22483 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4343 = 3675768;
    $$lcssa8$i$i4342 = $22483;
    label = 3396;
    break;
   }
  }
  $$3$i$i4344 = __Znwj(10036) | 0;
 } while (0);
 if ((label | 0) == 3396) {
  $22466 = $$lcssa8$i$i4342 + -4 | 0;
  HEAP32[$$lcssa$i$i4343 >> 2] = $22466;
  $$3$i$i4344 = HEAP32[$22466 >> 2] | 0;
 }
 $22487 = $$3$i$i4344 + 52 | 0;
 HEAP16[$$3$i$i4344 >> 1] = 192;
 HEAP16[$$3$i$i4344 + 2 >> 1] = 26;
 HEAP8[$$3$i$i4344 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4344 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4344 + 8 >> 2] = 384;
 HEAP32[$$3$i$i4344 + 12 >> 2] = 9984;
 HEAP32[$$3$i$i4344 + 16 >> 2] = $22487;
 HEAP32[$$3$i$i4344 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4344 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4344 + 48 >> 0] = 0;
 HEAP32[$1786 >> 2] = $$3$i$i4344;
 _memcpy($22487 | 0, 2279728, 384) | 0;
 _memcpy($$3$i$i4344 + 436 | 0, 2280112, 384) | 0;
 _memcpy($$3$i$i4344 + 820 | 0, 2280496, 384) | 0;
 _memcpy($$3$i$i4344 + 1204 | 0, 2280880, 384) | 0;
 _memcpy($$3$i$i4344 + 1588 | 0, 2281264, 384) | 0;
 _memcpy($$3$i$i4344 + 1972 | 0, 2281648, 384) | 0;
 _memcpy($$3$i$i4344 + 2356 | 0, 2282032, 384) | 0;
 _memcpy($$3$i$i4344 + 2740 | 0, 2282416, 384) | 0;
 _memcpy($$3$i$i4344 + 3124 | 0, 2282800, 384) | 0;
 _memcpy($$3$i$i4344 + 3508 | 0, 2283184, 384) | 0;
 _memcpy($$3$i$i4344 + 3892 | 0, 2283568, 384) | 0;
 _memcpy($$3$i$i4344 + 4276 | 0, 2283952, 384) | 0;
 _memcpy($$3$i$i4344 + 4660 | 0, 2284336, 384) | 0;
 _memcpy($$3$i$i4344 + 5044 | 0, 2284720, 384) | 0;
 _memcpy($$3$i$i4344 + 5428 | 0, 2285104, 384) | 0;
 _memcpy($$3$i$i4344 + 5812 | 0, 2285488, 384) | 0;
 _memcpy($$3$i$i4344 + 6196 | 0, 2285872, 384) | 0;
 _memcpy($$3$i$i4344 + 6580 | 0, 2286256, 384) | 0;
 _memcpy($$3$i$i4344 + 6964 | 0, 2286640, 384) | 0;
 _memcpy($$3$i$i4344 + 7348 | 0, 2287024, 384) | 0;
 _memcpy($$3$i$i4344 + 7732 | 0, 2287408, 384) | 0;
 _memcpy($$3$i$i4344 + 8116 | 0, 2287792, 384) | 0;
 _memcpy($$3$i$i4344 + 8500 | 0, 2288176, 384) | 0;
 _memcpy($$3$i$i4344 + 8884 | 0, 2288560, 384) | 0;
 _memcpy($$3$i$i4344 + 9268 | 0, 2288944, 384) | 0;
 _memcpy($$3$i$i4344 + 9652 | 0, 2289328, 384) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1786);
 if ($$3$i$i4344 | 0) {
  $22523 = $$3$i$i4344 + 5 | 0;
  $22525 = (HEAP8[$22523 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$22523 >> 0] = $22525;
  if (!($22525 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4344);
  HEAP32[$1786 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 477;
 HEAP16[$bitmapData + 4 >> 1] = 948;
 HEAP16[$bitmapData + 6 >> 1] = 492;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 5684) label = 3411; else {
  $22532 = HEAP32[918918] | 0;
  if (($22532 | 0) == (HEAP32[918916] | 0)) label = 3411; else {
   $$lcssa$i$i4331 = 3675672;
   $$lcssa8$i$i4330 = $22532;
   label = 3412;
  }
 }
 do if ((label | 0) == 3411) {
  if ((HEAP32[918925] | 0) >>> 0 >= 5684) {
   $22539 = HEAP32[918924] | 0;
   if (($22539 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4331 = 3675696;
    $$lcssa8$i$i4330 = $22539;
    label = 3412;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 5684) {
   $22544 = HEAP32[918930] | 0;
   if (($22544 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4331 = 3675720;
    $$lcssa8$i$i4330 = $22544;
    label = 3412;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 5684) {
   $22549 = HEAP32[918936] | 0;
   if (($22549 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4331 = 3675744;
    $$lcssa8$i$i4330 = $22549;
    label = 3412;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 5684) {
   $22554 = HEAP32[918942] | 0;
   if (($22554 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4331 = 3675768;
    $$lcssa8$i$i4330 = $22554;
    label = 3412;
    break;
   }
  }
  $$3$i$i4332 = __Znwj(5684) | 0;
 } while (0);
 if ((label | 0) == 3412) {
  $22537 = $$lcssa8$i$i4330 + -4 | 0;
  HEAP32[$$lcssa$i$i4331 >> 2] = $22537;
  $$3$i$i4332 = HEAP32[$22537 >> 2] | 0;
 }
 $22558 = $$3$i$i4332 + 52 | 0;
 HEAP16[$$3$i$i4332 >> 1] = 176;
 HEAP16[$$3$i$i4332 + 2 >> 1] = 16;
 HEAP8[$$3$i$i4332 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4332 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4332 + 8 >> 2] = 352;
 HEAP32[$$3$i$i4332 + 12 >> 2] = 5632;
 HEAP32[$$3$i$i4332 + 16 >> 2] = $22558;
 HEAP32[$$3$i$i4332 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4332 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4332 + 48 >> 0] = 0;
 HEAP32[$1787 >> 2] = $$3$i$i4332;
 _memcpy($22558 | 0, 2289712, 352) | 0;
 _memcpy($$3$i$i4332 + 404 | 0, 2290064, 352) | 0;
 _memcpy($$3$i$i4332 + 756 | 0, 2290416, 352) | 0;
 _memcpy($$3$i$i4332 + 1108 | 0, 2290768, 352) | 0;
 _memcpy($$3$i$i4332 + 1460 | 0, 2291120, 352) | 0;
 _memcpy($$3$i$i4332 + 1812 | 0, 2291472, 352) | 0;
 _memcpy($$3$i$i4332 + 2164 | 0, 2291824, 352) | 0;
 _memcpy($$3$i$i4332 + 2516 | 0, 2292176, 352) | 0;
 _memcpy($$3$i$i4332 + 2868 | 0, 2292528, 352) | 0;
 _memcpy($$3$i$i4332 + 3220 | 0, 2292880, 352) | 0;
 _memcpy($$3$i$i4332 + 3572 | 0, 2293232, 352) | 0;
 _memcpy($$3$i$i4332 + 3924 | 0, 2293584, 352) | 0;
 _memcpy($$3$i$i4332 + 4276 | 0, 2293936, 352) | 0;
 _memcpy($$3$i$i4332 + 4628 | 0, 2294288, 352) | 0;
 _memcpy($$3$i$i4332 + 4980 | 0, 2294640, 352) | 0;
 _memcpy($$3$i$i4332 + 5332 | 0, 2294992, 352) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1787);
 if ($$3$i$i4332 | 0) {
  $22584 = $$3$i$i4332 + 5 | 0;
  $22586 = (HEAP8[$22584 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$22584 >> 0] = $22586;
  if (!($22586 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4332);
  HEAP32[$1787 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 457;
 HEAP16[$bitmapData + 4 >> 1] = 928;
 HEAP16[$bitmapData + 6 >> 1] = 471;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4732) label = 3427; else {
  $22593 = HEAP32[918918] | 0;
  if (($22593 | 0) == (HEAP32[918916] | 0)) label = 3427; else {
   $$lcssa$i$i4319 = 3675672;
   $$lcssa8$i$i4318 = $22593;
   label = 3428;
  }
 }
 do if ((label | 0) == 3427) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4732) {
   $22600 = HEAP32[918924] | 0;
   if (($22600 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4319 = 3675696;
    $$lcssa8$i$i4318 = $22600;
    label = 3428;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4732) {
   $22605 = HEAP32[918930] | 0;
   if (($22605 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4319 = 3675720;
    $$lcssa8$i$i4318 = $22605;
    label = 3428;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4732) {
   $22610 = HEAP32[918936] | 0;
   if (($22610 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4319 = 3675744;
    $$lcssa8$i$i4318 = $22610;
    label = 3428;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4732) {
   $22615 = HEAP32[918942] | 0;
   if (($22615 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4319 = 3675768;
    $$lcssa8$i$i4318 = $22615;
    label = 3428;
    break;
   }
  }
  $$3$i$i4320 = __Znwj(4732) | 0;
 } while (0);
 if ((label | 0) == 3428) {
  $22598 = $$lcssa8$i$i4318 + -4 | 0;
  HEAP32[$$lcssa$i$i4319 >> 2] = $22598;
  $$3$i$i4320 = HEAP32[$22598 >> 2] | 0;
 }
 $22619 = $$3$i$i4320 + 52 | 0;
 HEAP16[$$3$i$i4320 >> 1] = 156;
 HEAP16[$$3$i$i4320 + 2 >> 1] = 15;
 HEAP8[$$3$i$i4320 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4320 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4320 + 8 >> 2] = 312;
 HEAP32[$$3$i$i4320 + 12 >> 2] = 4680;
 HEAP32[$$3$i$i4320 + 16 >> 2] = $22619;
 HEAP32[$$3$i$i4320 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4320 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4320 + 48 >> 0] = 0;
 HEAP32[$1788 >> 2] = $$3$i$i4320;
 _memcpy($22619 | 0, 2295344, 312) | 0;
 _memcpy($$3$i$i4320 + 364 | 0, 2295656, 312) | 0;
 _memcpy($$3$i$i4320 + 676 | 0, 2295968, 312) | 0;
 _memcpy($$3$i$i4320 + 988 | 0, 2296280, 312) | 0;
 _memcpy($$3$i$i4320 + 1300 | 0, 2296592, 312) | 0;
 _memcpy($$3$i$i4320 + 1612 | 0, 2296904, 312) | 0;
 _memcpy($$3$i$i4320 + 1924 | 0, 2297216, 312) | 0;
 _memcpy($$3$i$i4320 + 2236 | 0, 2297528, 312) | 0;
 _memcpy($$3$i$i4320 + 2548 | 0, 2297840, 312) | 0;
 _memcpy($$3$i$i4320 + 2860 | 0, 2298152, 312) | 0;
 _memcpy($$3$i$i4320 + 3172 | 0, 2298464, 312) | 0;
 _memcpy($$3$i$i4320 + 3484 | 0, 2298776, 312) | 0;
 _memcpy($$3$i$i4320 + 3796 | 0, 2299088, 312) | 0;
 _memcpy($$3$i$i4320 + 4108 | 0, 2299400, 312) | 0;
 _memcpy($$3$i$i4320 + 4420 | 0, 2299712, 312) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1788);
 if ($$3$i$i4320 | 0) {
  $22644 = $$3$i$i4320 + 5 | 0;
  $22646 = (HEAP8[$22644 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$22644 >> 0] = $22646;
  if (!($22646 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4320);
  HEAP32[$1788 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 222;
 HEAP16[$bitmapData + 2 >> 1] = 430;
 HEAP16[$bitmapData + 4 >> 1] = 791;
 HEAP16[$bitmapData + 6 >> 1] = 452;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 26364) label = 3443; else {
  $22653 = HEAP32[918918] | 0;
  if (($22653 | 0) == (HEAP32[918916] | 0)) label = 3443; else {
   $$lcssa$i$i4307 = 3675672;
   $$lcssa8$i$i4306 = $22653;
   label = 3444;
  }
 }
 do if ((label | 0) == 3443) {
  if ((HEAP32[918925] | 0) >>> 0 >= 26364) {
   $22660 = HEAP32[918924] | 0;
   if (($22660 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4307 = 3675696;
    $$lcssa8$i$i4306 = $22660;
    label = 3444;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 26364) {
   $22665 = HEAP32[918930] | 0;
   if (($22665 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4307 = 3675720;
    $$lcssa8$i$i4306 = $22665;
    label = 3444;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 26364) {
   $22670 = HEAP32[918936] | 0;
   if (($22670 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4307 = 3675744;
    $$lcssa8$i$i4306 = $22670;
    label = 3444;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 26364) {
   $22675 = HEAP32[918942] | 0;
   if (($22675 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4307 = 3675768;
    $$lcssa8$i$i4306 = $22675;
    label = 3444;
    break;
   }
  }
  $$3$i$i4308 = __Znwj(26364) | 0;
 } while (0);
 if ((label | 0) == 3444) {
  $22658 = $$lcssa8$i$i4306 + -4 | 0;
  HEAP32[$$lcssa$i$i4307 >> 2] = $22658;
  $$3$i$i4308 = HEAP32[$22658 >> 2] | 0;
 }
 $22679 = $$3$i$i4308 + 52 | 0;
 HEAP16[$$3$i$i4308 >> 1] = 572;
 HEAP16[$$3$i$i4308 + 2 >> 1] = 23;
 HEAP8[$$3$i$i4308 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4308 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4308 + 8 >> 2] = 1144;
 HEAP32[$$3$i$i4308 + 12 >> 2] = 26312;
 HEAP32[$$3$i$i4308 + 16 >> 2] = $22679;
 HEAP32[$$3$i$i4308 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4308 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4308 + 48 >> 0] = 0;
 HEAP32[$1789 >> 2] = $$3$i$i4308;
 _memcpy($22679 | 0, 2300024, 1144) | 0;
 _memcpy($$3$i$i4308 + 1196 | 0, 2301168, 1144) | 0;
 _memcpy($$3$i$i4308 + 2340 | 0, 2302312, 1144) | 0;
 _memcpy($$3$i$i4308 + 3484 | 0, 2303456, 1144) | 0;
 _memcpy($$3$i$i4308 + 4628 | 0, 2304600, 1144) | 0;
 _memcpy($$3$i$i4308 + 5772 | 0, 2305744, 1144) | 0;
 _memcpy($$3$i$i4308 + 6916 | 0, 2306888, 1144) | 0;
 _memcpy($$3$i$i4308 + 8060 | 0, 2308032, 1144) | 0;
 _memcpy($$3$i$i4308 + 9204 | 0, 2309176, 1144) | 0;
 _memcpy($$3$i$i4308 + 10348 | 0, 2310320, 1144) | 0;
 _memcpy($$3$i$i4308 + 11492 | 0, 2311464, 1144) | 0;
 _memcpy($$3$i$i4308 + 12636 | 0, 2312608, 1144) | 0;
 _memcpy($$3$i$i4308 + 13780 | 0, 2313752, 1144) | 0;
 _memcpy($$3$i$i4308 + 14924 | 0, 2314896, 1144) | 0;
 _memcpy($$3$i$i4308 + 16068 | 0, 2316040, 1144) | 0;
 _memcpy($$3$i$i4308 + 17212 | 0, 2317184, 1144) | 0;
 _memcpy($$3$i$i4308 + 18356 | 0, 2318328, 1144) | 0;
 _memcpy($$3$i$i4308 + 19500 | 0, 2319472, 1144) | 0;
 _memcpy($$3$i$i4308 + 20644 | 0, 2320616, 1144) | 0;
 _memcpy($$3$i$i4308 + 21788 | 0, 2321760, 1144) | 0;
 _memcpy($$3$i$i4308 + 22932 | 0, 2322904, 1144) | 0;
 _memcpy($$3$i$i4308 + 24076 | 0, 2324048, 1144) | 0;
 _memcpy($$3$i$i4308 + 25220 | 0, 2325192, 1144) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1789);
 if ($$3$i$i4308 | 0) {
  $22712 = $$3$i$i4308 + 5 | 0;
  $22714 = (HEAP8[$22712 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$22712 >> 0] = $22714;
  if (!($22714 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4308);
  HEAP32[$1789 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 222;
 HEAP16[$bitmapData + 2 >> 1] = 453;
 HEAP16[$bitmapData + 4 >> 1] = 791;
 HEAP16[$bitmapData + 6 >> 1] = 456;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4628) label = 3459; else {
  $22721 = HEAP32[918918] | 0;
  if (($22721 | 0) == (HEAP32[918916] | 0)) label = 3459; else {
   $$lcssa$i$i4295 = 3675672;
   $$lcssa8$i$i4294 = $22721;
   label = 3460;
  }
 }
 do if ((label | 0) == 3459) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4628) {
   $22728 = HEAP32[918924] | 0;
   if (($22728 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4295 = 3675696;
    $$lcssa8$i$i4294 = $22728;
    label = 3460;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4628) {
   $22733 = HEAP32[918930] | 0;
   if (($22733 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4295 = 3675720;
    $$lcssa8$i$i4294 = $22733;
    label = 3460;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4628) {
   $22738 = HEAP32[918936] | 0;
   if (($22738 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4295 = 3675744;
    $$lcssa8$i$i4294 = $22738;
    label = 3460;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4628) {
   $22743 = HEAP32[918942] | 0;
   if (($22743 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4295 = 3675768;
    $$lcssa8$i$i4294 = $22743;
    label = 3460;
    break;
   }
  }
  $$3$i$i4296 = __Znwj(4628) | 0;
 } while (0);
 if ((label | 0) == 3460) {
  $22726 = $$lcssa8$i$i4294 + -4 | 0;
  HEAP32[$$lcssa$i$i4295 >> 2] = $22726;
  $$3$i$i4296 = HEAP32[$22726 >> 2] | 0;
 }
 $22747 = $$3$i$i4296 + 52 | 0;
 HEAP16[$$3$i$i4296 >> 1] = 572;
 HEAP16[$$3$i$i4296 + 2 >> 1] = 4;
 HEAP8[$$3$i$i4296 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4296 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4296 + 8 >> 2] = 1144;
 HEAP32[$$3$i$i4296 + 12 >> 2] = 4576;
 HEAP32[$$3$i$i4296 + 16 >> 2] = $22747;
 HEAP32[$$3$i$i4296 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4296 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4296 + 48 >> 0] = 0;
 HEAP32[$1790 >> 2] = $$3$i$i4296;
 _memcpy($22747 | 0, 2326336, 1144) | 0;
 _memcpy($$3$i$i4296 + 1196 | 0, 2327480, 1144) | 0;
 _memcpy($$3$i$i4296 + 2340 | 0, 2328624, 1144) | 0;
 _memcpy($$3$i$i4296 + 3484 | 0, 2329768, 1144) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1790);
 if ($$3$i$i4296 | 0) {
  $22761 = $$3$i$i4296 + 5 | 0;
  $22763 = (HEAP8[$22761 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$22761 >> 0] = $22763;
  if (!($22763 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4296);
  HEAP32[$1790 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 795;
 HEAP16[$bitmapData + 2 >> 1] = 437;
 HEAP16[$bitmapData + 4 >> 1] = 946;
 HEAP16[$bitmapData + 6 >> 1] = 449;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4004) label = 3475; else {
  $22770 = HEAP32[918918] | 0;
  if (($22770 | 0) == (HEAP32[918916] | 0)) label = 3475; else {
   $$lcssa$i$i4283 = 3675672;
   $$lcssa8$i$i4282 = $22770;
   label = 3476;
  }
 }
 do if ((label | 0) == 3475) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4004) {
   $22777 = HEAP32[918924] | 0;
   if (($22777 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4283 = 3675696;
    $$lcssa8$i$i4282 = $22777;
    label = 3476;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4004) {
   $22782 = HEAP32[918930] | 0;
   if (($22782 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4283 = 3675720;
    $$lcssa8$i$i4282 = $22782;
    label = 3476;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4004) {
   $22787 = HEAP32[918936] | 0;
   if (($22787 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4283 = 3675744;
    $$lcssa8$i$i4282 = $22787;
    label = 3476;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4004) {
   $22792 = HEAP32[918942] | 0;
   if (($22792 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4283 = 3675768;
    $$lcssa8$i$i4282 = $22792;
    label = 3476;
    break;
   }
  }
  $$3$i$i4284 = __Znwj(4004) | 0;
 } while (0);
 if ((label | 0) == 3476) {
  $22775 = $$lcssa8$i$i4282 + -4 | 0;
  HEAP32[$$lcssa$i$i4283 >> 2] = $22775;
  $$3$i$i4284 = HEAP32[$22775 >> 2] | 0;
 }
 $22796 = $$3$i$i4284 + 52 | 0;
 HEAP16[$$3$i$i4284 >> 1] = 152;
 HEAP16[$$3$i$i4284 + 2 >> 1] = 13;
 HEAP8[$$3$i$i4284 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4284 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4284 + 8 >> 2] = 304;
 HEAP32[$$3$i$i4284 + 12 >> 2] = 3952;
 HEAP32[$$3$i$i4284 + 16 >> 2] = $22796;
 HEAP32[$$3$i$i4284 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4284 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4284 + 48 >> 0] = 0;
 HEAP32[$1791 >> 2] = $$3$i$i4284;
 _memcpy($22796 | 0, 2330912, 304) | 0;
 _memcpy($$3$i$i4284 + 356 | 0, 2331216, 304) | 0;
 _memcpy($$3$i$i4284 + 660 | 0, 2331520, 304) | 0;
 _memcpy($$3$i$i4284 + 964 | 0, 2331824, 304) | 0;
 _memcpy($$3$i$i4284 + 1268 | 0, 2332128, 304) | 0;
 _memcpy($$3$i$i4284 + 1572 | 0, 2332432, 304) | 0;
 _memcpy($$3$i$i4284 + 1876 | 0, 2332736, 304) | 0;
 _memcpy($$3$i$i4284 + 2180 | 0, 2333040, 304) | 0;
 _memcpy($$3$i$i4284 + 2484 | 0, 2333344, 304) | 0;
 _memcpy($$3$i$i4284 + 2788 | 0, 2333648, 304) | 0;
 _memcpy($$3$i$i4284 + 3092 | 0, 2333952, 304) | 0;
 _memcpy($$3$i$i4284 + 3396 | 0, 2334256, 304) | 0;
 _memcpy($$3$i$i4284 + 3700 | 0, 2334560, 304) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1791);
 if ($$3$i$i4284 | 0) {
  $22819 = $$3$i$i4284 + 5 | 0;
  $22821 = (HEAP8[$22819 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$22819 >> 0] = $22821;
  if (!($22821 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4284);
  HEAP32[$1791 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 769;
 HEAP16[$bitmapData + 2 >> 1] = 573;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 595;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 10540) label = 3491; else {
  $22828 = HEAP32[918918] | 0;
  if (($22828 | 0) == (HEAP32[918916] | 0)) label = 3491; else {
   $$lcssa$i$i4271 = 3675672;
   $$lcssa8$i$i4270 = $22828;
   label = 3492;
  }
 }
 do if ((label | 0) == 3491) {
  if ((HEAP32[918925] | 0) >>> 0 >= 10540) {
   $22835 = HEAP32[918924] | 0;
   if (($22835 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4271 = 3675696;
    $$lcssa8$i$i4270 = $22835;
    label = 3492;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 10540) {
   $22840 = HEAP32[918930] | 0;
   if (($22840 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4271 = 3675720;
    $$lcssa8$i$i4270 = $22840;
    label = 3492;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 10540) {
   $22845 = HEAP32[918936] | 0;
   if (($22845 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4271 = 3675744;
    $$lcssa8$i$i4270 = $22845;
    label = 3492;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 10540) {
   $22850 = HEAP32[918942] | 0;
   if (($22850 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4271 = 3675768;
    $$lcssa8$i$i4270 = $22850;
    label = 3492;
    break;
   }
  }
  $$3$i$i4272 = __Znwj(10540) | 0;
 } while (0);
 if ((label | 0) == 3492) {
  $22833 = $$lcssa8$i$i4270 + -4 | 0;
  HEAP32[$$lcssa$i$i4271 >> 2] = $22833;
  $$3$i$i4272 = HEAP32[$22833 >> 2] | 0;
 }
 $22854 = $$3$i$i4272 + 52 | 0;
 HEAP16[$$3$i$i4272 >> 1] = 228;
 HEAP16[$$3$i$i4272 + 2 >> 1] = 23;
 HEAP8[$$3$i$i4272 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4272 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4272 + 8 >> 2] = 456;
 HEAP32[$$3$i$i4272 + 12 >> 2] = 10488;
 HEAP32[$$3$i$i4272 + 16 >> 2] = $22854;
 HEAP32[$$3$i$i4272 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4272 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4272 + 48 >> 0] = 0;
 HEAP32[$1792 >> 2] = $$3$i$i4272;
 _memcpy($22854 | 0, 2334864, 456) | 0;
 _memcpy($$3$i$i4272 + 508 | 0, 2335320, 456) | 0;
 _memcpy($$3$i$i4272 + 964 | 0, 2335776, 456) | 0;
 _memcpy($$3$i$i4272 + 1420 | 0, 2336232, 456) | 0;
 _memcpy($$3$i$i4272 + 1876 | 0, 2336688, 456) | 0;
 _memcpy($$3$i$i4272 + 2332 | 0, 2337144, 456) | 0;
 _memcpy($$3$i$i4272 + 2788 | 0, 2337600, 456) | 0;
 _memcpy($$3$i$i4272 + 3244 | 0, 2338056, 456) | 0;
 _memcpy($$3$i$i4272 + 3700 | 0, 2338512, 456) | 0;
 _memcpy($$3$i$i4272 + 4156 | 0, 2338968, 456) | 0;
 _memcpy($$3$i$i4272 + 4612 | 0, 2339424, 456) | 0;
 _memcpy($$3$i$i4272 + 5068 | 0, 2339880, 456) | 0;
 _memcpy($$3$i$i4272 + 5524 | 0, 2340336, 456) | 0;
 _memcpy($$3$i$i4272 + 5980 | 0, 2340792, 456) | 0;
 _memcpy($$3$i$i4272 + 6436 | 0, 2341248, 456) | 0;
 _memcpy($$3$i$i4272 + 6892 | 0, 2341704, 456) | 0;
 _memcpy($$3$i$i4272 + 7348 | 0, 2342160, 456) | 0;
 _memcpy($$3$i$i4272 + 7804 | 0, 2342616, 456) | 0;
 _memcpy($$3$i$i4272 + 8260 | 0, 2343072, 456) | 0;
 _memcpy($$3$i$i4272 + 8716 | 0, 2343528, 456) | 0;
 _memcpy($$3$i$i4272 + 9172 | 0, 2343984, 456) | 0;
 _memcpy($$3$i$i4272 + 9628 | 0, 2344440, 456) | 0;
 _memcpy($$3$i$i4272 + 10084 | 0, 2344896, 456) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1792);
 if ($$3$i$i4272 | 0) {
  $22887 = $$3$i$i4272 + 5 | 0;
  $22889 = (HEAP8[$22887 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$22887 >> 0] = $22889;
  if (!($22889 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4272);
  HEAP32[$1792 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 769;
 HEAP16[$bitmapData + 2 >> 1] = 596;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 609;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6436) label = 3507; else {
  $22896 = HEAP32[918918] | 0;
  if (($22896 | 0) == (HEAP32[918916] | 0)) label = 3507; else {
   $$lcssa$i$i4259 = 3675672;
   $$lcssa8$i$i4258 = $22896;
   label = 3508;
  }
 }
 do if ((label | 0) == 3507) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6436) {
   $22903 = HEAP32[918924] | 0;
   if (($22903 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4259 = 3675696;
    $$lcssa8$i$i4258 = $22903;
    label = 3508;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6436) {
   $22908 = HEAP32[918930] | 0;
   if (($22908 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4259 = 3675720;
    $$lcssa8$i$i4258 = $22908;
    label = 3508;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6436) {
   $22913 = HEAP32[918936] | 0;
   if (($22913 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4259 = 3675744;
    $$lcssa8$i$i4258 = $22913;
    label = 3508;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6436) {
   $22918 = HEAP32[918942] | 0;
   if (($22918 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4259 = 3675768;
    $$lcssa8$i$i4258 = $22918;
    label = 3508;
    break;
   }
  }
  $$3$i$i4260 = __Znwj(6436) | 0;
 } while (0);
 if ((label | 0) == 3508) {
  $22901 = $$lcssa8$i$i4258 + -4 | 0;
  HEAP32[$$lcssa$i$i4259 >> 2] = $22901;
  $$3$i$i4260 = HEAP32[$22901 >> 2] | 0;
 }
 $22922 = $$3$i$i4260 + 52 | 0;
 HEAP16[$$3$i$i4260 >> 1] = 228;
 HEAP16[$$3$i$i4260 + 2 >> 1] = 14;
 HEAP8[$$3$i$i4260 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4260 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4260 + 8 >> 2] = 456;
 HEAP32[$$3$i$i4260 + 12 >> 2] = 6384;
 HEAP32[$$3$i$i4260 + 16 >> 2] = $22922;
 HEAP32[$$3$i$i4260 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4260 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4260 + 48 >> 0] = 0;
 HEAP32[$1793 >> 2] = $$3$i$i4260;
 _memcpy($22922 | 0, 2345352, 456) | 0;
 _memcpy($$3$i$i4260 + 508 | 0, 2345808, 456) | 0;
 _memcpy($$3$i$i4260 + 964 | 0, 2346264, 456) | 0;
 _memcpy($$3$i$i4260 + 1420 | 0, 2346720, 456) | 0;
 _memcpy($$3$i$i4260 + 1876 | 0, 2347176, 456) | 0;
 _memcpy($$3$i$i4260 + 2332 | 0, 2347632, 456) | 0;
 _memcpy($$3$i$i4260 + 2788 | 0, 2348088, 456) | 0;
 _memcpy($$3$i$i4260 + 3244 | 0, 2348544, 456) | 0;
 _memcpy($$3$i$i4260 + 3700 | 0, 2349e3, 456) | 0;
 _memcpy($$3$i$i4260 + 4156 | 0, 2349456, 456) | 0;
 _memcpy($$3$i$i4260 + 4612 | 0, 2349912, 456) | 0;
 _memcpy($$3$i$i4260 + 5068 | 0, 2350368, 456) | 0;
 _memcpy($$3$i$i4260 + 5524 | 0, 2350824, 456) | 0;
 _memcpy($$3$i$i4260 + 5980 | 0, 2351280, 456) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1793);
 if ($$3$i$i4260 | 0) {
  $22946 = $$3$i$i4260 + 5 | 0;
  $22948 = (HEAP8[$22946 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$22946 >> 0] = $22948;
  if (!($22948 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4260);
  HEAP32[$1793 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 984;
 HEAP16[$bitmapData + 2 >> 1] = 430;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 572;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 3484) label = 3523; else {
  $22955 = HEAP32[918918] | 0;
  if (($22955 | 0) == (HEAP32[918916] | 0)) label = 3523; else {
   $$lcssa$i$i4247 = 3675672;
   $$lcssa8$i$i4246 = $22955;
   label = 3524;
  }
 }
 do if ((label | 0) == 3523) {
  if ((HEAP32[918925] | 0) >>> 0 >= 3484) {
   $22962 = HEAP32[918924] | 0;
   if (($22962 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4247 = 3675696;
    $$lcssa8$i$i4246 = $22962;
    label = 3524;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 3484) {
   $22967 = HEAP32[918930] | 0;
   if (($22967 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4247 = 3675720;
    $$lcssa8$i$i4246 = $22967;
    label = 3524;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 3484) {
   $22972 = HEAP32[918936] | 0;
   if (($22972 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4247 = 3675744;
    $$lcssa8$i$i4246 = $22972;
    label = 3524;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 3484) {
   $22977 = HEAP32[918942] | 0;
   if (($22977 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4247 = 3675768;
    $$lcssa8$i$i4246 = $22977;
    label = 3524;
    break;
   }
  }
  $$3$i$i4248 = __Znwj(3484) | 0;
 } while (0);
 if ((label | 0) == 3524) {
  $22960 = $$lcssa8$i$i4246 + -4 | 0;
  HEAP32[$$lcssa$i$i4247 >> 2] = $22960;
  $$3$i$i4248 = HEAP32[$22960 >> 2] | 0;
 }
 $22981 = $$3$i$i4248 + 52 | 0;
 HEAP16[$$3$i$i4248 >> 1] = 12;
 HEAP16[$$3$i$i4248 + 2 >> 1] = 143;
 HEAP8[$$3$i$i4248 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4248 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4248 + 8 >> 2] = 24;
 HEAP32[$$3$i$i4248 + 12 >> 2] = 3432;
 HEAP32[$$3$i$i4248 + 16 >> 2] = $22981;
 HEAP32[$$3$i$i4248 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4248 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4248 + 48 >> 0] = 0;
 HEAP32[$1794 >> 2] = $$3$i$i4248;
 $dest$02$i4242 = $22981;
 $i$03$i4241 = 0;
 $src$01$i4243 = 2351736;
 while (1) {
  dest = $dest$02$i4242;
  src = $src$01$i4243;
  stop = dest + 24 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $i$03$i4241 = $i$03$i4241 + 1 << 16 >> 16;
  if (($i$03$i4241 & 65535) >= 143) break; else {
   $dest$02$i4242 = $dest$02$i4242 + 24 | 0;
   $src$01$i4243 = $src$01$i4243 + 24 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1794);
 if ($$3$i$i4248 | 0) {
  $22996 = $$3$i$i4248 + 5 | 0;
  $22998 = (HEAP8[$22996 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$22996 >> 0] = $22998;
  if (!($22998 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4248);
  HEAP32[$1794 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 457;
 HEAP16[$bitmapData + 4 >> 1] = 769;
 HEAP16[$bitmapData + 6 >> 1] = 467;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 7268) label = 3541; else {
  $23005 = HEAP32[918918] | 0;
  if (($23005 | 0) == (HEAP32[918916] | 0)) label = 3541; else {
   $$lcssa$i$i4235 = 3675672;
   $$lcssa8$i$i4234 = $23005;
   label = 3542;
  }
 }
 do if ((label | 0) == 3541) {
  if ((HEAP32[918925] | 0) >>> 0 >= 7268) {
   $23012 = HEAP32[918924] | 0;
   if (($23012 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4235 = 3675696;
    $$lcssa8$i$i4234 = $23012;
    label = 3542;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 7268) {
   $23017 = HEAP32[918930] | 0;
   if (($23017 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4235 = 3675720;
    $$lcssa8$i$i4234 = $23017;
    label = 3542;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 7268) {
   $23022 = HEAP32[918936] | 0;
   if (($23022 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4235 = 3675744;
    $$lcssa8$i$i4234 = $23022;
    label = 3542;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 7268) {
   $23027 = HEAP32[918942] | 0;
   if (($23027 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4235 = 3675768;
    $$lcssa8$i$i4234 = $23027;
    label = 3542;
    break;
   }
  }
  $$3$i$i4236 = __Znwj(7268) | 0;
 } while (0);
 if ((label | 0) == 3542) {
  $23010 = $$lcssa8$i$i4234 + -4 | 0;
  HEAP32[$$lcssa$i$i4235 >> 2] = $23010;
  $$3$i$i4236 = HEAP32[$23010 >> 2] | 0;
 }
 $23031 = $$3$i$i4236 + 52 | 0;
 HEAP16[$$3$i$i4236 >> 1] = 328;
 HEAP16[$$3$i$i4236 + 2 >> 1] = 11;
 HEAP8[$$3$i$i4236 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4236 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4236 + 8 >> 2] = 656;
 HEAP32[$$3$i$i4236 + 12 >> 2] = 7216;
 HEAP32[$$3$i$i4236 + 16 >> 2] = $23031;
 HEAP32[$$3$i$i4236 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4236 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4236 + 48 >> 0] = 0;
 HEAP32[$1795 >> 2] = $$3$i$i4236;
 _memcpy($23031 | 0, 2355168, 656) | 0;
 _memcpy($$3$i$i4236 + 708 | 0, 2355824, 656) | 0;
 _memcpy($$3$i$i4236 + 1364 | 0, 2356480, 656) | 0;
 _memcpy($$3$i$i4236 + 2020 | 0, 2357136, 656) | 0;
 _memcpy($$3$i$i4236 + 2676 | 0, 2357792, 656) | 0;
 _memcpy($$3$i$i4236 + 3332 | 0, 2358448, 656) | 0;
 _memcpy($$3$i$i4236 + 3988 | 0, 2359104, 656) | 0;
 _memcpy($$3$i$i4236 + 4644 | 0, 2359760, 656) | 0;
 _memcpy($$3$i$i4236 + 5300 | 0, 2360416, 656) | 0;
 _memcpy($$3$i$i4236 + 5956 | 0, 2361072, 656) | 0;
 _memcpy($$3$i$i4236 + 6612 | 0, 2361728, 656) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1795);
 if ($$3$i$i4236 | 0) {
  $23052 = $$3$i$i4236 + 5 | 0;
  $23054 = (HEAP8[$23052 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23052 >> 0] = $23054;
  if (!($23054 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4236);
  HEAP32[$1795 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 468;
 HEAP16[$bitmapData + 4 >> 1] = 769;
 HEAP16[$bitmapData + 6 >> 1] = 478;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 7268) label = 3557; else {
  $23061 = HEAP32[918918] | 0;
  if (($23061 | 0) == (HEAP32[918916] | 0)) label = 3557; else {
   $$lcssa$i$i4223 = 3675672;
   $$lcssa8$i$i4222 = $23061;
   label = 3558;
  }
 }
 do if ((label | 0) == 3557) {
  if ((HEAP32[918925] | 0) >>> 0 >= 7268) {
   $23068 = HEAP32[918924] | 0;
   if (($23068 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4223 = 3675696;
    $$lcssa8$i$i4222 = $23068;
    label = 3558;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 7268) {
   $23073 = HEAP32[918930] | 0;
   if (($23073 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4223 = 3675720;
    $$lcssa8$i$i4222 = $23073;
    label = 3558;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 7268) {
   $23078 = HEAP32[918936] | 0;
   if (($23078 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4223 = 3675744;
    $$lcssa8$i$i4222 = $23078;
    label = 3558;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 7268) {
   $23083 = HEAP32[918942] | 0;
   if (($23083 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4223 = 3675768;
    $$lcssa8$i$i4222 = $23083;
    label = 3558;
    break;
   }
  }
  $$3$i$i4224 = __Znwj(7268) | 0;
 } while (0);
 if ((label | 0) == 3558) {
  $23066 = $$lcssa8$i$i4222 + -4 | 0;
  HEAP32[$$lcssa$i$i4223 >> 2] = $23066;
  $$3$i$i4224 = HEAP32[$23066 >> 2] | 0;
 }
 $23087 = $$3$i$i4224 + 52 | 0;
 HEAP16[$$3$i$i4224 >> 1] = 328;
 HEAP16[$$3$i$i4224 + 2 >> 1] = 11;
 HEAP8[$$3$i$i4224 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4224 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4224 + 8 >> 2] = 656;
 HEAP32[$$3$i$i4224 + 12 >> 2] = 7216;
 HEAP32[$$3$i$i4224 + 16 >> 2] = $23087;
 HEAP32[$$3$i$i4224 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4224 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4224 + 48 >> 0] = 0;
 HEAP32[$1796 >> 2] = $$3$i$i4224;
 _memcpy($23087 | 0, 2362384, 656) | 0;
 _memcpy($$3$i$i4224 + 708 | 0, 2363040, 656) | 0;
 _memcpy($$3$i$i4224 + 1364 | 0, 2363696, 656) | 0;
 _memcpy($$3$i$i4224 + 2020 | 0, 2364352, 656) | 0;
 _memcpy($$3$i$i4224 + 2676 | 0, 2365008, 656) | 0;
 _memcpy($$3$i$i4224 + 3332 | 0, 2365664, 656) | 0;
 _memcpy($$3$i$i4224 + 3988 | 0, 2366320, 656) | 0;
 _memcpy($$3$i$i4224 + 4644 | 0, 2366976, 656) | 0;
 _memcpy($$3$i$i4224 + 5300 | 0, 2367632, 656) | 0;
 _memcpy($$3$i$i4224 + 5956 | 0, 2368288, 656) | 0;
 _memcpy($$3$i$i4224 + 6612 | 0, 2368944, 656) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1796);
 if ($$3$i$i4224 | 0) {
  $23108 = $$3$i$i4224 + 5 | 0;
  $23110 = (HEAP8[$23108 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23108 >> 0] = $23110;
  if (!($23110 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4224);
  HEAP32[$1796 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 479;
 HEAP16[$bitmapData + 4 >> 1] = 769;
 HEAP16[$bitmapData + 6 >> 1] = 489;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 7268) label = 3573; else {
  $23117 = HEAP32[918918] | 0;
  if (($23117 | 0) == (HEAP32[918916] | 0)) label = 3573; else {
   $$lcssa$i$i4211 = 3675672;
   $$lcssa8$i$i4210 = $23117;
   label = 3574;
  }
 }
 do if ((label | 0) == 3573) {
  if ((HEAP32[918925] | 0) >>> 0 >= 7268) {
   $23124 = HEAP32[918924] | 0;
   if (($23124 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4211 = 3675696;
    $$lcssa8$i$i4210 = $23124;
    label = 3574;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 7268) {
   $23129 = HEAP32[918930] | 0;
   if (($23129 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4211 = 3675720;
    $$lcssa8$i$i4210 = $23129;
    label = 3574;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 7268) {
   $23134 = HEAP32[918936] | 0;
   if (($23134 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4211 = 3675744;
    $$lcssa8$i$i4210 = $23134;
    label = 3574;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 7268) {
   $23139 = HEAP32[918942] | 0;
   if (($23139 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4211 = 3675768;
    $$lcssa8$i$i4210 = $23139;
    label = 3574;
    break;
   }
  }
  $$3$i$i4212 = __Znwj(7268) | 0;
 } while (0);
 if ((label | 0) == 3574) {
  $23122 = $$lcssa8$i$i4210 + -4 | 0;
  HEAP32[$$lcssa$i$i4211 >> 2] = $23122;
  $$3$i$i4212 = HEAP32[$23122 >> 2] | 0;
 }
 $23143 = $$3$i$i4212 + 52 | 0;
 HEAP16[$$3$i$i4212 >> 1] = 328;
 HEAP16[$$3$i$i4212 + 2 >> 1] = 11;
 HEAP8[$$3$i$i4212 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4212 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4212 + 8 >> 2] = 656;
 HEAP32[$$3$i$i4212 + 12 >> 2] = 7216;
 HEAP32[$$3$i$i4212 + 16 >> 2] = $23143;
 HEAP32[$$3$i$i4212 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4212 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4212 + 48 >> 0] = 0;
 HEAP32[$1797 >> 2] = $$3$i$i4212;
 _memcpy($23143 | 0, 2369600, 656) | 0;
 _memcpy($$3$i$i4212 + 708 | 0, 2370256, 656) | 0;
 _memcpy($$3$i$i4212 + 1364 | 0, 2370912, 656) | 0;
 _memcpy($$3$i$i4212 + 2020 | 0, 2371568, 656) | 0;
 _memcpy($$3$i$i4212 + 2676 | 0, 2372224, 656) | 0;
 _memcpy($$3$i$i4212 + 3332 | 0, 2372880, 656) | 0;
 _memcpy($$3$i$i4212 + 3988 | 0, 2373536, 656) | 0;
 _memcpy($$3$i$i4212 + 4644 | 0, 2374192, 656) | 0;
 _memcpy($$3$i$i4212 + 5300 | 0, 2374848, 656) | 0;
 _memcpy($$3$i$i4212 + 5956 | 0, 2375504, 656) | 0;
 _memcpy($$3$i$i4212 + 6612 | 0, 2376160, 656) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1797);
 if ($$3$i$i4212 | 0) {
  $23164 = $$3$i$i4212 + 5 | 0;
  $23166 = (HEAP8[$23164 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23164 >> 0] = $23166;
  if (!($23166 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4212);
  HEAP32[$1797 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 490;
 HEAP16[$bitmapData + 4 >> 1] = 769;
 HEAP16[$bitmapData + 6 >> 1] = 529;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 26292) label = 3589; else {
  $23173 = HEAP32[918918] | 0;
  if (($23173 | 0) == (HEAP32[918916] | 0)) label = 3589; else {
   $$lcssa$i$i4199 = 3675672;
   $$lcssa8$i$i4198 = $23173;
   label = 3590;
  }
 }
 do if ((label | 0) == 3589) {
  if ((HEAP32[918925] | 0) >>> 0 >= 26292) {
   $23180 = HEAP32[918924] | 0;
   if (($23180 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4199 = 3675696;
    $$lcssa8$i$i4198 = $23180;
    label = 3590;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 26292) {
   $23185 = HEAP32[918930] | 0;
   if (($23185 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4199 = 3675720;
    $$lcssa8$i$i4198 = $23185;
    label = 3590;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 26292) {
   $23190 = HEAP32[918936] | 0;
   if (($23190 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4199 = 3675744;
    $$lcssa8$i$i4198 = $23190;
    label = 3590;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 26292) {
   $23195 = HEAP32[918942] | 0;
   if (($23195 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4199 = 3675768;
    $$lcssa8$i$i4198 = $23195;
    label = 3590;
    break;
   }
  }
  $$3$i$i4200 = __Znwj(26292) | 0;
 } while (0);
 if ((label | 0) == 3590) {
  $23178 = $$lcssa8$i$i4198 + -4 | 0;
  HEAP32[$$lcssa$i$i4199 >> 2] = $23178;
  $$3$i$i4200 = HEAP32[$23178 >> 2] | 0;
 }
 $23199 = $$3$i$i4200 + 52 | 0;
 HEAP16[$$3$i$i4200 >> 1] = 328;
 HEAP16[$$3$i$i4200 + 2 >> 1] = 40;
 HEAP8[$$3$i$i4200 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4200 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4200 + 8 >> 2] = 656;
 HEAP32[$$3$i$i4200 + 12 >> 2] = 26240;
 HEAP32[$$3$i$i4200 + 16 >> 2] = $23199;
 HEAP32[$$3$i$i4200 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4200 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4200 + 48 >> 0] = 0;
 HEAP32[$1798 >> 2] = $$3$i$i4200;
 _memcpy($23199 | 0, 2376816, 656) | 0;
 _memcpy($$3$i$i4200 + 708 | 0, 2377472, 656) | 0;
 _memcpy($$3$i$i4200 + 1364 | 0, 2378128, 656) | 0;
 _memcpy($$3$i$i4200 + 2020 | 0, 2378784, 656) | 0;
 _memcpy($$3$i$i4200 + 2676 | 0, 2379440, 656) | 0;
 _memcpy($$3$i$i4200 + 3332 | 0, 2380096, 656) | 0;
 _memcpy($$3$i$i4200 + 3988 | 0, 2380752, 656) | 0;
 _memcpy($$3$i$i4200 + 4644 | 0, 2381408, 656) | 0;
 _memcpy($$3$i$i4200 + 5300 | 0, 2382064, 656) | 0;
 _memcpy($$3$i$i4200 + 5956 | 0, 2382720, 656) | 0;
 _memcpy($$3$i$i4200 + 6612 | 0, 2383376, 656) | 0;
 _memcpy($$3$i$i4200 + 7268 | 0, 2384032, 656) | 0;
 _memcpy($$3$i$i4200 + 7924 | 0, 2384688, 656) | 0;
 _memcpy($$3$i$i4200 + 8580 | 0, 2385344, 656) | 0;
 _memcpy($$3$i$i4200 + 9236 | 0, 2386e3, 656) | 0;
 _memcpy($$3$i$i4200 + 9892 | 0, 2386656, 656) | 0;
 _memcpy($$3$i$i4200 + 10548 | 0, 2387312, 656) | 0;
 _memcpy($$3$i$i4200 + 11204 | 0, 2387968, 656) | 0;
 _memcpy($$3$i$i4200 + 11860 | 0, 2388624, 656) | 0;
 _memcpy($$3$i$i4200 + 12516 | 0, 2389280, 656) | 0;
 _memcpy($$3$i$i4200 + 13172 | 0, 2389936, 656) | 0;
 _memcpy($$3$i$i4200 + 13828 | 0, 2390592, 656) | 0;
 _memcpy($$3$i$i4200 + 14484 | 0, 2391248, 656) | 0;
 _memcpy($$3$i$i4200 + 15140 | 0, 2391904, 656) | 0;
 _memcpy($$3$i$i4200 + 15796 | 0, 2392560, 656) | 0;
 _memcpy($$3$i$i4200 + 16452 | 0, 2393216, 656) | 0;
 _memcpy($$3$i$i4200 + 17108 | 0, 2393872, 656) | 0;
 _memcpy($$3$i$i4200 + 17764 | 0, 2394528, 656) | 0;
 _memcpy($$3$i$i4200 + 18420 | 0, 2395184, 656) | 0;
 _memcpy($$3$i$i4200 + 19076 | 0, 2395840, 656) | 0;
 _memcpy($$3$i$i4200 + 19732 | 0, 2396496, 656) | 0;
 _memcpy($$3$i$i4200 + 20388 | 0, 2397152, 656) | 0;
 _memcpy($$3$i$i4200 + 21044 | 0, 2397808, 656) | 0;
 _memcpy($$3$i$i4200 + 21700 | 0, 2398464, 656) | 0;
 _memcpy($$3$i$i4200 + 22356 | 0, 2399120, 656) | 0;
 _memcpy($$3$i$i4200 + 23012 | 0, 2399776, 656) | 0;
 _memcpy($$3$i$i4200 + 23668 | 0, 2400432, 656) | 0;
 _memcpy($$3$i$i4200 + 24324 | 0, 2401088, 656) | 0;
 _memcpy($$3$i$i4200 + 24980 | 0, 2401744, 656) | 0;
 _memcpy($$3$i$i4200 + 25636 | 0, 2402400, 656) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1798);
 if ($$3$i$i4200 | 0) {
  $23249 = $$3$i$i4200 + 5 | 0;
  $23251 = (HEAP8[$23249 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23249 >> 0] = $23251;
  if (!($23251 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4200);
  HEAP32[$1798 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 530;
 HEAP16[$bitmapData + 4 >> 1] = 769;
 HEAP16[$bitmapData + 6 >> 1] = 569;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 26292) label = 3605; else {
  $23258 = HEAP32[918918] | 0;
  if (($23258 | 0) == (HEAP32[918916] | 0)) label = 3605; else {
   $$lcssa$i$i4187 = 3675672;
   $$lcssa8$i$i4186 = $23258;
   label = 3606;
  }
 }
 do if ((label | 0) == 3605) {
  if ((HEAP32[918925] | 0) >>> 0 >= 26292) {
   $23265 = HEAP32[918924] | 0;
   if (($23265 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4187 = 3675696;
    $$lcssa8$i$i4186 = $23265;
    label = 3606;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 26292) {
   $23270 = HEAP32[918930] | 0;
   if (($23270 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4187 = 3675720;
    $$lcssa8$i$i4186 = $23270;
    label = 3606;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 26292) {
   $23275 = HEAP32[918936] | 0;
   if (($23275 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4187 = 3675744;
    $$lcssa8$i$i4186 = $23275;
    label = 3606;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 26292) {
   $23280 = HEAP32[918942] | 0;
   if (($23280 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4187 = 3675768;
    $$lcssa8$i$i4186 = $23280;
    label = 3606;
    break;
   }
  }
  $$3$i$i4188 = __Znwj(26292) | 0;
 } while (0);
 if ((label | 0) == 3606) {
  $23263 = $$lcssa8$i$i4186 + -4 | 0;
  HEAP32[$$lcssa$i$i4187 >> 2] = $23263;
  $$3$i$i4188 = HEAP32[$23263 >> 2] | 0;
 }
 $23284 = $$3$i$i4188 + 52 | 0;
 HEAP16[$$3$i$i4188 >> 1] = 328;
 HEAP16[$$3$i$i4188 + 2 >> 1] = 40;
 HEAP8[$$3$i$i4188 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4188 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4188 + 8 >> 2] = 656;
 HEAP32[$$3$i$i4188 + 12 >> 2] = 26240;
 HEAP32[$$3$i$i4188 + 16 >> 2] = $23284;
 HEAP32[$$3$i$i4188 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4188 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4188 + 48 >> 0] = 0;
 HEAP32[$1799 >> 2] = $$3$i$i4188;
 _memcpy($23284 | 0, 2403056, 656) | 0;
 _memcpy($$3$i$i4188 + 708 | 0, 2403712, 656) | 0;
 _memcpy($$3$i$i4188 + 1364 | 0, 2404368, 656) | 0;
 _memcpy($$3$i$i4188 + 2020 | 0, 2405024, 656) | 0;
 _memcpy($$3$i$i4188 + 2676 | 0, 2405680, 656) | 0;
 _memcpy($$3$i$i4188 + 3332 | 0, 2406336, 656) | 0;
 _memcpy($$3$i$i4188 + 3988 | 0, 2406992, 656) | 0;
 _memcpy($$3$i$i4188 + 4644 | 0, 2407648, 656) | 0;
 _memcpy($$3$i$i4188 + 5300 | 0, 2408304, 656) | 0;
 _memcpy($$3$i$i4188 + 5956 | 0, 2408960, 656) | 0;
 _memcpy($$3$i$i4188 + 6612 | 0, 2409616, 656) | 0;
 _memcpy($$3$i$i4188 + 7268 | 0, 2410272, 656) | 0;
 _memcpy($$3$i$i4188 + 7924 | 0, 2410928, 656) | 0;
 _memcpy($$3$i$i4188 + 8580 | 0, 2411584, 656) | 0;
 _memcpy($$3$i$i4188 + 9236 | 0, 2412240, 656) | 0;
 _memcpy($$3$i$i4188 + 9892 | 0, 2412896, 656) | 0;
 _memcpy($$3$i$i4188 + 10548 | 0, 2413552, 656) | 0;
 _memcpy($$3$i$i4188 + 11204 | 0, 2414208, 656) | 0;
 _memcpy($$3$i$i4188 + 11860 | 0, 2414864, 656) | 0;
 _memcpy($$3$i$i4188 + 12516 | 0, 2415520, 656) | 0;
 _memcpy($$3$i$i4188 + 13172 | 0, 2416176, 656) | 0;
 _memcpy($$3$i$i4188 + 13828 | 0, 2416832, 656) | 0;
 _memcpy($$3$i$i4188 + 14484 | 0, 2417488, 656) | 0;
 _memcpy($$3$i$i4188 + 15140 | 0, 2418144, 656) | 0;
 _memcpy($$3$i$i4188 + 15796 | 0, 2418800, 656) | 0;
 _memcpy($$3$i$i4188 + 16452 | 0, 2419456, 656) | 0;
 _memcpy($$3$i$i4188 + 17108 | 0, 2420112, 656) | 0;
 _memcpy($$3$i$i4188 + 17764 | 0, 2420768, 656) | 0;
 _memcpy($$3$i$i4188 + 18420 | 0, 2421424, 656) | 0;
 _memcpy($$3$i$i4188 + 19076 | 0, 2422080, 656) | 0;
 _memcpy($$3$i$i4188 + 19732 | 0, 2422736, 656) | 0;
 _memcpy($$3$i$i4188 + 20388 | 0, 2423392, 656) | 0;
 _memcpy($$3$i$i4188 + 21044 | 0, 2424048, 656) | 0;
 _memcpy($$3$i$i4188 + 21700 | 0, 2424704, 656) | 0;
 _memcpy($$3$i$i4188 + 22356 | 0, 2425360, 656) | 0;
 _memcpy($$3$i$i4188 + 23012 | 0, 2426016, 656) | 0;
 _memcpy($$3$i$i4188 + 23668 | 0, 2426672, 656) | 0;
 _memcpy($$3$i$i4188 + 24324 | 0, 2427328, 656) | 0;
 _memcpy($$3$i$i4188 + 24980 | 0, 2427984, 656) | 0;
 _memcpy($$3$i$i4188 + 25636 | 0, 2428640, 656) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1799);
 if ($$3$i$i4188 | 0) {
  $23334 = $$3$i$i4188 + 5 | 0;
  $23336 = (HEAP8[$23334 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23334 >> 0] = $23336;
  if (!($23336 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4188);
  HEAP32[$1799 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 570;
 HEAP16[$bitmapData + 4 >> 1] = 769;
 HEAP16[$bitmapData + 6 >> 1] = 590;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 13828) label = 3621; else {
  $23343 = HEAP32[918918] | 0;
  if (($23343 | 0) == (HEAP32[918916] | 0)) label = 3621; else {
   $$lcssa$i$i4175 = 3675672;
   $$lcssa8$i$i4174 = $23343;
   label = 3622;
  }
 }
 do if ((label | 0) == 3621) {
  if ((HEAP32[918925] | 0) >>> 0 >= 13828) {
   $23350 = HEAP32[918924] | 0;
   if (($23350 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4175 = 3675696;
    $$lcssa8$i$i4174 = $23350;
    label = 3622;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 13828) {
   $23355 = HEAP32[918930] | 0;
   if (($23355 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4175 = 3675720;
    $$lcssa8$i$i4174 = $23355;
    label = 3622;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 13828) {
   $23360 = HEAP32[918936] | 0;
   if (($23360 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4175 = 3675744;
    $$lcssa8$i$i4174 = $23360;
    label = 3622;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 13828) {
   $23365 = HEAP32[918942] | 0;
   if (($23365 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4175 = 3675768;
    $$lcssa8$i$i4174 = $23365;
    label = 3622;
    break;
   }
  }
  $$3$i$i4176 = __Znwj(13828) | 0;
 } while (0);
 if ((label | 0) == 3622) {
  $23348 = $$lcssa8$i$i4174 + -4 | 0;
  HEAP32[$$lcssa$i$i4175 >> 2] = $23348;
  $$3$i$i4176 = HEAP32[$23348 >> 2] | 0;
 }
 $23369 = $$3$i$i4176 + 52 | 0;
 HEAP16[$$3$i$i4176 >> 1] = 328;
 HEAP16[$$3$i$i4176 + 2 >> 1] = 21;
 HEAP8[$$3$i$i4176 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4176 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4176 + 8 >> 2] = 656;
 HEAP32[$$3$i$i4176 + 12 >> 2] = 13776;
 HEAP32[$$3$i$i4176 + 16 >> 2] = $23369;
 HEAP32[$$3$i$i4176 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4176 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4176 + 48 >> 0] = 0;
 HEAP32[$1800 >> 2] = $$3$i$i4176;
 _memcpy($23369 | 0, 2429296, 656) | 0;
 _memcpy($$3$i$i4176 + 708 | 0, 2429952, 656) | 0;
 _memcpy($$3$i$i4176 + 1364 | 0, 2430608, 656) | 0;
 _memcpy($$3$i$i4176 + 2020 | 0, 2431264, 656) | 0;
 _memcpy($$3$i$i4176 + 2676 | 0, 2431920, 656) | 0;
 _memcpy($$3$i$i4176 + 3332 | 0, 2432576, 656) | 0;
 _memcpy($$3$i$i4176 + 3988 | 0, 2433232, 656) | 0;
 _memcpy($$3$i$i4176 + 4644 | 0, 2433888, 656) | 0;
 _memcpy($$3$i$i4176 + 5300 | 0, 2434544, 656) | 0;
 _memcpy($$3$i$i4176 + 5956 | 0, 2435200, 656) | 0;
 _memcpy($$3$i$i4176 + 6612 | 0, 2435856, 656) | 0;
 _memcpy($$3$i$i4176 + 7268 | 0, 2436512, 656) | 0;
 _memcpy($$3$i$i4176 + 7924 | 0, 2437168, 656) | 0;
 _memcpy($$3$i$i4176 + 8580 | 0, 2437824, 656) | 0;
 _memcpy($$3$i$i4176 + 9236 | 0, 2438480, 656) | 0;
 _memcpy($$3$i$i4176 + 9892 | 0, 2439136, 656) | 0;
 _memcpy($$3$i$i4176 + 10548 | 0, 2439792, 656) | 0;
 _memcpy($$3$i$i4176 + 11204 | 0, 2440448, 656) | 0;
 _memcpy($$3$i$i4176 + 11860 | 0, 2441104, 656) | 0;
 _memcpy($$3$i$i4176 + 12516 | 0, 2441760, 656) | 0;
 _memcpy($$3$i$i4176 + 13172 | 0, 2442416, 656) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1800);
 if ($$3$i$i4176 | 0) {
  $23400 = $$3$i$i4176 + 5 | 0;
  $23402 = (HEAP8[$23400 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23400 >> 0] = $23402;
  if (!($23402 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4176);
  HEAP32[$1800 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 419;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 429;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 17300) label = 3637; else {
  $23409 = HEAP32[918918] | 0;
  if (($23409 | 0) == (HEAP32[918916] | 0)) label = 3637; else {
   $$lcssa$i$i4163 = 3675672;
   $$lcssa8$i$i4162 = $23409;
   label = 3638;
  }
 }
 do if ((label | 0) == 3637) {
  if ((HEAP32[918925] | 0) >>> 0 >= 17300) {
   $23416 = HEAP32[918924] | 0;
   if (($23416 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4163 = 3675696;
    $$lcssa8$i$i4162 = $23416;
    label = 3638;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 17300) {
   $23421 = HEAP32[918930] | 0;
   if (($23421 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4163 = 3675720;
    $$lcssa8$i$i4162 = $23421;
    label = 3638;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 17300) {
   $23426 = HEAP32[918936] | 0;
   if (($23426 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4163 = 3675744;
    $$lcssa8$i$i4162 = $23426;
    label = 3638;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 17300) {
   $23431 = HEAP32[918942] | 0;
   if (($23431 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4163 = 3675768;
    $$lcssa8$i$i4162 = $23431;
    label = 3638;
    break;
   }
  }
  $$3$i$i4164 = __Znwj(17300) | 0;
 } while (0);
 if ((label | 0) == 3638) {
  $23414 = $$lcssa8$i$i4162 + -4 | 0;
  HEAP32[$$lcssa$i$i4163 >> 2] = $23414;
  $$3$i$i4164 = HEAP32[$23414 >> 2] | 0;
 }
 $23435 = $$3$i$i4164 + 52 | 0;
 HEAP16[$$3$i$i4164 >> 1] = 784;
 HEAP16[$$3$i$i4164 + 2 >> 1] = 11;
 HEAP8[$$3$i$i4164 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4164 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4164 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i4164 + 12 >> 2] = 17248;
 HEAP32[$$3$i$i4164 + 16 >> 2] = $23435;
 HEAP32[$$3$i$i4164 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4164 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4164 + 48 >> 0] = 0;
 HEAP32[$1801 >> 2] = $$3$i$i4164;
 _memcpy($23435 | 0, 2443072, 1568) | 0;
 _memcpy($$3$i$i4164 + 1620 | 0, 2444640, 1568) | 0;
 _memcpy($$3$i$i4164 + 3188 | 0, 2446208, 1568) | 0;
 _memcpy($$3$i$i4164 + 4756 | 0, 2447776, 1568) | 0;
 _memcpy($$3$i$i4164 + 6324 | 0, 2449344, 1568) | 0;
 _memcpy($$3$i$i4164 + 7892 | 0, 2450912, 1568) | 0;
 _memcpy($$3$i$i4164 + 9460 | 0, 2452480, 1568) | 0;
 _memcpy($$3$i$i4164 + 11028 | 0, 2454048, 1568) | 0;
 _memcpy($$3$i$i4164 + 12596 | 0, 2455616, 1568) | 0;
 _memcpy($$3$i$i4164 + 14164 | 0, 2457184, 1568) | 0;
 _memcpy($$3$i$i4164 + 15732 | 0, 2458752, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1801);
 if ($$3$i$i4164 | 0) {
  $23456 = $$3$i$i4164 + 5 | 0;
  $23458 = (HEAP8[$23456 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23456 >> 0] = $23458;
  if (!($23458 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4164);
  HEAP32[$1801 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 457;
 HEAP16[$bitmapData + 4 >> 1] = 436;
 HEAP16[$bitmapData + 6 >> 1] = 531;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31852) label = 3653; else {
  $23465 = HEAP32[918918] | 0;
  if (($23465 | 0) == (HEAP32[918916] | 0)) label = 3653; else {
   $$lcssa$i$i4151 = 3675672;
   $$lcssa8$i$i4150 = $23465;
   label = 3654;
  }
 }
 do if ((label | 0) == 3653) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31852) {
   $23472 = HEAP32[918924] | 0;
   if (($23472 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4151 = 3675696;
    $$lcssa8$i$i4150 = $23472;
    label = 3654;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31852) {
   $23477 = HEAP32[918930] | 0;
   if (($23477 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4151 = 3675720;
    $$lcssa8$i$i4150 = $23477;
    label = 3654;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31852) {
   $23482 = HEAP32[918936] | 0;
   if (($23482 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4151 = 3675744;
    $$lcssa8$i$i4150 = $23482;
    label = 3654;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31852) {
   $23487 = HEAP32[918942] | 0;
   if (($23487 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4151 = 3675768;
    $$lcssa8$i$i4150 = $23487;
    label = 3654;
    break;
   }
  }
  $$3$i$i4152 = __Znwj(31852) | 0;
 } while (0);
 if ((label | 0) == 3654) {
  $23470 = $$lcssa8$i$i4150 + -4 | 0;
  HEAP32[$$lcssa$i$i4151 >> 2] = $23470;
  $$3$i$i4152 = HEAP32[$23470 >> 2] | 0;
 }
 $23491 = $$3$i$i4152 + 52 | 0;
 HEAP16[$$3$i$i4152 >> 1] = 212;
 HEAP16[$$3$i$i4152 + 2 >> 1] = 75;
 HEAP8[$$3$i$i4152 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4152 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4152 + 8 >> 2] = 424;
 HEAP32[$$3$i$i4152 + 12 >> 2] = 31800;
 HEAP32[$$3$i$i4152 + 16 >> 2] = $23491;
 HEAP32[$$3$i$i4152 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4152 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4152 + 48 >> 0] = 0;
 HEAP32[$1802 >> 2] = $$3$i$i4152;
 $dest$02$i4146 = $23491;
 $i$03$i4145 = 0;
 $src$01$i4147 = 2460320;
 while (1) {
  _memcpy($dest$02$i4146 | 0, $src$01$i4147 | 0, 424) | 0;
  $i$03$i4145 = $i$03$i4145 + 1 << 16 >> 16;
  if (($i$03$i4145 & 65535) >= 75) break; else {
   $dest$02$i4146 = $dest$02$i4146 + 424 | 0;
   $src$01$i4147 = $src$01$i4147 + 424 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1802);
 if ($$3$i$i4152 | 0) {
  $23506 = $$3$i$i4152 + 5 | 0;
  $23508 = (HEAP8[$23506 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23506 >> 0] = $23508;
  if (!($23508 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4152);
  HEAP32[$1802 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 532;
 HEAP16[$bitmapData + 4 >> 1] = 436;
 HEAP16[$bitmapData + 6 >> 1] = 606;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31852) label = 3671; else {
  $23515 = HEAP32[918918] | 0;
  if (($23515 | 0) == (HEAP32[918916] | 0)) label = 3671; else {
   $$lcssa$i$i4139 = 3675672;
   $$lcssa8$i$i4138 = $23515;
   label = 3672;
  }
 }
 do if ((label | 0) == 3671) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31852) {
   $23522 = HEAP32[918924] | 0;
   if (($23522 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4139 = 3675696;
    $$lcssa8$i$i4138 = $23522;
    label = 3672;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31852) {
   $23527 = HEAP32[918930] | 0;
   if (($23527 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4139 = 3675720;
    $$lcssa8$i$i4138 = $23527;
    label = 3672;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31852) {
   $23532 = HEAP32[918936] | 0;
   if (($23532 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4139 = 3675744;
    $$lcssa8$i$i4138 = $23532;
    label = 3672;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31852) {
   $23537 = HEAP32[918942] | 0;
   if (($23537 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4139 = 3675768;
    $$lcssa8$i$i4138 = $23537;
    label = 3672;
    break;
   }
  }
  $$3$i$i4140 = __Znwj(31852) | 0;
 } while (0);
 if ((label | 0) == 3672) {
  $23520 = $$lcssa8$i$i4138 + -4 | 0;
  HEAP32[$$lcssa$i$i4139 >> 2] = $23520;
  $$3$i$i4140 = HEAP32[$23520 >> 2] | 0;
 }
 $23541 = $$3$i$i4140 + 52 | 0;
 HEAP16[$$3$i$i4140 >> 1] = 212;
 HEAP16[$$3$i$i4140 + 2 >> 1] = 75;
 HEAP8[$$3$i$i4140 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4140 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4140 + 8 >> 2] = 424;
 HEAP32[$$3$i$i4140 + 12 >> 2] = 31800;
 HEAP32[$$3$i$i4140 + 16 >> 2] = $23541;
 HEAP32[$$3$i$i4140 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4140 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4140 + 48 >> 0] = 0;
 HEAP32[$1803 >> 2] = $$3$i$i4140;
 $dest$02$i4134 = $23541;
 $i$03$i4133 = 0;
 $src$01$i4135 = 2492120;
 while (1) {
  _memcpy($dest$02$i4134 | 0, $src$01$i4135 | 0, 424) | 0;
  $i$03$i4133 = $i$03$i4133 + 1 << 16 >> 16;
  if (($i$03$i4133 & 65535) >= 75) break; else {
   $dest$02$i4134 = $dest$02$i4134 + 424 | 0;
   $src$01$i4135 = $src$01$i4135 + 424 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1803);
 if ($$3$i$i4140 | 0) {
  $23556 = $$3$i$i4140 + 5 | 0;
  $23558 = (HEAP8[$23556 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23556 >> 0] = $23558;
  if (!($23558 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4140);
  HEAP32[$1803 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 607;
 HEAP16[$bitmapData + 4 >> 1] = 436;
 HEAP16[$bitmapData + 6 >> 1] = 609;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1324) label = 3689; else {
  $23565 = HEAP32[918918] | 0;
  if (($23565 | 0) == (HEAP32[918916] | 0)) label = 3689; else {
   $$lcssa$i$i4127 = 3675672;
   $$lcssa8$i$i4126 = $23565;
   label = 3690;
  }
 }
 do if ((label | 0) == 3689) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1324) {
   $23572 = HEAP32[918924] | 0;
   if (($23572 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4127 = 3675696;
    $$lcssa8$i$i4126 = $23572;
    label = 3690;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1324) {
   $23577 = HEAP32[918930] | 0;
   if (($23577 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4127 = 3675720;
    $$lcssa8$i$i4126 = $23577;
    label = 3690;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1324) {
   $23582 = HEAP32[918936] | 0;
   if (($23582 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4127 = 3675744;
    $$lcssa8$i$i4126 = $23582;
    label = 3690;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1324) {
   $23587 = HEAP32[918942] | 0;
   if (($23587 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4127 = 3675768;
    $$lcssa8$i$i4126 = $23587;
    label = 3690;
    break;
   }
  }
  $$3$i$i4128 = __Znwj(1324) | 0;
 } while (0);
 if ((label | 0) == 3690) {
  $23570 = $$lcssa8$i$i4126 + -4 | 0;
  HEAP32[$$lcssa$i$i4127 >> 2] = $23570;
  $$3$i$i4128 = HEAP32[$23570 >> 2] | 0;
 }
 $23591 = $$3$i$i4128 + 52 | 0;
 HEAP16[$$3$i$i4128 >> 1] = 212;
 HEAP16[$$3$i$i4128 + 2 >> 1] = 3;
 HEAP8[$$3$i$i4128 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4128 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4128 + 8 >> 2] = 424;
 HEAP32[$$3$i$i4128 + 12 >> 2] = 1272;
 HEAP32[$$3$i$i4128 + 16 >> 2] = $23591;
 HEAP32[$$3$i$i4128 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4128 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4128 + 48 >> 0] = 0;
 HEAP32[$1804 >> 2] = $$3$i$i4128;
 _memcpy($23591 | 0, 2523920, 424) | 0;
 _memcpy($$3$i$i4128 + 476 | 0, 2524344, 424) | 0;
 _memcpy($$3$i$i4128 + 900 | 0, 2524768, 424) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1804);
 if ($$3$i$i4128 | 0) {
  $23604 = $$3$i$i4128 + 5 | 0;
  $23606 = (HEAP8[$23604 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23604 >> 0] = $23606;
  if (!($23606 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4128);
  HEAP32[$1804 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 430;
 HEAP16[$bitmapData + 4 >> 1] = 221;
 HEAP16[$bitmapData + 6 >> 1] = 609;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4372) label = 3705; else {
  $23613 = HEAP32[918918] | 0;
  if (($23613 | 0) == (HEAP32[918916] | 0)) label = 3705; else {
   $$lcssa$i$i4115 = 3675672;
   $$lcssa8$i$i4114 = $23613;
   label = 3706;
  }
 }
 do if ((label | 0) == 3705) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4372) {
   $23620 = HEAP32[918924] | 0;
   if (($23620 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4115 = 3675696;
    $$lcssa8$i$i4114 = $23620;
    label = 3706;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4372) {
   $23625 = HEAP32[918930] | 0;
   if (($23625 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4115 = 3675720;
    $$lcssa8$i$i4114 = $23625;
    label = 3706;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4372) {
   $23630 = HEAP32[918936] | 0;
   if (($23630 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4115 = 3675744;
    $$lcssa8$i$i4114 = $23630;
    label = 3706;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4372) {
   $23635 = HEAP32[918942] | 0;
   if (($23635 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4115 = 3675768;
    $$lcssa8$i$i4114 = $23635;
    label = 3706;
    break;
   }
  }
  $$3$i$i4116 = __Znwj(4372) | 0;
 } while (0);
 if ((label | 0) == 3706) {
  $23618 = $$lcssa8$i$i4114 + -4 | 0;
  HEAP32[$$lcssa$i$i4115 >> 2] = $23618;
  $$3$i$i4116 = HEAP32[$23618 >> 2] | 0;
 }
 $23639 = $$3$i$i4116 + 52 | 0;
 HEAP16[$$3$i$i4116 >> 1] = 12;
 HEAP16[$$3$i$i4116 + 2 >> 1] = 180;
 HEAP8[$$3$i$i4116 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4116 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4116 + 8 >> 2] = 24;
 HEAP32[$$3$i$i4116 + 12 >> 2] = 4320;
 HEAP32[$$3$i$i4116 + 16 >> 2] = $23639;
 HEAP32[$$3$i$i4116 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4116 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4116 + 48 >> 0] = 0;
 HEAP32[$1805 >> 2] = $$3$i$i4116;
 $dest$02$i4110 = $23639;
 $i$03$i4109 = 0;
 $src$01$i4111 = 2525192;
 while (1) {
  dest = $dest$02$i4110;
  src = $src$01$i4111;
  stop = dest + 24 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $i$03$i4109 = $i$03$i4109 + 1 << 16 >> 16;
  if (($i$03$i4109 & 65535) >= 180) break; else {
   $dest$02$i4110 = $dest$02$i4110 + 24 | 0;
   $src$01$i4111 = $src$01$i4111 + 24 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1805);
 if ($$3$i$i4116 | 0) {
  $23654 = $$3$i$i4116 + 5 | 0;
  $23656 = (HEAP8[$23654 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23654 >> 0] = $23656;
  if (!($23656 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4116);
  HEAP32[$1805 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 635;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 635;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1484) label = 3723; else {
  $23663 = HEAP32[918918] | 0;
  if (($23663 | 0) == (HEAP32[918916] | 0)) label = 3723; else {
   $$lcssa$i$i4103 = 3675672;
   $$lcssa8$i$i4102 = $23663;
   label = 3724;
  }
 }
 do if ((label | 0) == 3723) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1484) {
   $23670 = HEAP32[918924] | 0;
   if (($23670 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4103 = 3675696;
    $$lcssa8$i$i4102 = $23670;
    label = 3724;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1484) {
   $23675 = HEAP32[918930] | 0;
   if (($23675 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4103 = 3675720;
    $$lcssa8$i$i4102 = $23675;
    label = 3724;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1484) {
   $23680 = HEAP32[918936] | 0;
   if (($23680 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4103 = 3675744;
    $$lcssa8$i$i4102 = $23680;
    label = 3724;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1484) {
   $23685 = HEAP32[918942] | 0;
   if (($23685 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4103 = 3675768;
    $$lcssa8$i$i4102 = $23685;
    label = 3724;
    break;
   }
  }
  $$3$i$i4104 = __Znwj(1484) | 0;
 } while (0);
 if ((label | 0) == 3724) {
  $23668 = $$lcssa8$i$i4102 + -4 | 0;
  HEAP32[$$lcssa$i$i4103 >> 2] = $23668;
  $$3$i$i4104 = HEAP32[$23668 >> 2] | 0;
 }
 $23689 = $$3$i$i4104 + 52 | 0;
 HEAP16[$$3$i$i4104 >> 1] = 716;
 HEAP16[$$3$i$i4104 + 2 >> 1] = 1;
 HEAP8[$$3$i$i4104 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4104 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4104 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i4104 + 12 >> 2] = 1432;
 HEAP32[$$3$i$i4104 + 16 >> 2] = $23689;
 HEAP32[$$3$i$i4104 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4104 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4104 + 48 >> 0] = 0;
 HEAP32[$1806 >> 2] = $$3$i$i4104;
 _memcpy($23689 | 0, 2529512, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1806);
 if ($$3$i$i4104 | 0) {
  $23700 = $$3$i$i4104 + 5 | 0;
  $23702 = (HEAP8[$23700 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23700 >> 0] = $23702;
  if (!($23702 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4104);
  HEAP32[$1806 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 636;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 636;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1484) label = 3739; else {
  $23709 = HEAP32[918918] | 0;
  if (($23709 | 0) == (HEAP32[918916] | 0)) label = 3739; else {
   $$lcssa$i$i4091 = 3675672;
   $$lcssa8$i$i4090 = $23709;
   label = 3740;
  }
 }
 do if ((label | 0) == 3739) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1484) {
   $23716 = HEAP32[918924] | 0;
   if (($23716 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4091 = 3675696;
    $$lcssa8$i$i4090 = $23716;
    label = 3740;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1484) {
   $23721 = HEAP32[918930] | 0;
   if (($23721 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4091 = 3675720;
    $$lcssa8$i$i4090 = $23721;
    label = 3740;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1484) {
   $23726 = HEAP32[918936] | 0;
   if (($23726 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4091 = 3675744;
    $$lcssa8$i$i4090 = $23726;
    label = 3740;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1484) {
   $23731 = HEAP32[918942] | 0;
   if (($23731 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4091 = 3675768;
    $$lcssa8$i$i4090 = $23731;
    label = 3740;
    break;
   }
  }
  $$3$i$i4092 = __Znwj(1484) | 0;
 } while (0);
 if ((label | 0) == 3740) {
  $23714 = $$lcssa8$i$i4090 + -4 | 0;
  HEAP32[$$lcssa$i$i4091 >> 2] = $23714;
  $$3$i$i4092 = HEAP32[$23714 >> 2] | 0;
 }
 $23735 = $$3$i$i4092 + 52 | 0;
 HEAP16[$$3$i$i4092 >> 1] = 716;
 HEAP16[$$3$i$i4092 + 2 >> 1] = 1;
 HEAP8[$$3$i$i4092 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4092 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4092 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i4092 + 12 >> 2] = 1432;
 HEAP32[$$3$i$i4092 + 16 >> 2] = $23735;
 HEAP32[$$3$i$i4092 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4092 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4092 + 48 >> 0] = 0;
 HEAP32[$1807 >> 2] = $$3$i$i4092;
 _memcpy($23735 | 0, 2530944, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1807);
 if ($$3$i$i4092 | 0) {
  $23746 = $$3$i$i4092 + 5 | 0;
  $23748 = (HEAP8[$23746 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23746 >> 0] = $23748;
  if (!($23748 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4092);
  HEAP32[$1807 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 637;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 637;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1484) label = 3755; else {
  $23755 = HEAP32[918918] | 0;
  if (($23755 | 0) == (HEAP32[918916] | 0)) label = 3755; else {
   $$lcssa$i$i4079 = 3675672;
   $$lcssa8$i$i4078 = $23755;
   label = 3756;
  }
 }
 do if ((label | 0) == 3755) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1484) {
   $23762 = HEAP32[918924] | 0;
   if (($23762 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4079 = 3675696;
    $$lcssa8$i$i4078 = $23762;
    label = 3756;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1484) {
   $23767 = HEAP32[918930] | 0;
   if (($23767 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4079 = 3675720;
    $$lcssa8$i$i4078 = $23767;
    label = 3756;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1484) {
   $23772 = HEAP32[918936] | 0;
   if (($23772 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4079 = 3675744;
    $$lcssa8$i$i4078 = $23772;
    label = 3756;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1484) {
   $23777 = HEAP32[918942] | 0;
   if (($23777 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4079 = 3675768;
    $$lcssa8$i$i4078 = $23777;
    label = 3756;
    break;
   }
  }
  $$3$i$i4080 = __Znwj(1484) | 0;
 } while (0);
 if ((label | 0) == 3756) {
  $23760 = $$lcssa8$i$i4078 + -4 | 0;
  HEAP32[$$lcssa$i$i4079 >> 2] = $23760;
  $$3$i$i4080 = HEAP32[$23760 >> 2] | 0;
 }
 $23781 = $$3$i$i4080 + 52 | 0;
 HEAP16[$$3$i$i4080 >> 1] = 716;
 HEAP16[$$3$i$i4080 + 2 >> 1] = 1;
 HEAP8[$$3$i$i4080 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4080 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4080 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i4080 + 12 >> 2] = 1432;
 HEAP32[$$3$i$i4080 + 16 >> 2] = $23781;
 HEAP32[$$3$i$i4080 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4080 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4080 + 48 >> 0] = 0;
 HEAP32[$1808 >> 2] = $$3$i$i4080;
 _memcpy($23781 | 0, 2532376, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1808);
 if ($$3$i$i4080 | 0) {
  $23792 = $$3$i$i4080 + 5 | 0;
  $23794 = (HEAP8[$23792 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23792 >> 0] = $23794;
  if (!($23794 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4080);
  HEAP32[$1808 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 638;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 638;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1484) label = 3771; else {
  $23801 = HEAP32[918918] | 0;
  if (($23801 | 0) == (HEAP32[918916] | 0)) label = 3771; else {
   $$lcssa$i$i4067 = 3675672;
   $$lcssa8$i$i4066 = $23801;
   label = 3772;
  }
 }
 do if ((label | 0) == 3771) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1484) {
   $23808 = HEAP32[918924] | 0;
   if (($23808 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4067 = 3675696;
    $$lcssa8$i$i4066 = $23808;
    label = 3772;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1484) {
   $23813 = HEAP32[918930] | 0;
   if (($23813 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4067 = 3675720;
    $$lcssa8$i$i4066 = $23813;
    label = 3772;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1484) {
   $23818 = HEAP32[918936] | 0;
   if (($23818 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4067 = 3675744;
    $$lcssa8$i$i4066 = $23818;
    label = 3772;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1484) {
   $23823 = HEAP32[918942] | 0;
   if (($23823 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4067 = 3675768;
    $$lcssa8$i$i4066 = $23823;
    label = 3772;
    break;
   }
  }
  $$3$i$i4068 = __Znwj(1484) | 0;
 } while (0);
 if ((label | 0) == 3772) {
  $23806 = $$lcssa8$i$i4066 + -4 | 0;
  HEAP32[$$lcssa$i$i4067 >> 2] = $23806;
  $$3$i$i4068 = HEAP32[$23806 >> 2] | 0;
 }
 $23827 = $$3$i$i4068 + 52 | 0;
 HEAP16[$$3$i$i4068 >> 1] = 716;
 HEAP16[$$3$i$i4068 + 2 >> 1] = 1;
 HEAP8[$$3$i$i4068 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4068 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4068 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i4068 + 12 >> 2] = 1432;
 HEAP32[$$3$i$i4068 + 16 >> 2] = $23827;
 HEAP32[$$3$i$i4068 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4068 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4068 + 48 >> 0] = 0;
 HEAP32[$1809 >> 2] = $$3$i$i4068;
 _memcpy($23827 | 0, 2533808, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1809);
 if ($$3$i$i4068 | 0) {
  $23838 = $$3$i$i4068 + 5 | 0;
  $23840 = (HEAP8[$23838 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23838 >> 0] = $23840;
  if (!($23840 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4068);
  HEAP32[$1809 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 639;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 639;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1484) label = 3787; else {
  $23847 = HEAP32[918918] | 0;
  if (($23847 | 0) == (HEAP32[918916] | 0)) label = 3787; else {
   $$lcssa$i$i4055 = 3675672;
   $$lcssa8$i$i4054 = $23847;
   label = 3788;
  }
 }
 do if ((label | 0) == 3787) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1484) {
   $23854 = HEAP32[918924] | 0;
   if (($23854 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4055 = 3675696;
    $$lcssa8$i$i4054 = $23854;
    label = 3788;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1484) {
   $23859 = HEAP32[918930] | 0;
   if (($23859 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4055 = 3675720;
    $$lcssa8$i$i4054 = $23859;
    label = 3788;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1484) {
   $23864 = HEAP32[918936] | 0;
   if (($23864 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4055 = 3675744;
    $$lcssa8$i$i4054 = $23864;
    label = 3788;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1484) {
   $23869 = HEAP32[918942] | 0;
   if (($23869 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4055 = 3675768;
    $$lcssa8$i$i4054 = $23869;
    label = 3788;
    break;
   }
  }
  $$3$i$i4056 = __Znwj(1484) | 0;
 } while (0);
 if ((label | 0) == 3788) {
  $23852 = $$lcssa8$i$i4054 + -4 | 0;
  HEAP32[$$lcssa$i$i4055 >> 2] = $23852;
  $$3$i$i4056 = HEAP32[$23852 >> 2] | 0;
 }
 $23873 = $$3$i$i4056 + 52 | 0;
 HEAP16[$$3$i$i4056 >> 1] = 716;
 HEAP16[$$3$i$i4056 + 2 >> 1] = 1;
 HEAP8[$$3$i$i4056 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4056 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4056 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i4056 + 12 >> 2] = 1432;
 HEAP32[$$3$i$i4056 + 16 >> 2] = $23873;
 HEAP32[$$3$i$i4056 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4056 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4056 + 48 >> 0] = 0;
 HEAP32[$1810 >> 2] = $$3$i$i4056;
 _memcpy($23873 | 0, 2535240, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1810);
 if ($$3$i$i4056 | 0) {
  $23884 = $$3$i$i4056 + 5 | 0;
  $23886 = (HEAP8[$23884 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23884 >> 0] = $23886;
  if (!($23886 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4056);
  HEAP32[$1810 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 640;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 640;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1484) label = 3803; else {
  $23893 = HEAP32[918918] | 0;
  if (($23893 | 0) == (HEAP32[918916] | 0)) label = 3803; else {
   $$lcssa$i$i4043 = 3675672;
   $$lcssa8$i$i4042 = $23893;
   label = 3804;
  }
 }
 do if ((label | 0) == 3803) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1484) {
   $23900 = HEAP32[918924] | 0;
   if (($23900 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4043 = 3675696;
    $$lcssa8$i$i4042 = $23900;
    label = 3804;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1484) {
   $23905 = HEAP32[918930] | 0;
   if (($23905 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4043 = 3675720;
    $$lcssa8$i$i4042 = $23905;
    label = 3804;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1484) {
   $23910 = HEAP32[918936] | 0;
   if (($23910 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4043 = 3675744;
    $$lcssa8$i$i4042 = $23910;
    label = 3804;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1484) {
   $23915 = HEAP32[918942] | 0;
   if (($23915 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4043 = 3675768;
    $$lcssa8$i$i4042 = $23915;
    label = 3804;
    break;
   }
  }
  $$3$i$i4044 = __Znwj(1484) | 0;
 } while (0);
 if ((label | 0) == 3804) {
  $23898 = $$lcssa8$i$i4042 + -4 | 0;
  HEAP32[$$lcssa$i$i4043 >> 2] = $23898;
  $$3$i$i4044 = HEAP32[$23898 >> 2] | 0;
 }
 $23919 = $$3$i$i4044 + 52 | 0;
 HEAP16[$$3$i$i4044 >> 1] = 716;
 HEAP16[$$3$i$i4044 + 2 >> 1] = 1;
 HEAP8[$$3$i$i4044 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4044 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4044 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i4044 + 12 >> 2] = 1432;
 HEAP32[$$3$i$i4044 + 16 >> 2] = $23919;
 HEAP32[$$3$i$i4044 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4044 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4044 + 48 >> 0] = 0;
 HEAP32[$1811 >> 2] = $$3$i$i4044;
 _memcpy($23919 | 0, 2536672, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1811);
 if ($$3$i$i4044 | 0) {
  $23930 = $$3$i$i4044 + 5 | 0;
  $23932 = (HEAP8[$23930 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23930 >> 0] = $23932;
  if (!($23932 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4044);
  HEAP32[$1811 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 641;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 641;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1484) label = 3819; else {
  $23939 = HEAP32[918918] | 0;
  if (($23939 | 0) == (HEAP32[918916] | 0)) label = 3819; else {
   $$lcssa$i$i4031 = 3675672;
   $$lcssa8$i$i4030 = $23939;
   label = 3820;
  }
 }
 do if ((label | 0) == 3819) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1484) {
   $23946 = HEAP32[918924] | 0;
   if (($23946 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4031 = 3675696;
    $$lcssa8$i$i4030 = $23946;
    label = 3820;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1484) {
   $23951 = HEAP32[918930] | 0;
   if (($23951 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4031 = 3675720;
    $$lcssa8$i$i4030 = $23951;
    label = 3820;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1484) {
   $23956 = HEAP32[918936] | 0;
   if (($23956 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4031 = 3675744;
    $$lcssa8$i$i4030 = $23956;
    label = 3820;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1484) {
   $23961 = HEAP32[918942] | 0;
   if (($23961 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4031 = 3675768;
    $$lcssa8$i$i4030 = $23961;
    label = 3820;
    break;
   }
  }
  $$3$i$i4032 = __Znwj(1484) | 0;
 } while (0);
 if ((label | 0) == 3820) {
  $23944 = $$lcssa8$i$i4030 + -4 | 0;
  HEAP32[$$lcssa$i$i4031 >> 2] = $23944;
  $$3$i$i4032 = HEAP32[$23944 >> 2] | 0;
 }
 $23965 = $$3$i$i4032 + 52 | 0;
 HEAP16[$$3$i$i4032 >> 1] = 716;
 HEAP16[$$3$i$i4032 + 2 >> 1] = 1;
 HEAP8[$$3$i$i4032 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4032 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4032 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i4032 + 12 >> 2] = 1432;
 HEAP32[$$3$i$i4032 + 16 >> 2] = $23965;
 HEAP32[$$3$i$i4032 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4032 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4032 + 48 >> 0] = 0;
 HEAP32[$1812 >> 2] = $$3$i$i4032;
 _memcpy($23965 | 0, 2538104, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1812);
 if ($$3$i$i4032 | 0) {
  $23976 = $$3$i$i4032 + 5 | 0;
  $23978 = (HEAP8[$23976 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$23976 >> 0] = $23978;
  if (!($23978 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4032);
  HEAP32[$1812 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 642;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 646;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 7212) label = 3835; else {
  $23985 = HEAP32[918918] | 0;
  if (($23985 | 0) == (HEAP32[918916] | 0)) label = 3835; else {
   $$lcssa$i$i4019 = 3675672;
   $$lcssa8$i$i4018 = $23985;
   label = 3836;
  }
 }
 do if ((label | 0) == 3835) {
  if ((HEAP32[918925] | 0) >>> 0 >= 7212) {
   $23992 = HEAP32[918924] | 0;
   if (($23992 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4019 = 3675696;
    $$lcssa8$i$i4018 = $23992;
    label = 3836;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 7212) {
   $23997 = HEAP32[918930] | 0;
   if (($23997 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4019 = 3675720;
    $$lcssa8$i$i4018 = $23997;
    label = 3836;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 7212) {
   $24002 = HEAP32[918936] | 0;
   if (($24002 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4019 = 3675744;
    $$lcssa8$i$i4018 = $24002;
    label = 3836;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 7212) {
   $24007 = HEAP32[918942] | 0;
   if (($24007 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4019 = 3675768;
    $$lcssa8$i$i4018 = $24007;
    label = 3836;
    break;
   }
  }
  $$3$i$i4020 = __Znwj(7212) | 0;
 } while (0);
 if ((label | 0) == 3836) {
  $23990 = $$lcssa8$i$i4018 + -4 | 0;
  HEAP32[$$lcssa$i$i4019 >> 2] = $23990;
  $$3$i$i4020 = HEAP32[$23990 >> 2] | 0;
 }
 $24011 = $$3$i$i4020 + 52 | 0;
 HEAP16[$$3$i$i4020 >> 1] = 716;
 HEAP16[$$3$i$i4020 + 2 >> 1] = 5;
 HEAP8[$$3$i$i4020 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4020 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4020 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i4020 + 12 >> 2] = 7160;
 HEAP32[$$3$i$i4020 + 16 >> 2] = $24011;
 HEAP32[$$3$i$i4020 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4020 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4020 + 48 >> 0] = 0;
 HEAP32[$1813 >> 2] = $$3$i$i4020;
 _memcpy($24011 | 0, 2539536, 1432) | 0;
 _memcpy($$3$i$i4020 + 1484 | 0, 2540968, 1432) | 0;
 _memcpy($$3$i$i4020 + 2916 | 0, 2542400, 1432) | 0;
 _memcpy($$3$i$i4020 + 4348 | 0, 2543832, 1432) | 0;
 _memcpy($$3$i$i4020 + 5780 | 0, 2545264, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1813);
 if ($$3$i$i4020 | 0) {
  $24026 = $$3$i$i4020 + 5 | 0;
  $24028 = (HEAP8[$24026 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24026 >> 0] = $24028;
  if (!($24028 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4020);
  HEAP32[$1813 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 647;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 647;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1484) label = 3851; else {
  $24035 = HEAP32[918918] | 0;
  if (($24035 | 0) == (HEAP32[918916] | 0)) label = 3851; else {
   $$lcssa$i$i4007 = 3675672;
   $$lcssa8$i$i4006 = $24035;
   label = 3852;
  }
 }
 do if ((label | 0) == 3851) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1484) {
   $24042 = HEAP32[918924] | 0;
   if (($24042 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i4007 = 3675696;
    $$lcssa8$i$i4006 = $24042;
    label = 3852;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1484) {
   $24047 = HEAP32[918930] | 0;
   if (($24047 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i4007 = 3675720;
    $$lcssa8$i$i4006 = $24047;
    label = 3852;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1484) {
   $24052 = HEAP32[918936] | 0;
   if (($24052 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i4007 = 3675744;
    $$lcssa8$i$i4006 = $24052;
    label = 3852;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1484) {
   $24057 = HEAP32[918942] | 0;
   if (($24057 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i4007 = 3675768;
    $$lcssa8$i$i4006 = $24057;
    label = 3852;
    break;
   }
  }
  $$3$i$i4008 = __Znwj(1484) | 0;
 } while (0);
 if ((label | 0) == 3852) {
  $24040 = $$lcssa8$i$i4006 + -4 | 0;
  HEAP32[$$lcssa$i$i4007 >> 2] = $24040;
  $$3$i$i4008 = HEAP32[$24040 >> 2] | 0;
 }
 $24061 = $$3$i$i4008 + 52 | 0;
 HEAP16[$$3$i$i4008 >> 1] = 716;
 HEAP16[$$3$i$i4008 + 2 >> 1] = 1;
 HEAP8[$$3$i$i4008 + 4 >> 0] = 16;
 HEAP8[$$3$i$i4008 + 5 >> 0] = 1;
 HEAP32[$$3$i$i4008 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i4008 + 12 >> 2] = 1432;
 HEAP32[$$3$i$i4008 + 16 >> 2] = $24061;
 HEAP32[$$3$i$i4008 + 20 >> 2] = 0;
 HEAP32[$$3$i$i4008 + 24 >> 2] = 0;
 HEAP8[$$3$i$i4008 + 48 >> 0] = 0;
 HEAP32[$1814 >> 2] = $$3$i$i4008;
 _memcpy($24061 | 0, 2546696, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1814);
 if ($$3$i$i4008 | 0) {
  $24072 = $$3$i$i4008 + 5 | 0;
  $24074 = (HEAP8[$24072 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24072 >> 0] = $24074;
  if (!($24074 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i4008);
  HEAP32[$1814 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 648;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 648;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1484) label = 3867; else {
  $24081 = HEAP32[918918] | 0;
  if (($24081 | 0) == (HEAP32[918916] | 0)) label = 3867; else {
   $$lcssa$i$i3995 = 3675672;
   $$lcssa8$i$i3994 = $24081;
   label = 3868;
  }
 }
 do if ((label | 0) == 3867) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1484) {
   $24088 = HEAP32[918924] | 0;
   if (($24088 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3995 = 3675696;
    $$lcssa8$i$i3994 = $24088;
    label = 3868;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1484) {
   $24093 = HEAP32[918930] | 0;
   if (($24093 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3995 = 3675720;
    $$lcssa8$i$i3994 = $24093;
    label = 3868;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1484) {
   $24098 = HEAP32[918936] | 0;
   if (($24098 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3995 = 3675744;
    $$lcssa8$i$i3994 = $24098;
    label = 3868;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1484) {
   $24103 = HEAP32[918942] | 0;
   if (($24103 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3995 = 3675768;
    $$lcssa8$i$i3994 = $24103;
    label = 3868;
    break;
   }
  }
  $$3$i$i3996 = __Znwj(1484) | 0;
 } while (0);
 if ((label | 0) == 3868) {
  $24086 = $$lcssa8$i$i3994 + -4 | 0;
  HEAP32[$$lcssa$i$i3995 >> 2] = $24086;
  $$3$i$i3996 = HEAP32[$24086 >> 2] | 0;
 }
 $24107 = $$3$i$i3996 + 52 | 0;
 HEAP16[$$3$i$i3996 >> 1] = 716;
 HEAP16[$$3$i$i3996 + 2 >> 1] = 1;
 HEAP8[$$3$i$i3996 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3996 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3996 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i3996 + 12 >> 2] = 1432;
 HEAP32[$$3$i$i3996 + 16 >> 2] = $24107;
 HEAP32[$$3$i$i3996 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3996 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3996 + 48 >> 0] = 0;
 HEAP32[$1815 >> 2] = $$3$i$i3996;
 _memcpy($24107 | 0, 2548128, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1815);
 if ($$3$i$i3996 | 0) {
  $24118 = $$3$i$i3996 + 5 | 0;
  $24120 = (HEAP8[$24118 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24118 >> 0] = $24120;
  if (!($24120 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3996);
  HEAP32[$1815 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 649;
 HEAP16[$bitmapData + 4 >> 1] = 927;
 HEAP16[$bitmapData + 6 >> 1] = 650;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2916) label = 3883; else {
  $24127 = HEAP32[918918] | 0;
  if (($24127 | 0) == (HEAP32[918916] | 0)) label = 3883; else {
   $$lcssa$i$i3983 = 3675672;
   $$lcssa8$i$i3982 = $24127;
   label = 3884;
  }
 }
 do if ((label | 0) == 3883) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2916) {
   $24134 = HEAP32[918924] | 0;
   if (($24134 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3983 = 3675696;
    $$lcssa8$i$i3982 = $24134;
    label = 3884;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2916) {
   $24139 = HEAP32[918930] | 0;
   if (($24139 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3983 = 3675720;
    $$lcssa8$i$i3982 = $24139;
    label = 3884;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2916) {
   $24144 = HEAP32[918936] | 0;
   if (($24144 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3983 = 3675744;
    $$lcssa8$i$i3982 = $24144;
    label = 3884;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2916) {
   $24149 = HEAP32[918942] | 0;
   if (($24149 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3983 = 3675768;
    $$lcssa8$i$i3982 = $24149;
    label = 3884;
    break;
   }
  }
  $$3$i$i3984 = __Znwj(2916) | 0;
 } while (0);
 if ((label | 0) == 3884) {
  $24132 = $$lcssa8$i$i3982 + -4 | 0;
  HEAP32[$$lcssa$i$i3983 >> 2] = $24132;
  $$3$i$i3984 = HEAP32[$24132 >> 2] | 0;
 }
 $24153 = $$3$i$i3984 + 52 | 0;
 HEAP16[$$3$i$i3984 >> 1] = 716;
 HEAP16[$$3$i$i3984 + 2 >> 1] = 2;
 HEAP8[$$3$i$i3984 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3984 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3984 + 8 >> 2] = 1432;
 HEAP32[$$3$i$i3984 + 12 >> 2] = 2864;
 HEAP32[$$3$i$i3984 + 16 >> 2] = $24153;
 HEAP32[$$3$i$i3984 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3984 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3984 + 48 >> 0] = 0;
 HEAP32[$1816 >> 2] = $$3$i$i3984;
 _memcpy($24153 | 0, 2549560, 1432) | 0;
 _memcpy($$3$i$i3984 + 1484 | 0, 2550992, 1432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1816);
 if ($$3$i$i3984 | 0) {
  $24165 = $$3$i$i3984 + 5 | 0;
  $24167 = (HEAP8[$24165 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24165 >> 0] = $24167;
  if (!($24167 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3984);
  HEAP32[$1816 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 651;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 662;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 18868) label = 3899; else {
  $24174 = HEAP32[918918] | 0;
  if (($24174 | 0) == (HEAP32[918916] | 0)) label = 3899; else {
   $$lcssa$i$i3971 = 3675672;
   $$lcssa8$i$i3970 = $24174;
   label = 3900;
  }
 }
 do if ((label | 0) == 3899) {
  if ((HEAP32[918925] | 0) >>> 0 >= 18868) {
   $24181 = HEAP32[918924] | 0;
   if (($24181 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3971 = 3675696;
    $$lcssa8$i$i3970 = $24181;
    label = 3900;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 18868) {
   $24186 = HEAP32[918930] | 0;
   if (($24186 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3971 = 3675720;
    $$lcssa8$i$i3970 = $24186;
    label = 3900;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 18868) {
   $24191 = HEAP32[918936] | 0;
   if (($24191 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3971 = 3675744;
    $$lcssa8$i$i3970 = $24191;
    label = 3900;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 18868) {
   $24196 = HEAP32[918942] | 0;
   if (($24196 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3971 = 3675768;
    $$lcssa8$i$i3970 = $24196;
    label = 3900;
    break;
   }
  }
  $$3$i$i3972 = __Znwj(18868) | 0;
 } while (0);
 if ((label | 0) == 3900) {
  $24179 = $$lcssa8$i$i3970 + -4 | 0;
  HEAP32[$$lcssa$i$i3971 >> 2] = $24179;
  $$3$i$i3972 = HEAP32[$24179 >> 2] | 0;
 }
 $24200 = $$3$i$i3972 + 52 | 0;
 HEAP16[$$3$i$i3972 >> 1] = 784;
 HEAP16[$$3$i$i3972 + 2 >> 1] = 12;
 HEAP8[$$3$i$i3972 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3972 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3972 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3972 + 12 >> 2] = 18816;
 HEAP32[$$3$i$i3972 + 16 >> 2] = $24200;
 HEAP32[$$3$i$i3972 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3972 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3972 + 48 >> 0] = 0;
 HEAP32[$1817 >> 2] = $$3$i$i3972;
 _memcpy($24200 | 0, 2552424, 1568) | 0;
 _memcpy($$3$i$i3972 + 1620 | 0, 2553992, 1568) | 0;
 _memcpy($$3$i$i3972 + 3188 | 0, 2555560, 1568) | 0;
 _memcpy($$3$i$i3972 + 4756 | 0, 2557128, 1568) | 0;
 _memcpy($$3$i$i3972 + 6324 | 0, 2558696, 1568) | 0;
 _memcpy($$3$i$i3972 + 7892 | 0, 2560264, 1568) | 0;
 _memcpy($$3$i$i3972 + 9460 | 0, 2561832, 1568) | 0;
 _memcpy($$3$i$i3972 + 11028 | 0, 2563400, 1568) | 0;
 _memcpy($$3$i$i3972 + 12596 | 0, 2564968, 1568) | 0;
 _memcpy($$3$i$i3972 + 14164 | 0, 2566536, 1568) | 0;
 _memcpy($$3$i$i3972 + 15732 | 0, 2568104, 1568) | 0;
 _memcpy($$3$i$i3972 + 17300 | 0, 2569672, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1817);
 if ($$3$i$i3972 | 0) {
  $24222 = $$3$i$i3972 + 5 | 0;
  $24224 = (HEAP8[$24222 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24222 >> 0] = $24224;
  if (!($24224 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3972);
  HEAP32[$1817 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 663;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 666;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6324) label = 3915; else {
  $24231 = HEAP32[918918] | 0;
  if (($24231 | 0) == (HEAP32[918916] | 0)) label = 3915; else {
   $$lcssa$i$i3959 = 3675672;
   $$lcssa8$i$i3958 = $24231;
   label = 3916;
  }
 }
 do if ((label | 0) == 3915) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6324) {
   $24238 = HEAP32[918924] | 0;
   if (($24238 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3959 = 3675696;
    $$lcssa8$i$i3958 = $24238;
    label = 3916;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6324) {
   $24243 = HEAP32[918930] | 0;
   if (($24243 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3959 = 3675720;
    $$lcssa8$i$i3958 = $24243;
    label = 3916;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6324) {
   $24248 = HEAP32[918936] | 0;
   if (($24248 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3959 = 3675744;
    $$lcssa8$i$i3958 = $24248;
    label = 3916;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6324) {
   $24253 = HEAP32[918942] | 0;
   if (($24253 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3959 = 3675768;
    $$lcssa8$i$i3958 = $24253;
    label = 3916;
    break;
   }
  }
  $$3$i$i3960 = __Znwj(6324) | 0;
 } while (0);
 if ((label | 0) == 3916) {
  $24236 = $$lcssa8$i$i3958 + -4 | 0;
  HEAP32[$$lcssa$i$i3959 >> 2] = $24236;
  $$3$i$i3960 = HEAP32[$24236 >> 2] | 0;
 }
 $24257 = $$3$i$i3960 + 52 | 0;
 HEAP16[$$3$i$i3960 >> 1] = 784;
 HEAP16[$$3$i$i3960 + 2 >> 1] = 4;
 HEAP8[$$3$i$i3960 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3960 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3960 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3960 + 12 >> 2] = 6272;
 HEAP32[$$3$i$i3960 + 16 >> 2] = $24257;
 HEAP32[$$3$i$i3960 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3960 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3960 + 48 >> 0] = 0;
 HEAP32[$1818 >> 2] = $$3$i$i3960;
 _memcpy($24257 | 0, 2571240, 1568) | 0;
 _memcpy($$3$i$i3960 + 1620 | 0, 2572808, 1568) | 0;
 _memcpy($$3$i$i3960 + 3188 | 0, 2574376, 1568) | 0;
 _memcpy($$3$i$i3960 + 4756 | 0, 2575944, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1818);
 if ($$3$i$i3960 | 0) {
  $24271 = $$3$i$i3960 + 5 | 0;
  $24273 = (HEAP8[$24271 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24271 >> 0] = $24273;
  if (!($24273 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3960);
  HEAP32[$1818 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 991;
 HEAP16[$bitmapData + 2 >> 1] = 635;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 650;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 180) label = 3931; else {
  $24280 = HEAP32[918918] | 0;
  if (($24280 | 0) == (HEAP32[918916] | 0)) label = 3931; else {
   $$lcssa$i$i3947 = 3675672;
   $$lcssa8$i$i3946 = $24280;
   label = 3932;
  }
 }
 do if ((label | 0) == 3931) {
  if ((HEAP32[918925] | 0) >>> 0 >= 180) {
   $24287 = HEAP32[918924] | 0;
   if (($24287 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3947 = 3675696;
    $$lcssa8$i$i3946 = $24287;
    label = 3932;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 180) {
   $24292 = HEAP32[918930] | 0;
   if (($24292 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3947 = 3675720;
    $$lcssa8$i$i3946 = $24292;
    label = 3932;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 180) {
   $24297 = HEAP32[918936] | 0;
   if (($24297 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3947 = 3675744;
    $$lcssa8$i$i3946 = $24297;
    label = 3932;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 180) {
   $24302 = HEAP32[918942] | 0;
   if (($24302 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3947 = 3675768;
    $$lcssa8$i$i3946 = $24302;
    label = 3932;
    break;
   }
  }
  $$3$i$i3948 = __Znwj(180) | 0;
 } while (0);
 if ((label | 0) == 3932) {
  $24285 = $$lcssa8$i$i3946 + -4 | 0;
  HEAP32[$$lcssa$i$i3947 >> 2] = $24285;
  $$3$i$i3948 = HEAP32[$24285 >> 2] | 0;
 }
 $24306 = $$3$i$i3948 + 52 | 0;
 HEAP16[$$3$i$i3948 >> 1] = 4;
 HEAP16[$$3$i$i3948 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3948 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3948 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3948 + 8 >> 2] = 8;
 HEAP32[$$3$i$i3948 + 12 >> 2] = 128;
 HEAP32[$$3$i$i3948 + 16 >> 2] = $24306;
 HEAP32[$$3$i$i3948 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3948 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3948 + 48 >> 0] = 0;
 HEAP32[$1819 >> 2] = $$3$i$i3948;
 $24316 = $24306;
 $24317 = $24316;
 HEAP8[$24317 >> 0] = -419701030;
 HEAP8[$24317 + 1 >> 0] = -419701030 >> 8;
 HEAP8[$24317 + 2 >> 0] = -419701030 >> 16;
 HEAP8[$24317 + 3 >> 0] = -419701030 >> 24;
 $24319 = $24316 + 4 | 0;
 HEAP8[$24319 >> 0] = -419698982;
 HEAP8[$24319 + 1 >> 0] = -419698982 >> 8;
 HEAP8[$24319 + 2 >> 0] = -419698982 >> 16;
 HEAP8[$24319 + 3 >> 0] = -419698982 >> 24;
 $24321 = $$3$i$i3948 + 60 | 0;
 $24322 = $24321;
 HEAP8[$24322 >> 0] = -419764485;
 HEAP8[$24322 + 1 >> 0] = -419764485 >> 8;
 HEAP8[$24322 + 2 >> 0] = -419764485 >> 16;
 HEAP8[$24322 + 3 >> 0] = -419764485 >> 24;
 $24324 = $24321 + 4 | 0;
 HEAP8[$24324 >> 0] = -553982213;
 HEAP8[$24324 + 1 >> 0] = -553982213 >> 8;
 HEAP8[$24324 + 2 >> 0] = -553982213 >> 16;
 HEAP8[$24324 + 3 >> 0] = -553982213 >> 24;
 $24326 = $$3$i$i3948 + 68 | 0;
 $24327 = $24326;
 HEAP8[$24327 >> 0] = -417601797;
 HEAP8[$24327 + 1 >> 0] = -417601797 >> 8;
 HEAP8[$24327 + 2 >> 0] = -417601797 >> 16;
 HEAP8[$24327 + 3 >> 0] = -417601797 >> 24;
 $24329 = $24326 + 4 | 0;
 HEAP8[$24329 >> 0] = -417601797;
 HEAP8[$24329 + 1 >> 0] = -417601797 >> 8;
 HEAP8[$24329 + 2 >> 0] = -417601797 >> 16;
 HEAP8[$24329 + 3 >> 0] = -417601797 >> 24;
 $24331 = $$3$i$i3948 + 76 | 0;
 $24332 = $24331;
 HEAP8[$24332 >> 0] = -417601765;
 HEAP8[$24332 + 1 >> 0] = -417601765 >> 8;
 HEAP8[$24332 + 2 >> 0] = -417601765 >> 16;
 HEAP8[$24332 + 3 >> 0] = -417601765 >> 24;
 $24334 = $24331 + 4 | 0;
 HEAP8[$24334 >> 0] = -417601765;
 HEAP8[$24334 + 1 >> 0] = -417601765 >> 8;
 HEAP8[$24334 + 2 >> 0] = -417601765 >> 16;
 HEAP8[$24334 + 3 >> 0] = -417601765 >> 24;
 $24336 = $$3$i$i3948 + 84 | 0;
 $24337 = $24336;
 HEAP8[$24337 >> 0] = -281221349;
 HEAP8[$24337 + 1 >> 0] = -281221349 >> 8;
 HEAP8[$24337 + 2 >> 0] = -281221349 >> 16;
 HEAP8[$24337 + 3 >> 0] = -281221349 >> 24;
 $24339 = $24336 + 4 | 0;
 HEAP8[$24339 >> 0] = -281221348;
 HEAP8[$24339 + 1 >> 0] = -281221348 >> 8;
 HEAP8[$24339 + 2 >> 0] = -281221348 >> 16;
 HEAP8[$24339 + 3 >> 0] = -281221348 >> 24;
 $24341 = $$3$i$i3948 + 92 | 0;
 $24342 = $24341;
 HEAP8[$24342 >> 0] = -415436996;
 HEAP8[$24342 + 1 >> 0] = -415436996 >> 8;
 HEAP8[$24342 + 2 >> 0] = -415436996 >> 16;
 HEAP8[$24342 + 3 >> 0] = -415436996 >> 24;
 $24344 = $24341 + 4 | 0;
 HEAP8[$24344 >> 0] = -415502532;
 HEAP8[$24344 + 1 >> 0] = -415502532 >> 8;
 HEAP8[$24344 + 2 >> 0] = -415502532 >> 16;
 HEAP8[$24344 + 3 >> 0] = -415502532 >> 24;
 $24346 = $$3$i$i3948 + 100 | 0;
 $24347 = $24346;
 HEAP8[$24347 >> 0] = -279122116;
 HEAP8[$24347 + 1 >> 0] = -279122116 >> 8;
 HEAP8[$24347 + 2 >> 0] = -279122116 >> 16;
 HEAP8[$24347 + 3 >> 0] = -279122116 >> 24;
 $24349 = $24346 + 4 | 0;
 HEAP8[$24349 >> 0] = -279056580;
 HEAP8[$24349 + 1 >> 0] = -279056580 >> 8;
 HEAP8[$24349 + 2 >> 0] = -279056580 >> 16;
 HEAP8[$24349 + 3 >> 0] = -279056580 >> 24;
 $24351 = $$3$i$i3948 + 108 | 0;
 $24352 = $24351;
 HEAP8[$24352 >> 0] = -279122083;
 HEAP8[$24352 + 1 >> 0] = -279122083 >> 8;
 HEAP8[$24352 + 2 >> 0] = -279122083 >> 16;
 HEAP8[$24352 + 3 >> 0] = -279122083 >> 24;
 $24354 = $24351 + 4 | 0;
 HEAP8[$24354 >> 0] = -279122083;
 HEAP8[$24354 + 1 >> 0] = -279122083 >> 8;
 HEAP8[$24354 + 2 >> 0] = -279122083 >> 16;
 HEAP8[$24354 + 3 >> 0] = -279122083 >> 24;
 $24356 = $$3$i$i3948 + 116 | 0;
 $24357 = $24356;
 HEAP8[$24357 >> 0] = -142741667;
 HEAP8[$24357 + 1 >> 0] = -142741667 >> 8;
 HEAP8[$24357 + 2 >> 0] = -142741667 >> 16;
 HEAP8[$24357 + 3 >> 0] = -142741667 >> 24;
 $24359 = $24356 + 4 | 0;
 HEAP8[$24359 >> 0] = -142741667;
 HEAP8[$24359 + 1 >> 0] = -142741667 >> 8;
 HEAP8[$24359 + 2 >> 0] = -142741667 >> 16;
 HEAP8[$24359 + 3 >> 0] = -142741667 >> 24;
 $24361 = $$3$i$i3948 + 124 | 0;
 $24362 = $24361;
 HEAP8[$24362 >> 0] = -279054467;
 HEAP8[$24362 + 1 >> 0] = -279054467 >> 8;
 HEAP8[$24362 + 2 >> 0] = -279054467 >> 16;
 HEAP8[$24362 + 3 >> 0] = -279054467 >> 24;
 $24364 = $24361 + 4 | 0;
 HEAP8[$24364 >> 0] = -279054467;
 HEAP8[$24364 + 1 >> 0] = -279054467 >> 8;
 HEAP8[$24364 + 2 >> 0] = -279054467 >> 16;
 HEAP8[$24364 + 3 >> 0] = -279054467 >> 24;
 $24366 = $$3$i$i3948 + 132 | 0;
 $24367 = $24366;
 HEAP8[$24367 >> 0] = -140576899;
 HEAP8[$24367 + 1 >> 0] = -140576899 >> 8;
 HEAP8[$24367 + 2 >> 0] = -140576899 >> 16;
 HEAP8[$24367 + 3 >> 0] = -140576899 >> 24;
 $24369 = $24366 + 4 | 0;
 HEAP8[$24369 >> 0] = -140576899;
 HEAP8[$24369 + 1 >> 0] = -140576899 >> 8;
 HEAP8[$24369 + 2 >> 0] = -140576899 >> 16;
 HEAP8[$24369 + 3 >> 0] = -140576899 >> 24;
 $24371 = $$3$i$i3948 + 140 | 0;
 $24372 = $24371;
 HEAP8[$24372 >> 0] = -142739554;
 HEAP8[$24372 + 1 >> 0] = -142739554 >> 8;
 HEAP8[$24372 + 2 >> 0] = -142739554 >> 16;
 HEAP8[$24372 + 3 >> 0] = -142739554 >> 24;
 $24374 = $24371 + 4 | 0;
 HEAP8[$24374 >> 0] = -142739554;
 HEAP8[$24374 + 1 >> 0] = -142739554 >> 8;
 HEAP8[$24374 + 2 >> 0] = -142739554 >> 16;
 HEAP8[$24374 + 3 >> 0] = -142739554 >> 24;
 $24376 = $$3$i$i3948 + 148 | 0;
 $24377 = $24376;
 HEAP8[$24377 >> 0] = -4261986;
 HEAP8[$24377 + 1 >> 0] = -4261986 >> 8;
 HEAP8[$24377 + 2 >> 0] = -4261986 >> 16;
 HEAP8[$24377 + 3 >> 0] = -4261986 >> 24;
 $24379 = $24376 + 4 | 0;
 HEAP8[$24379 >> 0] = -4261986;
 HEAP8[$24379 + 1 >> 0] = -4261986 >> 8;
 HEAP8[$24379 + 2 >> 0] = -4261986 >> 16;
 HEAP8[$24379 + 3 >> 0] = -4261986 >> 24;
 $24381 = $$3$i$i3948 + 156 | 0;
 $24382 = $24381;
 HEAP8[$24382 >> 0] = -140574786;
 HEAP8[$24382 + 1 >> 0] = -140574786 >> 8;
 HEAP8[$24382 + 2 >> 0] = -140574786 >> 16;
 HEAP8[$24382 + 3 >> 0] = -140574786 >> 24;
 $24384 = $24381 + 4 | 0;
 HEAP8[$24384 >> 0] = -140574786;
 HEAP8[$24384 + 1 >> 0] = -140574786 >> 8;
 HEAP8[$24384 + 2 >> 0] = -140574786 >> 16;
 HEAP8[$24384 + 3 >> 0] = -140574786 >> 24;
 $24386 = $$3$i$i3948 + 164 | 0;
 $24387 = $24386;
 HEAP8[$24387 >> 0] = -2097218;
 HEAP8[$24387 + 1 >> 0] = -2097218 >> 8;
 HEAP8[$24387 + 2 >> 0] = -2097218 >> 16;
 HEAP8[$24387 + 3 >> 0] = -2097218 >> 24;
 $24389 = $24386 + 4 | 0;
 HEAP8[$24389 >> 0] = -2097218;
 HEAP8[$24389 + 1 >> 0] = -2097218 >> 8;
 HEAP8[$24389 + 2 >> 0] = -2097218 >> 16;
 HEAP8[$24389 + 3 >> 0] = -2097218 >> 24;
 $24391 = $$3$i$i3948 + 172 | 0;
 $24392 = $24391;
 HEAP8[$24392 >> 0] = -4259873;
 HEAP8[$24392 + 1 >> 0] = -4259873 >> 8;
 HEAP8[$24392 + 2 >> 0] = -4259873 >> 16;
 HEAP8[$24392 + 3 >> 0] = -4259873 >> 24;
 $24394 = $24391 + 4 | 0;
 HEAP8[$24394 >> 0] = -4259873;
 HEAP8[$24394 + 1 >> 0] = -4259873 >> 8;
 HEAP8[$24394 + 2 >> 0] = -4259873 >> 16;
 HEAP8[$24394 + 3 >> 0] = -4259873 >> 24;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1819);
 if ($$3$i$i3948 | 0) {
  $24396 = $$3$i$i3948 + 5 | 0;
  $24398 = (HEAP8[$24396 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24396 >> 0] = $24398;
  if (!($24398 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3948);
  HEAP32[$1819 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 631;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 634;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6324) label = 3947; else {
  $24405 = HEAP32[918918] | 0;
  if (($24405 | 0) == (HEAP32[918916] | 0)) label = 3947; else {
   $$lcssa$i$i3935 = 3675672;
   $$lcssa8$i$i3934 = $24405;
   label = 3948;
  }
 }
 do if ((label | 0) == 3947) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6324) {
   $24412 = HEAP32[918924] | 0;
   if (($24412 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3935 = 3675696;
    $$lcssa8$i$i3934 = $24412;
    label = 3948;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6324) {
   $24417 = HEAP32[918930] | 0;
   if (($24417 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3935 = 3675720;
    $$lcssa8$i$i3934 = $24417;
    label = 3948;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6324) {
   $24422 = HEAP32[918936] | 0;
   if (($24422 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3935 = 3675744;
    $$lcssa8$i$i3934 = $24422;
    label = 3948;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6324) {
   $24427 = HEAP32[918942] | 0;
   if (($24427 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3935 = 3675768;
    $$lcssa8$i$i3934 = $24427;
    label = 3948;
    break;
   }
  }
  $$3$i$i3936 = __Znwj(6324) | 0;
 } while (0);
 if ((label | 0) == 3948) {
  $24410 = $$lcssa8$i$i3934 + -4 | 0;
  HEAP32[$$lcssa$i$i3935 >> 2] = $24410;
  $$3$i$i3936 = HEAP32[$24410 >> 2] | 0;
 }
 $24431 = $$3$i$i3936 + 52 | 0;
 HEAP16[$$3$i$i3936 >> 1] = 784;
 HEAP16[$$3$i$i3936 + 2 >> 1] = 4;
 HEAP8[$$3$i$i3936 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3936 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3936 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3936 + 12 >> 2] = 6272;
 HEAP32[$$3$i$i3936 + 16 >> 2] = $24431;
 HEAP32[$$3$i$i3936 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3936 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3936 + 48 >> 0] = 0;
 HEAP32[$1820 >> 2] = $$3$i$i3936;
 _memcpy($24431 | 0, 2577512, 1568) | 0;
 _memcpy($$3$i$i3936 + 1620 | 0, 2579080, 1568) | 0;
 _memcpy($$3$i$i3936 + 3188 | 0, 2580648, 1568) | 0;
 _memcpy($$3$i$i3936 + 4756 | 0, 2582216, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1820);
 if ($$3$i$i3936 | 0) {
  $24445 = $$3$i$i3936 + 5 | 0;
  $24447 = (HEAP8[$24445 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24445 >> 0] = $24447;
  if (!($24447 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3936);
  HEAP32[$1820 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 667;
 HEAP16[$bitmapData + 4 >> 1] = 887;
 HEAP16[$bitmapData + 6 >> 1] = 679;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 17628) label = 3963; else {
  $24454 = HEAP32[918918] | 0;
  if (($24454 | 0) == (HEAP32[918916] | 0)) label = 3963; else {
   $$lcssa$i$i3923 = 3675672;
   $$lcssa8$i$i3922 = $24454;
   label = 3964;
  }
 }
 do if ((label | 0) == 3963) {
  if ((HEAP32[918925] | 0) >>> 0 >= 17628) {
   $24461 = HEAP32[918924] | 0;
   if (($24461 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3923 = 3675696;
    $$lcssa8$i$i3922 = $24461;
    label = 3964;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 17628) {
   $24466 = HEAP32[918930] | 0;
   if (($24466 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3923 = 3675720;
    $$lcssa8$i$i3922 = $24466;
    label = 3964;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 17628) {
   $24471 = HEAP32[918936] | 0;
   if (($24471 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3923 = 3675744;
    $$lcssa8$i$i3922 = $24471;
    label = 3964;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 17628) {
   $24476 = HEAP32[918942] | 0;
   if (($24476 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3923 = 3675768;
    $$lcssa8$i$i3922 = $24476;
    label = 3964;
    break;
   }
  }
  $$3$i$i3924 = __Znwj(17628) | 0;
 } while (0);
 if ((label | 0) == 3964) {
  $24459 = $$lcssa8$i$i3922 + -4 | 0;
  HEAP32[$$lcssa$i$i3923 >> 2] = $24459;
  $$3$i$i3924 = HEAP32[$24459 >> 2] | 0;
 }
 $24480 = $$3$i$i3924 + 52 | 0;
 HEAP16[$$3$i$i3924 >> 1] = 676;
 HEAP16[$$3$i$i3924 + 2 >> 1] = 13;
 HEAP8[$$3$i$i3924 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3924 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3924 + 8 >> 2] = 1352;
 HEAP32[$$3$i$i3924 + 12 >> 2] = 17576;
 HEAP32[$$3$i$i3924 + 16 >> 2] = $24480;
 HEAP32[$$3$i$i3924 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3924 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3924 + 48 >> 0] = 0;
 HEAP32[$1821 >> 2] = $$3$i$i3924;
 _memcpy($24480 | 0, 2583784, 1352) | 0;
 _memcpy($$3$i$i3924 + 1404 | 0, 2585136, 1352) | 0;
 _memcpy($$3$i$i3924 + 2756 | 0, 2586488, 1352) | 0;
 _memcpy($$3$i$i3924 + 4108 | 0, 2587840, 1352) | 0;
 _memcpy($$3$i$i3924 + 5460 | 0, 2589192, 1352) | 0;
 _memcpy($$3$i$i3924 + 6812 | 0, 2590544, 1352) | 0;
 _memcpy($$3$i$i3924 + 8164 | 0, 2591896, 1352) | 0;
 _memcpy($$3$i$i3924 + 9516 | 0, 2593248, 1352) | 0;
 _memcpy($$3$i$i3924 + 10868 | 0, 2594600, 1352) | 0;
 _memcpy($$3$i$i3924 + 12220 | 0, 2595952, 1352) | 0;
 _memcpy($$3$i$i3924 + 13572 | 0, 2597304, 1352) | 0;
 _memcpy($$3$i$i3924 + 14924 | 0, 2598656, 1352) | 0;
 _memcpy($$3$i$i3924 + 16276 | 0, 2600008, 1352) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1821);
 if ($$3$i$i3924 | 0) {
  $24503 = $$3$i$i3924 + 5 | 0;
  $24505 = (HEAP8[$24503 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24503 >> 0] = $24505;
  if (!($24505 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3924);
  HEAP32[$1821 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 984;
 HEAP16[$bitmapData + 2 >> 1] = 664;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 679;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1332) label = 3979; else {
  $24512 = HEAP32[918918] | 0;
  if (($24512 | 0) == (HEAP32[918916] | 0)) label = 3979; else {
   $$lcssa$i$i3911 = 3675672;
   $$lcssa8$i$i3910 = $24512;
   label = 3980;
  }
 }
 do if ((label | 0) == 3979) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1332) {
   $24519 = HEAP32[918924] | 0;
   if (($24519 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3911 = 3675696;
    $$lcssa8$i$i3910 = $24519;
    label = 3980;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1332) {
   $24524 = HEAP32[918930] | 0;
   if (($24524 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3911 = 3675720;
    $$lcssa8$i$i3910 = $24524;
    label = 3980;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1332) {
   $24529 = HEAP32[918936] | 0;
   if (($24529 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3911 = 3675744;
    $$lcssa8$i$i3910 = $24529;
    label = 3980;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1332) {
   $24534 = HEAP32[918942] | 0;
   if (($24534 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3911 = 3675768;
    $$lcssa8$i$i3910 = $24534;
    label = 3980;
    break;
   }
  }
  $$3$i$i3912 = __Znwj(1332) | 0;
 } while (0);
 if ((label | 0) == 3980) {
  $24517 = $$lcssa8$i$i3910 + -4 | 0;
  HEAP32[$$lcssa$i$i3911 >> 2] = $24517;
  $$3$i$i3912 = HEAP32[$24517 >> 2] | 0;
 }
 $24538 = $$3$i$i3912 + 52 | 0;
 HEAP16[$$3$i$i3912 >> 1] = 40;
 HEAP16[$$3$i$i3912 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3912 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3912 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3912 + 8 >> 2] = 80;
 HEAP32[$$3$i$i3912 + 12 >> 2] = 1280;
 HEAP32[$$3$i$i3912 + 16 >> 2] = $24538;
 HEAP32[$$3$i$i3912 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3912 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3912 + 48 >> 0] = 0;
 HEAP32[$1822 >> 2] = $$3$i$i3912;
 dest = $24538;
 src = 2601360;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 132 | 0;
 src = 2601440;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 212 | 0;
 src = 2601520;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 292 | 0;
 src = 2601600;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 372 | 0;
 src = 2601680;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 452 | 0;
 src = 2601760;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 532 | 0;
 src = 2601840;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 612 | 0;
 src = 2601920;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 692 | 0;
 src = 2602e3;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 772 | 0;
 src = 2602080;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 852 | 0;
 src = 2602160;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 932 | 0;
 src = 2602240;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 1012 | 0;
 src = 2602320;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 1092 | 0;
 src = 2602400;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 1172 | 0;
 src = 2602480;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3912 + 1252 | 0;
 src = 2602560;
 stop = dest + 80 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1822);
 if ($$3$i$i3912 | 0) {
  $24564 = $$3$i$i3912 + 5 | 0;
  $24566 = (HEAP8[$24564 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24564 >> 0] = $24566;
  if (!($24566 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3912);
  HEAP32[$1822 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 998;
 HEAP16[$bitmapData + 2 >> 1] = 209;
 HEAP16[$bitmapData + 4 >> 1] = 1013;
 HEAP16[$bitmapData + 6 >> 1] = 224;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 564) label = 3995; else {
  $24573 = HEAP32[918918] | 0;
  if (($24573 | 0) == (HEAP32[918916] | 0)) label = 3995; else {
   $$lcssa$i$i3899 = 3675672;
   $$lcssa8$i$i3898 = $24573;
   label = 3996;
  }
 }
 do if ((label | 0) == 3995) {
  if ((HEAP32[918925] | 0) >>> 0 >= 564) {
   $24580 = HEAP32[918924] | 0;
   if (($24580 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3899 = 3675696;
    $$lcssa8$i$i3898 = $24580;
    label = 3996;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 564) {
   $24585 = HEAP32[918930] | 0;
   if (($24585 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3899 = 3675720;
    $$lcssa8$i$i3898 = $24585;
    label = 3996;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 564) {
   $24590 = HEAP32[918936] | 0;
   if (($24590 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3899 = 3675744;
    $$lcssa8$i$i3898 = $24590;
    label = 3996;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 564) {
   $24595 = HEAP32[918942] | 0;
   if (($24595 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3899 = 3675768;
    $$lcssa8$i$i3898 = $24595;
    label = 3996;
    break;
   }
  }
  $$3$i$i3900 = __Znwj(564) | 0;
 } while (0);
 if ((label | 0) == 3996) {
  $24578 = $$lcssa8$i$i3898 + -4 | 0;
  HEAP32[$$lcssa$i$i3899 >> 2] = $24578;
  $$3$i$i3900 = HEAP32[$24578 >> 2] | 0;
 }
 $24599 = $$3$i$i3900 + 52 | 0;
 HEAP16[$$3$i$i3900 >> 1] = 16;
 HEAP16[$$3$i$i3900 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3900 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3900 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3900 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3900 + 12 >> 2] = 512;
 HEAP32[$$3$i$i3900 + 16 >> 2] = $24599;
 HEAP32[$$3$i$i3900 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3900 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3900 + 48 >> 0] = 0;
 HEAP32[$1823 >> 2] = $$3$i$i3900;
 dest = $24599;
 src = 2602640;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 84 | 0;
 src = 2602672;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 116 | 0;
 src = 2602704;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 148 | 0;
 src = 2602736;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 180 | 0;
 src = 2602768;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 212 | 0;
 src = 2602800;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 244 | 0;
 src = 2602832;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 276 | 0;
 src = 2602864;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 308 | 0;
 src = 2602896;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 340 | 0;
 src = 2602928;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 372 | 0;
 src = 2602960;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 404 | 0;
 src = 2602992;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 436 | 0;
 src = 2603024;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 468 | 0;
 src = 2603056;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 500 | 0;
 src = 2603088;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3900 + 532 | 0;
 src = 2603120;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1823);
 if ($$3$i$i3900 | 0) {
  $24625 = $$3$i$i3900 + 5 | 0;
  $24627 = (HEAP8[$24625 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24625 >> 0] = $24627;
  if (!($24627 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3900);
  HEAP32[$1823 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 998;
 HEAP16[$bitmapData + 2 >> 1] = 161;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 176;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 820) label = 4011; else {
  $24634 = HEAP32[918918] | 0;
  if (($24634 | 0) == (HEAP32[918916] | 0)) label = 4011; else {
   $$lcssa$i$i3887 = 3675672;
   $$lcssa8$i$i3886 = $24634;
   label = 4012;
  }
 }
 do if ((label | 0) == 4011) {
  if ((HEAP32[918925] | 0) >>> 0 >= 820) {
   $24641 = HEAP32[918924] | 0;
   if (($24641 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3887 = 3675696;
    $$lcssa8$i$i3886 = $24641;
    label = 4012;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 820) {
   $24646 = HEAP32[918930] | 0;
   if (($24646 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3887 = 3675720;
    $$lcssa8$i$i3886 = $24646;
    label = 4012;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 820) {
   $24651 = HEAP32[918936] | 0;
   if (($24651 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3887 = 3675744;
    $$lcssa8$i$i3886 = $24651;
    label = 4012;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 820) {
   $24656 = HEAP32[918942] | 0;
   if (($24656 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3887 = 3675768;
    $$lcssa8$i$i3886 = $24656;
    label = 4012;
    break;
   }
  }
  $$3$i$i3888 = __Znwj(820) | 0;
 } while (0);
 if ((label | 0) == 4012) {
  $24639 = $$lcssa8$i$i3886 + -4 | 0;
  HEAP32[$$lcssa$i$i3887 >> 2] = $24639;
  $$3$i$i3888 = HEAP32[$24639 >> 2] | 0;
 }
 $24660 = $$3$i$i3888 + 52 | 0;
 HEAP16[$$3$i$i3888 >> 1] = 24;
 HEAP16[$$3$i$i3888 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3888 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3888 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3888 + 8 >> 2] = 48;
 HEAP32[$$3$i$i3888 + 12 >> 2] = 768;
 HEAP32[$$3$i$i3888 + 16 >> 2] = $24660;
 HEAP32[$$3$i$i3888 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3888 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3888 + 48 >> 0] = 0;
 HEAP32[$1824 >> 2] = $$3$i$i3888;
 dest = $24660;
 src = 2603152;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 100 | 0;
 src = 2603200;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 148 | 0;
 src = 2603248;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 196 | 0;
 src = 2603296;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 244 | 0;
 src = 2603344;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 292 | 0;
 src = 2603392;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 340 | 0;
 src = 2603440;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 388 | 0;
 src = 2603488;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 436 | 0;
 src = 2603536;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 484 | 0;
 src = 2603584;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 532 | 0;
 src = 2603632;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 580 | 0;
 src = 2603680;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 628 | 0;
 src = 2603728;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 676 | 0;
 src = 2603776;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 724 | 0;
 src = 2603824;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3888 + 772 | 0;
 src = 2603872;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $1824);
 if ($$3$i$i3888 | 0) {
  $24686 = $$3$i$i3888 + 5 | 0;
  $24688 = (HEAP8[$24686 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$24686 >> 0] = $24688;
  if (!($24688 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3888);
  HEAP32[$1824 >> 2] = 0;
 }
 $24690 = $1825;
 HEAP32[$24690 >> 2] = 11535111;
 HEAP32[$24690 + 4 >> 2] = 1048792;
 HEAP32[$1825 + 8 >> 2] = 54938;
 HEAP16[$1826 >> 1] = 775;
 HEAP16[$1826 + 2 >> 1] = 176;
 HEAP16[$1826 + 4 >> 1] = 1;
 HEAP16[$1826 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1825, $1826);
 $24698 = $1827;
 HEAP32[$24698 >> 2] = 11535111;
 HEAP32[$24698 + 4 >> 2] = 1048792;
 HEAP32[$1827 + 8 >> 2] = 54938;
 HEAP16[$1828 >> 1] = 792;
 HEAP16[$1828 + 2 >> 1] = 176;
 HEAP16[$1828 + 4 >> 1] = 199;
 HEAP16[$1828 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1827, $1828);
 $24706 = $1829;
 HEAP32[$24706 >> 2] = 11535111;
 HEAP32[$24706 + 4 >> 2] = 1048792;
 HEAP32[$1829 + 8 >> 2] = 54938;
 HEAP16[$1830 >> 1] = 775;
 HEAP16[$1830 + 2 >> 1] = 178;
 HEAP16[$1830 + 4 >> 1] = 1;
 HEAP16[$1830 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1829, $1830);
 $24714 = $1831;
 HEAP32[$24714 >> 2] = 11535111;
 HEAP32[$24714 + 4 >> 2] = 1048792;
 HEAP32[$1831 + 8 >> 2] = 54938;
 HEAP16[$1832 >> 1] = 792;
 HEAP16[$1832 + 2 >> 1] = 178;
 HEAP16[$1832 + 4 >> 1] = 3;
 HEAP16[$1832 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1831, $1832);
 $24722 = $1833;
 HEAP32[$24722 >> 2] = 11535111;
 HEAP32[$24722 + 4 >> 2] = 1048792;
 HEAP32[$1833 + 8 >> 2] = 54938;
 HEAP16[$1834 >> 1] = 960;
 HEAP16[$1834 + 2 >> 1] = 178;
 HEAP16[$1834 + 4 >> 1] = 31;
 HEAP16[$1834 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1833, $1834);
 $24730 = $1835;
 HEAP32[$24730 >> 2] = 11535111;
 HEAP32[$24730 + 4 >> 2] = 1048792;
 HEAP32[$1835 + 8 >> 2] = 54938;
 HEAP16[$1836 >> 1] = 775;
 HEAP16[$1836 + 2 >> 1] = 191;
 HEAP16[$1836 + 4 >> 1] = 1;
 HEAP16[$1836 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1835, $1836);
 $24738 = $1837;
 HEAP32[$24738 >> 2] = 11535111;
 HEAP32[$24738 + 4 >> 2] = 1048792;
 HEAP32[$1837 + 8 >> 2] = 54938;
 HEAP16[$1838 >> 1] = 792;
 HEAP16[$1838 + 2 >> 1] = 191;
 HEAP16[$1838 + 4 >> 1] = 199;
 HEAP16[$1838 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1837, $1838);
 $24746 = $1839;
 HEAP32[$24746 >> 2] = 11535111;
 HEAP32[$24746 + 4 >> 2] = 65752;
 HEAP32[$1839 + 8 >> 2] = 65470;
 HEAP16[$1840 >> 1] = 775;
 HEAP16[$1840 + 2 >> 1] = 176;
 HEAP16[$1840 + 4 >> 1] = 1;
 HEAP16[$1840 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1839, $1840);
 $24754 = $1841;
 HEAP32[$24754 >> 2] = 11535111;
 HEAP32[$24754 + 4 >> 2] = 65752;
 HEAP32[$1841 + 8 >> 2] = 65470;
 HEAP16[$1842 >> 1] = 792;
 HEAP16[$1842 + 2 >> 1] = 176;
 HEAP16[$1842 + 4 >> 1] = 199;
 HEAP16[$1842 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1841, $1842);
 $24762 = $1843;
 HEAP32[$24762 >> 2] = 11600647;
 HEAP32[$24762 + 4 >> 2] = 65752;
 HEAP32[$1843 + 8 >> 2] = 63422;
 HEAP16[$1844 >> 1] = 775;
 HEAP16[$1844 + 2 >> 1] = 177;
 HEAP16[$1844 + 4 >> 1] = 1;
 HEAP16[$1844 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1843, $1844);
 $24770 = $1845;
 HEAP32[$24770 >> 2] = 11600647;
 HEAP32[$24770 + 4 >> 2] = 65752;
 HEAP32[$1845 + 8 >> 2] = 63422;
 HEAP16[$1846 >> 1] = 792;
 HEAP16[$1846 + 2 >> 1] = 177;
 HEAP16[$1846 + 4 >> 1] = 199;
 HEAP16[$1846 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1845, $1846);
 $24778 = $1847;
 HEAP32[$24778 >> 2] = 11666183;
 HEAP32[$24778 + 4 >> 2] = 65752;
 HEAP32[$1847 + 8 >> 2] = 63390;
 HEAP16[$1848 >> 1] = 775;
 HEAP16[$1848 + 2 >> 1] = 178;
 HEAP16[$1848 + 4 >> 1] = 1;
 HEAP16[$1848 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1847, $1848);
 $24786 = $1849;
 HEAP32[$24786 >> 2] = 11666183;
 HEAP32[$24786 + 4 >> 2] = 65752;
 HEAP32[$1849 + 8 >> 2] = 63390;
 HEAP16[$1850 >> 1] = 792;
 HEAP16[$1850 + 2 >> 1] = 178;
 HEAP16[$1850 + 4 >> 1] = 3;
 HEAP16[$1850 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1849, $1850);
 $24794 = $1851;
 HEAP32[$24794 >> 2] = 11666183;
 HEAP32[$24794 + 4 >> 2] = 65752;
 HEAP32[$1851 + 8 >> 2] = 63390;
 HEAP16[$1852 >> 1] = 960;
 HEAP16[$1852 + 2 >> 1] = 178;
 HEAP16[$1852 + 4 >> 1] = 31;
 HEAP16[$1852 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1851, $1852);
 $24802 = $1853;
 HEAP32[$24802 >> 2] = 11731719;
 HEAP32[$24802 + 4 >> 2] = 65752;
 HEAP32[$1853 + 8 >> 2] = 63389;
 HEAP16[$1854 >> 1] = 775;
 HEAP16[$1854 + 2 >> 1] = 179;
 HEAP16[$1854 + 4 >> 1] = 1;
 HEAP16[$1854 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1853, $1854);
 $24810 = $1855;
 HEAP32[$24810 >> 2] = 11731719;
 HEAP32[$24810 + 4 >> 2] = 65752;
 HEAP32[$1855 + 8 >> 2] = 63389;
 HEAP16[$1856 >> 1] = 792;
 HEAP16[$1856 + 2 >> 1] = 179;
 HEAP16[$1856 + 4 >> 1] = 3;
 HEAP16[$1856 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1855, $1856);
 $24818 = $1857;
 HEAP32[$24818 >> 2] = 11731719;
 HEAP32[$24818 + 4 >> 2] = 65752;
 HEAP32[$1857 + 8 >> 2] = 63389;
 HEAP16[$1858 >> 1] = 960;
 HEAP16[$1858 + 2 >> 1] = 179;
 HEAP16[$1858 + 4 >> 1] = 31;
 HEAP16[$1858 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1857, $1858);
 $24826 = $1859;
 HEAP32[$24826 >> 2] = 11797255;
 HEAP32[$24826 + 4 >> 2] = 65752;
 HEAP32[$1859 + 8 >> 2] = 63357;
 HEAP16[$1860 >> 1] = 775;
 HEAP16[$1860 + 2 >> 1] = 180;
 HEAP16[$1860 + 4 >> 1] = 1;
 HEAP16[$1860 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1859, $1860);
 $24834 = $1861;
 HEAP32[$24834 >> 2] = 11797255;
 HEAP32[$24834 + 4 >> 2] = 65752;
 HEAP32[$1861 + 8 >> 2] = 63357;
 HEAP16[$1862 >> 1] = 792;
 HEAP16[$1862 + 2 >> 1] = 180;
 HEAP16[$1862 + 4 >> 1] = 3;
 HEAP16[$1862 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1861, $1862);
 $24842 = $1863;
 HEAP32[$24842 >> 2] = 11797255;
 HEAP32[$24842 + 4 >> 2] = 65752;
 HEAP32[$1863 + 8 >> 2] = 63357;
 HEAP16[$1864 >> 1] = 960;
 HEAP16[$1864 + 2 >> 1] = 180;
 HEAP16[$1864 + 4 >> 1] = 31;
 HEAP16[$1864 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1863, $1864);
 $24850 = $1865;
 HEAP32[$24850 >> 2] = 11862791;
 HEAP32[$24850 + 4 >> 2] = 65752;
 HEAP32[$1865 + 8 >> 2] = 61309;
 HEAP16[$1866 >> 1] = 775;
 HEAP16[$1866 + 2 >> 1] = 181;
 HEAP16[$1866 + 4 >> 1] = 1;
 HEAP16[$1866 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1865, $1866);
 $24858 = $1867;
 HEAP32[$24858 >> 2] = 11862791;
 HEAP32[$24858 + 4 >> 2] = 65752;
 HEAP32[$1867 + 8 >> 2] = 61309;
 HEAP16[$1868 >> 1] = 792;
 HEAP16[$1868 + 2 >> 1] = 181;
 HEAP16[$1868 + 4 >> 1] = 3;
 HEAP16[$1868 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1867, $1868);
 $24866 = $1869;
 HEAP32[$24866 >> 2] = 11862791;
 HEAP32[$24866 + 4 >> 2] = 65752;
 HEAP32[$1869 + 8 >> 2] = 61309;
 HEAP16[$1870 >> 1] = 960;
 HEAP16[$1870 + 2 >> 1] = 181;
 HEAP16[$1870 + 4 >> 1] = 31;
 HEAP16[$1870 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1869, $1870);
 $24874 = $1871;
 HEAP32[$24874 >> 2] = 11928327;
 HEAP32[$24874 + 4 >> 2] = 65752;
 HEAP32[$1871 + 8 >> 2] = 61277;
 HEAP16[$1872 >> 1] = 775;
 HEAP16[$1872 + 2 >> 1] = 182;
 HEAP16[$1872 + 4 >> 1] = 1;
 HEAP16[$1872 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1871, $1872);
 $24882 = $1873;
 HEAP32[$24882 >> 2] = 11928327;
 HEAP32[$24882 + 4 >> 2] = 65752;
 HEAP32[$1873 + 8 >> 2] = 61277;
 HEAP16[$1874 >> 1] = 792;
 HEAP16[$1874 + 2 >> 1] = 182;
 HEAP16[$1874 + 4 >> 1] = 3;
 HEAP16[$1874 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1873, $1874);
 $24890 = $1875;
 HEAP32[$24890 >> 2] = 11928327;
 HEAP32[$24890 + 4 >> 2] = 65752;
 HEAP32[$1875 + 8 >> 2] = 61277;
 HEAP16[$1876 >> 1] = 960;
 HEAP16[$1876 + 2 >> 1] = 182;
 HEAP16[$1876 + 4 >> 1] = 31;
 HEAP16[$1876 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1875, $1876);
 $24898 = $1877;
 HEAP32[$24898 >> 2] = 11993863;
 HEAP32[$24898 + 4 >> 2] = 65752;
 HEAP32[$1877 + 8 >> 2] = 61276;
 HEAP16[$1878 >> 1] = 775;
 HEAP16[$1878 + 2 >> 1] = 183;
 HEAP16[$1878 + 4 >> 1] = 1;
 HEAP16[$1878 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1877, $1878);
 $24906 = $1879;
 HEAP32[$24906 >> 2] = 11993863;
 HEAP32[$24906 + 4 >> 2] = 65752;
 HEAP32[$1879 + 8 >> 2] = 61276;
 HEAP16[$1880 >> 1] = 792;
 HEAP16[$1880 + 2 >> 1] = 183;
 HEAP16[$1880 + 4 >> 1] = 3;
 HEAP16[$1880 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1879, $1880);
 $24914 = $1881;
 HEAP32[$24914 >> 2] = 11993863;
 HEAP32[$24914 + 4 >> 2] = 65752;
 HEAP32[$1881 + 8 >> 2] = 61276;
 HEAP16[$1882 >> 1] = 960;
 HEAP16[$1882 + 2 >> 1] = 183;
 HEAP16[$1882 + 4 >> 1] = 31;
 HEAP16[$1882 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1881, $1882);
 $24922 = $1883;
 HEAP32[$24922 >> 2] = 12059399;
 HEAP32[$24922 + 4 >> 2] = 65752;
 HEAP32[$1883 + 8 >> 2] = 61276;
 HEAP16[$1884 >> 1] = 775;
 HEAP16[$1884 + 2 >> 1] = 184;
 HEAP16[$1884 + 4 >> 1] = 1;
 HEAP16[$1884 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1883, $1884);
 $24930 = $1885;
 HEAP32[$24930 >> 2] = 12059399;
 HEAP32[$24930 + 4 >> 2] = 65752;
 HEAP32[$1885 + 8 >> 2] = 61276;
 HEAP16[$1886 >> 1] = 792;
 HEAP16[$1886 + 2 >> 1] = 184;
 HEAP16[$1886 + 4 >> 1] = 3;
 HEAP16[$1886 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1885, $1886);
 $24938 = $1887;
 HEAP32[$24938 >> 2] = 12059399;
 HEAP32[$24938 + 4 >> 2] = 65752;
 HEAP32[$1887 + 8 >> 2] = 61276;
 HEAP16[$1888 >> 1] = 960;
 HEAP16[$1888 + 2 >> 1] = 184;
 HEAP16[$1888 + 4 >> 1] = 31;
 HEAP16[$1888 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1887, $1888);
 $24946 = $1889;
 HEAP32[$24946 >> 2] = 12124935;
 HEAP32[$24946 + 4 >> 2] = 65752;
 HEAP32[$1889 + 8 >> 2] = 61244;
 HEAP16[$1890 >> 1] = 775;
 HEAP16[$1890 + 2 >> 1] = 185;
 HEAP16[$1890 + 4 >> 1] = 1;
 HEAP16[$1890 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1889, $1890);
 $24954 = $1891;
 HEAP32[$24954 >> 2] = 12124935;
 HEAP32[$24954 + 4 >> 2] = 65752;
 HEAP32[$1891 + 8 >> 2] = 61244;
 HEAP16[$1892 >> 1] = 792;
 HEAP16[$1892 + 2 >> 1] = 185;
 HEAP16[$1892 + 4 >> 1] = 3;
 HEAP16[$1892 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1891, $1892);
 $24962 = $1893;
 HEAP32[$24962 >> 2] = 12124935;
 HEAP32[$24962 + 4 >> 2] = 65752;
 HEAP32[$1893 + 8 >> 2] = 61244;
 HEAP16[$1894 >> 1] = 960;
 HEAP16[$1894 + 2 >> 1] = 185;
 HEAP16[$1894 + 4 >> 1] = 31;
 HEAP16[$1894 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1893, $1894);
 $24970 = $1895;
 HEAP32[$24970 >> 2] = 12190471;
 HEAP32[$24970 + 4 >> 2] = 65752;
 HEAP32[$1895 + 8 >> 2] = 59195;
 HEAP16[$1896 >> 1] = 775;
 HEAP16[$1896 + 2 >> 1] = 186;
 HEAP16[$1896 + 4 >> 1] = 1;
 HEAP16[$1896 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1895, $1896);
 $24978 = $1897;
 HEAP32[$24978 >> 2] = 12190471;
 HEAP32[$24978 + 4 >> 2] = 65752;
 HEAP32[$1897 + 8 >> 2] = 59195;
 HEAP16[$1898 >> 1] = 792;
 HEAP16[$1898 + 2 >> 1] = 186;
 HEAP16[$1898 + 4 >> 1] = 3;
 HEAP16[$1898 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1897, $1898);
 $24986 = $1899;
 HEAP32[$24986 >> 2] = 12190471;
 HEAP32[$24986 + 4 >> 2] = 65752;
 HEAP32[$1899 + 8 >> 2] = 59195;
 HEAP16[$1900 >> 1] = 960;
 HEAP16[$1900 + 2 >> 1] = 186;
 HEAP16[$1900 + 4 >> 1] = 31;
 HEAP16[$1900 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1899, $1900);
 $24994 = $1901;
 HEAP32[$24994 >> 2] = 12256007;
 HEAP32[$24994 + 4 >> 2] = 65752;
 HEAP32[$1901 + 8 >> 2] = 59163;
 HEAP16[$1902 >> 1] = 775;
 HEAP16[$1902 + 2 >> 1] = 187;
 HEAP16[$1902 + 4 >> 1] = 1;
 HEAP16[$1902 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1901, $1902);
 $25002 = $1903;
 HEAP32[$25002 >> 2] = 12256007;
 HEAP32[$25002 + 4 >> 2] = 65752;
 HEAP32[$1903 + 8 >> 2] = 59163;
 HEAP16[$1904 >> 1] = 792;
 HEAP16[$1904 + 2 >> 1] = 187;
 HEAP16[$1904 + 4 >> 1] = 3;
 HEAP16[$1904 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1903, $1904);
 $25010 = $1905;
 HEAP32[$25010 >> 2] = 12256007;
 HEAP32[$25010 + 4 >> 2] = 65752;
 HEAP32[$1905 + 8 >> 2] = 59163;
 HEAP16[$1906 >> 1] = 960;
 HEAP16[$1906 + 2 >> 1] = 187;
 HEAP16[$1906 + 4 >> 1] = 31;
 HEAP16[$1906 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1905, $1906);
 $25018 = $1907;
 HEAP32[$25018 >> 2] = 12321543;
 HEAP32[$25018 + 4 >> 2] = 65752;
 HEAP32[$1907 + 8 >> 2] = 59163;
 HEAP16[$1908 >> 1] = 775;
 HEAP16[$1908 + 2 >> 1] = 188;
 HEAP16[$1908 + 4 >> 1] = 1;
 HEAP16[$1908 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1907, $1908);
 $25026 = $1909;
 HEAP32[$25026 >> 2] = 12321543;
 HEAP32[$25026 + 4 >> 2] = 65752;
 HEAP32[$1909 + 8 >> 2] = 59163;
 HEAP16[$1910 >> 1] = 792;
 HEAP16[$1910 + 2 >> 1] = 188;
 HEAP16[$1910 + 4 >> 1] = 3;
 HEAP16[$1910 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1909, $1910);
 $25034 = $1911;
 HEAP32[$25034 >> 2] = 12321543;
 HEAP32[$25034 + 4 >> 2] = 65752;
 HEAP32[$1911 + 8 >> 2] = 59163;
 HEAP16[$1912 >> 1] = 960;
 HEAP16[$1912 + 2 >> 1] = 188;
 HEAP16[$1912 + 4 >> 1] = 31;
 HEAP16[$1912 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1911, $1912);
 $25042 = $1913;
 HEAP32[$25042 >> 2] = 12387079;
 HEAP32[$25042 + 4 >> 2] = 65752;
 HEAP32[$1913 + 8 >> 2] = 59131;
 HEAP16[$1914 >> 1] = 775;
 HEAP16[$1914 + 2 >> 1] = 189;
 HEAP16[$1914 + 4 >> 1] = 1;
 HEAP16[$1914 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1913, $1914);
 $25050 = $1915;
 HEAP32[$25050 >> 2] = 12387079;
 HEAP32[$25050 + 4 >> 2] = 65752;
 HEAP32[$1915 + 8 >> 2] = 59131;
 HEAP16[$1916 >> 1] = 792;
 HEAP16[$1916 + 2 >> 1] = 189;
 HEAP16[$1916 + 4 >> 1] = 3;
 HEAP16[$1916 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1915, $1916);
 $25058 = $1917;
 HEAP32[$25058 >> 2] = 12387079;
 HEAP32[$25058 + 4 >> 2] = 65752;
 HEAP32[$1917 + 8 >> 2] = 59131;
 HEAP16[$1918 >> 1] = 960;
 HEAP16[$1918 + 2 >> 1] = 189;
 HEAP16[$1918 + 4 >> 1] = 31;
 HEAP16[$1918 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1917, $1918);
 $25066 = $1919;
 HEAP32[$25066 >> 2] = 12452615;
 HEAP32[$25066 + 4 >> 2] = 65752;
 HEAP32[$1919 + 8 >> 2] = 57082;
 HEAP16[$1920 >> 1] = 775;
 HEAP16[$1920 + 2 >> 1] = 190;
 HEAP16[$1920 + 4 >> 1] = 1;
 HEAP16[$1920 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1919, $1920);
 $25074 = $1921;
 HEAP32[$25074 >> 2] = 12452615;
 HEAP32[$25074 + 4 >> 2] = 65752;
 HEAP32[$1921 + 8 >> 2] = 57082;
 HEAP16[$1922 >> 1] = 792;
 HEAP16[$1922 + 2 >> 1] = 190;
 HEAP16[$1922 + 4 >> 1] = 3;
 HEAP16[$1922 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1921, $1922);
 $25082 = $1923;
 HEAP32[$25082 >> 2] = 12452615;
 HEAP32[$25082 + 4 >> 2] = 65752;
 HEAP32[$1923 + 8 >> 2] = 57082;
 HEAP16[$1924 >> 1] = 960;
 HEAP16[$1924 + 2 >> 1] = 190;
 HEAP16[$1924 + 4 >> 1] = 31;
 HEAP16[$1924 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1923, $1924);
 $25090 = $1925;
 HEAP32[$25090 >> 2] = 12518151;
 HEAP32[$25090 + 4 >> 2] = 65752;
 HEAP32[$1925 + 8 >> 2] = 57050;
 HEAP16[$1926 >> 1] = 775;
 HEAP16[$1926 + 2 >> 1] = 191;
 HEAP16[$1926 + 4 >> 1] = 1;
 HEAP16[$1926 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1925, $1926);
 $25098 = $1927;
 HEAP32[$25098 >> 2] = 12518151;
 HEAP32[$25098 + 4 >> 2] = 65752;
 HEAP32[$1927 + 8 >> 2] = 57050;
 HEAP16[$1928 >> 1] = 792;
 HEAP16[$1928 + 2 >> 1] = 191;
 HEAP16[$1928 + 4 >> 1] = 199;
 HEAP16[$1928 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1927, $1928);
 $25106 = $1929;
 HEAP32[$25106 >> 2] = 6357193;
 HEAP32[$25106 + 4 >> 2] = 4195125;
 HEAP32[$1929 + 8 >> 2] = 63422;
 HEAP16[$1930 >> 1] = 201;
 HEAP16[$1930 + 2 >> 1] = 97;
 HEAP16[$1930 + 4 >> 1] = 821;
 HEAP16[$1930 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1929, $1930);
 $25114 = $1931;
 HEAP32[$25114 >> 2] = 6357193;
 HEAP32[$25114 + 4 >> 2] = 4195125;
 HEAP32[$1931 + 8 >> 2] = 63422;
 HEAP16[$1932 >> 1] = 201;
 HEAP16[$1932 + 2 >> 1] = 105;
 HEAP16[$1932 + 4 >> 1] = 12;
 HEAP16[$1932 + 6 >> 1] = 11;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1931, $1932);
 $25122 = $1933;
 HEAP32[$25122 >> 2] = 6357193;
 HEAP32[$25122 + 4 >> 2] = 4195125;
 HEAP32[$1933 + 8 >> 2] = 63422;
 HEAP16[$1934 >> 1] = 261;
 HEAP16[$1934 + 2 >> 1] = 105;
 HEAP16[$1934 + 4 >> 1] = 761;
 HEAP16[$1934 + 6 >> 1] = 11;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1933, $1934);
 $25130 = $1935;
 HEAP32[$25130 >> 2] = 6357193;
 HEAP32[$25130 + 4 >> 2] = 4195125;
 HEAP32[$1935 + 8 >> 2] = 63422;
 HEAP16[$1936 >> 1] = 201;
 HEAP16[$1936 + 2 >> 1] = 116;
 HEAP16[$1936 + 4 >> 1] = 12;
 HEAP16[$1936 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1935, $1936);
 $25138 = $1937;
 HEAP32[$25138 >> 2] = 6357193;
 HEAP32[$25138 + 4 >> 2] = 4195125;
 HEAP32[$1937 + 8 >> 2] = 63422;
 HEAP16[$1938 >> 1] = 261;
 HEAP16[$1938 + 2 >> 1] = 116;
 HEAP16[$1938 + 4 >> 1] = 9;
 HEAP16[$1938 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1937, $1938);
 $25146 = $1939;
 HEAP32[$25146 >> 2] = 6357193;
 HEAP32[$25146 + 4 >> 2] = 4195125;
 HEAP32[$1939 + 8 >> 2] = 63422;
 HEAP16[$1940 >> 1] = 959;
 HEAP16[$1940 + 2 >> 1] = 116;
 HEAP16[$1940 + 4 >> 1] = 63;
 HEAP16[$1940 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1939, $1940);
 $25154 = $1941;
 HEAP32[$25154 >> 2] = 6357193;
 HEAP32[$25154 + 4 >> 2] = 4195125;
 HEAP32[$1941 + 8 >> 2] = 63422;
 HEAP16[$1942 >> 1] = 201;
 HEAP16[$1942 + 2 >> 1] = 142;
 HEAP16[$1942 + 4 >> 1] = 12;
 HEAP16[$1942 + 6 >> 1] = 11;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1941, $1942);
 $25162 = $1943;
 HEAP32[$25162 >> 2] = 6357193;
 HEAP32[$25162 + 4 >> 2] = 4195125;
 HEAP32[$1943 + 8 >> 2] = 63422;
 HEAP16[$1944 >> 1] = 261;
 HEAP16[$1944 + 2 >> 1] = 142;
 HEAP16[$1944 + 4 >> 1] = 761;
 HEAP16[$1944 + 6 >> 1] = 11;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1943, $1944);
 $25170 = $1945;
 HEAP32[$25170 >> 2] = 6357193;
 HEAP32[$25170 + 4 >> 2] = 4195125;
 HEAP32[$1945 + 8 >> 2] = 63422;
 HEAP16[$1946 >> 1] = 201;
 HEAP16[$1946 + 2 >> 1] = 153;
 HEAP16[$1946 + 4 >> 1] = 821;
 HEAP16[$1946 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1945, $1946);
 HEAP8[$1947 >> 0] = 1;
 HEAP16[$1947 + 2 >> 1] = 1021;
 HEAP16[$1947 + 4 >> 1] = 160;
 HEAP16[$1947 + 6 >> 1] = 1022;
 HEAP16[$1947 + 8 >> 1] = 160;
 HEAP32[$1947 + 12 >> 2] = 0;
 HEAP8[$1947 + 16 >> 0] = 13;
 $25185 = $1947 + 20 | 0;
 HEAP32[$25185 >> 2] = 256;
 HEAP32[$25185 + 4 >> 2] = 54938;
 HEAP16[$1948 >> 1] = 1021;
 HEAP16[$1948 + 2 >> 1] = 160;
 HEAP16[$1948 + 4 >> 1] = 1;
 HEAP16[$1948 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK9RDPLineToRK4Rect($front, $1947, $1948);
 $25192 = $1949;
 HEAP32[$25192 >> 2] = 44564681;
 HEAP32[$25192 + 4 >> 2] = 1442613;
 HEAP32[$1949 + 8 >> 2] = 63422;
 HEAP16[$1950 >> 1] = 201;
 HEAP16[$1950 + 2 >> 1] = 680;
 HEAP16[$1950 + 4 >> 1] = 821;
 HEAP16[$1950 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1949, $1950);
 $25200 = $1951;
 HEAP32[$25200 >> 2] = 44564681;
 HEAP32[$25200 + 4 >> 2] = 1442613;
 HEAP32[$1951 + 8 >> 2] = 63422;
 HEAP16[$1952 >> 1] = 201;
 HEAP16[$1952 + 2 >> 1] = 683;
 HEAP16[$1952 + 4 >> 1] = 3;
 HEAP16[$1952 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1951, $1952);
 $25208 = $1953;
 HEAP32[$25208 >> 2] = 44564681;
 HEAP32[$25208 + 4 >> 2] = 1442613;
 HEAP32[$1953 + 8 >> 2] = 63422;
 HEAP16[$1954 >> 1] = 220;
 HEAP16[$1954 + 2 >> 1] = 683;
 HEAP16[$1954 + 4 >> 1] = 802;
 HEAP16[$1954 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1953, $1954);
 $25216 = $1955;
 HEAP32[$25216 >> 2] = 44564681;
 HEAP32[$25216 + 4 >> 2] = 1442613;
 HEAP32[$1955 + 8 >> 2] = 63422;
 HEAP16[$1956 >> 1] = 201;
 HEAP16[$1956 + 2 >> 1] = 685;
 HEAP16[$1956 + 4 >> 1] = 3;
 HEAP16[$1956 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1955, $1956);
 $25224 = $1957;
 HEAP32[$25224 >> 2] = 44564681;
 HEAP32[$25224 + 4 >> 2] = 1442613;
 HEAP32[$1957 + 8 >> 2] = 63422;
 HEAP16[$1958 >> 1] = 220;
 HEAP16[$1958 + 2 >> 1] = 685;
 HEAP16[$1958 + 4 >> 1] = 3;
 HEAP16[$1958 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1957, $1958);
 $25232 = $1959;
 HEAP32[$25232 >> 2] = 44564681;
 HEAP32[$25232 + 4 >> 2] = 1442613;
 HEAP32[$1959 + 8 >> 2] = 63422;
 HEAP16[$1960 >> 1] = 388;
 HEAP16[$1960 + 2 >> 1] = 685;
 HEAP16[$1960 + 4 >> 1] = 634;
 HEAP16[$1960 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1959, $1960);
 $25240 = $1961;
 HEAP32[$25240 >> 2] = 44564681;
 HEAP32[$25240 + 4 >> 2] = 1442613;
 HEAP32[$1961 + 8 >> 2] = 63422;
 HEAP16[$1962 >> 1] = 201;
 HEAP16[$1962 + 2 >> 1] = 698;
 HEAP16[$1962 + 4 >> 1] = 3;
 HEAP16[$1962 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1961, $1962);
 $25248 = $1963;
 HEAP32[$25248 >> 2] = 44564681;
 HEAP32[$25248 + 4 >> 2] = 1442613;
 HEAP32[$1963 + 8 >> 2] = 63422;
 HEAP16[$1964 >> 1] = 220;
 HEAP16[$1964 + 2 >> 1] = 698;
 HEAP16[$1964 + 4 >> 1] = 802;
 HEAP16[$1964 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1963, $1964);
 $25256 = $1965;
 HEAP32[$25256 >> 2] = 44564681;
 HEAP32[$25256 + 4 >> 2] = 1442613;
 HEAP32[$1965 + 8 >> 2] = 63422;
 HEAP16[$1966 >> 1] = 201;
 HEAP16[$1966 + 2 >> 1] = 699;
 HEAP16[$1966 + 4 >> 1] = 821;
 HEAP16[$1966 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1965, $1966);
 HEAP8[$1967 >> 0] = 1;
 HEAP16[$1967 + 2 >> 1] = 1021;
 HEAP16[$1967 + 4 >> 1] = 680;
 HEAP16[$1967 + 6 >> 1] = 1022;
 HEAP16[$1967 + 8 >> 1] = 680;
 HEAP32[$1967 + 12 >> 2] = 0;
 HEAP8[$1967 + 16 >> 0] = 13;
 $25271 = $1967 + 20 | 0;
 HEAP32[$25271 >> 2] = 256;
 HEAP32[$25271 + 4 >> 2] = 54938;
 HEAP16[$1968 >> 1] = 1021;
 HEAP16[$1968 + 2 >> 1] = 680;
 HEAP16[$1968 + 4 >> 1] = 1;
 HEAP16[$1968 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK9RDPLineToRK4Rect($front, $1967, $1968);
 $25278 = $1969;
 HEAP32[$25278 >> 2] = 29950174;
 HEAP32[$25278 + 4 >> 2] = 10027555;
 HEAP32[$1969 + 8 >> 2] = 63422;
 HEAP16[$1970 >> 1] = 222;
 HEAP16[$1970 + 2 >> 1] = 457;
 HEAP16[$1970 + 4 >> 1] = 3;
 HEAP16[$1970 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1969, $1970);
 $25286 = $1971;
 HEAP32[$25286 >> 2] = 29950174;
 HEAP32[$25286 + 4 >> 2] = 10027555;
 HEAP32[$1971 + 8 >> 2] = 63422;
 HEAP16[$1972 >> 1] = 437;
 HEAP16[$1972 + 2 >> 1] = 457;
 HEAP16[$1972 + 4 >> 1] = 6;
 HEAP16[$1972 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1971, $1972);
 $25294 = $1973;
 HEAP32[$25294 >> 2] = 29950174;
 HEAP32[$25294 + 4 >> 2] = 10027555;
 HEAP32[$1973 + 8 >> 2] = 63422;
 HEAP16[$1974 >> 1] = 766;
 HEAP16[$1974 + 2 >> 1] = 457;
 HEAP16[$1974 + 4 >> 1] = 3;
 HEAP16[$1974 + 6 >> 1] = 134;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1973, $1974);
 $25302 = $1975;
 HEAP32[$25302 >> 2] = 29950174;
 HEAP32[$25302 + 4 >> 2] = 10027555;
 HEAP32[$1975 + 8 >> 2] = 63422;
 HEAP16[$1976 >> 1] = 222;
 HEAP16[$1976 + 2 >> 1] = 591;
 HEAP16[$1976 + 4 >> 1] = 3;
 HEAP16[$1976 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1975, $1976);
 $25310 = $1977;
 HEAP32[$25310 >> 2] = 29950174;
 HEAP32[$25310 + 4 >> 2] = 10027555;
 HEAP32[$1977 + 8 >> 2] = 63422;
 HEAP16[$1978 >> 1] = 437;
 HEAP16[$1978 + 2 >> 1] = 591;
 HEAP16[$1978 + 4 >> 1] = 332;
 HEAP16[$1978 + 6 >> 1] = 19;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1977, $1978);
 $25318 = $1979;
 HEAP32[$25318 >> 2] = 35324129;
 HEAP32[$25318 + 4 >> 2] = 983252;
 HEAP8[$1979 + 8 >> 0] = -52;
 HEAP16[$1979 + 10 >> 1] = 225;
 HEAP16[$1979 + 12 >> 1] = 526;
 HEAP16[$1980 >> 1] = 0;
 HEAP16[$1980 + 2 >> 1] = 0;
 HEAP16[$1980 + 4 >> 1] = 1024;
 HEAP16[$1980 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect($front, $1979, $1980);
 $25328 = $1981;
 HEAP32[$25328 >> 2] = 35324347;
 HEAP32[$25328 + 4 >> 2] = 983363;
 HEAP8[$1981 + 8 >> 0] = -52;
 HEAP16[$1981 + 10 >> 1] = 443;
 HEAP16[$1981 + 12 >> 1] = 526;
 HEAP16[$1982 >> 1] = 0;
 HEAP16[$1982 + 2 >> 1] = 0;
 HEAP16[$1982 + 4 >> 1] = 1024;
 HEAP16[$1982 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect($front, $1981, $1982);
 $25338 = $1983;
 HEAP32[$25338 >> 2] = 37159137;
 HEAP32[$25338 + 4 >> 2] = 983252;
 HEAP8[$1983 + 8 >> 0] = -52;
 HEAP16[$1983 + 10 >> 1] = 225;
 HEAP16[$1983 + 12 >> 1] = 554;
 HEAP16[$1984 >> 1] = 0;
 HEAP16[$1984 + 2 >> 1] = 0;
 HEAP16[$1984 + 4 >> 1] = 1024;
 HEAP16[$1984 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect($front, $1983, $1984);
 $25348 = $1985;
 HEAP32[$25348 >> 2] = 37159355;
 HEAP32[$25348 + 4 >> 2] = 983363;
 HEAP8[$1985 + 8 >> 0] = -52;
 HEAP16[$1985 + 10 >> 1] = 443;
 HEAP16[$1985 + 12 >> 1] = 554;
 HEAP16[$1986 >> 1] = 0;
 HEAP16[$1986 + 2 >> 1] = 0;
 HEAP16[$1986 + 4 >> 1] = 1024;
 HEAP16[$1986 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect($front, $1985, $1986);
 $25358 = $1987;
 HEAP32[$25358 >> 2] = 38994145;
 HEAP32[$25358 + 4 >> 2] = 983252;
 HEAP8[$1987 + 8 >> 0] = -52;
 HEAP16[$1987 + 10 >> 1] = 225;
 HEAP16[$1987 + 12 >> 1] = 582;
 HEAP16[$1988 >> 1] = 0;
 HEAP16[$1988 + 2 >> 1] = 0;
 HEAP16[$1988 + 4 >> 1] = 1024;
 HEAP16[$1988 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect($front, $1987, $1988);
 $25368 = $1989;
 HEAP32[$25368 >> 2] = 38994363;
 HEAP32[$25368 + 4 >> 2] = 590147;
 HEAP8[$1989 + 8 >> 0] = -52;
 HEAP16[$1989 + 10 >> 1] = 443;
 HEAP16[$1989 + 12 >> 1] = 582;
 HEAP16[$1990 >> 1] = 0;
 HEAP16[$1990 + 2 >> 1] = 0;
 HEAP16[$1990 + 4 >> 1] = 1024;
 HEAP16[$1990 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect($front, $1989, $1990);
 $25378 = $1991;
 HEAP32[$25378 >> 2] = 29950174;
 HEAP32[$25378 + 4 >> 2] = 10027555;
 HEAP32[$1991 + 8 >> 2] = 63422;
 HEAP16[$1992 >> 1] = 437;
 HEAP16[$1992 + 2 >> 1] = 457;
 HEAP16[$1992 + 4 >> 1] = 6;
 HEAP16[$1992 + 6 >> 1] = 23;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1991, $1992);
 $25386 = $1993;
 HEAP32[$25386 >> 2] = 29950174;
 HEAP32[$25386 + 4 >> 2] = 10027555;
 HEAP32[$1993 + 8 >> 2] = 63422;
 HEAP16[$1994 >> 1] = 766;
 HEAP16[$1994 + 2 >> 1] = 457;
 HEAP16[$1994 + 4 >> 1] = 3;
 HEAP16[$1994 + 6 >> 1] = 23;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1993, $1994);
 $25394 = $1995;
 HEAP32[$25394 >> 2] = 29950174;
 HEAP32[$25394 + 4 >> 2] = 10027555;
 HEAP32[$1995 + 8 >> 2] = 63422;
 HEAP16[$1996 >> 1] = 222;
 HEAP16[$1996 + 2 >> 1] = 480;
 HEAP16[$1996 + 4 >> 1] = 3;
 HEAP16[$1996 + 6 >> 1] = 124;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1995, $1996);
 $25402 = $1997;
 HEAP32[$25402 >> 2] = 29950174;
 HEAP32[$25402 + 4 >> 2] = 10027555;
 HEAP32[$1997 + 8 >> 2] = 63422;
 HEAP16[$1998 >> 1] = 437;
 HEAP16[$1998 + 2 >> 1] = 480;
 HEAP16[$1998 + 4 >> 1] = 6;
 HEAP16[$1998 + 6 >> 1] = 124;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1997, $1998);
 $25410 = $1999;
 HEAP32[$25410 >> 2] = 29950174;
 HEAP32[$25410 + 4 >> 2] = 10027555;
 HEAP32[$1999 + 8 >> 2] = 63422;
 HEAP16[$2000 >> 1] = 766;
 HEAP16[$2000 + 2 >> 1] = 480;
 HEAP16[$2000 + 4 >> 1] = 3;
 HEAP16[$2000 + 6 >> 1] = 124;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $1999, $2000);
 $25418 = $2001;
 HEAP32[$25418 >> 2] = 29950174;
 HEAP32[$25418 + 4 >> 2] = 10027555;
 HEAP32[$2001 + 8 >> 2] = 63422;
 HEAP16[$2002 >> 1] = 222;
 HEAP16[$2002 + 2 >> 1] = 604;
 HEAP16[$2002 + 4 >> 1] = 3;
 HEAP16[$2002 + 6 >> 1] = 6;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2001, $2002);
 $25426 = $2003;
 HEAP32[$25426 >> 2] = 29950174;
 HEAP32[$25426 + 4 >> 2] = 10027555;
 HEAP32[$2003 + 8 >> 2] = 63422;
 HEAP16[$2004 >> 1] = 437;
 HEAP16[$2004 + 2 >> 1] = 604;
 HEAP16[$2004 + 4 >> 1] = 332;
 HEAP16[$2004 + 6 >> 1] = 6;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2003, $2004);
 $25434 = $2005;
 HEAP32[$25434 >> 2] = 29950174;
 HEAP32[$25434 + 4 >> 2] = 10027555;
 HEAP32[$2005 + 8 >> 2] = 63422;
 HEAP16[$2006 >> 1] = 222;
 HEAP16[$2006 + 2 >> 1] = 457;
 HEAP16[$2006 + 4 >> 1] = 3;
 HEAP16[$2006 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2005, $2006);
 $25442 = $2007;
 HEAP32[$25442 >> 2] = 29950174;
 HEAP32[$25442 + 4 >> 2] = 10027555;
 HEAP32[$2007 + 8 >> 2] = 63422;
 HEAP16[$2008 >> 1] = 437;
 HEAP16[$2008 + 2 >> 1] = 457;
 HEAP16[$2008 + 4 >> 1] = 6;
 HEAP16[$2008 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2007, $2008);
 $25450 = $2009;
 HEAP32[$25450 >> 2] = 29950174;
 HEAP32[$25450 + 4 >> 2] = 10027555;
 HEAP32[$2009 + 8 >> 2] = 63422;
 HEAP16[$2010 >> 1] = 766;
 HEAP16[$2010 + 2 >> 1] = 457;
 HEAP16[$2010 + 4 >> 1] = 3;
 HEAP16[$2010 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2009, $2010);
 $25458 = $2011;
 HEAP32[$25458 >> 2] = 12910804;
 HEAP32[$25458 + 4 >> 2] = 6553800;
 HEAP32[$2011 + 8 >> 2] = 63422;
 HEAP16[$2012 >> 1] = 212;
 HEAP16[$2012 + 2 >> 1] = 197;
 HEAP16[$2012 + 4 >> 1] = 3;
 HEAP16[$2012 + 6 >> 1] = 100;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2011, $2012);
 $25466 = $2013;
 HEAP32[$25466 >> 2] = 12910804;
 HEAP32[$25466 + 4 >> 2] = 6553800;
 HEAP32[$2013 + 8 >> 2] = 63422;
 HEAP16[$2014 >> 1] = 289;
 HEAP16[$2014 + 2 >> 1] = 197;
 HEAP16[$2014 + 4 >> 1] = 6;
 HEAP16[$2014 + 6 >> 1] = 100;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2013, $2014);
 $25474 = $2015;
 HEAP32[$25474 >> 2] = 12910804;
 HEAP32[$25474 + 4 >> 2] = 6553800;
 HEAP32[$2015 + 8 >> 2] = 63422;
 HEAP16[$2016 >> 1] = 409;
 HEAP16[$2016 + 2 >> 1] = 197;
 HEAP16[$2016 + 4 >> 1] = 3;
 HEAP16[$2016 + 6 >> 1] = 100;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2015, $2016);
 $25482 = $2017;
 HEAP32[$25482 >> 2] = 12910804;
 HEAP32[$25482 + 4 >> 2] = 6553800;
 HEAP32[$2017 + 8 >> 2] = 63422;
 HEAP16[$2018 >> 1] = 212;
 HEAP16[$2018 + 2 >> 1] = 197;
 HEAP16[$2018 + 4 >> 1] = 3;
 HEAP16[$2018 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2017, $2018);
 $25490 = $2019;
 HEAP32[$25490 >> 2] = 12910804;
 HEAP32[$25490 + 4 >> 2] = 6553800;
 HEAP32[$2019 + 8 >> 2] = 63422;
 HEAP16[$2020 >> 1] = 289;
 HEAP16[$2020 + 2 >> 1] = 197;
 HEAP16[$2020 + 4 >> 1] = 6;
 HEAP16[$2020 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2019, $2020);
 $25498 = $2021;
 HEAP32[$25498 >> 2] = 12910804;
 HEAP32[$25498 + 4 >> 2] = 6553800;
 HEAP32[$2021 + 8 >> 2] = 63422;
 HEAP16[$2022 >> 1] = 409;
 HEAP16[$2022 + 2 >> 1] = 197;
 HEAP16[$2022 + 4 >> 1] = 3;
 HEAP16[$2022 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2021, $2022);
 $25506 = $2023;
 HEAP32[$25506 >> 2] = 12910804;
 HEAP32[$25506 + 4 >> 2] = 6553800;
 HEAP32[$2023 + 8 >> 2] = 63422;
 HEAP16[$2024 >> 1] = 212;
 HEAP16[$2024 + 2 >> 1] = 207;
 HEAP16[$2024 + 4 >> 1] = 3;
 HEAP16[$2024 + 6 >> 1] = 21;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2023, $2024);
 $25514 = $2025;
 HEAP32[$25514 >> 2] = 12910804;
 HEAP32[$25514 + 4 >> 2] = 6553800;
 HEAP32[$2025 + 8 >> 2] = 63422;
 HEAP16[$2026 >> 1] = 212;
 HEAP16[$2026 + 2 >> 1] = 228;
 HEAP16[$2026 + 4 >> 1] = 3;
 HEAP16[$2026 + 6 >> 1] = 69;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2025, $2026);
 $25522 = $2027;
 HEAP32[$25522 >> 2] = 12910804;
 HEAP32[$25522 + 4 >> 2] = 6553800;
 HEAP32[$2027 + 8 >> 2] = 63422;
 HEAP16[$2028 >> 1] = 289;
 HEAP16[$2028 + 2 >> 1] = 228;
 HEAP16[$2028 + 4 >> 1] = 6;
 HEAP16[$2028 + 6 >> 1] = 69;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2027, $2028);
 $25530 = $2029;
 HEAP32[$25530 >> 2] = 12910804;
 HEAP32[$25530 + 4 >> 2] = 6553800;
 HEAP32[$2029 + 8 >> 2] = 63422;
 HEAP16[$2030 >> 1] = 409;
 HEAP16[$2030 + 2 >> 1] = 228;
 HEAP16[$2030 + 4 >> 1] = 3;
 HEAP16[$2030 + 6 >> 1] = 69;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2029, $2030);
 $25538 = $2031;
 HEAP32[$25538 >> 2] = 12910804;
 HEAP32[$25538 + 4 >> 2] = 6553800;
 HEAP32[$2031 + 8 >> 2] = 63422;
 HEAP16[$2032 >> 1] = 212;
 HEAP16[$2032 + 2 >> 1] = 197;
 HEAP16[$2032 + 4 >> 1] = 3;
 HEAP16[$2032 + 6 >> 1] = 100;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2031, $2032);
 $25546 = $2033;
 HEAP32[$25546 >> 2] = 12910804;
 HEAP32[$25546 + 4 >> 2] = 6553800;
 HEAP32[$2033 + 8 >> 2] = 63422;
 HEAP16[$2034 >> 1] = 289;
 HEAP16[$2034 + 2 >> 1] = 197;
 HEAP16[$2034 + 4 >> 1] = 6;
 HEAP16[$2034 + 6 >> 1] = 100;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2033, $2034);
 $25554 = $2035;
 HEAP32[$25554 >> 2] = 12910804;
 HEAP32[$25554 + 4 >> 2] = 6553800;
 HEAP32[$2035 + 8 >> 2] = 63422;
 HEAP16[$2036 >> 1] = 409;
 HEAP16[$2036 + 2 >> 1] = 197;
 HEAP16[$2036 + 4 >> 1] = 3;
 HEAP16[$2036 + 6 >> 1] = 100;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2035, $2036);
 $25562 = $2037;
 HEAP32[$25562 >> 2] = 14942430;
 HEAP32[$25562 + 4 >> 2] = 12517923;
 HEAP32[$2037 + 8 >> 2] = 63422;
 HEAP16[$2038 >> 1] = 222;
 HEAP16[$2038 + 2 >> 1] = 228;
 HEAP16[$2038 + 4 >> 1] = 3;
 HEAP16[$2038 + 6 >> 1] = 191;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2037, $2038);
 $25570 = $2039;
 HEAP32[$25570 >> 2] = 14942430;
 HEAP32[$25570 + 4 >> 2] = 12517923;
 HEAP32[$2039 + 8 >> 2] = 63422;
 HEAP16[$2040 >> 1] = 299;
 HEAP16[$2040 + 2 >> 1] = 228;
 HEAP16[$2040 + 4 >> 1] = 6;
 HEAP16[$2040 + 6 >> 1] = 191;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2039, $2040);
 $25578 = $2041;
 HEAP32[$25578 >> 2] = 14942430;
 HEAP32[$25578 + 4 >> 2] = 12517923;
 HEAP32[$2041 + 8 >> 2] = 63422;
 HEAP16[$2042 >> 1] = 419;
 HEAP16[$2042 + 2 >> 1] = 228;
 HEAP16[$2042 + 4 >> 1] = 350;
 HEAP16[$2042 + 6 >> 1] = 191;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2041, $2042);
 $25586 = $2043;
 HEAP32[$25586 >> 2] = 14942430;
 HEAP32[$25586 + 4 >> 2] = 12517923;
 HEAP32[$2043 + 8 >> 2] = 63422;
 HEAP16[$2044 >> 1] = 222;
 HEAP16[$2044 + 2 >> 1] = 228;
 HEAP16[$2044 + 4 >> 1] = 3;
 HEAP16[$2044 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2043, $2044);
 $25594 = $2045;
 HEAP32[$25594 >> 2] = 14942430;
 HEAP32[$25594 + 4 >> 2] = 12517923;
 HEAP32[$2045 + 8 >> 2] = 63422;
 HEAP16[$2046 >> 1] = 437;
 HEAP16[$2046 + 2 >> 1] = 228;
 HEAP16[$2046 + 4 >> 1] = 332;
 HEAP16[$2046 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2045, $2046);
 $25602 = $2047;
 HEAP32[$25602 >> 2] = 14942430;
 HEAP32[$25602 + 4 >> 2] = 12517923;
 HEAP32[$2047 + 8 >> 2] = 63422;
 HEAP16[$2048 >> 1] = 222;
 HEAP16[$2048 + 2 >> 1] = 256;
 HEAP16[$2048 + 4 >> 1] = 83;
 HEAP16[$2048 + 6 >> 1] = 52;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2047, $2048);
 $25610 = $2049;
 HEAP32[$25610 >> 2] = 14942430;
 HEAP32[$25610 + 4 >> 2] = 12517923;
 HEAP32[$2049 + 8 >> 2] = 63422;
 HEAP16[$2050 >> 1] = 419;
 HEAP16[$2050 + 2 >> 1] = 256;
 HEAP16[$2050 + 4 >> 1] = 350;
 HEAP16[$2050 + 6 >> 1] = 52;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2049, $2050);
 $25618 = $2051;
 HEAP32[$25618 >> 2] = 14942430;
 HEAP32[$25618 + 4 >> 2] = 12517923;
 HEAP32[$2051 + 8 >> 2] = 63422;
 HEAP16[$2052 >> 1] = 222;
 HEAP16[$2052 + 2 >> 1] = 308;
 HEAP16[$2052 + 4 >> 1] = 3;
 HEAP16[$2052 + 6 >> 1] = 111;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2051, $2052);
 $25626 = $2053;
 HEAP32[$25626 >> 2] = 14942430;
 HEAP32[$25626 + 4 >> 2] = 12517923;
 HEAP32[$2053 + 8 >> 2] = 63422;
 HEAP16[$2054 >> 1] = 299;
 HEAP16[$2054 + 2 >> 1] = 308;
 HEAP16[$2054 + 4 >> 1] = 6;
 HEAP16[$2054 + 6 >> 1] = 111;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2053, $2054);
 $25634 = $2055;
 HEAP32[$25634 >> 2] = 14942430;
 HEAP32[$25634 + 4 >> 2] = 12517923;
 HEAP32[$2055 + 8 >> 2] = 63422;
 HEAP16[$2056 >> 1] = 419;
 HEAP16[$2056 + 2 >> 1] = 308;
 HEAP16[$2056 + 4 >> 1] = 350;
 HEAP16[$2056 + 6 >> 1] = 111;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2055, $2056);
 $25642 = $2057;
 HEAP32[$25642 >> 2] = 14942430;
 HEAP32[$25642 + 4 >> 2] = 12517923;
 HEAP32[$2057 + 8 >> 2] = 63422;
 HEAP16[$2058 >> 1] = 222;
 HEAP16[$2058 + 2 >> 1] = 228;
 HEAP16[$2058 + 4 >> 1] = 3;
 HEAP16[$2058 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2057, $2058);
 $25650 = $2059;
 HEAP32[$25650 >> 2] = 14942430;
 HEAP32[$25650 + 4 >> 2] = 12517923;
 HEAP32[$2059 + 8 >> 2] = 63422;
 HEAP16[$2060 >> 1] = 437;
 HEAP16[$2060 + 2 >> 1] = 228;
 HEAP16[$2060 + 4 >> 1] = 6;
 HEAP16[$2060 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2059, $2060);
 $25658 = $2061;
 HEAP32[$25658 >> 2] = 14942430;
 HEAP32[$25658 + 4 >> 2] = 12517923;
 HEAP32[$2061 + 8 >> 2] = 63422;
 HEAP16[$2062 >> 1] = 766;
 HEAP16[$2062 + 2 >> 1] = 228;
 HEAP16[$2062 + 4 >> 1] = 3;
 HEAP16[$2062 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2061, $2062);
 $25666 = $2063;
 HEAP32[$25666 >> 2] = 14942430;
 HEAP32[$25666 + 4 >> 2] = 12517923;
 HEAP32[$2063 + 8 >> 2] = 63422;
 HEAP16[$2064 >> 1] = 222;
 HEAP16[$2064 + 2 >> 1] = 256;
 HEAP16[$2064 + 4 >> 1] = 547;
 HEAP16[$2064 + 6 >> 1] = 52;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2063, $2064);
 $25674 = $2065;
 HEAP32[$25674 >> 2] = 14942430;
 HEAP32[$25674 + 4 >> 2] = 12517923;
 HEAP32[$2065 + 8 >> 2] = 63422;
 HEAP16[$2066 >> 1] = 222;
 HEAP16[$2066 + 2 >> 1] = 308;
 HEAP16[$2066 + 4 >> 1] = 3;
 HEAP16[$2066 + 6 >> 1] = 111;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2065, $2066);
 $25682 = $2067;
 HEAP32[$25682 >> 2] = 14942430;
 HEAP32[$25682 + 4 >> 2] = 12517923;
 HEAP32[$2067 + 8 >> 2] = 63422;
 HEAP16[$2068 >> 1] = 299;
 HEAP16[$2068 + 2 >> 1] = 308;
 HEAP16[$2068 + 4 >> 1] = 6;
 HEAP16[$2068 + 6 >> 1] = 111;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2067, $2068);
 $25690 = $2069;
 HEAP32[$25690 >> 2] = 14942430;
 HEAP32[$25690 + 4 >> 2] = 12517923;
 HEAP32[$2069 + 8 >> 2] = 63422;
 HEAP16[$2070 >> 1] = 419;
 HEAP16[$2070 + 2 >> 1] = 308;
 HEAP16[$2070 + 4 >> 1] = 350;
 HEAP16[$2070 + 6 >> 1] = 111;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2069, $2070);
 $25698 = $2071;
 HEAP32[$25698 >> 2] = 14942430;
 HEAP32[$25698 + 4 >> 2] = 12517923;
 HEAP32[$2071 + 8 >> 2] = 63422;
 HEAP16[$2072 >> 1] = 222;
 HEAP16[$2072 + 2 >> 1] = 228;
 HEAP16[$2072 + 4 >> 1] = 3;
 HEAP16[$2072 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2071, $2072);
 $25706 = $2073;
 HEAP32[$25706 >> 2] = 14942430;
 HEAP32[$25706 + 4 >> 2] = 12517923;
 HEAP32[$2073 + 8 >> 2] = 63422;
 HEAP16[$2074 >> 1] = 437;
 HEAP16[$2074 + 2 >> 1] = 228;
 HEAP16[$2074 + 4 >> 1] = 6;
 HEAP16[$2074 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2073, $2074);
 $25714 = $2075;
 HEAP32[$25714 >> 2] = 14942430;
 HEAP32[$25714 + 4 >> 2] = 12517923;
 HEAP32[$2075 + 8 >> 2] = 63422;
 HEAP16[$2076 >> 1] = 766;
 HEAP16[$2076 + 2 >> 1] = 228;
 HEAP16[$2076 + 4 >> 1] = 3;
 HEAP16[$2076 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2075, $2076);
 $25722 = $2077;
 HEAP32[$25722 >> 2] = 14942430;
 HEAP32[$25722 + 4 >> 2] = 12517923;
 HEAP32[$2077 + 8 >> 2] = 63422;
 HEAP16[$2078 >> 1] = 222;
 HEAP16[$2078 + 2 >> 1] = 256;
 HEAP16[$2078 + 4 >> 1] = 3;
 HEAP16[$2078 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2077, $2078);
 $25730 = $2079;
 HEAP32[$25730 >> 2] = 14942430;
 HEAP32[$25730 + 4 >> 2] = 12517923;
 HEAP32[$2079 + 8 >> 2] = 63422;
 HEAP16[$2080 >> 1] = 437;
 HEAP16[$2080 + 2 >> 1] = 256;
 HEAP16[$2080 + 4 >> 1] = 332;
 HEAP16[$2080 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2079, $2080);
 $25738 = $2081;
 HEAP32[$25738 >> 2] = 14942430;
 HEAP32[$25738 + 4 >> 2] = 12517923;
 HEAP32[$2081 + 8 >> 2] = 63422;
 HEAP16[$2082 >> 1] = 222;
 HEAP16[$2082 + 2 >> 1] = 284;
 HEAP16[$2082 + 4 >> 1] = 547;
 HEAP16[$2082 + 6 >> 1] = 24;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2081, $2082);
 $25746 = $2083;
 HEAP32[$25746 >> 2] = 14942430;
 HEAP32[$25746 + 4 >> 2] = 12517923;
 HEAP32[$2083 + 8 >> 2] = 63422;
 HEAP16[$2084 >> 1] = 222;
 HEAP16[$2084 + 2 >> 1] = 308;
 HEAP16[$2084 + 4 >> 1] = 83;
 HEAP16[$2084 + 6 >> 1] = 54;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2083, $2084);
 $25754 = $2085;
 HEAP32[$25754 >> 2] = 14942430;
 HEAP32[$25754 + 4 >> 2] = 12517923;
 HEAP32[$2085 + 8 >> 2] = 63422;
 HEAP16[$2086 >> 1] = 419;
 HEAP16[$2086 + 2 >> 1] = 308;
 HEAP16[$2086 + 4 >> 1] = 350;
 HEAP16[$2086 + 6 >> 1] = 54;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2085, $2086);
 $25762 = $2087;
 HEAP32[$25762 >> 2] = 14942430;
 HEAP32[$25762 + 4 >> 2] = 12517923;
 HEAP32[$2087 + 8 >> 2] = 63422;
 HEAP16[$2088 >> 1] = 222;
 HEAP16[$2088 + 2 >> 1] = 362;
 HEAP16[$2088 + 4 >> 1] = 3;
 HEAP16[$2088 + 6 >> 1] = 57;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2087, $2088);
 $25770 = $2089;
 HEAP32[$25770 >> 2] = 14942430;
 HEAP32[$25770 + 4 >> 2] = 12517923;
 HEAP32[$2089 + 8 >> 2] = 63422;
 HEAP16[$2090 >> 1] = 299;
 HEAP16[$2090 + 2 >> 1] = 362;
 HEAP16[$2090 + 4 >> 1] = 6;
 HEAP16[$2090 + 6 >> 1] = 57;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2089, $2090);
 $25778 = $2091;
 HEAP32[$25778 >> 2] = 14942430;
 HEAP32[$25778 + 4 >> 2] = 12517923;
 HEAP32[$2091 + 8 >> 2] = 63422;
 HEAP16[$2092 >> 1] = 419;
 HEAP16[$2092 + 2 >> 1] = 362;
 HEAP16[$2092 + 4 >> 1] = 350;
 HEAP16[$2092 + 6 >> 1] = 57;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2091, $2092);
 $25786 = $2093;
 HEAP32[$25786 >> 2] = 14942430;
 HEAP32[$25786 + 4 >> 2] = 12517923;
 HEAP32[$2093 + 8 >> 2] = 63422;
 HEAP16[$2094 >> 1] = 222;
 HEAP16[$2094 + 2 >> 1] = 228;
 HEAP16[$2094 + 4 >> 1] = 3;
 HEAP16[$2094 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2093, $2094);
 $25794 = $2095;
 HEAP32[$25794 >> 2] = 14942430;
 HEAP32[$25794 + 4 >> 2] = 12517923;
 HEAP32[$2095 + 8 >> 2] = 63422;
 HEAP16[$2096 >> 1] = 437;
 HEAP16[$2096 + 2 >> 1] = 228;
 HEAP16[$2096 + 4 >> 1] = 6;
 HEAP16[$2096 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2095, $2096);
 $25802 = $2097;
 HEAP32[$25802 >> 2] = 14942430;
 HEAP32[$25802 + 4 >> 2] = 12517923;
 HEAP32[$2097 + 8 >> 2] = 63422;
 HEAP16[$2098 >> 1] = 766;
 HEAP16[$2098 + 2 >> 1] = 228;
 HEAP16[$2098 + 4 >> 1] = 3;
 HEAP16[$2098 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2097, $2098);
 $25810 = $2099;
 HEAP32[$25810 >> 2] = 14942430;
 HEAP32[$25810 + 4 >> 2] = 12517923;
 HEAP32[$2099 + 8 >> 2] = 63422;
 HEAP16[$2100 >> 1] = 222;
 HEAP16[$2100 + 2 >> 1] = 284;
 HEAP16[$2100 + 4 >> 1] = 547;
 HEAP16[$2100 + 6 >> 1] = 78;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2099, $2100);
 $25818 = $2101;
 HEAP32[$25818 >> 2] = 14942430;
 HEAP32[$25818 + 4 >> 2] = 12517923;
 HEAP32[$2101 + 8 >> 2] = 63422;
 HEAP16[$2102 >> 1] = 222;
 HEAP16[$2102 + 2 >> 1] = 362;
 HEAP16[$2102 + 4 >> 1] = 3;
 HEAP16[$2102 + 6 >> 1] = 57;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2101, $2102);
 $25826 = $2103;
 HEAP32[$25826 >> 2] = 14942430;
 HEAP32[$25826 + 4 >> 2] = 12517923;
 HEAP32[$2103 + 8 >> 2] = 63422;
 HEAP16[$2104 >> 1] = 299;
 HEAP16[$2104 + 2 >> 1] = 362;
 HEAP16[$2104 + 4 >> 1] = 6;
 HEAP16[$2104 + 6 >> 1] = 57;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2103, $2104);
 $25834 = $2105;
 HEAP32[$25834 >> 2] = 14942430;
 HEAP32[$25834 + 4 >> 2] = 12517923;
 HEAP32[$2105 + 8 >> 2] = 63422;
 HEAP16[$2106 >> 1] = 419;
 HEAP16[$2106 + 2 >> 1] = 362;
 HEAP16[$2106 + 4 >> 1] = 350;
 HEAP16[$2106 + 6 >> 1] = 57;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2105, $2106);
 $25842 = $2107;
 HEAP32[$25842 >> 2] = 14942430;
 HEAP32[$25842 + 4 >> 2] = 12517923;
 HEAP32[$2107 + 8 >> 2] = 63422;
 HEAP16[$2108 >> 1] = 222;
 HEAP16[$2108 + 2 >> 1] = 228;
 HEAP16[$2108 + 4 >> 1] = 3;
 HEAP16[$2108 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2107, $2108);
 $25850 = $2109;
 HEAP32[$25850 >> 2] = 14942430;
 HEAP32[$25850 + 4 >> 2] = 12517923;
 HEAP32[$2109 + 8 >> 2] = 63422;
 HEAP16[$2110 >> 1] = 437;
 HEAP16[$2110 + 2 >> 1] = 228;
 HEAP16[$2110 + 4 >> 1] = 6;
 HEAP16[$2110 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2109, $2110);
 $25858 = $2111;
 HEAP32[$25858 >> 2] = 14942430;
 HEAP32[$25858 + 4 >> 2] = 12517923;
 HEAP32[$2111 + 8 >> 2] = 63422;
 HEAP16[$2112 >> 1] = 766;
 HEAP16[$2112 + 2 >> 1] = 228;
 HEAP16[$2112 + 4 >> 1] = 3;
 HEAP16[$2112 + 6 >> 1] = 56;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2111, $2112);
 $25866 = $2113;
 HEAP32[$25866 >> 2] = 14942430;
 HEAP32[$25866 + 4 >> 2] = 12517923;
 HEAP32[$2113 + 8 >> 2] = 63422;
 HEAP16[$2114 >> 1] = 222;
 HEAP16[$2114 + 2 >> 1] = 284;
 HEAP16[$2114 + 4 >> 1] = 3;
 HEAP16[$2114 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2113, $2114);
 $25874 = $2115;
 HEAP32[$25874 >> 2] = 14942430;
 HEAP32[$25874 + 4 >> 2] = 12517923;
 HEAP32[$2115 + 8 >> 2] = 63422;
 HEAP16[$2116 >> 1] = 437;
 HEAP16[$2116 + 2 >> 1] = 284;
 HEAP16[$2116 + 4 >> 1] = 332;
 HEAP16[$2116 + 6 >> 1] = 28;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2115, $2116);
 $25882 = $2117;
 HEAP32[$25882 >> 2] = 14942430;
 HEAP32[$25882 + 4 >> 2] = 12517923;
 HEAP32[$2117 + 8 >> 2] = 63422;
 HEAP16[$2118 >> 1] = 222;
 HEAP16[$2118 + 2 >> 1] = 312;
 HEAP16[$2118 + 4 >> 1] = 547;
 HEAP16[$2118 + 6 >> 1] = 50;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2117, $2118);
 $25890 = $2119;
 HEAP32[$25890 >> 2] = 14942430;
 HEAP32[$25890 + 4 >> 2] = 12517923;
 HEAP32[$2119 + 8 >> 2] = 63422;
 HEAP16[$2120 >> 1] = 222;
 HEAP16[$2120 + 2 >> 1] = 362;
 HEAP16[$2120 + 4 >> 1] = 83;
 HEAP16[$2120 + 6 >> 1] = 57;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2119, $2120);
 $25898 = $2121;
 HEAP32[$25898 >> 2] = 14942430;
 HEAP32[$25898 + 4 >> 2] = 12517923;
 HEAP32[$2121 + 8 >> 2] = 63422;
 HEAP16[$2122 >> 1] = 419;
 HEAP16[$2122 + 2 >> 1] = 362;
 HEAP16[$2122 + 4 >> 1] = 350;
 HEAP16[$2122 + 6 >> 1] = 57;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2121, $2122);
 $25906 = $2123;
 HEAP32[$25906 >> 2] = 14942430;
 HEAP32[$25906 + 4 >> 2] = 12517923;
 HEAP32[$2123 + 8 >> 2] = 63422;
 HEAP16[$2124 >> 1] = 222;
 HEAP16[$2124 + 2 >> 1] = 228;
 HEAP16[$2124 + 4 >> 1] = 3;
 HEAP16[$2124 + 6 >> 1] = 84;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2123, $2124);
 $25914 = $2125;
 HEAP32[$25914 >> 2] = 14942430;
 HEAP32[$25914 + 4 >> 2] = 12517923;
 HEAP32[$2125 + 8 >> 2] = 63422;
 HEAP16[$2126 >> 1] = 437;
 HEAP16[$2126 + 2 >> 1] = 228;
 HEAP16[$2126 + 4 >> 1] = 6;
 HEAP16[$2126 + 6 >> 1] = 84;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2125, $2126);
 $25922 = $2127;
 HEAP32[$25922 >> 2] = 14942430;
 HEAP32[$25922 + 4 >> 2] = 12517923;
 HEAP32[$2127 + 8 >> 2] = 63422;
 HEAP16[$2128 >> 1] = 766;
 HEAP16[$2128 + 2 >> 1] = 228;
 HEAP16[$2128 + 4 >> 1] = 3;
 HEAP16[$2128 + 6 >> 1] = 84;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2127, $2128);
 $25930 = $2129;
 HEAP32[$25930 >> 2] = 14942430;
 HEAP32[$25930 + 4 >> 2] = 12517923;
 HEAP32[$2129 + 8 >> 2] = 63422;
 HEAP16[$2130 >> 1] = 222;
 HEAP16[$2130 + 2 >> 1] = 312;
 HEAP16[$2130 + 4 >> 1] = 547;
 HEAP16[$2130 + 6 >> 1] = 107;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2129, $2130);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 223;
 HEAP16[$bitmapData + 2 >> 1] = 685;
 HEAP16[$bitmapData + 4 >> 1] = 387;
 HEAP16[$bitmapData + 6 >> 1] = 697;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4420) label = 4027; else {
  $25943 = HEAP32[918918] | 0;
  if (($25943 | 0) == (HEAP32[918916] | 0)) label = 4027; else {
   $$lcssa$i$i3635 = 3675672;
   $$lcssa8$i$i3634 = $25943;
   label = 4028;
  }
 }
 do if ((label | 0) == 4027) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4420) {
   $25950 = HEAP32[918924] | 0;
   if (($25950 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3635 = 3675696;
    $$lcssa8$i$i3634 = $25950;
    label = 4028;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4420) {
   $25955 = HEAP32[918930] | 0;
   if (($25955 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3635 = 3675720;
    $$lcssa8$i$i3634 = $25955;
    label = 4028;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4420) {
   $25960 = HEAP32[918936] | 0;
   if (($25960 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3635 = 3675744;
    $$lcssa8$i$i3634 = $25960;
    label = 4028;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4420) {
   $25965 = HEAP32[918942] | 0;
   if (($25965 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3635 = 3675768;
    $$lcssa8$i$i3634 = $25965;
    label = 4028;
    break;
   }
  }
  $$3$i$i3636 = __Znwj(4420) | 0;
 } while (0);
 if ((label | 0) == 4028) {
  $25948 = $$lcssa8$i$i3634 + -4 | 0;
  HEAP32[$$lcssa$i$i3635 >> 2] = $25948;
  $$3$i$i3636 = HEAP32[$25948 >> 2] | 0;
 }
 $25969 = $$3$i$i3636 + 52 | 0;
 HEAP16[$$3$i$i3636 >> 1] = 168;
 HEAP16[$$3$i$i3636 + 2 >> 1] = 13;
 HEAP8[$$3$i$i3636 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3636 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3636 + 8 >> 2] = 336;
 HEAP32[$$3$i$i3636 + 12 >> 2] = 4368;
 HEAP32[$$3$i$i3636 + 16 >> 2] = $25969;
 HEAP32[$$3$i$i3636 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3636 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3636 + 48 >> 0] = 0;
 HEAP32[$2131 >> 2] = $$3$i$i3636;
 _memcpy($25969 | 0, 2603920, 336) | 0;
 _memcpy($$3$i$i3636 + 388 | 0, 2604256, 336) | 0;
 _memcpy($$3$i$i3636 + 724 | 0, 2604592, 336) | 0;
 _memcpy($$3$i$i3636 + 1060 | 0, 2604928, 336) | 0;
 _memcpy($$3$i$i3636 + 1396 | 0, 2605264, 336) | 0;
 _memcpy($$3$i$i3636 + 1732 | 0, 2605600, 336) | 0;
 _memcpy($$3$i$i3636 + 2068 | 0, 2605936, 336) | 0;
 _memcpy($$3$i$i3636 + 2404 | 0, 2606272, 336) | 0;
 _memcpy($$3$i$i3636 + 2740 | 0, 2606608, 336) | 0;
 _memcpy($$3$i$i3636 + 3076 | 0, 2606944, 336) | 0;
 _memcpy($$3$i$i3636 + 3412 | 0, 2607280, 336) | 0;
 _memcpy($$3$i$i3636 + 3748 | 0, 2607616, 336) | 0;
 _memcpy($$3$i$i3636 + 4084 | 0, 2607952, 336) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2131);
 if ($$3$i$i3636 | 0) {
  $25992 = $$3$i$i3636 + 5 | 0;
  $25994 = (HEAP8[$25992 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$25992 >> 0] = $25994;
  if (!($25994 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3636);
  HEAP32[$2131 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 204;
 HEAP16[$bitmapData + 2 >> 1] = 683;
 HEAP16[$bitmapData + 4 >> 1] = 219;
 HEAP16[$bitmapData + 6 >> 1] = 698;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 564) label = 4043; else {
  $26001 = HEAP32[918918] | 0;
  if (($26001 | 0) == (HEAP32[918916] | 0)) label = 4043; else {
   $$lcssa$i$i3575 = 3675672;
   $$lcssa8$i$i3574 = $26001;
   label = 4044;
  }
 }
 do if ((label | 0) == 4043) {
  if ((HEAP32[918925] | 0) >>> 0 >= 564) {
   $26008 = HEAP32[918924] | 0;
   if (($26008 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3575 = 3675696;
    $$lcssa8$i$i3574 = $26008;
    label = 4044;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 564) {
   $26013 = HEAP32[918930] | 0;
   if (($26013 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3575 = 3675720;
    $$lcssa8$i$i3574 = $26013;
    label = 4044;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 564) {
   $26018 = HEAP32[918936] | 0;
   if (($26018 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3575 = 3675744;
    $$lcssa8$i$i3574 = $26018;
    label = 4044;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 564) {
   $26023 = HEAP32[918942] | 0;
   if (($26023 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3575 = 3675768;
    $$lcssa8$i$i3574 = $26023;
    label = 4044;
    break;
   }
  }
  $$3$i$i3576 = __Znwj(564) | 0;
 } while (0);
 if ((label | 0) == 4044) {
  $26006 = $$lcssa8$i$i3574 + -4 | 0;
  HEAP32[$$lcssa$i$i3575 >> 2] = $26006;
  $$3$i$i3576 = HEAP32[$26006 >> 2] | 0;
 }
 $26027 = $$3$i$i3576 + 52 | 0;
 HEAP16[$$3$i$i3576 >> 1] = 16;
 HEAP16[$$3$i$i3576 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3576 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3576 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3576 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3576 + 12 >> 2] = 512;
 HEAP32[$$3$i$i3576 + 16 >> 2] = $26027;
 HEAP32[$$3$i$i3576 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3576 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3576 + 48 >> 0] = 0;
 HEAP32[$2132 >> 2] = $$3$i$i3576;
 dest = $26027;
 src = 2608288;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 84 | 0;
 src = 2608320;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 116 | 0;
 src = 2608352;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 148 | 0;
 src = 2608384;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 180 | 0;
 src = 2608416;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 212 | 0;
 src = 2608448;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 244 | 0;
 src = 2608480;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 276 | 0;
 src = 2608512;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 308 | 0;
 src = 2608544;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 340 | 0;
 src = 2608576;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 372 | 0;
 src = 2608608;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 404 | 0;
 src = 2608640;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 436 | 0;
 src = 2608672;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 468 | 0;
 src = 2608704;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 500 | 0;
 src = 2608736;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3576 + 532 | 0;
 src = 2608768;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2132);
 if ($$3$i$i3576 | 0) {
  $26053 = $$3$i$i3576 + 5 | 0;
  $26055 = (HEAP8[$26053 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26053 >> 0] = $26055;
  if (!($26055 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3576);
  HEAP32[$2132 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 201;
 HEAP16[$bitmapData + 2 >> 1] = 680;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 680;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1700) label = 4059; else {
  $26062 = HEAP32[918918] | 0;
  if (($26062 | 0) == (HEAP32[918916] | 0)) label = 4059; else {
   $$lcssa$i$i3551 = 3675672;
   $$lcssa8$i$i3550 = $26062;
   label = 4060;
  }
 }
 do if ((label | 0) == 4059) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1700) {
   $26069 = HEAP32[918924] | 0;
   if (($26069 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3551 = 3675696;
    $$lcssa8$i$i3550 = $26069;
    label = 4060;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1700) {
   $26074 = HEAP32[918930] | 0;
   if (($26074 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3551 = 3675720;
    $$lcssa8$i$i3550 = $26074;
    label = 4060;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1700) {
   $26079 = HEAP32[918936] | 0;
   if (($26079 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3551 = 3675744;
    $$lcssa8$i$i3550 = $26079;
    label = 4060;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1700) {
   $26084 = HEAP32[918942] | 0;
   if (($26084 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3551 = 3675768;
    $$lcssa8$i$i3550 = $26084;
    label = 4060;
    break;
   }
  }
  $$3$i$i3552 = __Znwj(1700) | 0;
 } while (0);
 if ((label | 0) == 4060) {
  $26067 = $$lcssa8$i$i3550 + -4 | 0;
  HEAP32[$$lcssa$i$i3551 >> 2] = $26067;
  $$3$i$i3552 = HEAP32[$26067 >> 2] | 0;
 }
 $26088 = $$3$i$i3552 + 52 | 0;
 HEAP16[$$3$i$i3552 >> 1] = 824;
 HEAP16[$$3$i$i3552 + 2 >> 1] = 1;
 HEAP8[$$3$i$i3552 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3552 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3552 + 8 >> 2] = 1648;
 HEAP32[$$3$i$i3552 + 12 >> 2] = 1648;
 HEAP32[$$3$i$i3552 + 16 >> 2] = $26088;
 HEAP32[$$3$i$i3552 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3552 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3552 + 48 >> 0] = 0;
 HEAP32[$2133 >> 2] = $$3$i$i3552;
 _memcpy($26088 | 0, 2608800, 1648) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2133);
 if ($$3$i$i3552 | 0) {
  $26099 = $$3$i$i3552 + 5 | 0;
  $26101 = (HEAP8[$26099 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26099 >> 0] = $26101;
  if (!($26101 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3552);
  HEAP32[$2133 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 270;
 HEAP16[$bitmapData + 2 >> 1] = 116;
 HEAP16[$bitmapData + 4 >> 1] = 958;
 HEAP16[$bitmapData + 6 >> 1] = 134;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 26348) label = 4075; else {
  $26108 = HEAP32[918918] | 0;
  if (($26108 | 0) == (HEAP32[918916] | 0)) label = 4075; else {
   $$lcssa$i$i3539 = 3675672;
   $$lcssa8$i$i3538 = $26108;
   label = 4076;
  }
 }
 do if ((label | 0) == 4075) {
  if ((HEAP32[918925] | 0) >>> 0 >= 26348) {
   $26115 = HEAP32[918924] | 0;
   if (($26115 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3539 = 3675696;
    $$lcssa8$i$i3538 = $26115;
    label = 4076;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 26348) {
   $26120 = HEAP32[918930] | 0;
   if (($26120 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3539 = 3675720;
    $$lcssa8$i$i3538 = $26120;
    label = 4076;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 26348) {
   $26125 = HEAP32[918936] | 0;
   if (($26125 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3539 = 3675744;
    $$lcssa8$i$i3538 = $26125;
    label = 4076;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 26348) {
   $26130 = HEAP32[918942] | 0;
   if (($26130 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3539 = 3675768;
    $$lcssa8$i$i3538 = $26130;
    label = 4076;
    break;
   }
  }
  $$3$i$i3540 = __Znwj(26348) | 0;
 } while (0);
 if ((label | 0) == 4076) {
  $26113 = $$lcssa8$i$i3538 + -4 | 0;
  HEAP32[$$lcssa$i$i3539 >> 2] = $26113;
  $$3$i$i3540 = HEAP32[$26113 >> 2] | 0;
 }
 $26134 = $$3$i$i3540 + 52 | 0;
 HEAP16[$$3$i$i3540 >> 1] = 692;
 HEAP16[$$3$i$i3540 + 2 >> 1] = 19;
 HEAP8[$$3$i$i3540 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3540 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3540 + 8 >> 2] = 1384;
 HEAP32[$$3$i$i3540 + 12 >> 2] = 26296;
 HEAP32[$$3$i$i3540 + 16 >> 2] = $26134;
 HEAP32[$$3$i$i3540 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3540 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3540 + 48 >> 0] = 0;
 HEAP32[$2134 >> 2] = $$3$i$i3540;
 _memcpy($26134 | 0, 2610448, 1384) | 0;
 _memcpy($$3$i$i3540 + 1436 | 0, 2611832, 1384) | 0;
 _memcpy($$3$i$i3540 + 2820 | 0, 2613216, 1384) | 0;
 _memcpy($$3$i$i3540 + 4204 | 0, 2614600, 1384) | 0;
 _memcpy($$3$i$i3540 + 5588 | 0, 2615984, 1384) | 0;
 _memcpy($$3$i$i3540 + 6972 | 0, 2617368, 1384) | 0;
 _memcpy($$3$i$i3540 + 8356 | 0, 2618752, 1384) | 0;
 _memcpy($$3$i$i3540 + 9740 | 0, 2620136, 1384) | 0;
 _memcpy($$3$i$i3540 + 11124 | 0, 2621520, 1384) | 0;
 _memcpy($$3$i$i3540 + 12508 | 0, 2622904, 1384) | 0;
 _memcpy($$3$i$i3540 + 13892 | 0, 2624288, 1384) | 0;
 _memcpy($$3$i$i3540 + 15276 | 0, 2625672, 1384) | 0;
 _memcpy($$3$i$i3540 + 16660 | 0, 2627056, 1384) | 0;
 _memcpy($$3$i$i3540 + 18044 | 0, 2628440, 1384) | 0;
 _memcpy($$3$i$i3540 + 19428 | 0, 2629824, 1384) | 0;
 _memcpy($$3$i$i3540 + 20812 | 0, 2631208, 1384) | 0;
 _memcpy($$3$i$i3540 + 22196 | 0, 2632592, 1384) | 0;
 _memcpy($$3$i$i3540 + 23580 | 0, 2633976, 1384) | 0;
 _memcpy($$3$i$i3540 + 24964 | 0, 2635360, 1384) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2134);
 if ($$3$i$i3540 | 0) {
  $26163 = $$3$i$i3540 + 5 | 0;
  $26165 = (HEAP8[$26163 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26163 >> 0] = $26165;
  if (!($26165 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3540);
  HEAP32[$2134 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 270;
 HEAP16[$bitmapData + 2 >> 1] = 135;
 HEAP16[$bitmapData + 4 >> 1] = 958;
 HEAP16[$bitmapData + 6 >> 1] = 141;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 9740) label = 4091; else {
  $26172 = HEAP32[918918] | 0;
  if (($26172 | 0) == (HEAP32[918916] | 0)) label = 4091; else {
   $$lcssa$i$i3527 = 3675672;
   $$lcssa8$i$i3526 = $26172;
   label = 4092;
  }
 }
 do if ((label | 0) == 4091) {
  if ((HEAP32[918925] | 0) >>> 0 >= 9740) {
   $26179 = HEAP32[918924] | 0;
   if (($26179 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3527 = 3675696;
    $$lcssa8$i$i3526 = $26179;
    label = 4092;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 9740) {
   $26184 = HEAP32[918930] | 0;
   if (($26184 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3527 = 3675720;
    $$lcssa8$i$i3526 = $26184;
    label = 4092;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 9740) {
   $26189 = HEAP32[918936] | 0;
   if (($26189 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3527 = 3675744;
    $$lcssa8$i$i3526 = $26189;
    label = 4092;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 9740) {
   $26194 = HEAP32[918942] | 0;
   if (($26194 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3527 = 3675768;
    $$lcssa8$i$i3526 = $26194;
    label = 4092;
    break;
   }
  }
  $$3$i$i3528 = __Znwj(9740) | 0;
 } while (0);
 if ((label | 0) == 4092) {
  $26177 = $$lcssa8$i$i3526 + -4 | 0;
  HEAP32[$$lcssa$i$i3527 >> 2] = $26177;
  $$3$i$i3528 = HEAP32[$26177 >> 2] | 0;
 }
 $26198 = $$3$i$i3528 + 52 | 0;
 HEAP16[$$3$i$i3528 >> 1] = 692;
 HEAP16[$$3$i$i3528 + 2 >> 1] = 7;
 HEAP8[$$3$i$i3528 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3528 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3528 + 8 >> 2] = 1384;
 HEAP32[$$3$i$i3528 + 12 >> 2] = 9688;
 HEAP32[$$3$i$i3528 + 16 >> 2] = $26198;
 HEAP32[$$3$i$i3528 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3528 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3528 + 48 >> 0] = 0;
 HEAP32[$2135 >> 2] = $$3$i$i3528;
 _memcpy($26198 | 0, 2636744, 1384) | 0;
 _memcpy($$3$i$i3528 + 1436 | 0, 2638128, 1384) | 0;
 _memcpy($$3$i$i3528 + 2820 | 0, 2639512, 1384) | 0;
 _memcpy($$3$i$i3528 + 4204 | 0, 2640896, 1384) | 0;
 _memcpy($$3$i$i3528 + 5588 | 0, 2642280, 1384) | 0;
 _memcpy($$3$i$i3528 + 6972 | 0, 2643664, 1384) | 0;
 _memcpy($$3$i$i3528 + 8356 | 0, 2645048, 1384) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2135);
 if ($$3$i$i3528 | 0) {
  $26215 = $$3$i$i3528 + 5 | 0;
  $26217 = (HEAP8[$26215 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26215 >> 0] = $26217;
  if (!($26217 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3528);
  HEAP32[$2135 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 213;
 HEAP16[$bitmapData + 2 >> 1] = 105;
 HEAP16[$bitmapData + 4 >> 1] = 260;
 HEAP16[$bitmapData + 6 >> 1] = 132;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2740) label = 4107; else {
  $26224 = HEAP32[918918] | 0;
  if (($26224 | 0) == (HEAP32[918916] | 0)) label = 4107; else {
   $$lcssa$i$i3515 = 3675672;
   $$lcssa8$i$i3514 = $26224;
   label = 4108;
  }
 }
 do if ((label | 0) == 4107) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2740) {
   $26231 = HEAP32[918924] | 0;
   if (($26231 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3515 = 3675696;
    $$lcssa8$i$i3514 = $26231;
    label = 4108;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2740) {
   $26236 = HEAP32[918930] | 0;
   if (($26236 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3515 = 3675720;
    $$lcssa8$i$i3514 = $26236;
    label = 4108;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2740) {
   $26241 = HEAP32[918936] | 0;
   if (($26241 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3515 = 3675744;
    $$lcssa8$i$i3514 = $26241;
    label = 4108;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2740) {
   $26246 = HEAP32[918942] | 0;
   if (($26246 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3515 = 3675768;
    $$lcssa8$i$i3514 = $26246;
    label = 4108;
    break;
   }
  }
  $$3$i$i3516 = __Znwj(2740) | 0;
 } while (0);
 if ((label | 0) == 4108) {
  $26229 = $$lcssa8$i$i3514 + -4 | 0;
  HEAP32[$$lcssa$i$i3515 >> 2] = $26229;
  $$3$i$i3516 = HEAP32[$26229 >> 2] | 0;
 }
 $26250 = $$3$i$i3516 + 52 | 0;
 HEAP16[$$3$i$i3516 >> 1] = 48;
 HEAP16[$$3$i$i3516 + 2 >> 1] = 28;
 HEAP8[$$3$i$i3516 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3516 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3516 + 8 >> 2] = 96;
 HEAP32[$$3$i$i3516 + 12 >> 2] = 2688;
 HEAP32[$$3$i$i3516 + 16 >> 2] = $26250;
 HEAP32[$$3$i$i3516 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3516 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3516 + 48 >> 0] = 0;
 HEAP32[$2136 >> 2] = $$3$i$i3516;
 dest = $26250;
 src = 2646432;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 148 | 0;
 src = 2646528;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 244 | 0;
 src = 2646624;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 340 | 0;
 src = 2646720;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 436 | 0;
 src = 2646816;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 532 | 0;
 src = 2646912;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 628 | 0;
 src = 2647008;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 724 | 0;
 src = 2647104;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 820 | 0;
 src = 2647200;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 916 | 0;
 src = 2647296;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1012 | 0;
 src = 2647392;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1108 | 0;
 src = 2647488;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1204 | 0;
 src = 2647584;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1300 | 0;
 src = 2647680;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1396 | 0;
 src = 2647776;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1492 | 0;
 src = 2647872;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1588 | 0;
 src = 2647968;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1684 | 0;
 src = 2648064;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1780 | 0;
 src = 2648160;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1876 | 0;
 src = 2648256;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 1972 | 0;
 src = 2648352;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 2068 | 0;
 src = 2648448;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 2164 | 0;
 src = 2648544;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 2260 | 0;
 src = 2648640;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 2356 | 0;
 src = 2648736;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 2452 | 0;
 src = 2648832;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 2548 | 0;
 src = 2648928;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3516 + 2644 | 0;
 src = 2649024;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2136);
 if ($$3$i$i3516 | 0) {
  $26288 = $$3$i$i3516 + 5 | 0;
  $26290 = (HEAP8[$26288 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26288 >> 0] = $26290;
  if (!($26290 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3516);
  HEAP32[$2136 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 213;
 HEAP16[$bitmapData + 2 >> 1] = 133;
 HEAP16[$bitmapData + 4 >> 1] = 260;
 HEAP16[$bitmapData + 6 >> 1] = 142;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1012) label = 4123; else {
  $26297 = HEAP32[918918] | 0;
  if (($26297 | 0) == (HEAP32[918916] | 0)) label = 4123; else {
   $$lcssa$i$i3503 = 3675672;
   $$lcssa8$i$i3502 = $26297;
   label = 4124;
  }
 }
 do if ((label | 0) == 4123) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1012) {
   $26304 = HEAP32[918924] | 0;
   if (($26304 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3503 = 3675696;
    $$lcssa8$i$i3502 = $26304;
    label = 4124;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1012) {
   $26309 = HEAP32[918930] | 0;
   if (($26309 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3503 = 3675720;
    $$lcssa8$i$i3502 = $26309;
    label = 4124;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1012) {
   $26314 = HEAP32[918936] | 0;
   if (($26314 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3503 = 3675744;
    $$lcssa8$i$i3502 = $26314;
    label = 4124;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1012) {
   $26319 = HEAP32[918942] | 0;
   if (($26319 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3503 = 3675768;
    $$lcssa8$i$i3502 = $26319;
    label = 4124;
    break;
   }
  }
  $$3$i$i3504 = __Znwj(1012) | 0;
 } while (0);
 if ((label | 0) == 4124) {
  $26302 = $$lcssa8$i$i3502 + -4 | 0;
  HEAP32[$$lcssa$i$i3503 >> 2] = $26302;
  $$3$i$i3504 = HEAP32[$26302 >> 2] | 0;
 }
 $26323 = $$3$i$i3504 + 52 | 0;
 HEAP16[$$3$i$i3504 >> 1] = 48;
 HEAP16[$$3$i$i3504 + 2 >> 1] = 10;
 HEAP8[$$3$i$i3504 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3504 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3504 + 8 >> 2] = 96;
 HEAP32[$$3$i$i3504 + 12 >> 2] = 960;
 HEAP32[$$3$i$i3504 + 16 >> 2] = $26323;
 HEAP32[$$3$i$i3504 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3504 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3504 + 48 >> 0] = 0;
 HEAP32[$2137 >> 2] = $$3$i$i3504;
 dest = $26323;
 src = 2649120;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3504 + 148 | 0;
 src = 2649216;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3504 + 244 | 0;
 src = 2649312;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3504 + 340 | 0;
 src = 2649408;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3504 + 436 | 0;
 src = 2649504;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3504 + 532 | 0;
 src = 2649600;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3504 + 628 | 0;
 src = 2649696;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3504 + 724 | 0;
 src = 2649792;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3504 + 820 | 0;
 src = 2649888;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3504 + 916 | 0;
 src = 2649984;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2137);
 if ($$3$i$i3504 | 0) {
  $26343 = $$3$i$i3504 + 5 | 0;
  $26345 = (HEAP8[$26343 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26343 >> 0] = $26345;
  if (!($26345 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3504);
  HEAP32[$2137 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 213;
 HEAP16[$bitmapData + 2 >> 1] = 143;
 HEAP16[$bitmapData + 4 >> 1] = 260;
 HEAP16[$bitmapData + 6 >> 1] = 143;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 148) label = 4139; else {
  $26352 = HEAP32[918918] | 0;
  if (($26352 | 0) == (HEAP32[918916] | 0)) label = 4139; else {
   $$lcssa$i$i3491 = 3675672;
   $$lcssa8$i$i3490 = $26352;
   label = 4140;
  }
 }
 do if ((label | 0) == 4139) {
  if ((HEAP32[918925] | 0) >>> 0 >= 148) {
   $26359 = HEAP32[918924] | 0;
   if (($26359 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3491 = 3675696;
    $$lcssa8$i$i3490 = $26359;
    label = 4140;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 148) {
   $26364 = HEAP32[918930] | 0;
   if (($26364 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3491 = 3675720;
    $$lcssa8$i$i3490 = $26364;
    label = 4140;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 148) {
   $26369 = HEAP32[918936] | 0;
   if (($26369 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3491 = 3675744;
    $$lcssa8$i$i3490 = $26369;
    label = 4140;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 148) {
   $26374 = HEAP32[918942] | 0;
   if (($26374 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3491 = 3675768;
    $$lcssa8$i$i3490 = $26374;
    label = 4140;
    break;
   }
  }
  $$3$i$i3492 = __Znwj(148) | 0;
 } while (0);
 if ((label | 0) == 4140) {
  $26357 = $$lcssa8$i$i3490 + -4 | 0;
  HEAP32[$$lcssa$i$i3491 >> 2] = $26357;
  $$3$i$i3492 = HEAP32[$26357 >> 2] | 0;
 }
 $26378 = $$3$i$i3492 + 52 | 0;
 HEAP16[$$3$i$i3492 >> 1] = 48;
 HEAP16[$$3$i$i3492 + 2 >> 1] = 1;
 HEAP8[$$3$i$i3492 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3492 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3492 + 8 >> 2] = 96;
 HEAP32[$$3$i$i3492 + 12 >> 2] = 96;
 HEAP32[$$3$i$i3492 + 16 >> 2] = $26378;
 HEAP32[$$3$i$i3492 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3492 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3492 + 48 >> 0] = 0;
 HEAP32[$2138 >> 2] = $$3$i$i3492;
 dest = $26378;
 src = 2650080;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2138);
 if ($$3$i$i3492 | 0) {
  $26389 = $$3$i$i3492 + 5 | 0;
  $26391 = (HEAP8[$26389 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26389 >> 0] = $26391;
  if (!($26391 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3492);
  HEAP32[$2138 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 213;
 HEAP16[$bitmapData + 2 >> 1] = 144;
 HEAP16[$bitmapData + 4 >> 1] = 260;
 HEAP16[$bitmapData + 6 >> 1] = 152;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 916) label = 4155; else {
  $26398 = HEAP32[918918] | 0;
  if (($26398 | 0) == (HEAP32[918916] | 0)) label = 4155; else {
   $$lcssa$i$i3479 = 3675672;
   $$lcssa8$i$i3478 = $26398;
   label = 4156;
  }
 }
 do if ((label | 0) == 4155) {
  if ((HEAP32[918925] | 0) >>> 0 >= 916) {
   $26405 = HEAP32[918924] | 0;
   if (($26405 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3479 = 3675696;
    $$lcssa8$i$i3478 = $26405;
    label = 4156;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 916) {
   $26410 = HEAP32[918930] | 0;
   if (($26410 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3479 = 3675720;
    $$lcssa8$i$i3478 = $26410;
    label = 4156;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 916) {
   $26415 = HEAP32[918936] | 0;
   if (($26415 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3479 = 3675744;
    $$lcssa8$i$i3478 = $26415;
    label = 4156;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 916) {
   $26420 = HEAP32[918942] | 0;
   if (($26420 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3479 = 3675768;
    $$lcssa8$i$i3478 = $26420;
    label = 4156;
    break;
   }
  }
  $$3$i$i3480 = __Znwj(916) | 0;
 } while (0);
 if ((label | 0) == 4156) {
  $26403 = $$lcssa8$i$i3478 + -4 | 0;
  HEAP32[$$lcssa$i$i3479 >> 2] = $26403;
  $$3$i$i3480 = HEAP32[$26403 >> 2] | 0;
 }
 $26424 = $$3$i$i3480 + 52 | 0;
 HEAP16[$$3$i$i3480 >> 1] = 48;
 HEAP16[$$3$i$i3480 + 2 >> 1] = 9;
 HEAP8[$$3$i$i3480 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3480 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3480 + 8 >> 2] = 96;
 HEAP32[$$3$i$i3480 + 12 >> 2] = 864;
 HEAP32[$$3$i$i3480 + 16 >> 2] = $26424;
 HEAP32[$$3$i$i3480 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3480 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3480 + 48 >> 0] = 0;
 HEAP32[$2139 >> 2] = $$3$i$i3480;
 dest = $26424;
 src = 2650176;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3480 + 148 | 0;
 src = 2650272;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3480 + 244 | 0;
 src = 2650368;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3480 + 340 | 0;
 src = 2650464;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3480 + 436 | 0;
 src = 2650560;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3480 + 532 | 0;
 src = 2650656;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3480 + 628 | 0;
 src = 2650752;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3480 + 724 | 0;
 src = 2650848;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3480 + 820 | 0;
 src = 2650944;
 stop = dest + 96 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2139);
 if ($$3$i$i3480 | 0) {
  $26443 = $$3$i$i3480 + 5 | 0;
  $26445 = (HEAP8[$26443 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26443 >> 0] = $26445;
  if (!($26445 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3480);
  HEAP32[$2139 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 201;
 HEAP16[$bitmapData + 2 >> 1] = 160;
 HEAP16[$bitmapData + 4 >> 1] = 1021;
 HEAP16[$bitmapData + 6 >> 1] = 160;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1700) label = 4171; else {
  $26452 = HEAP32[918918] | 0;
  if (($26452 | 0) == (HEAP32[918916] | 0)) label = 4171; else {
   $$lcssa$i$i3467 = 3675672;
   $$lcssa8$i$i3466 = $26452;
   label = 4172;
  }
 }
 do if ((label | 0) == 4171) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1700) {
   $26459 = HEAP32[918924] | 0;
   if (($26459 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3467 = 3675696;
    $$lcssa8$i$i3466 = $26459;
    label = 4172;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1700) {
   $26464 = HEAP32[918930] | 0;
   if (($26464 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3467 = 3675720;
    $$lcssa8$i$i3466 = $26464;
    label = 4172;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1700) {
   $26469 = HEAP32[918936] | 0;
   if (($26469 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3467 = 3675744;
    $$lcssa8$i$i3466 = $26469;
    label = 4172;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1700) {
   $26474 = HEAP32[918942] | 0;
   if (($26474 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3467 = 3675768;
    $$lcssa8$i$i3466 = $26474;
    label = 4172;
    break;
   }
  }
  $$3$i$i3468 = __Znwj(1700) | 0;
 } while (0);
 if ((label | 0) == 4172) {
  $26457 = $$lcssa8$i$i3466 + -4 | 0;
  HEAP32[$$lcssa$i$i3467 >> 2] = $26457;
  $$3$i$i3468 = HEAP32[$26457 >> 2] | 0;
 }
 $26478 = $$3$i$i3468 + 52 | 0;
 HEAP16[$$3$i$i3468 >> 1] = 824;
 HEAP16[$$3$i$i3468 + 2 >> 1] = 1;
 HEAP8[$$3$i$i3468 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3468 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3468 + 8 >> 2] = 1648;
 HEAP32[$$3$i$i3468 + 12 >> 2] = 1648;
 HEAP32[$$3$i$i3468 + 16 >> 2] = $26478;
 HEAP32[$$3$i$i3468 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3468 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3468 + 48 >> 0] = 0;
 HEAP32[$2140 >> 2] = $$3$i$i3468;
 _memcpy($26478 | 0, 2651040, 1648) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2140);
 if ($$3$i$i3468 | 0) {
  $26489 = $$3$i$i3468 + 5 | 0;
  $26491 = (HEAP8[$26489 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26489 >> 0] = $26491;
  if (!($26491 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3468);
  HEAP32[$2140 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 176;
 HEAP16[$bitmapData + 4 >> 1] = 791;
 HEAP16[$bitmapData + 6 >> 1] = 191;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 564) label = 4187; else {
  $26498 = HEAP32[918918] | 0;
  if (($26498 | 0) == (HEAP32[918916] | 0)) label = 4187; else {
   $$lcssa$i$i3455 = 3675672;
   $$lcssa8$i$i3454 = $26498;
   label = 4188;
  }
 }
 do if ((label | 0) == 4187) {
  if ((HEAP32[918925] | 0) >>> 0 >= 564) {
   $26505 = HEAP32[918924] | 0;
   if (($26505 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3455 = 3675696;
    $$lcssa8$i$i3454 = $26505;
    label = 4188;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 564) {
   $26510 = HEAP32[918930] | 0;
   if (($26510 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3455 = 3675720;
    $$lcssa8$i$i3454 = $26510;
    label = 4188;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 564) {
   $26515 = HEAP32[918936] | 0;
   if (($26515 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3455 = 3675744;
    $$lcssa8$i$i3454 = $26515;
    label = 4188;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 564) {
   $26520 = HEAP32[918942] | 0;
   if (($26520 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3455 = 3675768;
    $$lcssa8$i$i3454 = $26520;
    label = 4188;
    break;
   }
  }
  $$3$i$i3456 = __Znwj(564) | 0;
 } while (0);
 if ((label | 0) == 4188) {
  $26503 = $$lcssa8$i$i3454 + -4 | 0;
  HEAP32[$$lcssa$i$i3455 >> 2] = $26503;
  $$3$i$i3456 = HEAP32[$26503 >> 2] | 0;
 }
 $26524 = $$3$i$i3456 + 52 | 0;
 HEAP16[$$3$i$i3456 >> 1] = 16;
 HEAP16[$$3$i$i3456 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3456 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3456 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3456 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3456 + 12 >> 2] = 512;
 HEAP32[$$3$i$i3456 + 16 >> 2] = $26524;
 HEAP32[$$3$i$i3456 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3456 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3456 + 48 >> 0] = 0;
 HEAP32[$2141 >> 2] = $$3$i$i3456;
 dest = $26524;
 src = 2652688;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 84 | 0;
 src = 2652720;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 116 | 0;
 src = 2652752;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 148 | 0;
 src = 2652784;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 180 | 0;
 src = 2652816;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 212 | 0;
 src = 2652848;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 244 | 0;
 src = 2652880;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 276 | 0;
 src = 2652912;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 308 | 0;
 src = 2652944;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 340 | 0;
 src = 2652976;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 372 | 0;
 src = 2653008;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 404 | 0;
 src = 2653040;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 436 | 0;
 src = 2653072;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 468 | 0;
 src = 2653104;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 500 | 0;
 src = 2653136;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3456 + 532 | 0;
 src = 2653168;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2141);
 if ($$3$i$i3456 | 0) {
  $26550 = $$3$i$i3456 + 5 | 0;
  $26552 = (HEAP8[$26550 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26550 >> 0] = $26552;
  if (!($26552 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3456);
  HEAP32[$2141 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 795;
 HEAP16[$bitmapData + 2 >> 1] = 178;
 HEAP16[$bitmapData + 4 >> 1] = 959;
 HEAP16[$bitmapData + 6 >> 1] = 190;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4420) label = 4203; else {
  $26559 = HEAP32[918918] | 0;
  if (($26559 | 0) == (HEAP32[918916] | 0)) label = 4203; else {
   $$lcssa$i$i3443 = 3675672;
   $$lcssa8$i$i3442 = $26559;
   label = 4204;
  }
 }
 do if ((label | 0) == 4203) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4420) {
   $26566 = HEAP32[918924] | 0;
   if (($26566 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3443 = 3675696;
    $$lcssa8$i$i3442 = $26566;
    label = 4204;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4420) {
   $26571 = HEAP32[918930] | 0;
   if (($26571 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3443 = 3675720;
    $$lcssa8$i$i3442 = $26571;
    label = 4204;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4420) {
   $26576 = HEAP32[918936] | 0;
   if (($26576 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3443 = 3675744;
    $$lcssa8$i$i3442 = $26576;
    label = 4204;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4420) {
   $26581 = HEAP32[918942] | 0;
   if (($26581 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3443 = 3675768;
    $$lcssa8$i$i3442 = $26581;
    label = 4204;
    break;
   }
  }
  $$3$i$i3444 = __Znwj(4420) | 0;
 } while (0);
 if ((label | 0) == 4204) {
  $26564 = $$lcssa8$i$i3442 + -4 | 0;
  HEAP32[$$lcssa$i$i3443 >> 2] = $26564;
  $$3$i$i3444 = HEAP32[$26564 >> 2] | 0;
 }
 $26585 = $$3$i$i3444 + 52 | 0;
 HEAP16[$$3$i$i3444 >> 1] = 168;
 HEAP16[$$3$i$i3444 + 2 >> 1] = 13;
 HEAP8[$$3$i$i3444 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3444 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3444 + 8 >> 2] = 336;
 HEAP32[$$3$i$i3444 + 12 >> 2] = 4368;
 HEAP32[$$3$i$i3444 + 16 >> 2] = $26585;
 HEAP32[$$3$i$i3444 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3444 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3444 + 48 >> 0] = 0;
 HEAP32[$2142 >> 2] = $$3$i$i3444;
 _memcpy($26585 | 0, 2653200, 336) | 0;
 _memcpy($$3$i$i3444 + 388 | 0, 2653536, 336) | 0;
 _memcpy($$3$i$i3444 + 724 | 0, 2653872, 336) | 0;
 _memcpy($$3$i$i3444 + 1060 | 0, 2654208, 336) | 0;
 _memcpy($$3$i$i3444 + 1396 | 0, 2654544, 336) | 0;
 _memcpy($$3$i$i3444 + 1732 | 0, 2654880, 336) | 0;
 _memcpy($$3$i$i3444 + 2068 | 0, 2655216, 336) | 0;
 _memcpy($$3$i$i3444 + 2404 | 0, 2655552, 336) | 0;
 _memcpy($$3$i$i3444 + 2740 | 0, 2655888, 336) | 0;
 _memcpy($$3$i$i3444 + 3076 | 0, 2656224, 336) | 0;
 _memcpy($$3$i$i3444 + 3412 | 0, 2656560, 336) | 0;
 _memcpy($$3$i$i3444 + 3748 | 0, 2656896, 336) | 0;
 _memcpy($$3$i$i3444 + 4084 | 0, 2657232, 336) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2142);
 if ($$3$i$i3444 | 0) {
  $26608 = $$3$i$i3444 + 5 | 0;
  $26610 = (HEAP8[$26608 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26608 >> 0] = $26610;
  if (!($26610 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3444);
  HEAP32[$2142 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 192;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 195;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6324) label = 4219; else {
  $26617 = HEAP32[918918] | 0;
  if (($26617 | 0) == (HEAP32[918916] | 0)) label = 4219; else {
   $$lcssa$i$i3431 = 3675672;
   $$lcssa8$i$i3430 = $26617;
   label = 4220;
  }
 }
 do if ((label | 0) == 4219) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6324) {
   $26624 = HEAP32[918924] | 0;
   if (($26624 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3431 = 3675696;
    $$lcssa8$i$i3430 = $26624;
    label = 4220;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6324) {
   $26629 = HEAP32[918930] | 0;
   if (($26629 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3431 = 3675720;
    $$lcssa8$i$i3430 = $26629;
    label = 4220;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6324) {
   $26634 = HEAP32[918936] | 0;
   if (($26634 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3431 = 3675744;
    $$lcssa8$i$i3430 = $26634;
    label = 4220;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6324) {
   $26639 = HEAP32[918942] | 0;
   if (($26639 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3431 = 3675768;
    $$lcssa8$i$i3430 = $26639;
    label = 4220;
    break;
   }
  }
  $$3$i$i3432 = __Znwj(6324) | 0;
 } while (0);
 if ((label | 0) == 4220) {
  $26622 = $$lcssa8$i$i3430 + -4 | 0;
  HEAP32[$$lcssa$i$i3431 >> 2] = $26622;
  $$3$i$i3432 = HEAP32[$26622 >> 2] | 0;
 }
 $26643 = $$3$i$i3432 + 52 | 0;
 HEAP16[$$3$i$i3432 >> 1] = 784;
 HEAP16[$$3$i$i3432 + 2 >> 1] = 4;
 HEAP8[$$3$i$i3432 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3432 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3432 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3432 + 12 >> 2] = 6272;
 HEAP32[$$3$i$i3432 + 16 >> 2] = $26643;
 HEAP32[$$3$i$i3432 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3432 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3432 + 48 >> 0] = 0;
 HEAP32[$2143 >> 2] = $$3$i$i3432;
 _memcpy($26643 | 0, 2657568, 1568) | 0;
 _memcpy($$3$i$i3432 + 1620 | 0, 2659136, 1568) | 0;
 _memcpy($$3$i$i3432 + 3188 | 0, 2660704, 1568) | 0;
 _memcpy($$3$i$i3432 + 4756 | 0, 2662272, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2143);
 if ($$3$i$i3432 | 0) {
  $26657 = $$3$i$i3432 + 5 | 0;
  $26659 = (HEAP8[$26657 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26657 >> 0] = $26659;
  if (!($26659 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3432);
  HEAP32[$2143 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 176;
 HEAP16[$bitmapData + 4 >> 1] = 774;
 HEAP16[$bitmapData + 6 >> 1] = 191;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 18100) label = 4235; else {
  $26666 = HEAP32[918918] | 0;
  if (($26666 | 0) == (HEAP32[918916] | 0)) label = 4235; else {
   $$lcssa$i$i3419 = 3675672;
   $$lcssa8$i$i3418 = $26666;
   label = 4236;
  }
 }
 do if ((label | 0) == 4235) {
  if ((HEAP32[918925] | 0) >>> 0 >= 18100) {
   $26673 = HEAP32[918924] | 0;
   if (($26673 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3419 = 3675696;
    $$lcssa8$i$i3418 = $26673;
    label = 4236;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 18100) {
   $26678 = HEAP32[918930] | 0;
   if (($26678 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3419 = 3675720;
    $$lcssa8$i$i3418 = $26678;
    label = 4236;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 18100) {
   $26683 = HEAP32[918936] | 0;
   if (($26683 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3419 = 3675744;
    $$lcssa8$i$i3418 = $26683;
    label = 4236;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 18100) {
   $26688 = HEAP32[918942] | 0;
   if (($26688 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3419 = 3675768;
    $$lcssa8$i$i3418 = $26688;
    label = 4236;
    break;
   }
  }
  $$3$i$i3420 = __Znwj(18100) | 0;
 } while (0);
 if ((label | 0) == 4236) {
  $26671 = $$lcssa8$i$i3418 + -4 | 0;
  HEAP32[$$lcssa$i$i3419 >> 2] = $26671;
  $$3$i$i3420 = HEAP32[$26671 >> 2] | 0;
 }
 $26692 = $$3$i$i3420 + 52 | 0;
 HEAP16[$$3$i$i3420 >> 1] = 564;
 HEAP16[$$3$i$i3420 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3420 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3420 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3420 + 8 >> 2] = 1128;
 HEAP32[$$3$i$i3420 + 12 >> 2] = 18048;
 HEAP32[$$3$i$i3420 + 16 >> 2] = $26692;
 HEAP32[$$3$i$i3420 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3420 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3420 + 48 >> 0] = 0;
 HEAP32[$2144 >> 2] = $$3$i$i3420;
 _memcpy($26692 | 0, 2663840, 1128) | 0;
 _memcpy($$3$i$i3420 + 1180 | 0, 2664968, 1128) | 0;
 _memcpy($$3$i$i3420 + 2308 | 0, 2666096, 1128) | 0;
 _memcpy($$3$i$i3420 + 3436 | 0, 2667224, 1128) | 0;
 _memcpy($$3$i$i3420 + 4564 | 0, 2668352, 1128) | 0;
 _memcpy($$3$i$i3420 + 5692 | 0, 2669480, 1128) | 0;
 _memcpy($$3$i$i3420 + 6820 | 0, 2670608, 1128) | 0;
 _memcpy($$3$i$i3420 + 7948 | 0, 2671736, 1128) | 0;
 _memcpy($$3$i$i3420 + 9076 | 0, 2672864, 1128) | 0;
 _memcpy($$3$i$i3420 + 10204 | 0, 2673992, 1128) | 0;
 _memcpy($$3$i$i3420 + 11332 | 0, 2675120, 1128) | 0;
 _memcpy($$3$i$i3420 + 12460 | 0, 2676248, 1128) | 0;
 _memcpy($$3$i$i3420 + 13588 | 0, 2677376, 1128) | 0;
 _memcpy($$3$i$i3420 + 14716 | 0, 2678504, 1128) | 0;
 _memcpy($$3$i$i3420 + 15844 | 0, 2679632, 1128) | 0;
 _memcpy($$3$i$i3420 + 16972 | 0, 2680760, 1128) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2144);
 if ($$3$i$i3420 | 0) {
  $26718 = $$3$i$i3420 + 5 | 0;
  $26720 = (HEAP8[$26718 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26718 >> 0] = $26720;
  if (!($26720 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3420);
  HEAP32[$2144 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 991;
 HEAP16[$bitmapData + 2 >> 1] = 176;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 191;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 180) label = 4251; else {
  $26727 = HEAP32[918918] | 0;
  if (($26727 | 0) == (HEAP32[918916] | 0)) label = 4251; else {
   $$lcssa$i$i3407 = 3675672;
   $$lcssa8$i$i3406 = $26727;
   label = 4252;
  }
 }
 do if ((label | 0) == 4251) {
  if ((HEAP32[918925] | 0) >>> 0 >= 180) {
   $26734 = HEAP32[918924] | 0;
   if (($26734 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3407 = 3675696;
    $$lcssa8$i$i3406 = $26734;
    label = 4252;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 180) {
   $26739 = HEAP32[918930] | 0;
   if (($26739 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3407 = 3675720;
    $$lcssa8$i$i3406 = $26739;
    label = 4252;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 180) {
   $26744 = HEAP32[918936] | 0;
   if (($26744 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3407 = 3675744;
    $$lcssa8$i$i3406 = $26744;
    label = 4252;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 180) {
   $26749 = HEAP32[918942] | 0;
   if (($26749 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3407 = 3675768;
    $$lcssa8$i$i3406 = $26749;
    label = 4252;
    break;
   }
  }
  $$3$i$i3408 = __Znwj(180) | 0;
 } while (0);
 if ((label | 0) == 4252) {
  $26732 = $$lcssa8$i$i3406 + -4 | 0;
  HEAP32[$$lcssa$i$i3407 >> 2] = $26732;
  $$3$i$i3408 = HEAP32[$26732 >> 2] | 0;
 }
 $26753 = $$3$i$i3408 + 52 | 0;
 HEAP16[$$3$i$i3408 >> 1] = 4;
 HEAP16[$$3$i$i3408 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3408 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3408 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3408 + 8 >> 2] = 8;
 HEAP32[$$3$i$i3408 + 12 >> 2] = 128;
 HEAP32[$$3$i$i3408 + 16 >> 2] = $26753;
 HEAP32[$$3$i$i3408 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3408 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3408 + 48 >> 0] = 0;
 HEAP32[$2145 >> 2] = $$3$i$i3408;
 $26763 = $26753;
 $26764 = $26763;
 HEAP8[$26764 >> 0] = -419701030;
 HEAP8[$26764 + 1 >> 0] = -419701030 >> 8;
 HEAP8[$26764 + 2 >> 0] = -419701030 >> 16;
 HEAP8[$26764 + 3 >> 0] = -419701030 >> 24;
 $26766 = $26763 + 4 | 0;
 HEAP8[$26766 >> 0] = -419698982;
 HEAP8[$26766 + 1 >> 0] = -419698982 >> 8;
 HEAP8[$26766 + 2 >> 0] = -419698982 >> 16;
 HEAP8[$26766 + 3 >> 0] = -419698982 >> 24;
 $26768 = $$3$i$i3408 + 60 | 0;
 $26769 = $26768;
 HEAP8[$26769 >> 0] = -419764485;
 HEAP8[$26769 + 1 >> 0] = -419764485 >> 8;
 HEAP8[$26769 + 2 >> 0] = -419764485 >> 16;
 HEAP8[$26769 + 3 >> 0] = -419764485 >> 24;
 $26771 = $26768 + 4 | 0;
 HEAP8[$26771 >> 0] = -553982213;
 HEAP8[$26771 + 1 >> 0] = -553982213 >> 8;
 HEAP8[$26771 + 2 >> 0] = -553982213 >> 16;
 HEAP8[$26771 + 3 >> 0] = -553982213 >> 24;
 $26773 = $$3$i$i3408 + 68 | 0;
 $26774 = $26773;
 HEAP8[$26774 >> 0] = -417601797;
 HEAP8[$26774 + 1 >> 0] = -417601797 >> 8;
 HEAP8[$26774 + 2 >> 0] = -417601797 >> 16;
 HEAP8[$26774 + 3 >> 0] = -417601797 >> 24;
 $26776 = $26773 + 4 | 0;
 HEAP8[$26776 >> 0] = -417601797;
 HEAP8[$26776 + 1 >> 0] = -417601797 >> 8;
 HEAP8[$26776 + 2 >> 0] = -417601797 >> 16;
 HEAP8[$26776 + 3 >> 0] = -417601797 >> 24;
 $26778 = $$3$i$i3408 + 76 | 0;
 $26779 = $26778;
 HEAP8[$26779 >> 0] = -417601765;
 HEAP8[$26779 + 1 >> 0] = -417601765 >> 8;
 HEAP8[$26779 + 2 >> 0] = -417601765 >> 16;
 HEAP8[$26779 + 3 >> 0] = -417601765 >> 24;
 $26781 = $26778 + 4 | 0;
 HEAP8[$26781 >> 0] = -417601765;
 HEAP8[$26781 + 1 >> 0] = -417601765 >> 8;
 HEAP8[$26781 + 2 >> 0] = -417601765 >> 16;
 HEAP8[$26781 + 3 >> 0] = -417601765 >> 24;
 $26783 = $$3$i$i3408 + 84 | 0;
 $26784 = $26783;
 HEAP8[$26784 >> 0] = -281221349;
 HEAP8[$26784 + 1 >> 0] = -281221349 >> 8;
 HEAP8[$26784 + 2 >> 0] = -281221349 >> 16;
 HEAP8[$26784 + 3 >> 0] = -281221349 >> 24;
 $26786 = $26783 + 4 | 0;
 HEAP8[$26786 >> 0] = -281221348;
 HEAP8[$26786 + 1 >> 0] = -281221348 >> 8;
 HEAP8[$26786 + 2 >> 0] = -281221348 >> 16;
 HEAP8[$26786 + 3 >> 0] = -281221348 >> 24;
 $26788 = $$3$i$i3408 + 92 | 0;
 $26789 = $26788;
 HEAP8[$26789 >> 0] = -415436996;
 HEAP8[$26789 + 1 >> 0] = -415436996 >> 8;
 HEAP8[$26789 + 2 >> 0] = -415436996 >> 16;
 HEAP8[$26789 + 3 >> 0] = -415436996 >> 24;
 $26791 = $26788 + 4 | 0;
 HEAP8[$26791 >> 0] = -415502532;
 HEAP8[$26791 + 1 >> 0] = -415502532 >> 8;
 HEAP8[$26791 + 2 >> 0] = -415502532 >> 16;
 HEAP8[$26791 + 3 >> 0] = -415502532 >> 24;
 $26793 = $$3$i$i3408 + 100 | 0;
 $26794 = $26793;
 HEAP8[$26794 >> 0] = -279122116;
 HEAP8[$26794 + 1 >> 0] = -279122116 >> 8;
 HEAP8[$26794 + 2 >> 0] = -279122116 >> 16;
 HEAP8[$26794 + 3 >> 0] = -279122116 >> 24;
 $26796 = $26793 + 4 | 0;
 HEAP8[$26796 >> 0] = -279056580;
 HEAP8[$26796 + 1 >> 0] = -279056580 >> 8;
 HEAP8[$26796 + 2 >> 0] = -279056580 >> 16;
 HEAP8[$26796 + 3 >> 0] = -279056580 >> 24;
 $26798 = $$3$i$i3408 + 108 | 0;
 $26799 = $26798;
 HEAP8[$26799 >> 0] = -279122083;
 HEAP8[$26799 + 1 >> 0] = -279122083 >> 8;
 HEAP8[$26799 + 2 >> 0] = -279122083 >> 16;
 HEAP8[$26799 + 3 >> 0] = -279122083 >> 24;
 $26801 = $26798 + 4 | 0;
 HEAP8[$26801 >> 0] = -279122083;
 HEAP8[$26801 + 1 >> 0] = -279122083 >> 8;
 HEAP8[$26801 + 2 >> 0] = -279122083 >> 16;
 HEAP8[$26801 + 3 >> 0] = -279122083 >> 24;
 $26803 = $$3$i$i3408 + 116 | 0;
 $26804 = $26803;
 HEAP8[$26804 >> 0] = -142741667;
 HEAP8[$26804 + 1 >> 0] = -142741667 >> 8;
 HEAP8[$26804 + 2 >> 0] = -142741667 >> 16;
 HEAP8[$26804 + 3 >> 0] = -142741667 >> 24;
 $26806 = $26803 + 4 | 0;
 HEAP8[$26806 >> 0] = -142741667;
 HEAP8[$26806 + 1 >> 0] = -142741667 >> 8;
 HEAP8[$26806 + 2 >> 0] = -142741667 >> 16;
 HEAP8[$26806 + 3 >> 0] = -142741667 >> 24;
 $26808 = $$3$i$i3408 + 124 | 0;
 $26809 = $26808;
 HEAP8[$26809 >> 0] = -279054467;
 HEAP8[$26809 + 1 >> 0] = -279054467 >> 8;
 HEAP8[$26809 + 2 >> 0] = -279054467 >> 16;
 HEAP8[$26809 + 3 >> 0] = -279054467 >> 24;
 $26811 = $26808 + 4 | 0;
 HEAP8[$26811 >> 0] = -279054467;
 HEAP8[$26811 + 1 >> 0] = -279054467 >> 8;
 HEAP8[$26811 + 2 >> 0] = -279054467 >> 16;
 HEAP8[$26811 + 3 >> 0] = -279054467 >> 24;
 $26813 = $$3$i$i3408 + 132 | 0;
 $26814 = $26813;
 HEAP8[$26814 >> 0] = -140576899;
 HEAP8[$26814 + 1 >> 0] = -140576899 >> 8;
 HEAP8[$26814 + 2 >> 0] = -140576899 >> 16;
 HEAP8[$26814 + 3 >> 0] = -140576899 >> 24;
 $26816 = $26813 + 4 | 0;
 HEAP8[$26816 >> 0] = -140576899;
 HEAP8[$26816 + 1 >> 0] = -140576899 >> 8;
 HEAP8[$26816 + 2 >> 0] = -140576899 >> 16;
 HEAP8[$26816 + 3 >> 0] = -140576899 >> 24;
 $26818 = $$3$i$i3408 + 140 | 0;
 $26819 = $26818;
 HEAP8[$26819 >> 0] = -142739554;
 HEAP8[$26819 + 1 >> 0] = -142739554 >> 8;
 HEAP8[$26819 + 2 >> 0] = -142739554 >> 16;
 HEAP8[$26819 + 3 >> 0] = -142739554 >> 24;
 $26821 = $26818 + 4 | 0;
 HEAP8[$26821 >> 0] = -142739554;
 HEAP8[$26821 + 1 >> 0] = -142739554 >> 8;
 HEAP8[$26821 + 2 >> 0] = -142739554 >> 16;
 HEAP8[$26821 + 3 >> 0] = -142739554 >> 24;
 $26823 = $$3$i$i3408 + 148 | 0;
 $26824 = $26823;
 HEAP8[$26824 >> 0] = -4261986;
 HEAP8[$26824 + 1 >> 0] = -4261986 >> 8;
 HEAP8[$26824 + 2 >> 0] = -4261986 >> 16;
 HEAP8[$26824 + 3 >> 0] = -4261986 >> 24;
 $26826 = $26823 + 4 | 0;
 HEAP8[$26826 >> 0] = -4261986;
 HEAP8[$26826 + 1 >> 0] = -4261986 >> 8;
 HEAP8[$26826 + 2 >> 0] = -4261986 >> 16;
 HEAP8[$26826 + 3 >> 0] = -4261986 >> 24;
 $26828 = $$3$i$i3408 + 156 | 0;
 $26829 = $26828;
 HEAP8[$26829 >> 0] = -140574786;
 HEAP8[$26829 + 1 >> 0] = -140574786 >> 8;
 HEAP8[$26829 + 2 >> 0] = -140574786 >> 16;
 HEAP8[$26829 + 3 >> 0] = -140574786 >> 24;
 $26831 = $26828 + 4 | 0;
 HEAP8[$26831 >> 0] = -140574786;
 HEAP8[$26831 + 1 >> 0] = -140574786 >> 8;
 HEAP8[$26831 + 2 >> 0] = -140574786 >> 16;
 HEAP8[$26831 + 3 >> 0] = -140574786 >> 24;
 $26833 = $$3$i$i3408 + 164 | 0;
 $26834 = $26833;
 HEAP8[$26834 >> 0] = -2097218;
 HEAP8[$26834 + 1 >> 0] = -2097218 >> 8;
 HEAP8[$26834 + 2 >> 0] = -2097218 >> 16;
 HEAP8[$26834 + 3 >> 0] = -2097218 >> 24;
 $26836 = $26833 + 4 | 0;
 HEAP8[$26836 >> 0] = -2097218;
 HEAP8[$26836 + 1 >> 0] = -2097218 >> 8;
 HEAP8[$26836 + 2 >> 0] = -2097218 >> 16;
 HEAP8[$26836 + 3 >> 0] = -2097218 >> 24;
 $26838 = $$3$i$i3408 + 172 | 0;
 $26839 = $26838;
 HEAP8[$26839 >> 0] = -4259873;
 HEAP8[$26839 + 1 >> 0] = -4259873 >> 8;
 HEAP8[$26839 + 2 >> 0] = -4259873 >> 16;
 HEAP8[$26839 + 3 >> 0] = -4259873 >> 24;
 $26841 = $26838 + 4 | 0;
 HEAP8[$26841 >> 0] = -4259873;
 HEAP8[$26841 + 1 >> 0] = -4259873 >> 8;
 HEAP8[$26841 + 2 >> 0] = -4259873 >> 16;
 HEAP8[$26841 + 3 >> 0] = -4259873 >> 24;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2145);
 if ($$3$i$i3408 | 0) {
  $26843 = $$3$i$i3408 + 5 | 0;
  $26845 = (HEAP8[$26843 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26843 >> 0] = $26845;
  if (!($26845 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3408);
  HEAP32[$2145 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 172;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 175;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6324) label = 4267; else {
  $26852 = HEAP32[918918] | 0;
  if (($26852 | 0) == (HEAP32[918916] | 0)) label = 4267; else {
   $$lcssa$i$i3395 = 3675672;
   $$lcssa8$i$i3394 = $26852;
   label = 4268;
  }
 }
 do if ((label | 0) == 4267) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6324) {
   $26859 = HEAP32[918924] | 0;
   if (($26859 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3395 = 3675696;
    $$lcssa8$i$i3394 = $26859;
    label = 4268;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6324) {
   $26864 = HEAP32[918930] | 0;
   if (($26864 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3395 = 3675720;
    $$lcssa8$i$i3394 = $26864;
    label = 4268;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6324) {
   $26869 = HEAP32[918936] | 0;
   if (($26869 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3395 = 3675744;
    $$lcssa8$i$i3394 = $26869;
    label = 4268;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6324) {
   $26874 = HEAP32[918942] | 0;
   if (($26874 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3395 = 3675768;
    $$lcssa8$i$i3394 = $26874;
    label = 4268;
    break;
   }
  }
  $$3$i$i3396 = __Znwj(6324) | 0;
 } while (0);
 if ((label | 0) == 4268) {
  $26857 = $$lcssa8$i$i3394 + -4 | 0;
  HEAP32[$$lcssa$i$i3395 >> 2] = $26857;
  $$3$i$i3396 = HEAP32[$26857 >> 2] | 0;
 }
 $26878 = $$3$i$i3396 + 52 | 0;
 HEAP16[$$3$i$i3396 >> 1] = 784;
 HEAP16[$$3$i$i3396 + 2 >> 1] = 4;
 HEAP8[$$3$i$i3396 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3396 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3396 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3396 + 12 >> 2] = 6272;
 HEAP32[$$3$i$i3396 + 16 >> 2] = $26878;
 HEAP32[$$3$i$i3396 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3396 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3396 + 48 >> 0] = 0;
 HEAP32[$2146 >> 2] = $$3$i$i3396;
 _memcpy($26878 | 0, 2681888, 1568) | 0;
 _memcpy($$3$i$i3396 + 1620 | 0, 2683456, 1568) | 0;
 _memcpy($$3$i$i3396 + 3188 | 0, 2685024, 1568) | 0;
 _memcpy($$3$i$i3396 + 4756 | 0, 2686592, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2146);
 if ($$3$i$i3396 | 0) {
  $26892 = $$3$i$i3396 + 5 | 0;
  $26894 = (HEAP8[$26892 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26892 >> 0] = $26894;
  if (!($26894 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3396);
  HEAP32[$2146 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 222;
 HEAP16[$bitmapData + 2 >> 1] = 207;
 HEAP16[$bitmapData + 4 >> 1] = 768;
 HEAP16[$bitmapData + 6 >> 1] = 227;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 23068) label = 4283; else {
  $26901 = HEAP32[918918] | 0;
  if (($26901 | 0) == (HEAP32[918916] | 0)) label = 4283; else {
   $$lcssa$i$i3383 = 3675672;
   $$lcssa8$i$i3382 = $26901;
   label = 4284;
  }
 }
 do if ((label | 0) == 4283) {
  if ((HEAP32[918925] | 0) >>> 0 >= 23068) {
   $26908 = HEAP32[918924] | 0;
   if (($26908 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3383 = 3675696;
    $$lcssa8$i$i3382 = $26908;
    label = 4284;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 23068) {
   $26913 = HEAP32[918930] | 0;
   if (($26913 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3383 = 3675720;
    $$lcssa8$i$i3382 = $26913;
    label = 4284;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 23068) {
   $26918 = HEAP32[918936] | 0;
   if (($26918 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3383 = 3675744;
    $$lcssa8$i$i3382 = $26918;
    label = 4284;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 23068) {
   $26923 = HEAP32[918942] | 0;
   if (($26923 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3383 = 3675768;
    $$lcssa8$i$i3382 = $26923;
    label = 4284;
    break;
   }
  }
  $$3$i$i3384 = __Znwj(23068) | 0;
 } while (0);
 if ((label | 0) == 4284) {
  $26906 = $$lcssa8$i$i3382 + -4 | 0;
  HEAP32[$$lcssa$i$i3383 >> 2] = $26906;
  $$3$i$i3384 = HEAP32[$26906 >> 2] | 0;
 }
 $26927 = $$3$i$i3384 + 52 | 0;
 HEAP16[$$3$i$i3384 >> 1] = 548;
 HEAP16[$$3$i$i3384 + 2 >> 1] = 21;
 HEAP8[$$3$i$i3384 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3384 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3384 + 8 >> 2] = 1096;
 HEAP32[$$3$i$i3384 + 12 >> 2] = 23016;
 HEAP32[$$3$i$i3384 + 16 >> 2] = $26927;
 HEAP32[$$3$i$i3384 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3384 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3384 + 48 >> 0] = 0;
 HEAP32[$2147 >> 2] = $$3$i$i3384;
 _memcpy($26927 | 0, 2688160, 1096) | 0;
 _memcpy($$3$i$i3384 + 1148 | 0, 2689256, 1096) | 0;
 _memcpy($$3$i$i3384 + 2244 | 0, 2690352, 1096) | 0;
 _memcpy($$3$i$i3384 + 3340 | 0, 2691448, 1096) | 0;
 _memcpy($$3$i$i3384 + 4436 | 0, 2692544, 1096) | 0;
 _memcpy($$3$i$i3384 + 5532 | 0, 2693640, 1096) | 0;
 _memcpy($$3$i$i3384 + 6628 | 0, 2694736, 1096) | 0;
 _memcpy($$3$i$i3384 + 7724 | 0, 2695832, 1096) | 0;
 _memcpy($$3$i$i3384 + 8820 | 0, 2696928, 1096) | 0;
 _memcpy($$3$i$i3384 + 9916 | 0, 2698024, 1096) | 0;
 _memcpy($$3$i$i3384 + 11012 | 0, 2699120, 1096) | 0;
 _memcpy($$3$i$i3384 + 12108 | 0, 2700216, 1096) | 0;
 _memcpy($$3$i$i3384 + 13204 | 0, 2701312, 1096) | 0;
 _memcpy($$3$i$i3384 + 14300 | 0, 2702408, 1096) | 0;
 _memcpy($$3$i$i3384 + 15396 | 0, 2703504, 1096) | 0;
 _memcpy($$3$i$i3384 + 16492 | 0, 2704600, 1096) | 0;
 _memcpy($$3$i$i3384 + 17588 | 0, 2705696, 1096) | 0;
 _memcpy($$3$i$i3384 + 18684 | 0, 2706792, 1096) | 0;
 _memcpy($$3$i$i3384 + 19780 | 0, 2707888, 1096) | 0;
 _memcpy($$3$i$i3384 + 20876 | 0, 2708984, 1096) | 0;
 _memcpy($$3$i$i3384 + 21972 | 0, 2710080, 1096) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2147);
 if ($$3$i$i3384 | 0) {
  $26958 = $$3$i$i3384 + 5 | 0;
  $26960 = (HEAP8[$26958 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$26958 >> 0] = $26960;
  if (!($26960 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3384);
  HEAP32[$2147 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 384;
 HEAP16[$bitmapData + 4 >> 1] = 530;
 HEAP16[$bitmapData + 6 >> 1] = 409;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 16068) label = 4299; else {
  $26967 = HEAP32[918918] | 0;
  if (($26967 | 0) == (HEAP32[918916] | 0)) label = 4299; else {
   $$lcssa$i$i3371 = 3675672;
   $$lcssa8$i$i3370 = $26967;
   label = 4300;
  }
 }
 do if ((label | 0) == 4299) {
  if ((HEAP32[918925] | 0) >>> 0 >= 16068) {
   $26974 = HEAP32[918924] | 0;
   if (($26974 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3371 = 3675696;
    $$lcssa8$i$i3370 = $26974;
    label = 4300;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 16068) {
   $26979 = HEAP32[918930] | 0;
   if (($26979 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3371 = 3675720;
    $$lcssa8$i$i3370 = $26979;
    label = 4300;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 16068) {
   $26984 = HEAP32[918936] | 0;
   if (($26984 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3371 = 3675744;
    $$lcssa8$i$i3370 = $26984;
    label = 4300;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 16068) {
   $26989 = HEAP32[918942] | 0;
   if (($26989 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3371 = 3675768;
    $$lcssa8$i$i3370 = $26989;
    label = 4300;
    break;
   }
  }
  $$3$i$i3372 = __Znwj(16068) | 0;
 } while (0);
 if ((label | 0) == 4300) {
  $26972 = $$lcssa8$i$i3370 + -4 | 0;
  HEAP32[$$lcssa$i$i3371 >> 2] = $26972;
  $$3$i$i3372 = HEAP32[$26972 >> 2] | 0;
 }
 $26993 = $$3$i$i3372 + 52 | 0;
 HEAP16[$$3$i$i3372 >> 1] = 308;
 HEAP16[$$3$i$i3372 + 2 >> 1] = 26;
 HEAP8[$$3$i$i3372 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3372 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3372 + 8 >> 2] = 616;
 HEAP32[$$3$i$i3372 + 12 >> 2] = 16016;
 HEAP32[$$3$i$i3372 + 16 >> 2] = $26993;
 HEAP32[$$3$i$i3372 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3372 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3372 + 48 >> 0] = 0;
 HEAP32[$2148 >> 2] = $$3$i$i3372;
 _memcpy($26993 | 0, 2711176, 616) | 0;
 _memcpy($$3$i$i3372 + 668 | 0, 2711792, 616) | 0;
 _memcpy($$3$i$i3372 + 1284 | 0, 2712408, 616) | 0;
 _memcpy($$3$i$i3372 + 1900 | 0, 2713024, 616) | 0;
 _memcpy($$3$i$i3372 + 2516 | 0, 2713640, 616) | 0;
 _memcpy($$3$i$i3372 + 3132 | 0, 2714256, 616) | 0;
 _memcpy($$3$i$i3372 + 3748 | 0, 2714872, 616) | 0;
 _memcpy($$3$i$i3372 + 4364 | 0, 2715488, 616) | 0;
 _memcpy($$3$i$i3372 + 4980 | 0, 2716104, 616) | 0;
 _memcpy($$3$i$i3372 + 5596 | 0, 2716720, 616) | 0;
 _memcpy($$3$i$i3372 + 6212 | 0, 2717336, 616) | 0;
 _memcpy($$3$i$i3372 + 6828 | 0, 2717952, 616) | 0;
 _memcpy($$3$i$i3372 + 7444 | 0, 2718568, 616) | 0;
 _memcpy($$3$i$i3372 + 8060 | 0, 2719184, 616) | 0;
 _memcpy($$3$i$i3372 + 8676 | 0, 2719800, 616) | 0;
 _memcpy($$3$i$i3372 + 9292 | 0, 2720416, 616) | 0;
 _memcpy($$3$i$i3372 + 9908 | 0, 2721032, 616) | 0;
 _memcpy($$3$i$i3372 + 10524 | 0, 2721648, 616) | 0;
 _memcpy($$3$i$i3372 + 11140 | 0, 2722264, 616) | 0;
 _memcpy($$3$i$i3372 + 11756 | 0, 2722880, 616) | 0;
 _memcpy($$3$i$i3372 + 12372 | 0, 2723496, 616) | 0;
 _memcpy($$3$i$i3372 + 12988 | 0, 2724112, 616) | 0;
 _memcpy($$3$i$i3372 + 13604 | 0, 2724728, 616) | 0;
 _memcpy($$3$i$i3372 + 14220 | 0, 2725344, 616) | 0;
 _memcpy($$3$i$i3372 + 14836 | 0, 2725960, 616) | 0;
 _memcpy($$3$i$i3372 + 15452 | 0, 2726576, 616) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2148);
 if ($$3$i$i3372 | 0) {
  $27029 = $$3$i$i3372 + 5 | 0;
  $27031 = (HEAP8[$27029 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27029 >> 0] = $27031;
  if (!($27031 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3372);
  HEAP32[$2148 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 410;
 HEAP16[$bitmapData + 4 >> 1] = 530;
 HEAP16[$bitmapData + 6 >> 1] = 415;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 3748) label = 4315; else {
  $27038 = HEAP32[918918] | 0;
  if (($27038 | 0) == (HEAP32[918916] | 0)) label = 4315; else {
   $$lcssa$i$i3359 = 3675672;
   $$lcssa8$i$i3358 = $27038;
   label = 4316;
  }
 }
 do if ((label | 0) == 4315) {
  if ((HEAP32[918925] | 0) >>> 0 >= 3748) {
   $27045 = HEAP32[918924] | 0;
   if (($27045 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3359 = 3675696;
    $$lcssa8$i$i3358 = $27045;
    label = 4316;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 3748) {
   $27050 = HEAP32[918930] | 0;
   if (($27050 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3359 = 3675720;
    $$lcssa8$i$i3358 = $27050;
    label = 4316;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 3748) {
   $27055 = HEAP32[918936] | 0;
   if (($27055 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3359 = 3675744;
    $$lcssa8$i$i3358 = $27055;
    label = 4316;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 3748) {
   $27060 = HEAP32[918942] | 0;
   if (($27060 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3359 = 3675768;
    $$lcssa8$i$i3358 = $27060;
    label = 4316;
    break;
   }
  }
  $$3$i$i3360 = __Znwj(3748) | 0;
 } while (0);
 if ((label | 0) == 4316) {
  $27043 = $$lcssa8$i$i3358 + -4 | 0;
  HEAP32[$$lcssa$i$i3359 >> 2] = $27043;
  $$3$i$i3360 = HEAP32[$27043 >> 2] | 0;
 }
 $27064 = $$3$i$i3360 + 52 | 0;
 HEAP16[$$3$i$i3360 >> 1] = 308;
 HEAP16[$$3$i$i3360 + 2 >> 1] = 6;
 HEAP8[$$3$i$i3360 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3360 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3360 + 8 >> 2] = 616;
 HEAP32[$$3$i$i3360 + 12 >> 2] = 3696;
 HEAP32[$$3$i$i3360 + 16 >> 2] = $27064;
 HEAP32[$$3$i$i3360 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3360 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3360 + 48 >> 0] = 0;
 HEAP32[$2149 >> 2] = $$3$i$i3360;
 _memcpy($27064 | 0, 2727192, 616) | 0;
 _memcpy($$3$i$i3360 + 668 | 0, 2727808, 616) | 0;
 _memcpy($$3$i$i3360 + 1284 | 0, 2728424, 616) | 0;
 _memcpy($$3$i$i3360 + 1900 | 0, 2729040, 616) | 0;
 _memcpy($$3$i$i3360 + 2516 | 0, 2729656, 616) | 0;
 _memcpy($$3$i$i3360 + 3132 | 0, 2730272, 616) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2149);
 if ($$3$i$i3360 | 0) {
  $27080 = $$3$i$i3360 + 5 | 0;
  $27082 = (HEAP8[$27080 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27080 >> 0] = $27082;
  if (!($27082 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3360);
  HEAP32[$2149 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 228;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 253;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 16900) label = 4331; else {
  $27089 = HEAP32[918918] | 0;
  if (($27089 | 0) == (HEAP32[918916] | 0)) label = 4331; else {
   $$lcssa$i$i3347 = 3675672;
   $$lcssa8$i$i3346 = $27089;
   label = 4332;
  }
 }
 do if ((label | 0) == 4331) {
  if ((HEAP32[918925] | 0) >>> 0 >= 16900) {
   $27096 = HEAP32[918924] | 0;
   if (($27096 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3347 = 3675696;
    $$lcssa8$i$i3346 = $27096;
    label = 4332;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 16900) {
   $27101 = HEAP32[918930] | 0;
   if (($27101 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3347 = 3675720;
    $$lcssa8$i$i3346 = $27101;
    label = 4332;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 16900) {
   $27106 = HEAP32[918936] | 0;
   if (($27106 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3347 = 3675744;
    $$lcssa8$i$i3346 = $27106;
    label = 4332;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 16900) {
   $27111 = HEAP32[918942] | 0;
   if (($27111 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3347 = 3675768;
    $$lcssa8$i$i3346 = $27111;
    label = 4332;
    break;
   }
  }
  $$3$i$i3348 = __Znwj(16900) | 0;
 } while (0);
 if ((label | 0) == 4332) {
  $27094 = $$lcssa8$i$i3346 + -4 | 0;
  HEAP32[$$lcssa$i$i3347 >> 2] = $27094;
  $$3$i$i3348 = HEAP32[$27094 >> 2] | 0;
 }
 $27115 = $$3$i$i3348 + 52 | 0;
 HEAP16[$$3$i$i3348 >> 1] = 324;
 HEAP16[$$3$i$i3348 + 2 >> 1] = 26;
 HEAP8[$$3$i$i3348 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3348 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3348 + 8 >> 2] = 648;
 HEAP32[$$3$i$i3348 + 12 >> 2] = 16848;
 HEAP32[$$3$i$i3348 + 16 >> 2] = $27115;
 HEAP32[$$3$i$i3348 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3348 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3348 + 48 >> 0] = 0;
 HEAP32[$2150 >> 2] = $$3$i$i3348;
 _memcpy($27115 | 0, 2730888, 648) | 0;
 _memcpy($$3$i$i3348 + 700 | 0, 2731536, 648) | 0;
 _memcpy($$3$i$i3348 + 1348 | 0, 2732184, 648) | 0;
 _memcpy($$3$i$i3348 + 1996 | 0, 2732832, 648) | 0;
 _memcpy($$3$i$i3348 + 2644 | 0, 2733480, 648) | 0;
 _memcpy($$3$i$i3348 + 3292 | 0, 2734128, 648) | 0;
 _memcpy($$3$i$i3348 + 3940 | 0, 2734776, 648) | 0;
 _memcpy($$3$i$i3348 + 4588 | 0, 2735424, 648) | 0;
 _memcpy($$3$i$i3348 + 5236 | 0, 2736072, 648) | 0;
 _memcpy($$3$i$i3348 + 5884 | 0, 2736720, 648) | 0;
 _memcpy($$3$i$i3348 + 6532 | 0, 2737368, 648) | 0;
 _memcpy($$3$i$i3348 + 7180 | 0, 2738016, 648) | 0;
 _memcpy($$3$i$i3348 + 7828 | 0, 2738664, 648) | 0;
 _memcpy($$3$i$i3348 + 8476 | 0, 2739312, 648) | 0;
 _memcpy($$3$i$i3348 + 9124 | 0, 2739960, 648) | 0;
 _memcpy($$3$i$i3348 + 9772 | 0, 2740608, 648) | 0;
 _memcpy($$3$i$i3348 + 10420 | 0, 2741256, 648) | 0;
 _memcpy($$3$i$i3348 + 11068 | 0, 2741904, 648) | 0;
 _memcpy($$3$i$i3348 + 11716 | 0, 2742552, 648) | 0;
 _memcpy($$3$i$i3348 + 12364 | 0, 2743200, 648) | 0;
 _memcpy($$3$i$i3348 + 13012 | 0, 2743848, 648) | 0;
 _memcpy($$3$i$i3348 + 13660 | 0, 2744496, 648) | 0;
 _memcpy($$3$i$i3348 + 14308 | 0, 2745144, 648) | 0;
 _memcpy($$3$i$i3348 + 14956 | 0, 2745792, 648) | 0;
 _memcpy($$3$i$i3348 + 15604 | 0, 2746440, 648) | 0;
 _memcpy($$3$i$i3348 + 16252 | 0, 2747088, 648) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2150);
 if ($$3$i$i3348 | 0) {
  $27151 = $$3$i$i3348 + 5 | 0;
  $27153 = (HEAP8[$27151 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27151 >> 0] = $27153;
  if (!($27153 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3348);
  HEAP32[$2150 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 254;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 279;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 16900) label = 4347; else {
  $27160 = HEAP32[918918] | 0;
  if (($27160 | 0) == (HEAP32[918916] | 0)) label = 4347; else {
   $$lcssa$i$i3335 = 3675672;
   $$lcssa8$i$i3334 = $27160;
   label = 4348;
  }
 }
 do if ((label | 0) == 4347) {
  if ((HEAP32[918925] | 0) >>> 0 >= 16900) {
   $27167 = HEAP32[918924] | 0;
   if (($27167 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3335 = 3675696;
    $$lcssa8$i$i3334 = $27167;
    label = 4348;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 16900) {
   $27172 = HEAP32[918930] | 0;
   if (($27172 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3335 = 3675720;
    $$lcssa8$i$i3334 = $27172;
    label = 4348;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 16900) {
   $27177 = HEAP32[918936] | 0;
   if (($27177 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3335 = 3675744;
    $$lcssa8$i$i3334 = $27177;
    label = 4348;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 16900) {
   $27182 = HEAP32[918942] | 0;
   if (($27182 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3335 = 3675768;
    $$lcssa8$i$i3334 = $27182;
    label = 4348;
    break;
   }
  }
  $$3$i$i3336 = __Znwj(16900) | 0;
 } while (0);
 if ((label | 0) == 4348) {
  $27165 = $$lcssa8$i$i3334 + -4 | 0;
  HEAP32[$$lcssa$i$i3335 >> 2] = $27165;
  $$3$i$i3336 = HEAP32[$27165 >> 2] | 0;
 }
 $27186 = $$3$i$i3336 + 52 | 0;
 HEAP16[$$3$i$i3336 >> 1] = 324;
 HEAP16[$$3$i$i3336 + 2 >> 1] = 26;
 HEAP8[$$3$i$i3336 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3336 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3336 + 8 >> 2] = 648;
 HEAP32[$$3$i$i3336 + 12 >> 2] = 16848;
 HEAP32[$$3$i$i3336 + 16 >> 2] = $27186;
 HEAP32[$$3$i$i3336 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3336 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3336 + 48 >> 0] = 0;
 HEAP32[$2151 >> 2] = $$3$i$i3336;
 _memcpy($27186 | 0, 2747736, 648) | 0;
 _memcpy($$3$i$i3336 + 700 | 0, 2748384, 648) | 0;
 _memcpy($$3$i$i3336 + 1348 | 0, 2749032, 648) | 0;
 _memcpy($$3$i$i3336 + 1996 | 0, 2749680, 648) | 0;
 _memcpy($$3$i$i3336 + 2644 | 0, 2750328, 648) | 0;
 _memcpy($$3$i$i3336 + 3292 | 0, 2750976, 648) | 0;
 _memcpy($$3$i$i3336 + 3940 | 0, 2751624, 648) | 0;
 _memcpy($$3$i$i3336 + 4588 | 0, 2752272, 648) | 0;
 _memcpy($$3$i$i3336 + 5236 | 0, 2752920, 648) | 0;
 _memcpy($$3$i$i3336 + 5884 | 0, 2753568, 648) | 0;
 _memcpy($$3$i$i3336 + 6532 | 0, 2754216, 648) | 0;
 _memcpy($$3$i$i3336 + 7180 | 0, 2754864, 648) | 0;
 _memcpy($$3$i$i3336 + 7828 | 0, 2755512, 648) | 0;
 _memcpy($$3$i$i3336 + 8476 | 0, 2756160, 648) | 0;
 _memcpy($$3$i$i3336 + 9124 | 0, 2756808, 648) | 0;
 _memcpy($$3$i$i3336 + 9772 | 0, 2757456, 648) | 0;
 _memcpy($$3$i$i3336 + 10420 | 0, 2758104, 648) | 0;
 _memcpy($$3$i$i3336 + 11068 | 0, 2758752, 648) | 0;
 _memcpy($$3$i$i3336 + 11716 | 0, 2759400, 648) | 0;
 _memcpy($$3$i$i3336 + 12364 | 0, 2760048, 648) | 0;
 _memcpy($$3$i$i3336 + 13012 | 0, 2760696, 648) | 0;
 _memcpy($$3$i$i3336 + 13660 | 0, 2761344, 648) | 0;
 _memcpy($$3$i$i3336 + 14308 | 0, 2761992, 648) | 0;
 _memcpy($$3$i$i3336 + 14956 | 0, 2762640, 648) | 0;
 _memcpy($$3$i$i3336 + 15604 | 0, 2763288, 648) | 0;
 _memcpy($$3$i$i3336 + 16252 | 0, 2763936, 648) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2151);
 if ($$3$i$i3336 | 0) {
  $27222 = $$3$i$i3336 + 5 | 0;
  $27224 = (HEAP8[$27222 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27222 >> 0] = $27224;
  if (!($27224 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3336);
  HEAP32[$2151 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 280;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 328;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31804) label = 4363; else {
  $27231 = HEAP32[918918] | 0;
  if (($27231 | 0) == (HEAP32[918916] | 0)) label = 4363; else {
   $$lcssa$i$i3323 = 3675672;
   $$lcssa8$i$i3322 = $27231;
   label = 4364;
  }
 }
 do if ((label | 0) == 4363) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31804) {
   $27238 = HEAP32[918924] | 0;
   if (($27238 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3323 = 3675696;
    $$lcssa8$i$i3322 = $27238;
    label = 4364;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31804) {
   $27243 = HEAP32[918930] | 0;
   if (($27243 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3323 = 3675720;
    $$lcssa8$i$i3322 = $27243;
    label = 4364;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31804) {
   $27248 = HEAP32[918936] | 0;
   if (($27248 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3323 = 3675744;
    $$lcssa8$i$i3322 = $27248;
    label = 4364;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31804) {
   $27253 = HEAP32[918942] | 0;
   if (($27253 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3323 = 3675768;
    $$lcssa8$i$i3322 = $27253;
    label = 4364;
    break;
   }
  }
  $$3$i$i3324 = __Znwj(31804) | 0;
 } while (0);
 if ((label | 0) == 4364) {
  $27236 = $$lcssa8$i$i3322 + -4 | 0;
  HEAP32[$$lcssa$i$i3323 >> 2] = $27236;
  $$3$i$i3324 = HEAP32[$27236 >> 2] | 0;
 }
 $27257 = $$3$i$i3324 + 52 | 0;
 HEAP16[$$3$i$i3324 >> 1] = 324;
 HEAP16[$$3$i$i3324 + 2 >> 1] = 49;
 HEAP8[$$3$i$i3324 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3324 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3324 + 8 >> 2] = 648;
 HEAP32[$$3$i$i3324 + 12 >> 2] = 31752;
 HEAP32[$$3$i$i3324 + 16 >> 2] = $27257;
 HEAP32[$$3$i$i3324 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3324 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3324 + 48 >> 0] = 0;
 HEAP32[$2152 >> 2] = $$3$i$i3324;
 _memcpy($27257 | 0, 2764584, 648) | 0;
 _memcpy($$3$i$i3324 + 700 | 0, 2765232, 648) | 0;
 _memcpy($$3$i$i3324 + 1348 | 0, 2765880, 648) | 0;
 _memcpy($$3$i$i3324 + 1996 | 0, 2766528, 648) | 0;
 _memcpy($$3$i$i3324 + 2644 | 0, 2767176, 648) | 0;
 _memcpy($$3$i$i3324 + 3292 | 0, 2767824, 648) | 0;
 _memcpy($$3$i$i3324 + 3940 | 0, 2768472, 648) | 0;
 _memcpy($$3$i$i3324 + 4588 | 0, 2769120, 648) | 0;
 _memcpy($$3$i$i3324 + 5236 | 0, 2769768, 648) | 0;
 _memcpy($$3$i$i3324 + 5884 | 0, 2770416, 648) | 0;
 _memcpy($$3$i$i3324 + 6532 | 0, 2771064, 648) | 0;
 _memcpy($$3$i$i3324 + 7180 | 0, 2771712, 648) | 0;
 _memcpy($$3$i$i3324 + 7828 | 0, 2772360, 648) | 0;
 _memcpy($$3$i$i3324 + 8476 | 0, 2773008, 648) | 0;
 _memcpy($$3$i$i3324 + 9124 | 0, 2773656, 648) | 0;
 _memcpy($$3$i$i3324 + 9772 | 0, 2774304, 648) | 0;
 _memcpy($$3$i$i3324 + 10420 | 0, 2774952, 648) | 0;
 _memcpy($$3$i$i3324 + 11068 | 0, 2775600, 648) | 0;
 _memcpy($$3$i$i3324 + 11716 | 0, 2776248, 648) | 0;
 _memcpy($$3$i$i3324 + 12364 | 0, 2776896, 648) | 0;
 _memcpy($$3$i$i3324 + 13012 | 0, 2777544, 648) | 0;
 _memcpy($$3$i$i3324 + 13660 | 0, 2778192, 648) | 0;
 _memcpy($$3$i$i3324 + 14308 | 0, 2778840, 648) | 0;
 _memcpy($$3$i$i3324 + 14956 | 0, 2779488, 648) | 0;
 _memcpy($$3$i$i3324 + 15604 | 0, 2780136, 648) | 0;
 _memcpy($$3$i$i3324 + 16252 | 0, 2780784, 648) | 0;
 _memcpy($$3$i$i3324 + 16900 | 0, 2781432, 648) | 0;
 _memcpy($$3$i$i3324 + 17548 | 0, 2782080, 648) | 0;
 _memcpy($$3$i$i3324 + 18196 | 0, 2782728, 648) | 0;
 _memcpy($$3$i$i3324 + 18844 | 0, 2783376, 648) | 0;
 _memcpy($$3$i$i3324 + 19492 | 0, 2784024, 648) | 0;
 _memcpy($$3$i$i3324 + 20140 | 0, 2784672, 648) | 0;
 _memcpy($$3$i$i3324 + 20788 | 0, 2785320, 648) | 0;
 _memcpy($$3$i$i3324 + 21436 | 0, 2785968, 648) | 0;
 _memcpy($$3$i$i3324 + 22084 | 0, 2786616, 648) | 0;
 _memcpy($$3$i$i3324 + 22732 | 0, 2787264, 648) | 0;
 _memcpy($$3$i$i3324 + 23380 | 0, 2787912, 648) | 0;
 _memcpy($$3$i$i3324 + 24028 | 0, 2788560, 648) | 0;
 _memcpy($$3$i$i3324 + 24676 | 0, 2789208, 648) | 0;
 _memcpy($$3$i$i3324 + 25324 | 0, 2789856, 648) | 0;
 _memcpy($$3$i$i3324 + 25972 | 0, 2790504, 648) | 0;
 _memcpy($$3$i$i3324 + 26620 | 0, 2791152, 648) | 0;
 _memcpy($$3$i$i3324 + 27268 | 0, 2791800, 648) | 0;
 _memcpy($$3$i$i3324 + 27916 | 0, 2792448, 648) | 0;
 _memcpy($$3$i$i3324 + 28564 | 0, 2793096, 648) | 0;
 _memcpy($$3$i$i3324 + 29212 | 0, 2793744, 648) | 0;
 _memcpy($$3$i$i3324 + 29860 | 0, 2794392, 648) | 0;
 _memcpy($$3$i$i3324 + 30508 | 0, 2795040, 648) | 0;
 _memcpy($$3$i$i3324 + 31156 | 0, 2795688, 648) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2152);
 if ($$3$i$i3324 | 0) {
  $27316 = $$3$i$i3324 + 5 | 0;
  $27318 = (HEAP8[$27316 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27316 >> 0] = $27318;
  if (!($27318 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3324);
  HEAP32[$2152 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 329;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 377;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31804) label = 4379; else {
  $27325 = HEAP32[918918] | 0;
  if (($27325 | 0) == (HEAP32[918916] | 0)) label = 4379; else {
   $$lcssa$i$i3311 = 3675672;
   $$lcssa8$i$i3310 = $27325;
   label = 4380;
  }
 }
 do if ((label | 0) == 4379) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31804) {
   $27332 = HEAP32[918924] | 0;
   if (($27332 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3311 = 3675696;
    $$lcssa8$i$i3310 = $27332;
    label = 4380;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31804) {
   $27337 = HEAP32[918930] | 0;
   if (($27337 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3311 = 3675720;
    $$lcssa8$i$i3310 = $27337;
    label = 4380;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31804) {
   $27342 = HEAP32[918936] | 0;
   if (($27342 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3311 = 3675744;
    $$lcssa8$i$i3310 = $27342;
    label = 4380;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31804) {
   $27347 = HEAP32[918942] | 0;
   if (($27347 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3311 = 3675768;
    $$lcssa8$i$i3310 = $27347;
    label = 4380;
    break;
   }
  }
  $$3$i$i3312 = __Znwj(31804) | 0;
 } while (0);
 if ((label | 0) == 4380) {
  $27330 = $$lcssa8$i$i3310 + -4 | 0;
  HEAP32[$$lcssa$i$i3311 >> 2] = $27330;
  $$3$i$i3312 = HEAP32[$27330 >> 2] | 0;
 }
 $27351 = $$3$i$i3312 + 52 | 0;
 HEAP16[$$3$i$i3312 >> 1] = 324;
 HEAP16[$$3$i$i3312 + 2 >> 1] = 49;
 HEAP8[$$3$i$i3312 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3312 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3312 + 8 >> 2] = 648;
 HEAP32[$$3$i$i3312 + 12 >> 2] = 31752;
 HEAP32[$$3$i$i3312 + 16 >> 2] = $27351;
 HEAP32[$$3$i$i3312 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3312 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3312 + 48 >> 0] = 0;
 HEAP32[$2153 >> 2] = $$3$i$i3312;
 _memcpy($27351 | 0, 2796336, 648) | 0;
 _memcpy($$3$i$i3312 + 700 | 0, 2796984, 648) | 0;
 _memcpy($$3$i$i3312 + 1348 | 0, 2797632, 648) | 0;
 _memcpy($$3$i$i3312 + 1996 | 0, 2798280, 648) | 0;
 _memcpy($$3$i$i3312 + 2644 | 0, 2798928, 648) | 0;
 _memcpy($$3$i$i3312 + 3292 | 0, 2799576, 648) | 0;
 _memcpy($$3$i$i3312 + 3940 | 0, 2800224, 648) | 0;
 _memcpy($$3$i$i3312 + 4588 | 0, 2800872, 648) | 0;
 _memcpy($$3$i$i3312 + 5236 | 0, 2801520, 648) | 0;
 _memcpy($$3$i$i3312 + 5884 | 0, 2802168, 648) | 0;
 _memcpy($$3$i$i3312 + 6532 | 0, 2802816, 648) | 0;
 _memcpy($$3$i$i3312 + 7180 | 0, 2803464, 648) | 0;
 _memcpy($$3$i$i3312 + 7828 | 0, 2804112, 648) | 0;
 _memcpy($$3$i$i3312 + 8476 | 0, 2804760, 648) | 0;
 _memcpy($$3$i$i3312 + 9124 | 0, 2805408, 648) | 0;
 _memcpy($$3$i$i3312 + 9772 | 0, 2806056, 648) | 0;
 _memcpy($$3$i$i3312 + 10420 | 0, 2806704, 648) | 0;
 _memcpy($$3$i$i3312 + 11068 | 0, 2807352, 648) | 0;
 _memcpy($$3$i$i3312 + 11716 | 0, 2808e3, 648) | 0;
 _memcpy($$3$i$i3312 + 12364 | 0, 2808648, 648) | 0;
 _memcpy($$3$i$i3312 + 13012 | 0, 2809296, 648) | 0;
 _memcpy($$3$i$i3312 + 13660 | 0, 2809944, 648) | 0;
 _memcpy($$3$i$i3312 + 14308 | 0, 2810592, 648) | 0;
 _memcpy($$3$i$i3312 + 14956 | 0, 2811240, 648) | 0;
 _memcpy($$3$i$i3312 + 15604 | 0, 2811888, 648) | 0;
 _memcpy($$3$i$i3312 + 16252 | 0, 2812536, 648) | 0;
 _memcpy($$3$i$i3312 + 16900 | 0, 2813184, 648) | 0;
 _memcpy($$3$i$i3312 + 17548 | 0, 2813832, 648) | 0;
 _memcpy($$3$i$i3312 + 18196 | 0, 2814480, 648) | 0;
 _memcpy($$3$i$i3312 + 18844 | 0, 2815128, 648) | 0;
 _memcpy($$3$i$i3312 + 19492 | 0, 2815776, 648) | 0;
 _memcpy($$3$i$i3312 + 20140 | 0, 2816424, 648) | 0;
 _memcpy($$3$i$i3312 + 20788 | 0, 2817072, 648) | 0;
 _memcpy($$3$i$i3312 + 21436 | 0, 2817720, 648) | 0;
 _memcpy($$3$i$i3312 + 22084 | 0, 2818368, 648) | 0;
 _memcpy($$3$i$i3312 + 22732 | 0, 2819016, 648) | 0;
 _memcpy($$3$i$i3312 + 23380 | 0, 2819664, 648) | 0;
 _memcpy($$3$i$i3312 + 24028 | 0, 2820312, 648) | 0;
 _memcpy($$3$i$i3312 + 24676 | 0, 2820960, 648) | 0;
 _memcpy($$3$i$i3312 + 25324 | 0, 2821608, 648) | 0;
 _memcpy($$3$i$i3312 + 25972 | 0, 2822256, 648) | 0;
 _memcpy($$3$i$i3312 + 26620 | 0, 2822904, 648) | 0;
 _memcpy($$3$i$i3312 + 27268 | 0, 2823552, 648) | 0;
 _memcpy($$3$i$i3312 + 27916 | 0, 2824200, 648) | 0;
 _memcpy($$3$i$i3312 + 28564 | 0, 2824848, 648) | 0;
 _memcpy($$3$i$i3312 + 29212 | 0, 2825496, 648) | 0;
 _memcpy($$3$i$i3312 + 29860 | 0, 2826144, 648) | 0;
 _memcpy($$3$i$i3312 + 30508 | 0, 2826792, 648) | 0;
 _memcpy($$3$i$i3312 + 31156 | 0, 2827440, 648) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2153);
 if ($$3$i$i3312 | 0) {
  $27410 = $$3$i$i3312 + 5 | 0;
  $27412 = (HEAP8[$27410 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27410 >> 0] = $27412;
  if (!($27412 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3312);
  HEAP32[$2153 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 443;
 HEAP16[$bitmapData + 2 >> 1] = 378;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 380;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1996) label = 4395; else {
  $27419 = HEAP32[918918] | 0;
  if (($27419 | 0) == (HEAP32[918916] | 0)) label = 4395; else {
   $$lcssa$i$i3299 = 3675672;
   $$lcssa8$i$i3298 = $27419;
   label = 4396;
  }
 }
 do if ((label | 0) == 4395) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1996) {
   $27426 = HEAP32[918924] | 0;
   if (($27426 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3299 = 3675696;
    $$lcssa8$i$i3298 = $27426;
    label = 4396;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1996) {
   $27431 = HEAP32[918930] | 0;
   if (($27431 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3299 = 3675720;
    $$lcssa8$i$i3298 = $27431;
    label = 4396;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1996) {
   $27436 = HEAP32[918936] | 0;
   if (($27436 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3299 = 3675744;
    $$lcssa8$i$i3298 = $27436;
    label = 4396;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1996) {
   $27441 = HEAP32[918942] | 0;
   if (($27441 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3299 = 3675768;
    $$lcssa8$i$i3298 = $27441;
    label = 4396;
    break;
   }
  }
  $$3$i$i3300 = __Znwj(1996) | 0;
 } while (0);
 if ((label | 0) == 4396) {
  $27424 = $$lcssa8$i$i3298 + -4 | 0;
  HEAP32[$$lcssa$i$i3299 >> 2] = $27424;
  $$3$i$i3300 = HEAP32[$27424 >> 2] | 0;
 }
 $27445 = $$3$i$i3300 + 52 | 0;
 HEAP16[$$3$i$i3300 >> 1] = 324;
 HEAP16[$$3$i$i3300 + 2 >> 1] = 3;
 HEAP8[$$3$i$i3300 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3300 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3300 + 8 >> 2] = 648;
 HEAP32[$$3$i$i3300 + 12 >> 2] = 1944;
 HEAP32[$$3$i$i3300 + 16 >> 2] = $27445;
 HEAP32[$$3$i$i3300 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3300 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3300 + 48 >> 0] = 0;
 HEAP32[$2154 >> 2] = $$3$i$i3300;
 _memcpy($27445 | 0, 2828088, 648) | 0;
 _memcpy($$3$i$i3300 + 700 | 0, 2828736, 648) | 0;
 _memcpy($$3$i$i3300 + 1348 | 0, 2829384, 648) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2154);
 if ($$3$i$i3300 | 0) {
  $27458 = $$3$i$i3300 + 5 | 0;
  $27460 = (HEAP8[$27458 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27458 >> 0] = $27460;
  if (!($27460 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3300);
  HEAP32[$2154 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 228;
 HEAP16[$bitmapData + 4 >> 1] = 436;
 HEAP16[$bitmapData + 6 >> 1] = 302;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31852) label = 4411; else {
  $27467 = HEAP32[918918] | 0;
  if (($27467 | 0) == (HEAP32[918916] | 0)) label = 4411; else {
   $$lcssa$i$i3287 = 3675672;
   $$lcssa8$i$i3286 = $27467;
   label = 4412;
  }
 }
 do if ((label | 0) == 4411) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31852) {
   $27474 = HEAP32[918924] | 0;
   if (($27474 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3287 = 3675696;
    $$lcssa8$i$i3286 = $27474;
    label = 4412;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31852) {
   $27479 = HEAP32[918930] | 0;
   if (($27479 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3287 = 3675720;
    $$lcssa8$i$i3286 = $27479;
    label = 4412;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31852) {
   $27484 = HEAP32[918936] | 0;
   if (($27484 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3287 = 3675744;
    $$lcssa8$i$i3286 = $27484;
    label = 4412;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31852) {
   $27489 = HEAP32[918942] | 0;
   if (($27489 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3287 = 3675768;
    $$lcssa8$i$i3286 = $27489;
    label = 4412;
    break;
   }
  }
  $$3$i$i3288 = __Znwj(31852) | 0;
 } while (0);
 if ((label | 0) == 4412) {
  $27472 = $$lcssa8$i$i3286 + -4 | 0;
  HEAP32[$$lcssa$i$i3287 >> 2] = $27472;
  $$3$i$i3288 = HEAP32[$27472 >> 2] | 0;
 }
 $27493 = $$3$i$i3288 + 52 | 0;
 HEAP16[$$3$i$i3288 >> 1] = 212;
 HEAP16[$$3$i$i3288 + 2 >> 1] = 75;
 HEAP8[$$3$i$i3288 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3288 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3288 + 8 >> 2] = 424;
 HEAP32[$$3$i$i3288 + 12 >> 2] = 31800;
 HEAP32[$$3$i$i3288 + 16 >> 2] = $27493;
 HEAP32[$$3$i$i3288 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3288 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3288 + 48 >> 0] = 0;
 HEAP32[$2155 >> 2] = $$3$i$i3288;
 $dest$02$i3282 = $27493;
 $i$03$i3281 = 0;
 $src$01$i3283 = 2830032;
 while (1) {
  _memcpy($dest$02$i3282 | 0, $src$01$i3283 | 0, 424) | 0;
  $i$03$i3281 = $i$03$i3281 + 1 << 16 >> 16;
  if (($i$03$i3281 & 65535) >= 75) break; else {
   $dest$02$i3282 = $dest$02$i3282 + 424 | 0;
   $src$01$i3283 = $src$01$i3283 + 424 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2155);
 if ($$3$i$i3288 | 0) {
  $27508 = $$3$i$i3288 + 5 | 0;
  $27510 = (HEAP8[$27508 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27508 >> 0] = $27510;
  if (!($27510 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3288);
  HEAP32[$2155 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 303;
 HEAP16[$bitmapData + 4 >> 1] = 436;
 HEAP16[$bitmapData + 6 >> 1] = 377;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31852) label = 4429; else {
  $27517 = HEAP32[918918] | 0;
  if (($27517 | 0) == (HEAP32[918916] | 0)) label = 4429; else {
   $$lcssa$i$i3275 = 3675672;
   $$lcssa8$i$i3274 = $27517;
   label = 4430;
  }
 }
 do if ((label | 0) == 4429) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31852) {
   $27524 = HEAP32[918924] | 0;
   if (($27524 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3275 = 3675696;
    $$lcssa8$i$i3274 = $27524;
    label = 4430;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31852) {
   $27529 = HEAP32[918930] | 0;
   if (($27529 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3275 = 3675720;
    $$lcssa8$i$i3274 = $27529;
    label = 4430;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31852) {
   $27534 = HEAP32[918936] | 0;
   if (($27534 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3275 = 3675744;
    $$lcssa8$i$i3274 = $27534;
    label = 4430;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31852) {
   $27539 = HEAP32[918942] | 0;
   if (($27539 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3275 = 3675768;
    $$lcssa8$i$i3274 = $27539;
    label = 4430;
    break;
   }
  }
  $$3$i$i3276 = __Znwj(31852) | 0;
 } while (0);
 if ((label | 0) == 4430) {
  $27522 = $$lcssa8$i$i3274 + -4 | 0;
  HEAP32[$$lcssa$i$i3275 >> 2] = $27522;
  $$3$i$i3276 = HEAP32[$27522 >> 2] | 0;
 }
 $27543 = $$3$i$i3276 + 52 | 0;
 HEAP16[$$3$i$i3276 >> 1] = 212;
 HEAP16[$$3$i$i3276 + 2 >> 1] = 75;
 HEAP8[$$3$i$i3276 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3276 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3276 + 8 >> 2] = 424;
 HEAP32[$$3$i$i3276 + 12 >> 2] = 31800;
 HEAP32[$$3$i$i3276 + 16 >> 2] = $27543;
 HEAP32[$$3$i$i3276 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3276 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3276 + 48 >> 0] = 0;
 HEAP32[$2156 >> 2] = $$3$i$i3276;
 $dest$02$i3270 = $27543;
 $i$03$i3269 = 0;
 $src$01$i3271 = 2861832;
 while (1) {
  _memcpy($dest$02$i3270 | 0, $src$01$i3271 | 0, 424) | 0;
  $i$03$i3269 = $i$03$i3269 + 1 << 16 >> 16;
  if (($i$03$i3269 & 65535) >= 75) break; else {
   $dest$02$i3270 = $dest$02$i3270 + 424 | 0;
   $src$01$i3271 = $src$01$i3271 + 424 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2156);
 if ($$3$i$i3276 | 0) {
  $27558 = $$3$i$i3276 + 5 | 0;
  $27560 = (HEAP8[$27558 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27558 >> 0] = $27560;
  if (!($27560 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3276);
  HEAP32[$2156 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 378;
 HEAP16[$bitmapData + 4 >> 1] = 436;
 HEAP16[$bitmapData + 6 >> 1] = 380;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1324) label = 4447; else {
  $27567 = HEAP32[918918] | 0;
  if (($27567 | 0) == (HEAP32[918916] | 0)) label = 4447; else {
   $$lcssa$i$i3263 = 3675672;
   $$lcssa8$i$i3262 = $27567;
   label = 4448;
  }
 }
 do if ((label | 0) == 4447) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1324) {
   $27574 = HEAP32[918924] | 0;
   if (($27574 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3263 = 3675696;
    $$lcssa8$i$i3262 = $27574;
    label = 4448;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1324) {
   $27579 = HEAP32[918930] | 0;
   if (($27579 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3263 = 3675720;
    $$lcssa8$i$i3262 = $27579;
    label = 4448;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1324) {
   $27584 = HEAP32[918936] | 0;
   if (($27584 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3263 = 3675744;
    $$lcssa8$i$i3262 = $27584;
    label = 4448;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1324) {
   $27589 = HEAP32[918942] | 0;
   if (($27589 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3263 = 3675768;
    $$lcssa8$i$i3262 = $27589;
    label = 4448;
    break;
   }
  }
  $$3$i$i3264 = __Znwj(1324) | 0;
 } while (0);
 if ((label | 0) == 4448) {
  $27572 = $$lcssa8$i$i3262 + -4 | 0;
  HEAP32[$$lcssa$i$i3263 >> 2] = $27572;
  $$3$i$i3264 = HEAP32[$27572 >> 2] | 0;
 }
 $27593 = $$3$i$i3264 + 52 | 0;
 HEAP16[$$3$i$i3264 >> 1] = 212;
 HEAP16[$$3$i$i3264 + 2 >> 1] = 3;
 HEAP8[$$3$i$i3264 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3264 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3264 + 8 >> 2] = 424;
 HEAP32[$$3$i$i3264 + 12 >> 2] = 1272;
 HEAP32[$$3$i$i3264 + 16 >> 2] = $27593;
 HEAP32[$$3$i$i3264 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3264 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3264 + 48 >> 0] = 0;
 HEAP32[$2157 >> 2] = $$3$i$i3264;
 _memcpy($27593 | 0, 2893632, 424) | 0;
 _memcpy($$3$i$i3264 + 476 | 0, 2894056, 424) | 0;
 _memcpy($$3$i$i3264 + 900 | 0, 2894480, 424) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2157);
 if ($$3$i$i3264 | 0) {
  $27606 = $$3$i$i3264 + 5 | 0;
  $27608 = (HEAP8[$27606 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27606 >> 0] = $27608;
  if (!($27608 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3264);
  HEAP32[$2157 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 769;
 HEAP16[$bitmapData + 2 >> 1] = 207;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 276;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31972) label = 4463; else {
  $27615 = HEAP32[918918] | 0;
  if (($27615 | 0) == (HEAP32[918916] | 0)) label = 4463; else {
   $$lcssa$i$i3251 = 3675672;
   $$lcssa8$i$i3250 = $27615;
   label = 4464;
  }
 }
 do if ((label | 0) == 4463) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31972) {
   $27622 = HEAP32[918924] | 0;
   if (($27622 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3251 = 3675696;
    $$lcssa8$i$i3250 = $27622;
    label = 4464;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31972) {
   $27627 = HEAP32[918930] | 0;
   if (($27627 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3251 = 3675720;
    $$lcssa8$i$i3250 = $27627;
    label = 4464;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31972) {
   $27632 = HEAP32[918936] | 0;
   if (($27632 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3251 = 3675744;
    $$lcssa8$i$i3250 = $27632;
    label = 4464;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31972) {
   $27637 = HEAP32[918942] | 0;
   if (($27637 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3251 = 3675768;
    $$lcssa8$i$i3250 = $27637;
    label = 4464;
    break;
   }
  }
  $$3$i$i3252 = __Znwj(31972) | 0;
 } while (0);
 if ((label | 0) == 4464) {
  $27620 = $$lcssa8$i$i3250 + -4 | 0;
  HEAP32[$$lcssa$i$i3251 >> 2] = $27620;
  $$3$i$i3252 = HEAP32[$27620 >> 2] | 0;
 }
 $27641 = $$3$i$i3252 + 52 | 0;
 HEAP16[$$3$i$i3252 >> 1] = 228;
 HEAP16[$$3$i$i3252 + 2 >> 1] = 70;
 HEAP8[$$3$i$i3252 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3252 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3252 + 8 >> 2] = 456;
 HEAP32[$$3$i$i3252 + 12 >> 2] = 31920;
 HEAP32[$$3$i$i3252 + 16 >> 2] = $27641;
 HEAP32[$$3$i$i3252 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3252 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3252 + 48 >> 0] = 0;
 HEAP32[$2158 >> 2] = $$3$i$i3252;
 _memcpy($27641 | 0, 2894904, 456) | 0;
 _memcpy($$3$i$i3252 + 508 | 0, 2895360, 456) | 0;
 _memcpy($$3$i$i3252 + 964 | 0, 2895816, 456) | 0;
 _memcpy($$3$i$i3252 + 1420 | 0, 2896272, 456) | 0;
 _memcpy($$3$i$i3252 + 1876 | 0, 2896728, 456) | 0;
 _memcpy($$3$i$i3252 + 2332 | 0, 2897184, 456) | 0;
 _memcpy($$3$i$i3252 + 2788 | 0, 2897640, 456) | 0;
 _memcpy($$3$i$i3252 + 3244 | 0, 2898096, 456) | 0;
 _memcpy($$3$i$i3252 + 3700 | 0, 2898552, 456) | 0;
 _memcpy($$3$i$i3252 + 4156 | 0, 2899008, 456) | 0;
 _memcpy($$3$i$i3252 + 4612 | 0, 2899464, 456) | 0;
 _memcpy($$3$i$i3252 + 5068 | 0, 2899920, 456) | 0;
 _memcpy($$3$i$i3252 + 5524 | 0, 2900376, 456) | 0;
 _memcpy($$3$i$i3252 + 5980 | 0, 2900832, 456) | 0;
 _memcpy($$3$i$i3252 + 6436 | 0, 2901288, 456) | 0;
 _memcpy($$3$i$i3252 + 6892 | 0, 2901744, 456) | 0;
 _memcpy($$3$i$i3252 + 7348 | 0, 2902200, 456) | 0;
 _memcpy($$3$i$i3252 + 7804 | 0, 2902656, 456) | 0;
 _memcpy($$3$i$i3252 + 8260 | 0, 2903112, 456) | 0;
 _memcpy($$3$i$i3252 + 8716 | 0, 2903568, 456) | 0;
 _memcpy($$3$i$i3252 + 9172 | 0, 2904024, 456) | 0;
 _memcpy($$3$i$i3252 + 9628 | 0, 2904480, 456) | 0;
 _memcpy($$3$i$i3252 + 10084 | 0, 2904936, 456) | 0;
 _memcpy($$3$i$i3252 + 10540 | 0, 2905392, 456) | 0;
 _memcpy($$3$i$i3252 + 10996 | 0, 2905848, 456) | 0;
 _memcpy($$3$i$i3252 + 11452 | 0, 2906304, 456) | 0;
 _memcpy($$3$i$i3252 + 11908 | 0, 2906760, 456) | 0;
 _memcpy($$3$i$i3252 + 12364 | 0, 2907216, 456) | 0;
 _memcpy($$3$i$i3252 + 12820 | 0, 2907672, 456) | 0;
 _memcpy($$3$i$i3252 + 13276 | 0, 2908128, 456) | 0;
 _memcpy($$3$i$i3252 + 13732 | 0, 2908584, 456) | 0;
 _memcpy($$3$i$i3252 + 14188 | 0, 2909040, 456) | 0;
 _memcpy($$3$i$i3252 + 14644 | 0, 2909496, 456) | 0;
 _memcpy($$3$i$i3252 + 15100 | 0, 2909952, 456) | 0;
 _memcpy($$3$i$i3252 + 15556 | 0, 2910408, 456) | 0;
 _memcpy($$3$i$i3252 + 16012 | 0, 2910864, 456) | 0;
 _memcpy($$3$i$i3252 + 16468 | 0, 2911320, 456) | 0;
 _memcpy($$3$i$i3252 + 16924 | 0, 2911776, 456) | 0;
 _memcpy($$3$i$i3252 + 17380 | 0, 2912232, 456) | 0;
 _memcpy($$3$i$i3252 + 17836 | 0, 2912688, 456) | 0;
 _memcpy($$3$i$i3252 + 18292 | 0, 2913144, 456) | 0;
 _memcpy($$3$i$i3252 + 18748 | 0, 2913600, 456) | 0;
 _memcpy($$3$i$i3252 + 19204 | 0, 2914056, 456) | 0;
 _memcpy($$3$i$i3252 + 19660 | 0, 2914512, 456) | 0;
 _memcpy($$3$i$i3252 + 20116 | 0, 2914968, 456) | 0;
 _memcpy($$3$i$i3252 + 20572 | 0, 2915424, 456) | 0;
 _memcpy($$3$i$i3252 + 21028 | 0, 2915880, 456) | 0;
 _memcpy($$3$i$i3252 + 21484 | 0, 2916336, 456) | 0;
 _memcpy($$3$i$i3252 + 21940 | 0, 2916792, 456) | 0;
 _memcpy($$3$i$i3252 + 22396 | 0, 2917248, 456) | 0;
 _memcpy($$3$i$i3252 + 22852 | 0, 2917704, 456) | 0;
 _memcpy($$3$i$i3252 + 23308 | 0, 2918160, 456) | 0;
 _memcpy($$3$i$i3252 + 23764 | 0, 2918616, 456) | 0;
 _memcpy($$3$i$i3252 + 24220 | 0, 2919072, 456) | 0;
 _memcpy($$3$i$i3252 + 24676 | 0, 2919528, 456) | 0;
 _memcpy($$3$i$i3252 + 25132 | 0, 2919984, 456) | 0;
 _memcpy($$3$i$i3252 + 25588 | 0, 2920440, 456) | 0;
 _memcpy($$3$i$i3252 + 26044 | 0, 2920896, 456) | 0;
 _memcpy($$3$i$i3252 + 26500 | 0, 2921352, 456) | 0;
 _memcpy($$3$i$i3252 + 26956 | 0, 2921808, 456) | 0;
 _memcpy($$3$i$i3252 + 27412 | 0, 2922264, 456) | 0;
 _memcpy($$3$i$i3252 + 27868 | 0, 2922720, 456) | 0;
 _memcpy($$3$i$i3252 + 28324 | 0, 2923176, 456) | 0;
 _memcpy($$3$i$i3252 + 28780 | 0, 2923632, 456) | 0;
 _memcpy($$3$i$i3252 + 29236 | 0, 2924088, 456) | 0;
 _memcpy($$3$i$i3252 + 29692 | 0, 2924544, 456) | 0;
 _memcpy($$3$i$i3252 + 30148 | 0, 2925e3, 456) | 0;
 _memcpy($$3$i$i3252 + 30604 | 0, 2925456, 456) | 0;
 _memcpy($$3$i$i3252 + 31060 | 0, 2925912, 456) | 0;
 _memcpy($$3$i$i3252 + 31516 | 0, 2926368, 456) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2158);
 if ($$3$i$i3252 | 0) {
  $27721 = $$3$i$i3252 + 5 | 0;
  $27723 = (HEAP8[$27721 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27721 >> 0] = $27723;
  if (!($27723 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3252);
  HEAP32[$2158 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 769;
 HEAP16[$bitmapData + 2 >> 1] = 277;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 346;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31972) label = 4479; else {
  $27730 = HEAP32[918918] | 0;
  if (($27730 | 0) == (HEAP32[918916] | 0)) label = 4479; else {
   $$lcssa$i$i3239 = 3675672;
   $$lcssa8$i$i3238 = $27730;
   label = 4480;
  }
 }
 do if ((label | 0) == 4479) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31972) {
   $27737 = HEAP32[918924] | 0;
   if (($27737 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3239 = 3675696;
    $$lcssa8$i$i3238 = $27737;
    label = 4480;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31972) {
   $27742 = HEAP32[918930] | 0;
   if (($27742 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3239 = 3675720;
    $$lcssa8$i$i3238 = $27742;
    label = 4480;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31972) {
   $27747 = HEAP32[918936] | 0;
   if (($27747 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3239 = 3675744;
    $$lcssa8$i$i3238 = $27747;
    label = 4480;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31972) {
   $27752 = HEAP32[918942] | 0;
   if (($27752 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3239 = 3675768;
    $$lcssa8$i$i3238 = $27752;
    label = 4480;
    break;
   }
  }
  $$3$i$i3240 = __Znwj(31972) | 0;
 } while (0);
 if ((label | 0) == 4480) {
  $27735 = $$lcssa8$i$i3238 + -4 | 0;
  HEAP32[$$lcssa$i$i3239 >> 2] = $27735;
  $$3$i$i3240 = HEAP32[$27735 >> 2] | 0;
 }
 $27756 = $$3$i$i3240 + 52 | 0;
 HEAP16[$$3$i$i3240 >> 1] = 228;
 HEAP16[$$3$i$i3240 + 2 >> 1] = 70;
 HEAP8[$$3$i$i3240 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3240 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3240 + 8 >> 2] = 456;
 HEAP32[$$3$i$i3240 + 12 >> 2] = 31920;
 HEAP32[$$3$i$i3240 + 16 >> 2] = $27756;
 HEAP32[$$3$i$i3240 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3240 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3240 + 48 >> 0] = 0;
 HEAP32[$2159 >> 2] = $$3$i$i3240;
 _memcpy($27756 | 0, 2926824, 456) | 0;
 _memcpy($$3$i$i3240 + 508 | 0, 2927280, 456) | 0;
 _memcpy($$3$i$i3240 + 964 | 0, 2927736, 456) | 0;
 _memcpy($$3$i$i3240 + 1420 | 0, 2928192, 456) | 0;
 _memcpy($$3$i$i3240 + 1876 | 0, 2928648, 456) | 0;
 _memcpy($$3$i$i3240 + 2332 | 0, 2929104, 456) | 0;
 _memcpy($$3$i$i3240 + 2788 | 0, 2929560, 456) | 0;
 _memcpy($$3$i$i3240 + 3244 | 0, 2930016, 456) | 0;
 _memcpy($$3$i$i3240 + 3700 | 0, 2930472, 456) | 0;
 _memcpy($$3$i$i3240 + 4156 | 0, 2930928, 456) | 0;
 _memcpy($$3$i$i3240 + 4612 | 0, 2931384, 456) | 0;
 _memcpy($$3$i$i3240 + 5068 | 0, 2931840, 456) | 0;
 _memcpy($$3$i$i3240 + 5524 | 0, 2932296, 456) | 0;
 _memcpy($$3$i$i3240 + 5980 | 0, 2932752, 456) | 0;
 _memcpy($$3$i$i3240 + 6436 | 0, 2933208, 456) | 0;
 _memcpy($$3$i$i3240 + 6892 | 0, 2933664, 456) | 0;
 _memcpy($$3$i$i3240 + 7348 | 0, 2934120, 456) | 0;
 _memcpy($$3$i$i3240 + 7804 | 0, 2934576, 456) | 0;
 _memcpy($$3$i$i3240 + 8260 | 0, 2935032, 456) | 0;
 _memcpy($$3$i$i3240 + 8716 | 0, 2935488, 456) | 0;
 _memcpy($$3$i$i3240 + 9172 | 0, 2935944, 456) | 0;
 _memcpy($$3$i$i3240 + 9628 | 0, 2936400, 456) | 0;
 _memcpy($$3$i$i3240 + 10084 | 0, 2936856, 456) | 0;
 _memcpy($$3$i$i3240 + 10540 | 0, 2937312, 456) | 0;
 _memcpy($$3$i$i3240 + 10996 | 0, 2937768, 456) | 0;
 _memcpy($$3$i$i3240 + 11452 | 0, 2938224, 456) | 0;
 _memcpy($$3$i$i3240 + 11908 | 0, 2938680, 456) | 0;
 _memcpy($$3$i$i3240 + 12364 | 0, 2939136, 456) | 0;
 _memcpy($$3$i$i3240 + 12820 | 0, 2939592, 456) | 0;
 _memcpy($$3$i$i3240 + 13276 | 0, 2940048, 456) | 0;
 _memcpy($$3$i$i3240 + 13732 | 0, 2940504, 456) | 0;
 _memcpy($$3$i$i3240 + 14188 | 0, 2940960, 456) | 0;
 _memcpy($$3$i$i3240 + 14644 | 0, 2941416, 456) | 0;
 _memcpy($$3$i$i3240 + 15100 | 0, 2941872, 456) | 0;
 _memcpy($$3$i$i3240 + 15556 | 0, 2942328, 456) | 0;
 _memcpy($$3$i$i3240 + 16012 | 0, 2942784, 456) | 0;
 _memcpy($$3$i$i3240 + 16468 | 0, 2943240, 456) | 0;
 _memcpy($$3$i$i3240 + 16924 | 0, 2943696, 456) | 0;
 _memcpy($$3$i$i3240 + 17380 | 0, 2944152, 456) | 0;
 _memcpy($$3$i$i3240 + 17836 | 0, 2944608, 456) | 0;
 _memcpy($$3$i$i3240 + 18292 | 0, 2945064, 456) | 0;
 _memcpy($$3$i$i3240 + 18748 | 0, 2945520, 456) | 0;
 _memcpy($$3$i$i3240 + 19204 | 0, 2945976, 456) | 0;
 _memcpy($$3$i$i3240 + 19660 | 0, 2946432, 456) | 0;
 _memcpy($$3$i$i3240 + 20116 | 0, 2946888, 456) | 0;
 _memcpy($$3$i$i3240 + 20572 | 0, 2947344, 456) | 0;
 _memcpy($$3$i$i3240 + 21028 | 0, 2947800, 456) | 0;
 _memcpy($$3$i$i3240 + 21484 | 0, 2948256, 456) | 0;
 _memcpy($$3$i$i3240 + 21940 | 0, 2948712, 456) | 0;
 _memcpy($$3$i$i3240 + 22396 | 0, 2949168, 456) | 0;
 _memcpy($$3$i$i3240 + 22852 | 0, 2949624, 456) | 0;
 _memcpy($$3$i$i3240 + 23308 | 0, 2950080, 456) | 0;
 _memcpy($$3$i$i3240 + 23764 | 0, 2950536, 456) | 0;
 _memcpy($$3$i$i3240 + 24220 | 0, 2950992, 456) | 0;
 _memcpy($$3$i$i3240 + 24676 | 0, 2951448, 456) | 0;
 _memcpy($$3$i$i3240 + 25132 | 0, 2951904, 456) | 0;
 _memcpy($$3$i$i3240 + 25588 | 0, 2952360, 456) | 0;
 _memcpy($$3$i$i3240 + 26044 | 0, 2952816, 456) | 0;
 _memcpy($$3$i$i3240 + 26500 | 0, 2953272, 456) | 0;
 _memcpy($$3$i$i3240 + 26956 | 0, 2953728, 456) | 0;
 _memcpy($$3$i$i3240 + 27412 | 0, 2954184, 456) | 0;
 _memcpy($$3$i$i3240 + 27868 | 0, 2954640, 456) | 0;
 _memcpy($$3$i$i3240 + 28324 | 0, 2955096, 456) | 0;
 _memcpy($$3$i$i3240 + 28780 | 0, 2955552, 456) | 0;
 _memcpy($$3$i$i3240 + 29236 | 0, 2956008, 456) | 0;
 _memcpy($$3$i$i3240 + 29692 | 0, 2956464, 456) | 0;
 _memcpy($$3$i$i3240 + 30148 | 0, 2956920, 456) | 0;
 _memcpy($$3$i$i3240 + 30604 | 0, 2957376, 456) | 0;
 _memcpy($$3$i$i3240 + 31060 | 0, 2957832, 456) | 0;
 _memcpy($$3$i$i3240 + 31516 | 0, 2958288, 456) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2159);
 if ($$3$i$i3240 | 0) {
  $27836 = $$3$i$i3240 + 5 | 0;
  $27838 = (HEAP8[$27836 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27836 >> 0] = $27838;
  if (!($27838 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3240);
  HEAP32[$2159 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 769;
 HEAP16[$bitmapData + 2 >> 1] = 347;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 416;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31972) label = 4495; else {
  $27845 = HEAP32[918918] | 0;
  if (($27845 | 0) == (HEAP32[918916] | 0)) label = 4495; else {
   $$lcssa$i$i3227 = 3675672;
   $$lcssa8$i$i3226 = $27845;
   label = 4496;
  }
 }
 do if ((label | 0) == 4495) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31972) {
   $27852 = HEAP32[918924] | 0;
   if (($27852 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3227 = 3675696;
    $$lcssa8$i$i3226 = $27852;
    label = 4496;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31972) {
   $27857 = HEAP32[918930] | 0;
   if (($27857 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3227 = 3675720;
    $$lcssa8$i$i3226 = $27857;
    label = 4496;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31972) {
   $27862 = HEAP32[918936] | 0;
   if (($27862 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3227 = 3675744;
    $$lcssa8$i$i3226 = $27862;
    label = 4496;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31972) {
   $27867 = HEAP32[918942] | 0;
   if (($27867 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3227 = 3675768;
    $$lcssa8$i$i3226 = $27867;
    label = 4496;
    break;
   }
  }
  $$3$i$i3228 = __Znwj(31972) | 0;
 } while (0);
 if ((label | 0) == 4496) {
  $27850 = $$lcssa8$i$i3226 + -4 | 0;
  HEAP32[$$lcssa$i$i3227 >> 2] = $27850;
  $$3$i$i3228 = HEAP32[$27850 >> 2] | 0;
 }
 $27871 = $$3$i$i3228 + 52 | 0;
 HEAP16[$$3$i$i3228 >> 1] = 228;
 HEAP16[$$3$i$i3228 + 2 >> 1] = 70;
 HEAP8[$$3$i$i3228 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3228 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3228 + 8 >> 2] = 456;
 HEAP32[$$3$i$i3228 + 12 >> 2] = 31920;
 HEAP32[$$3$i$i3228 + 16 >> 2] = $27871;
 HEAP32[$$3$i$i3228 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3228 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3228 + 48 >> 0] = 0;
 HEAP32[$2160 >> 2] = $$3$i$i3228;
 _memcpy($27871 | 0, 2958744, 456) | 0;
 _memcpy($$3$i$i3228 + 508 | 0, 2959200, 456) | 0;
 _memcpy($$3$i$i3228 + 964 | 0, 2959656, 456) | 0;
 _memcpy($$3$i$i3228 + 1420 | 0, 2960112, 456) | 0;
 _memcpy($$3$i$i3228 + 1876 | 0, 2960568, 456) | 0;
 _memcpy($$3$i$i3228 + 2332 | 0, 2961024, 456) | 0;
 _memcpy($$3$i$i3228 + 2788 | 0, 2961480, 456) | 0;
 _memcpy($$3$i$i3228 + 3244 | 0, 2961936, 456) | 0;
 _memcpy($$3$i$i3228 + 3700 | 0, 2962392, 456) | 0;
 _memcpy($$3$i$i3228 + 4156 | 0, 2962848, 456) | 0;
 _memcpy($$3$i$i3228 + 4612 | 0, 2963304, 456) | 0;
 _memcpy($$3$i$i3228 + 5068 | 0, 2963760, 456) | 0;
 _memcpy($$3$i$i3228 + 5524 | 0, 2964216, 456) | 0;
 _memcpy($$3$i$i3228 + 5980 | 0, 2964672, 456) | 0;
 _memcpy($$3$i$i3228 + 6436 | 0, 2965128, 456) | 0;
 _memcpy($$3$i$i3228 + 6892 | 0, 2965584, 456) | 0;
 _memcpy($$3$i$i3228 + 7348 | 0, 2966040, 456) | 0;
 _memcpy($$3$i$i3228 + 7804 | 0, 2966496, 456) | 0;
 _memcpy($$3$i$i3228 + 8260 | 0, 2966952, 456) | 0;
 _memcpy($$3$i$i3228 + 8716 | 0, 2967408, 456) | 0;
 _memcpy($$3$i$i3228 + 9172 | 0, 2967864, 456) | 0;
 _memcpy($$3$i$i3228 + 9628 | 0, 2968320, 456) | 0;
 _memcpy($$3$i$i3228 + 10084 | 0, 2968776, 456) | 0;
 _memcpy($$3$i$i3228 + 10540 | 0, 2969232, 456) | 0;
 _memcpy($$3$i$i3228 + 10996 | 0, 2969688, 456) | 0;
 _memcpy($$3$i$i3228 + 11452 | 0, 2970144, 456) | 0;
 _memcpy($$3$i$i3228 + 11908 | 0, 2970600, 456) | 0;
 _memcpy($$3$i$i3228 + 12364 | 0, 2971056, 456) | 0;
 _memcpy($$3$i$i3228 + 12820 | 0, 2971512, 456) | 0;
 _memcpy($$3$i$i3228 + 13276 | 0, 2971968, 456) | 0;
 _memcpy($$3$i$i3228 + 13732 | 0, 2972424, 456) | 0;
 _memcpy($$3$i$i3228 + 14188 | 0, 2972880, 456) | 0;
 _memcpy($$3$i$i3228 + 14644 | 0, 2973336, 456) | 0;
 _memcpy($$3$i$i3228 + 15100 | 0, 2973792, 456) | 0;
 _memcpy($$3$i$i3228 + 15556 | 0, 2974248, 456) | 0;
 _memcpy($$3$i$i3228 + 16012 | 0, 2974704, 456) | 0;
 _memcpy($$3$i$i3228 + 16468 | 0, 2975160, 456) | 0;
 _memcpy($$3$i$i3228 + 16924 | 0, 2975616, 456) | 0;
 _memcpy($$3$i$i3228 + 17380 | 0, 2976072, 456) | 0;
 _memcpy($$3$i$i3228 + 17836 | 0, 2976528, 456) | 0;
 _memcpy($$3$i$i3228 + 18292 | 0, 2976984, 456) | 0;
 _memcpy($$3$i$i3228 + 18748 | 0, 2977440, 456) | 0;
 _memcpy($$3$i$i3228 + 19204 | 0, 2977896, 456) | 0;
 _memcpy($$3$i$i3228 + 19660 | 0, 2978352, 456) | 0;
 _memcpy($$3$i$i3228 + 20116 | 0, 2978808, 456) | 0;
 _memcpy($$3$i$i3228 + 20572 | 0, 2979264, 456) | 0;
 _memcpy($$3$i$i3228 + 21028 | 0, 2979720, 456) | 0;
 _memcpy($$3$i$i3228 + 21484 | 0, 2980176, 456) | 0;
 _memcpy($$3$i$i3228 + 21940 | 0, 2980632, 456) | 0;
 _memcpy($$3$i$i3228 + 22396 | 0, 2981088, 456) | 0;
 _memcpy($$3$i$i3228 + 22852 | 0, 2981544, 456) | 0;
 _memcpy($$3$i$i3228 + 23308 | 0, 2982e3, 456) | 0;
 _memcpy($$3$i$i3228 + 23764 | 0, 2982456, 456) | 0;
 _memcpy($$3$i$i3228 + 24220 | 0, 2982912, 456) | 0;
 _memcpy($$3$i$i3228 + 24676 | 0, 2983368, 456) | 0;
 _memcpy($$3$i$i3228 + 25132 | 0, 2983824, 456) | 0;
 _memcpy($$3$i$i3228 + 25588 | 0, 2984280, 456) | 0;
 _memcpy($$3$i$i3228 + 26044 | 0, 2984736, 456) | 0;
 _memcpy($$3$i$i3228 + 26500 | 0, 2985192, 456) | 0;
 _memcpy($$3$i$i3228 + 26956 | 0, 2985648, 456) | 0;
 _memcpy($$3$i$i3228 + 27412 | 0, 2986104, 456) | 0;
 _memcpy($$3$i$i3228 + 27868 | 0, 2986560, 456) | 0;
 _memcpy($$3$i$i3228 + 28324 | 0, 2987016, 456) | 0;
 _memcpy($$3$i$i3228 + 28780 | 0, 2987472, 456) | 0;
 _memcpy($$3$i$i3228 + 29236 | 0, 2987928, 456) | 0;
 _memcpy($$3$i$i3228 + 29692 | 0, 2988384, 456) | 0;
 _memcpy($$3$i$i3228 + 30148 | 0, 2988840, 456) | 0;
 _memcpy($$3$i$i3228 + 30604 | 0, 2989296, 456) | 0;
 _memcpy($$3$i$i3228 + 31060 | 0, 2989752, 456) | 0;
 _memcpy($$3$i$i3228 + 31516 | 0, 2990208, 456) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2160);
 if ($$3$i$i3228 | 0) {
  $27951 = $$3$i$i3228 + 5 | 0;
  $27953 = (HEAP8[$27951 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27951 >> 0] = $27953;
  if (!($27953 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3228);
  HEAP32[$2160 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 769;
 HEAP16[$bitmapData + 2 >> 1] = 417;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 418;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 964) label = 4511; else {
  $27960 = HEAP32[918918] | 0;
  if (($27960 | 0) == (HEAP32[918916] | 0)) label = 4511; else {
   $$lcssa$i$i3215 = 3675672;
   $$lcssa8$i$i3214 = $27960;
   label = 4512;
  }
 }
 do if ((label | 0) == 4511) {
  if ((HEAP32[918925] | 0) >>> 0 >= 964) {
   $27967 = HEAP32[918924] | 0;
   if (($27967 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3215 = 3675696;
    $$lcssa8$i$i3214 = $27967;
    label = 4512;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 964) {
   $27972 = HEAP32[918930] | 0;
   if (($27972 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3215 = 3675720;
    $$lcssa8$i$i3214 = $27972;
    label = 4512;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 964) {
   $27977 = HEAP32[918936] | 0;
   if (($27977 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3215 = 3675744;
    $$lcssa8$i$i3214 = $27977;
    label = 4512;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 964) {
   $27982 = HEAP32[918942] | 0;
   if (($27982 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3215 = 3675768;
    $$lcssa8$i$i3214 = $27982;
    label = 4512;
    break;
   }
  }
  $$3$i$i3216 = __Znwj(964) | 0;
 } while (0);
 if ((label | 0) == 4512) {
  $27965 = $$lcssa8$i$i3214 + -4 | 0;
  HEAP32[$$lcssa$i$i3215 >> 2] = $27965;
  $$3$i$i3216 = HEAP32[$27965 >> 2] | 0;
 }
 $27986 = $$3$i$i3216 + 52 | 0;
 HEAP16[$$3$i$i3216 >> 1] = 228;
 HEAP16[$$3$i$i3216 + 2 >> 1] = 2;
 HEAP8[$$3$i$i3216 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3216 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3216 + 8 >> 2] = 456;
 HEAP32[$$3$i$i3216 + 12 >> 2] = 912;
 HEAP32[$$3$i$i3216 + 16 >> 2] = $27986;
 HEAP32[$$3$i$i3216 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3216 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3216 + 48 >> 0] = 0;
 HEAP32[$2161 >> 2] = $$3$i$i3216;
 _memcpy($27986 | 0, 2990664, 456) | 0;
 _memcpy($$3$i$i3216 + 508 | 0, 2991120, 456) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2161);
 if ($$3$i$i3216 | 0) {
  $27998 = $$3$i$i3216 + 5 | 0;
  $28000 = (HEAP8[$27998 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$27998 >> 0] = $28000;
  if (!($28000 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3216);
  HEAP32[$2161 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 207;
 HEAP16[$bitmapData + 4 >> 1] = 221;
 HEAP16[$bitmapData + 6 >> 1] = 418;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 5140) label = 4527; else {
  $28007 = HEAP32[918918] | 0;
  if (($28007 | 0) == (HEAP32[918916] | 0)) label = 4527; else {
   $$lcssa$i$i3203 = 3675672;
   $$lcssa8$i$i3202 = $28007;
   label = 4528;
  }
 }
 do if ((label | 0) == 4527) {
  if ((HEAP32[918925] | 0) >>> 0 >= 5140) {
   $28014 = HEAP32[918924] | 0;
   if (($28014 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3203 = 3675696;
    $$lcssa8$i$i3202 = $28014;
    label = 4528;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 5140) {
   $28019 = HEAP32[918930] | 0;
   if (($28019 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3203 = 3675720;
    $$lcssa8$i$i3202 = $28019;
    label = 4528;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 5140) {
   $28024 = HEAP32[918936] | 0;
   if (($28024 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3203 = 3675744;
    $$lcssa8$i$i3202 = $28024;
    label = 4528;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 5140) {
   $28029 = HEAP32[918942] | 0;
   if (($28029 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3203 = 3675768;
    $$lcssa8$i$i3202 = $28029;
    label = 4528;
    break;
   }
  }
  $$3$i$i3204 = __Znwj(5140) | 0;
 } while (0);
 if ((label | 0) == 4528) {
  $28012 = $$lcssa8$i$i3202 + -4 | 0;
  HEAP32[$$lcssa$i$i3203 >> 2] = $28012;
  $$3$i$i3204 = HEAP32[$28012 >> 2] | 0;
 }
 $28033 = $$3$i$i3204 + 52 | 0;
 HEAP16[$$3$i$i3204 >> 1] = 12;
 HEAP16[$$3$i$i3204 + 2 >> 1] = 212;
 HEAP8[$$3$i$i3204 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3204 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3204 + 8 >> 2] = 24;
 HEAP32[$$3$i$i3204 + 12 >> 2] = 5088;
 HEAP32[$$3$i$i3204 + 16 >> 2] = $28033;
 HEAP32[$$3$i$i3204 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3204 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3204 + 48 >> 0] = 0;
 HEAP32[$2162 >> 2] = $$3$i$i3204;
 $dest$02$i3198 = $28033;
 $i$03$i3197 = 0;
 $src$01$i3199 = 2991576;
 while (1) {
  dest = $dest$02$i3198;
  src = $src$01$i3199;
  stop = dest + 24 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $i$03$i3197 = $i$03$i3197 + 1 << 16 >> 16;
  if (($i$03$i3197 & 65535) >= 212) break; else {
   $dest$02$i3198 = $dest$02$i3198 + 24 | 0;
   $src$01$i3199 = $src$01$i3199 + 24 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2162);
 if ($$3$i$i3204 | 0) {
  $28048 = $$3$i$i3204 + 5 | 0;
  $28050 = (HEAP8[$28048 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$28048 >> 0] = $28050;
  if (!($28050 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3204);
  HEAP32[$2162 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 197;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 206;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 15732) label = 4545; else {
  $28057 = HEAP32[918918] | 0;
  if (($28057 | 0) == (HEAP32[918916] | 0)) label = 4545; else {
   $$lcssa$i$i3191 = 3675672;
   $$lcssa8$i$i3190 = $28057;
   label = 4546;
  }
 }
 do if ((label | 0) == 4545) {
  if ((HEAP32[918925] | 0) >>> 0 >= 15732) {
   $28064 = HEAP32[918924] | 0;
   if (($28064 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3191 = 3675696;
    $$lcssa8$i$i3190 = $28064;
    label = 4546;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 15732) {
   $28069 = HEAP32[918930] | 0;
   if (($28069 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3191 = 3675720;
    $$lcssa8$i$i3190 = $28069;
    label = 4546;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 15732) {
   $28074 = HEAP32[918936] | 0;
   if (($28074 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3191 = 3675744;
    $$lcssa8$i$i3190 = $28074;
    label = 4546;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 15732) {
   $28079 = HEAP32[918942] | 0;
   if (($28079 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3191 = 3675768;
    $$lcssa8$i$i3190 = $28079;
    label = 4546;
    break;
   }
  }
  $$3$i$i3192 = __Znwj(15732) | 0;
 } while (0);
 if ((label | 0) == 4546) {
  $28062 = $$lcssa8$i$i3190 + -4 | 0;
  HEAP32[$$lcssa$i$i3191 >> 2] = $28062;
  $$3$i$i3192 = HEAP32[$28062 >> 2] | 0;
 }
 $28083 = $$3$i$i3192 + 52 | 0;
 HEAP16[$$3$i$i3192 >> 1] = 784;
 HEAP16[$$3$i$i3192 + 2 >> 1] = 10;
 HEAP8[$$3$i$i3192 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3192 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3192 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3192 + 12 >> 2] = 15680;
 HEAP32[$$3$i$i3192 + 16 >> 2] = $28083;
 HEAP32[$$3$i$i3192 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3192 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3192 + 48 >> 0] = 0;
 HEAP32[$2163 >> 2] = $$3$i$i3192;
 _memcpy($28083 | 0, 2996664, 1568) | 0;
 _memcpy($$3$i$i3192 + 1620 | 0, 2998232, 1568) | 0;
 _memcpy($$3$i$i3192 + 3188 | 0, 2999800, 1568) | 0;
 _memcpy($$3$i$i3192 + 4756 | 0, 3001368, 1568) | 0;
 _memcpy($$3$i$i3192 + 6324 | 0, 3002936, 1568) | 0;
 _memcpy($$3$i$i3192 + 7892 | 0, 3004504, 1568) | 0;
 _memcpy($$3$i$i3192 + 9460 | 0, 3006072, 1568) | 0;
 _memcpy($$3$i$i3192 + 11028 | 0, 3007640, 1568) | 0;
 _memcpy($$3$i$i3192 + 12596 | 0, 3009208, 1568) | 0;
 _memcpy($$3$i$i3192 + 14164 | 0, 3010776, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2163);
 if ($$3$i$i3192 | 0) {
  $28103 = $$3$i$i3192 + 5 | 0;
  $28105 = (HEAP8[$28103 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$28103 >> 0] = $28105;
  if (!($28105 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3192);
  HEAP32[$2163 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 529;
 HEAP16[$bitmapData + 4 >> 1] = 791;
 HEAP16[$bitmapData + 6 >> 1] = 544;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 564) label = 4561; else {
  $28112 = HEAP32[918918] | 0;
  if (($28112 | 0) == (HEAP32[918916] | 0)) label = 4561; else {
   $$lcssa$i$i3179 = 3675672;
   $$lcssa8$i$i3178 = $28112;
   label = 4562;
  }
 }
 do if ((label | 0) == 4561) {
  if ((HEAP32[918925] | 0) >>> 0 >= 564) {
   $28119 = HEAP32[918924] | 0;
   if (($28119 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3179 = 3675696;
    $$lcssa8$i$i3178 = $28119;
    label = 4562;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 564) {
   $28124 = HEAP32[918930] | 0;
   if (($28124 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3179 = 3675720;
    $$lcssa8$i$i3178 = $28124;
    label = 4562;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 564) {
   $28129 = HEAP32[918936] | 0;
   if (($28129 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3179 = 3675744;
    $$lcssa8$i$i3178 = $28129;
    label = 4562;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 564) {
   $28134 = HEAP32[918942] | 0;
   if (($28134 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3179 = 3675768;
    $$lcssa8$i$i3178 = $28134;
    label = 4562;
    break;
   }
  }
  $$3$i$i3180 = __Znwj(564) | 0;
 } while (0);
 if ((label | 0) == 4562) {
  $28117 = $$lcssa8$i$i3178 + -4 | 0;
  HEAP32[$$lcssa$i$i3179 >> 2] = $28117;
  $$3$i$i3180 = HEAP32[$28117 >> 2] | 0;
 }
 $28138 = $$3$i$i3180 + 52 | 0;
 HEAP16[$$3$i$i3180 >> 1] = 16;
 HEAP16[$$3$i$i3180 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3180 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3180 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3180 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3180 + 12 >> 2] = 512;
 HEAP32[$$3$i$i3180 + 16 >> 2] = $28138;
 HEAP32[$$3$i$i3180 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3180 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3180 + 48 >> 0] = 0;
 HEAP32[$2164 >> 2] = $$3$i$i3180;
 dest = $28138;
 src = 3012344;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 84 | 0;
 src = 3012376;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 116 | 0;
 src = 3012408;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 148 | 0;
 src = 3012440;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 180 | 0;
 src = 3012472;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 212 | 0;
 src = 3012504;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 244 | 0;
 src = 3012536;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 276 | 0;
 src = 3012568;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 308 | 0;
 src = 3012600;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 340 | 0;
 src = 3012632;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 372 | 0;
 src = 3012664;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 404 | 0;
 src = 3012696;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 436 | 0;
 src = 3012728;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 468 | 0;
 src = 3012760;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 500 | 0;
 src = 3012792;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3180 + 532 | 0;
 src = 3012824;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $2164);
 if ($$3$i$i3180 | 0) {
  $28164 = $$3$i$i3180 + 5 | 0;
  $28166 = (HEAP8[$28164 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$28164 >> 0] = $28166;
  if (!($28166 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3180);
  HEAP32[$2164 >> 2] = 0;
 }
 $28168 = $2165;
 HEAP32[$28168 >> 2] = 14942430;
 HEAP32[$28168 + 4 >> 2] = 12517923;
 HEAP32[$2165 + 8 >> 2] = 63422;
 HEAP16[$2166 >> 1] = 222;
 HEAP16[$2166 + 2 >> 1] = 228;
 HEAP16[$2166 + 4 >> 1] = 3;
 HEAP16[$2166 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2165, $2166);
 $28176 = $2167;
 HEAP32[$28176 >> 2] = 14942430;
 HEAP32[$28176 + 4 >> 2] = 12517923;
 HEAP32[$2167 + 8 >> 2] = 63422;
 HEAP16[$2168 >> 1] = 437;
 HEAP16[$2168 + 2 >> 1] = 228;
 HEAP16[$2168 + 4 >> 1] = 6;
 HEAP16[$2168 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2167, $2168);
 $28184 = $2169;
 HEAP32[$28184 >> 2] = 14942430;
 HEAP32[$28184 + 4 >> 2] = 12517923;
 HEAP32[$2169 + 8 >> 2] = 63422;
 HEAP16[$2170 >> 1] = 766;
 HEAP16[$2170 + 2 >> 1] = 228;
 HEAP16[$2170 + 4 >> 1] = 3;
 HEAP16[$2170 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2169, $2170);
 $28192 = $2171;
 HEAP32[$28192 >> 2] = 14942430;
 HEAP32[$28192 + 4 >> 2] = 12517923;
 HEAP32[$2171 + 8 >> 2] = 63422;
 HEAP16[$2172 >> 1] = 222;
 HEAP16[$2172 + 2 >> 1] = 409;
 HEAP16[$2172 + 4 >> 1] = 547;
 HEAP16[$2172 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2171, $2172);
 $28200 = $2173;
 HEAP32[$28200 >> 2] = 14942430;
 HEAP32[$28200 + 4 >> 2] = 12517923;
 HEAP32[$2173 + 8 >> 2] = 63422;
 HEAP16[$2174 >> 1] = 222;
 HEAP16[$2174 + 2 >> 1] = 412;
 HEAP16[$2174 + 4 >> 1] = 3;
 HEAP16[$2174 + 6 >> 1] = 7;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2173, $2174);
 $28208 = $2175;
 HEAP32[$28208 >> 2] = 14942430;
 HEAP32[$28208 + 4 >> 2] = 12517923;
 HEAP32[$2175 + 8 >> 2] = 63422;
 HEAP16[$2176 >> 1] = 531;
 HEAP16[$2176 + 2 >> 1] = 412;
 HEAP16[$2176 + 4 >> 1] = 238;
 HEAP16[$2176 + 6 >> 1] = 7;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2175, $2176);
 $28216 = $2177;
 HEAP32[$28216 >> 2] = 13632258;
 HEAP32[$28216 + 4 >> 2] = 1704150;
 HEAP32[$2177 + 8 >> 2] = 63422;
 HEAP16[$2178 >> 1] = 770;
 HEAP16[$2178 + 2 >> 1] = 208;
 HEAP16[$2178 + 4 >> 1] = 214;
 HEAP16[$2178 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2177, $2178);
 $28224 = $2179;
 HEAP32[$28224 >> 2] = 13632258;
 HEAP32[$28224 + 4 >> 2] = 1704150;
 HEAP32[$2179 + 8 >> 2] = 63422;
 HEAP16[$2180 >> 1] = 770;
 HEAP16[$2180 + 2 >> 1] = 213;
 HEAP16[$2180 + 4 >> 1] = 5;
 HEAP16[$2180 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2179, $2180);
 $28232 = $2181;
 HEAP32[$28232 >> 2] = 13632258;
 HEAP32[$28232 + 4 >> 2] = 1704150;
 HEAP32[$2181 + 8 >> 2] = 63422;
 HEAP16[$2182 >> 1] = 979;
 HEAP16[$2182 + 2 >> 1] = 213;
 HEAP16[$2182 + 4 >> 1] = 5;
 HEAP16[$2182 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2181, $2182);
 $28240 = $2183;
 HEAP32[$28240 >> 2] = 13632258;
 HEAP32[$28240 + 4 >> 2] = 1704150;
 HEAP32[$2183 + 8 >> 2] = 63422;
 HEAP16[$2184 >> 1] = 770;
 HEAP16[$2184 + 2 >> 1] = 229;
 HEAP16[$2184 + 4 >> 1] = 214;
 HEAP16[$2184 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2183, $2184);
 $28248 = $2185;
 HEAP32[$28248 >> 2] = 14090652;
 HEAP32[$28248 + 4 >> 2] = 851970;
 HEAP8[$2185 + 8 >> 0] = -52;
 HEAP16[$2185 + 10 >> 1] = 412;
 HEAP16[$2185 + 12 >> 1] = 211;
 HEAP16[$2186 >> 1] = 0;
 HEAP16[$2186 + 2 >> 1] = 0;
 HEAP16[$2186 + 4 >> 1] = 1024;
 HEAP16[$2186 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect($front, $2185, $2186);
 $28258 = $2187;
 HEAP32[$28258 >> 2] = 15401182;
 HEAP32[$28258 + 4 >> 2] = 12059171;
 HEAP32[$2187 + 8 >> 2] = 63422;
 HEAP16[$2188 >> 1] = 222;
 HEAP16[$2188 + 2 >> 1] = 235;
 HEAP16[$2188 + 4 >> 1] = 3;
 HEAP16[$2188 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2187, $2188);
 $28266 = $2189;
 HEAP32[$28266 >> 2] = 15401182;
 HEAP32[$28266 + 4 >> 2] = 12059171;
 HEAP32[$2189 + 8 >> 2] = 63422;
 HEAP16[$2190 >> 1] = 437;
 HEAP16[$2190 + 2 >> 1] = 235;
 HEAP16[$2190 + 4 >> 1] = 6;
 HEAP16[$2190 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2189, $2190);
 $28274 = $2191;
 HEAP32[$28274 >> 2] = 15401182;
 HEAP32[$28274 + 4 >> 2] = 12059171;
 HEAP32[$2191 + 8 >> 2] = 63422;
 HEAP16[$2192 >> 1] = 766;
 HEAP16[$2192 + 2 >> 1] = 235;
 HEAP16[$2192 + 4 >> 1] = 3;
 HEAP16[$2192 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2191, $2192);
 $28282 = $2193;
 HEAP32[$28282 >> 2] = 15401182;
 HEAP32[$28282 + 4 >> 2] = 12059171;
 HEAP32[$2193 + 8 >> 2] = 63422;
 HEAP16[$2194 >> 1] = 222;
 HEAP16[$2194 + 2 >> 1] = 416;
 HEAP16[$2194 + 4 >> 1] = 547;
 HEAP16[$2194 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2193, $2194);
 $28290 = $2195;
 HEAP32[$28290 >> 2] = 15401182;
 HEAP32[$28290 + 4 >> 2] = 12059171;
 HEAP32[$2195 + 8 >> 2] = 63422;
 HEAP16[$2196 >> 1] = 222;
 HEAP16[$2196 + 2 >> 1] = 235;
 HEAP16[$2196 + 4 >> 1] = 3;
 HEAP16[$2196 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2195, $2196);
 $28298 = $2197;
 HEAP32[$28298 >> 2] = 15401182;
 HEAP32[$28298 + 4 >> 2] = 12059171;
 HEAP32[$2197 + 8 >> 2] = 63422;
 HEAP16[$2198 >> 1] = 437;
 HEAP16[$2198 + 2 >> 1] = 235;
 HEAP16[$2198 + 4 >> 1] = 6;
 HEAP16[$2198 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2197, $2198);
 $28306 = $2199;
 HEAP32[$28306 >> 2] = 15401182;
 HEAP32[$28306 + 4 >> 2] = 12059171;
 HEAP32[$2199 + 8 >> 2] = 63422;
 HEAP16[$2200 >> 1] = 766;
 HEAP16[$2200 + 2 >> 1] = 235;
 HEAP16[$2200 + 4 >> 1] = 3;
 HEAP16[$2200 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2199, $2200);
 $28314 = $2201;
 HEAP32[$28314 >> 2] = 15401182;
 HEAP32[$28314 + 4 >> 2] = 12059171;
 HEAP32[$2201 + 8 >> 2] = 63422;
 HEAP16[$2202 >> 1] = 222;
 HEAP16[$2202 + 2 >> 1] = 416;
 HEAP16[$2202 + 4 >> 1] = 547;
 HEAP16[$2202 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2201, $2202);
 $28322 = $2203;
 HEAP32[$28322 >> 2] = 13632258;
 HEAP32[$28322 + 4 >> 2] = 1704150;
 HEAP32[$2203 + 8 >> 2] = 63422;
 HEAP16[$2204 >> 1] = 770;
 HEAP16[$2204 + 2 >> 1] = 208;
 HEAP16[$2204 + 4 >> 1] = 214;
 HEAP16[$2204 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2203, $2204);
 $28330 = $2205;
 HEAP32[$28330 >> 2] = 13632258;
 HEAP32[$28330 + 4 >> 2] = 1704150;
 HEAP32[$2205 + 8 >> 2] = 63422;
 HEAP16[$2206 >> 1] = 770;
 HEAP16[$2206 + 2 >> 1] = 213;
 HEAP16[$2206 + 4 >> 1] = 5;
 HEAP16[$2206 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2205, $2206);
 $28338 = $2207;
 HEAP32[$28338 >> 2] = 13632258;
 HEAP32[$28338 + 4 >> 2] = 1704150;
 HEAP32[$2207 + 8 >> 2] = 63422;
 HEAP16[$2208 >> 1] = 979;
 HEAP16[$2208 + 2 >> 1] = 213;
 HEAP16[$2208 + 4 >> 1] = 5;
 HEAP16[$2208 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2207, $2208);
 $28346 = $2209;
 HEAP32[$28346 >> 2] = 13632258;
 HEAP32[$28346 + 4 >> 2] = 1704150;
 HEAP32[$2209 + 8 >> 2] = 63422;
 HEAP16[$2210 >> 1] = 770;
 HEAP16[$2210 + 2 >> 1] = 229;
 HEAP16[$2210 + 4 >> 1] = 214;
 HEAP16[$2210 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2209, $2210);
 $28354 = $2211;
 HEAP32[$28354 >> 2] = 13632258;
 HEAP32[$28354 + 4 >> 2] = 3080406;
 HEAP32[$2211 + 8 >> 2] = 63422;
 HEAP16[$2212 >> 1] = 770;
 HEAP16[$2212 + 2 >> 1] = 208;
 HEAP16[$2212 + 4 >> 1] = 214;
 HEAP16[$2212 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2211, $2212);
 $28362 = $2213;
 HEAP32[$28362 >> 2] = 13632258;
 HEAP32[$28362 + 4 >> 2] = 3080406;
 HEAP32[$2213 + 8 >> 2] = 63422;
 HEAP16[$2214 >> 1] = 770;
 HEAP16[$2214 + 2 >> 1] = 213;
 HEAP16[$2214 + 4 >> 1] = 5;
 HEAP16[$2214 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2213, $2214);
 $28370 = $2215;
 HEAP32[$28370 >> 2] = 13632258;
 HEAP32[$28370 + 4 >> 2] = 3080406;
 HEAP32[$2215 + 8 >> 2] = 63422;
 HEAP16[$2216 >> 1] = 979;
 HEAP16[$2216 + 2 >> 1] = 213;
 HEAP16[$2216 + 4 >> 1] = 5;
 HEAP16[$2216 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2215, $2216);
 $28378 = $2217;
 HEAP32[$28378 >> 2] = 13632258;
 HEAP32[$28378 + 4 >> 2] = 3080406;
 HEAP32[$2217 + 8 >> 2] = 63422;
 HEAP16[$2218 >> 1] = 770;
 HEAP16[$2218 + 2 >> 1] = 229;
 HEAP16[$2218 + 4 >> 1] = 214;
 HEAP16[$2218 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2217, $2218);
 $28386 = $2219;
 HEAP32[$28386 >> 2] = 13632258;
 HEAP32[$28386 + 4 >> 2] = 3080406;
 HEAP32[$2219 + 8 >> 2] = 63422;
 HEAP16[$2220 >> 1] = 770;
 HEAP16[$2220 + 2 >> 1] = 234;
 HEAP16[$2220 + 4 >> 1] = 5;
 HEAP16[$2220 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2219, $2220);
 $28394 = $2221;
 HEAP32[$28394 >> 2] = 13632258;
 HEAP32[$28394 + 4 >> 2] = 3080406;
 HEAP32[$2221 + 8 >> 2] = 63422;
 HEAP16[$2222 >> 1] = 979;
 HEAP16[$2222 + 2 >> 1] = 234;
 HEAP16[$2222 + 4 >> 1] = 5;
 HEAP16[$2222 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2221, $2222);
 $28402 = $2223;
 HEAP32[$28402 >> 2] = 13632258;
 HEAP32[$28402 + 4 >> 2] = 3080406;
 HEAP32[$2223 + 8 >> 2] = 63422;
 HEAP16[$2224 >> 1] = 770;
 HEAP16[$2224 + 2 >> 1] = 250;
 HEAP16[$2224 + 4 >> 1] = 214;
 HEAP16[$2224 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2223, $2224);
 $28410 = $2225;
 HEAP32[$28410 >> 2] = 13632258;
 HEAP32[$28410 + 4 >> 2] = 3080406;
 HEAP32[$2225 + 8 >> 2] = 63422;
 HEAP16[$2226 >> 1] = 770;
 HEAP16[$2226 + 2 >> 1] = 208;
 HEAP16[$2226 + 4 >> 1] = 214;
 HEAP16[$2226 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2225, $2226);
 $28418 = $2227;
 HEAP32[$28418 >> 2] = 13632258;
 HEAP32[$28418 + 4 >> 2] = 3080406;
 HEAP32[$2227 + 8 >> 2] = 63422;
 HEAP16[$2228 >> 1] = 770;
 HEAP16[$2228 + 2 >> 1] = 213;
 HEAP16[$2228 + 4 >> 1] = 5;
 HEAP16[$2228 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2227, $2228);
 $28426 = $2229;
 HEAP32[$28426 >> 2] = 13632258;
 HEAP32[$28426 + 4 >> 2] = 3080406;
 HEAP32[$2229 + 8 >> 2] = 63422;
 HEAP16[$2230 >> 1] = 979;
 HEAP16[$2230 + 2 >> 1] = 213;
 HEAP16[$2230 + 4 >> 1] = 5;
 HEAP16[$2230 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2229, $2230);
 $28434 = $2231;
 HEAP32[$28434 >> 2] = 13632258;
 HEAP32[$28434 + 4 >> 2] = 3080406;
 HEAP32[$2231 + 8 >> 2] = 63422;
 HEAP16[$2232 >> 1] = 770;
 HEAP16[$2232 + 2 >> 1] = 229;
 HEAP16[$2232 + 4 >> 1] = 214;
 HEAP16[$2232 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2231, $2232);
 $28442 = $2233;
 HEAP32[$28442 >> 2] = 13632258;
 HEAP32[$28442 + 4 >> 2] = 3080406;
 HEAP32[$2233 + 8 >> 2] = 63422;
 HEAP16[$2234 >> 1] = 770;
 HEAP16[$2234 + 2 >> 1] = 234;
 HEAP16[$2234 + 4 >> 1] = 5;
 HEAP16[$2234 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2233, $2234);
 $28450 = $2235;
 HEAP32[$28450 >> 2] = 13632258;
 HEAP32[$28450 + 4 >> 2] = 3080406;
 HEAP32[$2235 + 8 >> 2] = 63422;
 HEAP16[$2236 >> 1] = 979;
 HEAP16[$2236 + 2 >> 1] = 234;
 HEAP16[$2236 + 4 >> 1] = 5;
 HEAP16[$2236 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2235, $2236);
 $28458 = $2237;
 HEAP32[$28458 >> 2] = 13632258;
 HEAP32[$28458 + 4 >> 2] = 3080406;
 HEAP32[$2237 + 8 >> 2] = 63422;
 HEAP16[$2238 >> 1] = 770;
 HEAP16[$2238 + 2 >> 1] = 250;
 HEAP16[$2238 + 4 >> 1] = 214;
 HEAP16[$2238 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2237, $2238);
 $28466 = $2239;
 HEAP32[$28466 >> 2] = 13632258;
 HEAP32[$28466 + 4 >> 2] = 4456662;
 HEAP32[$2239 + 8 >> 2] = 63422;
 HEAP16[$2240 >> 1] = 770;
 HEAP16[$2240 + 2 >> 1] = 208;
 HEAP16[$2240 + 4 >> 1] = 214;
 HEAP16[$2240 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2239, $2240);
 $28474 = $2241;
 HEAP32[$28474 >> 2] = 13632258;
 HEAP32[$28474 + 4 >> 2] = 4456662;
 HEAP32[$2241 + 8 >> 2] = 63422;
 HEAP16[$2242 >> 1] = 770;
 HEAP16[$2242 + 2 >> 1] = 213;
 HEAP16[$2242 + 4 >> 1] = 5;
 HEAP16[$2242 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2241, $2242);
 $28482 = $2243;
 HEAP32[$28482 >> 2] = 13632258;
 HEAP32[$28482 + 4 >> 2] = 4456662;
 HEAP32[$2243 + 8 >> 2] = 63422;
 HEAP16[$2244 >> 1] = 979;
 HEAP16[$2244 + 2 >> 1] = 213;
 HEAP16[$2244 + 4 >> 1] = 5;
 HEAP16[$2244 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2243, $2244);
 $28490 = $2245;
 HEAP32[$28490 >> 2] = 13632258;
 HEAP32[$28490 + 4 >> 2] = 4456662;
 HEAP32[$2245 + 8 >> 2] = 63422;
 HEAP16[$2246 >> 1] = 770;
 HEAP16[$2246 + 2 >> 1] = 229;
 HEAP16[$2246 + 4 >> 1] = 214;
 HEAP16[$2246 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2245, $2246);
 $28498 = $2247;
 HEAP32[$28498 >> 2] = 13632258;
 HEAP32[$28498 + 4 >> 2] = 4456662;
 HEAP32[$2247 + 8 >> 2] = 63422;
 HEAP16[$2248 >> 1] = 770;
 HEAP16[$2248 + 2 >> 1] = 234;
 HEAP16[$2248 + 4 >> 1] = 5;
 HEAP16[$2248 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2247, $2248);
 $28506 = $2249;
 HEAP32[$28506 >> 2] = 13632258;
 HEAP32[$28506 + 4 >> 2] = 4456662;
 HEAP32[$2249 + 8 >> 2] = 63422;
 HEAP16[$2250 >> 1] = 979;
 HEAP16[$2250 + 2 >> 1] = 234;
 HEAP16[$2250 + 4 >> 1] = 5;
 HEAP16[$2250 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2249, $2250);
 $28514 = $2251;
 HEAP32[$28514 >> 2] = 13632258;
 HEAP32[$28514 + 4 >> 2] = 4456662;
 HEAP32[$2251 + 8 >> 2] = 63422;
 HEAP16[$2252 >> 1] = 770;
 HEAP16[$2252 + 2 >> 1] = 250;
 HEAP16[$2252 + 4 >> 1] = 214;
 HEAP16[$2252 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2251, $2252);
 $28522 = $2253;
 HEAP32[$28522 >> 2] = 13632258;
 HEAP32[$28522 + 4 >> 2] = 4456662;
 HEAP32[$2253 + 8 >> 2] = 63422;
 HEAP16[$2254 >> 1] = 770;
 HEAP16[$2254 + 2 >> 1] = 255;
 HEAP16[$2254 + 4 >> 1] = 5;
 HEAP16[$2254 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2253, $2254);
 $28530 = $2255;
 HEAP32[$28530 >> 2] = 13632258;
 HEAP32[$28530 + 4 >> 2] = 4456662;
 HEAP32[$2255 + 8 >> 2] = 63422;
 HEAP16[$2256 >> 1] = 979;
 HEAP16[$2256 + 2 >> 1] = 255;
 HEAP16[$2256 + 4 >> 1] = 5;
 HEAP16[$2256 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2255, $2256);
 $28538 = $2257;
 HEAP32[$28538 >> 2] = 13632258;
 HEAP32[$28538 + 4 >> 2] = 4456662;
 HEAP32[$2257 + 8 >> 2] = 63422;
 HEAP16[$2258 >> 1] = 770;
 HEAP16[$2258 + 2 >> 1] = 271;
 HEAP16[$2258 + 4 >> 1] = 214;
 HEAP16[$2258 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2257, $2258);
 $28546 = $2259;
 HEAP32[$28546 >> 2] = 13632258;
 HEAP32[$28546 + 4 >> 2] = 4456662;
 HEAP32[$2259 + 8 >> 2] = 63422;
 HEAP16[$2260 >> 1] = 770;
 HEAP16[$2260 + 2 >> 1] = 208;
 HEAP16[$2260 + 4 >> 1] = 214;
 HEAP16[$2260 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2259, $2260);
 $28554 = $2261;
 HEAP32[$28554 >> 2] = 13632258;
 HEAP32[$28554 + 4 >> 2] = 4456662;
 HEAP32[$2261 + 8 >> 2] = 63422;
 HEAP16[$2262 >> 1] = 770;
 HEAP16[$2262 + 2 >> 1] = 213;
 HEAP16[$2262 + 4 >> 1] = 5;
 HEAP16[$2262 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2261, $2262);
 $28562 = $2263;
 HEAP32[$28562 >> 2] = 13632258;
 HEAP32[$28562 + 4 >> 2] = 4456662;
 HEAP32[$2263 + 8 >> 2] = 63422;
 HEAP16[$2264 >> 1] = 979;
 HEAP16[$2264 + 2 >> 1] = 213;
 HEAP16[$2264 + 4 >> 1] = 5;
 HEAP16[$2264 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2263, $2264);
 $28570 = $2265;
 HEAP32[$28570 >> 2] = 13632258;
 HEAP32[$28570 + 4 >> 2] = 4456662;
 HEAP32[$2265 + 8 >> 2] = 63422;
 HEAP16[$2266 >> 1] = 770;
 HEAP16[$2266 + 2 >> 1] = 229;
 HEAP16[$2266 + 4 >> 1] = 214;
 HEAP16[$2266 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2265, $2266);
 $28578 = $2267;
 HEAP32[$28578 >> 2] = 13632258;
 HEAP32[$28578 + 4 >> 2] = 4456662;
 HEAP32[$2267 + 8 >> 2] = 63422;
 HEAP16[$2268 >> 1] = 770;
 HEAP16[$2268 + 2 >> 1] = 234;
 HEAP16[$2268 + 4 >> 1] = 5;
 HEAP16[$2268 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2267, $2268);
 $28586 = $2269;
 HEAP32[$28586 >> 2] = 13632258;
 HEAP32[$28586 + 4 >> 2] = 4456662;
 HEAP32[$2269 + 8 >> 2] = 63422;
 HEAP16[$2270 >> 1] = 979;
 HEAP16[$2270 + 2 >> 1] = 234;
 HEAP16[$2270 + 4 >> 1] = 5;
 HEAP16[$2270 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2269, $2270);
 $28594 = $2271;
 HEAP32[$28594 >> 2] = 13632258;
 HEAP32[$28594 + 4 >> 2] = 4456662;
 HEAP32[$2271 + 8 >> 2] = 63422;
 HEAP16[$2272 >> 1] = 770;
 HEAP16[$2272 + 2 >> 1] = 250;
 HEAP16[$2272 + 4 >> 1] = 214;
 HEAP16[$2272 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2271, $2272);
 $28602 = $2273;
 HEAP32[$28602 >> 2] = 13632258;
 HEAP32[$28602 + 4 >> 2] = 4456662;
 HEAP32[$2273 + 8 >> 2] = 63422;
 HEAP16[$2274 >> 1] = 770;
 HEAP16[$2274 + 2 >> 1] = 255;
 HEAP16[$2274 + 4 >> 1] = 5;
 HEAP16[$2274 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2273, $2274);
 $28610 = $2275;
 HEAP32[$28610 >> 2] = 13632258;
 HEAP32[$28610 + 4 >> 2] = 4456662;
 HEAP32[$2275 + 8 >> 2] = 63422;
 HEAP16[$2276 >> 1] = 979;
 HEAP16[$2276 + 2 >> 1] = 255;
 HEAP16[$2276 + 4 >> 1] = 5;
 HEAP16[$2276 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2275, $2276);
 $28618 = $2277;
 HEAP32[$28618 >> 2] = 13632258;
 HEAP32[$28618 + 4 >> 2] = 4456662;
 HEAP32[$2277 + 8 >> 2] = 63422;
 HEAP16[$2278 >> 1] = 770;
 HEAP16[$2278 + 2 >> 1] = 271;
 HEAP16[$2278 + 4 >> 1] = 214;
 HEAP16[$2278 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2277, $2278);
 $28626 = $2279;
 HEAP32[$28626 >> 2] = 13632258;
 HEAP32[$28626 + 4 >> 2] = 5832918;
 HEAP32[$2279 + 8 >> 2] = 63422;
 HEAP16[$2280 >> 1] = 770;
 HEAP16[$2280 + 2 >> 1] = 208;
 HEAP16[$2280 + 4 >> 1] = 214;
 HEAP16[$2280 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2279, $2280);
 $28634 = $2281;
 HEAP32[$28634 >> 2] = 13632258;
 HEAP32[$28634 + 4 >> 2] = 5832918;
 HEAP32[$2281 + 8 >> 2] = 63422;
 HEAP16[$2282 >> 1] = 770;
 HEAP16[$2282 + 2 >> 1] = 213;
 HEAP16[$2282 + 4 >> 1] = 5;
 HEAP16[$2282 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2281, $2282);
 $28642 = $2283;
 HEAP32[$28642 >> 2] = 13632258;
 HEAP32[$28642 + 4 >> 2] = 5832918;
 HEAP32[$2283 + 8 >> 2] = 63422;
 HEAP16[$2284 >> 1] = 979;
 HEAP16[$2284 + 2 >> 1] = 213;
 HEAP16[$2284 + 4 >> 1] = 5;
 HEAP16[$2284 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2283, $2284);
 $28650 = $2285;
 HEAP32[$28650 >> 2] = 13632258;
 HEAP32[$28650 + 4 >> 2] = 5832918;
 HEAP32[$2285 + 8 >> 2] = 63422;
 HEAP16[$2286 >> 1] = 770;
 HEAP16[$2286 + 2 >> 1] = 229;
 HEAP16[$2286 + 4 >> 1] = 214;
 HEAP16[$2286 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2285, $2286);
 $28658 = $2287;
 HEAP32[$28658 >> 2] = 13632258;
 HEAP32[$28658 + 4 >> 2] = 5832918;
 HEAP32[$2287 + 8 >> 2] = 63422;
 HEAP16[$2288 >> 1] = 770;
 HEAP16[$2288 + 2 >> 1] = 234;
 HEAP16[$2288 + 4 >> 1] = 5;
 HEAP16[$2288 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2287, $2288);
 $28666 = $2289;
 HEAP32[$28666 >> 2] = 13632258;
 HEAP32[$28666 + 4 >> 2] = 5832918;
 HEAP32[$2289 + 8 >> 2] = 63422;
 HEAP16[$2290 >> 1] = 979;
 HEAP16[$2290 + 2 >> 1] = 234;
 HEAP16[$2290 + 4 >> 1] = 5;
 HEAP16[$2290 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2289, $2290);
 $28674 = $2291;
 HEAP32[$28674 >> 2] = 13632258;
 HEAP32[$28674 + 4 >> 2] = 5832918;
 HEAP32[$2291 + 8 >> 2] = 63422;
 HEAP16[$2292 >> 1] = 770;
 HEAP16[$2292 + 2 >> 1] = 250;
 HEAP16[$2292 + 4 >> 1] = 214;
 HEAP16[$2292 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2291, $2292);
 $28682 = $2293;
 HEAP32[$28682 >> 2] = 13632258;
 HEAP32[$28682 + 4 >> 2] = 5832918;
 HEAP32[$2293 + 8 >> 2] = 63422;
 HEAP16[$2294 >> 1] = 770;
 HEAP16[$2294 + 2 >> 1] = 255;
 HEAP16[$2294 + 4 >> 1] = 5;
 HEAP16[$2294 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2293, $2294);
 $28690 = $2295;
 HEAP32[$28690 >> 2] = 13632258;
 HEAP32[$28690 + 4 >> 2] = 5832918;
 HEAP32[$2295 + 8 >> 2] = 63422;
 HEAP16[$2296 >> 1] = 979;
 HEAP16[$2296 + 2 >> 1] = 255;
 HEAP16[$2296 + 4 >> 1] = 5;
 HEAP16[$2296 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2295, $2296);
 $28698 = $2297;
 HEAP32[$28698 >> 2] = 13632258;
 HEAP32[$28698 + 4 >> 2] = 5832918;
 HEAP32[$2297 + 8 >> 2] = 63422;
 HEAP16[$2298 >> 1] = 770;
 HEAP16[$2298 + 2 >> 1] = 271;
 HEAP16[$2298 + 4 >> 1] = 214;
 HEAP16[$2298 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2297, $2298);
 $28706 = $2299;
 HEAP32[$28706 >> 2] = 13632258;
 HEAP32[$28706 + 4 >> 2] = 5832918;
 HEAP32[$2299 + 8 >> 2] = 63422;
 HEAP16[$2300 >> 1] = 770;
 HEAP16[$2300 + 2 >> 1] = 276;
 HEAP16[$2300 + 4 >> 1] = 5;
 HEAP16[$2300 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2299, $2300);
 $28714 = $2301;
 HEAP32[$28714 >> 2] = 13632258;
 HEAP32[$28714 + 4 >> 2] = 5832918;
 HEAP32[$2301 + 8 >> 2] = 63422;
 HEAP16[$2302 >> 1] = 979;
 HEAP16[$2302 + 2 >> 1] = 276;
 HEAP16[$2302 + 4 >> 1] = 5;
 HEAP16[$2302 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2301, $2302);
 $28722 = $2303;
 HEAP32[$28722 >> 2] = 13632258;
 HEAP32[$28722 + 4 >> 2] = 5832918;
 HEAP32[$2303 + 8 >> 2] = 63422;
 HEAP16[$2304 >> 1] = 770;
 HEAP16[$2304 + 2 >> 1] = 292;
 HEAP16[$2304 + 4 >> 1] = 214;
 HEAP16[$2304 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2303, $2304);
 $28730 = $2305;
 HEAP32[$28730 >> 2] = 13632258;
 HEAP32[$28730 + 4 >> 2] = 5832918;
 HEAP32[$2305 + 8 >> 2] = 63422;
 HEAP16[$2306 >> 1] = 770;
 HEAP16[$2306 + 2 >> 1] = 208;
 HEAP16[$2306 + 4 >> 1] = 214;
 HEAP16[$2306 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2305, $2306);
 $28738 = $2307;
 HEAP32[$28738 >> 2] = 13632258;
 HEAP32[$28738 + 4 >> 2] = 5832918;
 HEAP32[$2307 + 8 >> 2] = 63422;
 HEAP16[$2308 >> 1] = 770;
 HEAP16[$2308 + 2 >> 1] = 213;
 HEAP16[$2308 + 4 >> 1] = 5;
 HEAP16[$2308 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2307, $2308);
 $28746 = $2309;
 HEAP32[$28746 >> 2] = 13632258;
 HEAP32[$28746 + 4 >> 2] = 5832918;
 HEAP32[$2309 + 8 >> 2] = 63422;
 HEAP16[$2310 >> 1] = 979;
 HEAP16[$2310 + 2 >> 1] = 213;
 HEAP16[$2310 + 4 >> 1] = 5;
 HEAP16[$2310 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2309, $2310);
 $28754 = $2311;
 HEAP32[$28754 >> 2] = 13632258;
 HEAP32[$28754 + 4 >> 2] = 5832918;
 HEAP32[$2311 + 8 >> 2] = 63422;
 HEAP16[$2312 >> 1] = 770;
 HEAP16[$2312 + 2 >> 1] = 229;
 HEAP16[$2312 + 4 >> 1] = 214;
 HEAP16[$2312 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2311, $2312);
 $28762 = $2313;
 HEAP32[$28762 >> 2] = 13632258;
 HEAP32[$28762 + 4 >> 2] = 5832918;
 HEAP32[$2313 + 8 >> 2] = 63422;
 HEAP16[$2314 >> 1] = 770;
 HEAP16[$2314 + 2 >> 1] = 234;
 HEAP16[$2314 + 4 >> 1] = 5;
 HEAP16[$2314 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2313, $2314);
 $28770 = $2315;
 HEAP32[$28770 >> 2] = 13632258;
 HEAP32[$28770 + 4 >> 2] = 5832918;
 HEAP32[$2315 + 8 >> 2] = 63422;
 HEAP16[$2316 >> 1] = 979;
 HEAP16[$2316 + 2 >> 1] = 234;
 HEAP16[$2316 + 4 >> 1] = 5;
 HEAP16[$2316 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2315, $2316);
 $28778 = $2317;
 HEAP32[$28778 >> 2] = 13632258;
 HEAP32[$28778 + 4 >> 2] = 5832918;
 HEAP32[$2317 + 8 >> 2] = 63422;
 HEAP16[$2318 >> 1] = 770;
 HEAP16[$2318 + 2 >> 1] = 250;
 HEAP16[$2318 + 4 >> 1] = 214;
 HEAP16[$2318 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2317, $2318);
 $28786 = $2319;
 HEAP32[$28786 >> 2] = 13632258;
 HEAP32[$28786 + 4 >> 2] = 5832918;
 HEAP32[$2319 + 8 >> 2] = 63422;
 HEAP16[$2320 >> 1] = 770;
 HEAP16[$2320 + 2 >> 1] = 255;
 HEAP16[$2320 + 4 >> 1] = 5;
 HEAP16[$2320 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2319, $2320);
 $28794 = $2321;
 HEAP32[$28794 >> 2] = 13632258;
 HEAP32[$28794 + 4 >> 2] = 5832918;
 HEAP32[$2321 + 8 >> 2] = 63422;
 HEAP16[$2322 >> 1] = 979;
 HEAP16[$2322 + 2 >> 1] = 255;
 HEAP16[$2322 + 4 >> 1] = 5;
 HEAP16[$2322 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2321, $2322);
 $28802 = $2323;
 HEAP32[$28802 >> 2] = 13632258;
 HEAP32[$28802 + 4 >> 2] = 5832918;
 HEAP32[$2323 + 8 >> 2] = 63422;
 HEAP16[$2324 >> 1] = 770;
 HEAP16[$2324 + 2 >> 1] = 271;
 HEAP16[$2324 + 4 >> 1] = 214;
 HEAP16[$2324 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2323, $2324);
 $28810 = $2325;
 HEAP32[$28810 >> 2] = 13632258;
 HEAP32[$28810 + 4 >> 2] = 5832918;
 HEAP32[$2325 + 8 >> 2] = 63422;
 HEAP16[$2326 >> 1] = 770;
 HEAP16[$2326 + 2 >> 1] = 276;
 HEAP16[$2326 + 4 >> 1] = 5;
 HEAP16[$2326 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2325, $2326);
 $28818 = $2327;
 HEAP32[$28818 >> 2] = 13632258;
 HEAP32[$28818 + 4 >> 2] = 5832918;
 HEAP32[$2327 + 8 >> 2] = 63422;
 HEAP16[$2328 >> 1] = 979;
 HEAP16[$2328 + 2 >> 1] = 276;
 HEAP16[$2328 + 4 >> 1] = 5;
 HEAP16[$2328 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2327, $2328);
 $28826 = $2329;
 HEAP32[$28826 >> 2] = 13632258;
 HEAP32[$28826 + 4 >> 2] = 5832918;
 HEAP32[$2329 + 8 >> 2] = 63422;
 HEAP16[$2330 >> 1] = 770;
 HEAP16[$2330 + 2 >> 1] = 292;
 HEAP16[$2330 + 4 >> 1] = 214;
 HEAP16[$2330 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2329, $2330);
 $28834 = $2331;
 HEAP32[$28834 >> 2] = 13632258;
 HEAP32[$28834 + 4 >> 2] = 5832918;
 HEAP32[$2331 + 8 >> 2] = 63422;
 HEAP16[$2332 >> 1] = 770;
 HEAP16[$2332 + 2 >> 1] = 208;
 HEAP16[$2332 + 4 >> 1] = 214;
 HEAP16[$2332 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2331, $2332);
 $28842 = $2333;
 HEAP32[$28842 >> 2] = 13632258;
 HEAP32[$28842 + 4 >> 2] = 5832918;
 HEAP32[$2333 + 8 >> 2] = 63422;
 HEAP16[$2334 >> 1] = 770;
 HEAP16[$2334 + 2 >> 1] = 213;
 HEAP16[$2334 + 4 >> 1] = 5;
 HEAP16[$2334 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2333, $2334);
 $28850 = $2335;
 HEAP32[$28850 >> 2] = 13632258;
 HEAP32[$28850 + 4 >> 2] = 5832918;
 HEAP32[$2335 + 8 >> 2] = 63422;
 HEAP16[$2336 >> 1] = 979;
 HEAP16[$2336 + 2 >> 1] = 213;
 HEAP16[$2336 + 4 >> 1] = 5;
 HEAP16[$2336 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2335, $2336);
 $28858 = $2337;
 HEAP32[$28858 >> 2] = 13632258;
 HEAP32[$28858 + 4 >> 2] = 5832918;
 HEAP32[$2337 + 8 >> 2] = 63422;
 HEAP16[$2338 >> 1] = 770;
 HEAP16[$2338 + 2 >> 1] = 229;
 HEAP16[$2338 + 4 >> 1] = 214;
 HEAP16[$2338 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2337, $2338);
 $28866 = $2339;
 HEAP32[$28866 >> 2] = 13632258;
 HEAP32[$28866 + 4 >> 2] = 5832918;
 HEAP32[$2339 + 8 >> 2] = 63422;
 HEAP16[$2340 >> 1] = 770;
 HEAP16[$2340 + 2 >> 1] = 234;
 HEAP16[$2340 + 4 >> 1] = 5;
 HEAP16[$2340 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2339, $2340);
 $28874 = $2341;
 HEAP32[$28874 >> 2] = 13632258;
 HEAP32[$28874 + 4 >> 2] = 5832918;
 HEAP32[$2341 + 8 >> 2] = 63422;
 HEAP16[$2342 >> 1] = 979;
 HEAP16[$2342 + 2 >> 1] = 234;
 HEAP16[$2342 + 4 >> 1] = 5;
 HEAP16[$2342 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2341, $2342);
 $28882 = $2343;
 HEAP32[$28882 >> 2] = 13632258;
 HEAP32[$28882 + 4 >> 2] = 5832918;
 HEAP32[$2343 + 8 >> 2] = 63422;
 HEAP16[$2344 >> 1] = 770;
 HEAP16[$2344 + 2 >> 1] = 250;
 HEAP16[$2344 + 4 >> 1] = 214;
 HEAP16[$2344 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2343, $2344);
 $28890 = $2345;
 HEAP32[$28890 >> 2] = 13632258;
 HEAP32[$28890 + 4 >> 2] = 5832918;
 HEAP32[$2345 + 8 >> 2] = 63422;
 HEAP16[$2346 >> 1] = 770;
 HEAP16[$2346 + 2 >> 1] = 255;
 HEAP16[$2346 + 4 >> 1] = 5;
 HEAP16[$2346 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2345, $2346);
 $28898 = $2347;
 HEAP32[$28898 >> 2] = 13632258;
 HEAP32[$28898 + 4 >> 2] = 5832918;
 HEAP32[$2347 + 8 >> 2] = 63422;
 HEAP16[$2348 >> 1] = 979;
 HEAP16[$2348 + 2 >> 1] = 255;
 HEAP16[$2348 + 4 >> 1] = 5;
 HEAP16[$2348 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2347, $2348);
 $28906 = $2349;
 HEAP32[$28906 >> 2] = 13632258;
 HEAP32[$28906 + 4 >> 2] = 5832918;
 HEAP32[$2349 + 8 >> 2] = 63422;
 HEAP16[$2350 >> 1] = 770;
 HEAP16[$2350 + 2 >> 1] = 271;
 HEAP16[$2350 + 4 >> 1] = 214;
 HEAP16[$2350 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2349, $2350);
 $28914 = $2351;
 HEAP32[$28914 >> 2] = 13632258;
 HEAP32[$28914 + 4 >> 2] = 5832918;
 HEAP32[$2351 + 8 >> 2] = 63422;
 HEAP16[$2352 >> 1] = 770;
 HEAP16[$2352 + 2 >> 1] = 276;
 HEAP16[$2352 + 4 >> 1] = 5;
 HEAP16[$2352 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2351, $2352);
 $28922 = $2353;
 HEAP32[$28922 >> 2] = 13632258;
 HEAP32[$28922 + 4 >> 2] = 5832918;
 HEAP32[$2353 + 8 >> 2] = 63422;
 HEAP16[$2354 >> 1] = 979;
 HEAP16[$2354 + 2 >> 1] = 276;
 HEAP16[$2354 + 4 >> 1] = 5;
 HEAP16[$2354 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2353, $2354);
 $28930 = $2355;
 HEAP32[$28930 >> 2] = 13632258;
 HEAP32[$28930 + 4 >> 2] = 5832918;
 HEAP32[$2355 + 8 >> 2] = 63422;
 HEAP16[$2356 >> 1] = 770;
 HEAP16[$2356 + 2 >> 1] = 292;
 HEAP16[$2356 + 4 >> 1] = 214;
 HEAP16[$2356 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2355, $2356);
 $28938 = $2357;
 HEAP32[$28938 >> 2] = 13632258;
 HEAP32[$28938 + 4 >> 2] = 7864534;
 HEAP32[$2357 + 8 >> 2] = 63422;
 HEAP16[$2358 >> 1] = 770;
 HEAP16[$2358 + 2 >> 1] = 208;
 HEAP16[$2358 + 4 >> 1] = 214;
 HEAP16[$2358 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2357, $2358);
 $28946 = $2359;
 HEAP32[$28946 >> 2] = 13632258;
 HEAP32[$28946 + 4 >> 2] = 7864534;
 HEAP32[$2359 + 8 >> 2] = 63422;
 HEAP16[$2360 >> 1] = 770;
 HEAP16[$2360 + 2 >> 1] = 213;
 HEAP16[$2360 + 4 >> 1] = 5;
 HEAP16[$2360 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2359, $2360);
 $28954 = $2361;
 HEAP32[$28954 >> 2] = 13632258;
 HEAP32[$28954 + 4 >> 2] = 7864534;
 HEAP32[$2361 + 8 >> 2] = 63422;
 HEAP16[$2362 >> 1] = 979;
 HEAP16[$2362 + 2 >> 1] = 213;
 HEAP16[$2362 + 4 >> 1] = 5;
 HEAP16[$2362 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2361, $2362);
 $28962 = $2363;
 HEAP32[$28962 >> 2] = 13632258;
 HEAP32[$28962 + 4 >> 2] = 7864534;
 HEAP32[$2363 + 8 >> 2] = 63422;
 HEAP16[$2364 >> 1] = 770;
 HEAP16[$2364 + 2 >> 1] = 229;
 HEAP16[$2364 + 4 >> 1] = 214;
 HEAP16[$2364 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2363, $2364);
 $28970 = $2365;
 HEAP32[$28970 >> 2] = 13632258;
 HEAP32[$28970 + 4 >> 2] = 7864534;
 HEAP32[$2365 + 8 >> 2] = 63422;
 HEAP16[$2366 >> 1] = 770;
 HEAP16[$2366 + 2 >> 1] = 234;
 HEAP16[$2366 + 4 >> 1] = 5;
 HEAP16[$2366 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2365, $2366);
 $28978 = $2367;
 HEAP32[$28978 >> 2] = 13632258;
 HEAP32[$28978 + 4 >> 2] = 7864534;
 HEAP32[$2367 + 8 >> 2] = 63422;
 HEAP16[$2368 >> 1] = 979;
 HEAP16[$2368 + 2 >> 1] = 234;
 HEAP16[$2368 + 4 >> 1] = 5;
 HEAP16[$2368 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2367, $2368);
 $28986 = $2369;
 HEAP32[$28986 >> 2] = 13632258;
 HEAP32[$28986 + 4 >> 2] = 7864534;
 HEAP32[$2369 + 8 >> 2] = 63422;
 HEAP16[$2370 >> 1] = 770;
 HEAP16[$2370 + 2 >> 1] = 250;
 HEAP16[$2370 + 4 >> 1] = 214;
 HEAP16[$2370 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2369, $2370);
 $28994 = $2371;
 HEAP32[$28994 >> 2] = 13632258;
 HEAP32[$28994 + 4 >> 2] = 7864534;
 HEAP32[$2371 + 8 >> 2] = 63422;
 HEAP16[$2372 >> 1] = 770;
 HEAP16[$2372 + 2 >> 1] = 255;
 HEAP16[$2372 + 4 >> 1] = 5;
 HEAP16[$2372 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2371, $2372);
 $29002 = $2373;
 HEAP32[$29002 >> 2] = 13632258;
 HEAP32[$29002 + 4 >> 2] = 7864534;
 HEAP32[$2373 + 8 >> 2] = 63422;
 HEAP16[$2374 >> 1] = 979;
 HEAP16[$2374 + 2 >> 1] = 255;
 HEAP16[$2374 + 4 >> 1] = 5;
 HEAP16[$2374 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2373, $2374);
 $29010 = $2375;
 HEAP32[$29010 >> 2] = 13632258;
 HEAP32[$29010 + 4 >> 2] = 7864534;
 HEAP32[$2375 + 8 >> 2] = 63422;
 HEAP16[$2376 >> 1] = 770;
 HEAP16[$2376 + 2 >> 1] = 271;
 HEAP16[$2376 + 4 >> 1] = 214;
 HEAP16[$2376 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2375, $2376);
 $29018 = $2377;
 HEAP32[$29018 >> 2] = 13632258;
 HEAP32[$29018 + 4 >> 2] = 7864534;
 HEAP32[$2377 + 8 >> 2] = 63422;
 HEAP16[$2378 >> 1] = 770;
 HEAP16[$2378 + 2 >> 1] = 276;
 HEAP16[$2378 + 4 >> 1] = 5;
 HEAP16[$2378 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2377, $2378);
 $29026 = $2379;
 HEAP32[$29026 >> 2] = 13632258;
 HEAP32[$29026 + 4 >> 2] = 7864534;
 HEAP32[$2379 + 8 >> 2] = 63422;
 HEAP16[$2380 >> 1] = 979;
 HEAP16[$2380 + 2 >> 1] = 276;
 HEAP16[$2380 + 4 >> 1] = 5;
 HEAP16[$2380 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2379, $2380);
 $29034 = $2381;
 HEAP32[$29034 >> 2] = 13632258;
 HEAP32[$29034 + 4 >> 2] = 7864534;
 HEAP32[$2381 + 8 >> 2] = 63422;
 HEAP16[$2382 >> 1] = 770;
 HEAP16[$2382 + 2 >> 1] = 292;
 HEAP16[$2382 + 4 >> 1] = 214;
 HEAP16[$2382 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2381, $2382);
 $29042 = $2383;
 HEAP32[$29042 >> 2] = 13632258;
 HEAP32[$29042 + 4 >> 2] = 7864534;
 HEAP32[$2383 + 8 >> 2] = 63422;
 HEAP16[$2384 >> 1] = 770;
 HEAP16[$2384 + 2 >> 1] = 297;
 HEAP16[$2384 + 4 >> 1] = 5;
 HEAP16[$2384 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2383, $2384);
 $29050 = $2385;
 HEAP32[$29050 >> 2] = 13632258;
 HEAP32[$29050 + 4 >> 2] = 7864534;
 HEAP32[$2385 + 8 >> 2] = 63422;
 HEAP16[$2386 >> 1] = 979;
 HEAP16[$2386 + 2 >> 1] = 297;
 HEAP16[$2386 + 4 >> 1] = 5;
 HEAP16[$2386 + 6 >> 1] = 26;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2385, $2386);
 $29058 = $2387;
 HEAP32[$29058 >> 2] = 13632258;
 HEAP32[$29058 + 4 >> 2] = 7864534;
 HEAP32[$2387 + 8 >> 2] = 63422;
 HEAP16[$2388 >> 1] = 770;
 HEAP16[$2388 + 2 >> 1] = 323;
 HEAP16[$2388 + 4 >> 1] = 214;
 HEAP16[$2388 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2387, $2388);
 $29066 = $2389;
 HEAP32[$29066 >> 2] = 29950174;
 HEAP32[$29066 + 4 >> 2] = 10027555;
 HEAP32[$2389 + 8 >> 2] = 63422;
 HEAP16[$2390 >> 1] = 222;
 HEAP16[$2390 + 2 >> 1] = 457;
 HEAP16[$2390 + 4 >> 1] = 3;
 HEAP16[$2390 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2389, $2390);
 $29074 = $2391;
 HEAP32[$29074 >> 2] = 29950174;
 HEAP32[$29074 + 4 >> 2] = 10027555;
 HEAP32[$2391 + 8 >> 2] = 63422;
 HEAP16[$2392 >> 1] = 437;
 HEAP16[$2392 + 2 >> 1] = 457;
 HEAP16[$2392 + 4 >> 1] = 6;
 HEAP16[$2392 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2391, $2392);
 $29082 = $2393;
 HEAP32[$29082 >> 2] = 29950174;
 HEAP32[$29082 + 4 >> 2] = 10027555;
 HEAP32[$2393 + 8 >> 2] = 63422;
 HEAP16[$2394 >> 1] = 766;
 HEAP16[$2394 + 2 >> 1] = 457;
 HEAP16[$2394 + 4 >> 1] = 3;
 HEAP16[$2394 + 6 >> 1] = 153;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2393, $2394);
 $29090 = $2395;
 HEAP32[$29090 >> 2] = 29950174;
 HEAP32[$29090 + 4 >> 2] = 10617379;
 HEAP32[$2395 + 8 >> 2] = 63422;
 HEAP16[$2396 >> 1] = 222;
 HEAP16[$2396 + 2 >> 1] = 457;
 HEAP16[$2396 + 4 >> 1] = 3;
 HEAP16[$2396 + 6 >> 1] = 162;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2395, $2396);
 $29098 = $2397;
 HEAP32[$29098 >> 2] = 29950174;
 HEAP32[$29098 + 4 >> 2] = 10617379;
 HEAP32[$2397 + 8 >> 2] = 63422;
 HEAP16[$2398 >> 1] = 437;
 HEAP16[$2398 + 2 >> 1] = 457;
 HEAP16[$2398 + 4 >> 1] = 6;
 HEAP16[$2398 + 6 >> 1] = 162;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2397, $2398);
 $29106 = $2399;
 HEAP32[$29106 >> 2] = 29950174;
 HEAP32[$29106 + 4 >> 2] = 10617379;
 HEAP32[$2399 + 8 >> 2] = 63422;
 HEAP16[$2400 >> 1] = 766;
 HEAP16[$2400 + 2 >> 1] = 457;
 HEAP16[$2400 + 4 >> 1] = 3;
 HEAP16[$2400 + 6 >> 1] = 162;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2399, $2400);
 $29114 = $2401;
 HEAP32[$29114 >> 2] = 29950174;
 HEAP32[$29114 + 4 >> 2] = 10617379;
 HEAP32[$2401 + 8 >> 2] = 63422;
 HEAP16[$2402 >> 1] = 222;
 HEAP16[$2402 + 2 >> 1] = 457;
 HEAP16[$2402 + 4 >> 1] = 3;
 HEAP16[$2402 + 6 >> 1] = 162;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2401, $2402);
 $29122 = $2403;
 HEAP32[$29122 >> 2] = 29950174;
 HEAP32[$29122 + 4 >> 2] = 10617379;
 HEAP32[$2403 + 8 >> 2] = 63422;
 HEAP16[$2404 >> 1] = 437;
 HEAP16[$2404 + 2 >> 1] = 457;
 HEAP16[$2404 + 4 >> 1] = 6;
 HEAP16[$2404 + 6 >> 1] = 162;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2403, $2404);
 $29130 = $2405;
 HEAP32[$29130 >> 2] = 29950174;
 HEAP32[$29130 + 4 >> 2] = 10617379;
 HEAP32[$2405 + 8 >> 2] = 63422;
 HEAP16[$2406 >> 1] = 766;
 HEAP16[$2406 + 2 >> 1] = 457;
 HEAP16[$2406 + 4 >> 1] = 3;
 HEAP16[$2406 + 6 >> 1] = 162;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2405, $2406);
 $29138 = $2407;
 HEAP32[$29138 >> 2] = 15401182;
 HEAP32[$29138 + 4 >> 2] = 12059171;
 HEAP32[$2407 + 8 >> 2] = 63422;
 HEAP16[$2408 >> 1] = 222;
 HEAP16[$2408 + 2 >> 1] = 235;
 HEAP16[$2408 + 4 >> 1] = 3;
 HEAP16[$2408 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2407, $2408);
 $29146 = $2409;
 HEAP32[$29146 >> 2] = 15401182;
 HEAP32[$29146 + 4 >> 2] = 12059171;
 HEAP32[$2409 + 8 >> 2] = 63422;
 HEAP16[$2410 >> 1] = 437;
 HEAP16[$2410 + 2 >> 1] = 235;
 HEAP16[$2410 + 4 >> 1] = 6;
 HEAP16[$2410 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2409, $2410);
 $29154 = $2411;
 HEAP32[$29154 >> 2] = 15401182;
 HEAP32[$29154 + 4 >> 2] = 12059171;
 HEAP32[$2411 + 8 >> 2] = 63422;
 HEAP16[$2412 >> 1] = 766;
 HEAP16[$2412 + 2 >> 1] = 235;
 HEAP16[$2412 + 4 >> 1] = 3;
 HEAP16[$2412 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2411, $2412);
 $29162 = $2413;
 HEAP32[$29162 >> 2] = 15401182;
 HEAP32[$29162 + 4 >> 2] = 12059171;
 HEAP32[$2413 + 8 >> 2] = 63422;
 HEAP16[$2414 >> 1] = 222;
 HEAP16[$2414 + 2 >> 1] = 416;
 HEAP16[$2414 + 4 >> 1] = 547;
 HEAP16[$2414 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2413, $2414);
 $29170 = $2415;
 HEAP32[$29170 >> 2] = 15401182;
 HEAP32[$29170 + 4 >> 2] = 12059171;
 HEAP32[$2415 + 8 >> 2] = 63422;
 HEAP16[$2416 >> 1] = 222;
 HEAP16[$2416 + 2 >> 1] = 235;
 HEAP16[$2416 + 4 >> 1] = 3;
 HEAP16[$2416 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2415, $2416);
 $29178 = $2417;
 HEAP32[$29178 >> 2] = 15401182;
 HEAP32[$29178 + 4 >> 2] = 12059171;
 HEAP32[$2417 + 8 >> 2] = 63422;
 HEAP16[$2418 >> 1] = 437;
 HEAP16[$2418 + 2 >> 1] = 235;
 HEAP16[$2418 + 4 >> 1] = 6;
 HEAP16[$2418 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2417, $2418);
 $29186 = $2419;
 HEAP32[$29186 >> 2] = 15401182;
 HEAP32[$29186 + 4 >> 2] = 12059171;
 HEAP32[$2419 + 8 >> 2] = 63422;
 HEAP16[$2420 >> 1] = 766;
 HEAP16[$2420 + 2 >> 1] = 235;
 HEAP16[$2420 + 4 >> 1] = 3;
 HEAP16[$2420 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2419, $2420);
 $29194 = $2421;
 HEAP32[$29194 >> 2] = 15401182;
 HEAP32[$29194 + 4 >> 2] = 12059171;
 HEAP32[$2421 + 8 >> 2] = 63422;
 HEAP16[$2422 >> 1] = 222;
 HEAP16[$2422 + 2 >> 1] = 416;
 HEAP16[$2422 + 4 >> 1] = 547;
 HEAP16[$2422 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2421, $2422);
 $29202 = $2423;
 HEAP32[$29202 >> 2] = 29753556;
 HEAP32[$29202 + 4 >> 2] = 10814223;
 HEAP8[$2423 + 8 >> 0] = -52;
 HEAP16[$2423 + 10 >> 1] = 212;
 HEAP16[$2423 + 12 >> 1] = 419;
 HEAP16[$2424 >> 1] = 0;
 HEAP16[$2424 + 2 >> 1] = 0;
 HEAP16[$2424 + 4 >> 1] = 1024;
 HEAP16[$2424 + 6 >> 1] = 768;
 __ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect($front, $2423, $2424);
 $29212 = $2425;
 HEAP32[$29212 >> 2] = 15401182;
 HEAP32[$29212 + 4 >> 2] = 14352931;
 HEAP32[$2425 + 8 >> 2] = 63422;
 HEAP16[$2426 >> 1] = 222;
 HEAP16[$2426 + 2 >> 1] = 235;
 HEAP16[$2426 + 4 >> 1] = 3;
 HEAP16[$2426 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2425, $2426);
 $29220 = $2427;
 HEAP32[$29220 >> 2] = 15401182;
 HEAP32[$29220 + 4 >> 2] = 14352931;
 HEAP32[$2427 + 8 >> 2] = 63422;
 HEAP16[$2428 >> 1] = 437;
 HEAP16[$2428 + 2 >> 1] = 235;
 HEAP16[$2428 + 4 >> 1] = 6;
 HEAP16[$2428 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2427, $2428);
 $29228 = $2429;
 HEAP32[$29228 >> 2] = 15401182;
 HEAP32[$29228 + 4 >> 2] = 14352931;
 HEAP32[$2429 + 8 >> 2] = 63422;
 HEAP16[$2430 >> 1] = 766;
 HEAP16[$2430 + 2 >> 1] = 235;
 HEAP16[$2430 + 4 >> 1] = 3;
 HEAP16[$2430 + 6 >> 1] = 181;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2429, $2430);
 $29236 = $2431;
 HEAP32[$29236 >> 2] = 15401182;
 HEAP32[$29236 + 4 >> 2] = 14352931;
 HEAP32[$2431 + 8 >> 2] = 63422;
 HEAP16[$2432 >> 1] = 222;
 HEAP16[$2432 + 2 >> 1] = 416;
 HEAP16[$2432 + 4 >> 1] = 547;
 HEAP16[$2432 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2431, $2432);
 $29244 = $2433;
 HEAP32[$29244 >> 2] = 15401182;
 HEAP32[$29244 + 4 >> 2] = 14352931;
 HEAP32[$2433 + 8 >> 2] = 63422;
 HEAP16[$2434 >> 1] = 222;
 HEAP16[$2434 + 2 >> 1] = 419;
 HEAP16[$2434 + 4 >> 1] = 3;
 HEAP16[$2434 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2433, $2434);
 $29252 = $2435;
 HEAP32[$29252 >> 2] = 15401182;
 HEAP32[$29252 + 4 >> 2] = 14352931;
 HEAP32[$2435 + 8 >> 2] = 63422;
 HEAP16[$2436 >> 1] = 531;
 HEAP16[$2436 + 2 >> 1] = 419;
 HEAP16[$2436 + 4 >> 1] = 238;
 HEAP16[$2436 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2435, $2436);
 $29260 = $2437;
 HEAP32[$29260 >> 2] = 15401182;
 HEAP32[$29260 + 4 >> 2] = 14352931;
 HEAP32[$2437 + 8 >> 2] = 63422;
 HEAP16[$2438 >> 1] = 222;
 HEAP16[$2438 + 2 >> 1] = 451;
 HEAP16[$2438 + 4 >> 1] = 547;
 HEAP16[$2438 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2437, $2438);
 $29268 = $2439;
 HEAP32[$29268 >> 2] = 43909331;
 HEAP32[$29268 + 4 >> 2] = 656145;
 HEAP32[$2439 + 8 >> 2] = 65535;
 HEAP16[$2440 >> 1] = 211;
 HEAP16[$2440 + 2 >> 1] = 670;
 HEAP16[$2440 + 4 >> 1] = 785;
 HEAP16[$2440 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2439, $2440);
 $29276 = $2441;
 HEAP32[$29276 >> 2] = 27722734;
 HEAP32[$29276 + 4 >> 2] = 15794192;
 HEAP8[$2441 + 8 >> 0] = -16;
 HEAP32[$2441 + 12 >> 2] = 65535;
 HEAP32[$2441 + 16 >> 2] = 54937;
 HEAP8[$2441 + 20 >> 0] = 1;
 HEAP8[$2441 + 21 >> 0] = 1;
 HEAP8[$2441 + 22 >> 0] = 3;
 HEAP8[$2441 + 23 >> 0] = -86;
 $29287 = $2441 + 24 | 0;
 HEAP32[$29287 >> 2] = 0;
 HEAP16[$29287 + 4 >> 1] = 0;
 HEAP8[$29287 + 6 >> 0] = 0;
 HEAP16[$2442 >> 1] = 1006;
 HEAP16[$2442 + 2 >> 1] = 423;
 HEAP16[$2442 + 4 >> 1] = 16;
 HEAP16[$2442 + 6 >> 1] = 241;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $2441, $2442);
 $29291 = $2443;
 HEAP32[$29291 >> 2] = 11600893;
 HEAP32[$29291 + 4 >> 2] = 16121857;
 HEAP32[$2443 + 8 >> 2] = 16904;
 HEAP16[$2444 >> 1] = 1021;
 HEAP16[$2444 + 2 >> 1] = 177;
 HEAP16[$2444 + 4 >> 1] = 1;
 HEAP16[$2444 + 6 >> 1] = 246;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2443, $2444);
 $29299 = $2445;
 HEAP32[$29299 >> 2] = 27657198;
 HEAP32[$29299 + 4 >> 2] = 65551;
 HEAP32[$2445 + 8 >> 2] = 16904;
 HEAP16[$2446 >> 1] = 1006;
 HEAP16[$2446 + 2 >> 1] = 422;
 HEAP16[$2446 + 4 >> 1] = 15;
 HEAP16[$2446 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2445, $2446);
 $29307 = $2447;
 HEAP32[$29307 >> 2] = 11600878;
 HEAP32[$29307 + 4 >> 2] = 16056321;
 HEAP32[$2447 + 8 >> 2] = 54937;
 HEAP16[$2448 >> 1] = 1006;
 HEAP16[$2448 + 2 >> 1] = 177;
 HEAP16[$2448 + 4 >> 1] = 1;
 HEAP16[$2448 + 6 >> 1] = 245;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2447, $2448);
 $29315 = $2449;
 HEAP32[$29315 >> 2] = 11600879;
 HEAP32[$29315 + 4 >> 2] = 65550;
 HEAP32[$2449 + 8 >> 2] = 54937;
 HEAP16[$2450 >> 1] = 1007;
 HEAP16[$2450 + 2 >> 1] = 177;
 HEAP16[$2450 + 4 >> 1] = 14;
 HEAP16[$2450 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2449, $2450);
 $29323 = $2451;
 HEAP32[$29323 >> 2] = 11666428;
 HEAP32[$29323 + 4 >> 2] = 15990785;
 HEAP32[$2451 + 8 >> 2] = 33808;
 HEAP16[$2452 >> 1] = 1020;
 HEAP16[$2452 + 2 >> 1] = 178;
 HEAP16[$2452 + 4 >> 1] = 1;
 HEAP16[$2452 + 6 >> 1] = 244;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2451, $2452);
 $29331 = $2453;
 HEAP32[$29331 >> 2] = 27591663;
 HEAP32[$29331 + 4 >> 2] = 65549;
 HEAP32[$2453 + 8 >> 2] = 33808;
 HEAP16[$2454 >> 1] = 1007;
 HEAP16[$2454 + 2 >> 1] = 421;
 HEAP16[$2454 + 4 >> 1] = 13;
 HEAP16[$2454 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2453, $2454);
 $29339 = $2455;
 HEAP32[$29339 >> 2] = 11666415;
 HEAP32[$29339 + 4 >> 2] = 15925249;
 HEAP32[$2455 + 8 >> 2] = 65535;
 HEAP16[$2456 >> 1] = 1007;
 HEAP16[$2456 + 2 >> 1] = 178;
 HEAP16[$2456 + 4 >> 1] = 1;
 HEAP16[$2456 + 6 >> 1] = 243;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2455, $2456);
 $29347 = $2457;
 HEAP32[$29347 >> 2] = 11666416;
 HEAP32[$29347 + 4 >> 2] = 65548;
 HEAP32[$2457 + 8 >> 2] = 65535;
 HEAP16[$2458 >> 1] = 1008;
 HEAP16[$2458 + 2 >> 1] = 178;
 HEAP16[$2458 + 4 >> 1] = 12;
 HEAP16[$2458 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2457, $2458);
 $29355 = $2459;
 HEAP32[$29355 >> 2] = 11731952;
 HEAP32[$29355 + 4 >> 2] = 15859724;
 HEAP32[$2459 + 8 >> 2] = 54937;
 HEAP16[$2460 >> 1] = 1008;
 HEAP16[$2460 + 2 >> 1] = 179;
 HEAP16[$2460 + 4 >> 1] = 12;
 HEAP16[$2460 + 6 >> 1] = 242;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2459, $2460);
 $29363 = $2461;
 HEAP32[$29363 >> 2] = 27722734;
 HEAP32[$29363 + 4 >> 2] = 15794192;
 HEAP8[$2461 + 8 >> 0] = -16;
 HEAP32[$2461 + 12 >> 2] = 65535;
 HEAP32[$2461 + 16 >> 2] = 54937;
 HEAP8[$2461 + 20 >> 0] = 1;
 HEAP8[$2461 + 21 >> 0] = 1;
 HEAP8[$2461 + 22 >> 0] = 3;
 HEAP8[$2461 + 23 >> 0] = -86;
 $29374 = $2461 + 24 | 0;
 HEAP32[$29374 >> 2] = 0;
 HEAP16[$29374 + 4 >> 1] = 0;
 HEAP8[$29374 + 6 >> 0] = 0;
 HEAP16[$2462 >> 1] = 1006;
 HEAP16[$2462 + 2 >> 1] = 423;
 HEAP16[$2462 + 4 >> 1] = 16;
 HEAP16[$2462 + 6 >> 1] = 241;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $2461, $2462);
 $29378 = $2463;
 HEAP32[$29378 >> 2] = 11600893;
 HEAP32[$29378 + 4 >> 2] = 16121857;
 HEAP32[$2463 + 8 >> 2] = 16904;
 HEAP16[$2464 >> 1] = 1021;
 HEAP16[$2464 + 2 >> 1] = 177;
 HEAP16[$2464 + 4 >> 1] = 1;
 HEAP16[$2464 + 6 >> 1] = 246;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2463, $2464);
 $29386 = $2465;
 HEAP32[$29386 >> 2] = 27657198;
 HEAP32[$29386 + 4 >> 2] = 65551;
 HEAP32[$2465 + 8 >> 2] = 16904;
 HEAP16[$2466 >> 1] = 1006;
 HEAP16[$2466 + 2 >> 1] = 422;
 HEAP16[$2466 + 4 >> 1] = 15;
 HEAP16[$2466 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2465, $2466);
 $29394 = $2467;
 HEAP32[$29394 >> 2] = 11600878;
 HEAP32[$29394 + 4 >> 2] = 16056321;
 HEAP32[$2467 + 8 >> 2] = 54937;
 HEAP16[$2468 >> 1] = 1006;
 HEAP16[$2468 + 2 >> 1] = 177;
 HEAP16[$2468 + 4 >> 1] = 1;
 HEAP16[$2468 + 6 >> 1] = 245;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2467, $2468);
 $29402 = $2469;
 HEAP32[$29402 >> 2] = 11600879;
 HEAP32[$29402 + 4 >> 2] = 65550;
 HEAP32[$2469 + 8 >> 2] = 54937;
 HEAP16[$2470 >> 1] = 1007;
 HEAP16[$2470 + 2 >> 1] = 177;
 HEAP16[$2470 + 4 >> 1] = 14;
 HEAP16[$2470 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2469, $2470);
 $29410 = $2471;
 HEAP32[$29410 >> 2] = 11666428;
 HEAP32[$29410 + 4 >> 2] = 15990785;
 HEAP32[$2471 + 8 >> 2] = 33808;
 HEAP16[$2472 >> 1] = 1020;
 HEAP16[$2472 + 2 >> 1] = 178;
 HEAP16[$2472 + 4 >> 1] = 1;
 HEAP16[$2472 + 6 >> 1] = 244;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2471, $2472);
 $29418 = $2473;
 HEAP32[$29418 >> 2] = 27591663;
 HEAP32[$29418 + 4 >> 2] = 65549;
 HEAP32[$2473 + 8 >> 2] = 33808;
 HEAP16[$2474 >> 1] = 1007;
 HEAP16[$2474 + 2 >> 1] = 421;
 HEAP16[$2474 + 4 >> 1] = 13;
 HEAP16[$2474 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2473, $2474);
 $29426 = $2475;
 HEAP32[$29426 >> 2] = 11666415;
 HEAP32[$29426 + 4 >> 2] = 15925249;
 HEAP32[$2475 + 8 >> 2] = 65535;
 HEAP16[$2476 >> 1] = 1007;
 HEAP16[$2476 + 2 >> 1] = 178;
 HEAP16[$2476 + 4 >> 1] = 1;
 HEAP16[$2476 + 6 >> 1] = 243;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2475, $2476);
 $29434 = $2477;
 HEAP32[$29434 >> 2] = 11666416;
 HEAP32[$29434 + 4 >> 2] = 65548;
 HEAP32[$2477 + 8 >> 2] = 65535;
 HEAP16[$2478 >> 1] = 1008;
 HEAP16[$2478 + 2 >> 1] = 178;
 HEAP16[$2478 + 4 >> 1] = 12;
 HEAP16[$2478 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2477, $2478);
 $29442 = $2479;
 HEAP32[$29442 >> 2] = 11731952;
 HEAP32[$29442 + 4 >> 2] = 15859724;
 HEAP32[$2479 + 8 >> 2] = 54937;
 HEAP16[$2480 >> 1] = 1008;
 HEAP16[$2480 + 2 >> 1] = 179;
 HEAP16[$2480 + 4 >> 1] = 12;
 HEAP16[$2480 + 6 >> 1] = 242;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2479, $2480);
 $29450 = $2481;
 HEAP32[$29450 >> 2] = 40632531;
 HEAP32[$29450 + 4 >> 2] = 3277585;
 HEAP32[$2481 + 8 >> 2] = 54938;
 HEAP16[$2482 >> 1] = 211;
 HEAP16[$2482 + 2 >> 1] = 620;
 HEAP16[$2482 + 4 >> 1] = 785;
 HEAP16[$2482 + 6 >> 1] = 50;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2481, $2482);
 $29458 = $2483;
 HEAP32[$29458 >> 2] = 43253972;
 HEAP32[$29458 + 4 >> 2] = 590607;
 HEAP32[$2483 + 8 >> 2] = 63422;
 HEAP16[$2484 >> 1] = 212;
 HEAP16[$2484 + 2 >> 1] = 660;
 HEAP16[$2484 + 4 >> 1] = 783;
 HEAP16[$2484 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2483, $2484);
 $29466 = $2485;
 HEAP32[$29466 >> 2] = 32243934;
 HEAP32[$29466 + 4 >> 2] = 11010595;
 HEAP32[$2485 + 8 >> 2] = 63422;
 HEAP16[$2486 >> 1] = 222;
 HEAP16[$2486 + 2 >> 1] = 492;
 HEAP16[$2486 + 4 >> 1] = 3;
 HEAP16[$2486 + 6 >> 1] = 168;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2485, $2486);
 $29474 = $2487;
 HEAP32[$29474 >> 2] = 32243934;
 HEAP32[$29474 + 4 >> 2] = 11010595;
 HEAP32[$2487 + 8 >> 2] = 63422;
 HEAP16[$2488 >> 1] = 437;
 HEAP16[$2488 + 2 >> 1] = 492;
 HEAP16[$2488 + 4 >> 1] = 6;
 HEAP16[$2488 + 6 >> 1] = 168;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2487, $2488);
 $29482 = $2489;
 HEAP32[$29482 >> 2] = 32243934;
 HEAP32[$29482 + 4 >> 2] = 11010595;
 HEAP32[$2489 + 8 >> 2] = 63422;
 HEAP16[$2490 >> 1] = 766;
 HEAP16[$2490 + 2 >> 1] = 492;
 HEAP16[$2490 + 4 >> 1] = 3;
 HEAP16[$2490 + 6 >> 1] = 168;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2489, $2490);
 $29490 = $2491;
 HEAP32[$29490 >> 2] = 27395054;
 HEAP32[$29490 + 4 >> 2] = 16121872;
 HEAP8[$2491 + 8 >> 0] = -16;
 HEAP32[$2491 + 12 >> 2] = 65535;
 HEAP32[$2491 + 16 >> 2] = 54937;
 HEAP8[$2491 + 20 >> 0] = 1;
 HEAP8[$2491 + 21 >> 0] = 1;
 HEAP8[$2491 + 22 >> 0] = 3;
 HEAP8[$2491 + 23 >> 0] = -86;
 $29501 = $2491 + 24 | 0;
 HEAP32[$29501 >> 2] = 0;
 HEAP16[$29501 + 4 >> 1] = 0;
 HEAP8[$29501 + 6 >> 0] = 0;
 HEAP16[$2492 >> 1] = 1006;
 HEAP16[$2492 + 2 >> 1] = 418;
 HEAP16[$2492 + 4 >> 1] = 16;
 HEAP16[$2492 + 6 >> 1] = 246;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $2491, $2492);
 $29505 = $2493;
 HEAP32[$29505 >> 2] = 11600893;
 HEAP32[$29505 + 4 >> 2] = 15794177;
 HEAP32[$2493 + 8 >> 2] = 16904;
 HEAP16[$2494 >> 1] = 1021;
 HEAP16[$2494 + 2 >> 1] = 177;
 HEAP16[$2494 + 4 >> 1] = 1;
 HEAP16[$2494 + 6 >> 1] = 241;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2493, $2494);
 $29513 = $2495;
 HEAP32[$29513 >> 2] = 27329518;
 HEAP32[$29513 + 4 >> 2] = 65551;
 HEAP32[$2495 + 8 >> 2] = 16904;
 HEAP16[$2496 >> 1] = 1006;
 HEAP16[$2496 + 2 >> 1] = 417;
 HEAP16[$2496 + 4 >> 1] = 15;
 HEAP16[$2496 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2495, $2496);
 $29521 = $2497;
 HEAP32[$29521 >> 2] = 11600878;
 HEAP32[$29521 + 4 >> 2] = 15728641;
 HEAP32[$2497 + 8 >> 2] = 54937;
 HEAP16[$2498 >> 1] = 1006;
 HEAP16[$2498 + 2 >> 1] = 177;
 HEAP16[$2498 + 4 >> 1] = 1;
 HEAP16[$2498 + 6 >> 1] = 240;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2497, $2498);
 $29529 = $2499;
 HEAP32[$29529 >> 2] = 11600879;
 HEAP32[$29529 + 4 >> 2] = 65550;
 HEAP32[$2499 + 8 >> 2] = 54937;
 HEAP16[$2500 >> 1] = 1007;
 HEAP16[$2500 + 2 >> 1] = 177;
 HEAP16[$2500 + 4 >> 1] = 14;
 HEAP16[$2500 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2499, $2500);
 $29537 = $2501;
 HEAP32[$29537 >> 2] = 11666428;
 HEAP32[$29537 + 4 >> 2] = 15663105;
 HEAP32[$2501 + 8 >> 2] = 33808;
 HEAP16[$2502 >> 1] = 1020;
 HEAP16[$2502 + 2 >> 1] = 178;
 HEAP16[$2502 + 4 >> 1] = 1;
 HEAP16[$2502 + 6 >> 1] = 239;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2501, $2502);
 $29545 = $2503;
 HEAP32[$29545 >> 2] = 27263983;
 HEAP32[$29545 + 4 >> 2] = 65549;
 HEAP32[$2503 + 8 >> 2] = 33808;
 HEAP16[$2504 >> 1] = 1007;
 HEAP16[$2504 + 2 >> 1] = 416;
 HEAP16[$2504 + 4 >> 1] = 13;
 HEAP16[$2504 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2503, $2504);
 $29553 = $2505;
 HEAP32[$29553 >> 2] = 11666415;
 HEAP32[$29553 + 4 >> 2] = 15597569;
 HEAP32[$2505 + 8 >> 2] = 65535;
 HEAP16[$2506 >> 1] = 1007;
 HEAP16[$2506 + 2 >> 1] = 178;
 HEAP16[$2506 + 4 >> 1] = 1;
 HEAP16[$2506 + 6 >> 1] = 238;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2505, $2506);
 $29561 = $2507;
 HEAP32[$29561 >> 2] = 11666416;
 HEAP32[$29561 + 4 >> 2] = 65548;
 HEAP32[$2507 + 8 >> 2] = 65535;
 HEAP16[$2508 >> 1] = 1008;
 HEAP16[$2508 + 2 >> 1] = 178;
 HEAP16[$2508 + 4 >> 1] = 12;
 HEAP16[$2508 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2507, $2508);
 $29569 = $2509;
 HEAP32[$29569 >> 2] = 11731952;
 HEAP32[$29569 + 4 >> 2] = 15532044;
 HEAP32[$2509 + 8 >> 2] = 54937;
 HEAP16[$2510 >> 1] = 1008;
 HEAP16[$2510 + 2 >> 1] = 179;
 HEAP16[$2510 + 4 >> 1] = 12;
 HEAP16[$2510 + 6 >> 1] = 237;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2509, $2510);
 $29577 = $2511;
 HEAP32[$29577 >> 2] = 27395054;
 HEAP32[$29577 + 4 >> 2] = 16121872;
 HEAP8[$2511 + 8 >> 0] = -16;
 HEAP32[$2511 + 12 >> 2] = 65535;
 HEAP32[$2511 + 16 >> 2] = 54937;
 HEAP8[$2511 + 20 >> 0] = 1;
 HEAP8[$2511 + 21 >> 0] = 1;
 HEAP8[$2511 + 22 >> 0] = 3;
 HEAP8[$2511 + 23 >> 0] = -86;
 $29588 = $2511 + 24 | 0;
 HEAP32[$29588 >> 2] = 0;
 HEAP16[$29588 + 4 >> 1] = 0;
 HEAP8[$29588 + 6 >> 0] = 0;
 HEAP16[$2512 >> 1] = 1006;
 HEAP16[$2512 + 2 >> 1] = 418;
 HEAP16[$2512 + 4 >> 1] = 16;
 HEAP16[$2512 + 6 >> 1] = 246;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $2511, $2512);
 $29592 = $2513;
 HEAP32[$29592 >> 2] = 11600893;
 HEAP32[$29592 + 4 >> 2] = 15794177;
 HEAP32[$2513 + 8 >> 2] = 16904;
 HEAP16[$2514 >> 1] = 1021;
 HEAP16[$2514 + 2 >> 1] = 177;
 HEAP16[$2514 + 4 >> 1] = 1;
 HEAP16[$2514 + 6 >> 1] = 241;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2513, $2514);
 $29600 = $2515;
 HEAP32[$29600 >> 2] = 27329518;
 HEAP32[$29600 + 4 >> 2] = 65551;
 HEAP32[$2515 + 8 >> 2] = 16904;
 HEAP16[$2516 >> 1] = 1006;
 HEAP16[$2516 + 2 >> 1] = 417;
 HEAP16[$2516 + 4 >> 1] = 15;
 HEAP16[$2516 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2515, $2516);
 $29608 = $2517;
 HEAP32[$29608 >> 2] = 11600878;
 HEAP32[$29608 + 4 >> 2] = 15728641;
 HEAP32[$2517 + 8 >> 2] = 54937;
 HEAP16[$2518 >> 1] = 1006;
 HEAP16[$2518 + 2 >> 1] = 177;
 HEAP16[$2518 + 4 >> 1] = 1;
 HEAP16[$2518 + 6 >> 1] = 240;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2517, $2518);
 $29616 = $2519;
 HEAP32[$29616 >> 2] = 11600879;
 HEAP32[$29616 + 4 >> 2] = 65550;
 HEAP32[$2519 + 8 >> 2] = 54937;
 HEAP16[$2520 >> 1] = 1007;
 HEAP16[$2520 + 2 >> 1] = 177;
 HEAP16[$2520 + 4 >> 1] = 14;
 HEAP16[$2520 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2519, $2520);
 $29624 = $2521;
 HEAP32[$29624 >> 2] = 11666428;
 HEAP32[$29624 + 4 >> 2] = 15663105;
 HEAP32[$2521 + 8 >> 2] = 33808;
 HEAP16[$2522 >> 1] = 1020;
 HEAP16[$2522 + 2 >> 1] = 178;
 HEAP16[$2522 + 4 >> 1] = 1;
 HEAP16[$2522 + 6 >> 1] = 239;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2521, $2522);
 $29632 = $2523;
 HEAP32[$29632 >> 2] = 27263983;
 HEAP32[$29632 + 4 >> 2] = 65549;
 HEAP32[$2523 + 8 >> 2] = 33808;
 HEAP16[$2524 >> 1] = 1007;
 HEAP16[$2524 + 2 >> 1] = 416;
 HEAP16[$2524 + 4 >> 1] = 13;
 HEAP16[$2524 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2523, $2524);
 $29640 = $2525;
 HEAP32[$29640 >> 2] = 11666415;
 HEAP32[$29640 + 4 >> 2] = 15597569;
 HEAP32[$2525 + 8 >> 2] = 65535;
 HEAP16[$2526 >> 1] = 1007;
 HEAP16[$2526 + 2 >> 1] = 178;
 HEAP16[$2526 + 4 >> 1] = 1;
 HEAP16[$2526 + 6 >> 1] = 238;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2525, $2526);
 $29648 = $2527;
 HEAP32[$29648 >> 2] = 11666416;
 HEAP32[$29648 + 4 >> 2] = 65548;
 HEAP32[$2527 + 8 >> 2] = 65535;
 HEAP16[$2528 >> 1] = 1008;
 HEAP16[$2528 + 2 >> 1] = 178;
 HEAP16[$2528 + 4 >> 1] = 12;
 HEAP16[$2528 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2527, $2528);
 $29656 = $2529;
 HEAP32[$29656 >> 2] = 11731952;
 HEAP32[$29656 + 4 >> 2] = 15532044;
 HEAP32[$2529 + 8 >> 2] = 54937;
 HEAP16[$2530 >> 1] = 1008;
 HEAP16[$2530 + 2 >> 1] = 179;
 HEAP16[$2530 + 4 >> 1] = 12;
 HEAP16[$2530 + 6 >> 1] = 237;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2529, $2530);
 $29664 = $2531;
 HEAP32[$29664 >> 2] = 4784130;
 HEAP32[$29664 + 4 >> 2] = 40173760;
 HEAP32[$2531 + 8 >> 2] = 65535;
 HEAP16[$2532 >> 1] = 2;
 HEAP16[$2532 + 2 >> 1] = 73;
 HEAP16[$2532 + 4 >> 1] = 192;
 HEAP16[$2532 + 6 >> 1] = 613;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2531, $2532);
 $29672 = $2533;
 HEAP32[$29672 >> 2] = 4784152;
 HEAP32[$29672 + 4 >> 2] = 1048746;
 HEAP32[$2533 + 8 >> 2] = 2349;
 HEAP16[$2534 >> 1] = 24;
 HEAP16[$2534 + 2 >> 1] = 73;
 HEAP16[$2534 + 4 >> 1] = 170;
 HEAP16[$2534 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2533, $2534);
 $29680 = $2535;
 HEAP32[$29680 >> 2] = 5832747;
 HEAP32[$29680 + 4 >> 2] = 1048606;
 HEAP32[$2535 + 8 >> 2] = 65535;
 HEAP16[$2536 >> 1] = 43;
 HEAP16[$2536 + 2 >> 1] = 89;
 HEAP16[$2536 + 4 >> 1] = 30;
 HEAP16[$2536 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2535, $2536);
 $29688 = $2537;
 HEAP32[$29688 >> 2] = 6094857;
 HEAP32[$29688 + 4 >> 2] = 524296;
 HEAP32[$2537 + 8 >> 2] = 65535;
 HEAP16[$2538 >> 1] = 9;
 HEAP16[$2538 + 2 >> 1] = 93;
 HEAP16[$2538 + 4 >> 1] = 8;
 HEAP16[$2538 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2537, $2538);
 $29696 = $2539;
 HEAP32[$29696 >> 2] = 6357003;
 HEAP32[$29696 + 4 >> 2] = 65541;
 HEAP32[$2539 + 8 >> 2] = 0;
 HEAP16[$2540 >> 1] = 11;
 HEAP16[$2540 + 2 >> 1] = 97;
 HEAP16[$2540 + 4 >> 1] = 5;
 HEAP16[$2540 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2539, $2540);
 $29704 = $2541;
 HEAP32[$29704 >> 2] = 6225933;
 HEAP32[$29704 + 4 >> 2] = 327681;
 HEAP32[$2541 + 8 >> 2] = 0;
 HEAP16[$2542 >> 1] = 13;
 HEAP16[$2542 + 2 >> 1] = 95;
 HEAP16[$2542 + 4 >> 1] = 1;
 HEAP16[$2542 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2541, $2542);
 $29712 = $2543;
 HEAP32[$29712 >> 2] = 6094857;
 HEAP32[$29712 + 4 >> 2] = 65545;
 HEAP32[$2543 + 8 >> 2] = 33808;
 HEAP16[$2544 >> 1] = 9;
 HEAP16[$2544 + 2 >> 1] = 93;
 HEAP16[$2544 + 4 >> 1] = 9;
 HEAP16[$2544 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2543, $2544);
 $29720 = $2545;
 HEAP32[$29720 >> 2] = 6094857;
 HEAP32[$29720 + 4 >> 2] = 589825;
 HEAP32[$2545 + 8 >> 2] = 33808;
 HEAP16[$2546 >> 1] = 9;
 HEAP16[$2546 + 2 >> 1] = 93;
 HEAP16[$2546 + 4 >> 1] = 1;
 HEAP16[$2546 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2545, $2546);
 $29728 = $2547;
 HEAP32[$29728 >> 2] = 6619145;
 HEAP32[$29728 + 4 >> 2] = 65545;
 HEAP32[$2547 + 8 >> 2] = 33808;
 HEAP16[$2548 >> 1] = 9;
 HEAP16[$2548 + 2 >> 1] = 101;
 HEAP16[$2548 + 4 >> 1] = 9;
 HEAP16[$2548 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2547, $2548);
 $29736 = $2549;
 HEAP32[$29736 >> 2] = 6094865;
 HEAP32[$29736 + 4 >> 2] = 589825;
 HEAP32[$2549 + 8 >> 2] = 33808;
 HEAP16[$2550 >> 1] = 17;
 HEAP16[$2550 + 2 >> 1] = 93;
 HEAP16[$2550 + 4 >> 1] = 1;
 HEAP16[$2550 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2549, $2550);
 $29744 = $2551;
 HEAP32[$29744 >> 2] = 6881323;
 HEAP32[$29744 + 4 >> 2] = 1048652;
 HEAP32[$2551 + 8 >> 2] = 65535;
 HEAP16[$2552 >> 1] = 43;
 HEAP16[$2552 + 2 >> 1] = 105;
 HEAP16[$2552 + 4 >> 1] = 76;
 HEAP16[$2552 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2551, $2552);
 $29752 = $2553;
 HEAP32[$29752 >> 2] = 7143433;
 HEAP32[$29752 + 4 >> 2] = 524296;
 HEAP32[$2553 + 8 >> 2] = 65535;
 HEAP16[$2554 >> 1] = 9;
 HEAP16[$2554 + 2 >> 1] = 109;
 HEAP16[$2554 + 4 >> 1] = 8;
 HEAP16[$2554 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2553, $2554);
 $29760 = $2555;
 HEAP32[$29760 >> 2] = 7405579;
 HEAP32[$29760 + 4 >> 2] = 65541;
 HEAP32[$2555 + 8 >> 2] = 0;
 HEAP16[$2556 >> 1] = 11;
 HEAP16[$2556 + 2 >> 1] = 113;
 HEAP16[$2556 + 4 >> 1] = 5;
 HEAP16[$2556 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2555, $2556);
 $29768 = $2557;
 HEAP32[$29768 >> 2] = 7274509;
 HEAP32[$29768 + 4 >> 2] = 327681;
 HEAP32[$2557 + 8 >> 2] = 0;
 HEAP16[$2558 >> 1] = 13;
 HEAP16[$2558 + 2 >> 1] = 111;
 HEAP16[$2558 + 4 >> 1] = 1;
 HEAP16[$2558 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2557, $2558);
 $29776 = $2559;
 HEAP32[$29776 >> 2] = 7143433;
 HEAP32[$29776 + 4 >> 2] = 65545;
 HEAP32[$2559 + 8 >> 2] = 33808;
 HEAP16[$2560 >> 1] = 9;
 HEAP16[$2560 + 2 >> 1] = 109;
 HEAP16[$2560 + 4 >> 1] = 9;
 HEAP16[$2560 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2559, $2560);
 $29784 = $2561;
 HEAP32[$29784 >> 2] = 7143433;
 HEAP32[$29784 + 4 >> 2] = 589825;
 HEAP32[$2561 + 8 >> 2] = 33808;
 HEAP16[$2562 >> 1] = 9;
 HEAP16[$2562 + 2 >> 1] = 109;
 HEAP16[$2562 + 4 >> 1] = 1;
 HEAP16[$2562 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2561, $2562);
 $29792 = $2563;
 HEAP32[$29792 >> 2] = 7667721;
 HEAP32[$29792 + 4 >> 2] = 65545;
 HEAP32[$2563 + 8 >> 2] = 33808;
 HEAP16[$2564 >> 1] = 9;
 HEAP16[$2564 + 2 >> 1] = 117;
 HEAP16[$2564 + 4 >> 1] = 9;
 HEAP16[$2564 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2563, $2564);
 $29800 = $2565;
 HEAP32[$29800 >> 2] = 7143441;
 HEAP32[$29800 + 4 >> 2] = 589825;
 HEAP32[$2565 + 8 >> 2] = 33808;
 HEAP16[$2566 >> 1] = 17;
 HEAP16[$2566 + 2 >> 1] = 109;
 HEAP16[$2566 + 4 >> 1] = 1;
 HEAP16[$2566 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2565, $2566);
 $29808 = $2567;
 HEAP32[$29808 >> 2] = 7929899;
 HEAP32[$29808 + 4 >> 2] = 1048634;
 HEAP32[$2567 + 8 >> 2] = 65535;
 HEAP16[$2568 >> 1] = 43;
 HEAP16[$2568 + 2 >> 1] = 121;
 HEAP16[$2568 + 4 >> 1] = 58;
 HEAP16[$2568 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2567, $2568);
 $29816 = $2569;
 HEAP32[$29816 >> 2] = 8192009;
 HEAP32[$29816 + 4 >> 2] = 524296;
 HEAP32[$2569 + 8 >> 2] = 65535;
 HEAP16[$2570 >> 1] = 9;
 HEAP16[$2570 + 2 >> 1] = 125;
 HEAP16[$2570 + 4 >> 1] = 8;
 HEAP16[$2570 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2569, $2570);
 $29824 = $2571;
 HEAP32[$29824 >> 2] = 8454155;
 HEAP32[$29824 + 4 >> 2] = 65541;
 HEAP32[$2571 + 8 >> 2] = 0;
 HEAP16[$2572 >> 1] = 11;
 HEAP16[$2572 + 2 >> 1] = 129;
 HEAP16[$2572 + 4 >> 1] = 5;
 HEAP16[$2572 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2571, $2572);
 $29832 = $2573;
 HEAP32[$29832 >> 2] = 8323085;
 HEAP32[$29832 + 4 >> 2] = 327681;
 HEAP32[$2573 + 8 >> 2] = 0;
 HEAP16[$2574 >> 1] = 13;
 HEAP16[$2574 + 2 >> 1] = 127;
 HEAP16[$2574 + 4 >> 1] = 1;
 HEAP16[$2574 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2573, $2574);
 $29840 = $2575;
 HEAP32[$29840 >> 2] = 8192009;
 HEAP32[$29840 + 4 >> 2] = 65545;
 HEAP32[$2575 + 8 >> 2] = 33808;
 HEAP16[$2576 >> 1] = 9;
 HEAP16[$2576 + 2 >> 1] = 125;
 HEAP16[$2576 + 4 >> 1] = 9;
 HEAP16[$2576 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2575, $2576);
 $29848 = $2577;
 HEAP32[$29848 >> 2] = 8192009;
 HEAP32[$29848 + 4 >> 2] = 589825;
 HEAP32[$2577 + 8 >> 2] = 33808;
 HEAP16[$2578 >> 1] = 9;
 HEAP16[$2578 + 2 >> 1] = 125;
 HEAP16[$2578 + 4 >> 1] = 1;
 HEAP16[$2578 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2577, $2578);
 $29856 = $2579;
 HEAP32[$29856 >> 2] = 8716297;
 HEAP32[$29856 + 4 >> 2] = 65545;
 HEAP32[$2579 + 8 >> 2] = 33808;
 HEAP16[$2580 >> 1] = 9;
 HEAP16[$2580 + 2 >> 1] = 133;
 HEAP16[$2580 + 4 >> 1] = 9;
 HEAP16[$2580 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2579, $2580);
 $29864 = $2581;
 HEAP32[$29864 >> 2] = 8192017;
 HEAP32[$29864 + 4 >> 2] = 589825;
 HEAP32[$2581 + 8 >> 2] = 33808;
 HEAP16[$2582 >> 1] = 17;
 HEAP16[$2582 + 2 >> 1] = 125;
 HEAP16[$2582 + 4 >> 1] = 1;
 HEAP16[$2582 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2581, $2582);
 $29872 = $2583;
 HEAP32[$29872 >> 2] = 8978475;
 HEAP32[$29872 + 4 >> 2] = 1048645;
 HEAP32[$2583 + 8 >> 2] = 65535;
 HEAP16[$2584 >> 1] = 43;
 HEAP16[$2584 + 2 >> 1] = 137;
 HEAP16[$2584 + 4 >> 1] = 69;
 HEAP16[$2584 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2583, $2584);
 $29880 = $2585;
 HEAP32[$29880 >> 2] = 9240585;
 HEAP32[$29880 + 4 >> 2] = 524296;
 HEAP32[$2585 + 8 >> 2] = 65535;
 HEAP16[$2586 >> 1] = 9;
 HEAP16[$2586 + 2 >> 1] = 141;
 HEAP16[$2586 + 4 >> 1] = 8;
 HEAP16[$2586 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2585, $2586);
 $29888 = $2587;
 HEAP32[$29888 >> 2] = 9502731;
 HEAP32[$29888 + 4 >> 2] = 65541;
 HEAP32[$2587 + 8 >> 2] = 0;
 HEAP16[$2588 >> 1] = 11;
 HEAP16[$2588 + 2 >> 1] = 145;
 HEAP16[$2588 + 4 >> 1] = 5;
 HEAP16[$2588 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2587, $2588);
 $29896 = $2589;
 HEAP32[$29896 >> 2] = 9371661;
 HEAP32[$29896 + 4 >> 2] = 327681;
 HEAP32[$2589 + 8 >> 2] = 0;
 HEAP16[$2590 >> 1] = 13;
 HEAP16[$2590 + 2 >> 1] = 143;
 HEAP16[$2590 + 4 >> 1] = 1;
 HEAP16[$2590 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2589, $2590);
 $29904 = $2591;
 HEAP32[$29904 >> 2] = 9240585;
 HEAP32[$29904 + 4 >> 2] = 65545;
 HEAP32[$2591 + 8 >> 2] = 33808;
 HEAP16[$2592 >> 1] = 9;
 HEAP16[$2592 + 2 >> 1] = 141;
 HEAP16[$2592 + 4 >> 1] = 9;
 HEAP16[$2592 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2591, $2592);
 $29912 = $2593;
 HEAP32[$29912 >> 2] = 9240585;
 HEAP32[$29912 + 4 >> 2] = 589825;
 HEAP32[$2593 + 8 >> 2] = 33808;
 HEAP16[$2594 >> 1] = 9;
 HEAP16[$2594 + 2 >> 1] = 141;
 HEAP16[$2594 + 4 >> 1] = 1;
 HEAP16[$2594 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2593, $2594);
 $29920 = $2595;
 HEAP32[$29920 >> 2] = 9764873;
 HEAP32[$29920 + 4 >> 2] = 65545;
 HEAP32[$2595 + 8 >> 2] = 33808;
 HEAP16[$2596 >> 1] = 9;
 HEAP16[$2596 + 2 >> 1] = 149;
 HEAP16[$2596 + 4 >> 1] = 9;
 HEAP16[$2596 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2595, $2596);
 $29928 = $2597;
 HEAP32[$29928 >> 2] = 9240593;
 HEAP32[$29928 + 4 >> 2] = 589825;
 HEAP32[$2597 + 8 >> 2] = 33808;
 HEAP16[$2598 >> 1] = 17;
 HEAP16[$2598 + 2 >> 1] = 141;
 HEAP16[$2598 + 4 >> 1] = 1;
 HEAP16[$2598 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2597, $2598);
 $29936 = $2599;
 HEAP32[$29936 >> 2] = 10027051;
 HEAP32[$29936 + 4 >> 2] = 1048624;
 HEAP32[$2599 + 8 >> 2] = 65535;
 HEAP16[$2600 >> 1] = 43;
 HEAP16[$2600 + 2 >> 1] = 153;
 HEAP16[$2600 + 4 >> 1] = 48;
 HEAP16[$2600 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2599, $2600);
 $29944 = $2601;
 HEAP32[$29944 >> 2] = 10289161;
 HEAP32[$29944 + 4 >> 2] = 524296;
 HEAP32[$2601 + 8 >> 2] = 65535;
 HEAP16[$2602 >> 1] = 9;
 HEAP16[$2602 + 2 >> 1] = 157;
 HEAP16[$2602 + 4 >> 1] = 8;
 HEAP16[$2602 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2601, $2602);
 $29952 = $2603;
 HEAP32[$29952 >> 2] = 10551307;
 HEAP32[$29952 + 4 >> 2] = 65541;
 HEAP32[$2603 + 8 >> 2] = 0;
 HEAP16[$2604 >> 1] = 11;
 HEAP16[$2604 + 2 >> 1] = 161;
 HEAP16[$2604 + 4 >> 1] = 5;
 HEAP16[$2604 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2603, $2604);
 $29960 = $2605;
 HEAP32[$29960 >> 2] = 10420237;
 HEAP32[$29960 + 4 >> 2] = 327681;
 HEAP32[$2605 + 8 >> 2] = 0;
 HEAP16[$2606 >> 1] = 13;
 HEAP16[$2606 + 2 >> 1] = 159;
 HEAP16[$2606 + 4 >> 1] = 1;
 HEAP16[$2606 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2605, $2606);
 $29968 = $2607;
 HEAP32[$29968 >> 2] = 10289161;
 HEAP32[$29968 + 4 >> 2] = 65545;
 HEAP32[$2607 + 8 >> 2] = 33808;
 HEAP16[$2608 >> 1] = 9;
 HEAP16[$2608 + 2 >> 1] = 157;
 HEAP16[$2608 + 4 >> 1] = 9;
 HEAP16[$2608 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2607, $2608);
 $29976 = $2609;
 HEAP32[$29976 >> 2] = 10289161;
 HEAP32[$29976 + 4 >> 2] = 589825;
 HEAP32[$2609 + 8 >> 2] = 33808;
 HEAP16[$2610 >> 1] = 9;
 HEAP16[$2610 + 2 >> 1] = 157;
 HEAP16[$2610 + 4 >> 1] = 1;
 HEAP16[$2610 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2609, $2610);
 $29984 = $2611;
 HEAP32[$29984 >> 2] = 10813449;
 HEAP32[$29984 + 4 >> 2] = 65545;
 HEAP32[$2611 + 8 >> 2] = 33808;
 HEAP16[$2612 >> 1] = 9;
 HEAP16[$2612 + 2 >> 1] = 165;
 HEAP16[$2612 + 4 >> 1] = 9;
 HEAP16[$2612 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2611, $2612);
 $29992 = $2613;
 HEAP32[$29992 >> 2] = 10289169;
 HEAP32[$29992 + 4 >> 2] = 589825;
 HEAP32[$2613 + 8 >> 2] = 33808;
 HEAP16[$2614 >> 1] = 17;
 HEAP16[$2614 + 2 >> 1] = 157;
 HEAP16[$2614 + 4 >> 1] = 1;
 HEAP16[$2614 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2613, $2614);
 $30000 = $2615;
 HEAP32[$30000 >> 2] = 44957836;
 HEAP32[$30000 + 4 >> 2] = 1048614;
 HEAP8[$2615 + 8 >> 0] = -16;
 HEAP32[$2615 + 12 >> 2] = 65535;
 HEAP32[$2615 + 16 >> 2] = 54937;
 HEAP8[$2615 + 20 >> 0] = 0;
 HEAP8[$2615 + 21 >> 0] = 7;
 HEAP8[$2615 + 22 >> 0] = 3;
 HEAP8[$2615 + 23 >> 0] = -86;
 $30011 = $2615 + 24 | 0;
 HEAP32[$30011 >> 2] = 0;
 HEAP16[$30011 + 4 >> 1] = 0;
 HEAP8[$30011 + 6 >> 0] = 0;
 HEAP16[$2616 >> 1] = 140;
 HEAP16[$2616 + 2 >> 1] = 686;
 HEAP16[$2616 + 4 >> 1] = 38;
 HEAP16[$2616 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $2615, $2616);
 $30015 = $2617;
 HEAP32[$30015 >> 2] = 44957835;
 HEAP32[$30015 + 4 >> 2] = 1048577;
 HEAP32[$2617 + 8 >> 2] = 16904;
 HEAP16[$2618 >> 1] = 139;
 HEAP16[$2618 + 2 >> 1] = 686;
 HEAP16[$2618 + 4 >> 1] = 1;
 HEAP16[$2618 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2617, $2618);
 $30023 = $2619;
 HEAP32[$30023 >> 2] = 45940754;
 HEAP32[$30023 + 4 >> 2] = 65657;
 HEAP32[$2619 + 8 >> 2] = 16904;
 HEAP16[$2620 >> 1] = 18;
 HEAP16[$2620 + 2 >> 1] = 701;
 HEAP16[$2620 + 4 >> 1] = 121;
 HEAP16[$2620 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2619, $2620);
 $30031 = $2621;
 HEAP32[$30031 >> 2] = 44957714;
 HEAP32[$30031 + 4 >> 2] = 983041;
 HEAP32[$2621 + 8 >> 2] = 54937;
 HEAP16[$2622 >> 1] = 18;
 HEAP16[$2622 + 2 >> 1] = 686;
 HEAP16[$2622 + 4 >> 1] = 1;
 HEAP16[$2622 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2621, $2622);
 $30039 = $2623;
 HEAP32[$30039 >> 2] = 44957715;
 HEAP32[$30039 + 4 >> 2] = 65656;
 HEAP32[$2623 + 8 >> 2] = 54937;
 HEAP16[$2624 >> 1] = 19;
 HEAP16[$2624 + 2 >> 1] = 686;
 HEAP16[$2624 + 4 >> 1] = 120;
 HEAP16[$2624 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2623, $2624);
 $30047 = $2625;
 HEAP32[$30047 >> 2] = 45023370;
 HEAP32[$30047 + 4 >> 2] = 917505;
 HEAP32[$2625 + 8 >> 2] = 33808;
 HEAP16[$2626 >> 1] = 138;
 HEAP16[$2626 + 2 >> 1] = 687;
 HEAP16[$2626 + 4 >> 1] = 1;
 HEAP16[$2626 + 6 >> 1] = 14;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2625, $2626);
 $30055 = $2627;
 HEAP32[$30055 >> 2] = 45875219;
 HEAP32[$30055 + 4 >> 2] = 65655;
 HEAP32[$2627 + 8 >> 2] = 33808;
 HEAP16[$2628 >> 1] = 19;
 HEAP16[$2628 + 2 >> 1] = 700;
 HEAP16[$2628 + 4 >> 1] = 119;
 HEAP16[$2628 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2627, $2628);
 $30063 = $2629;
 HEAP32[$30063 >> 2] = 45023251;
 HEAP32[$30063 + 4 >> 2] = 851969;
 HEAP32[$2629 + 8 >> 2] = 65535;
 HEAP16[$2630 >> 1] = 19;
 HEAP16[$2630 + 2 >> 1] = 687;
 HEAP16[$2630 + 4 >> 1] = 1;
 HEAP16[$2630 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2629, $2630);
 $30071 = $2631;
 HEAP32[$30071 >> 2] = 45023252;
 HEAP32[$30071 + 4 >> 2] = 65654;
 HEAP32[$2631 + 8 >> 2] = 65535;
 HEAP16[$2632 >> 1] = 20;
 HEAP16[$2632 + 2 >> 1] = 687;
 HEAP16[$2632 + 4 >> 1] = 118;
 HEAP16[$2632 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2631, $2632);
 $30079 = $2633;
 HEAP32[$30079 >> 2] = 45088788;
 HEAP32[$30079 + 4 >> 2] = 786550;
 HEAP32[$2633 + 8 >> 2] = 54937;
 HEAP16[$2634 >> 1] = 20;
 HEAP16[$2634 + 2 >> 1] = 688;
 HEAP16[$2634 + 4 >> 1] = 118;
 HEAP16[$2634 + 6 >> 1] = 12;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2633, $2634);
 $30087 = $2635;
 HEAP32[$30087 >> 2] = 4784130;
 HEAP32[$30087 + 4 >> 2] = 40173760;
 HEAP32[$2635 + 8 >> 2] = 65535;
 HEAP16[$2636 >> 1] = 2;
 HEAP16[$2636 + 2 >> 1] = 73;
 HEAP16[$2636 + 4 >> 1] = 192;
 HEAP16[$2636 + 6 >> 1] = 613;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2635, $2636);
 $30095 = $2637;
 HEAP32[$30095 >> 2] = 4784152;
 HEAP32[$30095 + 4 >> 2] = 1048746;
 HEAP32[$2637 + 8 >> 2] = 2349;
 HEAP16[$2638 >> 1] = 24;
 HEAP16[$2638 + 2 >> 1] = 73;
 HEAP16[$2638 + 4 >> 1] = 170;
 HEAP16[$2638 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2637, $2638);
 $30103 = $2639;
 HEAP32[$30103 >> 2] = 5832747;
 HEAP32[$30103 + 4 >> 2] = 1048606;
 HEAP32[$2639 + 8 >> 2] = 65535;
 HEAP16[$2640 >> 1] = 43;
 HEAP16[$2640 + 2 >> 1] = 89;
 HEAP16[$2640 + 4 >> 1] = 30;
 HEAP16[$2640 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2639, $2640);
 $30111 = $2641;
 HEAP32[$30111 >> 2] = 6094857;
 HEAP32[$30111 + 4 >> 2] = 524296;
 HEAP32[$2641 + 8 >> 2] = 65535;
 HEAP16[$2642 >> 1] = 9;
 HEAP16[$2642 + 2 >> 1] = 93;
 HEAP16[$2642 + 4 >> 1] = 8;
 HEAP16[$2642 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2641, $2642);
 $30119 = $2643;
 HEAP32[$30119 >> 2] = 6357003;
 HEAP32[$30119 + 4 >> 2] = 65541;
 HEAP32[$2643 + 8 >> 2] = 0;
 HEAP16[$2644 >> 1] = 11;
 HEAP16[$2644 + 2 >> 1] = 97;
 HEAP16[$2644 + 4 >> 1] = 5;
 HEAP16[$2644 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2643, $2644);
 $30127 = $2645;
 HEAP32[$30127 >> 2] = 6225933;
 HEAP32[$30127 + 4 >> 2] = 327681;
 HEAP32[$2645 + 8 >> 2] = 0;
 HEAP16[$2646 >> 1] = 13;
 HEAP16[$2646 + 2 >> 1] = 95;
 HEAP16[$2646 + 4 >> 1] = 1;
 HEAP16[$2646 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2645, $2646);
 $30135 = $2647;
 HEAP32[$30135 >> 2] = 6094857;
 HEAP32[$30135 + 4 >> 2] = 65545;
 HEAP32[$2647 + 8 >> 2] = 33808;
 HEAP16[$2648 >> 1] = 9;
 HEAP16[$2648 + 2 >> 1] = 93;
 HEAP16[$2648 + 4 >> 1] = 9;
 HEAP16[$2648 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2647, $2648);
 $30143 = $2649;
 HEAP32[$30143 >> 2] = 6094857;
 HEAP32[$30143 + 4 >> 2] = 589825;
 HEAP32[$2649 + 8 >> 2] = 33808;
 HEAP16[$2650 >> 1] = 9;
 HEAP16[$2650 + 2 >> 1] = 93;
 HEAP16[$2650 + 4 >> 1] = 1;
 HEAP16[$2650 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2649, $2650);
 $30151 = $2651;
 HEAP32[$30151 >> 2] = 6619145;
 HEAP32[$30151 + 4 >> 2] = 65545;
 HEAP32[$2651 + 8 >> 2] = 33808;
 HEAP16[$2652 >> 1] = 9;
 HEAP16[$2652 + 2 >> 1] = 101;
 HEAP16[$2652 + 4 >> 1] = 9;
 HEAP16[$2652 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2651, $2652);
 $30159 = $2653;
 HEAP32[$30159 >> 2] = 6094865;
 HEAP32[$30159 + 4 >> 2] = 589825;
 HEAP32[$2653 + 8 >> 2] = 33808;
 HEAP16[$2654 >> 1] = 17;
 HEAP16[$2654 + 2 >> 1] = 93;
 HEAP16[$2654 + 4 >> 1] = 1;
 HEAP16[$2654 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2653, $2654);
 $30167 = $2655;
 HEAP32[$30167 >> 2] = 6881323;
 HEAP32[$30167 + 4 >> 2] = 1048634;
 HEAP32[$2655 + 8 >> 2] = 65535;
 HEAP16[$2656 >> 1] = 43;
 HEAP16[$2656 + 2 >> 1] = 105;
 HEAP16[$2656 + 4 >> 1] = 58;
 HEAP16[$2656 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2655, $2656);
 $30175 = $2657;
 HEAP32[$30175 >> 2] = 7143433;
 HEAP32[$30175 + 4 >> 2] = 524296;
 HEAP32[$2657 + 8 >> 2] = 65535;
 HEAP16[$2658 >> 1] = 9;
 HEAP16[$2658 + 2 >> 1] = 109;
 HEAP16[$2658 + 4 >> 1] = 8;
 HEAP16[$2658 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2657, $2658);
 $30183 = $2659;
 HEAP32[$30183 >> 2] = 7405579;
 HEAP32[$30183 + 4 >> 2] = 65541;
 HEAP32[$2659 + 8 >> 2] = 0;
 HEAP16[$2660 >> 1] = 11;
 HEAP16[$2660 + 2 >> 1] = 113;
 HEAP16[$2660 + 4 >> 1] = 5;
 HEAP16[$2660 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2659, $2660);
 $30191 = $2661;
 HEAP32[$30191 >> 2] = 7274509;
 HEAP32[$30191 + 4 >> 2] = 327681;
 HEAP32[$2661 + 8 >> 2] = 0;
 HEAP16[$2662 >> 1] = 13;
 HEAP16[$2662 + 2 >> 1] = 111;
 HEAP16[$2662 + 4 >> 1] = 1;
 HEAP16[$2662 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2661, $2662);
 $30199 = $2663;
 HEAP32[$30199 >> 2] = 7143433;
 HEAP32[$30199 + 4 >> 2] = 65545;
 HEAP32[$2663 + 8 >> 2] = 33808;
 HEAP16[$2664 >> 1] = 9;
 HEAP16[$2664 + 2 >> 1] = 109;
 HEAP16[$2664 + 4 >> 1] = 9;
 HEAP16[$2664 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2663, $2664);
 $30207 = $2665;
 HEAP32[$30207 >> 2] = 7143433;
 HEAP32[$30207 + 4 >> 2] = 589825;
 HEAP32[$2665 + 8 >> 2] = 33808;
 HEAP16[$2666 >> 1] = 9;
 HEAP16[$2666 + 2 >> 1] = 109;
 HEAP16[$2666 + 4 >> 1] = 1;
 HEAP16[$2666 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2665, $2666);
 $30215 = $2667;
 HEAP32[$30215 >> 2] = 7667721;
 HEAP32[$30215 + 4 >> 2] = 65545;
 HEAP32[$2667 + 8 >> 2] = 33808;
 HEAP16[$2668 >> 1] = 9;
 HEAP16[$2668 + 2 >> 1] = 117;
 HEAP16[$2668 + 4 >> 1] = 9;
 HEAP16[$2668 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2667, $2668);
 $30223 = $2669;
 HEAP32[$30223 >> 2] = 7143441;
 HEAP32[$30223 + 4 >> 2] = 589825;
 HEAP32[$2669 + 8 >> 2] = 33808;
 HEAP16[$2670 >> 1] = 17;
 HEAP16[$2670 + 2 >> 1] = 109;
 HEAP16[$2670 + 4 >> 1] = 1;
 HEAP16[$2670 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2669, $2670);
 $30231 = $2671;
 HEAP32[$30231 >> 2] = 7929899;
 HEAP32[$30231 + 4 >> 2] = 1048645;
 HEAP32[$2671 + 8 >> 2] = 65535;
 HEAP16[$2672 >> 1] = 43;
 HEAP16[$2672 + 2 >> 1] = 121;
 HEAP16[$2672 + 4 >> 1] = 69;
 HEAP16[$2672 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2671, $2672);
 $30239 = $2673;
 HEAP32[$30239 >> 2] = 8192009;
 HEAP32[$30239 + 4 >> 2] = 524296;
 HEAP32[$2673 + 8 >> 2] = 65535;
 HEAP16[$2674 >> 1] = 9;
 HEAP16[$2674 + 2 >> 1] = 125;
 HEAP16[$2674 + 4 >> 1] = 8;
 HEAP16[$2674 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2673, $2674);
 $30247 = $2675;
 HEAP32[$30247 >> 2] = 8454155;
 HEAP32[$30247 + 4 >> 2] = 65541;
 HEAP32[$2675 + 8 >> 2] = 0;
 HEAP16[$2676 >> 1] = 11;
 HEAP16[$2676 + 2 >> 1] = 129;
 HEAP16[$2676 + 4 >> 1] = 5;
 HEAP16[$2676 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2675, $2676);
 $30255 = $2677;
 HEAP32[$30255 >> 2] = 8323085;
 HEAP32[$30255 + 4 >> 2] = 327681;
 HEAP32[$2677 + 8 >> 2] = 0;
 HEAP16[$2678 >> 1] = 13;
 HEAP16[$2678 + 2 >> 1] = 127;
 HEAP16[$2678 + 4 >> 1] = 1;
 HEAP16[$2678 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2677, $2678);
 $30263 = $2679;
 HEAP32[$30263 >> 2] = 8192009;
 HEAP32[$30263 + 4 >> 2] = 65545;
 HEAP32[$2679 + 8 >> 2] = 33808;
 HEAP16[$2680 >> 1] = 9;
 HEAP16[$2680 + 2 >> 1] = 125;
 HEAP16[$2680 + 4 >> 1] = 9;
 HEAP16[$2680 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2679, $2680);
 $30271 = $2681;
 HEAP32[$30271 >> 2] = 8192009;
 HEAP32[$30271 + 4 >> 2] = 589825;
 HEAP32[$2681 + 8 >> 2] = 33808;
 HEAP16[$2682 >> 1] = 9;
 HEAP16[$2682 + 2 >> 1] = 125;
 HEAP16[$2682 + 4 >> 1] = 1;
 HEAP16[$2682 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2681, $2682);
 $30279 = $2683;
 HEAP32[$30279 >> 2] = 8716297;
 HEAP32[$30279 + 4 >> 2] = 65545;
 HEAP32[$2683 + 8 >> 2] = 33808;
 HEAP16[$2684 >> 1] = 9;
 HEAP16[$2684 + 2 >> 1] = 133;
 HEAP16[$2684 + 4 >> 1] = 9;
 HEAP16[$2684 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2683, $2684);
 $30287 = $2685;
 HEAP32[$30287 >> 2] = 8192017;
 HEAP32[$30287 + 4 >> 2] = 589825;
 HEAP32[$2685 + 8 >> 2] = 33808;
 HEAP16[$2686 >> 1] = 17;
 HEAP16[$2686 + 2 >> 1] = 125;
 HEAP16[$2686 + 4 >> 1] = 1;
 HEAP16[$2686 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2685, $2686);
 $30295 = $2687;
 HEAP32[$30295 >> 2] = 8978475;
 HEAP32[$30295 + 4 >> 2] = 1048624;
 HEAP32[$2687 + 8 >> 2] = 65535;
 HEAP16[$2688 >> 1] = 43;
 HEAP16[$2688 + 2 >> 1] = 137;
 HEAP16[$2688 + 4 >> 1] = 48;
 HEAP16[$2688 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2687, $2688);
 $30303 = $2689;
 HEAP32[$30303 >> 2] = 9240585;
 HEAP32[$30303 + 4 >> 2] = 524296;
 HEAP32[$2689 + 8 >> 2] = 65535;
 HEAP16[$2690 >> 1] = 9;
 HEAP16[$2690 + 2 >> 1] = 141;
 HEAP16[$2690 + 4 >> 1] = 8;
 HEAP16[$2690 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2689, $2690);
 $30311 = $2691;
 HEAP32[$30311 >> 2] = 9502731;
 HEAP32[$30311 + 4 >> 2] = 65541;
 HEAP32[$2691 + 8 >> 2] = 0;
 HEAP16[$2692 >> 1] = 11;
 HEAP16[$2692 + 2 >> 1] = 145;
 HEAP16[$2692 + 4 >> 1] = 5;
 HEAP16[$2692 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2691, $2692);
 $30319 = $2693;
 HEAP32[$30319 >> 2] = 9371661;
 HEAP32[$30319 + 4 >> 2] = 327681;
 HEAP32[$2693 + 8 >> 2] = 0;
 HEAP16[$2694 >> 1] = 13;
 HEAP16[$2694 + 2 >> 1] = 143;
 HEAP16[$2694 + 4 >> 1] = 1;
 HEAP16[$2694 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2693, $2694);
 $30327 = $2695;
 HEAP32[$30327 >> 2] = 9240585;
 HEAP32[$30327 + 4 >> 2] = 65545;
 HEAP32[$2695 + 8 >> 2] = 33808;
 HEAP16[$2696 >> 1] = 9;
 HEAP16[$2696 + 2 >> 1] = 141;
 HEAP16[$2696 + 4 >> 1] = 9;
 HEAP16[$2696 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2695, $2696);
 $30335 = $2697;
 HEAP32[$30335 >> 2] = 9240585;
 HEAP32[$30335 + 4 >> 2] = 589825;
 HEAP32[$2697 + 8 >> 2] = 33808;
 HEAP16[$2698 >> 1] = 9;
 HEAP16[$2698 + 2 >> 1] = 141;
 HEAP16[$2698 + 4 >> 1] = 1;
 HEAP16[$2698 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2697, $2698);
 $30343 = $2699;
 HEAP32[$30343 >> 2] = 9764873;
 HEAP32[$30343 + 4 >> 2] = 65545;
 HEAP32[$2699 + 8 >> 2] = 33808;
 HEAP16[$2700 >> 1] = 9;
 HEAP16[$2700 + 2 >> 1] = 149;
 HEAP16[$2700 + 4 >> 1] = 9;
 HEAP16[$2700 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2699, $2700);
 $30351 = $2701;
 HEAP32[$30351 >> 2] = 9240593;
 HEAP32[$30351 + 4 >> 2] = 589825;
 HEAP32[$2701 + 8 >> 2] = 33808;
 HEAP16[$2702 >> 1] = 17;
 HEAP16[$2702 + 2 >> 1] = 141;
 HEAP16[$2702 + 4 >> 1] = 1;
 HEAP16[$2702 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2701, $2702);
 $30359 = $2703;
 HEAP32[$30359 >> 2] = 44957836;
 HEAP32[$30359 + 4 >> 2] = 1048614;
 HEAP8[$2703 + 8 >> 0] = -16;
 HEAP32[$2703 + 12 >> 2] = 65535;
 HEAP32[$2703 + 16 >> 2] = 54937;
 HEAP8[$2703 + 20 >> 0] = 0;
 HEAP8[$2703 + 21 >> 0] = 7;
 HEAP8[$2703 + 22 >> 0] = 3;
 HEAP8[$2703 + 23 >> 0] = -86;
 $30370 = $2703 + 24 | 0;
 HEAP32[$30370 >> 2] = 0;
 HEAP16[$30370 + 4 >> 1] = 0;
 HEAP8[$30370 + 6 >> 0] = 0;
 HEAP16[$2704 >> 1] = 140;
 HEAP16[$2704 + 2 >> 1] = 686;
 HEAP16[$2704 + 4 >> 1] = 38;
 HEAP16[$2704 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $2703, $2704);
 $30374 = $2705;
 HEAP32[$30374 >> 2] = 44957835;
 HEAP32[$30374 + 4 >> 2] = 1048577;
 HEAP32[$2705 + 8 >> 2] = 16904;
 HEAP16[$2706 >> 1] = 139;
 HEAP16[$2706 + 2 >> 1] = 686;
 HEAP16[$2706 + 4 >> 1] = 1;
 HEAP16[$2706 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2705, $2706);
 $30382 = $2707;
 HEAP32[$30382 >> 2] = 45940754;
 HEAP32[$30382 + 4 >> 2] = 65657;
 HEAP32[$2707 + 8 >> 2] = 16904;
 HEAP16[$2708 >> 1] = 18;
 HEAP16[$2708 + 2 >> 1] = 701;
 HEAP16[$2708 + 4 >> 1] = 121;
 HEAP16[$2708 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2707, $2708);
 $30390 = $2709;
 HEAP32[$30390 >> 2] = 44957714;
 HEAP32[$30390 + 4 >> 2] = 983041;
 HEAP32[$2709 + 8 >> 2] = 54937;
 HEAP16[$2710 >> 1] = 18;
 HEAP16[$2710 + 2 >> 1] = 686;
 HEAP16[$2710 + 4 >> 1] = 1;
 HEAP16[$2710 + 6 >> 1] = 15;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2709, $2710);
 $30398 = $2711;
 HEAP32[$30398 >> 2] = 44957715;
 HEAP32[$30398 + 4 >> 2] = 65656;
 HEAP32[$2711 + 8 >> 2] = 54937;
 HEAP16[$2712 >> 1] = 19;
 HEAP16[$2712 + 2 >> 1] = 686;
 HEAP16[$2712 + 4 >> 1] = 120;
 HEAP16[$2712 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2711, $2712);
 $30406 = $2713;
 HEAP32[$30406 >> 2] = 45023370;
 HEAP32[$30406 + 4 >> 2] = 917505;
 HEAP32[$2713 + 8 >> 2] = 33808;
 HEAP16[$2714 >> 1] = 138;
 HEAP16[$2714 + 2 >> 1] = 687;
 HEAP16[$2714 + 4 >> 1] = 1;
 HEAP16[$2714 + 6 >> 1] = 14;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2713, $2714);
 $30414 = $2715;
 HEAP32[$30414 >> 2] = 45875219;
 HEAP32[$30414 + 4 >> 2] = 65655;
 HEAP32[$2715 + 8 >> 2] = 33808;
 HEAP16[$2716 >> 1] = 19;
 HEAP16[$2716 + 2 >> 1] = 700;
 HEAP16[$2716 + 4 >> 1] = 119;
 HEAP16[$2716 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2715, $2716);
 $30422 = $2717;
 HEAP32[$30422 >> 2] = 45023251;
 HEAP32[$30422 + 4 >> 2] = 851969;
 HEAP32[$2717 + 8 >> 2] = 65535;
 HEAP16[$2718 >> 1] = 19;
 HEAP16[$2718 + 2 >> 1] = 687;
 HEAP16[$2718 + 4 >> 1] = 1;
 HEAP16[$2718 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2717, $2718);
 $30430 = $2719;
 HEAP32[$30430 >> 2] = 45023252;
 HEAP32[$30430 + 4 >> 2] = 65654;
 HEAP32[$2719 + 8 >> 2] = 65535;
 HEAP16[$2720 >> 1] = 20;
 HEAP16[$2720 + 2 >> 1] = 687;
 HEAP16[$2720 + 4 >> 1] = 118;
 HEAP16[$2720 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2719, $2720);
 $30438 = $2721;
 HEAP32[$30438 >> 2] = 45088788;
 HEAP32[$30438 + 4 >> 2] = 786550;
 HEAP32[$2721 + 8 >> 2] = 54937;
 HEAP16[$2722 >> 1] = 20;
 HEAP16[$2722 + 2 >> 1] = 688;
 HEAP16[$2722 + 4 >> 1] = 118;
 HEAP16[$2722 + 6 >> 1] = 12;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2721, $2722);
 $30446 = $2723;
 HEAP32[$30446 >> 2] = 8978434;
 HEAP32[$30446 + 4 >> 2] = 35979456;
 HEAP8[$2723 + 8 >> 0] = -52;
 HEAP16[$2723 + 10 >> 1] = 2;
 HEAP16[$2723 + 12 >> 1] = 121;
 HEAP16[$2724 >> 1] = 2;
 HEAP16[$2724 + 2 >> 1] = 137;
 HEAP16[$2724 + 4 >> 1] = 192;
 HEAP16[$2724 + 6 >> 1] = 549;
 __ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect($front, $2723, $2724);
 $30456 = $2725;
 HEAP32[$30456 >> 2] = 4784130;
 HEAP32[$30456 + 4 >> 2] = 40173760;
 HEAP32[$2725 + 8 >> 2] = 65535;
 HEAP16[$2726 >> 1] = 2;
 HEAP16[$2726 + 2 >> 1] = 73;
 HEAP16[$2726 + 4 >> 1] = 192;
 HEAP16[$2726 + 6 >> 1] = 613;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2725, $2726);
 $30464 = $2727;
 HEAP32[$30464 >> 2] = 4784152;
 HEAP32[$30464 + 4 >> 2] = 1048746;
 HEAP32[$2727 + 8 >> 2] = 2349;
 HEAP16[$2728 >> 1] = 24;
 HEAP16[$2728 + 2 >> 1] = 73;
 HEAP16[$2728 + 4 >> 1] = 170;
 HEAP16[$2728 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2727, $2728);
 $30472 = $2729;
 HEAP32[$30472 >> 2] = 5832747;
 HEAP32[$30472 + 4 >> 2] = 1048606;
 HEAP32[$2729 + 8 >> 2] = 65535;
 HEAP16[$2730 >> 1] = 43;
 HEAP16[$2730 + 2 >> 1] = 89;
 HEAP16[$2730 + 4 >> 1] = 30;
 HEAP16[$2730 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2729, $2730);
 $30480 = $2731;
 HEAP32[$30480 >> 2] = 6094857;
 HEAP32[$30480 + 4 >> 2] = 524296;
 HEAP32[$2731 + 8 >> 2] = 65535;
 HEAP16[$2732 >> 1] = 9;
 HEAP16[$2732 + 2 >> 1] = 93;
 HEAP16[$2732 + 4 >> 1] = 8;
 HEAP16[$2732 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2731, $2732);
 $30488 = $2733;
 HEAP32[$30488 >> 2] = 6357003;
 HEAP32[$30488 + 4 >> 2] = 65541;
 HEAP32[$2733 + 8 >> 2] = 0;
 HEAP16[$2734 >> 1] = 11;
 HEAP16[$2734 + 2 >> 1] = 97;
 HEAP16[$2734 + 4 >> 1] = 5;
 HEAP16[$2734 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2733, $2734);
 $30496 = $2735;
 HEAP32[$30496 >> 2] = 6225933;
 HEAP32[$30496 + 4 >> 2] = 327681;
 HEAP32[$2735 + 8 >> 2] = 0;
 HEAP16[$2736 >> 1] = 13;
 HEAP16[$2736 + 2 >> 1] = 95;
 HEAP16[$2736 + 4 >> 1] = 1;
 HEAP16[$2736 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2735, $2736);
 $30504 = $2737;
 HEAP32[$30504 >> 2] = 6094857;
 HEAP32[$30504 + 4 >> 2] = 65545;
 HEAP32[$2737 + 8 >> 2] = 33808;
 HEAP16[$2738 >> 1] = 9;
 HEAP16[$2738 + 2 >> 1] = 93;
 HEAP16[$2738 + 4 >> 1] = 9;
 HEAP16[$2738 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2737, $2738);
 $30512 = $2739;
 HEAP32[$30512 >> 2] = 6094857;
 HEAP32[$30512 + 4 >> 2] = 589825;
 HEAP32[$2739 + 8 >> 2] = 33808;
 HEAP16[$2740 >> 1] = 9;
 HEAP16[$2740 + 2 >> 1] = 93;
 HEAP16[$2740 + 4 >> 1] = 1;
 HEAP16[$2740 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2739, $2740);
 $30520 = $2741;
 HEAP32[$30520 >> 2] = 6619145;
 HEAP32[$30520 + 4 >> 2] = 65545;
 HEAP32[$2741 + 8 >> 2] = 33808;
 HEAP16[$2742 >> 1] = 9;
 HEAP16[$2742 + 2 >> 1] = 101;
 HEAP16[$2742 + 4 >> 1] = 9;
 HEAP16[$2742 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2741, $2742);
 $30528 = $2743;
 HEAP32[$30528 >> 2] = 6094865;
 HEAP32[$30528 + 4 >> 2] = 589825;
 HEAP32[$2743 + 8 >> 2] = 33808;
 HEAP16[$2744 >> 1] = 17;
 HEAP16[$2744 + 2 >> 1] = 93;
 HEAP16[$2744 + 4 >> 1] = 1;
 HEAP16[$2744 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2743, $2744);
 $30536 = $2745;
 HEAP32[$30536 >> 2] = 6881323;
 HEAP32[$30536 + 4 >> 2] = 1048652;
 HEAP32[$2745 + 8 >> 2] = 65535;
 HEAP16[$2746 >> 1] = 43;
 HEAP16[$2746 + 2 >> 1] = 105;
 HEAP16[$2746 + 4 >> 1] = 76;
 HEAP16[$2746 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2745, $2746);
 $30544 = $2747;
 HEAP32[$30544 >> 2] = 7143433;
 HEAP32[$30544 + 4 >> 2] = 524296;
 HEAP32[$2747 + 8 >> 2] = 65535;
 HEAP16[$2748 >> 1] = 9;
 HEAP16[$2748 + 2 >> 1] = 109;
 HEAP16[$2748 + 4 >> 1] = 8;
 HEAP16[$2748 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2747, $2748);
 $30552 = $2749;
 HEAP32[$30552 >> 2] = 7405579;
 HEAP32[$30552 + 4 >> 2] = 65541;
 HEAP32[$2749 + 8 >> 2] = 0;
 HEAP16[$2750 >> 1] = 11;
 HEAP16[$2750 + 2 >> 1] = 113;
 HEAP16[$2750 + 4 >> 1] = 5;
 HEAP16[$2750 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2749, $2750);
 $30560 = $2751;
 HEAP32[$30560 >> 2] = 7274509;
 HEAP32[$30560 + 4 >> 2] = 327681;
 HEAP32[$2751 + 8 >> 2] = 0;
 HEAP16[$2752 >> 1] = 13;
 HEAP16[$2752 + 2 >> 1] = 111;
 HEAP16[$2752 + 4 >> 1] = 1;
 HEAP16[$2752 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2751, $2752);
 $30568 = $2753;
 HEAP32[$30568 >> 2] = 7143433;
 HEAP32[$30568 + 4 >> 2] = 65545;
 HEAP32[$2753 + 8 >> 2] = 33808;
 HEAP16[$2754 >> 1] = 9;
 HEAP16[$2754 + 2 >> 1] = 109;
 HEAP16[$2754 + 4 >> 1] = 9;
 HEAP16[$2754 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2753, $2754);
 $30576 = $2755;
 HEAP32[$30576 >> 2] = 7143433;
 HEAP32[$30576 + 4 >> 2] = 589825;
 HEAP32[$2755 + 8 >> 2] = 33808;
 HEAP16[$2756 >> 1] = 9;
 HEAP16[$2756 + 2 >> 1] = 109;
 HEAP16[$2756 + 4 >> 1] = 1;
 HEAP16[$2756 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2755, $2756);
 $30584 = $2757;
 HEAP32[$30584 >> 2] = 7667721;
 HEAP32[$30584 + 4 >> 2] = 65545;
 HEAP32[$2757 + 8 >> 2] = 33808;
 HEAP16[$2758 >> 1] = 9;
 HEAP16[$2758 + 2 >> 1] = 117;
 HEAP16[$2758 + 4 >> 1] = 9;
 HEAP16[$2758 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2757, $2758);
 $30592 = $2759;
 HEAP32[$30592 >> 2] = 7143441;
 HEAP32[$30592 + 4 >> 2] = 589825;
 HEAP32[$2759 + 8 >> 2] = 33808;
 HEAP16[$2760 >> 1] = 17;
 HEAP16[$2760 + 2 >> 1] = 109;
 HEAP16[$2760 + 4 >> 1] = 1;
 HEAP16[$2760 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2759, $2760);
 $30600 = $2761;
 HEAP32[$30600 >> 2] = 7929899;
 HEAP32[$30600 + 4 >> 2] = 1048634;
 HEAP32[$2761 + 8 >> 2] = 65535;
 HEAP16[$2762 >> 1] = 43;
 HEAP16[$2762 + 2 >> 1] = 121;
 HEAP16[$2762 + 4 >> 1] = 58;
 HEAP16[$2762 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2761, $2762);
 $30608 = $2763;
 HEAP32[$30608 >> 2] = 8192009;
 HEAP32[$30608 + 4 >> 2] = 524296;
 HEAP32[$2763 + 8 >> 2] = 65535;
 HEAP16[$2764 >> 1] = 9;
 HEAP16[$2764 + 2 >> 1] = 125;
 HEAP16[$2764 + 4 >> 1] = 8;
 HEAP16[$2764 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2763, $2764);
 $30616 = $2765;
 HEAP32[$30616 >> 2] = 8454155;
 HEAP32[$30616 + 4 >> 2] = 65541;
 HEAP32[$2765 + 8 >> 2] = 0;
 HEAP16[$2766 >> 1] = 11;
 HEAP16[$2766 + 2 >> 1] = 129;
 HEAP16[$2766 + 4 >> 1] = 5;
 HEAP16[$2766 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2765, $2766);
 $30624 = $2767;
 HEAP32[$30624 >> 2] = 8323085;
 HEAP32[$30624 + 4 >> 2] = 327681;
 HEAP32[$2767 + 8 >> 2] = 0;
 HEAP16[$2768 >> 1] = 13;
 HEAP16[$2768 + 2 >> 1] = 127;
 HEAP16[$2768 + 4 >> 1] = 1;
 HEAP16[$2768 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2767, $2768);
 $30632 = $2769;
 HEAP32[$30632 >> 2] = 8192009;
 HEAP32[$30632 + 4 >> 2] = 65545;
 HEAP32[$2769 + 8 >> 2] = 33808;
 HEAP16[$2770 >> 1] = 9;
 HEAP16[$2770 + 2 >> 1] = 125;
 HEAP16[$2770 + 4 >> 1] = 9;
 HEAP16[$2770 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2769, $2770);
 $30640 = $2771;
 HEAP32[$30640 >> 2] = 8192009;
 HEAP32[$30640 + 4 >> 2] = 589825;
 HEAP32[$2771 + 8 >> 2] = 33808;
 HEAP16[$2772 >> 1] = 9;
 HEAP16[$2772 + 2 >> 1] = 125;
 HEAP16[$2772 + 4 >> 1] = 1;
 HEAP16[$2772 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2771, $2772);
 $30648 = $2773;
 HEAP32[$30648 >> 2] = 8716297;
 HEAP32[$30648 + 4 >> 2] = 65545;
 HEAP32[$2773 + 8 >> 2] = 33808;
 HEAP16[$2774 >> 1] = 9;
 HEAP16[$2774 + 2 >> 1] = 133;
 HEAP16[$2774 + 4 >> 1] = 9;
 HEAP16[$2774 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2773, $2774);
 $30656 = $2775;
 HEAP32[$30656 >> 2] = 8192017;
 HEAP32[$30656 + 4 >> 2] = 589825;
 HEAP32[$2775 + 8 >> 2] = 33808;
 HEAP16[$2776 >> 1] = 17;
 HEAP16[$2776 + 2 >> 1] = 125;
 HEAP16[$2776 + 4 >> 1] = 1;
 HEAP16[$2776 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2775, $2776);
 $30664 = $2777;
 HEAP32[$30664 >> 2] = 8978475;
 HEAP32[$30664 + 4 >> 2] = 1048645;
 HEAP32[$2777 + 8 >> 2] = 65535;
 HEAP16[$2778 >> 1] = 43;
 HEAP16[$2778 + 2 >> 1] = 137;
 HEAP16[$2778 + 4 >> 1] = 69;
 HEAP16[$2778 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2777, $2778);
 $30672 = $2779;
 HEAP32[$30672 >> 2] = 9240585;
 HEAP32[$30672 + 4 >> 2] = 524296;
 HEAP32[$2779 + 8 >> 2] = 65535;
 HEAP16[$2780 >> 1] = 9;
 HEAP16[$2780 + 2 >> 1] = 141;
 HEAP16[$2780 + 4 >> 1] = 8;
 HEAP16[$2780 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2779, $2780);
 $30680 = $2781;
 HEAP32[$30680 >> 2] = 9502731;
 HEAP32[$30680 + 4 >> 2] = 65541;
 HEAP32[$2781 + 8 >> 2] = 0;
 HEAP16[$2782 >> 1] = 11;
 HEAP16[$2782 + 2 >> 1] = 145;
 HEAP16[$2782 + 4 >> 1] = 5;
 HEAP16[$2782 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2781, $2782);
 $30688 = $2783;
 HEAP32[$30688 >> 2] = 9371661;
 HEAP32[$30688 + 4 >> 2] = 327681;
 HEAP32[$2783 + 8 >> 2] = 0;
 HEAP16[$2784 >> 1] = 13;
 HEAP16[$2784 + 2 >> 1] = 143;
 HEAP16[$2784 + 4 >> 1] = 1;
 HEAP16[$2784 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2783, $2784);
 $30696 = $2785;
 HEAP32[$30696 >> 2] = 9240585;
 HEAP32[$30696 + 4 >> 2] = 65545;
 HEAP32[$2785 + 8 >> 2] = 33808;
 HEAP16[$2786 >> 1] = 9;
 HEAP16[$2786 + 2 >> 1] = 141;
 HEAP16[$2786 + 4 >> 1] = 9;
 HEAP16[$2786 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2785, $2786);
 $30704 = $2787;
 HEAP32[$30704 >> 2] = 9240585;
 HEAP32[$30704 + 4 >> 2] = 589825;
 HEAP32[$2787 + 8 >> 2] = 33808;
 HEAP16[$2788 >> 1] = 9;
 HEAP16[$2788 + 2 >> 1] = 141;
 HEAP16[$2788 + 4 >> 1] = 1;
 HEAP16[$2788 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2787, $2788);
 $30712 = $2789;
 HEAP32[$30712 >> 2] = 9764873;
 HEAP32[$30712 + 4 >> 2] = 65545;
 HEAP32[$2789 + 8 >> 2] = 33808;
 HEAP16[$2790 >> 1] = 9;
 HEAP16[$2790 + 2 >> 1] = 149;
 HEAP16[$2790 + 4 >> 1] = 9;
 HEAP16[$2790 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2789, $2790);
 $30720 = $2791;
 HEAP32[$30720 >> 2] = 9240593;
 HEAP32[$30720 + 4 >> 2] = 589825;
 HEAP32[$2791 + 8 >> 2] = 33808;
 HEAP16[$2792 >> 1] = 17;
 HEAP16[$2792 + 2 >> 1] = 141;
 HEAP16[$2792 + 4 >> 1] = 1;
 HEAP16[$2792 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2791, $2792);
 $30728 = $2793;
 HEAP32[$30728 >> 2] = 10027051;
 HEAP32[$30728 + 4 >> 2] = 1048624;
 HEAP32[$2793 + 8 >> 2] = 65535;
 HEAP16[$2794 >> 1] = 43;
 HEAP16[$2794 + 2 >> 1] = 153;
 HEAP16[$2794 + 4 >> 1] = 48;
 HEAP16[$2794 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2793, $2794);
 $30736 = $2795;
 HEAP32[$30736 >> 2] = 10289161;
 HEAP32[$30736 + 4 >> 2] = 524296;
 HEAP32[$2795 + 8 >> 2] = 65535;
 HEAP16[$2796 >> 1] = 9;
 HEAP16[$2796 + 2 >> 1] = 157;
 HEAP16[$2796 + 4 >> 1] = 8;
 HEAP16[$2796 + 6 >> 1] = 8;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2795, $2796);
 $30744 = $2797;
 HEAP32[$30744 >> 2] = 10551307;
 HEAP32[$30744 + 4 >> 2] = 65541;
 HEAP32[$2797 + 8 >> 2] = 0;
 HEAP16[$2798 >> 1] = 11;
 HEAP16[$2798 + 2 >> 1] = 161;
 HEAP16[$2798 + 4 >> 1] = 5;
 HEAP16[$2798 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2797, $2798);
 $30752 = $2799;
 HEAP32[$30752 >> 2] = 10420237;
 HEAP32[$30752 + 4 >> 2] = 327681;
 HEAP32[$2799 + 8 >> 2] = 0;
 HEAP16[$2800 >> 1] = 13;
 HEAP16[$2800 + 2 >> 1] = 159;
 HEAP16[$2800 + 4 >> 1] = 1;
 HEAP16[$2800 + 6 >> 1] = 5;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2799, $2800);
 $30760 = $2801;
 HEAP32[$30760 >> 2] = 10289161;
 HEAP32[$30760 + 4 >> 2] = 65545;
 HEAP32[$2801 + 8 >> 2] = 33808;
 HEAP16[$2802 >> 1] = 9;
 HEAP16[$2802 + 2 >> 1] = 157;
 HEAP16[$2802 + 4 >> 1] = 9;
 HEAP16[$2802 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2801, $2802);
 $30768 = $2803;
 HEAP32[$30768 >> 2] = 10289161;
 HEAP32[$30768 + 4 >> 2] = 589825;
 HEAP32[$2803 + 8 >> 2] = 33808;
 HEAP16[$2804 >> 1] = 9;
 HEAP16[$2804 + 2 >> 1] = 157;
 HEAP16[$2804 + 4 >> 1] = 1;
 HEAP16[$2804 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2803, $2804);
 $30776 = $2805;
 HEAP32[$30776 >> 2] = 10813449;
 HEAP32[$30776 + 4 >> 2] = 65545;
 HEAP32[$2805 + 8 >> 2] = 33808;
 HEAP16[$2806 >> 1] = 9;
 HEAP16[$2806 + 2 >> 1] = 165;
 HEAP16[$2806 + 4 >> 1] = 9;
 HEAP16[$2806 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2805, $2806);
 $30784 = $2807;
 HEAP32[$30784 >> 2] = 10289169;
 HEAP32[$30784 + 4 >> 2] = 589825;
 HEAP32[$2807 + 8 >> 2] = 33808;
 HEAP16[$2808 >> 1] = 17;
 HEAP16[$2808 + 2 >> 1] = 157;
 HEAP16[$2808 + 4 >> 1] = 1;
 HEAP16[$2808 + 6 >> 1] = 9;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2807, $2808);
 $30792 = $2809;
 HEAP32[$30792 >> 2] = 13959943;
 HEAP32[$30792 + 4 >> 2] = 1048780;
 HEAP32[$2809 + 8 >> 2] = 63422;
 HEAP16[$2810 >> 1] = 775;
 HEAP16[$2810 + 2 >> 1] = 213;
 HEAP16[$2810 + 4 >> 1] = 1;
 HEAP16[$2810 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2809, $2810);
 $30800 = $2811;
 HEAP32[$30800 >> 2] = 13959943;
 HEAP32[$30800 + 4 >> 2] = 1048780;
 HEAP32[$2811 + 8 >> 2] = 63422;
 HEAP16[$2812 >> 1] = 792;
 HEAP16[$2812 + 2 >> 1] = 213;
 HEAP16[$2812 + 4 >> 1] = 187;
 HEAP16[$2812 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2811, $2812);
 $30808 = $2813;
 HEAP32[$30808 >> 2] = 13959943;
 HEAP32[$30808 + 4 >> 2] = 1048780;
 HEAP32[$2813 + 8 >> 2] = 63422;
 HEAP16[$2814 >> 1] = 775;
 HEAP16[$2814 + 2 >> 1] = 215;
 HEAP16[$2814 + 4 >> 1] = 1;
 HEAP16[$2814 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2813, $2814);
 $30816 = $2815;
 HEAP32[$30816 >> 2] = 13959943;
 HEAP32[$30816 + 4 >> 2] = 1048780;
 HEAP32[$2815 + 8 >> 2] = 63422;
 HEAP16[$2816 >> 1] = 792;
 HEAP16[$2816 + 2 >> 1] = 215;
 HEAP16[$2816 + 4 >> 1] = 3;
 HEAP16[$2816 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2815, $2816);
 $30824 = $2817;
 HEAP32[$30824 >> 2] = 13959943;
 HEAP32[$30824 + 4 >> 2] = 1048780;
 HEAP32[$2817 + 8 >> 2] = 63422;
 HEAP16[$2818 >> 1] = 882;
 HEAP16[$2818 + 2 >> 1] = 215;
 HEAP16[$2818 + 4 >> 1] = 97;
 HEAP16[$2818 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2817, $2818);
 $30832 = $2819;
 HEAP32[$30832 >> 2] = 13959943;
 HEAP32[$30832 + 4 >> 2] = 1048780;
 HEAP32[$2819 + 8 >> 2] = 63422;
 HEAP16[$2820 >> 1] = 775;
 HEAP16[$2820 + 2 >> 1] = 228;
 HEAP16[$2820 + 4 >> 1] = 1;
 HEAP16[$2820 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2819, $2820);
 $30840 = $2821;
 HEAP32[$30840 >> 2] = 13959943;
 HEAP32[$30840 + 4 >> 2] = 1048780;
 HEAP32[$2821 + 8 >> 2] = 63422;
 HEAP16[$2822 >> 1] = 792;
 HEAP16[$2822 + 2 >> 1] = 228;
 HEAP16[$2822 + 4 >> 1] = 187;
 HEAP16[$2822 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2821, $2822);
 $30848 = $2823;
 HEAP32[$30848 >> 2] = 15336199;
 HEAP32[$30848 + 4 >> 2] = 1048780;
 HEAP32[$2823 + 8 >> 2] = 63422;
 HEAP16[$2824 >> 1] = 775;
 HEAP16[$2824 + 2 >> 1] = 234;
 HEAP16[$2824 + 4 >> 1] = 1;
 HEAP16[$2824 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2823, $2824);
 $30856 = $2825;
 HEAP32[$30856 >> 2] = 15336199;
 HEAP32[$30856 + 4 >> 2] = 1048780;
 HEAP32[$2825 + 8 >> 2] = 63422;
 HEAP16[$2826 >> 1] = 792;
 HEAP16[$2826 + 2 >> 1] = 234;
 HEAP16[$2826 + 4 >> 1] = 187;
 HEAP16[$2826 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2825, $2826);
 $30864 = $2827;
 HEAP32[$30864 >> 2] = 15336199;
 HEAP32[$30864 + 4 >> 2] = 1048780;
 HEAP32[$2827 + 8 >> 2] = 63422;
 HEAP16[$2828 >> 1] = 775;
 HEAP16[$2828 + 2 >> 1] = 236;
 HEAP16[$2828 + 4 >> 1] = 1;
 HEAP16[$2828 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2827, $2828);
 $30872 = $2829;
 HEAP32[$30872 >> 2] = 15336199;
 HEAP32[$30872 + 4 >> 2] = 1048780;
 HEAP32[$2829 + 8 >> 2] = 63422;
 HEAP16[$2830 >> 1] = 792;
 HEAP16[$2830 + 2 >> 1] = 236;
 HEAP16[$2830 + 4 >> 1] = 3;
 HEAP16[$2830 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2829, $2830);
 $30880 = $2831;
 HEAP32[$30880 >> 2] = 15336199;
 HEAP32[$30880 + 4 >> 2] = 1048780;
 HEAP32[$2831 + 8 >> 2] = 63422;
 HEAP16[$2832 >> 1] = 951;
 HEAP16[$2832 + 2 >> 1] = 236;
 HEAP16[$2832 + 4 >> 1] = 28;
 HEAP16[$2832 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2831, $2832);
 $30888 = $2833;
 HEAP32[$30888 >> 2] = 15336199;
 HEAP32[$30888 + 4 >> 2] = 1048780;
 HEAP32[$2833 + 8 >> 2] = 63422;
 HEAP16[$2834 >> 1] = 775;
 HEAP16[$2834 + 2 >> 1] = 249;
 HEAP16[$2834 + 4 >> 1] = 1;
 HEAP16[$2834 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2833, $2834);
 $30896 = $2835;
 HEAP32[$30896 >> 2] = 15336199;
 HEAP32[$30896 + 4 >> 2] = 1048780;
 HEAP32[$2835 + 8 >> 2] = 63422;
 HEAP16[$2836 >> 1] = 792;
 HEAP16[$2836 + 2 >> 1] = 249;
 HEAP16[$2836 + 4 >> 1] = 187;
 HEAP16[$2836 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2835, $2836);
 $30904 = $2837;
 HEAP32[$30904 >> 2] = 16712455;
 HEAP32[$30904 + 4 >> 2] = 1048780;
 HEAP32[$2837 + 8 >> 2] = 63422;
 HEAP16[$2838 >> 1] = 775;
 HEAP16[$2838 + 2 >> 1] = 255;
 HEAP16[$2838 + 4 >> 1] = 1;
 HEAP16[$2838 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2837, $2838);
 $30912 = $2839;
 HEAP32[$30912 >> 2] = 16712455;
 HEAP32[$30912 + 4 >> 2] = 1048780;
 HEAP32[$2839 + 8 >> 2] = 63422;
 HEAP16[$2840 >> 1] = 792;
 HEAP16[$2840 + 2 >> 1] = 255;
 HEAP16[$2840 + 4 >> 1] = 187;
 HEAP16[$2840 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2839, $2840);
 $30920 = $2841;
 HEAP32[$30920 >> 2] = 16712455;
 HEAP32[$30920 + 4 >> 2] = 1048780;
 HEAP32[$2841 + 8 >> 2] = 63422;
 HEAP16[$2842 >> 1] = 775;
 HEAP16[$2842 + 2 >> 1] = 257;
 HEAP16[$2842 + 4 >> 1] = 1;
 HEAP16[$2842 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2841, $2842);
 $30928 = $2843;
 HEAP32[$30928 >> 2] = 16712455;
 HEAP32[$30928 + 4 >> 2] = 1048780;
 HEAP32[$2843 + 8 >> 2] = 63422;
 HEAP16[$2844 >> 1] = 792;
 HEAP16[$2844 + 2 >> 1] = 257;
 HEAP16[$2844 + 4 >> 1] = 3;
 HEAP16[$2844 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2843, $2844);
 $30936 = $2845;
 HEAP32[$30936 >> 2] = 16712455;
 HEAP32[$30936 + 4 >> 2] = 1048780;
 HEAP32[$2845 + 8 >> 2] = 63422;
 HEAP16[$2846 >> 1] = 949;
 HEAP16[$2846 + 2 >> 1] = 257;
 HEAP16[$2846 + 4 >> 1] = 30;
 HEAP16[$2846 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2845, $2846);
 $30944 = $2847;
 HEAP32[$30944 >> 2] = 16712455;
 HEAP32[$30944 + 4 >> 2] = 1048780;
 HEAP32[$2847 + 8 >> 2] = 63422;
 HEAP16[$2848 >> 1] = 775;
 HEAP16[$2848 + 2 >> 1] = 270;
 HEAP16[$2848 + 4 >> 1] = 1;
 HEAP16[$2848 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2847, $2848);
 $30952 = $2849;
 HEAP32[$30952 >> 2] = 16712455;
 HEAP32[$30952 + 4 >> 2] = 1048780;
 HEAP32[$2849 + 8 >> 2] = 63422;
 HEAP16[$2850 >> 1] = 792;
 HEAP16[$2850 + 2 >> 1] = 270;
 HEAP16[$2850 + 4 >> 1] = 187;
 HEAP16[$2850 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2849, $2850);
 $30960 = $2851;
 HEAP32[$30960 >> 2] = 18088711;
 HEAP32[$30960 + 4 >> 2] = 1048780;
 HEAP32[$2851 + 8 >> 2] = 63422;
 HEAP16[$2852 >> 1] = 775;
 HEAP16[$2852 + 2 >> 1] = 276;
 HEAP16[$2852 + 4 >> 1] = 1;
 HEAP16[$2852 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2851, $2852);
 $30968 = $2853;
 HEAP32[$30968 >> 2] = 18088711;
 HEAP32[$30968 + 4 >> 2] = 1048780;
 HEAP32[$2853 + 8 >> 2] = 63422;
 HEAP16[$2854 >> 1] = 792;
 HEAP16[$2854 + 2 >> 1] = 276;
 HEAP16[$2854 + 4 >> 1] = 187;
 HEAP16[$2854 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2853, $2854);
 $30976 = $2855;
 HEAP32[$30976 >> 2] = 18088711;
 HEAP32[$30976 + 4 >> 2] = 1048780;
 HEAP32[$2855 + 8 >> 2] = 63422;
 HEAP16[$2856 >> 1] = 775;
 HEAP16[$2856 + 2 >> 1] = 278;
 HEAP16[$2856 + 4 >> 1] = 1;
 HEAP16[$2856 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2855, $2856);
 $30984 = $2857;
 HEAP32[$30984 >> 2] = 18088711;
 HEAP32[$30984 + 4 >> 2] = 1048780;
 HEAP32[$2857 + 8 >> 2] = 63422;
 HEAP16[$2858 >> 1] = 792;
 HEAP16[$2858 + 2 >> 1] = 278;
 HEAP16[$2858 + 4 >> 1] = 3;
 HEAP16[$2858 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2857, $2858);
 $30992 = $2859;
 HEAP32[$30992 >> 2] = 18088711;
 HEAP32[$30992 + 4 >> 2] = 1048780;
 HEAP32[$2859 + 8 >> 2] = 63422;
 HEAP16[$2860 >> 1] = 953;
 HEAP16[$2860 + 2 >> 1] = 278;
 HEAP16[$2860 + 4 >> 1] = 26;
 HEAP16[$2860 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2859, $2860);
 $31000 = $2861;
 HEAP32[$31000 >> 2] = 18088711;
 HEAP32[$31000 + 4 >> 2] = 1048780;
 HEAP32[$2861 + 8 >> 2] = 63422;
 HEAP16[$2862 >> 1] = 775;
 HEAP16[$2862 + 2 >> 1] = 291;
 HEAP16[$2862 + 4 >> 1] = 1;
 HEAP16[$2862 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2861, $2862);
 $31008 = $2863;
 HEAP32[$31008 >> 2] = 18088711;
 HEAP32[$31008 + 4 >> 2] = 1048780;
 HEAP32[$2863 + 8 >> 2] = 63422;
 HEAP16[$2864 >> 1] = 792;
 HEAP16[$2864 + 2 >> 1] = 291;
 HEAP16[$2864 + 4 >> 1] = 187;
 HEAP16[$2864 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2863, $2864);
 $31016 = $2865;
 HEAP32[$31016 >> 2] = 19464967;
 HEAP32[$31016 + 4 >> 2] = 1704140;
 HEAP32[$2865 + 8 >> 2] = 63422;
 HEAP16[$2866 >> 1] = 775;
 HEAP16[$2866 + 2 >> 1] = 297;
 HEAP16[$2866 + 4 >> 1] = 1;
 HEAP16[$2866 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2865, $2866);
 $31024 = $2867;
 HEAP32[$31024 >> 2] = 19464967;
 HEAP32[$31024 + 4 >> 2] = 1704140;
 HEAP32[$2867 + 8 >> 2] = 63422;
 HEAP16[$2868 >> 1] = 792;
 HEAP16[$2868 + 2 >> 1] = 297;
 HEAP16[$2868 + 4 >> 1] = 3;
 HEAP16[$2868 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2867, $2868);
 $31032 = $2869;
 HEAP32[$31032 >> 2] = 19464967;
 HEAP32[$31032 + 4 >> 2] = 1704140;
 HEAP32[$2869 + 8 >> 2] = 63422;
 HEAP16[$2870 >> 1] = 972;
 HEAP16[$2870 + 2 >> 1] = 297;
 HEAP16[$2870 + 4 >> 1] = 7;
 HEAP16[$2870 + 6 >> 1] = 16;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2869, $2870);
 $31040 = $2871;
 HEAP32[$31040 >> 2] = 19464967;
 HEAP32[$31040 + 4 >> 2] = 1704140;
 HEAP32[$2871 + 8 >> 2] = 63422;
 HEAP16[$2872 >> 1] = 775;
 HEAP16[$2872 + 2 >> 1] = 313;
 HEAP16[$2872 + 4 >> 1] = 20;
 HEAP16[$2872 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2871, $2872);
 $31048 = $2873;
 HEAP32[$31048 >> 2] = 19464967;
 HEAP32[$31048 + 4 >> 2] = 1704140;
 HEAP32[$2873 + 8 >> 2] = 63422;
 HEAP16[$2874 >> 1] = 972;
 HEAP16[$2874 + 2 >> 1] = 313;
 HEAP16[$2874 + 4 >> 1] = 7;
 HEAP16[$2874 + 6 >> 1] = 10;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2873, $2874);
 $31056 = $2875;
 HEAP32[$31056 >> 2] = 11535111;
 HEAP32[$31056 + 4 >> 2] = 1048792;
 HEAP32[$2875 + 8 >> 2] = 54938;
 HEAP16[$2876 >> 1] = 775;
 HEAP16[$2876 + 2 >> 1] = 176;
 HEAP16[$2876 + 4 >> 1] = 1;
 HEAP16[$2876 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2875, $2876);
 $31064 = $2877;
 HEAP32[$31064 >> 2] = 11535111;
 HEAP32[$31064 + 4 >> 2] = 1048792;
 HEAP32[$2877 + 8 >> 2] = 54938;
 HEAP16[$2878 >> 1] = 792;
 HEAP16[$2878 + 2 >> 1] = 176;
 HEAP16[$2878 + 4 >> 1] = 199;
 HEAP16[$2878 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2877, $2878);
 $31072 = $2879;
 HEAP32[$31072 >> 2] = 11535111;
 HEAP32[$31072 + 4 >> 2] = 1048792;
 HEAP32[$2879 + 8 >> 2] = 54938;
 HEAP16[$2880 >> 1] = 775;
 HEAP16[$2880 + 2 >> 1] = 178;
 HEAP16[$2880 + 4 >> 1] = 1;
 HEAP16[$2880 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2879, $2880);
 $31080 = $2881;
 HEAP32[$31080 >> 2] = 11535111;
 HEAP32[$31080 + 4 >> 2] = 1048792;
 HEAP32[$2881 + 8 >> 2] = 54938;
 HEAP16[$2882 >> 1] = 792;
 HEAP16[$2882 + 2 >> 1] = 178;
 HEAP16[$2882 + 4 >> 1] = 3;
 HEAP16[$2882 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2881, $2882);
 $31088 = $2883;
 HEAP32[$31088 >> 2] = 11535111;
 HEAP32[$31088 + 4 >> 2] = 1048792;
 HEAP32[$2883 + 8 >> 2] = 54938;
 HEAP16[$2884 >> 1] = 960;
 HEAP16[$2884 + 2 >> 1] = 178;
 HEAP16[$2884 + 4 >> 1] = 31;
 HEAP16[$2884 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2883, $2884);
 $31096 = $2885;
 HEAP32[$31096 >> 2] = 11535111;
 HEAP32[$31096 + 4 >> 2] = 1048792;
 HEAP32[$2885 + 8 >> 2] = 54938;
 HEAP16[$2886 >> 1] = 775;
 HEAP16[$2886 + 2 >> 1] = 191;
 HEAP16[$2886 + 4 >> 1] = 1;
 HEAP16[$2886 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2885, $2886);
 $31104 = $2887;
 HEAP32[$31104 >> 2] = 11535111;
 HEAP32[$31104 + 4 >> 2] = 1048792;
 HEAP32[$2887 + 8 >> 2] = 54938;
 HEAP16[$2888 >> 1] = 792;
 HEAP16[$2888 + 2 >> 1] = 191;
 HEAP16[$2888 + 4 >> 1] = 199;
 HEAP16[$2888 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2887, $2888);
 $31112 = $2889;
 HEAP32[$31112 >> 2] = 11535111;
 HEAP32[$31112 + 4 >> 2] = 65752;
 HEAP32[$2889 + 8 >> 2] = 65470;
 HEAP16[$2890 >> 1] = 775;
 HEAP16[$2890 + 2 >> 1] = 176;
 HEAP16[$2890 + 4 >> 1] = 1;
 HEAP16[$2890 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2889, $2890);
 $31120 = $2891;
 HEAP32[$31120 >> 2] = 11535111;
 HEAP32[$31120 + 4 >> 2] = 65752;
 HEAP32[$2891 + 8 >> 2] = 65470;
 HEAP16[$2892 >> 1] = 792;
 HEAP16[$2892 + 2 >> 1] = 176;
 HEAP16[$2892 + 4 >> 1] = 199;
 HEAP16[$2892 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2891, $2892);
 $31128 = $2893;
 HEAP32[$31128 >> 2] = 11600647;
 HEAP32[$31128 + 4 >> 2] = 65752;
 HEAP32[$2893 + 8 >> 2] = 63422;
 HEAP16[$2894 >> 1] = 775;
 HEAP16[$2894 + 2 >> 1] = 177;
 HEAP16[$2894 + 4 >> 1] = 1;
 HEAP16[$2894 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2893, $2894);
 $31136 = $2895;
 HEAP32[$31136 >> 2] = 11600647;
 HEAP32[$31136 + 4 >> 2] = 65752;
 HEAP32[$2895 + 8 >> 2] = 63422;
 HEAP16[$2896 >> 1] = 792;
 HEAP16[$2896 + 2 >> 1] = 177;
 HEAP16[$2896 + 4 >> 1] = 199;
 HEAP16[$2896 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2895, $2896);
 $31144 = $2897;
 HEAP32[$31144 >> 2] = 11666183;
 HEAP32[$31144 + 4 >> 2] = 65752;
 HEAP32[$2897 + 8 >> 2] = 63390;
 HEAP16[$2898 >> 1] = 775;
 HEAP16[$2898 + 2 >> 1] = 178;
 HEAP16[$2898 + 4 >> 1] = 1;
 HEAP16[$2898 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2897, $2898);
 $31152 = $2899;
 HEAP32[$31152 >> 2] = 11666183;
 HEAP32[$31152 + 4 >> 2] = 65752;
 HEAP32[$2899 + 8 >> 2] = 63390;
 HEAP16[$2900 >> 1] = 792;
 HEAP16[$2900 + 2 >> 1] = 178;
 HEAP16[$2900 + 4 >> 1] = 3;
 HEAP16[$2900 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2899, $2900);
 $31160 = $2901;
 HEAP32[$31160 >> 2] = 11666183;
 HEAP32[$31160 + 4 >> 2] = 65752;
 HEAP32[$2901 + 8 >> 2] = 63390;
 HEAP16[$2902 >> 1] = 960;
 HEAP16[$2902 + 2 >> 1] = 178;
 HEAP16[$2902 + 4 >> 1] = 31;
 HEAP16[$2902 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2901, $2902);
 $31168 = $2903;
 HEAP32[$31168 >> 2] = 11731719;
 HEAP32[$31168 + 4 >> 2] = 65752;
 HEAP32[$2903 + 8 >> 2] = 63389;
 HEAP16[$2904 >> 1] = 775;
 HEAP16[$2904 + 2 >> 1] = 179;
 HEAP16[$2904 + 4 >> 1] = 1;
 HEAP16[$2904 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2903, $2904);
 $31176 = $2905;
 HEAP32[$31176 >> 2] = 11731719;
 HEAP32[$31176 + 4 >> 2] = 65752;
 HEAP32[$2905 + 8 >> 2] = 63389;
 HEAP16[$2906 >> 1] = 792;
 HEAP16[$2906 + 2 >> 1] = 179;
 HEAP16[$2906 + 4 >> 1] = 3;
 HEAP16[$2906 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2905, $2906);
 $31184 = $2907;
 HEAP32[$31184 >> 2] = 11731719;
 HEAP32[$31184 + 4 >> 2] = 65752;
 HEAP32[$2907 + 8 >> 2] = 63389;
 HEAP16[$2908 >> 1] = 960;
 HEAP16[$2908 + 2 >> 1] = 179;
 HEAP16[$2908 + 4 >> 1] = 31;
 HEAP16[$2908 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2907, $2908);
 $31192 = $2909;
 HEAP32[$31192 >> 2] = 11797255;
 HEAP32[$31192 + 4 >> 2] = 65752;
 HEAP32[$2909 + 8 >> 2] = 63357;
 HEAP16[$2910 >> 1] = 775;
 HEAP16[$2910 + 2 >> 1] = 180;
 HEAP16[$2910 + 4 >> 1] = 1;
 HEAP16[$2910 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2909, $2910);
 $31200 = $2911;
 HEAP32[$31200 >> 2] = 11797255;
 HEAP32[$31200 + 4 >> 2] = 65752;
 HEAP32[$2911 + 8 >> 2] = 63357;
 HEAP16[$2912 >> 1] = 792;
 HEAP16[$2912 + 2 >> 1] = 180;
 HEAP16[$2912 + 4 >> 1] = 3;
 HEAP16[$2912 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2911, $2912);
 $31208 = $2913;
 HEAP32[$31208 >> 2] = 11797255;
 HEAP32[$31208 + 4 >> 2] = 65752;
 HEAP32[$2913 + 8 >> 2] = 63357;
 HEAP16[$2914 >> 1] = 960;
 HEAP16[$2914 + 2 >> 1] = 180;
 HEAP16[$2914 + 4 >> 1] = 31;
 HEAP16[$2914 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2913, $2914);
 $31216 = $2915;
 HEAP32[$31216 >> 2] = 11862791;
 HEAP32[$31216 + 4 >> 2] = 65752;
 HEAP32[$2915 + 8 >> 2] = 61309;
 HEAP16[$2916 >> 1] = 775;
 HEAP16[$2916 + 2 >> 1] = 181;
 HEAP16[$2916 + 4 >> 1] = 1;
 HEAP16[$2916 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2915, $2916);
 $31224 = $2917;
 HEAP32[$31224 >> 2] = 11862791;
 HEAP32[$31224 + 4 >> 2] = 65752;
 HEAP32[$2917 + 8 >> 2] = 61309;
 HEAP16[$2918 >> 1] = 792;
 HEAP16[$2918 + 2 >> 1] = 181;
 HEAP16[$2918 + 4 >> 1] = 3;
 HEAP16[$2918 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2917, $2918);
 $31232 = $2919;
 HEAP32[$31232 >> 2] = 11862791;
 HEAP32[$31232 + 4 >> 2] = 65752;
 HEAP32[$2919 + 8 >> 2] = 61309;
 HEAP16[$2920 >> 1] = 960;
 HEAP16[$2920 + 2 >> 1] = 181;
 HEAP16[$2920 + 4 >> 1] = 31;
 HEAP16[$2920 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2919, $2920);
 $31240 = $2921;
 HEAP32[$31240 >> 2] = 11928327;
 HEAP32[$31240 + 4 >> 2] = 65752;
 HEAP32[$2921 + 8 >> 2] = 61277;
 HEAP16[$2922 >> 1] = 775;
 HEAP16[$2922 + 2 >> 1] = 182;
 HEAP16[$2922 + 4 >> 1] = 1;
 HEAP16[$2922 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2921, $2922);
 $31248 = $2923;
 HEAP32[$31248 >> 2] = 11928327;
 HEAP32[$31248 + 4 >> 2] = 65752;
 HEAP32[$2923 + 8 >> 2] = 61277;
 HEAP16[$2924 >> 1] = 792;
 HEAP16[$2924 + 2 >> 1] = 182;
 HEAP16[$2924 + 4 >> 1] = 3;
 HEAP16[$2924 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2923, $2924);
 $31256 = $2925;
 HEAP32[$31256 >> 2] = 11928327;
 HEAP32[$31256 + 4 >> 2] = 65752;
 HEAP32[$2925 + 8 >> 2] = 61277;
 HEAP16[$2926 >> 1] = 960;
 HEAP16[$2926 + 2 >> 1] = 182;
 HEAP16[$2926 + 4 >> 1] = 31;
 HEAP16[$2926 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2925, $2926);
 $31264 = $2927;
 HEAP32[$31264 >> 2] = 11993863;
 HEAP32[$31264 + 4 >> 2] = 65752;
 HEAP32[$2927 + 8 >> 2] = 61276;
 HEAP16[$2928 >> 1] = 775;
 HEAP16[$2928 + 2 >> 1] = 183;
 HEAP16[$2928 + 4 >> 1] = 1;
 HEAP16[$2928 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2927, $2928);
 $31272 = $2929;
 HEAP32[$31272 >> 2] = 11993863;
 HEAP32[$31272 + 4 >> 2] = 65752;
 HEAP32[$2929 + 8 >> 2] = 61276;
 HEAP16[$2930 >> 1] = 792;
 HEAP16[$2930 + 2 >> 1] = 183;
 HEAP16[$2930 + 4 >> 1] = 3;
 HEAP16[$2930 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2929, $2930);
 $31280 = $2931;
 HEAP32[$31280 >> 2] = 11993863;
 HEAP32[$31280 + 4 >> 2] = 65752;
 HEAP32[$2931 + 8 >> 2] = 61276;
 HEAP16[$2932 >> 1] = 960;
 HEAP16[$2932 + 2 >> 1] = 183;
 HEAP16[$2932 + 4 >> 1] = 31;
 HEAP16[$2932 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2931, $2932);
 $31288 = $2933;
 HEAP32[$31288 >> 2] = 12059399;
 HEAP32[$31288 + 4 >> 2] = 65752;
 HEAP32[$2933 + 8 >> 2] = 61276;
 HEAP16[$2934 >> 1] = 775;
 HEAP16[$2934 + 2 >> 1] = 184;
 HEAP16[$2934 + 4 >> 1] = 1;
 HEAP16[$2934 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2933, $2934);
 $31296 = $2935;
 HEAP32[$31296 >> 2] = 12059399;
 HEAP32[$31296 + 4 >> 2] = 65752;
 HEAP32[$2935 + 8 >> 2] = 61276;
 HEAP16[$2936 >> 1] = 792;
 HEAP16[$2936 + 2 >> 1] = 184;
 HEAP16[$2936 + 4 >> 1] = 3;
 HEAP16[$2936 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2935, $2936);
 $31304 = $2937;
 HEAP32[$31304 >> 2] = 12059399;
 HEAP32[$31304 + 4 >> 2] = 65752;
 HEAP32[$2937 + 8 >> 2] = 61276;
 HEAP16[$2938 >> 1] = 960;
 HEAP16[$2938 + 2 >> 1] = 184;
 HEAP16[$2938 + 4 >> 1] = 31;
 HEAP16[$2938 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2937, $2938);
 $31312 = $2939;
 HEAP32[$31312 >> 2] = 12124935;
 HEAP32[$31312 + 4 >> 2] = 65752;
 HEAP32[$2939 + 8 >> 2] = 61244;
 HEAP16[$2940 >> 1] = 775;
 HEAP16[$2940 + 2 >> 1] = 185;
 HEAP16[$2940 + 4 >> 1] = 1;
 HEAP16[$2940 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2939, $2940);
 $31320 = $2941;
 HEAP32[$31320 >> 2] = 12124935;
 HEAP32[$31320 + 4 >> 2] = 65752;
 HEAP32[$2941 + 8 >> 2] = 61244;
 HEAP16[$2942 >> 1] = 792;
 HEAP16[$2942 + 2 >> 1] = 185;
 HEAP16[$2942 + 4 >> 1] = 3;
 HEAP16[$2942 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2941, $2942);
 $31328 = $2943;
 HEAP32[$31328 >> 2] = 12124935;
 HEAP32[$31328 + 4 >> 2] = 65752;
 HEAP32[$2943 + 8 >> 2] = 61244;
 HEAP16[$2944 >> 1] = 960;
 HEAP16[$2944 + 2 >> 1] = 185;
 HEAP16[$2944 + 4 >> 1] = 31;
 HEAP16[$2944 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2943, $2944);
 $31336 = $2945;
 HEAP32[$31336 >> 2] = 12190471;
 HEAP32[$31336 + 4 >> 2] = 65752;
 HEAP32[$2945 + 8 >> 2] = 59195;
 HEAP16[$2946 >> 1] = 775;
 HEAP16[$2946 + 2 >> 1] = 186;
 HEAP16[$2946 + 4 >> 1] = 1;
 HEAP16[$2946 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2945, $2946);
 $31344 = $2947;
 HEAP32[$31344 >> 2] = 12190471;
 HEAP32[$31344 + 4 >> 2] = 65752;
 HEAP32[$2947 + 8 >> 2] = 59195;
 HEAP16[$2948 >> 1] = 792;
 HEAP16[$2948 + 2 >> 1] = 186;
 HEAP16[$2948 + 4 >> 1] = 3;
 HEAP16[$2948 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2947, $2948);
 $31352 = $2949;
 HEAP32[$31352 >> 2] = 12190471;
 HEAP32[$31352 + 4 >> 2] = 65752;
 HEAP32[$2949 + 8 >> 2] = 59195;
 HEAP16[$2950 >> 1] = 960;
 HEAP16[$2950 + 2 >> 1] = 186;
 HEAP16[$2950 + 4 >> 1] = 31;
 HEAP16[$2950 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2949, $2950);
 $31360 = $2951;
 HEAP32[$31360 >> 2] = 12256007;
 HEAP32[$31360 + 4 >> 2] = 65752;
 HEAP32[$2951 + 8 >> 2] = 59163;
 HEAP16[$2952 >> 1] = 775;
 HEAP16[$2952 + 2 >> 1] = 187;
 HEAP16[$2952 + 4 >> 1] = 1;
 HEAP16[$2952 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2951, $2952);
 $31368 = $2953;
 HEAP32[$31368 >> 2] = 12256007;
 HEAP32[$31368 + 4 >> 2] = 65752;
 HEAP32[$2953 + 8 >> 2] = 59163;
 HEAP16[$2954 >> 1] = 792;
 HEAP16[$2954 + 2 >> 1] = 187;
 HEAP16[$2954 + 4 >> 1] = 3;
 HEAP16[$2954 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2953, $2954);
 $31376 = $2955;
 HEAP32[$31376 >> 2] = 12256007;
 HEAP32[$31376 + 4 >> 2] = 65752;
 HEAP32[$2955 + 8 >> 2] = 59163;
 HEAP16[$2956 >> 1] = 960;
 HEAP16[$2956 + 2 >> 1] = 187;
 HEAP16[$2956 + 4 >> 1] = 31;
 HEAP16[$2956 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2955, $2956);
 $31384 = $2957;
 HEAP32[$31384 >> 2] = 12321543;
 HEAP32[$31384 + 4 >> 2] = 65752;
 HEAP32[$2957 + 8 >> 2] = 59163;
 HEAP16[$2958 >> 1] = 775;
 HEAP16[$2958 + 2 >> 1] = 188;
 HEAP16[$2958 + 4 >> 1] = 1;
 HEAP16[$2958 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2957, $2958);
 $31392 = $2959;
 HEAP32[$31392 >> 2] = 12321543;
 HEAP32[$31392 + 4 >> 2] = 65752;
 HEAP32[$2959 + 8 >> 2] = 59163;
 HEAP16[$2960 >> 1] = 792;
 HEAP16[$2960 + 2 >> 1] = 188;
 HEAP16[$2960 + 4 >> 1] = 3;
 HEAP16[$2960 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2959, $2960);
 $31400 = $2961;
 HEAP32[$31400 >> 2] = 12321543;
 HEAP32[$31400 + 4 >> 2] = 65752;
 HEAP32[$2961 + 8 >> 2] = 59163;
 HEAP16[$2962 >> 1] = 960;
 HEAP16[$2962 + 2 >> 1] = 188;
 HEAP16[$2962 + 4 >> 1] = 31;
 HEAP16[$2962 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2961, $2962);
 $31408 = $2963;
 HEAP32[$31408 >> 2] = 12387079;
 HEAP32[$31408 + 4 >> 2] = 65752;
 HEAP32[$2963 + 8 >> 2] = 59131;
 HEAP16[$2964 >> 1] = 775;
 HEAP16[$2964 + 2 >> 1] = 189;
 HEAP16[$2964 + 4 >> 1] = 1;
 HEAP16[$2964 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2963, $2964);
 $31416 = $2965;
 HEAP32[$31416 >> 2] = 12387079;
 HEAP32[$31416 + 4 >> 2] = 65752;
 HEAP32[$2965 + 8 >> 2] = 59131;
 HEAP16[$2966 >> 1] = 792;
 HEAP16[$2966 + 2 >> 1] = 189;
 HEAP16[$2966 + 4 >> 1] = 3;
 HEAP16[$2966 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2965, $2966);
 $31424 = $2967;
 HEAP32[$31424 >> 2] = 12387079;
 HEAP32[$31424 + 4 >> 2] = 65752;
 HEAP32[$2967 + 8 >> 2] = 59131;
 HEAP16[$2968 >> 1] = 960;
 HEAP16[$2968 + 2 >> 1] = 189;
 HEAP16[$2968 + 4 >> 1] = 31;
 HEAP16[$2968 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2967, $2968);
 $31432 = $2969;
 HEAP32[$31432 >> 2] = 12452615;
 HEAP32[$31432 + 4 >> 2] = 65752;
 HEAP32[$2969 + 8 >> 2] = 57082;
 HEAP16[$2970 >> 1] = 775;
 HEAP16[$2970 + 2 >> 1] = 190;
 HEAP16[$2970 + 4 >> 1] = 1;
 HEAP16[$2970 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2969, $2970);
 $31440 = $2971;
 HEAP32[$31440 >> 2] = 12452615;
 HEAP32[$31440 + 4 >> 2] = 65752;
 HEAP32[$2971 + 8 >> 2] = 57082;
 HEAP16[$2972 >> 1] = 792;
 HEAP16[$2972 + 2 >> 1] = 190;
 HEAP16[$2972 + 4 >> 1] = 3;
 HEAP16[$2972 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2971, $2972);
 $31448 = $2973;
 HEAP32[$31448 >> 2] = 12452615;
 HEAP32[$31448 + 4 >> 2] = 65752;
 HEAP32[$2973 + 8 >> 2] = 57082;
 HEAP16[$2974 >> 1] = 960;
 HEAP16[$2974 + 2 >> 1] = 190;
 HEAP16[$2974 + 4 >> 1] = 31;
 HEAP16[$2974 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2973, $2974);
 $31456 = $2975;
 HEAP32[$31456 >> 2] = 12518151;
 HEAP32[$31456 + 4 >> 2] = 65752;
 HEAP32[$2975 + 8 >> 2] = 57050;
 HEAP16[$2976 >> 1] = 775;
 HEAP16[$2976 + 2 >> 1] = 191;
 HEAP16[$2976 + 4 >> 1] = 1;
 HEAP16[$2976 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2975, $2976);
 $31464 = $2977;
 HEAP32[$31464 >> 2] = 12518151;
 HEAP32[$31464 + 4 >> 2] = 65752;
 HEAP32[$2977 + 8 >> 2] = 57050;
 HEAP16[$2978 >> 1] = 792;
 HEAP16[$2978 + 2 >> 1] = 191;
 HEAP16[$2978 + 4 >> 1] = 199;
 HEAP16[$2978 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2977, $2978);
 $31472 = $2979;
 HEAP32[$31472 >> 2] = 25428974;
 HEAP32[$31472 + 4 >> 2] = 18087952;
 HEAP8[$2979 + 8 >> 0] = -16;
 HEAP32[$2979 + 12 >> 2] = 65535;
 HEAP32[$2979 + 16 >> 2] = 54937;
 HEAP8[$2979 + 20 >> 0] = 1;
 HEAP8[$2979 + 21 >> 0] = 1;
 HEAP8[$2979 + 22 >> 0] = 3;
 HEAP8[$2979 + 23 >> 0] = -86;
 $31483 = $2979 + 24 | 0;
 HEAP32[$31483 >> 2] = 0;
 HEAP16[$31483 + 4 >> 1] = 0;
 HEAP8[$31483 + 6 >> 0] = 0;
 HEAP16[$2980 >> 1] = 1006;
 HEAP16[$2980 + 2 >> 1] = 388;
 HEAP16[$2980 + 4 >> 1] = 16;
 HEAP16[$2980 + 6 >> 1] = 276;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $2979, $2980);
 $31487 = $2981;
 HEAP32[$31487 >> 2] = 11600893;
 HEAP32[$31487 + 4 >> 2] = 13828097;
 HEAP32[$2981 + 8 >> 2] = 16904;
 HEAP16[$2982 >> 1] = 1021;
 HEAP16[$2982 + 2 >> 1] = 177;
 HEAP16[$2982 + 4 >> 1] = 1;
 HEAP16[$2982 + 6 >> 1] = 211;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2981, $2982);
 $31495 = $2983;
 HEAP32[$31495 >> 2] = 25363438;
 HEAP32[$31495 + 4 >> 2] = 65551;
 HEAP32[$2983 + 8 >> 2] = 16904;
 HEAP16[$2984 >> 1] = 1006;
 HEAP16[$2984 + 2 >> 1] = 387;
 HEAP16[$2984 + 4 >> 1] = 15;
 HEAP16[$2984 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2983, $2984);
 $31503 = $2985;
 HEAP32[$31503 >> 2] = 11600878;
 HEAP32[$31503 + 4 >> 2] = 13762561;
 HEAP32[$2985 + 8 >> 2] = 54937;
 HEAP16[$2986 >> 1] = 1006;
 HEAP16[$2986 + 2 >> 1] = 177;
 HEAP16[$2986 + 4 >> 1] = 1;
 HEAP16[$2986 + 6 >> 1] = 210;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2985, $2986);
 $31511 = $2987;
 HEAP32[$31511 >> 2] = 11600879;
 HEAP32[$31511 + 4 >> 2] = 65550;
 HEAP32[$2987 + 8 >> 2] = 54937;
 HEAP16[$2988 >> 1] = 1007;
 HEAP16[$2988 + 2 >> 1] = 177;
 HEAP16[$2988 + 4 >> 1] = 14;
 HEAP16[$2988 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2987, $2988);
 $31519 = $2989;
 HEAP32[$31519 >> 2] = 11666428;
 HEAP32[$31519 + 4 >> 2] = 13697025;
 HEAP32[$2989 + 8 >> 2] = 33808;
 HEAP16[$2990 >> 1] = 1020;
 HEAP16[$2990 + 2 >> 1] = 178;
 HEAP16[$2990 + 4 >> 1] = 1;
 HEAP16[$2990 + 6 >> 1] = 209;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2989, $2990);
 $31527 = $2991;
 HEAP32[$31527 >> 2] = 25297903;
 HEAP32[$31527 + 4 >> 2] = 65549;
 HEAP32[$2991 + 8 >> 2] = 33808;
 HEAP16[$2992 >> 1] = 1007;
 HEAP16[$2992 + 2 >> 1] = 386;
 HEAP16[$2992 + 4 >> 1] = 13;
 HEAP16[$2992 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2991, $2992);
 $31535 = $2993;
 HEAP32[$31535 >> 2] = 11666415;
 HEAP32[$31535 + 4 >> 2] = 13631489;
 HEAP32[$2993 + 8 >> 2] = 65535;
 HEAP16[$2994 >> 1] = 1007;
 HEAP16[$2994 + 2 >> 1] = 178;
 HEAP16[$2994 + 4 >> 1] = 1;
 HEAP16[$2994 + 6 >> 1] = 208;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2993, $2994);
 $31543 = $2995;
 HEAP32[$31543 >> 2] = 11666416;
 HEAP32[$31543 + 4 >> 2] = 65548;
 HEAP32[$2995 + 8 >> 2] = 65535;
 HEAP16[$2996 >> 1] = 1008;
 HEAP16[$2996 + 2 >> 1] = 178;
 HEAP16[$2996 + 4 >> 1] = 12;
 HEAP16[$2996 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2995, $2996);
 $31551 = $2997;
 HEAP32[$31551 >> 2] = 11731952;
 HEAP32[$31551 + 4 >> 2] = 13565964;
 HEAP32[$2997 + 8 >> 2] = 54937;
 HEAP16[$2998 >> 1] = 1008;
 HEAP16[$2998 + 2 >> 1] = 179;
 HEAP16[$2998 + 4 >> 1] = 12;
 HEAP16[$2998 + 6 >> 1] = 207;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $2997, $2998);
 $31559 = $2999;
 HEAP32[$31559 >> 2] = 25428974;
 HEAP32[$31559 + 4 >> 2] = 18087952;
 HEAP8[$2999 + 8 >> 0] = -16;
 HEAP32[$2999 + 12 >> 2] = 65535;
 HEAP32[$2999 + 16 >> 2] = 54937;
 HEAP8[$2999 + 20 >> 0] = 1;
 HEAP8[$2999 + 21 >> 0] = 1;
 HEAP8[$2999 + 22 >> 0] = 3;
 HEAP8[$2999 + 23 >> 0] = -86;
 $31570 = $2999 + 24 | 0;
 HEAP32[$31570 >> 2] = 0;
 HEAP16[$31570 + 4 >> 1] = 0;
 HEAP8[$31570 + 6 >> 0] = 0;
 HEAP16[$3000 >> 1] = 1006;
 HEAP16[$3000 + 2 >> 1] = 388;
 HEAP16[$3000 + 4 >> 1] = 16;
 HEAP16[$3000 + 6 >> 1] = 276;
 __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($front, $2999, $3000);
 $31574 = $3001;
 HEAP32[$31574 >> 2] = 11600893;
 HEAP32[$31574 + 4 >> 2] = 13828097;
 HEAP32[$3001 + 8 >> 2] = 16904;
 HEAP16[$3002 >> 1] = 1021;
 HEAP16[$3002 + 2 >> 1] = 177;
 HEAP16[$3002 + 4 >> 1] = 1;
 HEAP16[$3002 + 6 >> 1] = 211;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3001, $3002);
 $31582 = $3003;
 HEAP32[$31582 >> 2] = 25363438;
 HEAP32[$31582 + 4 >> 2] = 65551;
 HEAP32[$3003 + 8 >> 2] = 16904;
 HEAP16[$3004 >> 1] = 1006;
 HEAP16[$3004 + 2 >> 1] = 387;
 HEAP16[$3004 + 4 >> 1] = 15;
 HEAP16[$3004 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3003, $3004);
 $31590 = $3005;
 HEAP32[$31590 >> 2] = 11600878;
 HEAP32[$31590 + 4 >> 2] = 13762561;
 HEAP32[$3005 + 8 >> 2] = 54937;
 HEAP16[$3006 >> 1] = 1006;
 HEAP16[$3006 + 2 >> 1] = 177;
 HEAP16[$3006 + 4 >> 1] = 1;
 HEAP16[$3006 + 6 >> 1] = 210;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3005, $3006);
 $31598 = $3007;
 HEAP32[$31598 >> 2] = 11600879;
 HEAP32[$31598 + 4 >> 2] = 65550;
 HEAP32[$3007 + 8 >> 2] = 54937;
 HEAP16[$3008 >> 1] = 1007;
 HEAP16[$3008 + 2 >> 1] = 177;
 HEAP16[$3008 + 4 >> 1] = 14;
 HEAP16[$3008 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3007, $3008);
 $31606 = $3009;
 HEAP32[$31606 >> 2] = 11666428;
 HEAP32[$31606 + 4 >> 2] = 13697025;
 HEAP32[$3009 + 8 >> 2] = 33808;
 HEAP16[$3010 >> 1] = 1020;
 HEAP16[$3010 + 2 >> 1] = 178;
 HEAP16[$3010 + 4 >> 1] = 1;
 HEAP16[$3010 + 6 >> 1] = 209;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3009, $3010);
 $31614 = $3011;
 HEAP32[$31614 >> 2] = 25297903;
 HEAP32[$31614 + 4 >> 2] = 65549;
 HEAP32[$3011 + 8 >> 2] = 33808;
 HEAP16[$3012 >> 1] = 1007;
 HEAP16[$3012 + 2 >> 1] = 386;
 HEAP16[$3012 + 4 >> 1] = 13;
 HEAP16[$3012 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3011, $3012);
 $31622 = $3013;
 HEAP32[$31622 >> 2] = 11666415;
 HEAP32[$31622 + 4 >> 2] = 13631489;
 HEAP32[$3013 + 8 >> 2] = 65535;
 HEAP16[$3014 >> 1] = 1007;
 HEAP16[$3014 + 2 >> 1] = 178;
 HEAP16[$3014 + 4 >> 1] = 1;
 HEAP16[$3014 + 6 >> 1] = 208;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3013, $3014);
 $31630 = $3015;
 HEAP32[$31630 >> 2] = 11666416;
 HEAP32[$31630 + 4 >> 2] = 65548;
 HEAP32[$3015 + 8 >> 2] = 65535;
 HEAP16[$3016 >> 1] = 1008;
 HEAP16[$3016 + 2 >> 1] = 178;
 HEAP16[$3016 + 4 >> 1] = 12;
 HEAP16[$3016 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3015, $3016);
 $31638 = $3017;
 HEAP32[$31638 >> 2] = 11731952;
 HEAP32[$31638 + 4 >> 2] = 13565964;
 HEAP32[$3017 + 8 >> 2] = 54937;
 HEAP16[$3018 >> 1] = 1008;
 HEAP16[$3018 + 2 >> 1] = 179;
 HEAP16[$3018 + 4 >> 1] = 12;
 HEAP16[$3018 + 6 >> 1] = 207;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3017, $3018);
 $31646 = $3019;
 HEAP32[$31646 >> 2] = 44564681;
 HEAP32[$31646 + 4 >> 2] = 1441892;
 HEAP32[$3019 + 8 >> 2] = 63422;
 HEAP16[$3020 >> 1] = 201;
 HEAP16[$3020 + 2 >> 1] = 680;
 HEAP16[$3020 + 4 >> 1] = 100;
 HEAP16[$3020 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3019, $3020);
 $31654 = $3021;
 HEAP32[$31654 >> 2] = 44564681;
 HEAP32[$31654 + 4 >> 2] = 1441892;
 HEAP32[$3021 + 8 >> 2] = 63422;
 HEAP16[$3022 >> 1] = 201;
 HEAP16[$3022 + 2 >> 1] = 683;
 HEAP16[$3022 + 4 >> 1] = 3;
 HEAP16[$3022 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3021, $3022);
 $31662 = $3023;
 HEAP32[$31662 >> 2] = 44564681;
 HEAP32[$31662 + 4 >> 2] = 1441892;
 HEAP32[$3023 + 8 >> 2] = 63422;
 HEAP16[$3024 >> 1] = 220;
 HEAP16[$3024 + 2 >> 1] = 683;
 HEAP16[$3024 + 4 >> 1] = 81;
 HEAP16[$3024 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3023, $3024);
 $31670 = $3025;
 HEAP32[$31670 >> 2] = 44564681;
 HEAP32[$31670 + 4 >> 2] = 1441892;
 HEAP32[$3025 + 8 >> 2] = 63422;
 HEAP16[$3026 >> 1] = 201;
 HEAP16[$3026 + 2 >> 1] = 685;
 HEAP16[$3026 + 4 >> 1] = 3;
 HEAP16[$3026 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3025, $3026);
 $31678 = $3027;
 HEAP32[$31678 >> 2] = 44564681;
 HEAP32[$31678 + 4 >> 2] = 1441892;
 HEAP32[$3027 + 8 >> 2] = 63422;
 HEAP16[$3028 >> 1] = 220;
 HEAP16[$3028 + 2 >> 1] = 685;
 HEAP16[$3028 + 4 >> 1] = 3;
 HEAP16[$3028 + 6 >> 1] = 13;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3027, $3028);
 $31686 = $3029;
 HEAP32[$31686 >> 2] = 44564681;
 HEAP32[$31686 + 4 >> 2] = 1441892;
 HEAP32[$3029 + 8 >> 2] = 63422;
 HEAP16[$3030 >> 1] = 201;
 HEAP16[$3030 + 2 >> 1] = 698;
 HEAP16[$3030 + 4 >> 1] = 3;
 HEAP16[$3030 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3029, $3030);
 $31694 = $3031;
 HEAP32[$31694 >> 2] = 44564681;
 HEAP32[$31694 + 4 >> 2] = 1441892;
 HEAP32[$3031 + 8 >> 2] = 63422;
 HEAP16[$3032 >> 1] = 220;
 HEAP16[$3032 + 2 >> 1] = 698;
 HEAP16[$3032 + 4 >> 1] = 81;
 HEAP16[$3032 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3031, $3032);
 $31702 = $3033;
 HEAP32[$31702 >> 2] = 44564681;
 HEAP32[$31702 + 4 >> 2] = 1441892;
 HEAP32[$3033 + 8 >> 2] = 63422;
 HEAP16[$3034 >> 1] = 201;
 HEAP16[$3034 + 2 >> 1] = 699;
 HEAP16[$3034 + 4 >> 1] = 100;
 HEAP16[$3034 + 6 >> 1] = 3;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3033, $3034);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 223;
 HEAP16[$bitmapData + 2 >> 1] = 685;
 HEAP16[$bitmapData + 4 >> 1] = 565;
 HEAP16[$bitmapData + 6 >> 1] = 697;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 8996) label = 4577; else {
  $31715 = HEAP32[918918] | 0;
  if (($31715 | 0) == (HEAP32[918916] | 0)) label = 4577; else {
   $$lcssa$i$i3095 = 3675672;
   $$lcssa8$i$i3094 = $31715;
   label = 4578;
  }
 }
 do if ((label | 0) == 4577) {
  if ((HEAP32[918925] | 0) >>> 0 >= 8996) {
   $31722 = HEAP32[918924] | 0;
   if (($31722 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3095 = 3675696;
    $$lcssa8$i$i3094 = $31722;
    label = 4578;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 8996) {
   $31727 = HEAP32[918930] | 0;
   if (($31727 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3095 = 3675720;
    $$lcssa8$i$i3094 = $31727;
    label = 4578;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 8996) {
   $31732 = HEAP32[918936] | 0;
   if (($31732 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3095 = 3675744;
    $$lcssa8$i$i3094 = $31732;
    label = 4578;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 8996) {
   $31737 = HEAP32[918942] | 0;
   if (($31737 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3095 = 3675768;
    $$lcssa8$i$i3094 = $31737;
    label = 4578;
    break;
   }
  }
  $$3$i$i3096 = __Znwj(8996) | 0;
 } while (0);
 if ((label | 0) == 4578) {
  $31720 = $$lcssa8$i$i3094 + -4 | 0;
  HEAP32[$$lcssa$i$i3095 >> 2] = $31720;
  $$3$i$i3096 = HEAP32[$31720 >> 2] | 0;
 }
 $31741 = $$3$i$i3096 + 52 | 0;
 HEAP16[$$3$i$i3096 >> 1] = 344;
 HEAP16[$$3$i$i3096 + 2 >> 1] = 13;
 HEAP8[$$3$i$i3096 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3096 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3096 + 8 >> 2] = 688;
 HEAP32[$$3$i$i3096 + 12 >> 2] = 8944;
 HEAP32[$$3$i$i3096 + 16 >> 2] = $31741;
 HEAP32[$$3$i$i3096 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3096 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3096 + 48 >> 0] = 0;
 HEAP32[$3035 >> 2] = $$3$i$i3096;
 _memcpy($31741 | 0, 3012856, 688) | 0;
 _memcpy($$3$i$i3096 + 740 | 0, 3013544, 688) | 0;
 _memcpy($$3$i$i3096 + 1428 | 0, 3014232, 688) | 0;
 _memcpy($$3$i$i3096 + 2116 | 0, 3014920, 688) | 0;
 _memcpy($$3$i$i3096 + 2804 | 0, 3015608, 688) | 0;
 _memcpy($$3$i$i3096 + 3492 | 0, 3016296, 688) | 0;
 _memcpy($$3$i$i3096 + 4180 | 0, 3016984, 688) | 0;
 _memcpy($$3$i$i3096 + 4868 | 0, 3017672, 688) | 0;
 _memcpy($$3$i$i3096 + 5556 | 0, 3018360, 688) | 0;
 _memcpy($$3$i$i3096 + 6244 | 0, 3019048, 688) | 0;
 _memcpy($$3$i$i3096 + 6932 | 0, 3019736, 688) | 0;
 _memcpy($$3$i$i3096 + 7620 | 0, 3020424, 688) | 0;
 _memcpy($$3$i$i3096 + 8308 | 0, 3021112, 688) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3035);
 if ($$3$i$i3096 | 0) {
  $31764 = $$3$i$i3096 + 5 | 0;
  $31766 = (HEAP8[$31764 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$31764 >> 0] = $31766;
  if (!($31766 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3096);
  HEAP32[$3035 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 201;
 HEAP16[$bitmapData + 2 >> 1] = 680;
 HEAP16[$bitmapData + 4 >> 1] = 300;
 HEAP16[$bitmapData + 6 >> 1] = 680;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 252) label = 4593; else {
  $31773 = HEAP32[918918] | 0;
  if (($31773 | 0) == (HEAP32[918916] | 0)) label = 4593; else {
   $$lcssa$i$i3083 = 3675672;
   $$lcssa8$i$i3082 = $31773;
   label = 4594;
  }
 }
 do if ((label | 0) == 4593) {
  if ((HEAP32[918925] | 0) >>> 0 >= 252) {
   $31780 = HEAP32[918924] | 0;
   if (($31780 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3083 = 3675696;
    $$lcssa8$i$i3082 = $31780;
    label = 4594;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 252) {
   $31785 = HEAP32[918930] | 0;
   if (($31785 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3083 = 3675720;
    $$lcssa8$i$i3082 = $31785;
    label = 4594;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 252) {
   $31790 = HEAP32[918936] | 0;
   if (($31790 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3083 = 3675744;
    $$lcssa8$i$i3082 = $31790;
    label = 4594;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 252) {
   $31795 = HEAP32[918942] | 0;
   if (($31795 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3083 = 3675768;
    $$lcssa8$i$i3082 = $31795;
    label = 4594;
    break;
   }
  }
  $$3$i$i3084 = __Znwj(252) | 0;
 } while (0);
 if ((label | 0) == 4594) {
  $31778 = $$lcssa8$i$i3082 + -4 | 0;
  HEAP32[$$lcssa$i$i3083 >> 2] = $31778;
  $$3$i$i3084 = HEAP32[$31778 >> 2] | 0;
 }
 $31799 = $$3$i$i3084 + 52 | 0;
 HEAP16[$$3$i$i3084 >> 1] = 100;
 HEAP16[$$3$i$i3084 + 2 >> 1] = 1;
 HEAP8[$$3$i$i3084 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3084 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3084 + 8 >> 2] = 200;
 HEAP32[$$3$i$i3084 + 12 >> 2] = 200;
 HEAP32[$$3$i$i3084 + 16 >> 2] = $31799;
 HEAP32[$$3$i$i3084 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3084 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3084 + 48 >> 0] = 0;
 HEAP32[$3036 >> 2] = $$3$i$i3084;
 _memcpy($31799 | 0, 3021800, 200) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3036);
 if ($$3$i$i3084 | 0) {
  $31810 = $$3$i$i3084 + 5 | 0;
  $31812 = (HEAP8[$31810 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$31810 >> 0] = $31812;
  if (!($31812 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3084);
  HEAP32[$3036 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 204;
 HEAP16[$bitmapData + 2 >> 1] = 683;
 HEAP16[$bitmapData + 4 >> 1] = 219;
 HEAP16[$bitmapData + 6 >> 1] = 698;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 564) label = 4609; else {
  $31819 = HEAP32[918918] | 0;
  if (($31819 | 0) == (HEAP32[918916] | 0)) label = 4609; else {
   $$lcssa$i$i3071 = 3675672;
   $$lcssa8$i$i3070 = $31819;
   label = 4610;
  }
 }
 do if ((label | 0) == 4609) {
  if ((HEAP32[918925] | 0) >>> 0 >= 564) {
   $31826 = HEAP32[918924] | 0;
   if (($31826 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3071 = 3675696;
    $$lcssa8$i$i3070 = $31826;
    label = 4610;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 564) {
   $31831 = HEAP32[918930] | 0;
   if (($31831 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3071 = 3675720;
    $$lcssa8$i$i3070 = $31831;
    label = 4610;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 564) {
   $31836 = HEAP32[918936] | 0;
   if (($31836 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3071 = 3675744;
    $$lcssa8$i$i3070 = $31836;
    label = 4610;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 564) {
   $31841 = HEAP32[918942] | 0;
   if (($31841 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3071 = 3675768;
    $$lcssa8$i$i3070 = $31841;
    label = 4610;
    break;
   }
  }
  $$3$i$i3072 = __Znwj(564) | 0;
 } while (0);
 if ((label | 0) == 4610) {
  $31824 = $$lcssa8$i$i3070 + -4 | 0;
  HEAP32[$$lcssa$i$i3071 >> 2] = $31824;
  $$3$i$i3072 = HEAP32[$31824 >> 2] | 0;
 }
 $31845 = $$3$i$i3072 + 52 | 0;
 HEAP16[$$3$i$i3072 >> 1] = 16;
 HEAP16[$$3$i$i3072 + 2 >> 1] = 16;
 HEAP8[$$3$i$i3072 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3072 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3072 + 8 >> 2] = 32;
 HEAP32[$$3$i$i3072 + 12 >> 2] = 512;
 HEAP32[$$3$i$i3072 + 16 >> 2] = $31845;
 HEAP32[$$3$i$i3072 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3072 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3072 + 48 >> 0] = 0;
 HEAP32[$3037 >> 2] = $$3$i$i3072;
 dest = $31845;
 src = 3022e3;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 84 | 0;
 src = 3022032;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 116 | 0;
 src = 3022064;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 148 | 0;
 src = 3022096;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 180 | 0;
 src = 3022128;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 212 | 0;
 src = 3022160;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 244 | 0;
 src = 3022192;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 276 | 0;
 src = 3022224;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 308 | 0;
 src = 3022256;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 340 | 0;
 src = 3022288;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 372 | 0;
 src = 3022320;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 404 | 0;
 src = 3022352;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 436 | 0;
 src = 3022384;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 468 | 0;
 src = 3022416;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 500 | 0;
 src = 3022448;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i3072 + 532 | 0;
 src = 3022480;
 stop = dest + 32 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3037);
 if ($$3$i$i3072 | 0) {
  $31871 = $$3$i$i3072 + 5 | 0;
  $31873 = (HEAP8[$31871 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$31871 >> 0] = $31873;
  if (!($31873 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3072);
  HEAP32[$3037 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 172;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 174;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4756) label = 4625; else {
  $31880 = HEAP32[918918] | 0;
  if (($31880 | 0) == (HEAP32[918916] | 0)) label = 4625; else {
   $$lcssa$i$i3059 = 3675672;
   $$lcssa8$i$i3058 = $31880;
   label = 4626;
  }
 }
 do if ((label | 0) == 4625) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4756) {
   $31887 = HEAP32[918924] | 0;
   if (($31887 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3059 = 3675696;
    $$lcssa8$i$i3058 = $31887;
    label = 4626;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4756) {
   $31892 = HEAP32[918930] | 0;
   if (($31892 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3059 = 3675720;
    $$lcssa8$i$i3058 = $31892;
    label = 4626;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4756) {
   $31897 = HEAP32[918936] | 0;
   if (($31897 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3059 = 3675744;
    $$lcssa8$i$i3058 = $31897;
    label = 4626;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4756) {
   $31902 = HEAP32[918942] | 0;
   if (($31902 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3059 = 3675768;
    $$lcssa8$i$i3058 = $31902;
    label = 4626;
    break;
   }
  }
  $$3$i$i3060 = __Znwj(4756) | 0;
 } while (0);
 if ((label | 0) == 4626) {
  $31885 = $$lcssa8$i$i3058 + -4 | 0;
  HEAP32[$$lcssa$i$i3059 >> 2] = $31885;
  $$3$i$i3060 = HEAP32[$31885 >> 2] | 0;
 }
 $31906 = $$3$i$i3060 + 52 | 0;
 HEAP16[$$3$i$i3060 >> 1] = 784;
 HEAP16[$$3$i$i3060 + 2 >> 1] = 3;
 HEAP8[$$3$i$i3060 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3060 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3060 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3060 + 12 >> 2] = 4704;
 HEAP32[$$3$i$i3060 + 16 >> 2] = $31906;
 HEAP32[$$3$i$i3060 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3060 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3060 + 48 >> 0] = 0;
 HEAP32[$3038 >> 2] = $$3$i$i3060;
 _memcpy($31906 | 0, 3022512, 1568) | 0;
 _memcpy($$3$i$i3060 + 1620 | 0, 3024080, 1568) | 0;
 _memcpy($$3$i$i3060 + 3188 | 0, 3025648, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3038);
 if ($$3$i$i3060 | 0) {
  $31919 = $$3$i$i3060 + 5 | 0;
  $31921 = (HEAP8[$31919 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$31919 >> 0] = $31921;
  if (!($31921 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3060);
  HEAP32[$3038 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 175;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 177;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4756) label = 4641; else {
  $31928 = HEAP32[918918] | 0;
  if (($31928 | 0) == (HEAP32[918916] | 0)) label = 4641; else {
   $$lcssa$i$i3047 = 3675672;
   $$lcssa8$i$i3046 = $31928;
   label = 4642;
  }
 }
 do if ((label | 0) == 4641) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4756) {
   $31935 = HEAP32[918924] | 0;
   if (($31935 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3047 = 3675696;
    $$lcssa8$i$i3046 = $31935;
    label = 4642;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4756) {
   $31940 = HEAP32[918930] | 0;
   if (($31940 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3047 = 3675720;
    $$lcssa8$i$i3046 = $31940;
    label = 4642;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4756) {
   $31945 = HEAP32[918936] | 0;
   if (($31945 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3047 = 3675744;
    $$lcssa8$i$i3046 = $31945;
    label = 4642;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4756) {
   $31950 = HEAP32[918942] | 0;
   if (($31950 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3047 = 3675768;
    $$lcssa8$i$i3046 = $31950;
    label = 4642;
    break;
   }
  }
  $$3$i$i3048 = __Znwj(4756) | 0;
 } while (0);
 if ((label | 0) == 4642) {
  $31933 = $$lcssa8$i$i3046 + -4 | 0;
  HEAP32[$$lcssa$i$i3047 >> 2] = $31933;
  $$3$i$i3048 = HEAP32[$31933 >> 2] | 0;
 }
 $31954 = $$3$i$i3048 + 52 | 0;
 HEAP16[$$3$i$i3048 >> 1] = 784;
 HEAP16[$$3$i$i3048 + 2 >> 1] = 3;
 HEAP8[$$3$i$i3048 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3048 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3048 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3048 + 12 >> 2] = 4704;
 HEAP32[$$3$i$i3048 + 16 >> 2] = $31954;
 HEAP32[$$3$i$i3048 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3048 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3048 + 48 >> 0] = 0;
 HEAP32[$3039 >> 2] = $$3$i$i3048;
 _memcpy($31954 | 0, 3027216, 1568) | 0;
 _memcpy($$3$i$i3048 + 1620 | 0, 3028784, 1568) | 0;
 _memcpy($$3$i$i3048 + 3188 | 0, 3030352, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3039);
 if ($$3$i$i3048 | 0) {
  $31967 = $$3$i$i3048 + 5 | 0;
  $31969 = (HEAP8[$31967 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$31967 >> 0] = $31969;
  if (!($31969 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3048);
  HEAP32[$3039 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 178;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 180;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4756) label = 4657; else {
  $31976 = HEAP32[918918] | 0;
  if (($31976 | 0) == (HEAP32[918916] | 0)) label = 4657; else {
   $$lcssa$i$i3035 = 3675672;
   $$lcssa8$i$i3034 = $31976;
   label = 4658;
  }
 }
 do if ((label | 0) == 4657) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4756) {
   $31983 = HEAP32[918924] | 0;
   if (($31983 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3035 = 3675696;
    $$lcssa8$i$i3034 = $31983;
    label = 4658;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4756) {
   $31988 = HEAP32[918930] | 0;
   if (($31988 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3035 = 3675720;
    $$lcssa8$i$i3034 = $31988;
    label = 4658;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4756) {
   $31993 = HEAP32[918936] | 0;
   if (($31993 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3035 = 3675744;
    $$lcssa8$i$i3034 = $31993;
    label = 4658;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4756) {
   $31998 = HEAP32[918942] | 0;
   if (($31998 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3035 = 3675768;
    $$lcssa8$i$i3034 = $31998;
    label = 4658;
    break;
   }
  }
  $$3$i$i3036 = __Znwj(4756) | 0;
 } while (0);
 if ((label | 0) == 4658) {
  $31981 = $$lcssa8$i$i3034 + -4 | 0;
  HEAP32[$$lcssa$i$i3035 >> 2] = $31981;
  $$3$i$i3036 = HEAP32[$31981 >> 2] | 0;
 }
 $32002 = $$3$i$i3036 + 52 | 0;
 HEAP16[$$3$i$i3036 >> 1] = 784;
 HEAP16[$$3$i$i3036 + 2 >> 1] = 3;
 HEAP8[$$3$i$i3036 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3036 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3036 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3036 + 12 >> 2] = 4704;
 HEAP32[$$3$i$i3036 + 16 >> 2] = $32002;
 HEAP32[$$3$i$i3036 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3036 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3036 + 48 >> 0] = 0;
 HEAP32[$3040 >> 2] = $$3$i$i3036;
 _memcpy($32002 | 0, 3031920, 1568) | 0;
 _memcpy($$3$i$i3036 + 1620 | 0, 3033488, 1568) | 0;
 _memcpy($$3$i$i3036 + 3188 | 0, 3035056, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3040);
 if ($$3$i$i3036 | 0) {
  $32015 = $$3$i$i3036 + 5 | 0;
  $32017 = (HEAP8[$32015 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32015 >> 0] = $32017;
  if (!($32017 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3036);
  HEAP32[$3040 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 181;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 183;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4756) label = 4673; else {
  $32024 = HEAP32[918918] | 0;
  if (($32024 | 0) == (HEAP32[918916] | 0)) label = 4673; else {
   $$lcssa$i$i3023 = 3675672;
   $$lcssa8$i$i3022 = $32024;
   label = 4674;
  }
 }
 do if ((label | 0) == 4673) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4756) {
   $32031 = HEAP32[918924] | 0;
   if (($32031 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3023 = 3675696;
    $$lcssa8$i$i3022 = $32031;
    label = 4674;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4756) {
   $32036 = HEAP32[918930] | 0;
   if (($32036 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3023 = 3675720;
    $$lcssa8$i$i3022 = $32036;
    label = 4674;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4756) {
   $32041 = HEAP32[918936] | 0;
   if (($32041 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3023 = 3675744;
    $$lcssa8$i$i3022 = $32041;
    label = 4674;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4756) {
   $32046 = HEAP32[918942] | 0;
   if (($32046 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3023 = 3675768;
    $$lcssa8$i$i3022 = $32046;
    label = 4674;
    break;
   }
  }
  $$3$i$i3024 = __Znwj(4756) | 0;
 } while (0);
 if ((label | 0) == 4674) {
  $32029 = $$lcssa8$i$i3022 + -4 | 0;
  HEAP32[$$lcssa$i$i3023 >> 2] = $32029;
  $$3$i$i3024 = HEAP32[$32029 >> 2] | 0;
 }
 $32050 = $$3$i$i3024 + 52 | 0;
 HEAP16[$$3$i$i3024 >> 1] = 784;
 HEAP16[$$3$i$i3024 + 2 >> 1] = 3;
 HEAP8[$$3$i$i3024 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3024 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3024 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3024 + 12 >> 2] = 4704;
 HEAP32[$$3$i$i3024 + 16 >> 2] = $32050;
 HEAP32[$$3$i$i3024 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3024 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3024 + 48 >> 0] = 0;
 HEAP32[$3041 >> 2] = $$3$i$i3024;
 _memcpy($32050 | 0, 3036624, 1568) | 0;
 _memcpy($$3$i$i3024 + 1620 | 0, 3038192, 1568) | 0;
 _memcpy($$3$i$i3024 + 3188 | 0, 3039760, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3041);
 if ($$3$i$i3024 | 0) {
  $32063 = $$3$i$i3024 + 5 | 0;
  $32065 = (HEAP8[$32063 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32063 >> 0] = $32065;
  if (!($32065 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3024);
  HEAP32[$3041 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 184;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 185;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 3188) label = 4689; else {
  $32072 = HEAP32[918918] | 0;
  if (($32072 | 0) == (HEAP32[918916] | 0)) label = 4689; else {
   $$lcssa$i$i3011 = 3675672;
   $$lcssa8$i$i3010 = $32072;
   label = 4690;
  }
 }
 do if ((label | 0) == 4689) {
  if ((HEAP32[918925] | 0) >>> 0 >= 3188) {
   $32079 = HEAP32[918924] | 0;
   if (($32079 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i3011 = 3675696;
    $$lcssa8$i$i3010 = $32079;
    label = 4690;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 3188) {
   $32084 = HEAP32[918930] | 0;
   if (($32084 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i3011 = 3675720;
    $$lcssa8$i$i3010 = $32084;
    label = 4690;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 3188) {
   $32089 = HEAP32[918936] | 0;
   if (($32089 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i3011 = 3675744;
    $$lcssa8$i$i3010 = $32089;
    label = 4690;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 3188) {
   $32094 = HEAP32[918942] | 0;
   if (($32094 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i3011 = 3675768;
    $$lcssa8$i$i3010 = $32094;
    label = 4690;
    break;
   }
  }
  $$3$i$i3012 = __Znwj(3188) | 0;
 } while (0);
 if ((label | 0) == 4690) {
  $32077 = $$lcssa8$i$i3010 + -4 | 0;
  HEAP32[$$lcssa$i$i3011 >> 2] = $32077;
  $$3$i$i3012 = HEAP32[$32077 >> 2] | 0;
 }
 $32098 = $$3$i$i3012 + 52 | 0;
 HEAP16[$$3$i$i3012 >> 1] = 784;
 HEAP16[$$3$i$i3012 + 2 >> 1] = 2;
 HEAP8[$$3$i$i3012 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3012 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3012 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3012 + 12 >> 2] = 3136;
 HEAP32[$$3$i$i3012 + 16 >> 2] = $32098;
 HEAP32[$$3$i$i3012 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3012 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3012 + 48 >> 0] = 0;
 HEAP32[$3042 >> 2] = $$3$i$i3012;
 _memcpy($32098 | 0, 3041328, 1568) | 0;
 _memcpy($$3$i$i3012 + 1620 | 0, 3042896, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3042);
 if ($$3$i$i3012 | 0) {
  $32110 = $$3$i$i3012 + 5 | 0;
  $32112 = (HEAP8[$32110 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32110 >> 0] = $32112;
  if (!($32112 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3012);
  HEAP32[$3042 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 186;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 186;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1620) label = 4705; else {
  $32119 = HEAP32[918918] | 0;
  if (($32119 | 0) == (HEAP32[918916] | 0)) label = 4705; else {
   $$lcssa$i$i2999 = 3675672;
   $$lcssa8$i$i2998 = $32119;
   label = 4706;
  }
 }
 do if ((label | 0) == 4705) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1620) {
   $32126 = HEAP32[918924] | 0;
   if (($32126 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2999 = 3675696;
    $$lcssa8$i$i2998 = $32126;
    label = 4706;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1620) {
   $32131 = HEAP32[918930] | 0;
   if (($32131 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2999 = 3675720;
    $$lcssa8$i$i2998 = $32131;
    label = 4706;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1620) {
   $32136 = HEAP32[918936] | 0;
   if (($32136 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2999 = 3675744;
    $$lcssa8$i$i2998 = $32136;
    label = 4706;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1620) {
   $32141 = HEAP32[918942] | 0;
   if (($32141 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2999 = 3675768;
    $$lcssa8$i$i2998 = $32141;
    label = 4706;
    break;
   }
  }
  $$3$i$i3000 = __Znwj(1620) | 0;
 } while (0);
 if ((label | 0) == 4706) {
  $32124 = $$lcssa8$i$i2998 + -4 | 0;
  HEAP32[$$lcssa$i$i2999 >> 2] = $32124;
  $$3$i$i3000 = HEAP32[$32124 >> 2] | 0;
 }
 $32145 = $$3$i$i3000 + 52 | 0;
 HEAP16[$$3$i$i3000 >> 1] = 784;
 HEAP16[$$3$i$i3000 + 2 >> 1] = 1;
 HEAP8[$$3$i$i3000 + 4 >> 0] = 16;
 HEAP8[$$3$i$i3000 + 5 >> 0] = 1;
 HEAP32[$$3$i$i3000 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i3000 + 12 >> 2] = 1568;
 HEAP32[$$3$i$i3000 + 16 >> 2] = $32145;
 HEAP32[$$3$i$i3000 + 20 >> 2] = 0;
 HEAP32[$$3$i$i3000 + 24 >> 2] = 0;
 HEAP8[$$3$i$i3000 + 48 >> 0] = 0;
 HEAP32[$3043 >> 2] = $$3$i$i3000;
 _memcpy($32145 | 0, 3044464, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3043);
 if ($$3$i$i3000 | 0) {
  $32156 = $$3$i$i3000 + 5 | 0;
  $32158 = (HEAP8[$32156 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32156 >> 0] = $32158;
  if (!($32158 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i3000);
  HEAP32[$3043 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 187;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 190;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6324) label = 4721; else {
  $32165 = HEAP32[918918] | 0;
  if (($32165 | 0) == (HEAP32[918916] | 0)) label = 4721; else {
   $$lcssa$i$i2987 = 3675672;
   $$lcssa8$i$i2986 = $32165;
   label = 4722;
  }
 }
 do if ((label | 0) == 4721) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6324) {
   $32172 = HEAP32[918924] | 0;
   if (($32172 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2987 = 3675696;
    $$lcssa8$i$i2986 = $32172;
    label = 4722;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6324) {
   $32177 = HEAP32[918930] | 0;
   if (($32177 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2987 = 3675720;
    $$lcssa8$i$i2986 = $32177;
    label = 4722;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6324) {
   $32182 = HEAP32[918936] | 0;
   if (($32182 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2987 = 3675744;
    $$lcssa8$i$i2986 = $32182;
    label = 4722;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6324) {
   $32187 = HEAP32[918942] | 0;
   if (($32187 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2987 = 3675768;
    $$lcssa8$i$i2986 = $32187;
    label = 4722;
    break;
   }
  }
  $$3$i$i2988 = __Znwj(6324) | 0;
 } while (0);
 if ((label | 0) == 4722) {
  $32170 = $$lcssa8$i$i2986 + -4 | 0;
  HEAP32[$$lcssa$i$i2987 >> 2] = $32170;
  $$3$i$i2988 = HEAP32[$32170 >> 2] | 0;
 }
 $32191 = $$3$i$i2988 + 52 | 0;
 HEAP16[$$3$i$i2988 >> 1] = 784;
 HEAP16[$$3$i$i2988 + 2 >> 1] = 4;
 HEAP8[$$3$i$i2988 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2988 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2988 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i2988 + 12 >> 2] = 6272;
 HEAP32[$$3$i$i2988 + 16 >> 2] = $32191;
 HEAP32[$$3$i$i2988 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2988 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2988 + 48 >> 0] = 0;
 HEAP32[$3044 >> 2] = $$3$i$i2988;
 _memcpy($32191 | 0, 3046032, 1568) | 0;
 _memcpy($$3$i$i2988 + 1620 | 0, 3047600, 1568) | 0;
 _memcpy($$3$i$i2988 + 3188 | 0, 3049168, 1568) | 0;
 _memcpy($$3$i$i2988 + 4756 | 0, 3050736, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3044);
 if ($$3$i$i2988 | 0) {
  $32205 = $$3$i$i2988 + 5 | 0;
  $32207 = (HEAP8[$32205 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32205 >> 0] = $32207;
  if (!($32207 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2988);
  HEAP32[$3044 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 191;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 192;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 3188) label = 4737; else {
  $32214 = HEAP32[918918] | 0;
  if (($32214 | 0) == (HEAP32[918916] | 0)) label = 4737; else {
   $$lcssa$i$i2963 = 3675672;
   $$lcssa8$i$i2962 = $32214;
   label = 4738;
  }
 }
 do if ((label | 0) == 4737) {
  if ((HEAP32[918925] | 0) >>> 0 >= 3188) {
   $32221 = HEAP32[918924] | 0;
   if (($32221 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2963 = 3675696;
    $$lcssa8$i$i2962 = $32221;
    label = 4738;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 3188) {
   $32226 = HEAP32[918930] | 0;
   if (($32226 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2963 = 3675720;
    $$lcssa8$i$i2962 = $32226;
    label = 4738;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 3188) {
   $32231 = HEAP32[918936] | 0;
   if (($32231 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2963 = 3675744;
    $$lcssa8$i$i2962 = $32231;
    label = 4738;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 3188) {
   $32236 = HEAP32[918942] | 0;
   if (($32236 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2963 = 3675768;
    $$lcssa8$i$i2962 = $32236;
    label = 4738;
    break;
   }
  }
  $$3$i$i2964 = __Znwj(3188) | 0;
 } while (0);
 if ((label | 0) == 4738) {
  $32219 = $$lcssa8$i$i2962 + -4 | 0;
  HEAP32[$$lcssa$i$i2963 >> 2] = $32219;
  $$3$i$i2964 = HEAP32[$32219 >> 2] | 0;
 }
 $32240 = $$3$i$i2964 + 52 | 0;
 HEAP16[$$3$i$i2964 >> 1] = 784;
 HEAP16[$$3$i$i2964 + 2 >> 1] = 2;
 HEAP8[$$3$i$i2964 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2964 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2964 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i2964 + 12 >> 2] = 3136;
 HEAP32[$$3$i$i2964 + 16 >> 2] = $32240;
 HEAP32[$$3$i$i2964 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2964 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2964 + 48 >> 0] = 0;
 HEAP32[$3045 >> 2] = $$3$i$i2964;
 _memcpy($32240 | 0, 3052304, 1568) | 0;
 _memcpy($$3$i$i2964 + 1620 | 0, 3053872, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3045);
 if ($$3$i$i2964 | 0) {
  $32252 = $$3$i$i2964 + 5 | 0;
  $32254 = (HEAP8[$32252 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32252 >> 0] = $32254;
  if (!($32254 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2964);
  HEAP32[$3045 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 193;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 195;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4756) label = 4753; else {
  $32261 = HEAP32[918918] | 0;
  if (($32261 | 0) == (HEAP32[918916] | 0)) label = 4753; else {
   $$lcssa$i$i2951 = 3675672;
   $$lcssa8$i$i2950 = $32261;
   label = 4754;
  }
 }
 do if ((label | 0) == 4753) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4756) {
   $32268 = HEAP32[918924] | 0;
   if (($32268 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2951 = 3675696;
    $$lcssa8$i$i2950 = $32268;
    label = 4754;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4756) {
   $32273 = HEAP32[918930] | 0;
   if (($32273 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2951 = 3675720;
    $$lcssa8$i$i2950 = $32273;
    label = 4754;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4756) {
   $32278 = HEAP32[918936] | 0;
   if (($32278 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2951 = 3675744;
    $$lcssa8$i$i2950 = $32278;
    label = 4754;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4756) {
   $32283 = HEAP32[918942] | 0;
   if (($32283 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2951 = 3675768;
    $$lcssa8$i$i2950 = $32283;
    label = 4754;
    break;
   }
  }
  $$3$i$i2952 = __Znwj(4756) | 0;
 } while (0);
 if ((label | 0) == 4754) {
  $32266 = $$lcssa8$i$i2950 + -4 | 0;
  HEAP32[$$lcssa$i$i2951 >> 2] = $32266;
  $$3$i$i2952 = HEAP32[$32266 >> 2] | 0;
 }
 $32287 = $$3$i$i2952 + 52 | 0;
 HEAP16[$$3$i$i2952 >> 1] = 784;
 HEAP16[$$3$i$i2952 + 2 >> 1] = 3;
 HEAP8[$$3$i$i2952 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2952 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2952 + 8 >> 2] = 1568;
 HEAP32[$$3$i$i2952 + 12 >> 2] = 4704;
 HEAP32[$$3$i$i2952 + 16 >> 2] = $32287;
 HEAP32[$$3$i$i2952 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2952 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2952 + 48 >> 0] = 0;
 HEAP32[$3046 >> 2] = $$3$i$i2952;
 _memcpy($32287 | 0, 3055440, 1568) | 0;
 _memcpy($$3$i$i2952 + 1620 | 0, 3057008, 1568) | 0;
 _memcpy($$3$i$i2952 + 3188 | 0, 3058576, 1568) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3046);
 if ($$3$i$i2952 | 0) {
  $32300 = $$3$i$i2952 + 5 | 0;
  $32302 = (HEAP8[$32300 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32300 >> 0] = $32302;
  if (!($32302 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2952);
  HEAP32[$3046 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 196;
 HEAP16[$bitmapData + 4 >> 1] = 232;
 HEAP16[$bitmapData + 6 >> 1] = 296;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4900) label = 4769; else {
  $32309 = HEAP32[918918] | 0;
  if (($32309 | 0) == (HEAP32[918916] | 0)) label = 4769; else {
   $$lcssa$i$i2891 = 3675672;
   $$lcssa8$i$i2890 = $32309;
   label = 4770;
  }
 }
 do if ((label | 0) == 4769) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4900) {
   $32316 = HEAP32[918924] | 0;
   if (($32316 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2891 = 3675696;
    $$lcssa8$i$i2890 = $32316;
    label = 4770;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4900) {
   $32321 = HEAP32[918930] | 0;
   if (($32321 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2891 = 3675720;
    $$lcssa8$i$i2890 = $32321;
    label = 4770;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4900) {
   $32326 = HEAP32[918936] | 0;
   if (($32326 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2891 = 3675744;
    $$lcssa8$i$i2890 = $32326;
    label = 4770;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4900) {
   $32331 = HEAP32[918942] | 0;
   if (($32331 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2891 = 3675768;
    $$lcssa8$i$i2890 = $32331;
    label = 4770;
    break;
   }
  }
  $$3$i$i2892 = __Znwj(4900) | 0;
 } while (0);
 if ((label | 0) == 4770) {
  $32314 = $$lcssa8$i$i2890 + -4 | 0;
  HEAP32[$$lcssa$i$i2891 >> 2] = $32314;
  $$3$i$i2892 = HEAP32[$32314 >> 2] | 0;
 }
 $32335 = $$3$i$i2892 + 52 | 0;
 HEAP16[$$3$i$i2892 >> 1] = 24;
 HEAP16[$$3$i$i2892 + 2 >> 1] = 101;
 HEAP8[$$3$i$i2892 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2892 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2892 + 8 >> 2] = 48;
 HEAP32[$$3$i$i2892 + 12 >> 2] = 4848;
 HEAP32[$$3$i$i2892 + 16 >> 2] = $32335;
 HEAP32[$$3$i$i2892 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2892 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2892 + 48 >> 0] = 0;
 HEAP32[$3047 >> 2] = $$3$i$i2892;
 $dest$02$i2886 = $32335;
 $i$03$i2885 = 0;
 $src$01$i2887 = 3060144;
 while (1) {
  dest = $dest$02$i2886;
  src = $src$01$i2887;
  stop = dest + 48 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $i$03$i2885 = $i$03$i2885 + 1 << 16 >> 16;
  if (($i$03$i2885 & 65535) >= 101) break; else {
   $dest$02$i2886 = $dest$02$i2886 + 48 | 0;
   $src$01$i2887 = $src$01$i2887 + 48 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3047);
 if ($$3$i$i2892 | 0) {
  $32350 = $$3$i$i2892 + 5 | 0;
  $32352 = (HEAP8[$32350 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32350 >> 0] = $32352;
  if (!($32352 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2892);
  HEAP32[$3047 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 297;
 HEAP16[$bitmapData + 4 >> 1] = 971;
 HEAP16[$bitmapData + 6 >> 1] = 322;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 10244) label = 4787; else {
  $32359 = HEAP32[918918] | 0;
  if (($32359 | 0) == (HEAP32[918916] | 0)) label = 4787; else {
   $$lcssa$i$i2855 = 3675672;
   $$lcssa8$i$i2854 = $32359;
   label = 4788;
  }
 }
 do if ((label | 0) == 4787) {
  if ((HEAP32[918925] | 0) >>> 0 >= 10244) {
   $32366 = HEAP32[918924] | 0;
   if (($32366 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2855 = 3675696;
    $$lcssa8$i$i2854 = $32366;
    label = 4788;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 10244) {
   $32371 = HEAP32[918930] | 0;
   if (($32371 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2855 = 3675720;
    $$lcssa8$i$i2854 = $32371;
    label = 4788;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 10244) {
   $32376 = HEAP32[918936] | 0;
   if (($32376 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2855 = 3675744;
    $$lcssa8$i$i2854 = $32376;
    label = 4788;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 10244) {
   $32381 = HEAP32[918942] | 0;
   if (($32381 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2855 = 3675768;
    $$lcssa8$i$i2854 = $32381;
    label = 4788;
    break;
   }
  }
  $$3$i$i2856 = __Znwj(10244) | 0;
 } while (0);
 if ((label | 0) == 4788) {
  $32364 = $$lcssa8$i$i2854 + -4 | 0;
  HEAP32[$$lcssa$i$i2855 >> 2] = $32364;
  $$3$i$i2856 = HEAP32[$32364 >> 2] | 0;
 }
 $32385 = $$3$i$i2856 + 52 | 0;
 HEAP16[$$3$i$i2856 >> 1] = 196;
 HEAP16[$$3$i$i2856 + 2 >> 1] = 26;
 HEAP8[$$3$i$i2856 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2856 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2856 + 8 >> 2] = 392;
 HEAP32[$$3$i$i2856 + 12 >> 2] = 10192;
 HEAP32[$$3$i$i2856 + 16 >> 2] = $32385;
 HEAP32[$$3$i$i2856 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2856 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2856 + 48 >> 0] = 0;
 HEAP32[$3048 >> 2] = $$3$i$i2856;
 _memcpy($32385 | 0, 3064992, 392) | 0;
 _memcpy($$3$i$i2856 + 444 | 0, 3065384, 392) | 0;
 _memcpy($$3$i$i2856 + 836 | 0, 3065776, 392) | 0;
 _memcpy($$3$i$i2856 + 1228 | 0, 3066168, 392) | 0;
 _memcpy($$3$i$i2856 + 1620 | 0, 3066560, 392) | 0;
 _memcpy($$3$i$i2856 + 2012 | 0, 3066952, 392) | 0;
 _memcpy($$3$i$i2856 + 2404 | 0, 3067344, 392) | 0;
 _memcpy($$3$i$i2856 + 2796 | 0, 3067736, 392) | 0;
 _memcpy($$3$i$i2856 + 3188 | 0, 3068128, 392) | 0;
 _memcpy($$3$i$i2856 + 3580 | 0, 3068520, 392) | 0;
 _memcpy($$3$i$i2856 + 3972 | 0, 3068912, 392) | 0;
 _memcpy($$3$i$i2856 + 4364 | 0, 3069304, 392) | 0;
 _memcpy($$3$i$i2856 + 4756 | 0, 3069696, 392) | 0;
 _memcpy($$3$i$i2856 + 5148 | 0, 3070088, 392) | 0;
 _memcpy($$3$i$i2856 + 5540 | 0, 3070480, 392) | 0;
 _memcpy($$3$i$i2856 + 5932 | 0, 3070872, 392) | 0;
 _memcpy($$3$i$i2856 + 6324 | 0, 3071264, 392) | 0;
 _memcpy($$3$i$i2856 + 6716 | 0, 3071656, 392) | 0;
 _memcpy($$3$i$i2856 + 7108 | 0, 3072048, 392) | 0;
 _memcpy($$3$i$i2856 + 7500 | 0, 3072440, 392) | 0;
 _memcpy($$3$i$i2856 + 7892 | 0, 3072832, 392) | 0;
 _memcpy($$3$i$i2856 + 8284 | 0, 3073224, 392) | 0;
 _memcpy($$3$i$i2856 + 8676 | 0, 3073616, 392) | 0;
 _memcpy($$3$i$i2856 + 9068 | 0, 3074008, 392) | 0;
 _memcpy($$3$i$i2856 + 9460 | 0, 3074400, 392) | 0;
 _memcpy($$3$i$i2856 + 9852 | 0, 3074792, 392) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3048);
 if ($$3$i$i2856 | 0) {
  $32421 = $$3$i$i2856 + 5 | 0;
  $32423 = (HEAP8[$32421 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32421 >> 0] = $32423;
  if (!($32423 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2856);
  HEAP32[$3048 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 234;
 HEAP16[$bitmapData + 4 >> 1] = 952;
 HEAP16[$bitmapData + 6 >> 1] = 270;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 13372) label = 4803; else {
  $32430 = HEAP32[918918] | 0;
  if (($32430 | 0) == (HEAP32[918916] | 0)) label = 4803; else {
   $$lcssa$i$i2843 = 3675672;
   $$lcssa8$i$i2842 = $32430;
   label = 4804;
  }
 }
 do if ((label | 0) == 4803) {
  if ((HEAP32[918925] | 0) >>> 0 >= 13372) {
   $32437 = HEAP32[918924] | 0;
   if (($32437 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2843 = 3675696;
    $$lcssa8$i$i2842 = $32437;
    label = 4804;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 13372) {
   $32442 = HEAP32[918930] | 0;
   if (($32442 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2843 = 3675720;
    $$lcssa8$i$i2842 = $32442;
    label = 4804;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 13372) {
   $32447 = HEAP32[918936] | 0;
   if (($32447 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2843 = 3675744;
    $$lcssa8$i$i2842 = $32447;
    label = 4804;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 13372) {
   $32452 = HEAP32[918942] | 0;
   if (($32452 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2843 = 3675768;
    $$lcssa8$i$i2842 = $32452;
    label = 4804;
    break;
   }
  }
  $$3$i$i2844 = __Znwj(13372) | 0;
 } while (0);
 if ((label | 0) == 4804) {
  $32435 = $$lcssa8$i$i2842 + -4 | 0;
  HEAP32[$$lcssa$i$i2843 >> 2] = $32435;
  $$3$i$i2844 = HEAP32[$32435 >> 2] | 0;
 }
 $32456 = $$3$i$i2844 + 52 | 0;
 HEAP16[$$3$i$i2844 >> 1] = 180;
 HEAP16[$$3$i$i2844 + 2 >> 1] = 37;
 HEAP8[$$3$i$i2844 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2844 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2844 + 8 >> 2] = 360;
 HEAP32[$$3$i$i2844 + 12 >> 2] = 13320;
 HEAP32[$$3$i$i2844 + 16 >> 2] = $32456;
 HEAP32[$$3$i$i2844 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2844 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2844 + 48 >> 0] = 0;
 HEAP32[$3049 >> 2] = $$3$i$i2844;
 _memcpy($32456 | 0, 3075184, 360) | 0;
 _memcpy($$3$i$i2844 + 412 | 0, 3075544, 360) | 0;
 _memcpy($$3$i$i2844 + 772 | 0, 3075904, 360) | 0;
 _memcpy($$3$i$i2844 + 1132 | 0, 3076264, 360) | 0;
 _memcpy($$3$i$i2844 + 1492 | 0, 3076624, 360) | 0;
 _memcpy($$3$i$i2844 + 1852 | 0, 3076984, 360) | 0;
 _memcpy($$3$i$i2844 + 2212 | 0, 3077344, 360) | 0;
 _memcpy($$3$i$i2844 + 2572 | 0, 3077704, 360) | 0;
 _memcpy($$3$i$i2844 + 2932 | 0, 3078064, 360) | 0;
 _memcpy($$3$i$i2844 + 3292 | 0, 3078424, 360) | 0;
 _memcpy($$3$i$i2844 + 3652 | 0, 3078784, 360) | 0;
 _memcpy($$3$i$i2844 + 4012 | 0, 3079144, 360) | 0;
 _memcpy($$3$i$i2844 + 4372 | 0, 3079504, 360) | 0;
 _memcpy($$3$i$i2844 + 4732 | 0, 3079864, 360) | 0;
 _memcpy($$3$i$i2844 + 5092 | 0, 3080224, 360) | 0;
 _memcpy($$3$i$i2844 + 5452 | 0, 3080584, 360) | 0;
 _memcpy($$3$i$i2844 + 5812 | 0, 3080944, 360) | 0;
 _memcpy($$3$i$i2844 + 6172 | 0, 3081304, 360) | 0;
 _memcpy($$3$i$i2844 + 6532 | 0, 3081664, 360) | 0;
 _memcpy($$3$i$i2844 + 6892 | 0, 3082024, 360) | 0;
 _memcpy($$3$i$i2844 + 7252 | 0, 3082384, 360) | 0;
 _memcpy($$3$i$i2844 + 7612 | 0, 3082744, 360) | 0;
 _memcpy($$3$i$i2844 + 7972 | 0, 3083104, 360) | 0;
 _memcpy($$3$i$i2844 + 8332 | 0, 3083464, 360) | 0;
 _memcpy($$3$i$i2844 + 8692 | 0, 3083824, 360) | 0;
 _memcpy($$3$i$i2844 + 9052 | 0, 3084184, 360) | 0;
 _memcpy($$3$i$i2844 + 9412 | 0, 3084544, 360) | 0;
 _memcpy($$3$i$i2844 + 9772 | 0, 3084904, 360) | 0;
 _memcpy($$3$i$i2844 + 10132 | 0, 3085264, 360) | 0;
 _memcpy($$3$i$i2844 + 10492 | 0, 3085624, 360) | 0;
 _memcpy($$3$i$i2844 + 10852 | 0, 3085984, 360) | 0;
 _memcpy($$3$i$i2844 + 11212 | 0, 3086344, 360) | 0;
 _memcpy($$3$i$i2844 + 11572 | 0, 3086704, 360) | 0;
 _memcpy($$3$i$i2844 + 11932 | 0, 3087064, 360) | 0;
 _memcpy($$3$i$i2844 + 12292 | 0, 3087424, 360) | 0;
 _memcpy($$3$i$i2844 + 12652 | 0, 3087784, 360) | 0;
 _memcpy($$3$i$i2844 + 13012 | 0, 3088144, 360) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3049);
 if ($$3$i$i2844 | 0) {
  $32503 = $$3$i$i2844 + 5 | 0;
  $32505 = (HEAP8[$32503 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32503 >> 0] = $32505;
  if (!($32505 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2844);
  HEAP32[$3049 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 271;
 HEAP16[$bitmapData + 4 >> 1] = 952;
 HEAP16[$bitmapData + 6 >> 1] = 287;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6172) label = 4819; else {
  $32512 = HEAP32[918918] | 0;
  if (($32512 | 0) == (HEAP32[918916] | 0)) label = 4819; else {
   $$lcssa$i$i2831 = 3675672;
   $$lcssa8$i$i2830 = $32512;
   label = 4820;
  }
 }
 do if ((label | 0) == 4819) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6172) {
   $32519 = HEAP32[918924] | 0;
   if (($32519 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2831 = 3675696;
    $$lcssa8$i$i2830 = $32519;
    label = 4820;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6172) {
   $32524 = HEAP32[918930] | 0;
   if (($32524 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2831 = 3675720;
    $$lcssa8$i$i2830 = $32524;
    label = 4820;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6172) {
   $32529 = HEAP32[918936] | 0;
   if (($32529 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2831 = 3675744;
    $$lcssa8$i$i2830 = $32529;
    label = 4820;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6172) {
   $32534 = HEAP32[918942] | 0;
   if (($32534 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2831 = 3675768;
    $$lcssa8$i$i2830 = $32534;
    label = 4820;
    break;
   }
  }
  $$3$i$i2832 = __Znwj(6172) | 0;
 } while (0);
 if ((label | 0) == 4820) {
  $32517 = $$lcssa8$i$i2830 + -4 | 0;
  HEAP32[$$lcssa$i$i2831 >> 2] = $32517;
  $$3$i$i2832 = HEAP32[$32517 >> 2] | 0;
 }
 $32538 = $$3$i$i2832 + 52 | 0;
 HEAP16[$$3$i$i2832 >> 1] = 180;
 HEAP16[$$3$i$i2832 + 2 >> 1] = 17;
 HEAP8[$$3$i$i2832 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2832 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2832 + 8 >> 2] = 360;
 HEAP32[$$3$i$i2832 + 12 >> 2] = 6120;
 HEAP32[$$3$i$i2832 + 16 >> 2] = $32538;
 HEAP32[$$3$i$i2832 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2832 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2832 + 48 >> 0] = 0;
 HEAP32[$3050 >> 2] = $$3$i$i2832;
 _memcpy($32538 | 0, 3088504, 360) | 0;
 _memcpy($$3$i$i2832 + 412 | 0, 3088864, 360) | 0;
 _memcpy($$3$i$i2832 + 772 | 0, 3089224, 360) | 0;
 _memcpy($$3$i$i2832 + 1132 | 0, 3089584, 360) | 0;
 _memcpy($$3$i$i2832 + 1492 | 0, 3089944, 360) | 0;
 _memcpy($$3$i$i2832 + 1852 | 0, 3090304, 360) | 0;
 _memcpy($$3$i$i2832 + 2212 | 0, 3090664, 360) | 0;
 _memcpy($$3$i$i2832 + 2572 | 0, 3091024, 360) | 0;
 _memcpy($$3$i$i2832 + 2932 | 0, 3091384, 360) | 0;
 _memcpy($$3$i$i2832 + 3292 | 0, 3091744, 360) | 0;
 _memcpy($$3$i$i2832 + 3652 | 0, 3092104, 360) | 0;
 _memcpy($$3$i$i2832 + 4012 | 0, 3092464, 360) | 0;
 _memcpy($$3$i$i2832 + 4372 | 0, 3092824, 360) | 0;
 _memcpy($$3$i$i2832 + 4732 | 0, 3093184, 360) | 0;
 _memcpy($$3$i$i2832 + 5092 | 0, 3093544, 360) | 0;
 _memcpy($$3$i$i2832 + 5452 | 0, 3093904, 360) | 0;
 _memcpy($$3$i$i2832 + 5812 | 0, 3094264, 360) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3050);
 if ($$3$i$i2832 | 0) {
  $32565 = $$3$i$i2832 + 5 | 0;
  $32567 = (HEAP8[$32565 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32565 >> 0] = $32567;
  if (!($32567 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2832);
  HEAP32[$3050 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 288;
 HEAP16[$bitmapData + 4 >> 1] = 952;
 HEAP16[$bitmapData + 6 >> 1] = 291;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1492) label = 4835; else {
  $32574 = HEAP32[918918] | 0;
  if (($32574 | 0) == (HEAP32[918916] | 0)) label = 4835; else {
   $$lcssa$i$i2819 = 3675672;
   $$lcssa8$i$i2818 = $32574;
   label = 4836;
  }
 }
 do if ((label | 0) == 4835) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1492) {
   $32581 = HEAP32[918924] | 0;
   if (($32581 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2819 = 3675696;
    $$lcssa8$i$i2818 = $32581;
    label = 4836;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1492) {
   $32586 = HEAP32[918930] | 0;
   if (($32586 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2819 = 3675720;
    $$lcssa8$i$i2818 = $32586;
    label = 4836;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1492) {
   $32591 = HEAP32[918936] | 0;
   if (($32591 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2819 = 3675744;
    $$lcssa8$i$i2818 = $32591;
    label = 4836;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1492) {
   $32596 = HEAP32[918942] | 0;
   if (($32596 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2819 = 3675768;
    $$lcssa8$i$i2818 = $32596;
    label = 4836;
    break;
   }
  }
  $$3$i$i2820 = __Znwj(1492) | 0;
 } while (0);
 if ((label | 0) == 4836) {
  $32579 = $$lcssa8$i$i2818 + -4 | 0;
  HEAP32[$$lcssa$i$i2819 >> 2] = $32579;
  $$3$i$i2820 = HEAP32[$32579 >> 2] | 0;
 }
 $32600 = $$3$i$i2820 + 52 | 0;
 HEAP16[$$3$i$i2820 >> 1] = 180;
 HEAP16[$$3$i$i2820 + 2 >> 1] = 4;
 HEAP8[$$3$i$i2820 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2820 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2820 + 8 >> 2] = 360;
 HEAP32[$$3$i$i2820 + 12 >> 2] = 1440;
 HEAP32[$$3$i$i2820 + 16 >> 2] = $32600;
 HEAP32[$$3$i$i2820 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2820 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2820 + 48 >> 0] = 0;
 HEAP32[$3051 >> 2] = $$3$i$i2820;
 _memcpy($32600 | 0, 3094624, 360) | 0;
 _memcpy($$3$i$i2820 + 412 | 0, 3094984, 360) | 0;
 _memcpy($$3$i$i2820 + 772 | 0, 3095344, 360) | 0;
 _memcpy($$3$i$i2820 + 1132 | 0, 3095704, 360) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3051);
 if ($$3$i$i2820 | 0) {
  $32614 = $$3$i$i2820 + 5 | 0;
  $32616 = (HEAP8[$32614 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32614 >> 0] = $32616;
  if (!($32616 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2820);
  HEAP32[$3051 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 213;
 HEAP16[$bitmapData + 4 >> 1] = 881;
 HEAP16[$bitmapData + 6 >> 1] = 225;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2860) label = 4851; else {
  $32623 = HEAP32[918918] | 0;
  if (($32623 | 0) == (HEAP32[918916] | 0)) label = 4851; else {
   $$lcssa$i$i2807 = 3675672;
   $$lcssa8$i$i2806 = $32623;
   label = 4852;
  }
 }
 do if ((label | 0) == 4851) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2860) {
   $32630 = HEAP32[918924] | 0;
   if (($32630 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2807 = 3675696;
    $$lcssa8$i$i2806 = $32630;
    label = 4852;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2860) {
   $32635 = HEAP32[918930] | 0;
   if (($32635 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2807 = 3675720;
    $$lcssa8$i$i2806 = $32635;
    label = 4852;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2860) {
   $32640 = HEAP32[918936] | 0;
   if (($32640 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2807 = 3675744;
    $$lcssa8$i$i2806 = $32640;
    label = 4852;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2860) {
   $32645 = HEAP32[918942] | 0;
   if (($32645 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2807 = 3675768;
    $$lcssa8$i$i2806 = $32645;
    label = 4852;
    break;
   }
  }
  $$3$i$i2808 = __Znwj(2860) | 0;
 } while (0);
 if ((label | 0) == 4852) {
  $32628 = $$lcssa8$i$i2806 + -4 | 0;
  HEAP32[$$lcssa$i$i2807 >> 2] = $32628;
  $$3$i$i2808 = HEAP32[$32628 >> 2] | 0;
 }
 $32649 = $$3$i$i2808 + 52 | 0;
 HEAP16[$$3$i$i2808 >> 1] = 108;
 HEAP16[$$3$i$i2808 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2808 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2808 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2808 + 8 >> 2] = 216;
 HEAP32[$$3$i$i2808 + 12 >> 2] = 2808;
 HEAP32[$$3$i$i2808 + 16 >> 2] = $32649;
 HEAP32[$$3$i$i2808 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2808 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2808 + 48 >> 0] = 0;
 HEAP32[$3052 >> 2] = $$3$i$i2808;
 _memcpy($32649 | 0, 3096064, 216) | 0;
 _memcpy($$3$i$i2808 + 268 | 0, 3096280, 216) | 0;
 _memcpy($$3$i$i2808 + 484 | 0, 3096496, 216) | 0;
 _memcpy($$3$i$i2808 + 700 | 0, 3096712, 216) | 0;
 _memcpy($$3$i$i2808 + 916 | 0, 3096928, 216) | 0;
 _memcpy($$3$i$i2808 + 1132 | 0, 3097144, 216) | 0;
 _memcpy($$3$i$i2808 + 1348 | 0, 3097360, 216) | 0;
 _memcpy($$3$i$i2808 + 1564 | 0, 3097576, 216) | 0;
 _memcpy($$3$i$i2808 + 1780 | 0, 3097792, 216) | 0;
 _memcpy($$3$i$i2808 + 1996 | 0, 3098008, 216) | 0;
 _memcpy($$3$i$i2808 + 2212 | 0, 3098224, 216) | 0;
 _memcpy($$3$i$i2808 + 2428 | 0, 3098440, 216) | 0;
 _memcpy($$3$i$i2808 + 2644 | 0, 3098656, 216) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3052);
 if ($$3$i$i2808 | 0) {
  $32672 = $$3$i$i2808 + 5 | 0;
  $32674 = (HEAP8[$32672 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32672 >> 0] = $32674;
  if (!($32674 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2808);
  HEAP32[$3052 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 776;
 HEAP16[$bitmapData + 2 >> 1] = 226;
 HEAP16[$bitmapData + 4 >> 1] = 881;
 HEAP16[$bitmapData + 6 >> 1] = 228;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 700) label = 4867; else {
  $32681 = HEAP32[918918] | 0;
  if (($32681 | 0) == (HEAP32[918916] | 0)) label = 4867; else {
   $$lcssa$i$i2795 = 3675672;
   $$lcssa8$i$i2794 = $32681;
   label = 4868;
  }
 }
 do if ((label | 0) == 4867) {
  if ((HEAP32[918925] | 0) >>> 0 >= 700) {
   $32688 = HEAP32[918924] | 0;
   if (($32688 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2795 = 3675696;
    $$lcssa8$i$i2794 = $32688;
    label = 4868;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 700) {
   $32693 = HEAP32[918930] | 0;
   if (($32693 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2795 = 3675720;
    $$lcssa8$i$i2794 = $32693;
    label = 4868;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 700) {
   $32698 = HEAP32[918936] | 0;
   if (($32698 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2795 = 3675744;
    $$lcssa8$i$i2794 = $32698;
    label = 4868;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 700) {
   $32703 = HEAP32[918942] | 0;
   if (($32703 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2795 = 3675768;
    $$lcssa8$i$i2794 = $32703;
    label = 4868;
    break;
   }
  }
  $$3$i$i2796 = __Znwj(700) | 0;
 } while (0);
 if ((label | 0) == 4868) {
  $32686 = $$lcssa8$i$i2794 + -4 | 0;
  HEAP32[$$lcssa$i$i2795 >> 2] = $32686;
  $$3$i$i2796 = HEAP32[$32686 >> 2] | 0;
 }
 $32707 = $$3$i$i2796 + 52 | 0;
 HEAP16[$$3$i$i2796 >> 1] = 108;
 HEAP16[$$3$i$i2796 + 2 >> 1] = 3;
 HEAP8[$$3$i$i2796 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2796 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2796 + 8 >> 2] = 216;
 HEAP32[$$3$i$i2796 + 12 >> 2] = 648;
 HEAP32[$$3$i$i2796 + 16 >> 2] = $32707;
 HEAP32[$$3$i$i2796 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2796 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2796 + 48 >> 0] = 0;
 HEAP32[$3053 >> 2] = $$3$i$i2796;
 _memcpy($32707 | 0, 3098872, 216) | 0;
 _memcpy($$3$i$i2796 + 268 | 0, 3099088, 216) | 0;
 _memcpy($$3$i$i2796 + 484 | 0, 3099304, 216) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3053);
 if ($$3$i$i2796 | 0) {
  $32720 = $$3$i$i2796 + 5 | 0;
  $32722 = (HEAP8[$32720 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32720 >> 0] = $32722;
  if (!($32722 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2796);
  HEAP32[$3053 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 769;
 HEAP16[$bitmapData + 2 >> 1] = 328;
 HEAP16[$bitmapData + 4 >> 1] = 984;
 HEAP16[$bitmapData + 6 >> 1] = 328;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 484) label = 4883; else {
  $32729 = HEAP32[918918] | 0;
  if (($32729 | 0) == (HEAP32[918916] | 0)) label = 4883; else {
   $$lcssa$i$i2783 = 3675672;
   $$lcssa8$i$i2782 = $32729;
   label = 4884;
  }
 }
 do if ((label | 0) == 4883) {
  if ((HEAP32[918925] | 0) >>> 0 >= 484) {
   $32736 = HEAP32[918924] | 0;
   if (($32736 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2783 = 3675696;
    $$lcssa8$i$i2782 = $32736;
    label = 4884;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 484) {
   $32741 = HEAP32[918930] | 0;
   if (($32741 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2783 = 3675720;
    $$lcssa8$i$i2782 = $32741;
    label = 4884;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 484) {
   $32746 = HEAP32[918936] | 0;
   if (($32746 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2783 = 3675744;
    $$lcssa8$i$i2782 = $32746;
    label = 4884;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 484) {
   $32751 = HEAP32[918942] | 0;
   if (($32751 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2783 = 3675768;
    $$lcssa8$i$i2782 = $32751;
    label = 4884;
    break;
   }
  }
  $$3$i$i2784 = __Znwj(484) | 0;
 } while (0);
 if ((label | 0) == 4884) {
  $32734 = $$lcssa8$i$i2782 + -4 | 0;
  HEAP32[$$lcssa$i$i2783 >> 2] = $32734;
  $$3$i$i2784 = HEAP32[$32734 >> 2] | 0;
 }
 $32755 = $$3$i$i2784 + 52 | 0;
 HEAP16[$$3$i$i2784 >> 1] = 216;
 HEAP16[$$3$i$i2784 + 2 >> 1] = 1;
 HEAP8[$$3$i$i2784 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2784 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2784 + 8 >> 2] = 432;
 HEAP32[$$3$i$i2784 + 12 >> 2] = 432;
 HEAP32[$$3$i$i2784 + 16 >> 2] = $32755;
 HEAP32[$$3$i$i2784 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2784 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2784 + 48 >> 0] = 0;
 HEAP32[$3054 >> 2] = $$3$i$i2784;
 _memcpy($32755 | 0, 3099520, 432) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3054);
 if ($$3$i$i2784 | 0) {
  $32766 = $$3$i$i2784 + 5 | 0;
  $32768 = (HEAP8[$32766 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32766 >> 0] = $32768;
  if (!($32768 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2784);
  HEAP32[$3054 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 984;
 HEAP16[$bitmapData + 2 >> 1] = 208;
 HEAP16[$bitmapData + 4 >> 1] = 984;
 HEAP16[$bitmapData + 6 >> 1] = 327;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1012) label = 4899; else {
  $32775 = HEAP32[918918] | 0;
  if (($32775 | 0) == (HEAP32[918916] | 0)) label = 4899; else {
   $$lcssa$i$i2771 = 3675672;
   $$lcssa8$i$i2770 = $32775;
   label = 4900;
  }
 }
 do if ((label | 0) == 4899) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1012) {
   $32782 = HEAP32[918924] | 0;
   if (($32782 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2771 = 3675696;
    $$lcssa8$i$i2770 = $32782;
    label = 4900;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1012) {
   $32787 = HEAP32[918930] | 0;
   if (($32787 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2771 = 3675720;
    $$lcssa8$i$i2770 = $32787;
    label = 4900;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1012) {
   $32792 = HEAP32[918936] | 0;
   if (($32792 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2771 = 3675744;
    $$lcssa8$i$i2770 = $32792;
    label = 4900;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1012) {
   $32797 = HEAP32[918942] | 0;
   if (($32797 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2771 = 3675768;
    $$lcssa8$i$i2770 = $32797;
    label = 4900;
    break;
   }
  }
  $$3$i$i2772 = __Znwj(1012) | 0;
 } while (0);
 if ((label | 0) == 4900) {
  $32780 = $$lcssa8$i$i2770 + -4 | 0;
  HEAP32[$$lcssa$i$i2771 >> 2] = $32780;
  $$3$i$i2772 = HEAP32[$32780 >> 2] | 0;
 }
 $32801 = $$3$i$i2772 + 52 | 0;
 HEAP16[$$3$i$i2772 >> 1] = 4;
 HEAP16[$$3$i$i2772 + 2 >> 1] = 120;
 HEAP8[$$3$i$i2772 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2772 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2772 + 8 >> 2] = 8;
 HEAP32[$$3$i$i2772 + 12 >> 2] = 960;
 HEAP32[$$3$i$i2772 + 16 >> 2] = $32801;
 HEAP32[$$3$i$i2772 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2772 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2772 + 48 >> 0] = 0;
 HEAP32[$3055 >> 2] = $$3$i$i2772;
 $dest$02$i2766 = $32801;
 $i$03$i2765 = 0;
 $src$01$i2767 = 3099952;
 while (1) {
  $32811 = $src$01$i2767;
  $32812 = $32811;
  $32813 = HEAPU8[$32812 >> 0] | HEAPU8[$32812 + 1 >> 0] << 8 | HEAPU8[$32812 + 2 >> 0] << 16 | HEAPU8[$32812 + 3 >> 0] << 24;
  $32815 = $32811 + 4 | 0;
  $32816 = HEAPU8[$32815 >> 0] | HEAPU8[$32815 + 1 >> 0] << 8 | HEAPU8[$32815 + 2 >> 0] << 16 | HEAPU8[$32815 + 3 >> 0] << 24;
  $32817 = $dest$02$i2766;
  $32818 = $32817;
  HEAP8[$32818 >> 0] = $32813;
  HEAP8[$32818 + 1 >> 0] = $32813 >> 8;
  HEAP8[$32818 + 2 >> 0] = $32813 >> 16;
  HEAP8[$32818 + 3 >> 0] = $32813 >> 24;
  $32820 = $32817 + 4 | 0;
  HEAP8[$32820 >> 0] = $32816;
  HEAP8[$32820 + 1 >> 0] = $32816 >> 8;
  HEAP8[$32820 + 2 >> 0] = $32816 >> 16;
  HEAP8[$32820 + 3 >> 0] = $32816 >> 24;
  $i$03$i2765 = $i$03$i2765 + 1 << 16 >> 16;
  if (($i$03$i2765 & 65535) >= 120) break; else {
   $dest$02$i2766 = $dest$02$i2766 + 8 | 0;
   $src$01$i2767 = $src$01$i2767 + 8 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3055);
 if ($$3$i$i2772 | 0) {
  $32826 = $$3$i$i2772 + 5 | 0;
  $32828 = (HEAP8[$32826 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32826 >> 0] = $32828;
  if (!($32828 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2772);
  HEAP32[$3055 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 769;
 HEAP16[$bitmapData + 2 >> 1] = 208;
 HEAP16[$bitmapData + 4 >> 1] = 769;
 HEAP16[$bitmapData + 6 >> 1] = 327;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1012) label = 4917; else {
  $32835 = HEAP32[918918] | 0;
  if (($32835 | 0) == (HEAP32[918916] | 0)) label = 4917; else {
   $$lcssa$i$i2759 = 3675672;
   $$lcssa8$i$i2758 = $32835;
   label = 4918;
  }
 }
 do if ((label | 0) == 4917) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1012) {
   $32842 = HEAP32[918924] | 0;
   if (($32842 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2759 = 3675696;
    $$lcssa8$i$i2758 = $32842;
    label = 4918;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1012) {
   $32847 = HEAP32[918930] | 0;
   if (($32847 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2759 = 3675720;
    $$lcssa8$i$i2758 = $32847;
    label = 4918;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1012) {
   $32852 = HEAP32[918936] | 0;
   if (($32852 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2759 = 3675744;
    $$lcssa8$i$i2758 = $32852;
    label = 4918;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1012) {
   $32857 = HEAP32[918942] | 0;
   if (($32857 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2759 = 3675768;
    $$lcssa8$i$i2758 = $32857;
    label = 4918;
    break;
   }
  }
  $$3$i$i2760 = __Znwj(1012) | 0;
 } while (0);
 if ((label | 0) == 4918) {
  $32840 = $$lcssa8$i$i2758 + -4 | 0;
  HEAP32[$$lcssa$i$i2759 >> 2] = $32840;
  $$3$i$i2760 = HEAP32[$32840 >> 2] | 0;
 }
 $32861 = $$3$i$i2760 + 52 | 0;
 HEAP16[$$3$i$i2760 >> 1] = 4;
 HEAP16[$$3$i$i2760 + 2 >> 1] = 120;
 HEAP8[$$3$i$i2760 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2760 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2760 + 8 >> 2] = 8;
 HEAP32[$$3$i$i2760 + 12 >> 2] = 960;
 HEAP32[$$3$i$i2760 + 16 >> 2] = $32861;
 HEAP32[$$3$i$i2760 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2760 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2760 + 48 >> 0] = 0;
 HEAP32[$3056 >> 2] = $$3$i$i2760;
 $dest$02$i2754 = $32861;
 $i$03$i2753 = 0;
 $src$01$i2755 = 3100912;
 while (1) {
  $32871 = $src$01$i2755;
  $32872 = $32871;
  $32873 = HEAPU8[$32872 >> 0] | HEAPU8[$32872 + 1 >> 0] << 8 | HEAPU8[$32872 + 2 >> 0] << 16 | HEAPU8[$32872 + 3 >> 0] << 24;
  $32875 = $32871 + 4 | 0;
  $32876 = HEAPU8[$32875 >> 0] | HEAPU8[$32875 + 1 >> 0] << 8 | HEAPU8[$32875 + 2 >> 0] << 16 | HEAPU8[$32875 + 3 >> 0] << 24;
  $32877 = $dest$02$i2754;
  $32878 = $32877;
  HEAP8[$32878 >> 0] = $32873;
  HEAP8[$32878 + 1 >> 0] = $32873 >> 8;
  HEAP8[$32878 + 2 >> 0] = $32873 >> 16;
  HEAP8[$32878 + 3 >> 0] = $32873 >> 24;
  $32880 = $32877 + 4 | 0;
  HEAP8[$32880 >> 0] = $32876;
  HEAP8[$32880 + 1 >> 0] = $32876 >> 8;
  HEAP8[$32880 + 2 >> 0] = $32876 >> 16;
  HEAP8[$32880 + 3 >> 0] = $32876 >> 24;
  $i$03$i2753 = $i$03$i2753 + 1 << 16 >> 16;
  if (($i$03$i2753 & 65535) >= 120) break; else {
   $dest$02$i2754 = $dest$02$i2754 + 8 | 0;
   $src$01$i2755 = $src$01$i2755 + 8 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3056);
 if ($$3$i$i2760 | 0) {
  $32886 = $$3$i$i2760 + 5 | 0;
  $32888 = (HEAP8[$32886 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32886 >> 0] = $32888;
  if (!($32888 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2760);
  HEAP32[$3056 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 222;
 HEAP16[$bitmapData + 2 >> 1] = 228;
 HEAP16[$bitmapData + 4 >> 1] = 768;
 HEAP16[$bitmapData + 6 >> 1] = 247;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 21972) label = 4935; else {
  $32895 = HEAP32[918918] | 0;
  if (($32895 | 0) == (HEAP32[918916] | 0)) label = 4935; else {
   $$lcssa$i$i2747 = 3675672;
   $$lcssa8$i$i2746 = $32895;
   label = 4936;
  }
 }
 do if ((label | 0) == 4935) {
  if ((HEAP32[918925] | 0) >>> 0 >= 21972) {
   $32902 = HEAP32[918924] | 0;
   if (($32902 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2747 = 3675696;
    $$lcssa8$i$i2746 = $32902;
    label = 4936;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 21972) {
   $32907 = HEAP32[918930] | 0;
   if (($32907 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2747 = 3675720;
    $$lcssa8$i$i2746 = $32907;
    label = 4936;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 21972) {
   $32912 = HEAP32[918936] | 0;
   if (($32912 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2747 = 3675744;
    $$lcssa8$i$i2746 = $32912;
    label = 4936;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 21972) {
   $32917 = HEAP32[918942] | 0;
   if (($32917 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2747 = 3675768;
    $$lcssa8$i$i2746 = $32917;
    label = 4936;
    break;
   }
  }
  $$3$i$i2748 = __Znwj(21972) | 0;
 } while (0);
 if ((label | 0) == 4936) {
  $32900 = $$lcssa8$i$i2746 + -4 | 0;
  HEAP32[$$lcssa$i$i2747 >> 2] = $32900;
  $$3$i$i2748 = HEAP32[$32900 >> 2] | 0;
 }
 $32921 = $$3$i$i2748 + 52 | 0;
 HEAP16[$$3$i$i2748 >> 1] = 548;
 HEAP16[$$3$i$i2748 + 2 >> 1] = 20;
 HEAP8[$$3$i$i2748 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2748 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2748 + 8 >> 2] = 1096;
 HEAP32[$$3$i$i2748 + 12 >> 2] = 21920;
 HEAP32[$$3$i$i2748 + 16 >> 2] = $32921;
 HEAP32[$$3$i$i2748 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2748 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2748 + 48 >> 0] = 0;
 HEAP32[$3057 >> 2] = $$3$i$i2748;
 _memcpy($32921 | 0, 3101872, 1096) | 0;
 _memcpy($$3$i$i2748 + 1148 | 0, 3102968, 1096) | 0;
 _memcpy($$3$i$i2748 + 2244 | 0, 3104064, 1096) | 0;
 _memcpy($$3$i$i2748 + 3340 | 0, 3105160, 1096) | 0;
 _memcpy($$3$i$i2748 + 4436 | 0, 3106256, 1096) | 0;
 _memcpy($$3$i$i2748 + 5532 | 0, 3107352, 1096) | 0;
 _memcpy($$3$i$i2748 + 6628 | 0, 3108448, 1096) | 0;
 _memcpy($$3$i$i2748 + 7724 | 0, 3109544, 1096) | 0;
 _memcpy($$3$i$i2748 + 8820 | 0, 3110640, 1096) | 0;
 _memcpy($$3$i$i2748 + 9916 | 0, 3111736, 1096) | 0;
 _memcpy($$3$i$i2748 + 11012 | 0, 3112832, 1096) | 0;
 _memcpy($$3$i$i2748 + 12108 | 0, 3113928, 1096) | 0;
 _memcpy($$3$i$i2748 + 13204 | 0, 3115024, 1096) | 0;
 _memcpy($$3$i$i2748 + 14300 | 0, 3116120, 1096) | 0;
 _memcpy($$3$i$i2748 + 15396 | 0, 3117216, 1096) | 0;
 _memcpy($$3$i$i2748 + 16492 | 0, 3118312, 1096) | 0;
 _memcpy($$3$i$i2748 + 17588 | 0, 3119408, 1096) | 0;
 _memcpy($$3$i$i2748 + 18684 | 0, 3120504, 1096) | 0;
 _memcpy($$3$i$i2748 + 19780 | 0, 3121600, 1096) | 0;
 _memcpy($$3$i$i2748 + 20876 | 0, 3122696, 1096) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3057);
 if ($$3$i$i2748 | 0) {
  $32951 = $$3$i$i2748 + 5 | 0;
  $32953 = (HEAP8[$32951 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$32951 >> 0] = $32953;
  if (!($32953 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2748);
  HEAP32[$3057 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 222;
 HEAP16[$bitmapData + 2 >> 1] = 248;
 HEAP16[$bitmapData + 4 >> 1] = 768;
 HEAP16[$bitmapData + 6 >> 1] = 276;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31836) label = 4951; else {
  $32960 = HEAP32[918918] | 0;
  if (($32960 | 0) == (HEAP32[918916] | 0)) label = 4951; else {
   $$lcssa$i$i2735 = 3675672;
   $$lcssa8$i$i2734 = $32960;
   label = 4952;
  }
 }
 do if ((label | 0) == 4951) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31836) {
   $32967 = HEAP32[918924] | 0;
   if (($32967 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2735 = 3675696;
    $$lcssa8$i$i2734 = $32967;
    label = 4952;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31836) {
   $32972 = HEAP32[918930] | 0;
   if (($32972 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2735 = 3675720;
    $$lcssa8$i$i2734 = $32972;
    label = 4952;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31836) {
   $32977 = HEAP32[918936] | 0;
   if (($32977 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2735 = 3675744;
    $$lcssa8$i$i2734 = $32977;
    label = 4952;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31836) {
   $32982 = HEAP32[918942] | 0;
   if (($32982 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2735 = 3675768;
    $$lcssa8$i$i2734 = $32982;
    label = 4952;
    break;
   }
  }
  $$3$i$i2736 = __Znwj(31836) | 0;
 } while (0);
 if ((label | 0) == 4952) {
  $32965 = $$lcssa8$i$i2734 + -4 | 0;
  HEAP32[$$lcssa$i$i2735 >> 2] = $32965;
  $$3$i$i2736 = HEAP32[$32965 >> 2] | 0;
 }
 $32986 = $$3$i$i2736 + 52 | 0;
 HEAP16[$$3$i$i2736 >> 1] = 548;
 HEAP16[$$3$i$i2736 + 2 >> 1] = 29;
 HEAP8[$$3$i$i2736 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2736 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2736 + 8 >> 2] = 1096;
 HEAP32[$$3$i$i2736 + 12 >> 2] = 31784;
 HEAP32[$$3$i$i2736 + 16 >> 2] = $32986;
 HEAP32[$$3$i$i2736 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2736 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2736 + 48 >> 0] = 0;
 HEAP32[$3058 >> 2] = $$3$i$i2736;
 _memcpy($32986 | 0, 3123792, 1096) | 0;
 _memcpy($$3$i$i2736 + 1148 | 0, 3124888, 1096) | 0;
 _memcpy($$3$i$i2736 + 2244 | 0, 3125984, 1096) | 0;
 _memcpy($$3$i$i2736 + 3340 | 0, 3127080, 1096) | 0;
 _memcpy($$3$i$i2736 + 4436 | 0, 3128176, 1096) | 0;
 _memcpy($$3$i$i2736 + 5532 | 0, 3129272, 1096) | 0;
 _memcpy($$3$i$i2736 + 6628 | 0, 3130368, 1096) | 0;
 _memcpy($$3$i$i2736 + 7724 | 0, 3131464, 1096) | 0;
 _memcpy($$3$i$i2736 + 8820 | 0, 3132560, 1096) | 0;
 _memcpy($$3$i$i2736 + 9916 | 0, 3133656, 1096) | 0;
 _memcpy($$3$i$i2736 + 11012 | 0, 3134752, 1096) | 0;
 _memcpy($$3$i$i2736 + 12108 | 0, 3135848, 1096) | 0;
 _memcpy($$3$i$i2736 + 13204 | 0, 3136944, 1096) | 0;
 _memcpy($$3$i$i2736 + 14300 | 0, 3138040, 1096) | 0;
 _memcpy($$3$i$i2736 + 15396 | 0, 3139136, 1096) | 0;
 _memcpy($$3$i$i2736 + 16492 | 0, 3140232, 1096) | 0;
 _memcpy($$3$i$i2736 + 17588 | 0, 3141328, 1096) | 0;
 _memcpy($$3$i$i2736 + 18684 | 0, 3142424, 1096) | 0;
 _memcpy($$3$i$i2736 + 19780 | 0, 3143520, 1096) | 0;
 _memcpy($$3$i$i2736 + 20876 | 0, 3144616, 1096) | 0;
 _memcpy($$3$i$i2736 + 21972 | 0, 3145712, 1096) | 0;
 _memcpy($$3$i$i2736 + 23068 | 0, 3146808, 1096) | 0;
 _memcpy($$3$i$i2736 + 24164 | 0, 3147904, 1096) | 0;
 _memcpy($$3$i$i2736 + 25260 | 0, 3149e3, 1096) | 0;
 _memcpy($$3$i$i2736 + 26356 | 0, 3150096, 1096) | 0;
 _memcpy($$3$i$i2736 + 27452 | 0, 3151192, 1096) | 0;
 _memcpy($$3$i$i2736 + 28548 | 0, 3152288, 1096) | 0;
 _memcpy($$3$i$i2736 + 29644 | 0, 3153384, 1096) | 0;
 _memcpy($$3$i$i2736 + 30740 | 0, 3154480, 1096) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3058);
 if ($$3$i$i2736 | 0) {
  $33025 = $$3$i$i2736 + 5 | 0;
  $33027 = (HEAP8[$33025 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33025 >> 0] = $33027;
  if (!($33027 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2736);
  HEAP32[$3058 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 222;
 HEAP16[$bitmapData + 2 >> 1] = 277;
 HEAP16[$bitmapData + 4 >> 1] = 768;
 HEAP16[$bitmapData + 6 >> 1] = 305;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31836) label = 4967; else {
  $33034 = HEAP32[918918] | 0;
  if (($33034 | 0) == (HEAP32[918916] | 0)) label = 4967; else {
   $$lcssa$i$i2723 = 3675672;
   $$lcssa8$i$i2722 = $33034;
   label = 4968;
  }
 }
 do if ((label | 0) == 4967) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31836) {
   $33041 = HEAP32[918924] | 0;
   if (($33041 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2723 = 3675696;
    $$lcssa8$i$i2722 = $33041;
    label = 4968;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31836) {
   $33046 = HEAP32[918930] | 0;
   if (($33046 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2723 = 3675720;
    $$lcssa8$i$i2722 = $33046;
    label = 4968;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31836) {
   $33051 = HEAP32[918936] | 0;
   if (($33051 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2723 = 3675744;
    $$lcssa8$i$i2722 = $33051;
    label = 4968;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31836) {
   $33056 = HEAP32[918942] | 0;
   if (($33056 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2723 = 3675768;
    $$lcssa8$i$i2722 = $33056;
    label = 4968;
    break;
   }
  }
  $$3$i$i2724 = __Znwj(31836) | 0;
 } while (0);
 if ((label | 0) == 4968) {
  $33039 = $$lcssa8$i$i2722 + -4 | 0;
  HEAP32[$$lcssa$i$i2723 >> 2] = $33039;
  $$3$i$i2724 = HEAP32[$33039 >> 2] | 0;
 }
 $33060 = $$3$i$i2724 + 52 | 0;
 HEAP16[$$3$i$i2724 >> 1] = 548;
 HEAP16[$$3$i$i2724 + 2 >> 1] = 29;
 HEAP8[$$3$i$i2724 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2724 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2724 + 8 >> 2] = 1096;
 HEAP32[$$3$i$i2724 + 12 >> 2] = 31784;
 HEAP32[$$3$i$i2724 + 16 >> 2] = $33060;
 HEAP32[$$3$i$i2724 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2724 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2724 + 48 >> 0] = 0;
 HEAP32[$3059 >> 2] = $$3$i$i2724;
 _memcpy($33060 | 0, 3155576, 1096) | 0;
 _memcpy($$3$i$i2724 + 1148 | 0, 3156672, 1096) | 0;
 _memcpy($$3$i$i2724 + 2244 | 0, 3157768, 1096) | 0;
 _memcpy($$3$i$i2724 + 3340 | 0, 3158864, 1096) | 0;
 _memcpy($$3$i$i2724 + 4436 | 0, 3159960, 1096) | 0;
 _memcpy($$3$i$i2724 + 5532 | 0, 3161056, 1096) | 0;
 _memcpy($$3$i$i2724 + 6628 | 0, 3162152, 1096) | 0;
 _memcpy($$3$i$i2724 + 7724 | 0, 3163248, 1096) | 0;
 _memcpy($$3$i$i2724 + 8820 | 0, 3164344, 1096) | 0;
 _memcpy($$3$i$i2724 + 9916 | 0, 3165440, 1096) | 0;
 _memcpy($$3$i$i2724 + 11012 | 0, 3166536, 1096) | 0;
 _memcpy($$3$i$i2724 + 12108 | 0, 3167632, 1096) | 0;
 _memcpy($$3$i$i2724 + 13204 | 0, 3168728, 1096) | 0;
 _memcpy($$3$i$i2724 + 14300 | 0, 3169824, 1096) | 0;
 _memcpy($$3$i$i2724 + 15396 | 0, 3170920, 1096) | 0;
 _memcpy($$3$i$i2724 + 16492 | 0, 3172016, 1096) | 0;
 _memcpy($$3$i$i2724 + 17588 | 0, 3173112, 1096) | 0;
 _memcpy($$3$i$i2724 + 18684 | 0, 3174208, 1096) | 0;
 _memcpy($$3$i$i2724 + 19780 | 0, 3175304, 1096) | 0;
 _memcpy($$3$i$i2724 + 20876 | 0, 3176400, 1096) | 0;
 _memcpy($$3$i$i2724 + 21972 | 0, 3177496, 1096) | 0;
 _memcpy($$3$i$i2724 + 23068 | 0, 3178592, 1096) | 0;
 _memcpy($$3$i$i2724 + 24164 | 0, 3179688, 1096) | 0;
 _memcpy($$3$i$i2724 + 25260 | 0, 3180784, 1096) | 0;
 _memcpy($$3$i$i2724 + 26356 | 0, 3181880, 1096) | 0;
 _memcpy($$3$i$i2724 + 27452 | 0, 3182976, 1096) | 0;
 _memcpy($$3$i$i2724 + 28548 | 0, 3184072, 1096) | 0;
 _memcpy($$3$i$i2724 + 29644 | 0, 3185168, 1096) | 0;
 _memcpy($$3$i$i2724 + 30740 | 0, 3186264, 1096) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3059);
 if ($$3$i$i2724 | 0) {
  $33099 = $$3$i$i2724 + 5 | 0;
  $33101 = (HEAP8[$33099 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33099 >> 0] = $33101;
  if (!($33101 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2724);
  HEAP32[$3059 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 222;
 HEAP16[$bitmapData + 2 >> 1] = 306;
 HEAP16[$bitmapData + 4 >> 1] = 768;
 HEAP16[$bitmapData + 6 >> 1] = 334;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31836) label = 4983; else {
  $33108 = HEAP32[918918] | 0;
  if (($33108 | 0) == (HEAP32[918916] | 0)) label = 4983; else {
   $$lcssa$i$i2711 = 3675672;
   $$lcssa8$i$i2710 = $33108;
   label = 4984;
  }
 }
 do if ((label | 0) == 4983) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31836) {
   $33115 = HEAP32[918924] | 0;
   if (($33115 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2711 = 3675696;
    $$lcssa8$i$i2710 = $33115;
    label = 4984;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31836) {
   $33120 = HEAP32[918930] | 0;
   if (($33120 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2711 = 3675720;
    $$lcssa8$i$i2710 = $33120;
    label = 4984;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31836) {
   $33125 = HEAP32[918936] | 0;
   if (($33125 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2711 = 3675744;
    $$lcssa8$i$i2710 = $33125;
    label = 4984;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31836) {
   $33130 = HEAP32[918942] | 0;
   if (($33130 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2711 = 3675768;
    $$lcssa8$i$i2710 = $33130;
    label = 4984;
    break;
   }
  }
  $$3$i$i2712 = __Znwj(31836) | 0;
 } while (0);
 if ((label | 0) == 4984) {
  $33113 = $$lcssa8$i$i2710 + -4 | 0;
  HEAP32[$$lcssa$i$i2711 >> 2] = $33113;
  $$3$i$i2712 = HEAP32[$33113 >> 2] | 0;
 }
 $33134 = $$3$i$i2712 + 52 | 0;
 HEAP16[$$3$i$i2712 >> 1] = 548;
 HEAP16[$$3$i$i2712 + 2 >> 1] = 29;
 HEAP8[$$3$i$i2712 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2712 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2712 + 8 >> 2] = 1096;
 HEAP32[$$3$i$i2712 + 12 >> 2] = 31784;
 HEAP32[$$3$i$i2712 + 16 >> 2] = $33134;
 HEAP32[$$3$i$i2712 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2712 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2712 + 48 >> 0] = 0;
 HEAP32[$3060 >> 2] = $$3$i$i2712;
 _memcpy($33134 | 0, 3187360, 1096) | 0;
 _memcpy($$3$i$i2712 + 1148 | 0, 3188456, 1096) | 0;
 _memcpy($$3$i$i2712 + 2244 | 0, 3189552, 1096) | 0;
 _memcpy($$3$i$i2712 + 3340 | 0, 3190648, 1096) | 0;
 _memcpy($$3$i$i2712 + 4436 | 0, 3191744, 1096) | 0;
 _memcpy($$3$i$i2712 + 5532 | 0, 3192840, 1096) | 0;
 _memcpy($$3$i$i2712 + 6628 | 0, 3193936, 1096) | 0;
 _memcpy($$3$i$i2712 + 7724 | 0, 3195032, 1096) | 0;
 _memcpy($$3$i$i2712 + 8820 | 0, 3196128, 1096) | 0;
 _memcpy($$3$i$i2712 + 9916 | 0, 3197224, 1096) | 0;
 _memcpy($$3$i$i2712 + 11012 | 0, 3198320, 1096) | 0;
 _memcpy($$3$i$i2712 + 12108 | 0, 3199416, 1096) | 0;
 _memcpy($$3$i$i2712 + 13204 | 0, 3200512, 1096) | 0;
 _memcpy($$3$i$i2712 + 14300 | 0, 3201608, 1096) | 0;
 _memcpy($$3$i$i2712 + 15396 | 0, 3202704, 1096) | 0;
 _memcpy($$3$i$i2712 + 16492 | 0, 3203800, 1096) | 0;
 _memcpy($$3$i$i2712 + 17588 | 0, 3204896, 1096) | 0;
 _memcpy($$3$i$i2712 + 18684 | 0, 3205992, 1096) | 0;
 _memcpy($$3$i$i2712 + 19780 | 0, 3207088, 1096) | 0;
 _memcpy($$3$i$i2712 + 20876 | 0, 3208184, 1096) | 0;
 _memcpy($$3$i$i2712 + 21972 | 0, 3209280, 1096) | 0;
 _memcpy($$3$i$i2712 + 23068 | 0, 3210376, 1096) | 0;
 _memcpy($$3$i$i2712 + 24164 | 0, 3211472, 1096) | 0;
 _memcpy($$3$i$i2712 + 25260 | 0, 3212568, 1096) | 0;
 _memcpy($$3$i$i2712 + 26356 | 0, 3213664, 1096) | 0;
 _memcpy($$3$i$i2712 + 27452 | 0, 3214760, 1096) | 0;
 _memcpy($$3$i$i2712 + 28548 | 0, 3215856, 1096) | 0;
 _memcpy($$3$i$i2712 + 29644 | 0, 3216952, 1096) | 0;
 _memcpy($$3$i$i2712 + 30740 | 0, 3218048, 1096) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3060);
 if ($$3$i$i2712 | 0) {
  $33173 = $$3$i$i2712 + 5 | 0;
  $33175 = (HEAP8[$33173 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33173 >> 0] = $33175;
  if (!($33175 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2712);
  HEAP32[$3060 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 222;
 HEAP16[$bitmapData + 2 >> 1] = 335;
 HEAP16[$bitmapData + 4 >> 1] = 768;
 HEAP16[$bitmapData + 6 >> 1] = 363;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31836) label = 4999; else {
  $33182 = HEAP32[918918] | 0;
  if (($33182 | 0) == (HEAP32[918916] | 0)) label = 4999; else {
   $$lcssa$i$i2663 = 3675672;
   $$lcssa8$i$i2662 = $33182;
   label = 5e3;
  }
 }
 do if ((label | 0) == 4999) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31836) {
   $33189 = HEAP32[918924] | 0;
   if (($33189 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2663 = 3675696;
    $$lcssa8$i$i2662 = $33189;
    label = 5e3;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31836) {
   $33194 = HEAP32[918930] | 0;
   if (($33194 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2663 = 3675720;
    $$lcssa8$i$i2662 = $33194;
    label = 5e3;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31836) {
   $33199 = HEAP32[918936] | 0;
   if (($33199 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2663 = 3675744;
    $$lcssa8$i$i2662 = $33199;
    label = 5e3;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31836) {
   $33204 = HEAP32[918942] | 0;
   if (($33204 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2663 = 3675768;
    $$lcssa8$i$i2662 = $33204;
    label = 5e3;
    break;
   }
  }
  $$3$i$i2664 = __Znwj(31836) | 0;
 } while (0);
 if ((label | 0) == 5e3) {
  $33187 = $$lcssa8$i$i2662 + -4 | 0;
  HEAP32[$$lcssa$i$i2663 >> 2] = $33187;
  $$3$i$i2664 = HEAP32[$33187 >> 2] | 0;
 }
 $33208 = $$3$i$i2664 + 52 | 0;
 HEAP16[$$3$i$i2664 >> 1] = 548;
 HEAP16[$$3$i$i2664 + 2 >> 1] = 29;
 HEAP8[$$3$i$i2664 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2664 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2664 + 8 >> 2] = 1096;
 HEAP32[$$3$i$i2664 + 12 >> 2] = 31784;
 HEAP32[$$3$i$i2664 + 16 >> 2] = $33208;
 HEAP32[$$3$i$i2664 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2664 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2664 + 48 >> 0] = 0;
 HEAP32[$3061 >> 2] = $$3$i$i2664;
 _memcpy($33208 | 0, 3219144, 1096) | 0;
 _memcpy($$3$i$i2664 + 1148 | 0, 3220240, 1096) | 0;
 _memcpy($$3$i$i2664 + 2244 | 0, 3221336, 1096) | 0;
 _memcpy($$3$i$i2664 + 3340 | 0, 3222432, 1096) | 0;
 _memcpy($$3$i$i2664 + 4436 | 0, 3223528, 1096) | 0;
 _memcpy($$3$i$i2664 + 5532 | 0, 3224624, 1096) | 0;
 _memcpy($$3$i$i2664 + 6628 | 0, 3225720, 1096) | 0;
 _memcpy($$3$i$i2664 + 7724 | 0, 3226816, 1096) | 0;
 _memcpy($$3$i$i2664 + 8820 | 0, 3227912, 1096) | 0;
 _memcpy($$3$i$i2664 + 9916 | 0, 3229008, 1096) | 0;
 _memcpy($$3$i$i2664 + 11012 | 0, 3230104, 1096) | 0;
 _memcpy($$3$i$i2664 + 12108 | 0, 3231200, 1096) | 0;
 _memcpy($$3$i$i2664 + 13204 | 0, 3232296, 1096) | 0;
 _memcpy($$3$i$i2664 + 14300 | 0, 3233392, 1096) | 0;
 _memcpy($$3$i$i2664 + 15396 | 0, 3234488, 1096) | 0;
 _memcpy($$3$i$i2664 + 16492 | 0, 3235584, 1096) | 0;
 _memcpy($$3$i$i2664 + 17588 | 0, 3236680, 1096) | 0;
 _memcpy($$3$i$i2664 + 18684 | 0, 3237776, 1096) | 0;
 _memcpy($$3$i$i2664 + 19780 | 0, 3238872, 1096) | 0;
 _memcpy($$3$i$i2664 + 20876 | 0, 3239968, 1096) | 0;
 _memcpy($$3$i$i2664 + 21972 | 0, 3241064, 1096) | 0;
 _memcpy($$3$i$i2664 + 23068 | 0, 3242160, 1096) | 0;
 _memcpy($$3$i$i2664 + 24164 | 0, 3243256, 1096) | 0;
 _memcpy($$3$i$i2664 + 25260 | 0, 3244352, 1096) | 0;
 _memcpy($$3$i$i2664 + 26356 | 0, 3245448, 1096) | 0;
 _memcpy($$3$i$i2664 + 27452 | 0, 3246544, 1096) | 0;
 _memcpy($$3$i$i2664 + 28548 | 0, 3247640, 1096) | 0;
 _memcpy($$3$i$i2664 + 29644 | 0, 3248736, 1096) | 0;
 _memcpy($$3$i$i2664 + 30740 | 0, 3249832, 1096) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3061);
 if ($$3$i$i2664 | 0) {
  $33247 = $$3$i$i2664 + 5 | 0;
  $33249 = (HEAP8[$33247 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33247 >> 0] = $33249;
  if (!($33249 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2664);
  HEAP32[$3061 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 222;
 HEAP16[$bitmapData + 2 >> 1] = 364;
 HEAP16[$bitmapData + 4 >> 1] = 768;
 HEAP16[$bitmapData + 6 >> 1] = 392;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31836) label = 5015; else {
  $33256 = HEAP32[918918] | 0;
  if (($33256 | 0) == (HEAP32[918916] | 0)) label = 5015; else {
   $$lcssa$i$i2603 = 3675672;
   $$lcssa8$i$i2602 = $33256;
   label = 5016;
  }
 }
 do if ((label | 0) == 5015) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31836) {
   $33263 = HEAP32[918924] | 0;
   if (($33263 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2603 = 3675696;
    $$lcssa8$i$i2602 = $33263;
    label = 5016;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31836) {
   $33268 = HEAP32[918930] | 0;
   if (($33268 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2603 = 3675720;
    $$lcssa8$i$i2602 = $33268;
    label = 5016;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31836) {
   $33273 = HEAP32[918936] | 0;
   if (($33273 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2603 = 3675744;
    $$lcssa8$i$i2602 = $33273;
    label = 5016;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31836) {
   $33278 = HEAP32[918942] | 0;
   if (($33278 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2603 = 3675768;
    $$lcssa8$i$i2602 = $33278;
    label = 5016;
    break;
   }
  }
  $$3$i$i2604 = __Znwj(31836) | 0;
 } while (0);
 if ((label | 0) == 5016) {
  $33261 = $$lcssa8$i$i2602 + -4 | 0;
  HEAP32[$$lcssa$i$i2603 >> 2] = $33261;
  $$3$i$i2604 = HEAP32[$33261 >> 2] | 0;
 }
 $33282 = $$3$i$i2604 + 52 | 0;
 HEAP16[$$3$i$i2604 >> 1] = 548;
 HEAP16[$$3$i$i2604 + 2 >> 1] = 29;
 HEAP8[$$3$i$i2604 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2604 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2604 + 8 >> 2] = 1096;
 HEAP32[$$3$i$i2604 + 12 >> 2] = 31784;
 HEAP32[$$3$i$i2604 + 16 >> 2] = $33282;
 HEAP32[$$3$i$i2604 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2604 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2604 + 48 >> 0] = 0;
 HEAP32[$3062 >> 2] = $$3$i$i2604;
 _memcpy($33282 | 0, 3250928, 1096) | 0;
 _memcpy($$3$i$i2604 + 1148 | 0, 3252024, 1096) | 0;
 _memcpy($$3$i$i2604 + 2244 | 0, 3253120, 1096) | 0;
 _memcpy($$3$i$i2604 + 3340 | 0, 3254216, 1096) | 0;
 _memcpy($$3$i$i2604 + 4436 | 0, 3255312, 1096) | 0;
 _memcpy($$3$i$i2604 + 5532 | 0, 3256408, 1096) | 0;
 _memcpy($$3$i$i2604 + 6628 | 0, 3257504, 1096) | 0;
 _memcpy($$3$i$i2604 + 7724 | 0, 3258600, 1096) | 0;
 _memcpy($$3$i$i2604 + 8820 | 0, 3259696, 1096) | 0;
 _memcpy($$3$i$i2604 + 9916 | 0, 3260792, 1096) | 0;
 _memcpy($$3$i$i2604 + 11012 | 0, 3261888, 1096) | 0;
 _memcpy($$3$i$i2604 + 12108 | 0, 3262984, 1096) | 0;
 _memcpy($$3$i$i2604 + 13204 | 0, 3264080, 1096) | 0;
 _memcpy($$3$i$i2604 + 14300 | 0, 3265176, 1096) | 0;
 _memcpy($$3$i$i2604 + 15396 | 0, 3266272, 1096) | 0;
 _memcpy($$3$i$i2604 + 16492 | 0, 3267368, 1096) | 0;
 _memcpy($$3$i$i2604 + 17588 | 0, 3268464, 1096) | 0;
 _memcpy($$3$i$i2604 + 18684 | 0, 3269560, 1096) | 0;
 _memcpy($$3$i$i2604 + 19780 | 0, 3270656, 1096) | 0;
 _memcpy($$3$i$i2604 + 20876 | 0, 3271752, 1096) | 0;
 _memcpy($$3$i$i2604 + 21972 | 0, 3272848, 1096) | 0;
 _memcpy($$3$i$i2604 + 23068 | 0, 3273944, 1096) | 0;
 _memcpy($$3$i$i2604 + 24164 | 0, 3275040, 1096) | 0;
 _memcpy($$3$i$i2604 + 25260 | 0, 3276136, 1096) | 0;
 _memcpy($$3$i$i2604 + 26356 | 0, 3277232, 1096) | 0;
 _memcpy($$3$i$i2604 + 27452 | 0, 3278328, 1096) | 0;
 _memcpy($$3$i$i2604 + 28548 | 0, 3279424, 1096) | 0;
 _memcpy($$3$i$i2604 + 29644 | 0, 3280520, 1096) | 0;
 _memcpy($$3$i$i2604 + 30740 | 0, 3281616, 1096) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3062);
 if ($$3$i$i2604 | 0) {
  $33321 = $$3$i$i2604 + 5 | 0;
  $33323 = (HEAP8[$33321 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33321 >> 0] = $33323;
  if (!($33323 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2604);
  HEAP32[$3062 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 222;
 HEAP16[$bitmapData + 2 >> 1] = 393;
 HEAP16[$bitmapData + 4 >> 1] = 768;
 HEAP16[$bitmapData + 6 >> 1] = 415;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 25260) label = 5031; else {
  $33330 = HEAP32[918918] | 0;
  if (($33330 | 0) == (HEAP32[918916] | 0)) label = 5031; else {
   $$lcssa$i$i2543 = 3675672;
   $$lcssa8$i$i2542 = $33330;
   label = 5032;
  }
 }
 do if ((label | 0) == 5031) {
  if ((HEAP32[918925] | 0) >>> 0 >= 25260) {
   $33337 = HEAP32[918924] | 0;
   if (($33337 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2543 = 3675696;
    $$lcssa8$i$i2542 = $33337;
    label = 5032;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 25260) {
   $33342 = HEAP32[918930] | 0;
   if (($33342 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2543 = 3675720;
    $$lcssa8$i$i2542 = $33342;
    label = 5032;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 25260) {
   $33347 = HEAP32[918936] | 0;
   if (($33347 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2543 = 3675744;
    $$lcssa8$i$i2542 = $33347;
    label = 5032;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 25260) {
   $33352 = HEAP32[918942] | 0;
   if (($33352 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2543 = 3675768;
    $$lcssa8$i$i2542 = $33352;
    label = 5032;
    break;
   }
  }
  $$3$i$i2544 = __Znwj(25260) | 0;
 } while (0);
 if ((label | 0) == 5032) {
  $33335 = $$lcssa8$i$i2542 + -4 | 0;
  HEAP32[$$lcssa$i$i2543 >> 2] = $33335;
  $$3$i$i2544 = HEAP32[$33335 >> 2] | 0;
 }
 $33356 = $$3$i$i2544 + 52 | 0;
 HEAP16[$$3$i$i2544 >> 1] = 548;
 HEAP16[$$3$i$i2544 + 2 >> 1] = 23;
 HEAP8[$$3$i$i2544 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2544 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2544 + 8 >> 2] = 1096;
 HEAP32[$$3$i$i2544 + 12 >> 2] = 25208;
 HEAP32[$$3$i$i2544 + 16 >> 2] = $33356;
 HEAP32[$$3$i$i2544 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2544 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2544 + 48 >> 0] = 0;
 HEAP32[$3063 >> 2] = $$3$i$i2544;
 _memcpy($33356 | 0, 3282712, 1096) | 0;
 _memcpy($$3$i$i2544 + 1148 | 0, 3283808, 1096) | 0;
 _memcpy($$3$i$i2544 + 2244 | 0, 3284904, 1096) | 0;
 _memcpy($$3$i$i2544 + 3340 | 0, 3286e3, 1096) | 0;
 _memcpy($$3$i$i2544 + 4436 | 0, 3287096, 1096) | 0;
 _memcpy($$3$i$i2544 + 5532 | 0, 3288192, 1096) | 0;
 _memcpy($$3$i$i2544 + 6628 | 0, 3289288, 1096) | 0;
 _memcpy($$3$i$i2544 + 7724 | 0, 3290384, 1096) | 0;
 _memcpy($$3$i$i2544 + 8820 | 0, 3291480, 1096) | 0;
 _memcpy($$3$i$i2544 + 9916 | 0, 3292576, 1096) | 0;
 _memcpy($$3$i$i2544 + 11012 | 0, 3293672, 1096) | 0;
 _memcpy($$3$i$i2544 + 12108 | 0, 3294768, 1096) | 0;
 _memcpy($$3$i$i2544 + 13204 | 0, 3295864, 1096) | 0;
 _memcpy($$3$i$i2544 + 14300 | 0, 3296960, 1096) | 0;
 _memcpy($$3$i$i2544 + 15396 | 0, 3298056, 1096) | 0;
 _memcpy($$3$i$i2544 + 16492 | 0, 3299152, 1096) | 0;
 _memcpy($$3$i$i2544 + 17588 | 0, 3300248, 1096) | 0;
 _memcpy($$3$i$i2544 + 18684 | 0, 3301344, 1096) | 0;
 _memcpy($$3$i$i2544 + 19780 | 0, 3302440, 1096) | 0;
 _memcpy($$3$i$i2544 + 20876 | 0, 3303536, 1096) | 0;
 _memcpy($$3$i$i2544 + 21972 | 0, 3304632, 1096) | 0;
 _memcpy($$3$i$i2544 + 23068 | 0, 3305728, 1096) | 0;
 _memcpy($$3$i$i2544 + 24164 | 0, 3306824, 1096) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3063);
 if ($$3$i$i2544 | 0) {
  $33389 = $$3$i$i2544 + 5 | 0;
  $33391 = (HEAP8[$33389 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33389 >> 0] = $33391;
  if (!($33391 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2544);
  HEAP32[$3063 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 233;
 HEAP16[$bitmapData + 2 >> 1] = 197;
 HEAP16[$bitmapData + 4 >> 1] = 413;
 HEAP16[$bitmapData + 6 >> 1] = 227;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 11460) label = 5047; else {
  $33398 = HEAP32[918918] | 0;
  if (($33398 | 0) == (HEAP32[918916] | 0)) label = 5047; else {
   $$lcssa$i$i2483 = 3675672;
   $$lcssa8$i$i2482 = $33398;
   label = 5048;
  }
 }
 do if ((label | 0) == 5047) {
  if ((HEAP32[918925] | 0) >>> 0 >= 11460) {
   $33405 = HEAP32[918924] | 0;
   if (($33405 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2483 = 3675696;
    $$lcssa8$i$i2482 = $33405;
    label = 5048;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 11460) {
   $33410 = HEAP32[918930] | 0;
   if (($33410 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2483 = 3675720;
    $$lcssa8$i$i2482 = $33410;
    label = 5048;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 11460) {
   $33415 = HEAP32[918936] | 0;
   if (($33415 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2483 = 3675744;
    $$lcssa8$i$i2482 = $33415;
    label = 5048;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 11460) {
   $33420 = HEAP32[918942] | 0;
   if (($33420 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2483 = 3675768;
    $$lcssa8$i$i2482 = $33420;
    label = 5048;
    break;
   }
  }
  $$3$i$i2484 = __Znwj(11460) | 0;
 } while (0);
 if ((label | 0) == 5048) {
  $33403 = $$lcssa8$i$i2482 + -4 | 0;
  HEAP32[$$lcssa$i$i2483 >> 2] = $33403;
  $$3$i$i2484 = HEAP32[$33403 >> 2] | 0;
 }
 $33424 = $$3$i$i2484 + 52 | 0;
 HEAP16[$$3$i$i2484 >> 1] = 184;
 HEAP16[$$3$i$i2484 + 2 >> 1] = 31;
 HEAP8[$$3$i$i2484 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2484 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2484 + 8 >> 2] = 368;
 HEAP32[$$3$i$i2484 + 12 >> 2] = 11408;
 HEAP32[$$3$i$i2484 + 16 >> 2] = $33424;
 HEAP32[$$3$i$i2484 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2484 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2484 + 48 >> 0] = 0;
 HEAP32[$3064 >> 2] = $$3$i$i2484;
 _memcpy($33424 | 0, 3307920, 368) | 0;
 _memcpy($$3$i$i2484 + 420 | 0, 3308288, 368) | 0;
 _memcpy($$3$i$i2484 + 788 | 0, 3308656, 368) | 0;
 _memcpy($$3$i$i2484 + 1156 | 0, 3309024, 368) | 0;
 _memcpy($$3$i$i2484 + 1524 | 0, 3309392, 368) | 0;
 _memcpy($$3$i$i2484 + 1892 | 0, 3309760, 368) | 0;
 _memcpy($$3$i$i2484 + 2260 | 0, 3310128, 368) | 0;
 _memcpy($$3$i$i2484 + 2628 | 0, 3310496, 368) | 0;
 _memcpy($$3$i$i2484 + 2996 | 0, 3310864, 368) | 0;
 _memcpy($$3$i$i2484 + 3364 | 0, 3311232, 368) | 0;
 _memcpy($$3$i$i2484 + 3732 | 0, 3311600, 368) | 0;
 _memcpy($$3$i$i2484 + 4100 | 0, 3311968, 368) | 0;
 _memcpy($$3$i$i2484 + 4468 | 0, 3312336, 368) | 0;
 _memcpy($$3$i$i2484 + 4836 | 0, 3312704, 368) | 0;
 _memcpy($$3$i$i2484 + 5204 | 0, 3313072, 368) | 0;
 _memcpy($$3$i$i2484 + 5572 | 0, 3313440, 368) | 0;
 _memcpy($$3$i$i2484 + 5940 | 0, 3313808, 368) | 0;
 _memcpy($$3$i$i2484 + 6308 | 0, 3314176, 368) | 0;
 _memcpy($$3$i$i2484 + 6676 | 0, 3314544, 368) | 0;
 _memcpy($$3$i$i2484 + 7044 | 0, 3314912, 368) | 0;
 _memcpy($$3$i$i2484 + 7412 | 0, 3315280, 368) | 0;
 _memcpy($$3$i$i2484 + 7780 | 0, 3315648, 368) | 0;
 _memcpy($$3$i$i2484 + 8148 | 0, 3316016, 368) | 0;
 _memcpy($$3$i$i2484 + 8516 | 0, 3316384, 368) | 0;
 _memcpy($$3$i$i2484 + 8884 | 0, 3316752, 368) | 0;
 _memcpy($$3$i$i2484 + 9252 | 0, 3317120, 368) | 0;
 _memcpy($$3$i$i2484 + 9620 | 0, 3317488, 368) | 0;
 _memcpy($$3$i$i2484 + 9988 | 0, 3317856, 368) | 0;
 _memcpy($$3$i$i2484 + 10356 | 0, 3318224, 368) | 0;
 _memcpy($$3$i$i2484 + 10724 | 0, 3318592, 368) | 0;
 _memcpy($$3$i$i2484 + 11092 | 0, 3318960, 368) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3064);
 if ($$3$i$i2484 | 0) {
  $33465 = $$3$i$i2484 + 5 | 0;
  $33467 = (HEAP8[$33465 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33465 >> 0] = $33467;
  if (!($33467 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2484);
  HEAP32[$3064 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 419;
 HEAP16[$bitmapData + 4 >> 1] = 530;
 HEAP16[$bitmapData + 6 >> 1] = 453;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 22452) label = 5063; else {
  $33474 = HEAP32[918918] | 0;
  if (($33474 | 0) == (HEAP32[918916] | 0)) label = 5063; else {
   $$lcssa$i$i2423 = 3675672;
   $$lcssa8$i$i2422 = $33474;
   label = 5064;
  }
 }
 do if ((label | 0) == 5063) {
  if ((HEAP32[918925] | 0) >>> 0 >= 22452) {
   $33481 = HEAP32[918924] | 0;
   if (($33481 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2423 = 3675696;
    $$lcssa8$i$i2422 = $33481;
    label = 5064;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 22452) {
   $33486 = HEAP32[918930] | 0;
   if (($33486 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2423 = 3675720;
    $$lcssa8$i$i2422 = $33486;
    label = 5064;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 22452) {
   $33491 = HEAP32[918936] | 0;
   if (($33491 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2423 = 3675744;
    $$lcssa8$i$i2422 = $33491;
    label = 5064;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 22452) {
   $33496 = HEAP32[918942] | 0;
   if (($33496 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2423 = 3675768;
    $$lcssa8$i$i2422 = $33496;
    label = 5064;
    break;
   }
  }
  $$3$i$i2424 = __Znwj(22452) | 0;
 } while (0);
 if ((label | 0) == 5064) {
  $33479 = $$lcssa8$i$i2422 + -4 | 0;
  HEAP32[$$lcssa$i$i2423 >> 2] = $33479;
  $$3$i$i2424 = HEAP32[$33479 >> 2] | 0;
 }
 $33500 = $$3$i$i2424 + 52 | 0;
 HEAP16[$$3$i$i2424 >> 1] = 320;
 HEAP16[$$3$i$i2424 + 2 >> 1] = 35;
 HEAP8[$$3$i$i2424 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2424 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2424 + 8 >> 2] = 640;
 HEAP32[$$3$i$i2424 + 12 >> 2] = 22400;
 HEAP32[$$3$i$i2424 + 16 >> 2] = $33500;
 HEAP32[$$3$i$i2424 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2424 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2424 + 48 >> 0] = 0;
 HEAP32[$3065 >> 2] = $$3$i$i2424;
 _memcpy($33500 | 0, 3319328, 640) | 0;
 _memcpy($$3$i$i2424 + 692 | 0, 3319968, 640) | 0;
 _memcpy($$3$i$i2424 + 1332 | 0, 3320608, 640) | 0;
 _memcpy($$3$i$i2424 + 1972 | 0, 3321248, 640) | 0;
 _memcpy($$3$i$i2424 + 2612 | 0, 3321888, 640) | 0;
 _memcpy($$3$i$i2424 + 3252 | 0, 3322528, 640) | 0;
 _memcpy($$3$i$i2424 + 3892 | 0, 3323168, 640) | 0;
 _memcpy($$3$i$i2424 + 4532 | 0, 3323808, 640) | 0;
 _memcpy($$3$i$i2424 + 5172 | 0, 3324448, 640) | 0;
 _memcpy($$3$i$i2424 + 5812 | 0, 3325088, 640) | 0;
 _memcpy($$3$i$i2424 + 6452 | 0, 3325728, 640) | 0;
 _memcpy($$3$i$i2424 + 7092 | 0, 3326368, 640) | 0;
 _memcpy($$3$i$i2424 + 7732 | 0, 3327008, 640) | 0;
 _memcpy($$3$i$i2424 + 8372 | 0, 3327648, 640) | 0;
 _memcpy($$3$i$i2424 + 9012 | 0, 3328288, 640) | 0;
 _memcpy($$3$i$i2424 + 9652 | 0, 3328928, 640) | 0;
 _memcpy($$3$i$i2424 + 10292 | 0, 3329568, 640) | 0;
 _memcpy($$3$i$i2424 + 10932 | 0, 3330208, 640) | 0;
 _memcpy($$3$i$i2424 + 11572 | 0, 3330848, 640) | 0;
 _memcpy($$3$i$i2424 + 12212 | 0, 3331488, 640) | 0;
 _memcpy($$3$i$i2424 + 12852 | 0, 3332128, 640) | 0;
 _memcpy($$3$i$i2424 + 13492 | 0, 3332768, 640) | 0;
 _memcpy($$3$i$i2424 + 14132 | 0, 3333408, 640) | 0;
 _memcpy($$3$i$i2424 + 14772 | 0, 3334048, 640) | 0;
 _memcpy($$3$i$i2424 + 15412 | 0, 3334688, 640) | 0;
 _memcpy($$3$i$i2424 + 16052 | 0, 3335328, 640) | 0;
 _memcpy($$3$i$i2424 + 16692 | 0, 3335968, 640) | 0;
 _memcpy($$3$i$i2424 + 17332 | 0, 3336608, 640) | 0;
 _memcpy($$3$i$i2424 + 17972 | 0, 3337248, 640) | 0;
 _memcpy($$3$i$i2424 + 18612 | 0, 3337888, 640) | 0;
 _memcpy($$3$i$i2424 + 19252 | 0, 3338528, 640) | 0;
 _memcpy($$3$i$i2424 + 19892 | 0, 3339168, 640) | 0;
 _memcpy($$3$i$i2424 + 20532 | 0, 3339808, 640) | 0;
 _memcpy($$3$i$i2424 + 21172 | 0, 3340448, 640) | 0;
 _memcpy($$3$i$i2424 + 21812 | 0, 3341088, 640) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3065);
 if ($$3$i$i2424 | 0) {
  $33545 = $$3$i$i2424 + 5 | 0;
  $33547 = (HEAP8[$33545 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33545 >> 0] = $33547;
  if (!($33547 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2424);
  HEAP32[$3065 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 769;
 HEAP16[$bitmapData + 2 >> 1] = 419;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 453;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 16012) label = 5079; else {
  $33554 = HEAP32[918918] | 0;
  if (($33554 | 0) == (HEAP32[918916] | 0)) label = 5079; else {
   $$lcssa$i$i2363 = 3675672;
   $$lcssa8$i$i2362 = $33554;
   label = 5080;
  }
 }
 do if ((label | 0) == 5079) {
  if ((HEAP32[918925] | 0) >>> 0 >= 16012) {
   $33561 = HEAP32[918924] | 0;
   if (($33561 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2363 = 3675696;
    $$lcssa8$i$i2362 = $33561;
    label = 5080;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 16012) {
   $33566 = HEAP32[918930] | 0;
   if (($33566 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2363 = 3675720;
    $$lcssa8$i$i2362 = $33566;
    label = 5080;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 16012) {
   $33571 = HEAP32[918936] | 0;
   if (($33571 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2363 = 3675744;
    $$lcssa8$i$i2362 = $33571;
    label = 5080;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 16012) {
   $33576 = HEAP32[918942] | 0;
   if (($33576 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2363 = 3675768;
    $$lcssa8$i$i2362 = $33576;
    label = 5080;
    break;
   }
  }
  $$3$i$i2364 = __Znwj(16012) | 0;
 } while (0);
 if ((label | 0) == 5080) {
  $33559 = $$lcssa8$i$i2362 + -4 | 0;
  HEAP32[$$lcssa$i$i2363 >> 2] = $33559;
  $$3$i$i2364 = HEAP32[$33559 >> 2] | 0;
 }
 $33580 = $$3$i$i2364 + 52 | 0;
 HEAP16[$$3$i$i2364 >> 1] = 228;
 HEAP16[$$3$i$i2364 + 2 >> 1] = 35;
 HEAP8[$$3$i$i2364 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2364 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2364 + 8 >> 2] = 456;
 HEAP32[$$3$i$i2364 + 12 >> 2] = 15960;
 HEAP32[$$3$i$i2364 + 16 >> 2] = $33580;
 HEAP32[$$3$i$i2364 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2364 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2364 + 48 >> 0] = 0;
 HEAP32[$3066 >> 2] = $$3$i$i2364;
 _memcpy($33580 | 0, 3341728, 456) | 0;
 _memcpy($$3$i$i2364 + 508 | 0, 3342184, 456) | 0;
 _memcpy($$3$i$i2364 + 964 | 0, 3342640, 456) | 0;
 _memcpy($$3$i$i2364 + 1420 | 0, 3343096, 456) | 0;
 _memcpy($$3$i$i2364 + 1876 | 0, 3343552, 456) | 0;
 _memcpy($$3$i$i2364 + 2332 | 0, 3344008, 456) | 0;
 _memcpy($$3$i$i2364 + 2788 | 0, 3344464, 456) | 0;
 _memcpy($$3$i$i2364 + 3244 | 0, 3344920, 456) | 0;
 _memcpy($$3$i$i2364 + 3700 | 0, 3345376, 456) | 0;
 _memcpy($$3$i$i2364 + 4156 | 0, 3345832, 456) | 0;
 _memcpy($$3$i$i2364 + 4612 | 0, 3346288, 456) | 0;
 _memcpy($$3$i$i2364 + 5068 | 0, 3346744, 456) | 0;
 _memcpy($$3$i$i2364 + 5524 | 0, 3347200, 456) | 0;
 _memcpy($$3$i$i2364 + 5980 | 0, 3347656, 456) | 0;
 _memcpy($$3$i$i2364 + 6436 | 0, 3348112, 456) | 0;
 _memcpy($$3$i$i2364 + 6892 | 0, 3348568, 456) | 0;
 _memcpy($$3$i$i2364 + 7348 | 0, 3349024, 456) | 0;
 _memcpy($$3$i$i2364 + 7804 | 0, 3349480, 456) | 0;
 _memcpy($$3$i$i2364 + 8260 | 0, 3349936, 456) | 0;
 _memcpy($$3$i$i2364 + 8716 | 0, 3350392, 456) | 0;
 _memcpy($$3$i$i2364 + 9172 | 0, 3350848, 456) | 0;
 _memcpy($$3$i$i2364 + 9628 | 0, 3351304, 456) | 0;
 _memcpy($$3$i$i2364 + 10084 | 0, 3351760, 456) | 0;
 _memcpy($$3$i$i2364 + 10540 | 0, 3352216, 456) | 0;
 _memcpy($$3$i$i2364 + 10996 | 0, 3352672, 456) | 0;
 _memcpy($$3$i$i2364 + 11452 | 0, 3353128, 456) | 0;
 _memcpy($$3$i$i2364 + 11908 | 0, 3353584, 456) | 0;
 _memcpy($$3$i$i2364 + 12364 | 0, 3354040, 456) | 0;
 _memcpy($$3$i$i2364 + 12820 | 0, 3354496, 456) | 0;
 _memcpy($$3$i$i2364 + 13276 | 0, 3354952, 456) | 0;
 _memcpy($$3$i$i2364 + 13732 | 0, 3355408, 456) | 0;
 _memcpy($$3$i$i2364 + 14188 | 0, 3355864, 456) | 0;
 _memcpy($$3$i$i2364 + 14644 | 0, 3356320, 456) | 0;
 _memcpy($$3$i$i2364 + 15100 | 0, 3356776, 456) | 0;
 _memcpy($$3$i$i2364 + 15556 | 0, 3357232, 456) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3066);
 if ($$3$i$i2364 | 0) {
  $33625 = $$3$i$i2364 + 5 | 0;
  $33627 = (HEAP8[$33625 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33625 >> 0] = $33627;
  if (!($33627 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2364);
  HEAP32[$3066 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 492;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 520;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31604) label = 5095; else {
  $33634 = HEAP32[918918] | 0;
  if (($33634 | 0) == (HEAP32[918916] | 0)) label = 5095; else {
   $$lcssa$i$i2303 = 3675672;
   $$lcssa8$i$i2302 = $33634;
   label = 5096;
  }
 }
 do if ((label | 0) == 5095) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31604) {
   $33641 = HEAP32[918924] | 0;
   if (($33641 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2303 = 3675696;
    $$lcssa8$i$i2302 = $33641;
    label = 5096;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31604) {
   $33646 = HEAP32[918930] | 0;
   if (($33646 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2303 = 3675720;
    $$lcssa8$i$i2302 = $33646;
    label = 5096;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31604) {
   $33651 = HEAP32[918936] | 0;
   if (($33651 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2303 = 3675744;
    $$lcssa8$i$i2302 = $33651;
    label = 5096;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31604) {
   $33656 = HEAP32[918942] | 0;
   if (($33656 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2303 = 3675768;
    $$lcssa8$i$i2302 = $33656;
    label = 5096;
    break;
   }
  }
  $$3$i$i2304 = __Znwj(31604) | 0;
 } while (0);
 if ((label | 0) == 5096) {
  $33639 = $$lcssa8$i$i2302 + -4 | 0;
  HEAP32[$$lcssa$i$i2303 >> 2] = $33639;
  $$3$i$i2304 = HEAP32[$33639 >> 2] | 0;
 }
 $33660 = $$3$i$i2304 + 52 | 0;
 HEAP16[$$3$i$i2304 >> 1] = 544;
 HEAP16[$$3$i$i2304 + 2 >> 1] = 29;
 HEAP8[$$3$i$i2304 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2304 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2304 + 8 >> 2] = 1088;
 HEAP32[$$3$i$i2304 + 12 >> 2] = 31552;
 HEAP32[$$3$i$i2304 + 16 >> 2] = $33660;
 HEAP32[$$3$i$i2304 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2304 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2304 + 48 >> 0] = 0;
 HEAP32[$3067 >> 2] = $$3$i$i2304;
 _memcpy($33660 | 0, 3357688, 1088) | 0;
 _memcpy($$3$i$i2304 + 1140 | 0, 3358776, 1088) | 0;
 _memcpy($$3$i$i2304 + 2228 | 0, 3359864, 1088) | 0;
 _memcpy($$3$i$i2304 + 3316 | 0, 3360952, 1088) | 0;
 _memcpy($$3$i$i2304 + 4404 | 0, 3362040, 1088) | 0;
 _memcpy($$3$i$i2304 + 5492 | 0, 3363128, 1088) | 0;
 _memcpy($$3$i$i2304 + 6580 | 0, 3364216, 1088) | 0;
 _memcpy($$3$i$i2304 + 7668 | 0, 3365304, 1088) | 0;
 _memcpy($$3$i$i2304 + 8756 | 0, 3366392, 1088) | 0;
 _memcpy($$3$i$i2304 + 9844 | 0, 3367480, 1088) | 0;
 _memcpy($$3$i$i2304 + 10932 | 0, 3368568, 1088) | 0;
 _memcpy($$3$i$i2304 + 12020 | 0, 3369656, 1088) | 0;
 _memcpy($$3$i$i2304 + 13108 | 0, 3370744, 1088) | 0;
 _memcpy($$3$i$i2304 + 14196 | 0, 3371832, 1088) | 0;
 _memcpy($$3$i$i2304 + 15284 | 0, 3372920, 1088) | 0;
 _memcpy($$3$i$i2304 + 16372 | 0, 3374008, 1088) | 0;
 _memcpy($$3$i$i2304 + 17460 | 0, 3375096, 1088) | 0;
 _memcpy($$3$i$i2304 + 18548 | 0, 3376184, 1088) | 0;
 _memcpy($$3$i$i2304 + 19636 | 0, 3377272, 1088) | 0;
 _memcpy($$3$i$i2304 + 20724 | 0, 3378360, 1088) | 0;
 _memcpy($$3$i$i2304 + 21812 | 0, 3379448, 1088) | 0;
 _memcpy($$3$i$i2304 + 22900 | 0, 3380536, 1088) | 0;
 _memcpy($$3$i$i2304 + 23988 | 0, 3381624, 1088) | 0;
 _memcpy($$3$i$i2304 + 25076 | 0, 3382712, 1088) | 0;
 _memcpy($$3$i$i2304 + 26164 | 0, 3383800, 1088) | 0;
 _memcpy($$3$i$i2304 + 27252 | 0, 3384888, 1088) | 0;
 _memcpy($$3$i$i2304 + 28340 | 0, 3385976, 1088) | 0;
 _memcpy($$3$i$i2304 + 29428 | 0, 3387064, 1088) | 0;
 _memcpy($$3$i$i2304 + 30516 | 0, 3388152, 1088) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3067);
 if ($$3$i$i2304 | 0) {
  $33699 = $$3$i$i2304 + 5 | 0;
  $33701 = (HEAP8[$33699 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33699 >> 0] = $33701;
  if (!($33701 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2304);
  HEAP32[$3067 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 521;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 549;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31604) label = 5111; else {
  $33708 = HEAP32[918918] | 0;
  if (($33708 | 0) == (HEAP32[918916] | 0)) label = 5111; else {
   $$lcssa$i$i2243 = 3675672;
   $$lcssa8$i$i2242 = $33708;
   label = 5112;
  }
 }
 do if ((label | 0) == 5111) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31604) {
   $33715 = HEAP32[918924] | 0;
   if (($33715 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2243 = 3675696;
    $$lcssa8$i$i2242 = $33715;
    label = 5112;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31604) {
   $33720 = HEAP32[918930] | 0;
   if (($33720 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2243 = 3675720;
    $$lcssa8$i$i2242 = $33720;
    label = 5112;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31604) {
   $33725 = HEAP32[918936] | 0;
   if (($33725 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2243 = 3675744;
    $$lcssa8$i$i2242 = $33725;
    label = 5112;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31604) {
   $33730 = HEAP32[918942] | 0;
   if (($33730 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2243 = 3675768;
    $$lcssa8$i$i2242 = $33730;
    label = 5112;
    break;
   }
  }
  $$3$i$i2244 = __Znwj(31604) | 0;
 } while (0);
 if ((label | 0) == 5112) {
  $33713 = $$lcssa8$i$i2242 + -4 | 0;
  HEAP32[$$lcssa$i$i2243 >> 2] = $33713;
  $$3$i$i2244 = HEAP32[$33713 >> 2] | 0;
 }
 $33734 = $$3$i$i2244 + 52 | 0;
 HEAP16[$$3$i$i2244 >> 1] = 544;
 HEAP16[$$3$i$i2244 + 2 >> 1] = 29;
 HEAP8[$$3$i$i2244 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2244 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2244 + 8 >> 2] = 1088;
 HEAP32[$$3$i$i2244 + 12 >> 2] = 31552;
 HEAP32[$$3$i$i2244 + 16 >> 2] = $33734;
 HEAP32[$$3$i$i2244 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2244 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2244 + 48 >> 0] = 0;
 HEAP32[$3068 >> 2] = $$3$i$i2244;
 _memcpy($33734 | 0, 3389240, 1088) | 0;
 _memcpy($$3$i$i2244 + 1140 | 0, 3390328, 1088) | 0;
 _memcpy($$3$i$i2244 + 2228 | 0, 3391416, 1088) | 0;
 _memcpy($$3$i$i2244 + 3316 | 0, 3392504, 1088) | 0;
 _memcpy($$3$i$i2244 + 4404 | 0, 3393592, 1088) | 0;
 _memcpy($$3$i$i2244 + 5492 | 0, 3394680, 1088) | 0;
 _memcpy($$3$i$i2244 + 6580 | 0, 3395768, 1088) | 0;
 _memcpy($$3$i$i2244 + 7668 | 0, 3396856, 1088) | 0;
 _memcpy($$3$i$i2244 + 8756 | 0, 3397944, 1088) | 0;
 _memcpy($$3$i$i2244 + 9844 | 0, 3399032, 1088) | 0;
 _memcpy($$3$i$i2244 + 10932 | 0, 3400120, 1088) | 0;
 _memcpy($$3$i$i2244 + 12020 | 0, 3401208, 1088) | 0;
 _memcpy($$3$i$i2244 + 13108 | 0, 3402296, 1088) | 0;
 _memcpy($$3$i$i2244 + 14196 | 0, 3403384, 1088) | 0;
 _memcpy($$3$i$i2244 + 15284 | 0, 3404472, 1088) | 0;
 _memcpy($$3$i$i2244 + 16372 | 0, 3405560, 1088) | 0;
 _memcpy($$3$i$i2244 + 17460 | 0, 3406648, 1088) | 0;
 _memcpy($$3$i$i2244 + 18548 | 0, 3407736, 1088) | 0;
 _memcpy($$3$i$i2244 + 19636 | 0, 3408824, 1088) | 0;
 _memcpy($$3$i$i2244 + 20724 | 0, 3409912, 1088) | 0;
 _memcpy($$3$i$i2244 + 21812 | 0, 3411e3, 1088) | 0;
 _memcpy($$3$i$i2244 + 22900 | 0, 3412088, 1088) | 0;
 _memcpy($$3$i$i2244 + 23988 | 0, 3413176, 1088) | 0;
 _memcpy($$3$i$i2244 + 25076 | 0, 3414264, 1088) | 0;
 _memcpy($$3$i$i2244 + 26164 | 0, 3415352, 1088) | 0;
 _memcpy($$3$i$i2244 + 27252 | 0, 3416440, 1088) | 0;
 _memcpy($$3$i$i2244 + 28340 | 0, 3417528, 1088) | 0;
 _memcpy($$3$i$i2244 + 29428 | 0, 3418616, 1088) | 0;
 _memcpy($$3$i$i2244 + 30516 | 0, 3419704, 1088) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3068);
 if ($$3$i$i2244 | 0) {
  $33773 = $$3$i$i2244 + 5 | 0;
  $33775 = (HEAP8[$33773 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33773 >> 0] = $33775;
  if (!($33775 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2244);
  HEAP32[$3068 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 550;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 574;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 27252) label = 5127; else {
  $33782 = HEAP32[918918] | 0;
  if (($33782 | 0) == (HEAP32[918916] | 0)) label = 5127; else {
   $$lcssa$i$i2231 = 3675672;
   $$lcssa8$i$i2230 = $33782;
   label = 5128;
  }
 }
 do if ((label | 0) == 5127) {
  if ((HEAP32[918925] | 0) >>> 0 >= 27252) {
   $33789 = HEAP32[918924] | 0;
   if (($33789 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2231 = 3675696;
    $$lcssa8$i$i2230 = $33789;
    label = 5128;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 27252) {
   $33794 = HEAP32[918930] | 0;
   if (($33794 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2231 = 3675720;
    $$lcssa8$i$i2230 = $33794;
    label = 5128;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 27252) {
   $33799 = HEAP32[918936] | 0;
   if (($33799 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2231 = 3675744;
    $$lcssa8$i$i2230 = $33799;
    label = 5128;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 27252) {
   $33804 = HEAP32[918942] | 0;
   if (($33804 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2231 = 3675768;
    $$lcssa8$i$i2230 = $33804;
    label = 5128;
    break;
   }
  }
  $$3$i$i2232 = __Znwj(27252) | 0;
 } while (0);
 if ((label | 0) == 5128) {
  $33787 = $$lcssa8$i$i2230 + -4 | 0;
  HEAP32[$$lcssa$i$i2231 >> 2] = $33787;
  $$3$i$i2232 = HEAP32[$33787 >> 2] | 0;
 }
 $33808 = $$3$i$i2232 + 52 | 0;
 HEAP16[$$3$i$i2232 >> 1] = 544;
 HEAP16[$$3$i$i2232 + 2 >> 1] = 25;
 HEAP8[$$3$i$i2232 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2232 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2232 + 8 >> 2] = 1088;
 HEAP32[$$3$i$i2232 + 12 >> 2] = 27200;
 HEAP32[$$3$i$i2232 + 16 >> 2] = $33808;
 HEAP32[$$3$i$i2232 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2232 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2232 + 48 >> 0] = 0;
 HEAP32[$3069 >> 2] = $$3$i$i2232;
 _memcpy($33808 | 0, 3420792, 1088) | 0;
 _memcpy($$3$i$i2232 + 1140 | 0, 3421880, 1088) | 0;
 _memcpy($$3$i$i2232 + 2228 | 0, 3422968, 1088) | 0;
 _memcpy($$3$i$i2232 + 3316 | 0, 3424056, 1088) | 0;
 _memcpy($$3$i$i2232 + 4404 | 0, 3425144, 1088) | 0;
 _memcpy($$3$i$i2232 + 5492 | 0, 3426232, 1088) | 0;
 _memcpy($$3$i$i2232 + 6580 | 0, 3427320, 1088) | 0;
 _memcpy($$3$i$i2232 + 7668 | 0, 3428408, 1088) | 0;
 _memcpy($$3$i$i2232 + 8756 | 0, 3429496, 1088) | 0;
 _memcpy($$3$i$i2232 + 9844 | 0, 3430584, 1088) | 0;
 _memcpy($$3$i$i2232 + 10932 | 0, 3431672, 1088) | 0;
 _memcpy($$3$i$i2232 + 12020 | 0, 3432760, 1088) | 0;
 _memcpy($$3$i$i2232 + 13108 | 0, 3433848, 1088) | 0;
 _memcpy($$3$i$i2232 + 14196 | 0, 3434936, 1088) | 0;
 _memcpy($$3$i$i2232 + 15284 | 0, 3436024, 1088) | 0;
 _memcpy($$3$i$i2232 + 16372 | 0, 3437112, 1088) | 0;
 _memcpy($$3$i$i2232 + 17460 | 0, 3438200, 1088) | 0;
 _memcpy($$3$i$i2232 + 18548 | 0, 3439288, 1088) | 0;
 _memcpy($$3$i$i2232 + 19636 | 0, 3440376, 1088) | 0;
 _memcpy($$3$i$i2232 + 20724 | 0, 3441464, 1088) | 0;
 _memcpy($$3$i$i2232 + 21812 | 0, 3442552, 1088) | 0;
 _memcpy($$3$i$i2232 + 22900 | 0, 3443640, 1088) | 0;
 _memcpy($$3$i$i2232 + 23988 | 0, 3444728, 1088) | 0;
 _memcpy($$3$i$i2232 + 25076 | 0, 3445816, 1088) | 0;
 _memcpy($$3$i$i2232 + 26164 | 0, 3446904, 1088) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3069);
 if ($$3$i$i2232 | 0) {
  $33843 = $$3$i$i2232 + 5 | 0;
  $33845 = (HEAP8[$33843 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33843 >> 0] = $33845;
  if (!($33845 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2232);
  HEAP32[$3069 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 575;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 603;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31604) label = 5143; else {
  $33852 = HEAP32[918918] | 0;
  if (($33852 | 0) == (HEAP32[918916] | 0)) label = 5143; else {
   $$lcssa$i$i2219 = 3675672;
   $$lcssa8$i$i2218 = $33852;
   label = 5144;
  }
 }
 do if ((label | 0) == 5143) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31604) {
   $33859 = HEAP32[918924] | 0;
   if (($33859 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2219 = 3675696;
    $$lcssa8$i$i2218 = $33859;
    label = 5144;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31604) {
   $33864 = HEAP32[918930] | 0;
   if (($33864 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2219 = 3675720;
    $$lcssa8$i$i2218 = $33864;
    label = 5144;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31604) {
   $33869 = HEAP32[918936] | 0;
   if (($33869 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2219 = 3675744;
    $$lcssa8$i$i2218 = $33869;
    label = 5144;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31604) {
   $33874 = HEAP32[918942] | 0;
   if (($33874 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2219 = 3675768;
    $$lcssa8$i$i2218 = $33874;
    label = 5144;
    break;
   }
  }
  $$3$i$i2220 = __Znwj(31604) | 0;
 } while (0);
 if ((label | 0) == 5144) {
  $33857 = $$lcssa8$i$i2218 + -4 | 0;
  HEAP32[$$lcssa$i$i2219 >> 2] = $33857;
  $$3$i$i2220 = HEAP32[$33857 >> 2] | 0;
 }
 $33878 = $$3$i$i2220 + 52 | 0;
 HEAP16[$$3$i$i2220 >> 1] = 544;
 HEAP16[$$3$i$i2220 + 2 >> 1] = 29;
 HEAP8[$$3$i$i2220 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2220 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2220 + 8 >> 2] = 1088;
 HEAP32[$$3$i$i2220 + 12 >> 2] = 31552;
 HEAP32[$$3$i$i2220 + 16 >> 2] = $33878;
 HEAP32[$$3$i$i2220 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2220 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2220 + 48 >> 0] = 0;
 HEAP32[$3070 >> 2] = $$3$i$i2220;
 _memcpy($33878 | 0, 3447992, 1088) | 0;
 _memcpy($$3$i$i2220 + 1140 | 0, 3449080, 1088) | 0;
 _memcpy($$3$i$i2220 + 2228 | 0, 3450168, 1088) | 0;
 _memcpy($$3$i$i2220 + 3316 | 0, 3451256, 1088) | 0;
 _memcpy($$3$i$i2220 + 4404 | 0, 3452344, 1088) | 0;
 _memcpy($$3$i$i2220 + 5492 | 0, 3453432, 1088) | 0;
 _memcpy($$3$i$i2220 + 6580 | 0, 3454520, 1088) | 0;
 _memcpy($$3$i$i2220 + 7668 | 0, 3455608, 1088) | 0;
 _memcpy($$3$i$i2220 + 8756 | 0, 3456696, 1088) | 0;
 _memcpy($$3$i$i2220 + 9844 | 0, 3457784, 1088) | 0;
 _memcpy($$3$i$i2220 + 10932 | 0, 3458872, 1088) | 0;
 _memcpy($$3$i$i2220 + 12020 | 0, 3459960, 1088) | 0;
 _memcpy($$3$i$i2220 + 13108 | 0, 3461048, 1088) | 0;
 _memcpy($$3$i$i2220 + 14196 | 0, 3462136, 1088) | 0;
 _memcpy($$3$i$i2220 + 15284 | 0, 3463224, 1088) | 0;
 _memcpy($$3$i$i2220 + 16372 | 0, 3464312, 1088) | 0;
 _memcpy($$3$i$i2220 + 17460 | 0, 3465400, 1088) | 0;
 _memcpy($$3$i$i2220 + 18548 | 0, 3466488, 1088) | 0;
 _memcpy($$3$i$i2220 + 19636 | 0, 3467576, 1088) | 0;
 _memcpy($$3$i$i2220 + 20724 | 0, 3468664, 1088) | 0;
 _memcpy($$3$i$i2220 + 21812 | 0, 3469752, 1088) | 0;
 _memcpy($$3$i$i2220 + 22900 | 0, 3470840, 1088) | 0;
 _memcpy($$3$i$i2220 + 23988 | 0, 3471928, 1088) | 0;
 _memcpy($$3$i$i2220 + 25076 | 0, 3473016, 1088) | 0;
 _memcpy($$3$i$i2220 + 26164 | 0, 3474104, 1088) | 0;
 _memcpy($$3$i$i2220 + 27252 | 0, 3475192, 1088) | 0;
 _memcpy($$3$i$i2220 + 28340 | 0, 3476280, 1088) | 0;
 _memcpy($$3$i$i2220 + 29428 | 0, 3477368, 1088) | 0;
 _memcpy($$3$i$i2220 + 30516 | 0, 3478456, 1088) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3070);
 if ($$3$i$i2220 | 0) {
  $33917 = $$3$i$i2220 + 5 | 0;
  $33919 = (HEAP8[$33917 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33917 >> 0] = $33919;
  if (!($33919 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2220);
  HEAP32[$3070 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 604;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 632;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 31604) label = 5159; else {
  $33926 = HEAP32[918918] | 0;
  if (($33926 | 0) == (HEAP32[918916] | 0)) label = 5159; else {
   $$lcssa$i$i2207 = 3675672;
   $$lcssa8$i$i2206 = $33926;
   label = 5160;
  }
 }
 do if ((label | 0) == 5159) {
  if ((HEAP32[918925] | 0) >>> 0 >= 31604) {
   $33933 = HEAP32[918924] | 0;
   if (($33933 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2207 = 3675696;
    $$lcssa8$i$i2206 = $33933;
    label = 5160;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 31604) {
   $33938 = HEAP32[918930] | 0;
   if (($33938 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2207 = 3675720;
    $$lcssa8$i$i2206 = $33938;
    label = 5160;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 31604) {
   $33943 = HEAP32[918936] | 0;
   if (($33943 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2207 = 3675744;
    $$lcssa8$i$i2206 = $33943;
    label = 5160;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 31604) {
   $33948 = HEAP32[918942] | 0;
   if (($33948 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2207 = 3675768;
    $$lcssa8$i$i2206 = $33948;
    label = 5160;
    break;
   }
  }
  $$3$i$i2208 = __Znwj(31604) | 0;
 } while (0);
 if ((label | 0) == 5160) {
  $33931 = $$lcssa8$i$i2206 + -4 | 0;
  HEAP32[$$lcssa$i$i2207 >> 2] = $33931;
  $$3$i$i2208 = HEAP32[$33931 >> 2] | 0;
 }
 $33952 = $$3$i$i2208 + 52 | 0;
 HEAP16[$$3$i$i2208 >> 1] = 544;
 HEAP16[$$3$i$i2208 + 2 >> 1] = 29;
 HEAP8[$$3$i$i2208 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2208 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2208 + 8 >> 2] = 1088;
 HEAP32[$$3$i$i2208 + 12 >> 2] = 31552;
 HEAP32[$$3$i$i2208 + 16 >> 2] = $33952;
 HEAP32[$$3$i$i2208 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2208 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2208 + 48 >> 0] = 0;
 HEAP32[$3071 >> 2] = $$3$i$i2208;
 _memcpy($33952 | 0, 3479544, 1088) | 0;
 _memcpy($$3$i$i2208 + 1140 | 0, 3480632, 1088) | 0;
 _memcpy($$3$i$i2208 + 2228 | 0, 3481720, 1088) | 0;
 _memcpy($$3$i$i2208 + 3316 | 0, 3482808, 1088) | 0;
 _memcpy($$3$i$i2208 + 4404 | 0, 3483896, 1088) | 0;
 _memcpy($$3$i$i2208 + 5492 | 0, 3484984, 1088) | 0;
 _memcpy($$3$i$i2208 + 6580 | 0, 3486072, 1088) | 0;
 _memcpy($$3$i$i2208 + 7668 | 0, 3487160, 1088) | 0;
 _memcpy($$3$i$i2208 + 8756 | 0, 3488248, 1088) | 0;
 _memcpy($$3$i$i2208 + 9844 | 0, 3489336, 1088) | 0;
 _memcpy($$3$i$i2208 + 10932 | 0, 3490424, 1088) | 0;
 _memcpy($$3$i$i2208 + 12020 | 0, 3491512, 1088) | 0;
 _memcpy($$3$i$i2208 + 13108 | 0, 3492600, 1088) | 0;
 _memcpy($$3$i$i2208 + 14196 | 0, 3493688, 1088) | 0;
 _memcpy($$3$i$i2208 + 15284 | 0, 3494776, 1088) | 0;
 _memcpy($$3$i$i2208 + 16372 | 0, 3495864, 1088) | 0;
 _memcpy($$3$i$i2208 + 17460 | 0, 3496952, 1088) | 0;
 _memcpy($$3$i$i2208 + 18548 | 0, 3498040, 1088) | 0;
 _memcpy($$3$i$i2208 + 19636 | 0, 3499128, 1088) | 0;
 _memcpy($$3$i$i2208 + 20724 | 0, 3500216, 1088) | 0;
 _memcpy($$3$i$i2208 + 21812 | 0, 3501304, 1088) | 0;
 _memcpy($$3$i$i2208 + 22900 | 0, 3502392, 1088) | 0;
 _memcpy($$3$i$i2208 + 23988 | 0, 3503480, 1088) | 0;
 _memcpy($$3$i$i2208 + 25076 | 0, 3504568, 1088) | 0;
 _memcpy($$3$i$i2208 + 26164 | 0, 3505656, 1088) | 0;
 _memcpy($$3$i$i2208 + 27252 | 0, 3506744, 1088) | 0;
 _memcpy($$3$i$i2208 + 28340 | 0, 3507832, 1088) | 0;
 _memcpy($$3$i$i2208 + 29428 | 0, 3508920, 1088) | 0;
 _memcpy($$3$i$i2208 + 30516 | 0, 3510008, 1088) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3071);
 if ($$3$i$i2208 | 0) {
  $33991 = $$3$i$i2208 + 5 | 0;
  $33993 = (HEAP8[$33991 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$33991 >> 0] = $33993;
  if (!($33993 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2208);
  HEAP32[$3071 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 225;
 HEAP16[$bitmapData + 2 >> 1] = 633;
 HEAP16[$bitmapData + 4 >> 1] = 765;
 HEAP16[$bitmapData + 6 >> 1] = 659;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 29428) label = 5175; else {
  $34000 = HEAP32[918918] | 0;
  if (($34000 | 0) == (HEAP32[918916] | 0)) label = 5175; else {
   $$lcssa$i$i2195 = 3675672;
   $$lcssa8$i$i2194 = $34000;
   label = 5176;
  }
 }
 do if ((label | 0) == 5175) {
  if ((HEAP32[918925] | 0) >>> 0 >= 29428) {
   $34007 = HEAP32[918924] | 0;
   if (($34007 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2195 = 3675696;
    $$lcssa8$i$i2194 = $34007;
    label = 5176;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 29428) {
   $34012 = HEAP32[918930] | 0;
   if (($34012 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2195 = 3675720;
    $$lcssa8$i$i2194 = $34012;
    label = 5176;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 29428) {
   $34017 = HEAP32[918936] | 0;
   if (($34017 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2195 = 3675744;
    $$lcssa8$i$i2194 = $34017;
    label = 5176;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 29428) {
   $34022 = HEAP32[918942] | 0;
   if (($34022 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2195 = 3675768;
    $$lcssa8$i$i2194 = $34022;
    label = 5176;
    break;
   }
  }
  $$3$i$i2196 = __Znwj(29428) | 0;
 } while (0);
 if ((label | 0) == 5176) {
  $34005 = $$lcssa8$i$i2194 + -4 | 0;
  HEAP32[$$lcssa$i$i2195 >> 2] = $34005;
  $$3$i$i2196 = HEAP32[$34005 >> 2] | 0;
 }
 $34026 = $$3$i$i2196 + 52 | 0;
 HEAP16[$$3$i$i2196 >> 1] = 544;
 HEAP16[$$3$i$i2196 + 2 >> 1] = 27;
 HEAP8[$$3$i$i2196 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2196 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2196 + 8 >> 2] = 1088;
 HEAP32[$$3$i$i2196 + 12 >> 2] = 29376;
 HEAP32[$$3$i$i2196 + 16 >> 2] = $34026;
 HEAP32[$$3$i$i2196 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2196 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2196 + 48 >> 0] = 0;
 HEAP32[$3072 >> 2] = $$3$i$i2196;
 _memcpy($34026 | 0, 3511096, 1088) | 0;
 _memcpy($$3$i$i2196 + 1140 | 0, 3512184, 1088) | 0;
 _memcpy($$3$i$i2196 + 2228 | 0, 3513272, 1088) | 0;
 _memcpy($$3$i$i2196 + 3316 | 0, 3514360, 1088) | 0;
 _memcpy($$3$i$i2196 + 4404 | 0, 3515448, 1088) | 0;
 _memcpy($$3$i$i2196 + 5492 | 0, 3516536, 1088) | 0;
 _memcpy($$3$i$i2196 + 6580 | 0, 3517624, 1088) | 0;
 _memcpy($$3$i$i2196 + 7668 | 0, 3518712, 1088) | 0;
 _memcpy($$3$i$i2196 + 8756 | 0, 3519800, 1088) | 0;
 _memcpy($$3$i$i2196 + 9844 | 0, 3520888, 1088) | 0;
 _memcpy($$3$i$i2196 + 10932 | 0, 3521976, 1088) | 0;
 _memcpy($$3$i$i2196 + 12020 | 0, 3523064, 1088) | 0;
 _memcpy($$3$i$i2196 + 13108 | 0, 3524152, 1088) | 0;
 _memcpy($$3$i$i2196 + 14196 | 0, 3525240, 1088) | 0;
 _memcpy($$3$i$i2196 + 15284 | 0, 3526328, 1088) | 0;
 _memcpy($$3$i$i2196 + 16372 | 0, 3527416, 1088) | 0;
 _memcpy($$3$i$i2196 + 17460 | 0, 3528504, 1088) | 0;
 _memcpy($$3$i$i2196 + 18548 | 0, 3529592, 1088) | 0;
 _memcpy($$3$i$i2196 + 19636 | 0, 3530680, 1088) | 0;
 _memcpy($$3$i$i2196 + 20724 | 0, 3531768, 1088) | 0;
 _memcpy($$3$i$i2196 + 21812 | 0, 3532856, 1088) | 0;
 _memcpy($$3$i$i2196 + 22900 | 0, 3533944, 1088) | 0;
 _memcpy($$3$i$i2196 + 23988 | 0, 3535032, 1088) | 0;
 _memcpy($$3$i$i2196 + 25076 | 0, 3536120, 1088) | 0;
 _memcpy($$3$i$i2196 + 26164 | 0, 3537208, 1088) | 0;
 _memcpy($$3$i$i2196 + 27252 | 0, 3538296, 1088) | 0;
 _memcpy($$3$i$i2196 + 28340 | 0, 3539384, 1088) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3072);
 if ($$3$i$i2196 | 0) {
  $34063 = $$3$i$i2196 + 5 | 0;
  $34065 = (HEAP8[$34063 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$34063 >> 0] = $34065;
  if (!($34065 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2196);
  HEAP32[$3072 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 769;
 HEAP16[$bitmapData + 2 >> 1] = 619;
 HEAP16[$bitmapData + 4 >> 1] = 994;
 HEAP16[$bitmapData + 6 >> 1] = 659;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 18748) label = 5191; else {
  $34072 = HEAP32[918918] | 0;
  if (($34072 | 0) == (HEAP32[918916] | 0)) label = 5191; else {
   $$lcssa$i$i2183 = 3675672;
   $$lcssa8$i$i2182 = $34072;
   label = 5192;
  }
 }
 do if ((label | 0) == 5191) {
  if ((HEAP32[918925] | 0) >>> 0 >= 18748) {
   $34079 = HEAP32[918924] | 0;
   if (($34079 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2183 = 3675696;
    $$lcssa8$i$i2182 = $34079;
    label = 5192;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 18748) {
   $34084 = HEAP32[918930] | 0;
   if (($34084 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2183 = 3675720;
    $$lcssa8$i$i2182 = $34084;
    label = 5192;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 18748) {
   $34089 = HEAP32[918936] | 0;
   if (($34089 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2183 = 3675744;
    $$lcssa8$i$i2182 = $34089;
    label = 5192;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 18748) {
   $34094 = HEAP32[918942] | 0;
   if (($34094 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2183 = 3675768;
    $$lcssa8$i$i2182 = $34094;
    label = 5192;
    break;
   }
  }
  $$3$i$i2184 = __Znwj(18748) | 0;
 } while (0);
 if ((label | 0) == 5192) {
  $34077 = $$lcssa8$i$i2182 + -4 | 0;
  HEAP32[$$lcssa$i$i2183 >> 2] = $34077;
  $$3$i$i2184 = HEAP32[$34077 >> 2] | 0;
 }
 $34098 = $$3$i$i2184 + 52 | 0;
 HEAP16[$$3$i$i2184 >> 1] = 228;
 HEAP16[$$3$i$i2184 + 2 >> 1] = 41;
 HEAP8[$$3$i$i2184 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2184 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2184 + 8 >> 2] = 456;
 HEAP32[$$3$i$i2184 + 12 >> 2] = 18696;
 HEAP32[$$3$i$i2184 + 16 >> 2] = $34098;
 HEAP32[$$3$i$i2184 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2184 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2184 + 48 >> 0] = 0;
 HEAP32[$3073 >> 2] = $$3$i$i2184;
 _memcpy($34098 | 0, 3540472, 456) | 0;
 _memcpy($$3$i$i2184 + 508 | 0, 3540928, 456) | 0;
 _memcpy($$3$i$i2184 + 964 | 0, 3541384, 456) | 0;
 _memcpy($$3$i$i2184 + 1420 | 0, 3541840, 456) | 0;
 _memcpy($$3$i$i2184 + 1876 | 0, 3542296, 456) | 0;
 _memcpy($$3$i$i2184 + 2332 | 0, 3542752, 456) | 0;
 _memcpy($$3$i$i2184 + 2788 | 0, 3543208, 456) | 0;
 _memcpy($$3$i$i2184 + 3244 | 0, 3543664, 456) | 0;
 _memcpy($$3$i$i2184 + 3700 | 0, 3544120, 456) | 0;
 _memcpy($$3$i$i2184 + 4156 | 0, 3544576, 456) | 0;
 _memcpy($$3$i$i2184 + 4612 | 0, 3545032, 456) | 0;
 _memcpy($$3$i$i2184 + 5068 | 0, 3545488, 456) | 0;
 _memcpy($$3$i$i2184 + 5524 | 0, 3545944, 456) | 0;
 _memcpy($$3$i$i2184 + 5980 | 0, 3546400, 456) | 0;
 _memcpy($$3$i$i2184 + 6436 | 0, 3546856, 456) | 0;
 _memcpy($$3$i$i2184 + 6892 | 0, 3547312, 456) | 0;
 _memcpy($$3$i$i2184 + 7348 | 0, 3547768, 456) | 0;
 _memcpy($$3$i$i2184 + 7804 | 0, 3548224, 456) | 0;
 _memcpy($$3$i$i2184 + 8260 | 0, 3548680, 456) | 0;
 _memcpy($$3$i$i2184 + 8716 | 0, 3549136, 456) | 0;
 _memcpy($$3$i$i2184 + 9172 | 0, 3549592, 456) | 0;
 _memcpy($$3$i$i2184 + 9628 | 0, 3550048, 456) | 0;
 _memcpy($$3$i$i2184 + 10084 | 0, 3550504, 456) | 0;
 _memcpy($$3$i$i2184 + 10540 | 0, 3550960, 456) | 0;
 _memcpy($$3$i$i2184 + 10996 | 0, 3551416, 456) | 0;
 _memcpy($$3$i$i2184 + 11452 | 0, 3551872, 456) | 0;
 _memcpy($$3$i$i2184 + 11908 | 0, 3552328, 456) | 0;
 _memcpy($$3$i$i2184 + 12364 | 0, 3552784, 456) | 0;
 _memcpy($$3$i$i2184 + 12820 | 0, 3553240, 456) | 0;
 _memcpy($$3$i$i2184 + 13276 | 0, 3553696, 456) | 0;
 _memcpy($$3$i$i2184 + 13732 | 0, 3554152, 456) | 0;
 _memcpy($$3$i$i2184 + 14188 | 0, 3554608, 456) | 0;
 _memcpy($$3$i$i2184 + 14644 | 0, 3555064, 456) | 0;
 _memcpy($$3$i$i2184 + 15100 | 0, 3555520, 456) | 0;
 _memcpy($$3$i$i2184 + 15556 | 0, 3555976, 456) | 0;
 _memcpy($$3$i$i2184 + 16012 | 0, 3556432, 456) | 0;
 _memcpy($$3$i$i2184 + 16468 | 0, 3556888, 456) | 0;
 _memcpy($$3$i$i2184 + 16924 | 0, 3557344, 456) | 0;
 _memcpy($$3$i$i2184 + 17380 | 0, 3557800, 456) | 0;
 _memcpy($$3$i$i2184 + 17836 | 0, 3558256, 456) | 0;
 _memcpy($$3$i$i2184 + 18292 | 0, 3558712, 456) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3073);
 if ($$3$i$i2184 | 0) {
  $34149 = $$3$i$i2184 + 5 | 0;
  $34151 = (HEAP8[$34149 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$34149 >> 0] = $34151;
  if (!($34151 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2184);
  HEAP32[$3073 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 212;
 HEAP16[$bitmapData + 2 >> 1] = 619;
 HEAP16[$bitmapData + 4 >> 1] = 221;
 HEAP16[$bitmapData + 6 >> 1] = 659;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1036) label = 5207; else {
  $34158 = HEAP32[918918] | 0;
  if (($34158 | 0) == (HEAP32[918916] | 0)) label = 5207; else {
   $$lcssa$i$i2171 = 3675672;
   $$lcssa8$i$i2170 = $34158;
   label = 5208;
  }
 }
 do if ((label | 0) == 5207) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1036) {
   $34165 = HEAP32[918924] | 0;
   if (($34165 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2171 = 3675696;
    $$lcssa8$i$i2170 = $34165;
    label = 5208;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1036) {
   $34170 = HEAP32[918930] | 0;
   if (($34170 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2171 = 3675720;
    $$lcssa8$i$i2170 = $34170;
    label = 5208;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1036) {
   $34175 = HEAP32[918936] | 0;
   if (($34175 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2171 = 3675744;
    $$lcssa8$i$i2170 = $34175;
    label = 5208;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1036) {
   $34180 = HEAP32[918942] | 0;
   if (($34180 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2171 = 3675768;
    $$lcssa8$i$i2170 = $34180;
    label = 5208;
    break;
   }
  }
  $$3$i$i2172 = __Znwj(1036) | 0;
 } while (0);
 if ((label | 0) == 5208) {
  $34163 = $$lcssa8$i$i2170 + -4 | 0;
  HEAP32[$$lcssa$i$i2171 >> 2] = $34163;
  $$3$i$i2172 = HEAP32[$34163 >> 2] | 0;
 }
 $34184 = $$3$i$i2172 + 52 | 0;
 HEAP16[$$3$i$i2172 >> 1] = 12;
 HEAP16[$$3$i$i2172 + 2 >> 1] = 41;
 HEAP8[$$3$i$i2172 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2172 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2172 + 8 >> 2] = 24;
 HEAP32[$$3$i$i2172 + 12 >> 2] = 984;
 HEAP32[$$3$i$i2172 + 16 >> 2] = $34184;
 HEAP32[$$3$i$i2172 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2172 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2172 + 48 >> 0] = 0;
 HEAP32[$3074 >> 2] = $$3$i$i2172;
 dest = $34184;
 src = 3559168;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 76 | 0;
 src = 3559192;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 100 | 0;
 src = 3559216;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 124 | 0;
 src = 3559240;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 148 | 0;
 src = 3559264;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 172 | 0;
 src = 3559288;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 196 | 0;
 src = 3559312;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 220 | 0;
 src = 3559336;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 244 | 0;
 src = 3559360;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 268 | 0;
 src = 3559384;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 292 | 0;
 src = 3559408;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 316 | 0;
 src = 3559432;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 340 | 0;
 src = 3559456;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 364 | 0;
 src = 3559480;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 388 | 0;
 src = 3559504;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 412 | 0;
 src = 3559528;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 436 | 0;
 src = 3559552;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 460 | 0;
 src = 3559576;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 484 | 0;
 src = 3559600;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 508 | 0;
 src = 3559624;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 532 | 0;
 src = 3559648;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 556 | 0;
 src = 3559672;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 580 | 0;
 src = 3559696;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 604 | 0;
 src = 3559720;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 628 | 0;
 src = 3559744;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 652 | 0;
 src = 3559768;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 676 | 0;
 src = 3559792;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 700 | 0;
 src = 3559816;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 724 | 0;
 src = 3559840;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 748 | 0;
 src = 3559864;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 772 | 0;
 src = 3559888;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 796 | 0;
 src = 3559912;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 820 | 0;
 src = 3559936;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 844 | 0;
 src = 3559960;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 868 | 0;
 src = 3559984;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 892 | 0;
 src = 3560008;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 916 | 0;
 src = 3560032;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 940 | 0;
 src = 3560056;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 964 | 0;
 src = 3560080;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 988 | 0;
 src = 3560104;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2172 + 1012 | 0;
 src = 3560128;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3074);
 if ($$3$i$i2172 | 0) {
  $34235 = $$3$i$i2172 + 5 | 0;
  $34237 = (HEAP8[$34235 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$34235 >> 0] = $34237;
  if (!($34237 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2172);
  HEAP32[$3074 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 24;
 HEAP16[$bitmapData + 2 >> 1] = 89;
 HEAP16[$bitmapData + 4 >> 1] = 118;
 HEAP16[$bitmapData + 6 >> 1] = 184;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 18484) label = 5223; else {
  $34244 = HEAP32[918918] | 0;
  if (($34244 | 0) == (HEAP32[918916] | 0)) label = 5223; else {
   $$lcssa$i$i2159 = 3675672;
   $$lcssa8$i$i2158 = $34244;
   label = 5224;
  }
 }
 do if ((label | 0) == 5223) {
  if ((HEAP32[918925] | 0) >>> 0 >= 18484) {
   $34251 = HEAP32[918924] | 0;
   if (($34251 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2159 = 3675696;
    $$lcssa8$i$i2158 = $34251;
    label = 5224;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 18484) {
   $34256 = HEAP32[918930] | 0;
   if (($34256 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2159 = 3675720;
    $$lcssa8$i$i2158 = $34256;
    label = 5224;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 18484) {
   $34261 = HEAP32[918936] | 0;
   if (($34261 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2159 = 3675744;
    $$lcssa8$i$i2158 = $34261;
    label = 5224;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 18484) {
   $34266 = HEAP32[918942] | 0;
   if (($34266 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2159 = 3675768;
    $$lcssa8$i$i2158 = $34266;
    label = 5224;
    break;
   }
  }
  $$3$i$i2160 = __Znwj(18484) | 0;
 } while (0);
 if ((label | 0) == 5224) {
  $34249 = $$lcssa8$i$i2158 + -4 | 0;
  HEAP32[$$lcssa$i$i2159 >> 2] = $34249;
  $$3$i$i2160 = HEAP32[$34249 >> 2] | 0;
 }
 $34270 = $$3$i$i2160 + 52 | 0;
 HEAP16[$$3$i$i2160 >> 1] = 96;
 HEAP16[$$3$i$i2160 + 2 >> 1] = 96;
 HEAP8[$$3$i$i2160 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2160 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2160 + 8 >> 2] = 192;
 HEAP32[$$3$i$i2160 + 12 >> 2] = 18432;
 HEAP32[$$3$i$i2160 + 16 >> 2] = $34270;
 HEAP32[$$3$i$i2160 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2160 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2160 + 48 >> 0] = 0;
 HEAP32[$3075 >> 2] = $$3$i$i2160;
 $dest$02$i2154 = $34270;
 $i$03$i2153 = 0;
 $src$01$i2155 = 3560152;
 while (1) {
  _memcpy($dest$02$i2154 | 0, $src$01$i2155 | 0, 192) | 0;
  $i$03$i2153 = $i$03$i2153 + 1 << 16 >> 16;
  if (($i$03$i2153 & 65535) >= 96) break; else {
   $dest$02$i2154 = $dest$02$i2154 + 192 | 0;
   $src$01$i2155 = $src$01$i2155 + 192 | 0;
  }
 }
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3075);
 if ($$3$i$i2160 | 0) {
  $34285 = $$3$i$i2160 + 5 | 0;
  $34287 = (HEAP8[$34285 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$34285 >> 0] = $34287;
  if (!($34287 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2160);
  HEAP32[$3075 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 5;
 HEAP16[$bitmapData + 2 >> 1] = 73;
 HEAP16[$bitmapData + 4 >> 1] = 193;
 HEAP16[$bitmapData + 6 >> 1] = 88;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6196) label = 5241; else {
  $34294 = HEAP32[918918] | 0;
  if (($34294 | 0) == (HEAP32[918916] | 0)) label = 5241; else {
   $$lcssa$i$i2147 = 3675672;
   $$lcssa8$i$i2146 = $34294;
   label = 5242;
  }
 }
 do if ((label | 0) == 5241) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6196) {
   $34301 = HEAP32[918924] | 0;
   if (($34301 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2147 = 3675696;
    $$lcssa8$i$i2146 = $34301;
    label = 5242;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6196) {
   $34306 = HEAP32[918930] | 0;
   if (($34306 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2147 = 3675720;
    $$lcssa8$i$i2146 = $34306;
    label = 5242;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6196) {
   $34311 = HEAP32[918936] | 0;
   if (($34311 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2147 = 3675744;
    $$lcssa8$i$i2146 = $34311;
    label = 5242;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6196) {
   $34316 = HEAP32[918942] | 0;
   if (($34316 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2147 = 3675768;
    $$lcssa8$i$i2146 = $34316;
    label = 5242;
    break;
   }
  }
  $$3$i$i2148 = __Znwj(6196) | 0;
 } while (0);
 if ((label | 0) == 5242) {
  $34299 = $$lcssa8$i$i2146 + -4 | 0;
  HEAP32[$$lcssa$i$i2147 >> 2] = $34299;
  $$3$i$i2148 = HEAP32[$34299 >> 2] | 0;
 }
 $34320 = $$3$i$i2148 + 52 | 0;
 HEAP16[$$3$i$i2148 >> 1] = 192;
 HEAP16[$$3$i$i2148 + 2 >> 1] = 16;
 HEAP8[$$3$i$i2148 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2148 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2148 + 8 >> 2] = 384;
 HEAP32[$$3$i$i2148 + 12 >> 2] = 6144;
 HEAP32[$$3$i$i2148 + 16 >> 2] = $34320;
 HEAP32[$$3$i$i2148 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2148 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2148 + 48 >> 0] = 0;
 HEAP32[$3076 >> 2] = $$3$i$i2148;
 _memcpy($34320 | 0, 3578584, 384) | 0;
 _memcpy($$3$i$i2148 + 436 | 0, 3578968, 384) | 0;
 _memcpy($$3$i$i2148 + 820 | 0, 3579352, 384) | 0;
 _memcpy($$3$i$i2148 + 1204 | 0, 3579736, 384) | 0;
 _memcpy($$3$i$i2148 + 1588 | 0, 3580120, 384) | 0;
 _memcpy($$3$i$i2148 + 1972 | 0, 3580504, 384) | 0;
 _memcpy($$3$i$i2148 + 2356 | 0, 3580888, 384) | 0;
 _memcpy($$3$i$i2148 + 2740 | 0, 3581272, 384) | 0;
 _memcpy($$3$i$i2148 + 3124 | 0, 3581656, 384) | 0;
 _memcpy($$3$i$i2148 + 3508 | 0, 3582040, 384) | 0;
 _memcpy($$3$i$i2148 + 3892 | 0, 3582424, 384) | 0;
 _memcpy($$3$i$i2148 + 4276 | 0, 3582808, 384) | 0;
 _memcpy($$3$i$i2148 + 4660 | 0, 3583192, 384) | 0;
 _memcpy($$3$i$i2148 + 5044 | 0, 3583576, 384) | 0;
 _memcpy($$3$i$i2148 + 5428 | 0, 3583960, 384) | 0;
 _memcpy($$3$i$i2148 + 5812 | 0, 3584344, 384) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3076);
 if ($$3$i$i2148 | 0) {
  $34346 = $$3$i$i2148 + 5 | 0;
  $34348 = (HEAP8[$34346 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$34346 >> 0] = $34348;
  if (!($34348 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2148);
  HEAP32[$3076 >> 2] = 0;
 }
 $34350 = $3077;
 HEAP32[$34350 >> 2] = 47711229;
 HEAP32[$34350 + 4 >> 2] = 2490369;
 HEAP32[$3077 + 8 >> 2] = 65535;
 HEAP16[$3078 >> 1] = 1021;
 HEAP16[$3078 + 2 >> 1] = 728;
 HEAP16[$3078 + 4 >> 1] = 1;
 HEAP16[$3078 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3077, $3078);
 $34358 = $3079;
 HEAP32[$34358 >> 2] = 50135904;
 HEAP32[$34358 + 4 >> 2] = 65693;
 HEAP32[$3079 + 8 >> 2] = 65535;
 HEAP16[$3080 >> 1] = 864;
 HEAP16[$3080 + 2 >> 1] = 765;
 HEAP16[$3080 + 4 >> 1] = 157;
 HEAP16[$3080 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3079, $3080);
 $34366 = $3081;
 HEAP32[$34366 >> 2] = 47711072;
 HEAP32[$34366 + 4 >> 2] = 2424833;
 HEAP32[$3081 + 8 >> 2] = 33808;
 HEAP16[$3082 >> 1] = 864;
 HEAP16[$3082 + 2 >> 1] = 728;
 HEAP16[$3082 + 4 >> 1] = 1;
 HEAP16[$3082 + 6 >> 1] = 37;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3081, $3082);
 $34374 = $3083;
 HEAP32[$34374 >> 2] = 47711073;
 HEAP32[$34374 + 4 >> 2] = 65692;
 HEAP32[$3083 + 8 >> 2] = 33808;
 HEAP16[$3084 >> 1] = 865;
 HEAP16[$3084 + 2 >> 1] = 728;
 HEAP16[$3084 + 4 >> 1] = 156;
 HEAP16[$3084 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3083, $3084);
 $34382 = $3085;
 HEAP32[$34382 >> 2] = 47776741;
 HEAP32[$34382 + 4 >> 2] = 2359320;
 HEAP32[$3085 + 8 >> 2] = 54937;
 HEAP16[$3086 >> 1] = 997;
 HEAP16[$3086 + 2 >> 1] = 729;
 HEAP16[$3086 + 4 >> 1] = 24;
 HEAP16[$3086 + 6 >> 1] = 36;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3085, $3086);
 $34390 = $3087;
 HEAP32[$34390 >> 2] = 47710293;
 HEAP32[$34390 + 4 >> 2] = 2491143;
 HEAP32[$3087 + 8 >> 2] = 54937;
 HEAP16[$3088 >> 1] = 85;
 HEAP16[$3088 + 2 >> 1] = 728;
 HEAP16[$3088 + 4 >> 1] = 9;
 HEAP16[$3088 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3087, $3088);
 $34398 = $3089;
 HEAP32[$34398 >> 2] = 47710293;
 HEAP32[$34398 + 4 >> 2] = 2491143;
 HEAP32[$3089 + 8 >> 2] = 54937;
 HEAP16[$3090 >> 1] = 847;
 HEAP16[$3090 + 2 >> 1] = 728;
 HEAP16[$3090 + 4 >> 1] = 13;
 HEAP16[$3090 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3089, $3090);
 $34406 = $3091;
 HEAP32[$34406 >> 2] = 47710293;
 HEAP32[$34406 + 4 >> 2] = 2491119;
 HEAP32[$3091 + 8 >> 2] = 54937;
 HEAP16[$3092 >> 1] = 85;
 HEAP16[$3092 + 2 >> 1] = 728;
 HEAP16[$3092 + 4 >> 1] = 9;
 HEAP16[$3092 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3091, $3092);
 $34414 = $3093;
 HEAP32[$34414 >> 2] = 47710293;
 HEAP32[$34414 + 4 >> 2] = 2491119;
 HEAP32[$3093 + 8 >> 2] = 54937;
 HEAP16[$3094 >> 1] = 823;
 HEAP16[$3094 + 2 >> 1] = 728;
 HEAP16[$3094 + 4 >> 1] = 13;
 HEAP16[$3094 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3093, $3094);
 $34422 = $3095;
 HEAP32[$34422 >> 2] = 47776655;
 HEAP32[$34422 + 4 >> 2] = 2359320;
 HEAP32[$3095 + 8 >> 2] = 54937;
 HEAP16[$3096 >> 1] = 911;
 HEAP16[$3096 + 2 >> 1] = 729;
 HEAP16[$3096 + 4 >> 1] = 24;
 HEAP16[$3096 + 6 >> 1] = 36;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3095, $3096);
 $34430 = $3097;
 HEAP32[$34430 >> 2] = 47710210;
 HEAP32[$34430 + 4 >> 2] = 2490451;
 HEAP32[$3097 + 8 >> 2] = 54937;
 HEAP16[$3098 >> 1] = 80;
 HEAP16[$3098 + 2 >> 1] = 728;
 HEAP16[$3098 + 4 >> 1] = 5;
 HEAP16[$3098 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3097, $3098);
 $34438 = $3099;
 HEAP32[$34438 >> 2] = 47710210;
 HEAP32[$34438 + 4 >> 2] = 2490451;
 HEAP32[$3099 + 8 >> 2] = 54937;
 HEAP16[$3100 >> 1] = 80;
 HEAP16[$3100 + 2 >> 1] = 728;
 HEAP16[$3100 + 4 >> 1] = 5;
 HEAP16[$3100 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3099, $3100);
 $34446 = $3101;
 HEAP32[$34446 >> 2] = 47776609;
 HEAP32[$34446 + 4 >> 2] = 2359312;
 HEAP32[$3101 + 8 >> 2] = 54937;
 HEAP16[$3102 >> 1] = 865;
 HEAP16[$3102 + 2 >> 1] = 729;
 HEAP16[$3102 + 4 >> 1] = 16;
 HEAP16[$3102 + 6 >> 1] = 36;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3101, $3102);
 $34454 = $3103;
 HEAP32[$34454 >> 2] = 48694119;
 HEAP32[$34454 + 4 >> 2] = 131073;
 HEAP32[$3103 + 8 >> 2] = 0;
 HEAP16[$3104 >> 1] = 871;
 HEAP16[$3104 + 2 >> 1] = 743;
 HEAP16[$3104 + 4 >> 1] = 1;
 HEAP16[$3104 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3103, $3104);
 $34462 = $3105;
 HEAP32[$34462 >> 2] = 48956263;
 HEAP32[$34462 + 4 >> 2] = 131073;
 HEAP32[$3105 + 8 >> 2] = 0;
 HEAP16[$3106 >> 1] = 871;
 HEAP16[$3106 + 2 >> 1] = 747;
 HEAP16[$3106 + 4 >> 1] = 1;
 HEAP16[$3106 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3105, $3106);
 $34470 = $3107;
 HEAP32[$34470 >> 2] = 48628584;
 HEAP32[$34470 + 4 >> 2] = 131073;
 HEAP32[$3107 + 8 >> 2] = 0;
 HEAP16[$3108 >> 1] = 872;
 HEAP16[$3108 + 2 >> 1] = 742;
 HEAP16[$3108 + 4 >> 1] = 1;
 HEAP16[$3108 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3107, $3108);
 $34478 = $3109;
 HEAP32[$34478 >> 2] = 48890728;
 HEAP32[$34478 + 4 >> 2] = 131073;
 HEAP32[$3109 + 8 >> 2] = 0;
 HEAP16[$3110 >> 1] = 872;
 HEAP16[$3110 + 2 >> 1] = 746;
 HEAP16[$3110 + 4 >> 1] = 1;
 HEAP16[$3110 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3109, $3110);
 $34486 = $3111;
 HEAP32[$34486 >> 2] = 48563049;
 HEAP32[$34486 + 4 >> 2] = 131073;
 HEAP32[$3111 + 8 >> 2] = 0;
 HEAP16[$3112 >> 1] = 873;
 HEAP16[$3112 + 2 >> 1] = 741;
 HEAP16[$3112 + 4 >> 1] = 1;
 HEAP16[$3112 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3111, $3112);
 $34494 = $3113;
 HEAP32[$34494 >> 2] = 48825193;
 HEAP32[$34494 + 4 >> 2] = 131073;
 HEAP32[$3113 + 8 >> 2] = 0;
 HEAP16[$3114 >> 1] = 873;
 HEAP16[$3114 + 2 >> 1] = 745;
 HEAP16[$3114 + 4 >> 1] = 1;
 HEAP16[$3114 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3113, $3114);
 $34502 = $3115;
 HEAP32[$34502 >> 2] = 48628586;
 HEAP32[$34502 + 4 >> 2] = 131073;
 HEAP32[$3115 + 8 >> 2] = 0;
 HEAP16[$3116 >> 1] = 874;
 HEAP16[$3116 + 2 >> 1] = 742;
 HEAP16[$3116 + 4 >> 1] = 1;
 HEAP16[$3116 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3115, $3116);
 $34510 = $3117;
 HEAP32[$34510 >> 2] = 48890730;
 HEAP32[$34510 + 4 >> 2] = 131073;
 HEAP32[$3117 + 8 >> 2] = 0;
 HEAP16[$3118 >> 1] = 874;
 HEAP16[$3118 + 2 >> 1] = 746;
 HEAP16[$3118 + 4 >> 1] = 1;
 HEAP16[$3118 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3117, $3118);
 $34518 = $3119;
 HEAP32[$34518 >> 2] = 48694123;
 HEAP32[$34518 + 4 >> 2] = 131073;
 HEAP32[$3119 + 8 >> 2] = 0;
 HEAP16[$3120 >> 1] = 875;
 HEAP16[$3120 + 2 >> 1] = 743;
 HEAP16[$3120 + 4 >> 1] = 1;
 HEAP16[$3120 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3119, $3120);
 $34526 = $3121;
 HEAP32[$34526 >> 2] = 48956267;
 HEAP32[$34526 + 4 >> 2] = 131073;
 HEAP32[$3121 + 8 >> 2] = 0;
 HEAP16[$3122 >> 1] = 875;
 HEAP16[$3122 + 2 >> 1] = 747;
 HEAP16[$3122 + 4 >> 1] = 1;
 HEAP16[$3122 + 6 >> 1] = 2;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3121, $3122);
 $34534 = $3123;
 HEAP32[$34534 >> 2] = 47841369;
 HEAP32[$34534 + 4 >> 2] = 2228225;
 HEAP32[$3123 + 8 >> 2] = 33808;
 HEAP16[$3124 >> 1] = 89;
 HEAP16[$3124 + 2 >> 1] = 730;
 HEAP16[$3124 + 4 >> 1] = 1;
 HEAP16[$3124 + 6 >> 1] = 34;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3123, $3124);
 $34542 = $3125;
 HEAP32[$34542 >> 2] = 50004055;
 HEAP32[$34542 + 4 >> 2] = 65538;
 HEAP32[$3125 + 8 >> 2] = 33808;
 HEAP16[$3126 >> 1] = 87;
 HEAP16[$3126 + 2 >> 1] = 763;
 HEAP16[$3126 + 4 >> 1] = 2;
 HEAP16[$3126 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3125, $3126);
 $34550 = $3127;
 HEAP32[$34550 >> 2] = 47841367;
 HEAP32[$34550 + 4 >> 2] = 2162689;
 HEAP32[$3127 + 8 >> 2] = 65535;
 HEAP16[$3128 >> 1] = 87;
 HEAP16[$3128 + 2 >> 1] = 730;
 HEAP16[$3128 + 4 >> 1] = 1;
 HEAP16[$3128 + 6 >> 1] = 33;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3127, $3128);
 $34558 = $3129;
 HEAP32[$34558 >> 2] = 47841368;
 HEAP32[$34558 + 4 >> 2] = 65537;
 HEAP32[$3129 + 8 >> 2] = 65535;
 HEAP16[$3130 >> 1] = 88;
 HEAP16[$3130 + 2 >> 1] = 730;
 HEAP16[$3130 + 4 >> 1] = 1;
 HEAP16[$3130 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3129, $3130);
 $34566 = $3131;
 HEAP32[$34566 >> 2] = 47906904;
 HEAP32[$34566 + 4 >> 2] = 2097153;
 HEAP32[$3131 + 8 >> 2] = 54937;
 HEAP16[$3132 >> 1] = 88;
 HEAP16[$3132 + 2 >> 1] = 731;
 HEAP16[$3132 + 4 >> 1] = 1;
 HEAP16[$3132 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3131, $3132);
 $34574 = $3133;
 HEAP32[$34574 >> 2] = 47842111;
 HEAP32[$34574 + 4 >> 2] = 2228225;
 HEAP32[$3133 + 8 >> 2] = 33808;
 HEAP16[$3134 >> 1] = 831;
 HEAP16[$3134 + 2 >> 1] = 730;
 HEAP16[$3134 + 4 >> 1] = 1;
 HEAP16[$3134 + 6 >> 1] = 34;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3133, $3134);
 $34582 = $3135;
 HEAP32[$34582 >> 2] = 50004797;
 HEAP32[$34582 + 4 >> 2] = 65538;
 HEAP32[$3135 + 8 >> 2] = 33808;
 HEAP16[$3136 >> 1] = 829;
 HEAP16[$3136 + 2 >> 1] = 763;
 HEAP16[$3136 + 4 >> 1] = 2;
 HEAP16[$3136 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3135, $3136);
 $34590 = $3137;
 HEAP32[$34590 >> 2] = 47842109;
 HEAP32[$34590 + 4 >> 2] = 2162689;
 HEAP32[$3137 + 8 >> 2] = 65535;
 HEAP16[$3138 >> 1] = 829;
 HEAP16[$3138 + 2 >> 1] = 730;
 HEAP16[$3138 + 4 >> 1] = 1;
 HEAP16[$3138 + 6 >> 1] = 33;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3137, $3138);
 $34598 = $3139;
 HEAP32[$34598 >> 2] = 47842110;
 HEAP32[$34598 + 4 >> 2] = 65537;
 HEAP32[$3139 + 8 >> 2] = 65535;
 HEAP16[$3140 >> 1] = 830;
 HEAP16[$3140 + 2 >> 1] = 730;
 HEAP16[$3140 + 4 >> 1] = 1;
 HEAP16[$3140 + 6 >> 1] = 1;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3139, $3140);
 $34606 = $3141;
 HEAP32[$34606 >> 2] = 47907646;
 HEAP32[$34606 + 4 >> 2] = 2097153;
 HEAP32[$3141 + 8 >> 2] = 54937;
 HEAP16[$3142 >> 1] = 830;
 HEAP16[$3142 + 2 >> 1] = 731;
 HEAP16[$3142 + 4 >> 1] = 1;
 HEAP16[$3142 + 6 >> 1] = 32;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3141, $3142);
 $34614 = $3143;
 HEAP32[$34614 >> 2] = 47710210;
 HEAP32[$34614 + 4 >> 2] = 2490451;
 HEAP32[$3143 + 8 >> 2] = 54937;
 HEAP16[$3144 >> 1] = 80;
 HEAP16[$3144 + 2 >> 1] = 728;
 HEAP16[$3144 + 4 >> 1] = 5;
 HEAP16[$3144 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3143, $3144);
 $34622 = $3145;
 HEAP32[$34622 >> 2] = 47710210;
 HEAP32[$34622 + 4 >> 2] = 2490451;
 HEAP32[$3145 + 8 >> 2] = 54937;
 HEAP16[$3146 >> 1] = 80;
 HEAP16[$3146 + 2 >> 1] = 728;
 HEAP16[$3146 + 4 >> 1] = 5;
 HEAP16[$3146 + 6 >> 1] = 38;
 __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($front, $3145, $3146);
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 2;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 79;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 6132) label = 5257; else {
  $34635 = HEAP32[918918] | 0;
  if (($34635 | 0) == (HEAP32[918916] | 0)) label = 5257; else {
   $$lcssa$i$i2135 = 3675672;
   $$lcssa8$i$i2134 = $34635;
   label = 5258;
  }
 }
 do if ((label | 0) == 5257) {
  if ((HEAP32[918925] | 0) >>> 0 >= 6132) {
   $34642 = HEAP32[918924] | 0;
   if (($34642 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2135 = 3675696;
    $$lcssa8$i$i2134 = $34642;
    label = 5258;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 6132) {
   $34647 = HEAP32[918930] | 0;
   if (($34647 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2135 = 3675720;
    $$lcssa8$i$i2134 = $34647;
    label = 5258;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 6132) {
   $34652 = HEAP32[918936] | 0;
   if (($34652 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2135 = 3675744;
    $$lcssa8$i$i2134 = $34652;
    label = 5258;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 6132) {
   $34657 = HEAP32[918942] | 0;
   if (($34657 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2135 = 3675768;
    $$lcssa8$i$i2134 = $34657;
    label = 5258;
    break;
   }
  }
  $$3$i$i2136 = __Znwj(6132) | 0;
 } while (0);
 if ((label | 0) == 5258) {
  $34640 = $$lcssa8$i$i2134 + -4 | 0;
  HEAP32[$$lcssa$i$i2135 >> 2] = $34640;
  $$3$i$i2136 = HEAP32[$34640 >> 2] | 0;
 }
 $34661 = $$3$i$i2136 + 52 | 0;
 HEAP16[$$3$i$i2136 >> 1] = 80;
 HEAP16[$$3$i$i2136 + 2 >> 1] = 38;
 HEAP8[$$3$i$i2136 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2136 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2136 + 8 >> 2] = 160;
 HEAP32[$$3$i$i2136 + 12 >> 2] = 6080;
 HEAP32[$$3$i$i2136 + 16 >> 2] = $34661;
 HEAP32[$$3$i$i2136 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2136 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2136 + 48 >> 0] = 0;
 HEAP32[$3147 >> 2] = $$3$i$i2136;
 _memcpy($34661 | 0, 3584728, 160) | 0;
 _memcpy($$3$i$i2136 + 212 | 0, 3584888, 160) | 0;
 _memcpy($$3$i$i2136 + 372 | 0, 3585048, 160) | 0;
 _memcpy($$3$i$i2136 + 532 | 0, 3585208, 160) | 0;
 _memcpy($$3$i$i2136 + 692 | 0, 3585368, 160) | 0;
 _memcpy($$3$i$i2136 + 852 | 0, 3585528, 160) | 0;
 _memcpy($$3$i$i2136 + 1012 | 0, 3585688, 160) | 0;
 _memcpy($$3$i$i2136 + 1172 | 0, 3585848, 160) | 0;
 _memcpy($$3$i$i2136 + 1332 | 0, 3586008, 160) | 0;
 _memcpy($$3$i$i2136 + 1492 | 0, 3586168, 160) | 0;
 _memcpy($$3$i$i2136 + 1652 | 0, 3586328, 160) | 0;
 _memcpy($$3$i$i2136 + 1812 | 0, 3586488, 160) | 0;
 _memcpy($$3$i$i2136 + 1972 | 0, 3586648, 160) | 0;
 _memcpy($$3$i$i2136 + 2132 | 0, 3586808, 160) | 0;
 _memcpy($$3$i$i2136 + 2292 | 0, 3586968, 160) | 0;
 _memcpy($$3$i$i2136 + 2452 | 0, 3587128, 160) | 0;
 _memcpy($$3$i$i2136 + 2612 | 0, 3587288, 160) | 0;
 _memcpy($$3$i$i2136 + 2772 | 0, 3587448, 160) | 0;
 _memcpy($$3$i$i2136 + 2932 | 0, 3587608, 160) | 0;
 _memcpy($$3$i$i2136 + 3092 | 0, 3587768, 160) | 0;
 _memcpy($$3$i$i2136 + 3252 | 0, 3587928, 160) | 0;
 _memcpy($$3$i$i2136 + 3412 | 0, 3588088, 160) | 0;
 _memcpy($$3$i$i2136 + 3572 | 0, 3588248, 160) | 0;
 _memcpy($$3$i$i2136 + 3732 | 0, 3588408, 160) | 0;
 _memcpy($$3$i$i2136 + 3892 | 0, 3588568, 160) | 0;
 _memcpy($$3$i$i2136 + 4052 | 0, 3588728, 160) | 0;
 _memcpy($$3$i$i2136 + 4212 | 0, 3588888, 160) | 0;
 _memcpy($$3$i$i2136 + 4372 | 0, 3589048, 160) | 0;
 _memcpy($$3$i$i2136 + 4532 | 0, 3589208, 160) | 0;
 _memcpy($$3$i$i2136 + 4692 | 0, 3589368, 160) | 0;
 _memcpy($$3$i$i2136 + 4852 | 0, 3589528, 160) | 0;
 _memcpy($$3$i$i2136 + 5012 | 0, 3589688, 160) | 0;
 _memcpy($$3$i$i2136 + 5172 | 0, 3589848, 160) | 0;
 _memcpy($$3$i$i2136 + 5332 | 0, 3590008, 160) | 0;
 _memcpy($$3$i$i2136 + 5492 | 0, 3590168, 160) | 0;
 _memcpy($$3$i$i2136 + 5652 | 0, 3590328, 160) | 0;
 _memcpy($$3$i$i2136 + 5812 | 0, 3590488, 160) | 0;
 _memcpy($$3$i$i2136 + 5972 | 0, 3590648, 160) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3147);
 if ($$3$i$i2136 | 0) {
  $34709 = $$3$i$i2136 + 5 | 0;
  $34711 = (HEAP8[$34709 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$34709 >> 0] = $34711;
  if (!($34711 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2136);
  HEAP32[$3147 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 822;
 HEAP16[$bitmapData + 6 >> 1] = 748;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 30796) label = 5273; else {
  $34718 = HEAP32[918918] | 0;
  if (($34718 | 0) == (HEAP32[918916] | 0)) label = 5273; else {
   $$lcssa$i$i2123 = 3675672;
   $$lcssa8$i$i2122 = $34718;
   label = 5274;
  }
 }
 do if ((label | 0) == 5273) {
  if ((HEAP32[918925] | 0) >>> 0 >= 30796) {
   $34725 = HEAP32[918924] | 0;
   if (($34725 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2123 = 3675696;
    $$lcssa8$i$i2122 = $34725;
    label = 5274;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 30796) {
   $34730 = HEAP32[918930] | 0;
   if (($34730 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2123 = 3675720;
    $$lcssa8$i$i2122 = $34730;
    label = 5274;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 30796) {
   $34735 = HEAP32[918936] | 0;
   if (($34735 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2123 = 3675744;
    $$lcssa8$i$i2122 = $34735;
    label = 5274;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 30796) {
   $34740 = HEAP32[918942] | 0;
   if (($34740 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2123 = 3675768;
    $$lcssa8$i$i2122 = $34740;
    label = 5274;
    break;
   }
  }
  $$3$i$i2124 = __Znwj(30796) | 0;
 } while (0);
 if ((label | 0) == 5274) {
  $34723 = $$lcssa8$i$i2122 + -4 | 0;
  HEAP32[$$lcssa$i$i2123 >> 2] = $34723;
  $$3$i$i2124 = HEAP32[$34723 >> 2] | 0;
 }
 $34744 = $$3$i$i2124 + 52 | 0;
 HEAP16[$$3$i$i2124 >> 1] = 732;
 HEAP16[$$3$i$i2124 + 2 >> 1] = 21;
 HEAP8[$$3$i$i2124 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2124 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2124 + 8 >> 2] = 1464;
 HEAP32[$$3$i$i2124 + 12 >> 2] = 30744;
 HEAP32[$$3$i$i2124 + 16 >> 2] = $34744;
 HEAP32[$$3$i$i2124 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2124 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2124 + 48 >> 0] = 0;
 HEAP32[$3148 >> 2] = $$3$i$i2124;
 _memcpy($34744 | 0, 3590808, 1464) | 0;
 _memcpy($$3$i$i2124 + 1516 | 0, 3592272, 1464) | 0;
 _memcpy($$3$i$i2124 + 2980 | 0, 3593736, 1464) | 0;
 _memcpy($$3$i$i2124 + 4444 | 0, 3595200, 1464) | 0;
 _memcpy($$3$i$i2124 + 5908 | 0, 3596664, 1464) | 0;
 _memcpy($$3$i$i2124 + 7372 | 0, 3598128, 1464) | 0;
 _memcpy($$3$i$i2124 + 8836 | 0, 3599592, 1464) | 0;
 _memcpy($$3$i$i2124 + 10300 | 0, 3601056, 1464) | 0;
 _memcpy($$3$i$i2124 + 11764 | 0, 3602520, 1464) | 0;
 _memcpy($$3$i$i2124 + 13228 | 0, 3603984, 1464) | 0;
 _memcpy($$3$i$i2124 + 14692 | 0, 3605448, 1464) | 0;
 _memcpy($$3$i$i2124 + 16156 | 0, 3606912, 1464) | 0;
 _memcpy($$3$i$i2124 + 17620 | 0, 3608376, 1464) | 0;
 _memcpy($$3$i$i2124 + 19084 | 0, 3609840, 1464) | 0;
 _memcpy($$3$i$i2124 + 20548 | 0, 3611304, 1464) | 0;
 _memcpy($$3$i$i2124 + 22012 | 0, 3612768, 1464) | 0;
 _memcpy($$3$i$i2124 + 23476 | 0, 3614232, 1464) | 0;
 _memcpy($$3$i$i2124 + 24940 | 0, 3615696, 1464) | 0;
 _memcpy($$3$i$i2124 + 26404 | 0, 3617160, 1464) | 0;
 _memcpy($$3$i$i2124 + 27868 | 0, 3618624, 1464) | 0;
 _memcpy($$3$i$i2124 + 29332 | 0, 3620088, 1464) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3148);
 if ($$3$i$i2124 | 0) {
  $34775 = $$3$i$i2124 + 5 | 0;
  $34777 = (HEAP8[$34775 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$34775 >> 0] = $34777;
  if (!($34777 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2124);
  HEAP32[$3148 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 749;
 HEAP16[$bitmapData + 4 >> 1] = 822;
 HEAP16[$bitmapData + 6 >> 1] = 761;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 19084) label = 5289; else {
  $34784 = HEAP32[918918] | 0;
  if (($34784 | 0) == (HEAP32[918916] | 0)) label = 5289; else {
   $$lcssa$i$i2111 = 3675672;
   $$lcssa8$i$i2110 = $34784;
   label = 5290;
  }
 }
 do if ((label | 0) == 5289) {
  if ((HEAP32[918925] | 0) >>> 0 >= 19084) {
   $34791 = HEAP32[918924] | 0;
   if (($34791 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2111 = 3675696;
    $$lcssa8$i$i2110 = $34791;
    label = 5290;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 19084) {
   $34796 = HEAP32[918930] | 0;
   if (($34796 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2111 = 3675720;
    $$lcssa8$i$i2110 = $34796;
    label = 5290;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 19084) {
   $34801 = HEAP32[918936] | 0;
   if (($34801 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2111 = 3675744;
    $$lcssa8$i$i2110 = $34801;
    label = 5290;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 19084) {
   $34806 = HEAP32[918942] | 0;
   if (($34806 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2111 = 3675768;
    $$lcssa8$i$i2110 = $34806;
    label = 5290;
    break;
   }
  }
  $$3$i$i2112 = __Znwj(19084) | 0;
 } while (0);
 if ((label | 0) == 5290) {
  $34789 = $$lcssa8$i$i2110 + -4 | 0;
  HEAP32[$$lcssa$i$i2111 >> 2] = $34789;
  $$3$i$i2112 = HEAP32[$34789 >> 2] | 0;
 }
 $34810 = $$3$i$i2112 + 52 | 0;
 HEAP16[$$3$i$i2112 >> 1] = 732;
 HEAP16[$$3$i$i2112 + 2 >> 1] = 13;
 HEAP8[$$3$i$i2112 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2112 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2112 + 8 >> 2] = 1464;
 HEAP32[$$3$i$i2112 + 12 >> 2] = 19032;
 HEAP32[$$3$i$i2112 + 16 >> 2] = $34810;
 HEAP32[$$3$i$i2112 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2112 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2112 + 48 >> 0] = 0;
 HEAP32[$3149 >> 2] = $$3$i$i2112;
 _memcpy($34810 | 0, 3621552, 1464) | 0;
 _memcpy($$3$i$i2112 + 1516 | 0, 3623016, 1464) | 0;
 _memcpy($$3$i$i2112 + 2980 | 0, 3624480, 1464) | 0;
 _memcpy($$3$i$i2112 + 4444 | 0, 3625944, 1464) | 0;
 _memcpy($$3$i$i2112 + 5908 | 0, 3627408, 1464) | 0;
 _memcpy($$3$i$i2112 + 7372 | 0, 3628872, 1464) | 0;
 _memcpy($$3$i$i2112 + 8836 | 0, 3630336, 1464) | 0;
 _memcpy($$3$i$i2112 + 10300 | 0, 3631800, 1464) | 0;
 _memcpy($$3$i$i2112 + 11764 | 0, 3633264, 1464) | 0;
 _memcpy($$3$i$i2112 + 13228 | 0, 3634728, 1464) | 0;
 _memcpy($$3$i$i2112 + 14692 | 0, 3636192, 1464) | 0;
 _memcpy($$3$i$i2112 + 16156 | 0, 3637656, 1464) | 0;
 _memcpy($$3$i$i2112 + 17620 | 0, 3639120, 1464) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3149);
 if ($$3$i$i2112 | 0) {
  $34833 = $$3$i$i2112 + 5 | 0;
  $34835 = (HEAP8[$34833 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$34833 >> 0] = $34835;
  if (!($34835 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2112);
  HEAP32[$3149 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 94;
 HEAP16[$bitmapData + 2 >> 1] = 762;
 HEAP16[$bitmapData + 4 >> 1] = 822;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 5908) label = 5305; else {
  $34842 = HEAP32[918918] | 0;
  if (($34842 | 0) == (HEAP32[918916] | 0)) label = 5305; else {
   $$lcssa$i$i2099 = 3675672;
   $$lcssa8$i$i2098 = $34842;
   label = 5306;
  }
 }
 do if ((label | 0) == 5305) {
  if ((HEAP32[918925] | 0) >>> 0 >= 5908) {
   $34849 = HEAP32[918924] | 0;
   if (($34849 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2099 = 3675696;
    $$lcssa8$i$i2098 = $34849;
    label = 5306;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 5908) {
   $34854 = HEAP32[918930] | 0;
   if (($34854 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2099 = 3675720;
    $$lcssa8$i$i2098 = $34854;
    label = 5306;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 5908) {
   $34859 = HEAP32[918936] | 0;
   if (($34859 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2099 = 3675744;
    $$lcssa8$i$i2098 = $34859;
    label = 5306;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 5908) {
   $34864 = HEAP32[918942] | 0;
   if (($34864 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2099 = 3675768;
    $$lcssa8$i$i2098 = $34864;
    label = 5306;
    break;
   }
  }
  $$3$i$i2100 = __Znwj(5908) | 0;
 } while (0);
 if ((label | 0) == 5306) {
  $34847 = $$lcssa8$i$i2098 + -4 | 0;
  HEAP32[$$lcssa$i$i2099 >> 2] = $34847;
  $$3$i$i2100 = HEAP32[$34847 >> 2] | 0;
 }
 $34868 = $$3$i$i2100 + 52 | 0;
 HEAP16[$$3$i$i2100 >> 1] = 732;
 HEAP16[$$3$i$i2100 + 2 >> 1] = 4;
 HEAP8[$$3$i$i2100 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2100 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2100 + 8 >> 2] = 1464;
 HEAP32[$$3$i$i2100 + 12 >> 2] = 5856;
 HEAP32[$$3$i$i2100 + 16 >> 2] = $34868;
 HEAP32[$$3$i$i2100 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2100 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2100 + 48 >> 0] = 0;
 HEAP32[$3150 >> 2] = $$3$i$i2100;
 _memcpy($34868 | 0, 3640584, 1464) | 0;
 _memcpy($$3$i$i2100 + 1516 | 0, 3642048, 1464) | 0;
 _memcpy($$3$i$i2100 + 2980 | 0, 3643512, 1464) | 0;
 _memcpy($$3$i$i2100 + 4444 | 0, 3644976, 1464) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3150);
 if ($$3$i$i2100 | 0) {
  $34882 = $$3$i$i2100 + 5 | 0;
  $34884 = (HEAP8[$34882 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$34882 >> 0] = $34884;
  if (!($34884 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2100);
  HEAP32[$3150 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 836;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 863;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2180) label = 5321; else {
  $34891 = HEAP32[918918] | 0;
  if (($34891 | 0) == (HEAP32[918916] | 0)) label = 5321; else {
   $$lcssa$i$i2087 = 3675672;
   $$lcssa8$i$i2086 = $34891;
   label = 5322;
  }
 }
 do if ((label | 0) == 5321) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2180) {
   $34898 = HEAP32[918924] | 0;
   if (($34898 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2087 = 3675696;
    $$lcssa8$i$i2086 = $34898;
    label = 5322;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2180) {
   $34903 = HEAP32[918930] | 0;
   if (($34903 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2087 = 3675720;
    $$lcssa8$i$i2086 = $34903;
    label = 5322;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2180) {
   $34908 = HEAP32[918936] | 0;
   if (($34908 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2087 = 3675744;
    $$lcssa8$i$i2086 = $34908;
    label = 5322;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2180) {
   $34913 = HEAP32[918942] | 0;
   if (($34913 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2087 = 3675768;
    $$lcssa8$i$i2086 = $34913;
    label = 5322;
    break;
   }
  }
  $$3$i$i2088 = __Znwj(2180) | 0;
 } while (0);
 if ((label | 0) == 5322) {
  $34896 = $$lcssa8$i$i2086 + -4 | 0;
  HEAP32[$$lcssa$i$i2087 >> 2] = $34896;
  $$3$i$i2088 = HEAP32[$34896 >> 2] | 0;
 }
 $34917 = $$3$i$i2088 + 52 | 0;
 HEAP16[$$3$i$i2088 >> 1] = 28;
 HEAP16[$$3$i$i2088 + 2 >> 1] = 38;
 HEAP8[$$3$i$i2088 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2088 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2088 + 8 >> 2] = 56;
 HEAP32[$$3$i$i2088 + 12 >> 2] = 2128;
 HEAP32[$$3$i$i2088 + 16 >> 2] = $34917;
 HEAP32[$$3$i$i2088 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2088 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2088 + 48 >> 0] = 0;
 HEAP32[$3151 >> 2] = $$3$i$i2088;
 dest = $34917;
 src = 3646440;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 108 | 0;
 src = 3646496;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 164 | 0;
 src = 3646552;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 220 | 0;
 src = 3646608;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 276 | 0;
 src = 3646664;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 332 | 0;
 src = 3646720;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 388 | 0;
 src = 3646776;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 444 | 0;
 src = 3646832;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 500 | 0;
 src = 3646888;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 556 | 0;
 src = 3646944;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 612 | 0;
 src = 3647e3;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 668 | 0;
 src = 3647056;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 724 | 0;
 src = 3647112;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 780 | 0;
 src = 3647168;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 836 | 0;
 src = 3647224;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 892 | 0;
 src = 3647280;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 948 | 0;
 src = 3647336;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1004 | 0;
 src = 3647392;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1060 | 0;
 src = 3647448;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1116 | 0;
 src = 3647504;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1172 | 0;
 src = 3647560;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1228 | 0;
 src = 3647616;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1284 | 0;
 src = 3647672;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1340 | 0;
 src = 3647728;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1396 | 0;
 src = 3647784;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1452 | 0;
 src = 3647840;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1508 | 0;
 src = 3647896;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1564 | 0;
 src = 3647952;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1620 | 0;
 src = 3648008;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1676 | 0;
 src = 3648064;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1732 | 0;
 src = 3648120;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1788 | 0;
 src = 3648176;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1844 | 0;
 src = 3648232;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1900 | 0;
 src = 3648288;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 1956 | 0;
 src = 3648344;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 2012 | 0;
 src = 3648400;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 2068 | 0;
 src = 3648456;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2088 + 2124 | 0;
 src = 3648512;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3151);
 if ($$3$i$i2088 | 0) {
  $34965 = $$3$i$i2088 + 5 | 0;
  $34967 = (HEAP8[$34965 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$34965 >> 0] = $34967;
  if (!($34967 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2088);
  HEAP32[$3151 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 881;
 HEAP16[$bitmapData + 2 >> 1] = 729;
 HEAP16[$bitmapData + 4 >> 1] = 1020;
 HEAP16[$bitmapData + 6 >> 1] = 764;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 10132) label = 5337; else {
  $34974 = HEAP32[918918] | 0;
  if (($34974 | 0) == (HEAP32[918916] | 0)) label = 5337; else {
   $$lcssa$i$i2075 = 3675672;
   $$lcssa8$i$i2074 = $34974;
   label = 5338;
  }
 }
 do if ((label | 0) == 5337) {
  if ((HEAP32[918925] | 0) >>> 0 >= 10132) {
   $34981 = HEAP32[918924] | 0;
   if (($34981 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2075 = 3675696;
    $$lcssa8$i$i2074 = $34981;
    label = 5338;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 10132) {
   $34986 = HEAP32[918930] | 0;
   if (($34986 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2075 = 3675720;
    $$lcssa8$i$i2074 = $34986;
    label = 5338;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 10132) {
   $34991 = HEAP32[918936] | 0;
   if (($34991 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2075 = 3675744;
    $$lcssa8$i$i2074 = $34991;
    label = 5338;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 10132) {
   $34996 = HEAP32[918942] | 0;
   if (($34996 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2075 = 3675768;
    $$lcssa8$i$i2074 = $34996;
    label = 5338;
    break;
   }
  }
  $$3$i$i2076 = __Znwj(10132) | 0;
 } while (0);
 if ((label | 0) == 5338) {
  $34979 = $$lcssa8$i$i2074 + -4 | 0;
  HEAP32[$$lcssa$i$i2075 >> 2] = $34979;
  $$3$i$i2076 = HEAP32[$34979 >> 2] | 0;
 }
 $35000 = $$3$i$i2076 + 52 | 0;
 HEAP16[$$3$i$i2076 >> 1] = 140;
 HEAP16[$$3$i$i2076 + 2 >> 1] = 36;
 HEAP8[$$3$i$i2076 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2076 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2076 + 8 >> 2] = 280;
 HEAP32[$$3$i$i2076 + 12 >> 2] = 10080;
 HEAP32[$$3$i$i2076 + 16 >> 2] = $35000;
 HEAP32[$$3$i$i2076 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2076 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2076 + 48 >> 0] = 0;
 HEAP32[$3152 >> 2] = $$3$i$i2076;
 _memcpy($35000 | 0, 3648568, 280) | 0;
 _memcpy($$3$i$i2076 + 332 | 0, 3648848, 280) | 0;
 _memcpy($$3$i$i2076 + 612 | 0, 3649128, 280) | 0;
 _memcpy($$3$i$i2076 + 892 | 0, 3649408, 280) | 0;
 _memcpy($$3$i$i2076 + 1172 | 0, 3649688, 280) | 0;
 _memcpy($$3$i$i2076 + 1452 | 0, 3649968, 280) | 0;
 _memcpy($$3$i$i2076 + 1732 | 0, 3650248, 280) | 0;
 _memcpy($$3$i$i2076 + 2012 | 0, 3650528, 280) | 0;
 _memcpy($$3$i$i2076 + 2292 | 0, 3650808, 280) | 0;
 _memcpy($$3$i$i2076 + 2572 | 0, 3651088, 280) | 0;
 _memcpy($$3$i$i2076 + 2852 | 0, 3651368, 280) | 0;
 _memcpy($$3$i$i2076 + 3132 | 0, 3651648, 280) | 0;
 _memcpy($$3$i$i2076 + 3412 | 0, 3651928, 280) | 0;
 _memcpy($$3$i$i2076 + 3692 | 0, 3652208, 280) | 0;
 _memcpy($$3$i$i2076 + 3972 | 0, 3652488, 280) | 0;
 _memcpy($$3$i$i2076 + 4252 | 0, 3652768, 280) | 0;
 _memcpy($$3$i$i2076 + 4532 | 0, 3653048, 280) | 0;
 _memcpy($$3$i$i2076 + 4812 | 0, 3653328, 280) | 0;
 _memcpy($$3$i$i2076 + 5092 | 0, 3653608, 280) | 0;
 _memcpy($$3$i$i2076 + 5372 | 0, 3653888, 280) | 0;
 _memcpy($$3$i$i2076 + 5652 | 0, 3654168, 280) | 0;
 _memcpy($$3$i$i2076 + 5932 | 0, 3654448, 280) | 0;
 _memcpy($$3$i$i2076 + 6212 | 0, 3654728, 280) | 0;
 _memcpy($$3$i$i2076 + 6492 | 0, 3655008, 280) | 0;
 _memcpy($$3$i$i2076 + 6772 | 0, 3655288, 280) | 0;
 _memcpy($$3$i$i2076 + 7052 | 0, 3655568, 280) | 0;
 _memcpy($$3$i$i2076 + 7332 | 0, 3655848, 280) | 0;
 _memcpy($$3$i$i2076 + 7612 | 0, 3656128, 280) | 0;
 _memcpy($$3$i$i2076 + 7892 | 0, 3656408, 280) | 0;
 _memcpy($$3$i$i2076 + 8172 | 0, 3656688, 280) | 0;
 _memcpy($$3$i$i2076 + 8452 | 0, 3656968, 280) | 0;
 _memcpy($$3$i$i2076 + 8732 | 0, 3657248, 280) | 0;
 _memcpy($$3$i$i2076 + 9012 | 0, 3657528, 280) | 0;
 _memcpy($$3$i$i2076 + 9292 | 0, 3657808, 280) | 0;
 _memcpy($$3$i$i2076 + 9572 | 0, 3658088, 280) | 0;
 _memcpy($$3$i$i2076 + 9852 | 0, 3658368, 280) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3152);
 if ($$3$i$i2076 | 0) {
  $35046 = $$3$i$i2076 + 5 | 0;
  $35048 = (HEAP8[$35046 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$35046 >> 0] = $35048;
  if (!($35048 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2076);
  HEAP32[$3152 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 907;
 HEAP16[$bitmapData + 2 >> 1] = 729;
 HEAP16[$bitmapData + 4 >> 1] = 930;
 HEAP16[$bitmapData + 6 >> 1] = 764;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 1780) label = 5353; else {
  $35055 = HEAP32[918918] | 0;
  if (($35055 | 0) == (HEAP32[918916] | 0)) label = 5353; else {
   $$lcssa$i$i2063 = 3675672;
   $$lcssa8$i$i2062 = $35055;
   label = 5354;
  }
 }
 do if ((label | 0) == 5353) {
  if ((HEAP32[918925] | 0) >>> 0 >= 1780) {
   $35062 = HEAP32[918924] | 0;
   if (($35062 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2063 = 3675696;
    $$lcssa8$i$i2062 = $35062;
    label = 5354;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 1780) {
   $35067 = HEAP32[918930] | 0;
   if (($35067 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2063 = 3675720;
    $$lcssa8$i$i2062 = $35067;
    label = 5354;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 1780) {
   $35072 = HEAP32[918936] | 0;
   if (($35072 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2063 = 3675744;
    $$lcssa8$i$i2062 = $35072;
    label = 5354;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 1780) {
   $35077 = HEAP32[918942] | 0;
   if (($35077 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2063 = 3675768;
    $$lcssa8$i$i2062 = $35077;
    label = 5354;
    break;
   }
  }
  $$3$i$i2064 = __Znwj(1780) | 0;
 } while (0);
 if ((label | 0) == 5354) {
  $35060 = $$lcssa8$i$i2062 + -4 | 0;
  HEAP32[$$lcssa$i$i2063 >> 2] = $35060;
  $$3$i$i2064 = HEAP32[$35060 >> 2] | 0;
 }
 $35081 = $$3$i$i2064 + 52 | 0;
 HEAP16[$$3$i$i2064 >> 1] = 24;
 HEAP16[$$3$i$i2064 + 2 >> 1] = 36;
 HEAP8[$$3$i$i2064 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2064 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2064 + 8 >> 2] = 48;
 HEAP32[$$3$i$i2064 + 12 >> 2] = 1728;
 HEAP32[$$3$i$i2064 + 16 >> 2] = $35081;
 HEAP32[$$3$i$i2064 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2064 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2064 + 48 >> 0] = 0;
 HEAP32[$3153 >> 2] = $$3$i$i2064;
 dest = $35081;
 src = 3658648;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 100 | 0;
 src = 3658696;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 148 | 0;
 src = 3658744;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 196 | 0;
 src = 3658792;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 244 | 0;
 src = 3658840;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 292 | 0;
 src = 3658888;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 340 | 0;
 src = 3658936;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 388 | 0;
 src = 3658984;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 436 | 0;
 src = 3659032;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 484 | 0;
 src = 3659080;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 532 | 0;
 src = 3659128;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 580 | 0;
 src = 3659176;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 628 | 0;
 src = 3659224;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 676 | 0;
 src = 3659272;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 724 | 0;
 src = 3659320;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 772 | 0;
 src = 3659368;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 820 | 0;
 src = 3659416;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 868 | 0;
 src = 3659464;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 916 | 0;
 src = 3659512;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 964 | 0;
 src = 3659560;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1012 | 0;
 src = 3659608;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1060 | 0;
 src = 3659656;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1108 | 0;
 src = 3659704;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1156 | 0;
 src = 3659752;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1204 | 0;
 src = 3659800;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1252 | 0;
 src = 3659848;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1300 | 0;
 src = 3659896;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1348 | 0;
 src = 3659944;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1396 | 0;
 src = 3659992;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1444 | 0;
 src = 3660040;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1492 | 0;
 src = 3660088;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1540 | 0;
 src = 3660136;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1588 | 0;
 src = 3660184;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1636 | 0;
 src = 3660232;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1684 | 0;
 src = 3660280;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2064 + 1732 | 0;
 src = 3660328;
 stop = dest + 48 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3153);
 if ($$3$i$i2064 | 0) {
  $35127 = $$3$i$i2064 + 5 | 0;
  $35129 = (HEAP8[$35127 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$35127 >> 0] = $35129;
  if (!($35129 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2064);
  HEAP32[$3153 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 836;
 HEAP16[$bitmapData + 2 >> 1] = 728;
 HEAP16[$bitmapData + 4 >> 1] = 863;
 HEAP16[$bitmapData + 6 >> 1] = 765;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 2180) label = 5369; else {
  $35136 = HEAP32[918918] | 0;
  if (($35136 | 0) == (HEAP32[918916] | 0)) label = 5369; else {
   $$lcssa$i$i2051 = 3675672;
   $$lcssa8$i$i2050 = $35136;
   label = 5370;
  }
 }
 do if ((label | 0) == 5369) {
  if ((HEAP32[918925] | 0) >>> 0 >= 2180) {
   $35143 = HEAP32[918924] | 0;
   if (($35143 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2051 = 3675696;
    $$lcssa8$i$i2050 = $35143;
    label = 5370;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 2180) {
   $35148 = HEAP32[918930] | 0;
   if (($35148 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2051 = 3675720;
    $$lcssa8$i$i2050 = $35148;
    label = 5370;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 2180) {
   $35153 = HEAP32[918936] | 0;
   if (($35153 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2051 = 3675744;
    $$lcssa8$i$i2050 = $35153;
    label = 5370;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 2180) {
   $35158 = HEAP32[918942] | 0;
   if (($35158 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2051 = 3675768;
    $$lcssa8$i$i2050 = $35158;
    label = 5370;
    break;
   }
  }
  $$3$i$i2052 = __Znwj(2180) | 0;
 } while (0);
 if ((label | 0) == 5370) {
  $35141 = $$lcssa8$i$i2050 + -4 | 0;
  HEAP32[$$lcssa$i$i2051 >> 2] = $35141;
  $$3$i$i2052 = HEAP32[$35141 >> 2] | 0;
 }
 $35162 = $$3$i$i2052 + 52 | 0;
 HEAP16[$$3$i$i2052 >> 1] = 28;
 HEAP16[$$3$i$i2052 + 2 >> 1] = 38;
 HEAP8[$$3$i$i2052 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2052 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2052 + 8 >> 2] = 56;
 HEAP32[$$3$i$i2052 + 12 >> 2] = 2128;
 HEAP32[$$3$i$i2052 + 16 >> 2] = $35162;
 HEAP32[$$3$i$i2052 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2052 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2052 + 48 >> 0] = 0;
 HEAP32[$3154 >> 2] = $$3$i$i2052;
 dest = $35162;
 src = 3660376;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 108 | 0;
 src = 3660432;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 164 | 0;
 src = 3660488;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 220 | 0;
 src = 3660544;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 276 | 0;
 src = 3660600;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 332 | 0;
 src = 3660656;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 388 | 0;
 src = 3660712;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 444 | 0;
 src = 3660768;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 500 | 0;
 src = 3660824;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 556 | 0;
 src = 3660880;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 612 | 0;
 src = 3660936;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 668 | 0;
 src = 3660992;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 724 | 0;
 src = 3661048;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 780 | 0;
 src = 3661104;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 836 | 0;
 src = 3661160;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 892 | 0;
 src = 3661216;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 948 | 0;
 src = 3661272;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1004 | 0;
 src = 3661328;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1060 | 0;
 src = 3661384;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1116 | 0;
 src = 3661440;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1172 | 0;
 src = 3661496;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1228 | 0;
 src = 3661552;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1284 | 0;
 src = 3661608;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1340 | 0;
 src = 3661664;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1396 | 0;
 src = 3661720;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1452 | 0;
 src = 3661776;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1508 | 0;
 src = 3661832;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1564 | 0;
 src = 3661888;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1620 | 0;
 src = 3661944;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1676 | 0;
 src = 3662e3;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1732 | 0;
 src = 3662056;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1788 | 0;
 src = 3662112;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1844 | 0;
 src = 3662168;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1900 | 0;
 src = 3662224;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 1956 | 0;
 src = 3662280;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 2012 | 0;
 src = 3662336;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 2068 | 0;
 src = 3662392;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$3$i$i2052 + 2124 | 0;
 src = 3662448;
 stop = dest + 56 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3154);
 if ($$3$i$i2052 | 0) {
  $35210 = $$3$i$i2052 + 5 | 0;
  $35212 = (HEAP8[$35210 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$35210 >> 0] = $35212;
  if (!($35212 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2052);
  HEAP32[$3154 >> 2] = 0;
 }
 dest = $bitmapData;
 stop = dest + 24 | 0;
 do {
  HEAP16[dest >> 1] = 0;
  dest = dest + 2 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$bitmapData >> 1] = 935;
 HEAP16[$bitmapData + 2 >> 1] = 729;
 HEAP16[$bitmapData + 4 >> 1] = 1002;
 HEAP16[$bitmapData + 6 >> 1] = 764;
 __ZN10BGRPalette11classic_332Ev() | 0;
 if ((HEAP32[918919] | 0) >>> 0 < 4948) label = 5385; else {
  $35219 = HEAP32[918918] | 0;
  if (($35219 | 0) == (HEAP32[918916] | 0)) label = 5385; else {
   $$lcssa$i$i2039 = 3675672;
   $$lcssa8$i$i2038 = $35219;
   label = 5386;
  }
 }
 do if ((label | 0) == 5385) {
  if ((HEAP32[918925] | 0) >>> 0 >= 4948) {
   $35226 = HEAP32[918924] | 0;
   if (($35226 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i$i2039 = 3675696;
    $$lcssa8$i$i2038 = $35226;
    label = 5386;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= 4948) {
   $35231 = HEAP32[918930] | 0;
   if (($35231 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i$i2039 = 3675720;
    $$lcssa8$i$i2038 = $35231;
    label = 5386;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= 4948) {
   $35236 = HEAP32[918936] | 0;
   if (($35236 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i$i2039 = 3675744;
    $$lcssa8$i$i2038 = $35236;
    label = 5386;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= 4948) {
   $35241 = HEAP32[918942] | 0;
   if (($35241 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i$i2039 = 3675768;
    $$lcssa8$i$i2038 = $35241;
    label = 5386;
    break;
   }
  }
  $$3$i$i2040 = __Znwj(4948) | 0;
 } while (0);
 if ((label | 0) == 5386) {
  $35224 = $$lcssa8$i$i2038 + -4 | 0;
  HEAP32[$$lcssa$i$i2039 >> 2] = $35224;
  $$3$i$i2040 = HEAP32[$35224 >> 2] | 0;
 }
 $35245 = $$3$i$i2040 + 52 | 0;
 HEAP16[$$3$i$i2040 >> 1] = 68;
 HEAP16[$$3$i$i2040 + 2 >> 1] = 36;
 HEAP8[$$3$i$i2040 + 4 >> 0] = 16;
 HEAP8[$$3$i$i2040 + 5 >> 0] = 1;
 HEAP32[$$3$i$i2040 + 8 >> 2] = 136;
 HEAP32[$$3$i$i2040 + 12 >> 2] = 4896;
 HEAP32[$$3$i$i2040 + 16 >> 2] = $35245;
 HEAP32[$$3$i$i2040 + 20 >> 2] = 0;
 HEAP32[$$3$i$i2040 + 24 >> 2] = 0;
 HEAP8[$$3$i$i2040 + 48 >> 0] = 0;
 HEAP32[$3155 >> 2] = $$3$i$i2040;
 _memcpy($35245 | 0, 3662504, 136) | 0;
 _memcpy($$3$i$i2040 + 188 | 0, 3662640, 136) | 0;
 _memcpy($$3$i$i2040 + 324 | 0, 3662776, 136) | 0;
 _memcpy($$3$i$i2040 + 460 | 0, 3662912, 136) | 0;
 _memcpy($$3$i$i2040 + 596 | 0, 3663048, 136) | 0;
 _memcpy($$3$i$i2040 + 732 | 0, 3663184, 136) | 0;
 _memcpy($$3$i$i2040 + 868 | 0, 3663320, 136) | 0;
 _memcpy($$3$i$i2040 + 1004 | 0, 3663456, 136) | 0;
 _memcpy($$3$i$i2040 + 1140 | 0, 3663592, 136) | 0;
 _memcpy($$3$i$i2040 + 1276 | 0, 3663728, 136) | 0;
 _memcpy($$3$i$i2040 + 1412 | 0, 3663864, 136) | 0;
 _memcpy($$3$i$i2040 + 1548 | 0, 3664e3, 136) | 0;
 _memcpy($$3$i$i2040 + 1684 | 0, 3664136, 136) | 0;
 _memcpy($$3$i$i2040 + 1820 | 0, 3664272, 136) | 0;
 _memcpy($$3$i$i2040 + 1956 | 0, 3664408, 136) | 0;
 _memcpy($$3$i$i2040 + 2092 | 0, 3664544, 136) | 0;
 _memcpy($$3$i$i2040 + 2228 | 0, 3664680, 136) | 0;
 _memcpy($$3$i$i2040 + 2364 | 0, 3664816, 136) | 0;
 _memcpy($$3$i$i2040 + 2500 | 0, 3664952, 136) | 0;
 _memcpy($$3$i$i2040 + 2636 | 0, 3665088, 136) | 0;
 _memcpy($$3$i$i2040 + 2772 | 0, 3665224, 136) | 0;
 _memcpy($$3$i$i2040 + 2908 | 0, 3665360, 136) | 0;
 _memcpy($$3$i$i2040 + 3044 | 0, 3665496, 136) | 0;
 _memcpy($$3$i$i2040 + 3180 | 0, 3665632, 136) | 0;
 _memcpy($$3$i$i2040 + 3316 | 0, 3665768, 136) | 0;
 _memcpy($$3$i$i2040 + 3452 | 0, 3665904, 136) | 0;
 _memcpy($$3$i$i2040 + 3588 | 0, 3666040, 136) | 0;
 _memcpy($$3$i$i2040 + 3724 | 0, 3666176, 136) | 0;
 _memcpy($$3$i$i2040 + 3860 | 0, 3666312, 136) | 0;
 _memcpy($$3$i$i2040 + 3996 | 0, 3666448, 136) | 0;
 _memcpy($$3$i$i2040 + 4132 | 0, 3666584, 136) | 0;
 _memcpy($$3$i$i2040 + 4268 | 0, 3666720, 136) | 0;
 _memcpy($$3$i$i2040 + 4404 | 0, 3666856, 136) | 0;
 _memcpy($$3$i$i2040 + 4540 | 0, 3666992, 136) | 0;
 _memcpy($$3$i$i2040 + 4676 | 0, 3667128, 136) | 0;
 _memcpy($$3$i$i2040 + 4812 | 0, 3667264, 136) | 0;
 __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($front, $bitmapData, $3155);
 if (!$$3$i$i2040) {
  HEAP32[$front >> 2] = 10864;
  $35295 = $front + 8 | 0;
  HEAP32[$35295 >> 2] = 11080;
  $35296 = $front + 5780 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35296);
  $35297 = $front + 2552 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35297);
  $35298 = $front + 2536 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35298);
  $35299 = $front + 2524 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35299);
  $35300 = $front + 2512 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35300);
  STACKTOP = sp;
  return 0;
 }
 $35291 = $$3$i$i2040 + 5 | 0;
 $35293 = (HEAP8[$35291 >> 0] | 0) + -1 << 24 >> 24;
 HEAP8[$35291 >> 0] = $35293;
 if (!($35293 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($$3$i$i2040);
 HEAP32[$3155 >> 2] = 0;
 HEAP32[$front >> 2] = 10864;
 $35295 = $front + 8 | 0;
 HEAP32[$35295 >> 2] = 11080;
 $35296 = $front + 5780 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35296);
 $35297 = $front + 2552 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35297);
 $35298 = $front + 2536 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35298);
 $35299 = $front + 2524 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35299);
 $35300 = $front + 2512 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35300);
 STACKTOP = sp;
 return 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3112$i = 0, $$in = 0, $$lcssa = 0, $$lcssa258 = 0, $$lcssa258$lcssa = 0, $$lcssa259 = 0, $$lcssa259$lcssa = 0, $$lcssa265 = 0, $$lcssa266 = 0, $$lcssa267 = 0, $$lcssa277 = 0, $$not$i = 0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi43$iZ2D = 0.0, $$sink$off0$i = 0, $0 = 0, $1 = 0, $115 = 0, $123 = 0, $125 = 0, $132 = 0, $139 = 0, $147 = 0, $15 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $168 = 0, $170 = 0, $183 = 0.0, $190 = 0, $192 = 0, $2 = 0, $201 = 0, $205 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $223 = 0, $224 = 0, $225 = 0, $235 = 0, $236 = 0, $249 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $270 = 0, $272 = 0, $283 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $295 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $310 = 0.0, $322 = 0.0, $330 = 0, $331 = 0, $338 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $358 = 0, $36 = 0, $360 = 0, $362 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $371 = 0, $376 = 0, $377 = 0, $381 = 0, $39 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $402 = 0, $403 = 0, $412 = 0, $413 = 0, $414 = 0, $42 = 0, $422 = 0, $426 = 0, $428 = 0, $429 = 0, $431 = 0, $444 = 0, $446 = 0, $456 = 0, $458 = 0, $470 = 0, $471 = 0, $472 = 0, $493 = 0, $505 = 0, $509 = 0, $512 = 0, $514 = 0, $515 = 0, $516 = 0, $519 = 0, $520 = 0, $532 = 0, $533 = 0, $534 = 0, $538 = 0, $540 = 0, $542 = 0, $543 = 0, $549 = 0, $551 = 0, $556 = 0, $559 = 0, $563 = 0, $566 = 0, $571 = 0, $575 = 0, $576 = 0, $578 = 0, $582 = 0, $584 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $593 = 0, $594 = 0, $60 = 0, $602 = 0, $608 = 0, $609 = 0, $616 = 0, $618 = 0.0, $620 = 0, $624 = 0.0, $625 = 0.0, $628 = 0.0, $632 = 0, $635 = 0, $642 = 0.0, $660 = 0.0, $662 = 0, $668 = 0, $669 = 0, $67 = 0, $679 = 0, $69 = 0, $690 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $76 = 0, $82 = 0, $9 = 0, $90 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$093$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph46$i = 0, $a$4$i = 0, $a$4$i$lcssa250 = 0, $a$4$i251 = 0, $a$4$ph$i = 0, $a$4$ph167$i = 0, $a$586$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$6$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry4$089$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i248 = 0, $e2$1$ph$i = 0, $e2$1$ph166$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa244 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa275 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3108$i = 0, $gotdig$3108$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1109$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0, $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0111$i = 0, $j$0111$i$lcssa = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0110$i = 0, $k$0110$i$lcssa = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0, $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0107$i = 0, $lnz$0107$i$lcssa = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond21$i = 0, $or$cond25$i = 0, $or$cond9$i = 0, $rp$0$lcssa162$i = 0, $rp$092$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0, $rp$6$i$lcssa = 0, $rp$6$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $x$i = sp;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0$ph = 24;
   $emin$0$ph = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 default:
  $$0 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $0 = $f + 4 | 0;
  $1 = $f + 100 | 0;
  do {
   $2 = HEAP32[$0 >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $2 + 1;
    $9 = HEAPU8[$2 >> 0] | 0;
   } else $9 = ___shgetc($f) | 0;
  } while ((_isspace($9) | 0) != 0);
  $$lcssa277 = $9;
  L13 : do switch ($$lcssa277 | 0) {
  case 43:
  case 45:
   {
    $15 = 1 - ((($$lcssa277 | 0) == 45 & 1) << 1) | 0;
    $16 = HEAP32[$0 >> 2] | 0;
    if ($16 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $16 + 1;
     $c$0 = HEAPU8[$16 >> 0] | 0;
     $sign$0 = $15;
     break L13;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $sign$0 = $15;
     break L13;
    }
    break;
   }
  default:
   {
    $c$0 = $$lcssa277;
    $sign$0 = 1;
   }
  } while (0);
  $c$179 = $c$0;
  $i$078 = 0;
  while (1) {
   if (($c$179 | 32 | 0) != (HEAP8[3670364 + $i$078 >> 0] | 0)) {
    $c$1$lcssa = $c$179;
    $i$0$lcssa = $i$078;
    break;
   }
   do if ($i$078 >>> 0 < 7) {
    $29 = HEAP32[$0 >> 2] | 0;
    if ($29 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $29 + 1;
     $c$2 = HEAPU8[$29 >> 0] | 0;
     break;
    } else {
     $c$2 = ___shgetc($f) | 0;
     break;
    }
   } else $c$2 = $c$179; while (0);
   $36 = $i$078 + 1 | 0;
   if ($36 >>> 0 < 8) {
    $c$179 = $c$2;
    $i$078 = $36;
   } else {
    $c$1$lcssa = $c$2;
    $i$0$lcssa = $36;
    break;
   }
  }
  L29 : do switch ($i$0$lcssa | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $39 = ($pok | 0) != 0;
    if ($39 & $i$0$lcssa >>> 0 > 3) if (($i$0$lcssa | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$i$0$lcssa) {
     $c$377 = $c$1$lcssa;
     $i$276 = 0;
     while (1) {
      if (($c$377 | 32 | 0) != (HEAP8[3670373 + $i$276 >> 0] | 0)) {
       $c$5 = $c$377;
       $i$3 = $i$276;
       break L34;
      }
      do if ($i$276 >>> 0 < 2) {
       $60 = HEAP32[$0 >> 2] | 0;
       if ($60 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $60 + 1;
        $c$4 = HEAPU8[$60 >> 0] | 0;
        break;
       } else {
        $c$4 = ___shgetc($f) | 0;
        break;
       }
      } else $c$4 = $c$377; while (0);
      $67 = $i$276 + 1 | 0;
      if ($67 >>> 0 < 3) {
       $c$377 = $c$4;
       $i$276 = $67;
      } else {
       $c$5 = $c$4;
       $i$3 = $67;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;
     $i$3 = $i$0$lcssa;
    } while (0);
    switch ($i$3 | 0) {
    case 3:
     {
      $69 = HEAP32[$0 >> 2] | 0;
      if ($69 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $69 + 1;
       $76 = HEAPU8[$69 >> 0] | 0;
      } else $76 = ___shgetc($f) | 0;
      if (($76 | 0) == 40) $i$4 = 1; else {
       if (!(HEAP32[$1 >> 2] | 0)) {
        $$0 = nan;
        break L4;
       }
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       $$0 = nan;
       break L4;
      }
      while (1) {
       $82 = HEAP32[$0 >> 2] | 0;
       if ($82 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $82 + 1;
        $90 = HEAPU8[$82 >> 0] | 0;
       } else $90 = ___shgetc($f) | 0;
       if (!(($90 + -48 | 0) >>> 0 < 10 | ($90 + -65 | 0) >>> 0 < 26)) if (!(($90 | 0) == 95 | ($90 + -97 | 0) >>> 0 < 26)) {
        $$lcssa = $90;
        $i$4$lcssa = $i$4;
        break;
       }
       $i$4 = $i$4 + 1 | 0;
      }
      if (($$lcssa | 0) == 41) {
       $$0 = nan;
       break L4;
      }
      $99 = (HEAP32[$1 >> 2] | 0) == 0;
      if (!$99) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      if (!$39) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim($f, 0);
       $$0 = 0.0;
       break L4;
      }
      if (!$i$4$lcssa) {
       $$0 = nan;
       break L4;
      } else $$in = $i$4$lcssa;
      while (1) {
       $$in = $$in + -1 | 0;
       if (!$99) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       if (!$$in) {
        $$0 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      do if (($c$5 | 0) == 48) {
       $115 = HEAP32[$0 >> 2] | 0;
       if ($115 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $115 + 1;
        $123 = HEAPU8[$115 >> 0] | 0;
       } else $123 = ___shgetc($f) | 0;
       if (($123 | 32 | 0) != 120) {
        if (!(HEAP32[$1 >> 2] | 0)) {
         $c$6 = 48;
         break;
        }
        HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        $c$6 = 48;
        break;
       }
       $125 = HEAP32[$0 >> 2] | 0;
       if ($125 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $125 + 1;
        $c$0$i = HEAPU8[$125 >> 0] | 0;
        $gotdig$0$i = 0;
       } else {
        $c$0$i = ___shgetc($f) | 0;
        $gotdig$0$i = 0;
       }
       L94 : while (1) {
        switch ($c$0$i | 0) {
        case 46:
         {
          $gotdig$0$i$lcssa244 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
        case 48:
         break;
        default:
         {
          $168 = 0;
          $170 = 0;
          $693 = 0;
          $694 = 0;
          $c$2$i = $c$0$i;
          $gotdig$2$i = $gotdig$0$i;
          $gotrad$0$i = 0;
          $gottail$0$i = 0;
          $scale$0$i = 1.0;
          $x$0$i = 0;
          $y$0$i = 0.0;
          break L94;
         }
        }
        $132 = HEAP32[$0 >> 2] | 0;
        if ($132 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $132 + 1;
         $c$0$i = HEAPU8[$132 >> 0] | 0;
         $gotdig$0$i = 1;
         continue;
        } else {
         $c$0$i = ___shgetc($f) | 0;
         $gotdig$0$i = 1;
         continue;
        }
       }
       if ((label | 0) == 74) {
        $139 = HEAP32[$0 >> 2] | 0;
        if ($139 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $139 + 1;
         $c$1$ph$i = HEAPU8[$139 >> 0] | 0;
        } else $c$1$ph$i = ___shgetc($f) | 0;
        if (($c$1$ph$i | 0) == 48) {
         $154 = 0;
         $155 = 0;
         while (1) {
          $147 = HEAP32[$0 >> 2] | 0;
          if ($147 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
           HEAP32[$0 >> 2] = $147 + 1;
           $158 = HEAPU8[$147 >> 0] | 0;
          } else $158 = ___shgetc($f) | 0;
          $156 = _i64Add($154 | 0, $155 | 0, -1, -1) | 0;
          $157 = tempRet0;
          if (($158 | 0) == 48) {
           $154 = $156;
           $155 = $157;
          } else {
           $168 = 0;
           $170 = 0;
           $693 = $156;
           $694 = $157;
           $c$2$i = $158;
           $gotdig$2$i = 1;
           $gotrad$0$i = 1;
           $gottail$0$i = 0;
           $scale$0$i = 1.0;
           $x$0$i = 0;
           $y$0$i = 0.0;
           break;
          }
         }
        } else {
         $168 = 0;
         $170 = 0;
         $693 = 0;
         $694 = 0;
         $c$2$i = $c$1$ph$i;
         $gotdig$2$i = $gotdig$0$i$lcssa244;
         $gotrad$0$i = 1;
         $gottail$0$i = 0;
         $scale$0$i = 1.0;
         $x$0$i = 0;
         $y$0$i = 0.0;
        }
       }
       while (1) {
        $160 = $c$2$i + -48 | 0;
        $$pre$i = $c$2$i | 32;
        if ($160 >>> 0 < 10) label = 86; else {
         $164 = ($c$2$i | 0) == 46;
         if (!($164 | ($$pre$i + -97 | 0) >>> 0 < 6)) {
          $212 = $693;
          $213 = $170;
          $215 = $694;
          $216 = $168;
          $c$2$lcssa$i = $c$2$i;
          $gotdig$2$i$lcssa = $gotdig$2$i;
          $gotrad$0$i$lcssa = $gotrad$0$i;
          $x$0$i$lcssa = $x$0$i;
          $y$0$i$lcssa = $y$0$i;
          break;
         }
         if ($164) if (!$gotrad$0$i) {
          $695 = $170;
          $696 = $168;
          $697 = $170;
          $698 = $168;
          $gotdig$3$i = $gotdig$2$i;
          $gotrad$1$i = 1;
          $gottail$2$i = $gottail$0$i;
          $scale$2$i = $scale$0$i;
          $x$2$i = $x$0$i;
          $y$2$i = $y$0$i;
         } else {
          $212 = $693;
          $213 = $170;
          $215 = $694;
          $216 = $168;
          $c$2$lcssa$i = 46;
          $gotdig$2$i$lcssa = $gotdig$2$i;
          $gotrad$0$i$lcssa = $gotrad$0$i;
          $x$0$i$lcssa = $x$0$i;
          $y$0$i$lcssa = $y$0$i;
          break;
         } else label = 86;
        }
        if ((label | 0) == 86) {
         label = 0;
         $d$0$i = ($c$2$i | 0) > 57 ? $$pre$i + -87 | 0 : $160;
         do if (($168 | 0) < 0 | ($168 | 0) == 0 & $170 >>> 0 < 8) {
          $gottail$1$i = $gottail$0$i;
          $scale$1$i = $scale$0$i;
          $x$1$i = $d$0$i + ($x$0$i << 4) | 0;
          $y$1$i = $y$0$i;
         } else {
          if (($168 | 0) < 0 | ($168 | 0) == 0 & $170 >>> 0 < 14) {
           $183 = $scale$0$i * .0625;
           $gottail$1$i = $gottail$0$i;
           $scale$1$i = $183;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i + $183 * +($d$0$i | 0);
           break;
          }
          if (($gottail$0$i | 0) != 0 | ($d$0$i | 0) == 0) {
           $gottail$1$i = $gottail$0$i;
           $scale$1$i = $scale$0$i;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i;
          } else {
           $gottail$1$i = 1;
           $scale$1$i = $scale$0$i;
           $x$1$i = $x$0$i;
           $y$1$i = $y$0$i + $scale$0$i * .5;
          }
         } while (0);
         $190 = _i64Add($170 | 0, $168 | 0, 1, 0) | 0;
         $695 = $693;
         $696 = $694;
         $697 = $190;
         $698 = tempRet0;
         $gotdig$3$i = 1;
         $gotrad$1$i = $gotrad$0$i;
         $gottail$2$i = $gottail$1$i;
         $scale$2$i = $scale$1$i;
         $x$2$i = $x$1$i;
         $y$2$i = $y$1$i;
        }
        $192 = HEAP32[$0 >> 2] | 0;
        if ($192 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $192 + 1;
         $168 = $698;
         $170 = $697;
         $693 = $695;
         $694 = $696;
         $c$2$i = HEAPU8[$192 >> 0] | 0;
         $gotdig$2$i = $gotdig$3$i;
         $gotrad$0$i = $gotrad$1$i;
         $gottail$0$i = $gottail$2$i;
         $scale$0$i = $scale$2$i;
         $x$0$i = $x$2$i;
         $y$0$i = $y$2$i;
         continue;
        } else {
         $168 = $698;
         $170 = $697;
         $693 = $695;
         $694 = $696;
         $c$2$i = ___shgetc($f) | 0;
         $gotdig$2$i = $gotdig$3$i;
         $gotrad$0$i = $gotrad$1$i;
         $gottail$0$i = $gottail$2$i;
         $scale$0$i = $scale$2$i;
         $x$0$i = $x$2$i;
         $y$0$i = $y$2$i;
         continue;
        }
       }
       if (!$gotdig$2$i$lcssa) {
        $201 = (HEAP32[$1 >> 2] | 0) == 0;
        if (!$201) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        if (!$pok) ___shlim($f, 0); else if (!$201) {
         $205 = HEAP32[$0 >> 2] | 0;
         HEAP32[$0 >> 2] = $205 + -1;
         if ($gotrad$0$i$lcssa | 0) HEAP32[$0 >> 2] = $205 + -2;
        }
        $$0 = +($sign$0 | 0) * 0.0;
        break L4;
       }
       $211 = ($gotrad$0$i$lcssa | 0) == 0;
       $214 = $211 ? $213 : $212;
       $217 = $211 ? $216 : $215;
       if (($216 | 0) < 0 | ($216 | 0) == 0 & $213 >>> 0 < 8) {
        $224 = $213;
        $225 = $216;
        $x$324$i = $x$0$i$lcssa;
        while (1) {
         $223 = $x$324$i << 4;
         $224 = _i64Add($224 | 0, $225 | 0, 1, 0) | 0;
         $225 = tempRet0;
         if (!(($225 | 0) < 0 | ($225 | 0) == 0 & $224 >>> 0 < 8)) {
          $x$3$lcssa$i = $223;
          break;
         } else $x$324$i = $223;
        }
       } else $x$3$lcssa$i = $x$0$i$lcssa;
       if (($c$2$lcssa$i | 32 | 0) == 112) {
        $235 = _scanexp($f, $pok) | 0;
        $236 = tempRet0;
        if (($235 | 0) == 0 & ($236 | 0) == -2147483648) {
         if (!$pok) {
          ___shlim($f, 0);
          $$0 = 0.0;
          break L4;
         }
         if (!(HEAP32[$1 >> 2] | 0)) {
          $253 = 0;
          $254 = 0;
         } else {
          HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
          $253 = 0;
          $254 = 0;
         }
        } else {
         $253 = $235;
         $254 = $236;
        }
       } else if (!(HEAP32[$1 >> 2] | 0)) {
        $253 = 0;
        $254 = 0;
       } else {
        HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
        $253 = 0;
        $254 = 0;
       }
       $249 = _bitshift64Shl($214 | 0, $217 | 0, 2) | 0;
       $251 = _i64Add($249 | 0, tempRet0 | 0, -32, -1) | 0;
       $255 = _i64Add($251 | 0, tempRet0 | 0, $253 | 0, $254 | 0) | 0;
       $256 = tempRet0;
       if (!$x$3$lcssa$i) {
        $$0 = +($sign$0 | 0) * 0.0;
        break L4;
       }
       if (($256 | 0) > 0 | ($256 | 0) == 0 & $255 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break L4;
       }
       $270 = $emin$0$ph + -106 | 0;
       $272 = (($270 | 0) < 0) << 31 >> 31;
       if (($256 | 0) < ($272 | 0) | ($256 | 0) == ($272 | 0) & $255 >>> 0 < $270 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break L4;
       }
       if (($x$3$lcssa$i | 0) > -1) {
        $288 = $255;
        $289 = $256;
        $x$419$i = $x$3$lcssa$i;
        $y$320$i = $y$0$i$lcssa;
        while (1) {
         $283 = !($y$320$i >= .5);
         $287 = $283 & 1 | $x$419$i << 1;
         $x$5$i = $287 ^ 1;
         $y$4$i = $y$320$i + ($283 ? $y$320$i : $y$320$i + -1.0);
         $290 = _i64Add($288 | 0, $289 | 0, -1, -1) | 0;
         $291 = tempRet0;
         if (($287 | 0) > -1) {
          $288 = $290;
          $289 = $291;
          $x$419$i = $x$5$i;
          $y$320$i = $y$4$i;
         } else {
          $297 = $290;
          $298 = $291;
          $x$4$lcssa$i = $x$5$i;
          $y$3$lcssa$i = $y$4$i;
          break;
         }
        }
       } else {
        $297 = $255;
        $298 = $256;
        $x$4$lcssa$i = $x$3$lcssa$i;
        $y$3$lcssa$i = $y$0$i$lcssa;
       }
       $295 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0;
       $299 = _i64Add($297 | 0, $298 | 0, $295 | 0, tempRet0 | 0) | 0;
       $300 = tempRet0;
       if (0 > ($300 | 0) | 0 == ($300 | 0) & $bits$0$ph >>> 0 > $299 >>> 0) if (($299 | 0) < 0) {
        $$0710$i = 0;
        label = 127;
       } else {
        $$07$i = $299;
        label = 125;
       } else {
        $$07$i = $bits$0$ph;
        label = 125;
       }
       if ((label | 0) == 125) if (($$07$i | 0) < 53) {
        $$0710$i = $$07$i;
        label = 127;
       } else {
        $$0711$i = $$07$i;
        $$pre$phi43$iZ2D = +($sign$0 | 0);
        $bias$0$i = 0.0;
       }
       if ((label | 0) == 127) {
        $310 = +($sign$0 | 0);
        $$0711$i = $$0710$i;
        $$pre$phi43$iZ2D = $310;
        $bias$0$i = +_copysignl(+_scalbn(1.0, 84 - $$0710$i | 0), $310);
       }
       $or$cond9$i = ($x$4$lcssa$i & 1 | 0) == 0 & ($y$3$lcssa$i != 0.0 & ($$0711$i | 0) < 32);
       $322 = $$pre$phi43$iZ2D * ($or$cond9$i ? 0.0 : $y$3$lcssa$i) + ($bias$0$i + $$pre$phi43$iZ2D * +((($or$cond9$i & 1) + $x$4$lcssa$i | 0) >>> 0)) - $bias$0$i;
       if (!($322 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
       $$0 = +_scalbnl($322, $297);
       break L4;
      } else $c$6 = $c$5; while (0);
      $sum$i = $emin$0$ph + $bits$0$ph | 0;
      $330 = 0 - $sum$i | 0;
      $$010$i = $c$6;
      $gotdig$0$i12 = 0;
      L184 : while (1) {
       switch ($$010$i | 0) {
       case 46:
        {
         $gotdig$0$i12$lcssa275 = $gotdig$0$i12;
         label = 138;
         break L184;
         break;
        }
       case 48:
        break;
       default:
        {
         $$2$i = $$010$i;
         $699 = 0;
         $700 = 0;
         $gotdig$2$i13 = $gotdig$0$i12;
         $gotrad$0$i14 = 0;
         break L184;
        }
       }
       $331 = HEAP32[$0 >> 2] | 0;
       if ($331 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $331 + 1;
        $$010$i = HEAPU8[$331 >> 0] | 0;
        $gotdig$0$i12 = 1;
        continue;
       } else {
        $$010$i = ___shgetc($f) | 0;
        $gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label | 0) == 138) {
       $338 = HEAP32[$0 >> 2] | 0;
       if ($338 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $338 + 1;
        $$111$ph$i = HEAPU8[$338 >> 0] | 0;
       } else $$111$ph$i = ___shgetc($f) | 0;
       if (($$111$ph$i | 0) == 48) {
        $346 = 0;
        $347 = 0;
        while (1) {
         $348 = _i64Add($346 | 0, $347 | 0, -1, -1) | 0;
         $349 = tempRet0;
         $350 = HEAP32[$0 >> 2] | 0;
         if ($350 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
          HEAP32[$0 >> 2] = $350 + 1;
          $$111$be$i = HEAPU8[$350 >> 0] | 0;
         } else $$111$be$i = ___shgetc($f) | 0;
         if (($$111$be$i | 0) == 48) {
          $346 = $348;
          $347 = $349;
         } else {
          $$2$i = $$111$be$i;
          $699 = $348;
          $700 = $349;
          $gotdig$2$i13 = 1;
          $gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;
        $699 = 0;
        $700 = 0;
        $gotdig$2$i13 = $gotdig$0$i12$lcssa275;
        $gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i >> 2] = 0;
      $358 = $$2$i + -48 | 0;
      $360 = ($$2$i | 0) == 46;
      L203 : do if ($360 | $358 >>> 0 < 10) {
       $362 = $x$i + 496 | 0;
       $$3112$i = $$2$i;
       $365 = 0;
       $366 = 0;
       $701 = $360;
       $702 = $358;
       $703 = $699;
       $704 = $700;
       $gotdig$3108$i = $gotdig$2$i13;
       $gotrad$1109$i = $gotrad$0$i14;
       $j$0111$i = 0;
       $k$0110$i = 0;
       $lnz$0107$i = 0;
       L205 : while (1) {
        do if ($701) if (!$gotrad$1109$i) {
         $705 = $365;
         $706 = $366;
         $707 = $365;
         $708 = $366;
         $gotdig$4$i = $gotdig$3108$i;
         $gotrad$2$i = 1;
         $j$2$i = $j$0111$i;
         $k$2$i = $k$0110$i;
         $lnz$2$i = $lnz$0107$i;
        } else {
         $709 = $703;
         $710 = $704;
         $711 = $365;
         $712 = $366;
         $gotdig$3108$i$lcssa = $gotdig$3108$i;
         $j$0111$i$lcssa = $j$0111$i;
         $k$0110$i$lcssa = $k$0110$i;
         $lnz$0107$i$lcssa = $lnz$0107$i;
         break L205;
        } else {
         $367 = _i64Add($365 | 0, $366 | 0, 1, 0) | 0;
         $368 = tempRet0;
         $369 = ($$3112$i | 0) != 48;
         if (($k$0110$i | 0) >= 125) {
          if (!$369) {
           $705 = $703;
           $706 = $704;
           $707 = $367;
           $708 = $368;
           $gotdig$4$i = $gotdig$3108$i;
           $gotrad$2$i = $gotrad$1109$i;
           $j$2$i = $j$0111$i;
           $k$2$i = $k$0110$i;
           $lnz$2$i = $lnz$0107$i;
           break;
          }
          HEAP32[$362 >> 2] = HEAP32[$362 >> 2] | 1;
          $705 = $703;
          $706 = $704;
          $707 = $367;
          $708 = $368;
          $gotdig$4$i = $gotdig$3108$i;
          $gotrad$2$i = $gotrad$1109$i;
          $j$2$i = $j$0111$i;
          $k$2$i = $k$0110$i;
          $lnz$2$i = $lnz$0107$i;
          break;
         }
         $371 = $x$i + ($k$0110$i << 2) | 0;
         if (!$j$0111$i) $storemerge$i = $702; else $storemerge$i = $$3112$i + -48 + ((HEAP32[$371 >> 2] | 0) * 10 | 0) | 0;
         HEAP32[$371 >> 2] = $storemerge$i;
         $376 = $j$0111$i + 1 | 0;
         $377 = ($376 | 0) == 9;
         $705 = $703;
         $706 = $704;
         $707 = $367;
         $708 = $368;
         $gotdig$4$i = 1;
         $gotrad$2$i = $gotrad$1109$i;
         $j$2$i = $377 ? 0 : $376;
         $k$2$i = ($377 & 1) + $k$0110$i | 0;
         $lnz$2$i = $369 ? $367 : $lnz$0107$i;
        } while (0);
        $381 = HEAP32[$0 >> 2] | 0;
        if ($381 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
         HEAP32[$0 >> 2] = $381 + 1;
         $$3$be$i = HEAPU8[$381 >> 0] | 0;
        } else $$3$be$i = ___shgetc($f) | 0;
        $702 = $$3$be$i + -48 | 0;
        $701 = ($$3$be$i | 0) == 46;
        if (!($701 | $702 >>> 0 < 10)) {
         $$3$lcssa$i = $$3$be$i;
         $393 = $705;
         $394 = $707;
         $396 = $706;
         $397 = $708;
         $gotdig$3$lcssa$i = $gotdig$4$i;
         $gotrad$1$lcssa$i = $gotrad$2$i;
         $j$0$lcssa$i = $j$2$i;
         $k$0$lcssa$i = $k$2$i;
         $lnz$0$lcssa$i = $lnz$2$i;
         label = 161;
         break L203;
        } else {
         $$3112$i = $$3$be$i;
         $365 = $707;
         $366 = $708;
         $703 = $705;
         $704 = $706;
         $gotdig$3108$i = $gotdig$4$i;
         $gotrad$1109$i = $gotrad$2$i;
         $j$0111$i = $j$2$i;
         $k$0110$i = $k$2$i;
         $lnz$0107$i = $lnz$2$i;
        }
       }
       $713 = $711;
       $714 = $712;
       $715 = $709;
       $716 = $710;
       $717 = ($gotdig$3108$i$lcssa | 0) != 0;
       $j$077$i = $j$0111$i$lcssa;
       $k$073$i = $k$0110$i$lcssa;
       $lnz$067$i = $lnz$0107$i$lcssa;
       label = 169;
      } else {
       $$3$lcssa$i = $$2$i;
       $393 = $699;
       $394 = 0;
       $396 = $700;
       $397 = 0;
       $gotdig$3$lcssa$i = $gotdig$2$i13;
       $gotrad$1$lcssa$i = $gotrad$0$i14;
       $j$0$lcssa$i = 0;
       $k$0$lcssa$i = 0;
       $lnz$0$lcssa$i = 0;
       label = 161;
      } while (0);
      do if ((label | 0) == 161) {
       $392 = ($gotrad$1$lcssa$i | 0) == 0;
       $395 = $392 ? $394 : $393;
       $398 = $392 ? $397 : $396;
       $399 = ($gotdig$3$lcssa$i | 0) != 0;
       if (!(($$3$lcssa$i | 32 | 0) == 101 & $399)) if (($$3$lcssa$i | 0) > -1) {
        $713 = $394;
        $714 = $397;
        $715 = $395;
        $716 = $398;
        $717 = $399;
        $j$077$i = $j$0$lcssa$i;
        $k$073$i = $k$0$lcssa$i;
        $lnz$067$i = $lnz$0$lcssa$i;
        label = 169;
        break;
       } else {
        $718 = $394;
        $719 = $397;
        $720 = $399;
        $721 = $395;
        $722 = $398;
        $j$076$i = $j$0$lcssa$i;
        $k$072$i = $k$0$lcssa$i;
        $lnz$066$i = $lnz$0$lcssa$i;
        label = 171;
        break;
       }
       $402 = _scanexp($f, $pok) | 0;
       $403 = tempRet0;
       if (($402 | 0) == 0 & ($403 | 0) == -2147483648) {
        if (!$pok) {
         ___shlim($f, 0);
         $$1$i = 0.0;
         break;
        }
        if (!(HEAP32[$1 >> 2] | 0)) {
         $412 = 0;
         $413 = 0;
        } else {
         HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
         $412 = 0;
         $413 = 0;
        }
       } else {
        $412 = $402;
        $413 = $403;
       }
       $414 = _i64Add($412 | 0, $413 | 0, $395 | 0, $398 | 0) | 0;
       $426 = $414;
       $428 = $394;
       $429 = tempRet0;
       $431 = $397;
       $j$075$i = $j$0$lcssa$i;
       $k$071$i = $k$0$lcssa$i;
       $lnz$065$i = $lnz$0$lcssa$i;
       label = 173;
      } while (0);
      if ((label | 0) == 169) if (!(HEAP32[$1 >> 2] | 0)) {
       $718 = $713;
       $719 = $714;
       $720 = $717;
       $721 = $715;
       $722 = $716;
       $j$076$i = $j$077$i;
       $k$072$i = $k$073$i;
       $lnz$066$i = $lnz$067$i;
       label = 171;
      } else {
       HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
       if ($717) {
        $426 = $715;
        $428 = $713;
        $429 = $716;
        $431 = $714;
        $j$075$i = $j$077$i;
        $k$071$i = $k$073$i;
        $lnz$065$i = $lnz$067$i;
        label = 173;
       } else label = 172;
      }
      if ((label | 0) == 171) if ($720) {
       $426 = $721;
       $428 = $718;
       $429 = $722;
       $431 = $719;
       $j$075$i = $j$076$i;
       $k$071$i = $k$072$i;
       $lnz$065$i = $lnz$066$i;
       label = 173;
      } else label = 172;
      do if ((label | 0) == 172) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim($f, 0);
       $$1$i = 0.0;
      } else if ((label | 0) == 173) {
       $422 = HEAP32[$x$i >> 2] | 0;
       if (!$422) {
        $$1$i = +($sign$0 | 0) * 0.0;
        break;
       }
       if ((($431 | 0) < 0 | ($431 | 0) == 0 & $428 >>> 0 < 10) & (($426 | 0) == ($428 | 0) & ($429 | 0) == ($431 | 0))) if ($bits$0$ph >>> 0 > 30 | ($422 >>> $bits$0$ph | 0) == 0) {
        $$1$i = +($sign$0 | 0) * +($422 >>> 0);
        break;
       }
       $444 = ($emin$0$ph | 0) / -2 | 0;
       $446 = (($444 | 0) < 0) << 31 >> 31;
       if (($429 | 0) > ($446 | 0) | ($429 | 0) == ($446 | 0) & $426 >>> 0 > $444 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        $$1$i = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
        break;
       }
       $456 = $emin$0$ph + -106 | 0;
       $458 = (($456 | 0) < 0) << 31 >> 31;
       if (($429 | 0) < ($458 | 0) | ($429 | 0) == ($458 | 0) & $426 >>> 0 < $456 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        $$1$i = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break;
       }
       if (!$j$075$i) $k$3$i = $k$071$i; else {
        if (($j$075$i | 0) < 9) {
         $470 = $x$i + ($k$071$i << 2) | 0;
         $472 = HEAP32[$470 >> 2] | 0;
         $j$3102$i = $j$075$i;
         while (1) {
          $471 = $472 * 10 | 0;
          $j$3102$i = $j$3102$i + 1 | 0;
          if (($j$3102$i | 0) == 9) {
           $$lcssa267 = $471;
           break;
          } else $472 = $471;
         }
         HEAP32[$470 >> 2] = $$lcssa267;
        }
        $k$3$i = $k$071$i + 1 | 0;
       }
       if (($lnz$065$i | 0) < 9) if (($lnz$065$i | 0) <= ($426 | 0) & ($426 | 0) < 18) {
        if (($426 | 0) == 9) {
         $$1$i = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0);
         break;
        }
        if (($426 | 0) < 9) {
         $$1$i = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[11988 + (8 - $426 << 2) >> 2] | 0);
         break;
        }
        $493 = $bits$0$ph + 27 + (Math_imul($426, -3) | 0) | 0;
        $$pre$i17 = HEAP32[$x$i >> 2] | 0;
        if (($493 | 0) > 30 | ($$pre$i17 >>> $493 | 0) == 0) {
         $$1$i = +($sign$0 | 0) * +($$pre$i17 >>> 0) * +(HEAP32[11988 + ($426 + -10 << 2) >> 2] | 0);
         break;
        }
       }
       $505 = ($426 | 0) % 9 | 0;
       if (!$505) {
        $a$2$ph46$i = 0;
        $e2$0$ph$i = 0;
        $rp$2$ph44$i = $426;
        $z$1$ph45$i = $k$3$i;
       } else {
        $509 = ($426 | 0) > -1 ? $505 : $505 + 9 | 0;
        $512 = HEAP32[11988 + (8 - $509 << 2) >> 2] | 0;
        if (!$k$3$i) {
         $a$0$lcssa161$i = 0;
         $rp$0$lcssa162$i = $426;
         $z$0$i = 0;
        } else {
         $514 = 1e9 / ($512 | 0) | 0;
         $a$093$i = 0;
         $carry$095$i = 0;
         $k$494$i = 0;
         $rp$092$i = $426;
         while (1) {
          $515 = $x$i + ($k$494$i << 2) | 0;
          $516 = HEAP32[$515 >> 2] | 0;
          $519 = (($516 >>> 0) / ($512 >>> 0) | 0) + $carry$095$i | 0;
          HEAP32[$515 >> 2] = $519;
          $520 = Math_imul(($516 >>> 0) % ($512 >>> 0) | 0, $514) | 0;
          $or$cond21$i = ($k$494$i | 0) == ($a$093$i | 0) & ($519 | 0) == 0;
          $k$494$i = $k$494$i + 1 | 0;
          $rp$1$i18 = $or$cond21$i ? $rp$092$i + -9 | 0 : $rp$092$i;
          $a$1$i = $or$cond21$i ? $k$494$i & 127 : $a$093$i;
          if (($k$494$i | 0) == ($k$3$i | 0)) {
           $$lcssa266 = $520;
           $a$1$i$lcssa = $a$1$i;
           $rp$1$i18$lcssa = $rp$1$i18;
           break;
          } else {
           $a$093$i = $a$1$i;
           $carry$095$i = $520;
           $rp$092$i = $rp$1$i18;
          }
         }
         if (!$$lcssa266) {
          $a$0$lcssa161$i = $a$1$i$lcssa;
          $rp$0$lcssa162$i = $rp$1$i18$lcssa;
          $z$0$i = $k$3$i;
         } else {
          HEAP32[$x$i + ($k$3$i << 2) >> 2] = $$lcssa266;
          $a$0$lcssa161$i = $a$1$i$lcssa;
          $rp$0$lcssa162$i = $rp$1$i18$lcssa;
          $z$0$i = $k$3$i + 1 | 0;
         }
        }
        $a$2$ph46$i = $a$0$lcssa161$i;
        $e2$0$ph$i = 0;
        $rp$2$ph44$i = 9 - $509 + $rp$0$lcssa162$i | 0;
        $z$1$ph45$i = $z$0$i;
       }
       L284 : while (1) {
        $532 = ($rp$2$ph44$i | 0) < 18;
        $533 = ($rp$2$ph44$i | 0) == 18;
        $534 = $x$i + ($a$2$ph46$i << 2) | 0;
        $e2$0$i19 = $e2$0$ph$i;
        $z$1$i = $z$1$ph45$i;
        while (1) {
         if (!$532) {
          if (!$533) {
           $a$4$ph$i = $a$2$ph46$i;
           $e2$1$ph$i = $e2$0$i19;
           $rp$4$ph42$i = $rp$2$ph44$i;
           $z$6$ph$i = $z$1$i;
           break L284;
          }
          if ((HEAP32[$534 >> 2] | 0) >>> 0 >= 9007199) {
           $a$4$ph$i = $a$2$ph46$i;
           $e2$1$ph$i = $e2$0$i19;
           $rp$4$ph42$i = 18;
           $z$6$ph$i = $z$1$i;
           break L284;
          }
         }
         $carry1$0$i = 0;
         $k$5$in$i = $z$1$i + 127 | 0;
         $z$2$i = $z$1$i;
         while (1) {
          $k$5$i = $k$5$in$i & 127;
          $538 = $x$i + ($k$5$i << 2) | 0;
          $540 = _bitshift64Shl(HEAP32[$538 >> 2] | 0, 0, 29) | 0;
          $542 = _i64Add($540 | 0, tempRet0 | 0, $carry1$0$i | 0, 0) | 0;
          $543 = tempRet0;
          if ($543 >>> 0 > 0 | ($543 | 0) == 0 & $542 >>> 0 > 1e9) {
           $549 = ___udivdi3($542 | 0, $543 | 0, 1e9, 0) | 0;
           $551 = ___uremdi3($542 | 0, $543 | 0, 1e9, 0) | 0;
           $$sink$off0$i = $551;
           $carry1$1$i = $549;
          } else {
           $$sink$off0$i = $542;
           $carry1$1$i = 0;
          }
          HEAP32[$538 >> 2] = $$sink$off0$i;
          $556 = ($k$5$i | 0) == ($a$2$ph46$i | 0);
          $z$3$i = ($k$5$i | 0) != ($z$2$i + 127 & 127 | 0) | $556 ? $z$2$i : ($$sink$off0$i | 0) == 0 ? $k$5$i : $z$2$i;
          if ($556) {
           $carry1$1$i$lcssa = $carry1$1$i;
           $z$3$i$lcssa = $z$3$i;
           break;
          } else {
           $carry1$0$i = $carry1$1$i;
           $k$5$in$i = $k$5$i + -1 | 0;
           $z$2$i = $z$3$i;
          }
         }
         $559 = $e2$0$i19 + -29 | 0;
         if (!$carry1$1$i$lcssa) {
          $e2$0$i19 = $559;
          $z$1$i = $z$3$i$lcssa;
         } else {
          $$lcssa265 = $559;
          $carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;
          $z$3$i$lcssa$lcssa = $z$3$i$lcssa;
          break;
         }
        }
        $563 = $a$2$ph46$i + 127 & 127;
        if (($563 | 0) == ($z$3$i$lcssa$lcssa | 0)) {
         $566 = $z$3$i$lcssa$lcssa + 127 & 127;
         $571 = $x$i + (($z$3$i$lcssa$lcssa + 126 & 127) << 2) | 0;
         HEAP32[$571 >> 2] = HEAP32[$571 >> 2] | HEAP32[$x$i + ($566 << 2) >> 2];
         $z$4$i = $566;
        } else $z$4$i = $z$3$i$lcssa$lcssa;
        HEAP32[$x$i + ($563 << 2) >> 2] = $carry1$1$i$lcssa$lcssa;
        $a$2$ph46$i = $563;
        $e2$0$ph$i = $$lcssa265;
        $rp$2$ph44$i = $rp$2$ph44$i + 9 | 0;
        $z$1$ph45$i = $z$4$i;
       }
       L302 : while (1) {
        $602 = $z$6$ph$i + 1 & 127;
        $608 = $x$i + (($z$6$ph$i + 127 & 127) << 2) | 0;
        $a$4$ph167$i = $a$4$ph$i;
        $e2$1$ph166$i = $e2$1$ph$i;
        $rp$4$ph$i = $rp$4$ph42$i;
        while (1) {
         $609 = ($rp$4$ph$i | 0) == 18;
         $$24$i = ($rp$4$ph$i | 0) > 27 ? 9 : 1;
         $$not$i = $609 ^ 1;
         $a$4$i = $a$4$ph167$i;
         $e2$1$i = $e2$1$ph166$i;
         while (1) {
          $575 = $a$4$i & 127;
          $576 = ($575 | 0) == ($z$6$ph$i | 0);
          do if ($576) label = 219; else {
           $578 = HEAP32[$x$i + ($575 << 2) >> 2] | 0;
           if ($578 >>> 0 < 9007199) {
            label = 219;
            break;
           }
           if ($578 >>> 0 > 9007199) break;
           $582 = $a$4$i + 1 & 127;
           if (($582 | 0) == ($z$6$ph$i | 0)) {
            label = 219;
            break;
           }
           $690 = HEAP32[$x$i + ($582 << 2) >> 2] | 0;
           if ($690 >>> 0 < 254740991) {
            label = 219;
            break;
           }
           if (!($690 >>> 0 > 254740991 | $$not$i)) {
            $616 = $575;
            $a$4$i251 = $a$4$i;
            $e2$1$i248 = $e2$1$i;
            $z$10$i = $z$6$ph$i;
            break L302;
           }
          } while (0);
          if ((label | 0) == 219) {
           label = 0;
           if ($609) {
            label = 220;
            break L302;
           }
          }
          $584 = $e2$1$i + $$24$i | 0;
          if (($a$4$i | 0) == ($z$6$ph$i | 0)) {
           $a$4$i = $z$6$ph$i;
           $e2$1$i = $584;
          } else {
           $$lcssa258 = $584;
           $a$4$i$lcssa250 = $a$4$i;
           break;
          }
         }
         $587 = (1 << $$24$i) + -1 | 0;
         $588 = 1e9 >>> $$24$i;
         $a$586$i = $a$4$i$lcssa250;
         $carry4$089$i = 0;
         $k$687$i = $a$4$i$lcssa250;
         $rp$585$i = $rp$4$ph$i;
         while (1) {
          $589 = $x$i + ($k$687$i << 2) | 0;
          $590 = HEAP32[$589 >> 2] | 0;
          $593 = ($590 >>> $$24$i) + $carry4$089$i | 0;
          HEAP32[$589 >> 2] = $593;
          $594 = Math_imul($590 & $587, $588) | 0;
          $or$cond25$i = ($k$687$i | 0) == ($a$586$i | 0) & ($593 | 0) == 0;
          $k$687$i = $k$687$i + 1 & 127;
          $rp$6$i = $or$cond25$i ? $rp$585$i + -9 | 0 : $rp$585$i;
          $a$6$i = $or$cond25$i ? $k$687$i : $a$586$i;
          if (($k$687$i | 0) == ($z$6$ph$i | 0)) {
           $$lcssa259 = $594;
           $a$6$i$lcssa = $a$6$i;
           $rp$6$i$lcssa = $rp$6$i;
           break;
          } else {
           $a$586$i = $a$6$i;
           $carry4$089$i = $594;
           $rp$585$i = $rp$6$i;
          }
         }
         if (!$$lcssa259) {
          $a$4$ph167$i = $a$6$i$lcssa;
          $e2$1$ph166$i = $$lcssa258;
          $rp$4$ph$i = $rp$6$i$lcssa;
          continue;
         }
         if (($602 | 0) != ($a$6$i$lcssa | 0)) {
          $$lcssa258$lcssa = $$lcssa258;
          $$lcssa259$lcssa = $$lcssa259;
          $a$6$i$lcssa$lcssa = $a$6$i$lcssa;
          $rp$6$i$lcssa$lcssa = $rp$6$i$lcssa;
          break;
         }
         HEAP32[$608 >> 2] = HEAP32[$608 >> 2] | 1;
         $a$4$ph167$i = $a$6$i$lcssa;
         $e2$1$ph166$i = $$lcssa258;
         $rp$4$ph$i = $rp$6$i$lcssa;
        }
        HEAP32[$x$i + ($z$6$ph$i << 2) >> 2] = $$lcssa259$lcssa;
        $a$4$ph$i = $a$6$i$lcssa$lcssa;
        $e2$1$ph$i = $$lcssa258$lcssa;
        $rp$4$ph42$i = $rp$6$i$lcssa$lcssa;
        $z$6$ph$i = $602;
       }
       if ((label | 0) == 220) if ($576) {
        HEAP32[$x$i + ($602 + -1 << 2) >> 2] = 0;
        $616 = $z$6$ph$i;
        $a$4$i251 = $a$4$i;
        $e2$1$i248 = $e2$1$i;
        $z$10$i = $602;
       } else {
        $616 = $575;
        $a$4$i251 = $a$4$i;
        $e2$1$i248 = $e2$1$i;
        $z$10$i = $z$6$ph$i;
       }
       $618 = +((HEAP32[$x$i + ($616 << 2) >> 2] | 0) >>> 0);
       $620 = $a$4$i251 + 1 & 127;
       if (($620 | 0) == ($z$10$i | 0)) {
        $679 = $a$4$i251 + 2 & 127;
        HEAP32[$x$i + ($679 + -1 << 2) >> 2] = 0;
        $z$10$1$i = $679;
       } else $z$10$1$i = $z$10$i;
       $642 = +($sign$0 | 0);
       $624 = $642 * ($618 * 1.0e9 + +((HEAP32[$x$i + ($620 << 2) >> 2] | 0) >>> 0));
       $662 = $e2$1$i248 + 53 | 0;
       $668 = $662 - $emin$0$ph | 0;
       $669 = ($668 | 0) < ($bits$0$ph | 0);
       $denormal$0$i = $669 & 1;
       $$012$i = $669 ? (($668 | 0) < 0 ? 0 : $668) : $bits$0$ph;
       if (($$012$i | 0) < 53) {
        $625 = +_copysignl(+_scalbn(1.0, 105 - $$012$i | 0), $624);
        $628 = +_fmodl($624, +_scalbn(1.0, 53 - $$012$i | 0));
        $bias$0$i25 = $625;
        $frac$0$i = $628;
        $y$1$i24 = $625 + ($624 - $628);
       } else {
        $bias$0$i25 = 0.0;
        $frac$0$i = 0.0;
        $y$1$i24 = $624;
       }
       $632 = $a$4$i251 + 2 & 127;
       do if (($632 | 0) == ($z$10$1$i | 0)) $frac$3$i = $frac$0$i; else {
        $635 = HEAP32[$x$i + ($632 << 2) >> 2] | 0;
        do if ($635 >>> 0 < 5e8) {
         if (!$635) if (($a$4$i251 + 3 & 127 | 0) == ($z$10$1$i | 0)) {
          $frac$1$i = $frac$0$i;
          break;
         }
         $frac$1$i = $642 * .25 + $frac$0$i;
        } else {
         if ($635 >>> 0 > 5e8) {
          $frac$1$i = $642 * .75 + $frac$0$i;
          break;
         }
         if (($a$4$i251 + 3 & 127 | 0) == ($z$10$1$i | 0)) {
          $frac$1$i = $642 * .5 + $frac$0$i;
          break;
         } else {
          $frac$1$i = $642 * .75 + $frac$0$i;
          break;
         }
        } while (0);
        if ((53 - $$012$i | 0) <= 1) {
         $frac$3$i = $frac$1$i;
         break;
        }
        if (+_fmodl($frac$1$i, 1.0) != 0.0) {
         $frac$3$i = $frac$1$i;
         break;
        }
        $frac$3$i = $frac$1$i + 1.0;
       } while (0);
       $660 = $y$1$i24 + $frac$3$i - $bias$0$i25;
       do if (($662 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
        if (!(+Math_abs(+$660) >= 9007199254740992.0)) {
         $denormal$2$i = $denormal$0$i;
         $e2$3$i = $e2$1$i248;
         $y$2$i26 = $660;
        } else {
         $denormal$2$i = $669 & ($$012$i | 0) == ($668 | 0) ? 0 : $denormal$0$i;
         $e2$3$i = $e2$1$i248 + 1 | 0;
         $y$2$i26 = $660 * .5;
        }
        if (($e2$3$i + 50 | 0) <= ($330 | 0)) if (!($frac$3$i != 0.0 & ($denormal$2$i | 0) != 0)) {
         $e2$4$i = $e2$3$i;
         $y$3$i = $y$2$i26;
         break;
        }
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        $e2$4$i = $e2$3$i;
        $y$3$i = $y$2$i26;
       } else {
        $e2$4$i = $e2$1$i248;
        $y$3$i = $660;
       } while (0);
       $$1$i = +_scalbnl($y$3$i, $e2$4$i);
      } while (0);
      $$0 = $$1$i;
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$1 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim($f, 0);
      $$0 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $42 = (HEAP32[$1 >> 2] | 0) == 0;
   if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   if (($pok | 0) != 0 & $i$0$lcssa >>> 0 > 3) {
    $i$1 = $i$0$lcssa;
    do {
     if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $i$1 = $i$1 + -1 | 0;
    } while ($i$1 >>> 0 > 3);
   }
  }
  $$0 = +($sign$0 | 0) * inf;
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$4$i = 0, $100 = 0, $1001 = 0, $1006 = 0, $101 = 0, $1012 = 0, $1015 = 0, $1016 = 0, $1034 = 0, $1036 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1053 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $107 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $133 = 0, $139 = 0, $14 = 0, $142 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $193 = 0, $198 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $227 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $238 = 0, $239 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $251 = 0, $252 = 0, $257 = 0, $258 = 0, $261 = 0, $263 = 0, $266 = 0, $271 = 0, $278 = 0, $28 = 0, $287 = 0, $288 = 0, $292 = 0, $298 = 0, $303 = 0, $306 = 0, $310 = 0, $312 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $323 = 0, $325 = 0, $327 = 0, $337 = 0, $338 = 0, $340 = 0, $349 = 0, $35 = 0, $351 = 0, $354 = 0, $356 = 0, $359 = 0, $361 = 0, $364 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $382 = 0, $383 = 0, $39 = 0, $392 = 0, $397 = 0, $4 = 0, $401 = 0, $407 = 0, $414 = 0, $418 = 0, $42 = 0, $426 = 0, $429 = 0, $430 = 0, $431 = 0, $435 = 0, $436 = 0, $442 = 0, $447 = 0, $448 = 0, $45 = 0, $451 = 0, $453 = 0, $456 = 0, $461 = 0, $467 = 0, $469 = 0, $47 = 0, $471 = 0, $472 = 0, $48 = 0, $490 = 0, $492 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $509 = 0, $511 = 0, $512 = 0, $514 = 0, $52 = 0, $523 = 0, $527 = 0, $529 = 0, $530 = 0, $531 = 0, $539 = 0, $54 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $553 = 0, $555 = 0, $556 = 0, $56 = 0, $562 = 0, $564 = 0, $566 = 0, $573 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $585 = 0, $586 = 0, $589 = 0, $593 = 0, $597 = 0, $599 = 0, $6 = 0, $60 = 0, $605 = 0, $609 = 0, $613 = 0, $62 = 0, $622 = 0, $623 = 0, $629 = 0, $632 = 0, $635 = 0, $637 = 0, $642 = 0, $648 = 0, $65 = 0, $653 = 0, $654 = 0, $655 = 0, $661 = 0, $662 = 0, $663 = 0, $67 = 0, $678 = 0, $68 = 0, $683 = 0, $684 = 0, $686 = 0, $69 = 0, $692 = 0, $694 = 0, $7 = 0, $70 = 0, $704 = 0, $708 = 0, $71 = 0, $714 = 0, $716 = 0, $722 = 0, $726 = 0, $727 = 0, $732 = 0, $738 = 0, $743 = 0, $746 = 0, $747 = 0, $750 = 0, $752 = 0, $754 = 0, $757 = 0, $768 = 0, $773 = 0, $775 = 0, $778 = 0, $78 = 0, $780 = 0, $783 = 0, $786 = 0, $787 = 0, $788 = 0, $790 = 0, $792 = 0, $793 = 0, $795 = 0, $796 = 0, $801 = 0, $802 = 0, $811 = 0, $816 = 0, $819 = 0, $82 = 0, $820 = 0, $826 = 0, $834 = 0, $840 = 0, $843 = 0, $844 = 0, $845 = 0, $849 = 0, $85 = 0, $850 = 0, $856 = 0, $861 = 0, $862 = 0, $865 = 0, $867 = 0, $870 = 0, $875 = 0, $881 = 0, $883 = 0, $885 = 0, $886 = 0, $89 = 0, $904 = 0, $906 = 0, $91 = 0, $913 = 0, $914 = 0, $915 = 0, $92 = 0, $922 = 0, $926 = 0, $930 = 0, $932 = 0, $938 = 0, $939 = 0, $94 = 0, $941 = 0, $942 = 0, $946 = 0, $95 = 0, $951 = 0, $952 = 0, $953 = 0, $959 = 0, $96 = 0, $966 = 0, $971 = 0, $974 = 0, $975 = 0, $976 = 0, $980 = 0, $981 = 0, $987 = 0, $992 = 0, $993 = 0, $996 = 0, $998 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0;
 do if ($bytes >>> 0 < 245) {
  $4 = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $5 = $4 >>> 3;
  $6 = HEAP32[918959] | 0;
  $7 = $6 >>> $5;
  if ($7 & 3 | 0) {
   $12 = ($7 & 1 ^ 1) + $5 | 0;
   $14 = 3675876 + ($12 << 1 << 2) | 0;
   $15 = $14 + 8 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[918959] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $32 = $16 + $28 + 4 | 0;
   HEAP32[$32 >> 2] = HEAP32[$32 >> 2] | 1;
   $$0 = $17;
   return $$0 | 0;
  }
  $35 = HEAP32[918961] | 0;
  if ($4 >>> 0 > $35 >>> 0) {
   if ($7 | 0) {
    $39 = 2 << $5;
    $42 = $7 << $5 & ($39 | 0 - $39);
    $45 = ($42 & 0 - $42) + -1 | 0;
    $47 = $45 >>> 12 & 16;
    $48 = $45 >>> $47;
    $50 = $48 >>> 5 & 8;
    $52 = $48 >>> $50;
    $54 = $52 >>> 2 & 4;
    $56 = $52 >>> $54;
    $58 = $56 >>> 1 & 2;
    $60 = $56 >>> $58;
    $62 = $60 >>> 1 & 1;
    $65 = ($50 | $47 | $54 | $58 | $62) + ($60 >>> $62) | 0;
    $67 = 3675876 + ($65 << 1 << 2) | 0;
    $68 = $67 + 8 | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    do if (($67 | 0) == ($71 | 0)) {
     HEAP32[918959] = $6 & ~(1 << $65);
     $89 = $35;
    } else {
     if ($71 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
     $78 = $71 + 12 | 0;
     if ((HEAP32[$78 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$78 >> 2] = $67;
      HEAP32[$68 >> 2] = $71;
      $89 = HEAP32[918961] | 0;
      break;
     } else _abort();
    } while (0);
    $82 = ($65 << 3) - $4 | 0;
    HEAP32[$69 + 4 >> 2] = $4 | 3;
    $85 = $69 + $4 | 0;
    HEAP32[$85 + 4 >> 2] = $82 | 1;
    HEAP32[$85 + $82 >> 2] = $82;
    if ($89 | 0) {
     $91 = HEAP32[918964] | 0;
     $92 = $89 >>> 3;
     $94 = 3675876 + ($92 << 1 << 2) | 0;
     $95 = HEAP32[918959] | 0;
     $96 = 1 << $92;
     if (!($95 & $96)) {
      HEAP32[918959] = $95 | $96;
      $$pre$phiZ2D = $94 + 8 | 0;
      $F4$0 = $94;
     } else {
      $100 = $94 + 8 | 0;
      $101 = HEAP32[$100 >> 2] | 0;
      if ($101 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $100;
       $F4$0 = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $91;
     HEAP32[$F4$0 + 12 >> 2] = $91;
     HEAP32[$91 + 8 >> 2] = $F4$0;
     HEAP32[$91 + 12 >> 2] = $94;
    }
    HEAP32[918961] = $82;
    HEAP32[918964] = $85;
    $$0 = $70;
    return $$0 | 0;
   }
   $107 = HEAP32[918960] | 0;
   if (!$107) $nb$0 = $4; else {
    $111 = ($107 & 0 - $107) + -1 | 0;
    $113 = $111 >>> 12 & 16;
    $114 = $111 >>> $113;
    $116 = $114 >>> 5 & 8;
    $118 = $114 >>> $116;
    $120 = $118 >>> 2 & 4;
    $122 = $118 >>> $120;
    $124 = $122 >>> 1 & 2;
    $126 = $122 >>> $124;
    $128 = $126 >>> 1 & 1;
    $133 = HEAP32[3676140 + (($116 | $113 | $120 | $124 | $128) + ($126 >>> $128) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$133 + 4 >> 2] & -8) - $4 | 0;
    $t$0$i = $133;
    $v$0$i = $133;
    while (1) {
     $139 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$139) {
      $142 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$142) {
       $rsize$0$i$lcssa = $rsize$0$i;
       $v$0$i$lcssa = $v$0$i;
       break;
      } else $145 = $142;
     } else $145 = $139;
     $148 = (HEAP32[$145 + 4 >> 2] & -8) - $4 | 0;
     $149 = $148 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $149 ? $148 : $rsize$0$i;
     $t$0$i = $145;
     $v$0$i = $149 ? $145 : $v$0$i;
    }
    $150 = HEAP32[918963] | 0;
    if ($v$0$i$lcssa >>> 0 < $150 >>> 0) _abort();
    $152 = $v$0$i$lcssa + $4 | 0;
    if ($v$0$i$lcssa >>> 0 >= $152 >>> 0) _abort();
    $155 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0;
    $157 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0;
    do if (($157 | 0) == ($v$0$i$lcssa | 0)) {
     $168 = $v$0$i$lcssa + 20 | 0;
     $169 = HEAP32[$168 >> 2] | 0;
     if (!$169) {
      $171 = $v$0$i$lcssa + 16 | 0;
      $172 = HEAP32[$171 >> 2] | 0;
      if (!$172) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i = $172;
       $RP$1$i = $171;
      }
     } else {
      $R$1$i = $169;
      $RP$1$i = $168;
     }
     while (1) {
      $174 = $R$1$i + 20 | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      if ($175 | 0) {
       $R$1$i = $175;
       $RP$1$i = $174;
       continue;
      }
      $177 = $R$1$i + 16 | 0;
      $178 = HEAP32[$177 >> 2] | 0;
      if (!$178) {
       $R$1$i$lcssa = $R$1$i;
       $RP$1$i$lcssa = $RP$1$i;
       break;
      } else {
       $R$1$i = $178;
       $RP$1$i = $177;
      }
     }
     if ($RP$1$i$lcssa >>> 0 < $150 >>> 0) _abort(); else {
      HEAP32[$RP$1$i$lcssa >> 2] = 0;
      $R$3$i = $R$1$i$lcssa;
      break;
     }
    } else {
     $160 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0;
     if ($160 >>> 0 < $150 >>> 0) _abort();
     $162 = $160 + 12 | 0;
     if ((HEAP32[$162 >> 2] | 0) != ($v$0$i$lcssa | 0)) _abort();
     $165 = $157 + 8 | 0;
     if ((HEAP32[$165 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
      HEAP32[$162 >> 2] = $157;
      HEAP32[$165 >> 2] = $160;
      $R$3$i = $157;
      break;
     } else _abort();
    } while (0);
    do if ($155 | 0) {
     $183 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0;
     $184 = 3676140 + ($183 << 2) | 0;
     if (($v$0$i$lcssa | 0) == (HEAP32[$184 >> 2] | 0)) {
      HEAP32[$184 >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[918960] = HEAP32[918960] & ~(1 << $183);
       break;
      }
     } else {
      if ($155 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
      $193 = $155 + 16 | 0;
      if ((HEAP32[$193 >> 2] | 0) == ($v$0$i$lcssa | 0)) HEAP32[$193 >> 2] = $R$3$i; else HEAP32[$155 + 20 >> 2] = $R$3$i;
      if (!$R$3$i) break;
     }
     $198 = HEAP32[918963] | 0;
     if ($R$3$i >>> 0 < $198 >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $155;
     $202 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0;
     do if ($202 | 0) if ($202 >>> 0 < $198 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $208 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0;
     if ($208 | 0) if ($208 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$i$lcssa >>> 0 < 16) {
     $215 = $rsize$0$i$lcssa + $4 | 0;
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $215 | 3;
     $219 = $v$0$i$lcssa + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $4 | 3;
     HEAP32[$152 + 4 >> 2] = $rsize$0$i$lcssa | 1;
     HEAP32[$152 + $rsize$0$i$lcssa >> 2] = $rsize$0$i$lcssa;
     $227 = HEAP32[918961] | 0;
     if ($227 | 0) {
      $229 = HEAP32[918964] | 0;
      $230 = $227 >>> 3;
      $232 = 3675876 + ($230 << 1 << 2) | 0;
      $233 = HEAP32[918959] | 0;
      $234 = 1 << $230;
      if (!($233 & $234)) {
       HEAP32[918959] = $233 | $234;
       $$pre$phi$iZ2D = $232 + 8 | 0;
       $F1$0$i = $232;
      } else {
       $238 = $232 + 8 | 0;
       $239 = HEAP32[$238 >> 2] | 0;
       if ($239 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $238;
        $F1$0$i = $239;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $229;
      HEAP32[$F1$0$i + 12 >> 2] = $229;
      HEAP32[$229 + 8 >> 2] = $F1$0$i;
      HEAP32[$229 + 12 >> 2] = $232;
     }
     HEAP32[918961] = $rsize$0$i$lcssa;
     HEAP32[918964] = $152;
    }
    $$0 = $v$0$i$lcssa + 8 | 0;
    return $$0 | 0;
   }
  } else $nb$0 = $4;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $247 = $bytes + 11 | 0;
  $248 = $247 & -8;
  $249 = HEAP32[918960] | 0;
  if (!$249) $nb$0 = $248; else {
   $251 = 0 - $248 | 0;
   $252 = $247 >>> 8;
   if (!$252) $idx$0$i = 0; else if ($248 >>> 0 > 16777215) $idx$0$i = 31; else {
    $257 = ($252 + 1048320 | 0) >>> 16 & 8;
    $258 = $252 << $257;
    $261 = ($258 + 520192 | 0) >>> 16 & 4;
    $263 = $258 << $261;
    $266 = ($263 + 245760 | 0) >>> 16 & 2;
    $271 = 14 - ($261 | $257 | $266) + ($263 << $266 >>> 15) | 0;
    $idx$0$i = $248 >>> ($271 + 7 | 0) & 1 | $271 << 1;
   }
   $278 = HEAP32[3676140 + ($idx$0$i << 2) >> 2] | 0;
   L123 : do if (!$278) {
    $rsize$3$i = $251;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 86;
   } else {
    $rsize$0$i5 = $251;
    $rst$0$i = 0;
    $sizebits$0$i = $248 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i4 = $278;
    $v$0$i6 = 0;
    while (1) {
     $287 = HEAP32[$t$0$i4 + 4 >> 2] & -8;
     $288 = $287 - $248 | 0;
     if ($288 >>> 0 < $rsize$0$i5 >>> 0) if (($287 | 0) == ($248 | 0)) {
      $rsize$412$i = $288;
      $t$411$i = $t$0$i4;
      $v$413$i = $t$0$i4;
      label = 90;
      break L123;
     } else {
      $rsize$1$i = $288;
      $v$1$i = $t$0$i4;
     } else {
      $rsize$1$i = $rsize$0$i5;
      $v$1$i = $v$0$i6;
     }
     $292 = HEAP32[$t$0$i4 + 20 >> 2] | 0;
     $t$0$i4 = HEAP32[$t$0$i4 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($292 | 0) == 0 | ($292 | 0) == ($t$0$i4 | 0) ? $rst$0$i : $292;
     $298 = ($t$0$i4 | 0) == 0;
     if ($298) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 86;
      break;
     } else {
      $rsize$0$i5 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << ($298 & 1 ^ 1);
      $v$0$i6 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 86) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $303 = 2 << $idx$0$i;
     $306 = $249 & ($303 | 0 - $303);
     if (!$306) {
      $nb$0 = $248;
      break;
     }
     $310 = ($306 & 0 - $306) + -1 | 0;
     $312 = $310 >>> 12 & 16;
     $313 = $310 >>> $312;
     $315 = $313 >>> 5 & 8;
     $317 = $313 >>> $315;
     $319 = $317 >>> 2 & 4;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 2;
     $325 = $321 >>> $323;
     $327 = $325 >>> 1 & 1;
     $t$4$ph$i = HEAP32[3676140 + (($315 | $312 | $319 | $323 | $327) + ($325 >>> $327) << 2) >> 2] | 0;
    } else $t$4$ph$i = $t$2$i;
    if (!$t$4$ph$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i;
    } else {
     $rsize$412$i = $rsize$3$i;
     $t$411$i = $t$4$ph$i;
     $v$413$i = $v$3$i;
     label = 90;
    }
   }
   if ((label | 0) == 90) while (1) {
    label = 0;
    $337 = (HEAP32[$t$411$i + 4 >> 2] & -8) - $248 | 0;
    $338 = $337 >>> 0 < $rsize$412$i >>> 0;
    $$rsize$4$i = $338 ? $337 : $rsize$412$i;
    $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
    $340 = HEAP32[$t$411$i + 16 >> 2] | 0;
    if ($340 | 0) {
     $rsize$412$i = $$rsize$4$i;
     $t$411$i = $340;
     $v$413$i = $t$4$v$4$i;
     label = 90;
     continue;
    }
    $t$411$i = HEAP32[$t$411$i + 20 >> 2] | 0;
    if (!$t$411$i) {
     $rsize$4$lcssa$i = $$rsize$4$i;
     $v$4$lcssa$i = $t$4$v$4$i;
     break;
    } else {
     $rsize$412$i = $$rsize$4$i;
     $v$413$i = $t$4$v$4$i;
     label = 90;
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $248; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[918961] | 0) - $248 | 0) >>> 0) {
    $349 = HEAP32[918963] | 0;
    if ($v$4$lcssa$i >>> 0 < $349 >>> 0) _abort();
    $351 = $v$4$lcssa$i + $248 | 0;
    if ($v$4$lcssa$i >>> 0 >= $351 >>> 0) _abort();
    $354 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $356 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($356 | 0) == ($v$4$lcssa$i | 0)) {
     $367 = $v$4$lcssa$i + 20 | 0;
     $368 = HEAP32[$367 >> 2] | 0;
     if (!$368) {
      $370 = $v$4$lcssa$i + 16 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $R$3$i11 = 0;
       break;
      } else {
       $R$1$i9 = $371;
       $RP$1$i8 = $370;
      }
     } else {
      $R$1$i9 = $368;
      $RP$1$i8 = $367;
     }
     while (1) {
      $373 = $R$1$i9 + 20 | 0;
      $374 = HEAP32[$373 >> 2] | 0;
      if ($374 | 0) {
       $R$1$i9 = $374;
       $RP$1$i8 = $373;
       continue;
      }
      $376 = $R$1$i9 + 16 | 0;
      $377 = HEAP32[$376 >> 2] | 0;
      if (!$377) {
       $R$1$i9$lcssa = $R$1$i9;
       $RP$1$i8$lcssa = $RP$1$i8;
       break;
      } else {
       $R$1$i9 = $377;
       $RP$1$i8 = $376;
      }
     }
     if ($RP$1$i8$lcssa >>> 0 < $349 >>> 0) _abort(); else {
      HEAP32[$RP$1$i8$lcssa >> 2] = 0;
      $R$3$i11 = $R$1$i9$lcssa;
      break;
     }
    } else {
     $359 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($359 >>> 0 < $349 >>> 0) _abort();
     $361 = $359 + 12 | 0;
     if ((HEAP32[$361 >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $364 = $356 + 8 | 0;
     if ((HEAP32[$364 >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$361 >> 2] = $356;
      HEAP32[$364 >> 2] = $359;
      $R$3$i11 = $356;
      break;
     } else _abort();
    } while (0);
    do if ($354 | 0) {
     $382 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $383 = 3676140 + ($382 << 2) | 0;
     if (($v$4$lcssa$i | 0) == (HEAP32[$383 >> 2] | 0)) {
      HEAP32[$383 >> 2] = $R$3$i11;
      if (!$R$3$i11) {
       HEAP32[918960] = HEAP32[918960] & ~(1 << $382);
       break;
      }
     } else {
      if ($354 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
      $392 = $354 + 16 | 0;
      if ((HEAP32[$392 >> 2] | 0) == ($v$4$lcssa$i | 0)) HEAP32[$392 >> 2] = $R$3$i11; else HEAP32[$354 + 20 >> 2] = $R$3$i11;
      if (!$R$3$i11) break;
     }
     $397 = HEAP32[918963] | 0;
     if ($R$3$i11 >>> 0 < $397 >>> 0) _abort();
     HEAP32[$R$3$i11 + 24 >> 2] = $354;
     $401 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($401 | 0) if ($401 >>> 0 < $397 >>> 0) _abort(); else {
      HEAP32[$R$3$i11 + 16 >> 2] = $401;
      HEAP32[$401 + 24 >> 2] = $R$3$i11;
      break;
     } while (0);
     $407 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if ($407 | 0) if ($407 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i11 + 20 >> 2] = $407;
      HEAP32[$407 + 24 >> 2] = $R$3$i11;
      break;
     }
    } while (0);
    do if ($rsize$4$lcssa$i >>> 0 < 16) {
     $414 = $rsize$4$lcssa$i + $248 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $414 | 3;
     $418 = $v$4$lcssa$i + $414 + 4 | 0;
     HEAP32[$418 >> 2] = HEAP32[$418 >> 2] | 1;
    } else {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $248 | 3;
     HEAP32[$351 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$351 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $426 = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $429 = 3675876 + ($426 << 1 << 2) | 0;
      $430 = HEAP32[918959] | 0;
      $431 = 1 << $426;
      if (!($430 & $431)) {
       HEAP32[918959] = $430 | $431;
       $$pre$phi$i14Z2D = $429 + 8 | 0;
       $F5$0$i = $429;
      } else {
       $435 = $429 + 8 | 0;
       $436 = HEAP32[$435 >> 2] | 0;
       if ($436 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
        $$pre$phi$i14Z2D = $435;
        $F5$0$i = $436;
       }
      }
      HEAP32[$$pre$phi$i14Z2D >> 2] = $351;
      HEAP32[$F5$0$i + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $F5$0$i;
      HEAP32[$351 + 12 >> 2] = $429;
      break;
     }
     $442 = $rsize$4$lcssa$i >>> 8;
     if (!$442) $I7$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $447 = ($442 + 1048320 | 0) >>> 16 & 8;
      $448 = $442 << $447;
      $451 = ($448 + 520192 | 0) >>> 16 & 4;
      $453 = $448 << $451;
      $456 = ($453 + 245760 | 0) >>> 16 & 2;
      $461 = 14 - ($451 | $447 | $456) + ($453 << $456 >>> 15) | 0;
      $I7$0$i = $rsize$4$lcssa$i >>> ($461 + 7 | 0) & 1 | $461 << 1;
     }
     $467 = 3676140 + ($I7$0$i << 2) | 0;
     HEAP32[$351 + 28 >> 2] = $I7$0$i;
     $469 = $351 + 16 | 0;
     HEAP32[$469 + 4 >> 2] = 0;
     HEAP32[$469 >> 2] = 0;
     $471 = HEAP32[918960] | 0;
     $472 = 1 << $I7$0$i;
     if (!($471 & $472)) {
      HEAP32[918960] = $471 | $472;
      HEAP32[$467 >> 2] = $351;
      HEAP32[$351 + 24 >> 2] = $467;
      HEAP32[$351 + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $351;
      break;
     }
     $K12$0$i = $rsize$4$lcssa$i << (($I7$0$i | 0) == 31 ? 0 : 25 - ($I7$0$i >>> 1) | 0);
     $T$0$i = HEAP32[$467 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
       $T$0$i$lcssa = $T$0$i;
       label = 148;
       break;
      }
      $490 = $T$0$i + 16 + ($K12$0$i >>> 31 << 2) | 0;
      $492 = HEAP32[$490 >> 2] | 0;
      if (!$492) {
       $$lcssa157 = $490;
       $T$0$i$lcssa156 = $T$0$i;
       label = 145;
       break;
      } else {
       $K12$0$i = $K12$0$i << 1;
       $T$0$i = $492;
      }
     }
     if ((label | 0) == 145) if ($$lcssa157 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa157 >> 2] = $351;
      HEAP32[$351 + 24 >> 2] = $T$0$i$lcssa156;
      HEAP32[$351 + 12 >> 2] = $351;
      HEAP32[$351 + 8 >> 2] = $351;
      break;
     } else if ((label | 0) == 148) {
      $499 = $T$0$i$lcssa + 8 | 0;
      $500 = HEAP32[$499 >> 2] | 0;
      $501 = HEAP32[918963] | 0;
      if ($500 >>> 0 >= $501 >>> 0 & $T$0$i$lcssa >>> 0 >= $501 >>> 0) {
       HEAP32[$500 + 12 >> 2] = $351;
       HEAP32[$499 >> 2] = $351;
       HEAP32[$351 + 8 >> 2] = $500;
       HEAP32[$351 + 12 >> 2] = $T$0$i$lcssa;
       HEAP32[$351 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $v$4$lcssa$i + 8 | 0;
    return $$0 | 0;
   } else $nb$0 = $248;
  }
 } while (0);
 $509 = HEAP32[918961] | 0;
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[918964] | 0;
  if ($511 >>> 0 > 15) {
   $514 = $512 + $nb$0 | 0;
   HEAP32[918964] = $514;
   HEAP32[918961] = $511;
   HEAP32[$514 + 4 >> 2] = $511 | 1;
   HEAP32[$514 + $511 >> 2] = $511;
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[918961] = 0;
   HEAP32[918964] = 0;
   HEAP32[$512 + 4 >> 2] = $509 | 3;
   $523 = $512 + $509 + 4 | 0;
   HEAP32[$523 >> 2] = HEAP32[$523 >> 2] | 1;
  }
  $$0 = $512 + 8 | 0;
  return $$0 | 0;
 }
 $527 = HEAP32[918962] | 0;
 if ($527 >>> 0 > $nb$0 >>> 0) {
  $529 = $527 - $nb$0 | 0;
  HEAP32[918962] = $529;
  $530 = HEAP32[918965] | 0;
  $531 = $530 + $nb$0 | 0;
  HEAP32[918965] = $531;
  HEAP32[$531 + 4 >> 2] = $529 | 1;
  HEAP32[$530 + 4 >> 2] = $nb$0 | 3;
  $$0 = $530 + 8 | 0;
  return $$0 | 0;
 }
 do if (!(HEAP32[919077] | 0)) {
  $539 = _sysconf(30) | 0;
  if (!($539 + -1 & $539)) {
   HEAP32[919079] = $539;
   HEAP32[919078] = $539;
   HEAP32[919080] = -1;
   HEAP32[919081] = -1;
   HEAP32[919082] = 0;
   HEAP32[919070] = 0;
   HEAP32[919077] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 $546 = $nb$0 + 48 | 0;
 $547 = HEAP32[919079] | 0;
 $548 = $nb$0 + 47 | 0;
 $549 = $547 + $548 | 0;
 $550 = 0 - $547 | 0;
 $551 = $549 & $550;
 if ($551 >>> 0 <= $nb$0 >>> 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $553 = HEAP32[919069] | 0;
 if ($553 | 0) {
  $555 = HEAP32[919067] | 0;
  $556 = $555 + $551 | 0;
  if ($556 >>> 0 <= $555 >>> 0 | $556 >>> 0 > $553 >>> 0) {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[919070] & 4)) {
  $562 = HEAP32[918965] | 0;
  L259 : do if (!$562) label = 173; else {
   $sp$0$i$i = 3676284;
   while (1) {
    $564 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($564 >>> 0 <= $562 >>> 0) {
     $566 = $sp$0$i$i + 4 | 0;
     if (($564 + (HEAP32[$566 >> 2] | 0) | 0) >>> 0 > $562 >>> 0) {
      $$lcssa153 = $sp$0$i$i;
      $$lcssa155 = $566;
      break;
     }
    }
    $sp$0$i$i = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$sp$0$i$i) {
     label = 173;
     break L259;
    }
   }
   $597 = $549 - (HEAP32[918962] | 0) & $550;
   if ($597 >>> 0 < 2147483647) {
    $599 = _sbrk($597 | 0) | 0;
    if (($599 | 0) == ((HEAP32[$$lcssa153 >> 2] | 0) + (HEAP32[$$lcssa155 >> 2] | 0) | 0)) {
     if (($599 | 0) != (-1 | 0)) {
      $tbase$746$i = $599;
      $tsize$745$i = $597;
      label = 193;
      break L257;
     }
    } else {
     $br$2$ph$i = $599;
     $ssize$2$ph$i = $597;
     label = 183;
    }
   }
  } while (0);
  do if ((label | 0) == 173) {
   $573 = _sbrk(0) | 0;
   if (($573 | 0) != (-1 | 0)) {
    $575 = $573;
    $576 = HEAP32[919078] | 0;
    $577 = $576 + -1 | 0;
    if (!($577 & $575)) $ssize$0$i = $551; else $ssize$0$i = $551 - $575 + ($577 + $575 & 0 - $576) | 0;
    $585 = HEAP32[919067] | 0;
    $586 = $585 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $589 = HEAP32[919069] | 0;
     if ($589 | 0) if ($586 >>> 0 <= $585 >>> 0 | $586 >>> 0 > $589 >>> 0) break;
     $593 = _sbrk($ssize$0$i | 0) | 0;
     if (($593 | 0) == ($573 | 0)) {
      $tbase$746$i = $573;
      $tsize$745$i = $ssize$0$i;
      label = 193;
      break L257;
     } else {
      $br$2$ph$i = $593;
      $ssize$2$ph$i = $ssize$0$i;
      label = 183;
     }
    }
   }
  } while (0);
  L279 : do if ((label | 0) == 183) {
   $605 = 0 - $ssize$2$ph$i | 0;
   do if ($546 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0))) {
    $609 = HEAP32[919079] | 0;
    $613 = $548 - $ssize$2$ph$i + $609 & 0 - $609;
    if ($613 >>> 0 < 2147483647) if ((_sbrk($613 | 0) | 0) == (-1 | 0)) {
     _sbrk($605 | 0) | 0;
     break L279;
    } else {
     $ssize$5$i = $613 + $ssize$2$ph$i | 0;
     break;
    } else $ssize$5$i = $ssize$2$ph$i;
   } else $ssize$5$i = $ssize$2$ph$i; while (0);
   if (($br$2$ph$i | 0) != (-1 | 0)) {
    $tbase$746$i = $br$2$ph$i;
    $tsize$745$i = $ssize$5$i;
    label = 193;
    break L257;
   }
  } while (0);
  HEAP32[919070] = HEAP32[919070] | 4;
  label = 190;
 } else label = 190; while (0);
 if ((label | 0) == 190) if ($551 >>> 0 < 2147483647) {
  $622 = _sbrk($551 | 0) | 0;
  $623 = _sbrk(0) | 0;
  if ($622 >>> 0 < $623 >>> 0 & (($622 | 0) != (-1 | 0) & ($623 | 0) != (-1 | 0))) {
   $629 = $623 - $622 | 0;
   if ($629 >>> 0 > ($nb$0 + 40 | 0) >>> 0) {
    $tbase$746$i = $622;
    $tsize$745$i = $629;
    label = 193;
   }
  }
 }
 if ((label | 0) == 193) {
  $632 = (HEAP32[919067] | 0) + $tsize$745$i | 0;
  HEAP32[919067] = $632;
  if ($632 >>> 0 > (HEAP32[919068] | 0) >>> 0) HEAP32[919068] = $632;
  $635 = HEAP32[918965] | 0;
  do if (!$635) {
   $637 = HEAP32[918963] | 0;
   if (($637 | 0) == 0 | $tbase$746$i >>> 0 < $637 >>> 0) HEAP32[918963] = $tbase$746$i;
   HEAP32[919071] = $tbase$746$i;
   HEAP32[919072] = $tsize$745$i;
   HEAP32[919074] = 0;
   HEAP32[918968] = HEAP32[919077];
   HEAP32[918967] = -1;
   $i$01$i$i = 0;
   do {
    $642 = 3675876 + ($i$01$i$i << 1 << 2) | 0;
    HEAP32[$642 + 12 >> 2] = $642;
    HEAP32[$642 + 8 >> 2] = $642;
    $i$01$i$i = $i$01$i$i + 1 | 0;
   } while (($i$01$i$i | 0) != 32);
   $648 = $tbase$746$i + 8 | 0;
   $653 = ($648 & 7 | 0) == 0 ? 0 : 0 - $648 & 7;
   $654 = $tbase$746$i + $653 | 0;
   $655 = $tsize$745$i + -40 - $653 | 0;
   HEAP32[918965] = $654;
   HEAP32[918962] = $655;
   HEAP32[$654 + 4 >> 2] = $655 | 1;
   HEAP32[$654 + $655 + 4 >> 2] = 40;
   HEAP32[918966] = HEAP32[919081];
  } else {
   $sp$068$i = 3676284;
   do {
    $661 = HEAP32[$sp$068$i >> 2] | 0;
    $662 = $sp$068$i + 4 | 0;
    $663 = HEAP32[$662 >> 2] | 0;
    if (($tbase$746$i | 0) == ($661 + $663 | 0)) {
     $$lcssa147 = $661;
     $$lcssa149 = $662;
     $$lcssa151 = $663;
     $sp$068$i$lcssa = $sp$068$i;
     label = 203;
     break;
    }
    $sp$068$i = HEAP32[$sp$068$i + 8 >> 2] | 0;
   } while (($sp$068$i | 0) != 0);
   if ((label | 0) == 203) if (!(HEAP32[$sp$068$i$lcssa + 12 >> 2] & 8)) if ($635 >>> 0 < $tbase$746$i >>> 0 & $635 >>> 0 >= $$lcssa147 >>> 0) {
    HEAP32[$$lcssa149 >> 2] = $$lcssa151 + $tsize$745$i;
    $678 = $635 + 8 | 0;
    $683 = ($678 & 7 | 0) == 0 ? 0 : 0 - $678 & 7;
    $684 = $635 + $683 | 0;
    $686 = $tsize$745$i - $683 + (HEAP32[918962] | 0) | 0;
    HEAP32[918965] = $684;
    HEAP32[918962] = $686;
    HEAP32[$684 + 4 >> 2] = $686 | 1;
    HEAP32[$684 + $686 + 4 >> 2] = 40;
    HEAP32[918966] = HEAP32[919081];
    break;
   }
   $692 = HEAP32[918963] | 0;
   if ($tbase$746$i >>> 0 < $692 >>> 0) {
    HEAP32[918963] = $tbase$746$i;
    $757 = $tbase$746$i;
   } else $757 = $692;
   $694 = $tbase$746$i + $tsize$745$i | 0;
   $sp$167$i = 3676284;
   while (1) {
    if ((HEAP32[$sp$167$i >> 2] | 0) == ($694 | 0)) {
     $$lcssa144 = $sp$167$i;
     $sp$167$i$lcssa = $sp$167$i;
     label = 211;
     break;
    }
    $sp$167$i = HEAP32[$sp$167$i + 8 >> 2] | 0;
    if (!$sp$167$i) {
     $sp$0$i$i$i = 3676284;
     break;
    }
   }
   if ((label | 0) == 211) if (!(HEAP32[$sp$167$i$lcssa + 12 >> 2] & 8)) {
    HEAP32[$$lcssa144 >> 2] = $tbase$746$i;
    $704 = $sp$167$i$lcssa + 4 | 0;
    HEAP32[$704 >> 2] = (HEAP32[$704 >> 2] | 0) + $tsize$745$i;
    $708 = $tbase$746$i + 8 | 0;
    $714 = $tbase$746$i + (($708 & 7 | 0) == 0 ? 0 : 0 - $708 & 7) | 0;
    $716 = $694 + 8 | 0;
    $722 = $694 + (($716 & 7 | 0) == 0 ? 0 : 0 - $716 & 7) | 0;
    $726 = $714 + $nb$0 | 0;
    $727 = $722 - $714 - $nb$0 | 0;
    HEAP32[$714 + 4 >> 2] = $nb$0 | 3;
    do if (($722 | 0) == ($635 | 0)) {
     $732 = (HEAP32[918962] | 0) + $727 | 0;
     HEAP32[918962] = $732;
     HEAP32[918965] = $726;
     HEAP32[$726 + 4 >> 2] = $732 | 1;
    } else {
     if (($722 | 0) == (HEAP32[918964] | 0)) {
      $738 = (HEAP32[918961] | 0) + $727 | 0;
      HEAP32[918961] = $738;
      HEAP32[918964] = $726;
      HEAP32[$726 + 4 >> 2] = $738 | 1;
      HEAP32[$726 + $738 >> 2] = $738;
      break;
     }
     $743 = HEAP32[$722 + 4 >> 2] | 0;
     if (($743 & 3 | 0) == 1) {
      $746 = $743 & -8;
      $747 = $743 >>> 3;
      L331 : do if ($743 >>> 0 < 256) {
       $750 = HEAP32[$722 + 8 >> 2] | 0;
       $752 = HEAP32[$722 + 12 >> 2] | 0;
       $754 = 3675876 + ($747 << 1 << 2) | 0;
       do if (($750 | 0) != ($754 | 0)) {
        if ($750 >>> 0 < $757 >>> 0) _abort();
        if ((HEAP32[$750 + 12 >> 2] | 0) == ($722 | 0)) break;
        _abort();
       } while (0);
       if (($752 | 0) == ($750 | 0)) {
        HEAP32[918959] = HEAP32[918959] & ~(1 << $747);
        break;
       }
       do if (($752 | 0) == ($754 | 0)) $$pre$phi10$i$iZ2D = $752 + 8 | 0; else {
        if ($752 >>> 0 < $757 >>> 0) _abort();
        $768 = $752 + 8 | 0;
        if ((HEAP32[$768 >> 2] | 0) == ($722 | 0)) {
         $$pre$phi10$i$iZ2D = $768;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$750 + 12 >> 2] = $752;
       HEAP32[$$pre$phi10$i$iZ2D >> 2] = $750;
      } else {
       $773 = HEAP32[$722 + 24 >> 2] | 0;
       $775 = HEAP32[$722 + 12 >> 2] | 0;
       do if (($775 | 0) == ($722 | 0)) {
        $786 = $722 + 16 | 0;
        $787 = $786 + 4 | 0;
        $788 = HEAP32[$787 >> 2] | 0;
        if (!$788) {
         $790 = HEAP32[$786 >> 2] | 0;
         if (!$790) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i = $790;
          $RP$1$i$i = $786;
         }
        } else {
         $R$1$i$i = $788;
         $RP$1$i$i = $787;
        }
        while (1) {
         $792 = $R$1$i$i + 20 | 0;
         $793 = HEAP32[$792 >> 2] | 0;
         if ($793 | 0) {
          $R$1$i$i = $793;
          $RP$1$i$i = $792;
          continue;
         }
         $795 = $R$1$i$i + 16 | 0;
         $796 = HEAP32[$795 >> 2] | 0;
         if (!$796) {
          $R$1$i$i$lcssa = $R$1$i$i;
          $RP$1$i$i$lcssa = $RP$1$i$i;
          break;
         } else {
          $R$1$i$i = $796;
          $RP$1$i$i = $795;
         }
        }
        if ($RP$1$i$i$lcssa >>> 0 < $757 >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i$lcssa >> 2] = 0;
         $R$3$i$i = $R$1$i$i$lcssa;
         break;
        }
       } else {
        $778 = HEAP32[$722 + 8 >> 2] | 0;
        if ($778 >>> 0 < $757 >>> 0) _abort();
        $780 = $778 + 12 | 0;
        if ((HEAP32[$780 >> 2] | 0) != ($722 | 0)) _abort();
        $783 = $775 + 8 | 0;
        if ((HEAP32[$783 >> 2] | 0) == ($722 | 0)) {
         HEAP32[$780 >> 2] = $775;
         HEAP32[$783 >> 2] = $778;
         $R$3$i$i = $775;
         break;
        } else _abort();
       } while (0);
       if (!$773) break;
       $801 = HEAP32[$722 + 28 >> 2] | 0;
       $802 = 3676140 + ($801 << 2) | 0;
       do if (($722 | 0) == (HEAP32[$802 >> 2] | 0)) {
        HEAP32[$802 >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[918960] = HEAP32[918960] & ~(1 << $801);
        break L331;
       } else {
        if ($773 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
        $811 = $773 + 16 | 0;
        if ((HEAP32[$811 >> 2] | 0) == ($722 | 0)) HEAP32[$811 >> 2] = $R$3$i$i; else HEAP32[$773 + 20 >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L331;
       } while (0);
       $816 = HEAP32[918963] | 0;
       if ($R$3$i$i >>> 0 < $816 >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $773;
       $819 = $722 + 16 | 0;
       $820 = HEAP32[$819 >> 2] | 0;
       do if ($820 | 0) if ($820 >>> 0 < $816 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $820;
        HEAP32[$820 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $826 = HEAP32[$819 + 4 >> 2] | 0;
       if (!$826) break;
       if ($826 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $826;
        HEAP32[$826 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $722 + $746 | 0;
      $qsize$0$i$i = $746 + $727 | 0;
     } else {
      $oldfirst$0$i$i = $722;
      $qsize$0$i$i = $727;
     }
     $834 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$834 >> 2] = HEAP32[$834 >> 2] & -2;
     HEAP32[$726 + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$726 + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $840 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $843 = 3675876 + ($840 << 1 << 2) | 0;
      $844 = HEAP32[918959] | 0;
      $845 = 1 << $840;
      do if (!($844 & $845)) {
       HEAP32[918959] = $844 | $845;
       $$pre$phi$i17$iZ2D = $843 + 8 | 0;
       $F4$0$i$i = $843;
      } else {
       $849 = $843 + 8 | 0;
       $850 = HEAP32[$849 >> 2] | 0;
       if ($850 >>> 0 >= (HEAP32[918963] | 0) >>> 0) {
        $$pre$phi$i17$iZ2D = $849;
        $F4$0$i$i = $850;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i17$iZ2D >> 2] = $726;
      HEAP32[$F4$0$i$i + 12 >> 2] = $726;
      HEAP32[$726 + 8 >> 2] = $F4$0$i$i;
      HEAP32[$726 + 12 >> 2] = $843;
      break;
     }
     $856 = $qsize$0$i$i >>> 8;
     do if (!$856) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $861 = ($856 + 1048320 | 0) >>> 16 & 8;
      $862 = $856 << $861;
      $865 = ($862 + 520192 | 0) >>> 16 & 4;
      $867 = $862 << $865;
      $870 = ($867 + 245760 | 0) >>> 16 & 2;
      $875 = 14 - ($865 | $861 | $870) + ($867 << $870 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($875 + 7 | 0) & 1 | $875 << 1;
     } while (0);
     $881 = 3676140 + ($I7$0$i$i << 2) | 0;
     HEAP32[$726 + 28 >> 2] = $I7$0$i$i;
     $883 = $726 + 16 | 0;
     HEAP32[$883 + 4 >> 2] = 0;
     HEAP32[$883 >> 2] = 0;
     $885 = HEAP32[918960] | 0;
     $886 = 1 << $I7$0$i$i;
     if (!($885 & $886)) {
      HEAP32[918960] = $885 | $886;
      HEAP32[$881 >> 2] = $726;
      HEAP32[$726 + 24 >> 2] = $881;
      HEAP32[$726 + 12 >> 2] = $726;
      HEAP32[$726 + 8 >> 2] = $726;
      break;
     }
     $K8$0$i$i = $qsize$0$i$i << (($I7$0$i$i | 0) == 31 ? 0 : 25 - ($I7$0$i$i >>> 1) | 0);
     $T$0$i18$i = HEAP32[$881 >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i18$i + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
       $T$0$i18$i$lcssa = $T$0$i18$i;
       label = 281;
       break;
      }
      $904 = $T$0$i18$i + 16 + ($K8$0$i$i >>> 31 << 2) | 0;
      $906 = HEAP32[$904 >> 2] | 0;
      if (!$906) {
       $$lcssa = $904;
       $T$0$i18$i$lcssa139 = $T$0$i18$i;
       label = 278;
       break;
      } else {
       $K8$0$i$i = $K8$0$i$i << 1;
       $T$0$i18$i = $906;
      }
     }
     if ((label | 0) == 278) if ($$lcssa >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa >> 2] = $726;
      HEAP32[$726 + 24 >> 2] = $T$0$i18$i$lcssa139;
      HEAP32[$726 + 12 >> 2] = $726;
      HEAP32[$726 + 8 >> 2] = $726;
      break;
     } else if ((label | 0) == 281) {
      $913 = $T$0$i18$i$lcssa + 8 | 0;
      $914 = HEAP32[$913 >> 2] | 0;
      $915 = HEAP32[918963] | 0;
      if ($914 >>> 0 >= $915 >>> 0 & $T$0$i18$i$lcssa >>> 0 >= $915 >>> 0) {
       HEAP32[$914 + 12 >> 2] = $726;
       HEAP32[$913 >> 2] = $726;
       HEAP32[$726 + 8 >> 2] = $914;
       HEAP32[$726 + 12 >> 2] = $T$0$i18$i$lcssa;
       HEAP32[$726 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $$0 = $714 + 8 | 0;
    return $$0 | 0;
   } else $sp$0$i$i$i = 3676284;
   while (1) {
    $922 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($922 >>> 0 <= $635 >>> 0) {
     $926 = $922 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($926 >>> 0 > $635 >>> 0) {
      $$lcssa142 = $926;
      break;
     }
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $930 = $$lcssa142 + -47 | 0;
   $932 = $930 + 8 | 0;
   $938 = $930 + (($932 & 7 | 0) == 0 ? 0 : 0 - $932 & 7) | 0;
   $939 = $635 + 16 | 0;
   $941 = $938 >>> 0 < $939 >>> 0 ? $635 : $938;
   $942 = $941 + 8 | 0;
   $946 = $tbase$746$i + 8 | 0;
   $951 = ($946 & 7 | 0) == 0 ? 0 : 0 - $946 & 7;
   $952 = $tbase$746$i + $951 | 0;
   $953 = $tsize$745$i + -40 - $951 | 0;
   HEAP32[918965] = $952;
   HEAP32[918962] = $953;
   HEAP32[$952 + 4 >> 2] = $953 | 1;
   HEAP32[$952 + $953 + 4 >> 2] = 40;
   HEAP32[918966] = HEAP32[919081];
   $959 = $941 + 4 | 0;
   HEAP32[$959 >> 2] = 27;
   HEAP32[$942 >> 2] = HEAP32[919071];
   HEAP32[$942 + 4 >> 2] = HEAP32[919072];
   HEAP32[$942 + 8 >> 2] = HEAP32[919073];
   HEAP32[$942 + 12 >> 2] = HEAP32[919074];
   HEAP32[919071] = $tbase$746$i;
   HEAP32[919072] = $tsize$745$i;
   HEAP32[919074] = 0;
   HEAP32[919073] = $942;
   $p$0$i$i = $941 + 24 | 0;
   do {
    $p$0$i$i = $p$0$i$i + 4 | 0;
    HEAP32[$p$0$i$i >> 2] = 7;
   } while (($p$0$i$i + 4 | 0) >>> 0 < $$lcssa142 >>> 0);
   if (($941 | 0) != ($635 | 0)) {
    $966 = $941 - $635 | 0;
    HEAP32[$959 >> 2] = HEAP32[$959 >> 2] & -2;
    HEAP32[$635 + 4 >> 2] = $966 | 1;
    HEAP32[$941 >> 2] = $966;
    $971 = $966 >>> 3;
    if ($966 >>> 0 < 256) {
     $974 = 3675876 + ($971 << 1 << 2) | 0;
     $975 = HEAP32[918959] | 0;
     $976 = 1 << $971;
     if (!($975 & $976)) {
      HEAP32[918959] = $975 | $976;
      $$pre$phi$i$iZ2D = $974 + 8 | 0;
      $F$0$i$i = $974;
     } else {
      $980 = $974 + 8 | 0;
      $981 = HEAP32[$980 >> 2] | 0;
      if ($981 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $980;
       $F$0$i$i = $981;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
     HEAP32[$F$0$i$i + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $F$0$i$i;
     HEAP32[$635 + 12 >> 2] = $974;
     break;
    }
    $987 = $966 >>> 8;
    if (!$987) $I1$0$i$i = 0; else if ($966 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $992 = ($987 + 1048320 | 0) >>> 16 & 8;
     $993 = $987 << $992;
     $996 = ($993 + 520192 | 0) >>> 16 & 4;
     $998 = $993 << $996;
     $1001 = ($998 + 245760 | 0) >>> 16 & 2;
     $1006 = 14 - ($996 | $992 | $1001) + ($998 << $1001 >>> 15) | 0;
     $I1$0$i$i = $966 >>> ($1006 + 7 | 0) & 1 | $1006 << 1;
    }
    $1012 = 3676140 + ($I1$0$i$i << 2) | 0;
    HEAP32[$635 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$635 + 20 >> 2] = 0;
    HEAP32[$939 >> 2] = 0;
    $1015 = HEAP32[918960] | 0;
    $1016 = 1 << $I1$0$i$i;
    if (!($1015 & $1016)) {
     HEAP32[918960] = $1015 | $1016;
     HEAP32[$1012 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $1012;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    }
    $K2$0$i$i = $966 << (($I1$0$i$i | 0) == 31 ? 0 : 25 - ($I1$0$i$i >>> 1) | 0);
    $T$0$i$i = HEAP32[$1012 >> 2] | 0;
    while (1) {
     if ((HEAP32[$T$0$i$i + 4 >> 2] & -8 | 0) == ($966 | 0)) {
      $T$0$i$i$lcssa = $T$0$i$i;
      label = 307;
      break;
     }
     $1034 = $T$0$i$i + 16 + ($K2$0$i$i >>> 31 << 2) | 0;
     $1036 = HEAP32[$1034 >> 2] | 0;
     if (!$1036) {
      $$lcssa141 = $1034;
      $T$0$i$i$lcssa140 = $T$0$i$i;
      label = 304;
      break;
     } else {
      $K2$0$i$i = $K2$0$i$i << 1;
      $T$0$i$i = $1036;
     }
    }
    if ((label | 0) == 304) if ($$lcssa141 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
     HEAP32[$$lcssa141 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $T$0$i$i$lcssa140;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    } else if ((label | 0) == 307) {
     $1043 = $T$0$i$i$lcssa + 8 | 0;
     $1044 = HEAP32[$1043 >> 2] | 0;
     $1045 = HEAP32[918963] | 0;
     if ($1044 >>> 0 >= $1045 >>> 0 & $T$0$i$i$lcssa >>> 0 >= $1045 >>> 0) {
      HEAP32[$1044 + 12 >> 2] = $635;
      HEAP32[$1043 >> 2] = $635;
      HEAP32[$635 + 8 >> 2] = $1044;
      HEAP32[$635 + 12 >> 2] = $T$0$i$i$lcssa;
      HEAP32[$635 + 24 >> 2] = 0;
      break;
     } else _abort();
    }
   }
  } while (0);
  $1053 = HEAP32[918962] | 0;
  if ($1053 >>> 0 > $nb$0 >>> 0) {
   $1055 = $1053 - $nb$0 | 0;
   HEAP32[918962] = $1055;
   $1056 = HEAP32[918965] | 0;
   $1057 = $1056 + $nb$0 | 0;
   HEAP32[918965] = $1057;
   HEAP32[$1057 + 4 >> 2] = $1055 | 1;
   HEAP32[$1056 + 4 >> 2] = $nb$0 | 3;
   $$0 = $1056 + 8 | 0;
   return $$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $$0 = 0;
 return $$0 | 0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0, $$33$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre$phi190$iZ2D = 0, $$pre171 = 0, $$pre188$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $169 = 0, $176 = 0, $177 = 0, $188 = 0, $2 = 0, $200 = 0, $207 = 0, $209 = 0, $212 = 0, $213 = 0, $218 = 0, $22 = 0, $224 = 0, $225 = 0, $231 = 0, $24 = 0, $244 = 0, $246 = 0, $249 = 0, $25 = 0, $254 = 0, $257 = 0, $258 = 0, $267 = 0, $270 = 0, $272 = 0, $275 = 0, $277 = 0, $278 = 0, $279 = 0, $285 = 0, $287 = 0, $288 = 0, $29 = 0, $292 = 0, $3 = 0, $30 = 0, $300 = 0, $306 = 0, $318 = 0, $321 = 0, $322 = 0, $334 = 0, $336 = 0, $341 = 0, $345 = 0, $348 = 0, $35 = 0, $358 = 0.0, $365 = 0, $369 = 0, $376 = 0, $378 = 0, $380 = 0, $381 = 0, $385 = 0, $391 = 0.0, $392 = 0, $395 = 0, $397 = 0, $4 = 0, $40 = 0, $400 = 0, $402 = 0, $406 = 0.0, $41 = 0, $416 = 0, $419 = 0, $422 = 0, $431 = 0, $433 = 0, $434 = 0, $440 = 0, $45 = 0, $452 = 0, $457 = 0, $462 = 0, $466 = 0, $47 = 0, $476 = 0, $477 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $487 = 0, $489 = 0, $492 = 0, $494 = 0, $495 = 0, $496 = 0, $498 = 0, $5 = 0, $502 = 0, $504 = 0, $508 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $52 = 0, $524 = 0, $525 = 0, $526 = 0, $530 = 0, $538 = 0, $552 = 0, $553 = 0, $556 = 0, $561 = 0, $562 = 0, $564 = 0, $57 = 0, $572 = 0, $575 = 0, $578 = 0, $579 = 0, $580 = 0, $583 = 0, $587 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $602 = 0, $604 = 0, $609 = 0, $61 = 0, $610 = 0, $613 = 0, $615 = 0, $617 = 0, $619 = 0, $62 = 0, $630 = 0, $633 = 0, $638 = 0, $647 = 0, $648 = 0, $652 = 0, $655 = 0, $657 = 0, $659 = 0, $66 = 0, $663 = 0, $666 = 0, $670 = 0, $68 = 0, $680 = 0, $685 = 0, $692 = 0, $697 = 0, $7 = 0, $705 = 0, $715 = 0, $719 = 0, $727 = 0, $734 = 0, $736 = 0, $740 = 0, $742 = 0, $751 = 0, $757 = 0, $772 = 0, $774 = 0, $787 = 0, $798 = 0, $8 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0, $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0, $i$3101$i = 0, $i$389 = 0, $isdigittmp = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notrhs$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0, $s$7 = 0, $s$7$lcssa298 = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0, $t$0 = 0, $t$1 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 $big$i = sp + 24 | 0;
 $e2$i = sp + 16 | 0;
 $buf$i = sp + 588 | 0;
 $ebuf0$i = sp + 576 | 0;
 $arg = sp;
 $buf = sp + 536 | 0;
 $wc = sp + 8 | 0;
 $mb = sp + 528 | 0;
 $0 = ($f | 0) != 0;
 $1 = $buf + 40 | 0;
 $2 = $1;
 $3 = $buf + 39 | 0;
 $4 = $wc + 4 | 0;
 $5 = $buf$i;
 $6 = 0 - $5 | 0;
 $7 = $ebuf0$i + 12 | 0;
 $8 = $ebuf0$i + 11 | 0;
 $9 = $7;
 $10 = $9 - $5 | 0;
 $11 = -2 - $5 | 0;
 $12 = $9 + 2 | 0;
 $13 = $big$i + 288 | 0;
 $14 = $buf$i + 9 | 0;
 $15 = $14;
 $16 = $buf$i + 8 | 0;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 $s$0 = $fmt;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $22 = HEAP8[$s$0 >> 0] | 0;
  if (!($22 << 24 >> 24)) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;
   $s$1 = $s$0;
  }
  L9 : while (1) {
   switch ($24 << 24 >> 24) {
   case 37:
    {
     $s$292 = $s$1;
     $z$093 = $s$1;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $s$2$lcssa = $s$1;
     $z$0$lcssa = $s$1;
     break L9;
     break;
    }
   default:
    {}
   }
   $25 = $s$1 + 1 | 0;
   $24 = HEAP8[$25 >> 0] | 0;
   $s$1 = $25;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$s$292 + 1 >> 0] | 0) != 37) {
    $s$2$lcssa = $s$292;
    $z$0$lcssa = $z$093;
    break L12;
   }
   $29 = $z$093 + 1 | 0;
   $30 = $s$292 + 2 | 0;
   if ((HEAP8[$30 >> 0] | 0) == 37) {
    $s$292 = $30;
    $z$093 = $29;
    label = 9;
   } else {
    $s$2$lcssa = $30;
    $z$0$lcssa = $29;
    break;
   }
  } while (0);
  $35 = $z$0$lcssa - $s$0 | 0;
  if ($0) if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s$0, $35, $f) | 0;
  if (($z$0$lcssa | 0) != ($s$0 | 0)) {
   $cnt$0 = $cnt$1;
   $l$0 = $35;
   $s$0 = $s$2$lcssa;
   continue;
  }
  $40 = $s$2$lcssa + 1 | 0;
  $41 = HEAP8[$40 >> 0] | 0;
  $isdigittmp = ($41 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $45 = (HEAP8[$s$2$lcssa + 2 >> 0] | 0) == 36;
   $$43 = $45 ? $s$2$lcssa + 3 | 0 : $40;
   $48 = HEAP8[$$43 >> 0] | 0;
   $argpos$0 = $45 ? $isdigittmp : -1;
   $l10n$1 = $45 ? 1 : $l10n$0;
   $storemerge = $$43;
  } else {
   $48 = $41;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  L25 : do if (($47 & -32 | 0) == 32) {
   $52 = $47;
   $57 = $48;
   $fl$0100 = 0;
   $storemerge899 = $storemerge;
   while (1) {
    if (!(1 << $52 + -32 & 75913)) {
     $66 = $57;
     $fl$053 = $fl$0100;
     $storemerge851 = $storemerge899;
     break L25;
    }
    $60 = 1 << ($57 << 24 >> 24) + -32 | $fl$0100;
    $61 = $storemerge899 + 1 | 0;
    $62 = HEAP8[$61 >> 0] | 0;
    $52 = $62 << 24 >> 24;
    if (($52 & -32 | 0) != 32) {
     $66 = $62;
     $fl$053 = $60;
     $storemerge851 = $61;
     break;
    } else {
     $57 = $62;
     $fl$0100 = $60;
     $storemerge899 = $61;
    }
   }
  } else {
   $66 = $48;
   $fl$053 = 0;
   $storemerge851 = $storemerge;
  } while (0);
  do if ($66 << 24 >> 24 == 42) {
   $68 = $storemerge851 + 1 | 0;
   $isdigittmp11 = (HEAP8[$68 >> 0] | 0) + -48 | 0;
   if ($isdigittmp11 >>> 0 < 10) if ((HEAP8[$storemerge851 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge13 = $storemerge851 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$68 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 24; else label = 24;
   if ((label | 0) == 24) {
    label = 0;
    if ($l10n$1 | 0) {
     $$0 = -1;
     break L1;
    }
    if (!$0) {
     $fl$1 = $fl$053;
     $l10n$3 = 0;
     $s$4 = $68;
     $w$1 = 0;
     break;
    }
    $92 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $93 = HEAP32[$92 >> 2] | 0;
    HEAP32[$ap >> 2] = $92 + 4;
    $l10n$2 = 0;
    $storemerge13 = $68;
    $w$0 = $93;
   }
   if (($w$0 | 0) < 0) {
    $fl$1 = $fl$053 | 8192;
    $l10n$3 = $l10n$2;
    $s$4 = $storemerge13;
    $w$1 = 0 - $w$0 | 0;
   } else {
    $fl$1 = $fl$053;
    $l10n$3 = $l10n$2;
    $s$4 = $storemerge13;
    $w$1 = $w$0;
   }
  } else {
   $isdigittmp1$i = ($66 << 24 >> 24) + -48 | 0;
   if ($isdigittmp1$i >>> 0 < 10) {
    $101 = $storemerge851;
    $i$03$i = 0;
    $isdigittmp4$i = $isdigittmp1$i;
    while (1) {
     $99 = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0;
     $100 = $101 + 1 | 0;
     $isdigittmp4$i = (HEAP8[$100 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i >>> 0 >= 10) {
      $$lcssa = $99;
      $$lcssa295 = $100;
      break;
     } else {
      $101 = $100;
      $i$03$i = $99;
     }
    }
    if (($$lcssa | 0) < 0) {
     $$0 = -1;
     break L1;
    } else {
     $fl$1 = $fl$053;
     $l10n$3 = $l10n$1;
     $s$4 = $$lcssa295;
     $w$1 = $$lcssa;
    }
   } else {
    $fl$1 = $fl$053;
    $l10n$3 = $l10n$1;
    $s$4 = $storemerge851;
    $w$1 = 0;
   }
  } while (0);
  L46 : do if ((HEAP8[$s$4 >> 0] | 0) == 46) {
   $107 = $s$4 + 1 | 0;
   $108 = HEAP8[$107 >> 0] | 0;
   if ($108 << 24 >> 24 != 42) {
    $isdigittmp1$i22 = ($108 << 24 >> 24) + -48 | 0;
    if ($isdigittmp1$i22 >>> 0 < 10) {
     $140 = $107;
     $i$03$i25 = 0;
     $isdigittmp4$i24 = $isdigittmp1$i22;
    } else {
     $p$0 = 0;
     $s$6 = $107;
     break;
    }
    while (1) {
     $138 = ($i$03$i25 * 10 | 0) + $isdigittmp4$i24 | 0;
     $139 = $140 + 1 | 0;
     $isdigittmp4$i24 = (HEAP8[$139 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i24 >>> 0 >= 10) {
      $p$0 = $138;
      $s$6 = $139;
      break L46;
     } else {
      $140 = $139;
      $i$03$i25 = $138;
     }
    }
   }
   $110 = $s$4 + 2 | 0;
   $isdigittmp9 = (HEAP8[$110 >> 0] | 0) + -48 | 0;
   if ($isdigittmp9 >>> 0 < 10) if ((HEAP8[$s$4 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10;
    $p$0 = HEAP32[$nl_arg + ((HEAP8[$110 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $s$6 = $s$4 + 4 | 0;
    break;
   }
   if ($l10n$3 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($0) {
    $134 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $135 = HEAP32[$134 >> 2] | 0;
    HEAP32[$ap >> 2] = $134 + 4;
    $p$0 = $135;
    $s$6 = $110;
   } else {
    $p$0 = 0;
    $s$6 = $110;
   }
  } else {
   $p$0 = -1;
   $s$6 = $s$4;
  } while (0);
  $s$7 = $s$6;
  $st$0 = 0;
  while (1) {
   $145 = (HEAP8[$s$7 >> 0] | 0) + -65 | 0;
   if ($145 >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $147 = $s$7 + 1 | 0;
   $149 = HEAP8[3667670 + ($st$0 * 58 | 0) + $145 >> 0] | 0;
   $150 = $149 & 255;
   if (($150 + -1 | 0) >>> 0 < 8) {
    $s$7 = $147;
    $st$0 = $150;
   } else {
    $$lcssa300 = $147;
    $$lcssa301 = $149;
    $$lcssa302 = $150;
    $s$7$lcssa298 = $s$7;
    $st$0$lcssa299 = $st$0;
    break;
   }
  }
  if (!($$lcssa301 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $155 = ($argpos$0 | 0) > -1;
  do if ($$lcssa301 << 24 >> 24 == 19) if ($155) {
   $$0 = -1;
   break L1;
  } else label = 52; else {
   if ($155) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $$lcssa302;
    $158 = $nl_arg + ($argpos$0 << 3) | 0;
    $163 = HEAP32[$158 + 4 >> 2] | 0;
    $164 = $arg;
    HEAP32[$164 >> 2] = HEAP32[$158 >> 2];
    HEAP32[$164 + 4 >> 2] = $163;
    label = 52;
    break;
   }
   if (!$0) {
    $$0 = 0;
    break L1;
   }
   _pop_arg_257($arg, $$lcssa302, $ap);
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if (!$0) {
    $cnt$0 = $cnt$1;
    $l$0 = $35;
    $l10n$0 = $l10n$3;
    $s$0 = $$lcssa300;
    continue;
   }
  }
  $169 = HEAP8[$s$7$lcssa298 >> 0] | 0;
  $t$0 = ($st$0$lcssa299 | 0) != 0 & ($169 & 15 | 0) == 3 ? $169 & -33 : $169;
  $176 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $176;
  L75 : do switch ($t$0 | 0) {
  case 110:
   {
    switch ($st$0$lcssa299 | 0) {
    case 0:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 2:
     {
      $188 = HEAP32[$arg >> 2] | 0;
      HEAP32[$188 >> 2] = $cnt$1;
      HEAP32[$188 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    case 7:
     {
      $200 = HEAP32[$arg >> 2] | 0;
      HEAP32[$200 >> 2] = $cnt$1;
      HEAP32[$200 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
      break;
     }
    default:
     {
      $cnt$0 = $cnt$1;
      $l$0 = $35;
      $l10n$0 = $l10n$3;
      $s$0 = $$lcssa300;
      continue L1;
     }
    }
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$ | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 64;
    break;
   }
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 64;
    break;
   }
  case 111:
   {
    $244 = $arg;
    $246 = HEAP32[$244 >> 2] | 0;
    $249 = HEAP32[$244 + 4 >> 2] | 0;
    if (($246 | 0) == 0 & ($249 | 0) == 0) $$0$lcssa$i = $1; else {
     $$03$i33 = $1;
     $254 = $246;
     $258 = $249;
     while (1) {
      $257 = $$03$i33 + -1 | 0;
      HEAP8[$257 >> 0] = $254 & 7 | 48;
      $254 = _bitshift64Lshr($254 | 0, $258 | 0, 3) | 0;
      $258 = tempRet0;
      if (($254 | 0) == 0 & ($258 | 0) == 0) {
       $$0$lcssa$i = $257;
       break;
      } else $$03$i33 = $257;
     }
    }
    if (!($fl$1$ & 8)) {
     $a$0 = $$0$lcssa$i;
     $fl$4 = $fl$1$;
     $p$2 = $p$0;
     $pl$1 = 0;
     $prefix$1 = 3668150;
     label = 77;
    } else {
     $267 = $2 - $$0$lcssa$i | 0;
     $a$0 = $$0$lcssa$i;
     $fl$4 = $fl$1$;
     $p$2 = ($p$0 | 0) > ($267 | 0) ? $p$0 : $267 + 1 | 0;
     $pl$1 = 0;
     $prefix$1 = 3668150;
     label = 77;
    }
    break;
   }
  case 105:
  case 100:
   {
    $270 = $arg;
    $272 = HEAP32[$270 >> 2] | 0;
    $275 = HEAP32[$270 + 4 >> 2] | 0;
    if (($275 | 0) < 0) {
     $277 = _i64Subtract(0, 0, $272 | 0, $275 | 0) | 0;
     $278 = tempRet0;
     $279 = $arg;
     HEAP32[$279 >> 2] = $277;
     HEAP32[$279 + 4 >> 2] = $278;
     $287 = $277;
     $288 = $278;
     $pl$0 = 1;
     $prefix$0 = 3668150;
     label = 76;
     break L75;
    }
    if (!($fl$1$ & 2048)) {
     $285 = $fl$1$ & 1;
     $287 = $272;
     $288 = $275;
     $pl$0 = $285;
     $prefix$0 = ($285 | 0) == 0 ? 3668150 : 3668152;
     label = 76;
    } else {
     $287 = $272;
     $288 = $275;
     $pl$0 = 1;
     $prefix$0 = 3668151;
     label = 76;
    }
    break;
   }
  case 117:
   {
    $177 = $arg;
    $287 = HEAP32[$177 >> 2] | 0;
    $288 = HEAP32[$177 + 4 >> 2] | 0;
    $pl$0 = 0;
    $prefix$0 = 3668150;
    label = 76;
    break;
   }
  case 99:
   {
    HEAP8[$3 >> 0] = HEAP32[$arg >> 2];
    $a$2 = $3;
    $fl$6 = $176;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = 3668150;
    $z$2 = $1;
    break;
   }
  case 109:
   {
    $a$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    label = 82;
    break;
   }
  case 115:
   {
    $318 = HEAP32[$arg >> 2] | 0;
    $a$1 = $318 | 0 ? $318 : 3670052;
    label = 82;
    break;
   }
  case 67:
   {
    HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
    HEAP32[$4 >> 2] = 0;
    HEAP32[$arg >> 2] = $wc;
    $798 = $wc;
    $p$4176 = -1;
    label = 86;
    break;
   }
  case 83:
   {
    $$pre171 = HEAP32[$arg >> 2] | 0;
    if (!$p$0) {
     _pad($f, 32, $w$1, 0, $fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;
     $p$4176 = $p$0;
     label = 86;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    $358 = +HEAPF64[$arg >> 3];
    HEAP32[$e2$i >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = $358;
    if ((HEAP32[tempDoublePtr + 4 >> 2] | 0) < 0) {
     $$07$i = -$358;
     $pl$0$i = 1;
     $prefix$0$i = 3670059;
    } else if (!($fl$1$ & 2048)) {
     $365 = $fl$1$ & 1;
     $$07$i = $358;
     $pl$0$i = $365;
     $prefix$0$i = ($365 | 0) == 0 ? 3670060 : 3670065;
    } else {
     $$07$i = $358;
     $pl$0$i = 1;
     $prefix$0$i = 3670062;
    }
    HEAPF64[tempDoublePtr >> 3] = $$07$i;
    $369 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if ($369 >>> 0 < 2146435072 | ($369 | 0) == 2146435072 & 0 < 0) {
     $391 = +_frexpl($$07$i, $e2$i) * 2.0;
     $392 = $391 != 0.0;
     if ($392) HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
     $395 = $t$0 | 32;
     if (($395 | 0) == 97) {
      $397 = $t$0 & 32;
      $prefix$0$$i = ($397 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
      $400 = $pl$0$i | 2;
      $402 = 12 - $p$0 | 0;
      do if ($p$0 >>> 0 > 11 | ($402 | 0) == 0) $$1$i = $391; else {
       $re$171$i = $402;
       $round$070$i = 8.0;
       while (1) {
        $re$171$i = $re$171$i + -1 | 0;
        $406 = $round$070$i * 16.0;
        if (!$re$171$i) {
         $$lcssa319 = $406;
         break;
        } else $round$070$i = $406;
       }
       if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
        $$1$i = -($$lcssa319 + (-$391 - $$lcssa319));
        break;
       } else {
        $$1$i = $391 + $$lcssa319 - $$lcssa319;
        break;
       }
      } while (0);
      $416 = HEAP32[$e2$i >> 2] | 0;
      $419 = ($416 | 0) < 0 ? 0 - $416 | 0 : $416;
      $422 = _fmt_u($419, (($419 | 0) < 0) << 31 >> 31, $7) | 0;
      if (($422 | 0) == ($7 | 0)) {
       HEAP8[$8 >> 0] = 48;
       $estr$0$i = $8;
      } else $estr$0$i = $422;
      HEAP8[$estr$0$i + -1 >> 0] = ($416 >> 31 & 2) + 43;
      $431 = $estr$0$i + -2 | 0;
      HEAP8[$431 >> 0] = $t$0 + 15;
      $notrhs$i = ($p$0 | 0) < 1;
      $433 = ($fl$1$ & 8 | 0) == 0;
      $$2$i = $$1$i;
      $s$0$i = $buf$i;
      while (1) {
       $434 = ~~$$2$i;
       $440 = $s$0$i + 1 | 0;
       HEAP8[$s$0$i >> 0] = HEAPU8[3668134 + $434 >> 0] | $397;
       $$2$i = ($$2$i - +($434 | 0)) * 16.0;
       do if (($440 - $5 | 0) == 1) {
        if ($433 & ($notrhs$i & $$2$i == 0.0)) {
         $s$1$i = $440;
         break;
        }
        HEAP8[$440 >> 0] = 46;
        $s$1$i = $s$0$i + 2 | 0;
       } else $s$1$i = $440; while (0);
       if (!($$2$i != 0.0)) {
        $s$1$i$lcssa = $s$1$i;
        break;
       } else $s$0$i = $s$1$i;
      }
      $$pre188$i = $s$1$i$lcssa;
      $452 = $431;
      $l$0$i = ($p$0 | 0) != 0 & ($11 + $$pre188$i | 0) < ($p$0 | 0) ? $12 + $p$0 - $452 | 0 : $10 - $452 + $$pre188$i | 0;
      $457 = $l$0$i + $400 | 0;
      _pad($f, 32, $w$1, $457, $fl$1$);
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$0$$i, $400, $f) | 0;
      _pad($f, 48, $w$1, $457, $fl$1$ ^ 65536);
      $462 = $$pre188$i - $5 | 0;
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($buf$i, $462, $f) | 0;
      $466 = $9 - $452 | 0;
      _pad($f, 48, $l$0$i - ($462 + $466) | 0, 0, 0);
      if (!(HEAP32[$f >> 2] & 32)) ___fwritex($431, $466, $f) | 0;
      _pad($f, 32, $w$1, $457, $fl$1$ ^ 8192);
      $$0$i = ($457 | 0) < ($w$1 | 0) ? $w$1 : $457;
      break;
     }
     $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
     if ($392) {
      $476 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
      HEAP32[$e2$i >> 2] = $476;
      $$3$i = $391 * 268435456.0;
      $477 = $476;
     } else {
      $$3$i = $391;
      $477 = HEAP32[$e2$i >> 2] | 0;
     }
     $$33$i = ($477 | 0) < 0 ? $big$i : $13;
     $479 = $$33$i;
     $$4$i = $$3$i;
     $z$0$i = $$33$i;
     while (1) {
      $480 = ~~$$4$i >>> 0;
      HEAP32[$z$0$i >> 2] = $480;
      $481 = $z$0$i + 4 | 0;
      $$4$i = ($$4$i - +($480 >>> 0)) * 1.0e9;
      if (!($$4$i != 0.0)) {
       $$lcssa303 = $481;
       break;
      } else $z$0$i = $481;
     }
     $$pr$i = HEAP32[$e2$i >> 2] | 0;
     if (($$pr$i | 0) > 0) {
      $487 = $$pr$i;
      $a$1149$i = $$33$i;
      $z$1148$i = $$lcssa303;
      while (1) {
       $489 = ($487 | 0) > 29 ? 29 : $487;
       $d$0141$i = $z$1148$i + -4 | 0;
       do if ($d$0141$i >>> 0 < $a$1149$i >>> 0) $a$2$ph$i = $a$1149$i; else {
        $carry$0142$i = 0;
        $d$0143$i = $d$0141$i;
        while (1) {
         $492 = _bitshift64Shl(HEAP32[$d$0143$i >> 2] | 0, 0, $489 | 0) | 0;
         $494 = _i64Add($492 | 0, tempRet0 | 0, $carry$0142$i | 0, 0) | 0;
         $495 = tempRet0;
         $496 = ___uremdi3($494 | 0, $495 | 0, 1e9, 0) | 0;
         HEAP32[$d$0143$i >> 2] = $496;
         $498 = ___udivdi3($494 | 0, $495 | 0, 1e9, 0) | 0;
         $d$0143$i = $d$0143$i + -4 | 0;
         if ($d$0143$i >>> 0 < $a$1149$i >>> 0) {
          $$lcssa304 = $498;
          break;
         } else $carry$0142$i = $498;
        }
        if (!$$lcssa304) {
         $a$2$ph$i = $a$1149$i;
         break;
        }
        $502 = $a$1149$i + -4 | 0;
        HEAP32[$502 >> 2] = $$lcssa304;
        $a$2$ph$i = $502;
       } while (0);
       $z$2$i = $z$1148$i;
       while (1) {
        if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
        $504 = $z$2$i + -4 | 0;
        if (!(HEAP32[$504 >> 2] | 0)) $z$2$i = $504; else {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
       }
       $508 = (HEAP32[$e2$i >> 2] | 0) - $489 | 0;
       HEAP32[$e2$i >> 2] = $508;
       if (($508 | 0) > 0) {
        $487 = $508;
        $a$1149$i = $a$2$ph$i;
        $z$1148$i = $z$2$i$lcssa;
       } else {
        $$pr50$i = $508;
        $a$1$lcssa$i = $a$2$ph$i;
        $z$1$lcssa$i = $z$2$i$lcssa;
        break;
       }
      }
     } else {
      $$pr50$i = $$pr$i;
      $a$1$lcssa$i = $$33$i;
      $z$1$lcssa$i = $$lcssa303;
     }
     if (($$pr50$i | 0) < 0) {
      $513 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
      $514 = ($395 | 0) == 102;
      $516 = $$pr50$i;
      $a$3136$i = $a$1$lcssa$i;
      $z$3135$i = $z$1$lcssa$i;
      while (1) {
       $515 = 0 - $516 | 0;
       $518 = ($515 | 0) > 9 ? 9 : $515;
       do if ($a$3136$i >>> 0 < $z$3135$i >>> 0) {
        $524 = (1 << $518) + -1 | 0;
        $525 = 1e9 >>> $518;
        $carry3$0130$i = 0;
        $d$1129$i = $a$3136$i;
        while (1) {
         $526 = HEAP32[$d$1129$i >> 2] | 0;
         HEAP32[$d$1129$i >> 2] = ($526 >>> $518) + $carry3$0130$i;
         $530 = Math_imul($526 & $524, $525) | 0;
         $d$1129$i = $d$1129$i + 4 | 0;
         if ($d$1129$i >>> 0 >= $z$3135$i >>> 0) {
          $$lcssa306 = $530;
          break;
         } else $carry3$0130$i = $530;
        }
        $$a$3$i = (HEAP32[$a$3136$i >> 2] | 0) == 0 ? $a$3136$i + 4 | 0 : $a$3136$i;
        if (!$$lcssa306) {
         $$a$3192$i = $$a$3$i;
         $z$4$i = $z$3135$i;
         break;
        }
        HEAP32[$z$3135$i >> 2] = $$lcssa306;
        $$a$3192$i = $$a$3$i;
        $z$4$i = $z$3135$i + 4 | 0;
       } else {
        $$a$3192$i = (HEAP32[$a$3136$i >> 2] | 0) == 0 ? $a$3136$i + 4 | 0 : $a$3136$i;
        $z$4$i = $z$3135$i;
       } while (0);
       $538 = $514 ? $$33$i : $$a$3192$i;
       $$z$4$i = ($z$4$i - $538 >> 2 | 0) > ($513 | 0) ? $538 + ($513 << 2) | 0 : $z$4$i;
       $516 = (HEAP32[$e2$i >> 2] | 0) + $518 | 0;
       HEAP32[$e2$i >> 2] = $516;
       if (($516 | 0) >= 0) {
        $a$3$lcssa$i = $$a$3192$i;
        $z$3$lcssa$i = $$z$4$i;
        break;
       } else {
        $a$3136$i = $$a$3192$i;
        $z$3135$i = $$z$4$i;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;
      $z$3$lcssa$i = $z$1$lcssa$i;
     }
     do if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
      $552 = ($479 - $a$3$lcssa$i >> 2) * 9 | 0;
      $553 = HEAP32[$a$3$lcssa$i >> 2] | 0;
      if ($553 >>> 0 < 10) {
       $e$1$i = $552;
       break;
      } else {
       $e$0125$i = $552;
       $i$0124$i = 10;
      }
      while (1) {
       $i$0124$i = $i$0124$i * 10 | 0;
       $556 = $e$0125$i + 1 | 0;
       if ($553 >>> 0 < $i$0124$i >>> 0) {
        $e$1$i = $556;
        break;
       } else $e$0125$i = $556;
      }
     } else $e$1$i = 0; while (0);
     $561 = ($395 | 0) == 103;
     $562 = ($$p$i | 0) != 0;
     $564 = $$p$i - (($395 | 0) != 102 ? $e$1$i : 0) + (($562 & $561) << 31 >> 31) | 0;
     if (($564 | 0) < ((($z$3$lcssa$i - $479 >> 2) * 9 | 0) + -9 | 0)) {
      $572 = $564 + 9216 | 0;
      $575 = $$33$i + 4 + ((($572 | 0) / 9 | 0) + -1024 << 2) | 0;
      $j$0117$i = (($572 | 0) % 9 | 0) + 1 | 0;
      if (($j$0117$i | 0) < 9) {
       $i$1118$i = 10;
       $j$0119$i = $j$0117$i;
       while (1) {
        $578 = $i$1118$i * 10 | 0;
        $j$0119$i = $j$0119$i + 1 | 0;
        if (($j$0119$i | 0) == 9) {
         $i$1$lcssa$i = $578;
         break;
        } else $i$1118$i = $578;
       }
      } else $i$1$lcssa$i = 10;
      $579 = HEAP32[$575 >> 2] | 0;
      $580 = ($579 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
      $583 = ($575 + 4 | 0) == ($z$3$lcssa$i | 0);
      do if ($583 & ($580 | 0) == 0) {
       $a$8$i = $a$3$lcssa$i;
       $d$4$i = $575;
       $e$4$i = $e$1$i;
      } else {
       $$20$i = ((($579 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       $587 = ($i$1$lcssa$i | 0) / 2 | 0;
       if ($580 >>> 0 < $587 >>> 0) $small$0$i = .5; else $small$0$i = $583 & ($580 | 0) == ($587 | 0) ? 1.0 : 1.5;
       do if (!$pl$0$i) {
        $round6$1$i = $$20$i;
        $small$1$i = $small$0$i;
       } else {
        if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
         $round6$1$i = $$20$i;
         $small$1$i = $small$0$i;
         break;
        }
        $round6$1$i = -$$20$i;
        $small$1$i = -$small$0$i;
       } while (0);
       $595 = $579 - $580 | 0;
       HEAP32[$575 >> 2] = $595;
       if (!($round6$1$i + $small$1$i != $round6$1$i)) {
        $a$8$i = $a$3$lcssa$i;
        $d$4$i = $575;
        $e$4$i = $e$1$i;
        break;
       }
       $598 = $595 + $i$1$lcssa$i | 0;
       HEAP32[$575 >> 2] = $598;
       if ($598 >>> 0 > 999999999) {
        $a$5111$i = $a$3$lcssa$i;
        $d$2110$i = $575;
        while (1) {
         $600 = $d$2110$i + -4 | 0;
         HEAP32[$d$2110$i >> 2] = 0;
         if ($600 >>> 0 < $a$5111$i >>> 0) {
          $602 = $a$5111$i + -4 | 0;
          HEAP32[$602 >> 2] = 0;
          $a$6$i = $602;
         } else $a$6$i = $a$5111$i;
         $604 = (HEAP32[$600 >> 2] | 0) + 1 | 0;
         HEAP32[$600 >> 2] = $604;
         if ($604 >>> 0 > 999999999) {
          $a$5111$i = $a$6$i;
          $d$2110$i = $600;
         } else {
          $a$5$lcssa$i = $a$6$i;
          $d$2$lcssa$i = $600;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;
        $d$2$lcssa$i = $575;
       }
       $609 = ($479 - $a$5$lcssa$i >> 2) * 9 | 0;
       $610 = HEAP32[$a$5$lcssa$i >> 2] | 0;
       if ($610 >>> 0 < 10) {
        $a$8$i = $a$5$lcssa$i;
        $d$4$i = $d$2$lcssa$i;
        $e$4$i = $609;
        break;
       } else {
        $e$2106$i = $609;
        $i$2105$i = 10;
       }
       while (1) {
        $i$2105$i = $i$2105$i * 10 | 0;
        $613 = $e$2106$i + 1 | 0;
        if ($610 >>> 0 < $i$2105$i >>> 0) {
         $a$8$i = $a$5$lcssa$i;
         $d$4$i = $d$2$lcssa$i;
         $e$4$i = $613;
         break;
        } else $e$2106$i = $613;
       }
      } while (0);
      $615 = $d$4$i + 4 | 0;
      $a$9$ph$i = $a$8$i;
      $e$5$ph$i = $e$4$i;
      $z$7$ph$i = $z$3$lcssa$i >>> 0 > $615 >>> 0 ? $615 : $z$3$lcssa$i;
     } else {
      $a$9$ph$i = $a$3$lcssa$i;
      $e$5$ph$i = $e$1$i;
      $z$7$ph$i = $z$3$lcssa$i;
     }
     $617 = 0 - $e$5$ph$i | 0;
     $z$7$i = $z$7$ph$i;
     while (1) {
      if ($z$7$i >>> 0 <= $a$9$ph$i >>> 0) {
       $$lcssa162$i = 0;
       $z$7$i$lcssa = $z$7$i;
       break;
      }
      $619 = $z$7$i + -4 | 0;
      if (!(HEAP32[$619 >> 2] | 0)) $z$7$i = $619; else {
       $$lcssa162$i = 1;
       $z$7$i$lcssa = $z$7$i;
       break;
      }
     }
     do if ($561) {
      $$p$$i = ($562 & 1 ^ 1) + $$p$i | 0;
      if (($$p$$i | 0) > ($e$5$ph$i | 0) & ($e$5$ph$i | 0) > -5) {
       $$013$i = $t$0 + -1 | 0;
       $$210$i = $$p$$i + -1 - $e$5$ph$i | 0;
      } else {
       $$013$i = $t$0 + -2 | 0;
       $$210$i = $$p$$i + -1 | 0;
      }
      $630 = $fl$1$ & 8;
      if ($630 | 0) {
       $$114$i = $$013$i;
       $$311$i = $$210$i;
       $$pre$phi190$iZ2D = $630;
       break;
      }
      do if ($$lcssa162$i) {
       $633 = HEAP32[$z$7$i$lcssa + -4 >> 2] | 0;
       if (!$633) {
        $j$2$i = 9;
        break;
       }
       if (!(($633 >>> 0) % 10 | 0)) {
        $i$3101$i = 10;
        $j$1102$i = 0;
       } else {
        $j$2$i = 0;
        break;
       }
       while (1) {
        $i$3101$i = $i$3101$i * 10 | 0;
        $638 = $j$1102$i + 1 | 0;
        if (($633 >>> 0) % ($i$3101$i >>> 0) | 0 | 0) {
         $j$2$i = $638;
         break;
        } else $j$1102$i = $638;
       }
      } else $j$2$i = 9; while (0);
      $647 = (($z$7$i$lcssa - $479 >> 2) * 9 | 0) + -9 | 0;
      if (($$013$i | 32 | 0) == 102) {
       $648 = $647 - $j$2$i | 0;
       $$23$i = ($648 | 0) < 0 ? 0 : $648;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$23$i | 0) ? $$210$i : $$23$i;
       $$pre$phi190$iZ2D = 0;
       break;
      } else {
       $652 = $647 + $e$5$ph$i - $j$2$i | 0;
       $$25$i = ($652 | 0) < 0 ? 0 : $652;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$25$i | 0) ? $$210$i : $$25$i;
       $$pre$phi190$iZ2D = 0;
       break;
      }
     } else {
      $$114$i = $t$0;
      $$311$i = $$p$i;
      $$pre$phi190$iZ2D = $fl$1$ & 8;
     } while (0);
     $655 = $$311$i | $$pre$phi190$iZ2D;
     $657 = ($655 | 0) != 0 & 1;
     $659 = ($$114$i | 32 | 0) == 102;
     if ($659) {
      $$pn$i = ($e$5$ph$i | 0) > 0 ? $e$5$ph$i : 0;
      $estr$2$i = 0;
     } else {
      $663 = ($e$5$ph$i | 0) < 0 ? $617 : $e$5$ph$i;
      $666 = _fmt_u($663, (($663 | 0) < 0) << 31 >> 31, $7) | 0;
      if (($9 - $666 | 0) < 2) {
       $estr$195$i = $666;
       while (1) {
        $670 = $estr$195$i + -1 | 0;
        HEAP8[$670 >> 0] = 48;
        if (($9 - $670 | 0) < 2) $estr$195$i = $670; else {
         $estr$1$lcssa$i = $670;
         break;
        }
       }
      } else $estr$1$lcssa$i = $666;
      HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$5$ph$i >> 31 & 2) + 43;
      $680 = $estr$1$lcssa$i + -2 | 0;
      HEAP8[$680 >> 0] = $$114$i;
      $$pn$i = $9 - $680 | 0;
      $estr$2$i = $680;
     }
     $685 = $pl$0$i + 1 + $$311$i + $657 + $$pn$i | 0;
     _pad($f, 32, $w$1, $685, $fl$1$);
     if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
     _pad($f, 48, $w$1, $685, $fl$1$ ^ 65536);
     do if ($659) {
      $r$0$a$9$i = $a$9$ph$i >>> 0 > $$33$i >>> 0 ? $$33$i : $a$9$ph$i;
      $d$584$i = $r$0$a$9$i;
      while (1) {
       $692 = _fmt_u(HEAP32[$d$584$i >> 2] | 0, 0, $14) | 0;
       do if (($d$584$i | 0) == ($r$0$a$9$i | 0)) {
        if (($692 | 0) != ($14 | 0)) {
         $s7$1$i = $692;
         break;
        }
        HEAP8[$16 >> 0] = 48;
        $s7$1$i = $16;
       } else {
        if ($692 >>> 0 <= $buf$i >>> 0) {
         $s7$1$i = $692;
         break;
        }
        _memset($buf$i | 0, 48, $692 - $5 | 0) | 0;
        $s7$081$i = $692;
        while (1) {
         $697 = $s7$081$i + -1 | 0;
         if ($697 >>> 0 > $buf$i >>> 0) $s7$081$i = $697; else {
          $s7$1$i = $697;
          break;
         }
        }
       } while (0);
       if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s7$1$i, $15 - $s7$1$i | 0, $f) | 0;
       $705 = $d$584$i + 4 | 0;
       if ($705 >>> 0 > $$33$i >>> 0) {
        $$lcssa316 = $705;
        break;
       } else $d$584$i = $705;
      }
      do if ($655 | 0) {
       if (HEAP32[$f >> 2] & 32 | 0) break;
       ___fwritex(3670090, 1, $f) | 0;
      } while (0);
      if (($$311$i | 0) > 0 & $$lcssa316 >>> 0 < $z$7$i$lcssa >>> 0) {
       $$41278$i = $$311$i;
       $d$677$i = $$lcssa316;
       while (1) {
        $715 = _fmt_u(HEAP32[$d$677$i >> 2] | 0, 0, $14) | 0;
        if ($715 >>> 0 > $buf$i >>> 0) {
         _memset($buf$i | 0, 48, $715 - $5 | 0) | 0;
         $s8$072$i = $715;
         while (1) {
          $719 = $s8$072$i + -1 | 0;
          if ($719 >>> 0 > $buf$i >>> 0) $s8$072$i = $719; else {
           $s8$0$lcssa$i = $719;
           break;
          }
         }
        } else $s8$0$lcssa$i = $715;
        if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s8$0$lcssa$i, ($$41278$i | 0) > 9 ? 9 : $$41278$i, $f) | 0;
        $d$677$i = $d$677$i + 4 | 0;
        $727 = $$41278$i + -9 | 0;
        if (!(($$41278$i | 0) > 9 & $d$677$i >>> 0 < $z$7$i$lcssa >>> 0)) {
         $$412$lcssa$i = $727;
         break;
        } else $$41278$i = $727;
       }
      } else $$412$lcssa$i = $$311$i;
      _pad($f, 48, $$412$lcssa$i + 9 | 0, 9, 0);
     } else {
      $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $a$9$ph$i + 4 | 0;
      if (($$311$i | 0) > -1) {
       $734 = ($$pre$phi190$iZ2D | 0) == 0;
       $$589$i = $$311$i;
       $d$788$i = $a$9$ph$i;
       while (1) {
        $736 = _fmt_u(HEAP32[$d$788$i >> 2] | 0, 0, $14) | 0;
        if (($736 | 0) == ($14 | 0)) {
         HEAP8[$16 >> 0] = 48;
         $s9$0$i = $16;
        } else $s9$0$i = $736;
        do if (($d$788$i | 0) == ($a$9$ph$i | 0)) {
         $742 = $s9$0$i + 1 | 0;
         if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s9$0$i, 1, $f) | 0;
         if ($734 & ($$589$i | 0) < 1) {
          $s9$2$i = $742;
          break;
         }
         if (HEAP32[$f >> 2] & 32 | 0) {
          $s9$2$i = $742;
          break;
         }
         ___fwritex(3670090, 1, $f) | 0;
         $s9$2$i = $742;
        } else {
         if ($s9$0$i >>> 0 <= $buf$i >>> 0) {
          $s9$2$i = $s9$0$i;
          break;
         }
         _memset($buf$i | 0, 48, $s9$0$i + $6 | 0) | 0;
         $s9$185$i = $s9$0$i;
         while (1) {
          $740 = $s9$185$i + -1 | 0;
          if ($740 >>> 0 > $buf$i >>> 0) $s9$185$i = $740; else {
           $s9$2$i = $740;
           break;
          }
         }
        } while (0);
        $751 = $15 - $s9$2$i | 0;
        if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s9$2$i, ($$589$i | 0) > ($751 | 0) ? $751 : $$589$i, $f) | 0;
        $757 = $$589$i - $751 | 0;
        $d$788$i = $d$788$i + 4 | 0;
        if (!($d$788$i >>> 0 < $z$7$$i >>> 0 & ($757 | 0) > -1)) {
         $$5$lcssa$i = $757;
         break;
        } else $$589$i = $757;
       }
      } else $$5$lcssa$i = $$311$i;
      _pad($f, 48, $$5$lcssa$i + 18 | 0, 18, 0);
      if (HEAP32[$f >> 2] & 32 | 0) break;
      ___fwritex($estr$2$i, $9 - $estr$2$i | 0, $f) | 0;
     } while (0);
     _pad($f, 32, $w$1, $685, $fl$1$ ^ 8192);
     $$0$i = ($685 | 0) < ($w$1 | 0) ? $w$1 : $685;
    } else {
     $376 = ($t$0 & 32 | 0) != 0;
     $378 = $$07$i != $$07$i | 0.0 != 0.0;
     $pl$1$i = $378 ? 0 : $pl$0$i;
     $380 = $pl$1$i + 3 | 0;
     _pad($f, 32, $w$1, $380, $176);
     $381 = HEAP32[$f >> 2] | 0;
     if (!($381 & 32)) {
      ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
      $385 = HEAP32[$f >> 2] | 0;
     } else $385 = $381;
     if (!($385 & 32)) ___fwritex($378 ? ($376 ? 3670373 : 3670086) : $376 ? 3670078 : 3670082, 3, $f) | 0;
     _pad($f, 32, $w$1, $380, $fl$1$ ^ 8192);
     $$0$i = ($380 | 0) < ($w$1 | 0) ? $w$1 : $380;
    } while (0);
    $cnt$0 = $cnt$1;
    $l$0 = $$0$i;
    $l10n$0 = $l10n$3;
    $s$0 = $$lcssa300;
    continue L1;
    break;
   }
  default:
   {
    $a$2 = $s$0;
    $fl$6 = $fl$1$;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 3668150;
    $z$2 = $1;
   }
  } while (0);
  L311 : do if ((label | 0) == 64) {
   label = 0;
   $207 = $arg;
   $209 = HEAP32[$207 >> 2] | 0;
   $212 = HEAP32[$207 + 4 >> 2] | 0;
   $213 = $t$1 & 32;
   if (($209 | 0) == 0 & ($212 | 0) == 0) {
    $a$0 = $1;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = 0;
    $prefix$1 = 3668150;
    label = 77;
   } else {
    $$012$i = $1;
    $218 = $209;
    $225 = $212;
    while (1) {
     $224 = $$012$i + -1 | 0;
     HEAP8[$224 >> 0] = HEAPU8[3668134 + ($218 & 15) >> 0] | $213;
     $218 = _bitshift64Lshr($218 | 0, $225 | 0, 4) | 0;
     $225 = tempRet0;
     if (($218 | 0) == 0 & ($225 | 0) == 0) {
      $$lcssa321 = $224;
      break;
     } else $$012$i = $224;
    }
    $231 = $arg;
    if (($fl$3 & 8 | 0) == 0 | (HEAP32[$231 >> 2] | 0) == 0 & (HEAP32[$231 + 4 >> 2] | 0) == 0) {
     $a$0 = $$lcssa321;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 3668150;
     label = 77;
    } else {
     $a$0 = $$lcssa321;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 2;
     $prefix$1 = 3668150 + ($t$1 >> 4) | 0;
     label = 77;
    }
   }
  } else if ((label | 0) == 76) {
   label = 0;
   $a$0 = _fmt_u($287, $288, $1) | 0;
   $fl$4 = $fl$1$;
   $p$2 = $p$0;
   $pl$1 = $pl$0;
   $prefix$1 = $prefix$0;
   label = 77;
  } else if ((label | 0) == 82) {
   label = 0;
   $321 = _memchr($a$1, 0, $p$0) | 0;
   $322 = ($321 | 0) == 0;
   $a$2 = $a$1;
   $fl$6 = $176;
   $p$5 = $322 ? $p$0 : $321 - $a$1 | 0;
   $pl$2 = 0;
   $prefix$2 = 3668150;
   $z$2 = $322 ? $a$1 + $p$0 | 0 : $321;
  } else if ((label | 0) == 86) {
   label = 0;
   $i$0105 = 0;
   $l$1104 = 0;
   $ws$0106 = $798;
   while (1) {
    $334 = HEAP32[$ws$0106 >> 2] | 0;
    if (!$334) {
     $i$0$lcssa = $i$0105;
     $l$2 = $l$1104;
     break;
    }
    $336 = _wctomb($mb, $334) | 0;
    if (($336 | 0) < 0 | $336 >>> 0 > ($p$4176 - $i$0105 | 0) >>> 0) {
     $i$0$lcssa = $i$0105;
     $l$2 = $336;
     break;
    }
    $341 = $336 + $i$0105 | 0;
    if ($p$4176 >>> 0 > $341 >>> 0) {
     $i$0105 = $341;
     $l$1104 = $336;
     $ws$0106 = $ws$0106 + 4 | 0;
    } else {
     $i$0$lcssa = $341;
     $l$2 = $336;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $$0 = -1;
    break L1;
   }
   _pad($f, 32, $w$1, $i$0$lcssa, $fl$1$);
   if (!$i$0$lcssa) {
    $i$0$lcssa178 = 0;
    label = 97;
   } else {
    $i$1116 = 0;
    $ws$1117 = $798;
    while (1) {
     $345 = HEAP32[$ws$1117 >> 2] | 0;
     if (!$345) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break L311;
     }
     $348 = _wctomb($mb, $345) | 0;
     $i$1116 = $348 + $i$1116 | 0;
     if (($i$1116 | 0) > ($i$0$lcssa | 0)) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break L311;
     }
     if (!(HEAP32[$f >> 2] & 32)) ___fwritex($mb, $348, $f) | 0;
     if ($i$1116 >>> 0 >= $i$0$lcssa >>> 0) {
      $i$0$lcssa178 = $i$0$lcssa;
      label = 97;
      break;
     } else $ws$1117 = $ws$1117 + 4 | 0;
    }
   }
  } while (0);
  if ((label | 0) == 97) {
   label = 0;
   _pad($f, 32, $w$1, $i$0$lcssa178, $fl$1$ ^ 8192);
   $cnt$0 = $cnt$1;
   $l$0 = ($w$1 | 0) > ($i$0$lcssa178 | 0) ? $w$1 : $i$0$lcssa178;
   $l10n$0 = $l10n$3;
   $s$0 = $$lcssa300;
   continue;
  }
  if ((label | 0) == 77) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $292 = $arg;
   $300 = (HEAP32[$292 >> 2] | 0) != 0 | (HEAP32[$292 + 4 >> 2] | 0) != 0;
   if (($p$2 | 0) != 0 | $300) {
    $306 = ($300 & 1 ^ 1) + ($2 - $a$0) | 0;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($306 | 0) ? $p$2 : $306;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   } else {
    $a$2 = $1;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   }
  }
  $772 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($772 | 0) ? $772 : $p$5;
  $774 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($774 | 0) ? $774 : $w$1;
  _pad($f, 32, $w$2, $774, $fl$6);
  if (!(HEAP32[$f >> 2] & 32)) ___fwritex($prefix$2, $pl$2, $f) | 0;
  _pad($f, 48, $w$2, $774, $fl$6 ^ 65536);
  _pad($f, 48, $$p$5, $772, 0);
  if (!(HEAP32[$f >> 2] & 32)) ___fwritex($a$2, $772, $f) | 0;
  _pad($f, 32, $w$2, $774, $fl$6 ^ 8192);
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
  $s$0 = $$lcssa300;
 }
 L345 : do if ((label | 0) == 244) if (!$f) if (!$l10n$0$lcssa) $$0 = 0; else {
  $i$291 = 1;
  while (1) {
   $787 = HEAP32[$nl_type + ($i$291 << 2) >> 2] | 0;
   if (!$787) {
    $i$291$lcssa = $i$291;
    break;
   }
   _pop_arg_257($nl_arg + ($i$291 << 3) | 0, $787, $ap);
   $i$291 = $i$291 + 1 | 0;
   if (($i$291 | 0) >= 10) {
    $$0 = 1;
    break L345;
   }
  }
  if (($i$291$lcssa | 0) < 10) {
   $i$389 = $i$291$lcssa;
   while (1) {
    if (HEAP32[$nl_type + ($i$389 << 2) >> 2] | 0) {
     $$0 = -1;
     break L345;
    }
    $i$389 = $i$389 + 1 | 0;
    if (($i$389 | 0) >= 10) {
     $$0 = 1;
     break;
    }
   }
  } else $$0 = 1;
 } else $$0 = $cnt$1$lcssa; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i105 = 0, $$0$i$i$i$i133 = 0, $$0$i$i$i$i151 = 0, $$0$i$i$i$i43 = 0, $$0$i$i$i$i58 = 0, $$0$i$i$i$i83 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i111 = 0, $$0$i$i1$i$i139 = 0, $$0$i$i1$i$i157 = 0, $$0$i$i1$i$i49 = 0, $$0$i$i1$i$i64 = 0, $$0$i$i1$i$i89 = 0, $$0$i$i102 = 0, $$0$i$i120 = 0, $$0$i$i126 = 0, $$0$i$i131 = 0, $$0$i$i148 = 0, $$0$i$i41 = 0, $$0$i$i55 = 0, $$0$i$i57 = 0, $$0$i$i71 = 0, $$0$i$i75 = 0, $$0$i$i80 = 0, $$0$i$i97 = 0, $$10 = 0, $$lcssa = 0, $$lcssa308 = 0, $$lcssa315 = 0, $$pre$i3$i$i113 = 0, $$pre$i3$i$i141 = 0, $$pre$i3$i$i141216 = 0, $$pre$i3$i$i141218 = 0, $$pre$i3$i$i159 = 0, $$pre$i3$i$i159229 = 0, $$pre$i3$i$i159230 = 0, $$pre$i3$i$i66 = 0, $$pre$i3$i$i66237 = 0, $$pre$i3$i$i66239 = 0, $$pre$i3$i$i91 = 0, $$pre$i3$i$i91221$ph = 0, $$pre$i3$i$i91221242 = 0, $$pre233 = 0, $$sink = 0, $0 = 0, $101 = 0, $104 = 0, $114 = 0, $115 = 0, $117 = 0, $130 = 0, $131 = 0, $132 = 0, $142 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $162 = 0, $164 = 0, $165 = 0, $17 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $188 = 0, $2 = 0, $20 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $213 = 0, $22 = 0, $224 = 0, $227 = 0, $23 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $242 = 0, $25 = 0, $26 = 0, $262 = 0, $263 = 0, $264 = 0, $272 = 0, $28 = 0, $288 = 0, $291 = 0, $293 = 0, $299 = 0, $300 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $320 = 0, $321 = 0, $322 = 0, $324 = 0, $325 = 0, $327 = 0, $331 = 0, $335 = 0, $338 = 0, $346 = 0, $347 = 0, $351 = 0, $354 = 0, $355 = 0, $357 = 0, $360 = 0, $370 = 0, $373 = 0, $383 = 0, $384 = 0, $386 = 0, $397 = 0, $398 = 0, $399 = 0, $409 = 0, $41 = 0, $411 = 0, $422 = 0, $425 = 0, $435 = 0, $438 = 0, $44 = 0, $448 = 0, $449 = 0, $451 = 0, $464 = 0, $468 = 0, $470 = 0, $481 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $500 = 0, $501 = 0, $502 = 0, $504 = 0, $507 = 0, $519 = 0, $529 = 0, $531 = 0, $544 = 0, $545 = 0, $546 = 0, $554 = 0, $556 = 0, $559 = 0, $569 = 0, $57 = 0, $572 = 0, $58 = 0, $582 = 0, $583 = 0, $585 = 0, $60 = 0, $603 = 0, $605 = 0, $614 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $634 = 0, $635 = 0, $636 = 0, $643 = 0, $644 = 0, $647 = 0, $657 = 0, $660 = 0, $670 = 0, $672 = 0, $686 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $702 = 0, $708 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $88 = 0, $91 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i29 = 0, $__i$0$i$i31 = 0, $__i$0$i$i34 = 0, $__i$0$i$i37 = 0, $__ng$0 = 0, $__ng$0$lcssa = 0, $__ng$2$ph = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0 = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$0$lcssa313 = 0, $__sym_space_end$sroa$0$0314 = 0, $__trailing_sign$0 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $0 = sp + 96 | 0;
 $__gbuf = sp + 104 | 0;
 $__gb = sp + 88 | 0;
 $__gn = sp + 80 | 0;
 $__ge = sp + 76 | 0;
 $__pat = sp + 504 | 0;
 $__dp = sp + 72 | 0;
 $__ts = sp + 68 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__psn = sp + 32 | 0;
 $__nsn = sp + 20 | 0;
 $__spaces = sp + 8 | 0;
 $__fd = sp + 4 | 0;
 $__et = sp;
 HEAP32[$0 >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 $2 = $__gb + 4 | 0;
 HEAP32[$2 >> 2] = 119;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i29 = 0;
 while (1) {
  if (($__i$0$i$i29 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i29 << 2) >> 2] = 0;
  $__i$0$i$i29 = $__i$0$i$i29 + 1 | 0;
 }
 $__i$0$i$i31 = 0;
 while (1) {
  if (($__i$0$i$i31 | 0) == 3) break;
  HEAP32[$__psn + ($__i$0$i$i31 << 2) >> 2] = 0;
  $__i$0$i$i31 = $__i$0$i$i31 + 1 | 0;
 }
 $__i$0$i$i34 = 0;
 while (1) {
  if (($__i$0$i$i34 | 0) == 3) break;
  HEAP32[$__nsn + ($__i$0$i$i34 << 2) >> 2] = 0;
  $__i$0$i$i34 = $__i$0$i$i34 + 1 | 0;
 }
 $__i$0$i$i37 = 0;
 while (1) {
  if (($__i$0$i$i37 | 0) == 3) break;
  HEAP32[$__spaces + ($__i$0$i$i37 << 2) >> 2] = 0;
  $__i$0$i$i37 = $__i$0$i$i37 + 1 | 0;
 }
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $15 = $__psn + 4 | 0;
 $16 = $__nsn + 4 | 0;
 $17 = $__nsn + 8 | 0;
 $18 = $__psn + 8 | 0;
 $20 = ($__flags & 512 | 0) != 0;
 $21 = $__sym + 8 | 0;
 $22 = $__sym + 4 | 0;
 $23 = $__spaces + 4 | 0;
 $24 = $__spaces + 8 | 0;
 $25 = $__pat + 3 | 0;
 $26 = $__grp + 4 | 0;
 $711 = $__gbuf;
 $__p$0 = 0;
 $__trailing_sign$0 = 0;
 L21 : while (1) {
  if ($__p$0 >>> 0 >= 4) {
   $$lcssa315 = $711;
   $__trailing_sign$0$lcssa = $__trailing_sign$0;
   label = 232;
   break;
  }
  $28 = HEAP32[$__b >> 2] | 0;
  do if (!$28) $712 = 1; else {
   $31 = HEAP32[$28 + 12 >> 2] | 0;
   if (($31 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i$i$i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; else $$0$i$i$i$i43 = HEAP32[$31 >> 2] | 0;
   if (($$0$i$i$i$i43 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $712 = 1;
    break;
   } else {
    $712 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $41 = HEAP32[$__e >> 2] | 0;
  do if (!$41) label = 31; else {
   $44 = HEAP32[$41 + 12 >> 2] | 0;
   if (($44 | 0) == (HEAP32[$41 + 16 >> 2] | 0)) $$0$i$i1$i$i49 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 36 >> 2] & 63]($41) | 0; else $$0$i$i1$i$i49 = HEAP32[$44 >> 2] | 0;
   if (($$0$i$i1$i$i49 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 31;
    break;
   } else if ($712) {
    $713 = $41;
    break;
   } else {
    $$lcssa315 = $711;
    $__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 232;
    break L21;
   }
  } while (0);
  if ((label | 0) == 31) {
   label = 0;
   if ($712) {
    $$lcssa315 = $711;
    $__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 232;
    break;
   } else $713 = 0;
  }
  L46 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 1:
   {
    if (($__p$0 | 0) == 3) {
     $714 = $711;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $58 = HEAP32[$__b >> 2] | 0;
     $60 = HEAP32[$58 + 12 >> 2] | 0;
     if (($60 | 0) == (HEAP32[$58 + 16 >> 2] | 0)) $$0$i$i55 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] & 63]($58) | 0; else $$0$i$i55 = HEAP32[$60 >> 2] | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i55) | 0)) {
      label = 44;
      break L21;
     }
     $73 = HEAP32[$__b >> 2] | 0;
     $74 = $73 + 12 | 0;
     $75 = HEAP32[$74 >> 2] | 0;
     if (($75 | 0) == (HEAP32[$73 + 16 >> 2] | 0)) $$0$i$i57 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 40 >> 2] & 63]($73) | 0; else {
      HEAP32[$74 >> 2] = $75 + 4;
      $$0$i$i57 = HEAP32[$75 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i57);
     $$pre$i3$i$i66 = $713;
     $101 = $713;
     label = 46;
    }
    break;
   }
  case 0:
   {
    if (($__p$0 | 0) == 3) {
     $714 = $711;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $$pre$i3$i$i66 = $713;
     $101 = $713;
     label = 46;
    }
    break;
   }
  case 3:
   {
    $142 = HEAP8[$__psn >> 0] | 0;
    $148 = ($142 & 1) == 0 ? ($142 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
    $149 = HEAP8[$__nsn >> 0] | 0;
    $155 = ($149 & 1) == 0 ? ($149 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
    if (($148 | 0) == (0 - $155 | 0)) {
     $714 = $711;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $158 = ($148 | 0) == 0;
     $160 = HEAP32[$__b >> 2] | 0;
     $162 = HEAP32[$160 + 12 >> 2] | 0;
     $164 = HEAP32[$160 + 16 >> 2] | 0;
     $165 = ($162 | 0) == ($164 | 0);
     if ($158 | ($155 | 0) == 0) {
      if ($165) $$0$i$i97 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$160 >> 2] | 0) + 36 >> 2] & 63]($160) | 0; else $$0$i$i97 = HEAP32[$162 >> 2] | 0;
      if ($158) {
       if (($$0$i$i97 | 0) != (HEAP32[((HEAP8[$__nsn >> 0] & 1) == 0 ? $16 : HEAP32[$17 >> 2] | 0) >> 2] | 0)) {
        $714 = $711;
        $__trailing_sign$1 = $__trailing_sign$0;
        break L46;
       }
       $203 = HEAP32[$__b >> 2] | 0;
       $204 = $203 + 12 | 0;
       $205 = HEAP32[$204 >> 2] | 0;
       if (($205 | 0) == (HEAP32[$203 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$203 >> 2] | 0) + 40 >> 2] & 63]($203) | 0; else HEAP32[$204 >> 2] = $205 + 4;
       HEAP8[$__neg >> 0] = 1;
       $213 = HEAP8[$__nsn >> 0] | 0;
       $714 = $711;
       $__trailing_sign$1 = (($213 & 1) == 0 ? ($213 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
       break L46;
      }
      if (($$0$i$i97 | 0) != (HEAP32[((HEAP8[$__psn >> 0] & 1) == 0 ? $15 : HEAP32[$18 >> 2] | 0) >> 2] | 0)) {
       HEAP8[$__neg >> 0] = 1;
       $714 = $711;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L46;
      }
      $178 = HEAP32[$__b >> 2] | 0;
      $179 = $178 + 12 | 0;
      $180 = HEAP32[$179 >> 2] | 0;
      if (($180 | 0) == (HEAP32[$178 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$178 >> 2] | 0) + 40 >> 2] & 63]($178) | 0; else HEAP32[$179 >> 2] = $180 + 4;
      $188 = HEAP8[$__psn >> 0] | 0;
      $714 = $711;
      $__trailing_sign$1 = (($188 & 1) == 0 ? ($188 & 255) >>> 1 : HEAP32[$15 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($165) {
      $224 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$160 >> 2] | 0) + 36 >> 2] & 63]($160) | 0;
      $$pre233 = HEAP32[$__b >> 2] | 0;
      $$0$i$i120 = $224;
      $227 = HEAP8[$__psn >> 0] | 0;
      $234 = $$pre233;
      $235 = HEAP32[$$pre233 + 12 >> 2] | 0;
      $237 = HEAP32[$$pre233 + 16 >> 2] | 0;
     } else {
      $$0$i$i120 = HEAP32[$162 >> 2] | 0;
      $227 = $142;
      $234 = $160;
      $235 = $162;
      $237 = $164;
     }
     $233 = $234 + 12 | 0;
     $236 = ($235 | 0) == ($237 | 0);
     if (($$0$i$i120 | 0) == (HEAP32[(($227 & 1) == 0 ? $15 : HEAP32[$18 >> 2] | 0) >> 2] | 0)) {
      if ($236) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$234 >> 2] | 0) + 40 >> 2] & 63]($234) | 0; else HEAP32[$233 >> 2] = $235 + 4;
      $242 = HEAP8[$__psn >> 0] | 0;
      $714 = $711;
      $__trailing_sign$1 = (($242 & 1) == 0 ? ($242 & 255) >>> 1 : HEAP32[$15 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L46;
     }
     if ($236) $$0$i$i126 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$234 >> 2] | 0) + 36 >> 2] & 63]($234) | 0; else $$0$i$i126 = HEAP32[$235 >> 2] | 0;
     if (($$0$i$i126 | 0) != (HEAP32[((HEAP8[$__nsn >> 0] & 1) == 0 ? $16 : HEAP32[$17 >> 2] | 0) >> 2] | 0)) {
      label = 102;
      break L21;
     }
     $262 = HEAP32[$__b >> 2] | 0;
     $263 = $262 + 12 | 0;
     $264 = HEAP32[$263 >> 2] | 0;
     if (($264 | 0) == (HEAP32[$262 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$262 >> 2] | 0) + 40 >> 2] & 63]($262) | 0; else HEAP32[$263 >> 2] = $264 + 4;
     HEAP8[$__neg >> 0] = 1;
     $272 = HEAP8[$__nsn >> 0] | 0;
     $714 = $711;
     $__trailing_sign$1 = (($272 & 1) == 0 ? ($272 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
    }
    break;
   }
  case 2:
   {
    if (!($__p$0 >>> 0 < 2 | ($__trailing_sign$0 | 0) != 0)) if (!($20 | ($__p$0 | 0) == 2 & (HEAP8[$25 >> 0] | 0) != 0)) {
     $714 = $711;
     $__trailing_sign$1 = 0;
     break L46;
    }
    $288 = HEAP8[$__sym >> 0] | 0;
    $291 = HEAP32[$21 >> 2] | 0;
    $293 = ($288 & 1) == 0 ? $22 : $291;
    L107 : do if (!$__p$0) {
     $$pre$i3$i$i159 = $713;
     $346 = $288;
     $351 = $291;
     $370 = $713;
     $__sym_curr_char$sroa$0$0 = $293;
    } else if ((HEAPU8[$__pat + ($__p$0 + -1) >> 0] | 0) < 2) {
     $299 = $288;
     $304 = $291;
     $__sym_space_end$sroa$0$0 = $293;
     while (1) {
      $300 = ($299 & 1) == 0;
      $308 = $__sym_space_end$sroa$0$0;
      if (($308 | 0) == (($300 ? $22 : $304) + (($300 ? ($299 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0)) {
       $318 = $299;
       $320 = $304;
       $__sym_space_end$sroa$0$0314 = $__sym_space_end$sroa$0$0;
       break;
      }
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, HEAP32[$308 >> 2] | 0) | 0)) {
       $__sym_space_end$sroa$0$0$lcssa313 = $__sym_space_end$sroa$0$0;
       label = 109;
       break;
      }
      $299 = HEAP8[$__sym >> 0] | 0;
      $304 = HEAP32[$21 >> 2] | 0;
      $__sym_space_end$sroa$0$0 = $308 + 4 | 0;
     }
     if ((label | 0) == 109) {
      label = 0;
      $318 = HEAP8[$__sym >> 0] | 0;
      $320 = HEAP32[$21 >> 2] | 0;
      $__sym_space_end$sroa$0$0314 = $__sym_space_end$sroa$0$0$lcssa313;
     }
     $321 = ($318 & 1) == 0 ? $22 : $320;
     $322 = $321;
     $324 = $__sym_space_end$sroa$0$0314 - $322 >> 2;
     $325 = HEAP8[$__spaces >> 0] | 0;
     $327 = ($325 & 1) == 0;
     $331 = $327 ? ($325 & 255) >>> 1 : HEAP32[$23 >> 2] | 0;
     if ($324 >>> 0 > $331 >>> 0) {
      $$pre$i3$i$i159 = $713;
      $346 = $318;
      $351 = $320;
      $370 = $713;
      $__sym_curr_char$sroa$0$0 = $322;
     } else {
      $335 = ($327 ? $23 : HEAP32[$24 >> 2] | 0) + ($331 << 2) | 0;
      $$sink = $321;
      $338 = $335 + (0 - $324 << 2) | 0;
      while (1) {
       if (($338 | 0) == ($335 | 0)) {
        $$pre$i3$i$i159 = $713;
        $346 = $318;
        $351 = $320;
        $370 = $713;
        $__sym_curr_char$sroa$0$0 = $__sym_space_end$sroa$0$0314;
        break L107;
       }
       if ((HEAP32[$338 >> 2] | 0) != (HEAP32[$$sink >> 2] | 0)) {
        $$pre$i3$i$i159 = $713;
        $346 = $318;
        $351 = $320;
        $370 = $713;
        $__sym_curr_char$sroa$0$0 = $322;
        break L107;
       }
       $$sink = $$sink + 4 | 0;
       $338 = $338 + 4 | 0;
      }
     }
    } else {
     $$pre$i3$i$i159 = $713;
     $346 = $288;
     $351 = $291;
     $370 = $713;
     $__sym_curr_char$sroa$0$0 = $293;
    } while (0);
    L121 : while (1) {
     $347 = ($346 & 1) == 0;
     $354 = ($347 ? $22 : $351) + (($347 ? ($346 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0;
     $355 = $__sym_curr_char$sroa$0$0;
     if (($355 | 0) == ($354 | 0)) {
      $$lcssa = $354;
      break;
     }
     $357 = HEAP32[$__b >> 2] | 0;
     do if (!$357) $383 = 1; else {
      $360 = HEAP32[$357 + 12 >> 2] | 0;
      if (($360 | 0) == (HEAP32[$357 + 16 >> 2] | 0)) $$0$i$i$i$i151 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$357 >> 2] | 0) + 36 >> 2] & 63]($357) | 0; else $$0$i$i$i$i151 = HEAP32[$360 >> 2] | 0;
      if (($$0$i$i$i$i151 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $383 = 1;
       break;
      } else {
       $383 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$370) {
      $$pre$i3$i$i159230 = $$pre$i3$i$i159;
      label = 130;
     } else {
      $373 = HEAP32[$370 + 12 >> 2] | 0;
      if (($373 | 0) == (HEAP32[$370 + 16 >> 2] | 0)) $$0$i$i1$i$i157 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$370 >> 2] | 0) + 36 >> 2] & 63]($370) | 0; else $$0$i$i1$i$i157 = HEAP32[$373 >> 2] | 0;
      if (($$0$i$i1$i$i157 | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i3$i$i159230 = 0;
       label = 130;
       break;
      } else if ($383 ^ ($$pre$i3$i$i159 | 0) == 0) {
       $$pre$i3$i$i159229 = $$pre$i3$i$i159;
       $716 = $$pre$i3$i$i159;
       break;
      } else {
       $$lcssa = $355;
       break L121;
      }
     } while (0);
     if ((label | 0) == 130) {
      label = 0;
      if ($383) {
       $$lcssa = $355;
       break;
      } else {
       $$pre$i3$i$i159229 = $$pre$i3$i$i159230;
       $716 = 0;
      }
     }
     $384 = HEAP32[$__b >> 2] | 0;
     $386 = HEAP32[$384 + 12 >> 2] | 0;
     if (($386 | 0) == (HEAP32[$384 + 16 >> 2] | 0)) $$0$i$i148 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$384 >> 2] | 0) + 36 >> 2] & 63]($384) | 0; else $$0$i$i148 = HEAP32[$386 >> 2] | 0;
     if (($$0$i$i148 | 0) != (HEAP32[$355 >> 2] | 0)) {
      $$lcssa = $355;
      break;
     }
     $397 = HEAP32[$__b >> 2] | 0;
     $398 = $397 + 12 | 0;
     $399 = HEAP32[$398 >> 2] | 0;
     if (($399 | 0) == (HEAP32[$397 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$397 >> 2] | 0) + 40 >> 2] & 63]($397) | 0; else HEAP32[$398 >> 2] = $399 + 4;
     $$pre$i3$i$i159 = $$pre$i3$i$i159229;
     $346 = HEAP8[$__sym >> 0] | 0;
     $351 = HEAP32[$21 >> 2] | 0;
     $370 = $716;
     $__sym_curr_char$sroa$0$0 = $355 + 4 | 0;
    }
    if ($20) {
     $409 = HEAP8[$__sym >> 0] | 0;
     $411 = ($409 & 1) == 0;
     if (($$lcssa | 0) == (($411 ? $22 : HEAP32[$21 >> 2] | 0) + (($411 ? ($409 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0)) {
      $714 = $711;
      $__trailing_sign$1 = $__trailing_sign$0;
     } else {
      label = 142;
      break L21;
     }
    } else {
     $714 = $711;
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
  case 4:
   {
    $57 = HEAP32[$__ts >> 2] | 0;
    $$pre$i3$i$i141 = $713;
    $435 = $713;
    $481 = $711;
    $__ng$0 = 0;
    L158 : while (1) {
     $422 = HEAP32[$__b >> 2] | 0;
     do if (!$422) $448 = 1; else {
      $425 = HEAP32[$422 + 12 >> 2] | 0;
      if (($425 | 0) == (HEAP32[$422 + 16 >> 2] | 0)) $$0$i$i$i$i133 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$422 >> 2] | 0) + 36 >> 2] & 63]($422) | 0; else $$0$i$i$i$i133 = HEAP32[$425 >> 2] | 0;
      if (($$0$i$i$i$i133 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $448 = 1;
       break;
      } else {
       $448 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$435) {
      $$pre$i3$i$i141216 = $$pre$i3$i$i141;
      label = 156;
     } else {
      $438 = HEAP32[$435 + 12 >> 2] | 0;
      if (($438 | 0) == (HEAP32[$435 + 16 >> 2] | 0)) $$0$i$i1$i$i139 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$435 >> 2] | 0) + 36 >> 2] & 63]($435) | 0; else $$0$i$i1$i$i139 = HEAP32[$438 >> 2] | 0;
      if (($$0$i$i1$i$i139 | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i3$i$i141216 = 0;
       label = 156;
       break;
      } else if ($448 ^ ($$pre$i3$i$i141 | 0) == 0) {
       $$pre$i3$i$i141218 = $$pre$i3$i$i141;
       $717 = $$pre$i3$i$i141;
       break;
      } else {
       $$lcssa308 = $481;
       $$pre$i3$i$i113 = $$pre$i3$i$i141;
       $__ng$0$lcssa = $__ng$0;
       break L158;
      }
     } while (0);
     if ((label | 0) == 156) {
      label = 0;
      if ($448) {
       $$lcssa308 = $481;
       $$pre$i3$i$i113 = $$pre$i3$i$i141216;
       $__ng$0$lcssa = $__ng$0;
       break;
      } else {
       $$pre$i3$i$i141218 = $$pre$i3$i$i141216;
       $717 = 0;
      }
     }
     $449 = HEAP32[$__b >> 2] | 0;
     $451 = HEAP32[$449 + 12 >> 2] | 0;
     if (($451 | 0) == (HEAP32[$449 + 16 >> 2] | 0)) $$0$i$i131 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$449 >> 2] | 0) + 36 >> 2] & 63]($449) | 0; else $$0$i$i131 = HEAP32[$451 >> 2] | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i131) | 0) {
      $464 = HEAP32[$__wn >> 2] | 0;
      if (($464 | 0) == (HEAP32[$0 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
       $468 = HEAP32[$__wn >> 2] | 0;
      } else $468 = $464;
      HEAP32[$__wn >> 2] = $468 + 4;
      HEAP32[$468 >> 2] = $$0$i$i131;
      $718 = $481;
      $__ng$2$ph = $__ng$0 + 1 | 0;
     } else {
      $470 = HEAP8[$__grp >> 0] | 0;
      if (!(($$0$i$i131 | 0) == ($57 | 0) & ($__ng$0 | 0 ? ((($470 & 1) == 0 ? ($470 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0) != 0 : 0))) {
       $$lcssa308 = $481;
       $$pre$i3$i$i113 = $$pre$i3$i$i141218;
       $__ng$0$lcssa = $__ng$0;
       break;
      }
      if (($481 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $484 = HEAP32[$__gn >> 2] | 0;
      } else $484 = $481;
      $483 = $484 + 4 | 0;
      HEAP32[$__gn >> 2] = $483;
      HEAP32[$484 >> 2] = $__ng$0;
      $718 = $483;
      $__ng$2$ph = 0;
     }
     $485 = HEAP32[$__b >> 2] | 0;
     $486 = $485 + 12 | 0;
     $487 = HEAP32[$486 >> 2] | 0;
     if (($487 | 0) == (HEAP32[$485 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$485 >> 2] | 0) + 40 >> 2] & 63]($485) | 0;
      $$pre$i3$i$i141 = $$pre$i3$i$i141218;
      $435 = $717;
      $481 = $718;
      $__ng$0 = $__ng$2$ph;
      continue;
     } else {
      HEAP32[$486 >> 2] = $487 + 4;
      $$pre$i3$i$i141 = $$pre$i3$i$i141218;
      $435 = $717;
      $481 = $718;
      $__ng$0 = $__ng$2$ph;
      continue;
     }
    }
    if ($__ng$0$lcssa | 0 ? (HEAP32[$__gb >> 2] | 0) != ($$lcssa308 | 0) : 0) {
     if (($$lcssa308 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $501 = HEAP32[$__gn >> 2] | 0;
     } else $501 = $$lcssa308;
     $500 = $501 + 4 | 0;
     HEAP32[$__gn >> 2] = $500;
     HEAP32[$501 >> 2] = $__ng$0$lcssa;
     $719 = $500;
    } else $719 = $$lcssa308;
    $502 = HEAP32[$__fd >> 2] | 0;
    L207 : do if (($502 | 0) > 0) {
     $504 = HEAP32[$__b >> 2] | 0;
     do if (!$504) $720 = 1; else {
      $507 = HEAP32[$504 + 12 >> 2] | 0;
      if (($507 | 0) == (HEAP32[$504 + 16 >> 2] | 0)) $$0$i$i$i$i105 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$504 >> 2] | 0) + 36 >> 2] & 63]($504) | 0; else $$0$i$i$i$i105 = HEAP32[$507 >> 2] | 0;
      if (($$0$i$i$i$i105 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $720 = 1;
       break;
      } else {
       $720 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$$pre$i3$i$i113) label = 190; else {
      $519 = HEAP32[$$pre$i3$i$i113 + 12 >> 2] | 0;
      if (($519 | 0) == (HEAP32[$$pre$i3$i$i113 + 16 >> 2] | 0)) $$0$i$i1$i$i111 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i113 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i113) | 0; else $$0$i$i1$i$i111 = HEAP32[$519 >> 2] | 0;
      if (($$0$i$i1$i$i111 | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       label = 190;
       break;
      } else if ($720) {
       $721 = $$pre$i3$i$i113;
       break;
      } else {
       label = 196;
       break L21;
      }
     } while (0);
     if ((label | 0) == 190) {
      label = 0;
      if ($720) {
       label = 196;
       break L21;
      } else $721 = 0;
     }
     $529 = HEAP32[$__b >> 2] | 0;
     $531 = HEAP32[$529 + 12 >> 2] | 0;
     if (($531 | 0) == (HEAP32[$529 + 16 >> 2] | 0)) $$0$i$i102 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$529 >> 2] | 0) + 36 >> 2] & 63]($529) | 0; else $$0$i$i102 = HEAP32[$531 >> 2] | 0;
     if (($$0$i$i102 | 0) != (HEAP32[$__dp >> 2] | 0)) {
      label = 196;
      break L21;
     }
     $544 = HEAP32[$__b >> 2] | 0;
     $545 = $544 + 12 | 0;
     $546 = HEAP32[$545 >> 2] | 0;
     if (($546 | 0) == (HEAP32[$544 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$544 >> 2] | 0) + 40 >> 2] & 63]($544) | 0;
      $$pre$i3$i$i91 = $721;
      $554 = $502;
      $569 = $721;
     } else {
      HEAP32[$545 >> 2] = $546 + 4;
      $$pre$i3$i$i91 = $721;
      $554 = $502;
      $569 = $721;
     }
     while (1) {
      if (($554 | 0) <= 0) break L207;
      $556 = HEAP32[$__b >> 2] | 0;
      do if (!$556) $582 = 1; else {
       $559 = HEAP32[$556 + 12 >> 2] | 0;
       if (($559 | 0) == (HEAP32[$556 + 16 >> 2] | 0)) $$0$i$i$i$i83 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$556 >> 2] | 0) + 36 >> 2] & 63]($556) | 0; else $$0$i$i$i$i83 = HEAP32[$559 >> 2] | 0;
       if (($$0$i$i$i$i83 | 0) == -1) {
        HEAP32[$__b >> 2] = 0;
        $582 = 1;
        break;
       } else {
        $582 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$569) {
       $$pre$i3$i$i91221$ph = $$pre$i3$i$i91;
       label = 214;
      } else {
       $572 = HEAP32[$569 + 12 >> 2] | 0;
       if (($572 | 0) == (HEAP32[$569 + 16 >> 2] | 0)) $$0$i$i1$i$i89 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$569 >> 2] | 0) + 36 >> 2] & 63]($569) | 0; else $$0$i$i1$i$i89 = HEAP32[$572 >> 2] | 0;
       if (($$0$i$i1$i$i89 | 0) == -1) {
        HEAP32[$__e >> 2] = 0;
        $$pre$i3$i$i91221$ph = 0;
        label = 214;
        break;
       } else if ($582 ^ ($$pre$i3$i$i91 | 0) == 0) {
        $$pre$i3$i$i91221242 = $$pre$i3$i$i91;
        $722 = $$pre$i3$i$i91;
        break;
       } else {
        label = 220;
        break L21;
       }
      } while (0);
      if ((label | 0) == 214) {
       label = 0;
       if ($582) {
        label = 220;
        break L21;
       } else {
        $$pre$i3$i$i91221242 = $$pre$i3$i$i91221$ph;
        $722 = 0;
       }
      }
      $583 = HEAP32[$__b >> 2] | 0;
      $585 = HEAP32[$583 + 12 >> 2] | 0;
      if (($585 | 0) == (HEAP32[$583 + 16 >> 2] | 0)) $$0$i$i80 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$583 >> 2] | 0) + 36 >> 2] & 63]($583) | 0; else $$0$i$i80 = HEAP32[$585 >> 2] | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i80) | 0)) {
       label = 220;
       break L21;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$0 >> 2] | 0)) __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
      $603 = HEAP32[$__b >> 2] | 0;
      $605 = HEAP32[$603 + 12 >> 2] | 0;
      if (($605 | 0) == (HEAP32[$603 + 16 >> 2] | 0)) $$0$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$603 >> 2] | 0) + 36 >> 2] & 63]($603) | 0; else $$0$i$i41 = HEAP32[$605 >> 2] | 0;
      $614 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $614 + 4;
      HEAP32[$614 >> 2] = $$0$i$i41;
      $616 = $554 + -1 | 0;
      HEAP32[$__fd >> 2] = $616;
      $617 = HEAP32[$__b >> 2] | 0;
      $618 = $617 + 12 | 0;
      $619 = HEAP32[$618 >> 2] | 0;
      if (($619 | 0) == (HEAP32[$617 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$617 >> 2] | 0) + 40 >> 2] & 63]($617) | 0;
       $$pre$i3$i$i91 = $$pre$i3$i$i91221242;
       $554 = $616;
       $569 = $722;
       continue;
      } else {
       HEAP32[$618 >> 2] = $619 + 4;
       $$pre$i3$i$i91 = $$pre$i3$i$i91221242;
       $554 = $616;
       $569 = $722;
       continue;
      }
     }
    } while (0);
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 230;
     break L21;
    } else {
     $714 = $719;
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
  default:
   {
    $714 = $711;
    $__trailing_sign$1 = $__trailing_sign$0;
   }
  } while (0);
  L280 : do if ((label | 0) == 46) while (1) {
   label = 0;
   $88 = HEAP32[$__b >> 2] | 0;
   do if (!$88) $114 = 1; else {
    $91 = HEAP32[$88 + 12 >> 2] | 0;
    if (($91 | 0) == (HEAP32[$88 + 16 >> 2] | 0)) $$0$i$i$i$i58 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] & 63]($88) | 0; else $$0$i$i$i$i58 = HEAP32[$91 >> 2] | 0;
    if (($$0$i$i$i$i58 | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $114 = 1;
     break;
    } else {
     $114 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!$101) {
    $$pre$i3$i$i66237 = $$pre$i3$i$i66;
    label = 59;
   } else {
    $104 = HEAP32[$101 + 12 >> 2] | 0;
    if (($104 | 0) == (HEAP32[$101 + 16 >> 2] | 0)) $$0$i$i1$i$i64 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$101 >> 2] | 0) + 36 >> 2] & 63]($101) | 0; else $$0$i$i1$i$i64 = HEAP32[$104 >> 2] | 0;
    if (($$0$i$i1$i$i64 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$pre$i3$i$i66237 = 0;
     label = 59;
     break;
    } else if ($114 ^ ($$pre$i3$i$i66 | 0) == 0) {
     $$pre$i3$i$i66239 = $$pre$i3$i$i66;
     $715 = $$pre$i3$i$i66;
     break;
    } else {
     $714 = $711;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L280;
    }
   } while (0);
   if ((label | 0) == 59) {
    label = 0;
    if ($114) {
     $714 = $711;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L280;
    } else {
     $$pre$i3$i$i66239 = $$pre$i3$i$i66237;
     $715 = 0;
    }
   }
   $115 = HEAP32[$__b >> 2] | 0;
   $117 = HEAP32[$115 + 12 >> 2] | 0;
   if (($117 | 0) == (HEAP32[$115 + 16 >> 2] | 0)) $$0$i$i71 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$115 >> 2] | 0) + 36 >> 2] & 63]($115) | 0; else $$0$i$i71 = HEAP32[$117 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i71) | 0)) {
    $714 = $711;
    $__trailing_sign$1 = $__trailing_sign$0;
    break L280;
   }
   $130 = HEAP32[$__b >> 2] | 0;
   $131 = $130 + 12 | 0;
   $132 = HEAP32[$131 >> 2] | 0;
   if (($132 | 0) == (HEAP32[$130 + 16 >> 2] | 0)) $$0$i$i75 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$130 >> 2] | 0) + 40 >> 2] & 63]($130) | 0; else {
    HEAP32[$131 >> 2] = $132 + 4;
    $$0$i$i75 = HEAP32[$132 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i75);
   $$pre$i3$i$i66 = $$pre$i3$i$i66239;
   $101 = $715;
   label = 46;
  } while (0);
  $711 = $714;
  $__p$0 = $__p$0 + 1 | 0;
  $__trailing_sign$0 = $__trailing_sign$1;
 }
 L315 : do if ((label | 0) == 44) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 102) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 142) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 196) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 220) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 230) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 232) {
  L317 : do if ($__trailing_sign$0$lcssa | 0) {
   $634 = $__trailing_sign$0$lcssa + 4 | 0;
   $635 = $__trailing_sign$0$lcssa + 8 | 0;
   $__i$0 = 1;
   L319 : while (1) {
    $636 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
    if (!($636 & 1)) $643 = ($636 & 255) >>> 1; else $643 = HEAP32[$634 >> 2] | 0;
    if ($__i$0 >>> 0 >= $643 >>> 0) break L317;
    $644 = HEAP32[$__b >> 2] | 0;
    do if (!$644) $723 = 1; else {
     $647 = HEAP32[$644 + 12 >> 2] | 0;
     if (($647 | 0) == (HEAP32[$644 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$644 >> 2] | 0) + 36 >> 2] & 63]($644) | 0; else $$0$i$i$i$i = HEAP32[$647 >> 2] | 0;
     if (($$0$i$i$i$i | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $723 = 1;
      break;
     } else {
      $723 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    $657 = HEAP32[$__e >> 2] | 0;
    do if (!$657) label = 251; else {
     $660 = HEAP32[$657 + 12 >> 2] | 0;
     if (($660 | 0) == (HEAP32[$657 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$657 >> 2] | 0) + 36 >> 2] & 63]($657) | 0; else $$0$i$i1$i$i = HEAP32[$660 >> 2] | 0;
     if (($$0$i$i1$i$i | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 251;
      break;
     } else if ($723) break; else break L319;
    } while (0);
    if ((label | 0) == 251) {
     label = 0;
     if ($723) break;
    }
    $670 = HEAP32[$__b >> 2] | 0;
    $672 = HEAP32[$670 + 12 >> 2] | 0;
    if (($672 | 0) == (HEAP32[$670 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$670 >> 2] | 0) + 36 >> 2] & 63]($670) | 0; else $$0$i$i = HEAP32[$672 >> 2] | 0;
    if (!(HEAP8[$__trailing_sign$0$lcssa >> 0] & 1)) $686 = $634; else $686 = HEAP32[$635 >> 2] | 0;
    if (($$0$i$i | 0) != (HEAP32[$686 + ($__i$0 << 2) >> 2] | 0)) break;
    $691 = $__i$0 + 1 | 0;
    $692 = HEAP32[$__b >> 2] | 0;
    $693 = $692 + 12 | 0;
    $694 = HEAP32[$693 >> 2] | 0;
    if (($694 | 0) == (HEAP32[$692 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$692 >> 2] | 0) + 40 >> 2] & 63]($692) | 0;
     $__i$0 = $691;
     continue;
    } else {
     HEAP32[$693 >> 2] = $694 + 4;
     $__i$0 = $691;
     continue;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$10 = 0;
   break L315;
  } while (0);
  $702 = HEAP32[$__gb >> 2] | 0;
  if (($702 | 0) == ($$lcssa315 | 0)) $$10 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $702, $$lcssa315, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) {
    $$10 = 1;
    break;
   } else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $$10 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $708 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($708 | 0) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($708);
 STACKTOP = sp;
 return $$10 | 0;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$0$i$i = 0, $$0$i$i102 = 0, $$0$i$i110 = 0, $$0$i$i118 = 0, $$0$i$i120 = 0, $$0$i$i135 = 0, $$0$i$i42 = 0, $$0$i$i52 = 0, $$0$i$i54 = 0, $$0$i$i64 = 0, $$0$i$i70 = 0, $$0$i$i74 = 0, $$0$i$i90 = 0, $$10 = 0, $$lcssa = 0, $$lcssa277 = 0, $$lcssa278 = 0, $$pre$i2$i$i128 = 0, $$pre$i2$i$i128209 = 0, $$pre$i2$i$i128211 = 0, $$pre$i2$i$i143 = 0, $$pre$i2$i$i143218 = 0, $$pre$i2$i$i143219 = 0, $$pre$i2$i$i60 = 0, $$pre$i2$i$i60226 = 0, $$pre$i2$i$i60228 = 0, $$pre$i2$i$i82 = 0, $$pre$i2$i$i82214$ph = 0, $$pre$i2$i$i82214231 = 0, $$pre$i2$i$i98 = 0, $$pre222 = 0, $$sink = 0, $0 = 0, $111 = 0, $112 = 0, $113 = 0, $126 = 0, $128 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $159 = 0, $16 = 0, $165 = 0, $166 = 0, $17 = 0, $172 = 0, $175 = 0, $177 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $189 = 0, $19 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $207 = 0, $21 = 0, $222 = 0, $223 = 0, $224 = 0, $23 = 0, $232 = 0, $24 = 0, $243 = 0, $248 = 0, $25 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $263 = 0, $27 = 0, $28 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $295 = 0, $30 = 0, $31 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $325 = 0, $326 = 0, $328 = 0, $33 = 0, $337 = 0, $338 = 0, $340 = 0, $344 = 0, $348 = 0, $351 = 0, $359 = 0, $360 = 0, $364 = 0, $367 = 0, $368 = 0, $370 = 0, $382 = 0, $383 = 0, $384 = 0, $397 = 0, $399 = 0, $412 = 0, $413 = 0, $414 = 0, $424 = 0, $426 = 0, $437 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $46 = 0, $464 = 0, $466 = 0, $47 = 0, $476 = 0, $483 = 0, $487 = 0, $489 = 0, $500 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $519 = 0, $520 = 0, $521 = 0, $523 = 0, $535 = 0, $536 = 0, $548 = 0, $550 = 0, $565 = 0, $566 = 0, $567 = 0, $575 = 0, $577 = 0, $589 = 0, $590 = 0, $591 = 0, $604 = 0, $606 = 0, $62 = 0, $628 = 0, $63 = 0, $630 = 0, $641 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $65 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $671 = 0, $672 = 0, $684 = 0, $685 = 0, $686 = 0, $698 = 0, $700 = 0, $716 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $732 = 0, $738 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $82 = 0, $83 = 0, $84 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i29 = 0, $__i$0$i$i32 = 0, $__i$0$i$i35 = 0, $__i$0$i$i38 = 0, $__ng$0 = 0, $__ng$0$lcssa = 0, $__ng$2$ph = 0, $__nsn = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__sym_curr_char$sroa$0$0 = 0, $__sym_space_end$sroa$0$0 = 0, $__sym_space_end$sroa$0$0$lcssa = 0, $__trailing_sign$0 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $0 = sp + 88 | 0;
 $__gbuf = sp + 96 | 0;
 $__gb = sp + 80 | 0;
 $__gn = sp + 72 | 0;
 $__ge = sp + 68 | 0;
 $__pat = sp + 500 | 0;
 $__dp = sp + 497 | 0;
 $__ts = sp + 496 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__psn = sp + 32 | 0;
 $__nsn = sp + 20 | 0;
 $__spaces = sp + 8 | 0;
 $__fd = sp + 4 | 0;
 $__et = sp;
 HEAP32[$0 >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 $2 = $__gb + 4 | 0;
 HEAP32[$2 >> 2] = 119;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i29 = 0;
 while (1) {
  if (($__i$0$i$i29 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i29 << 2) >> 2] = 0;
  $__i$0$i$i29 = $__i$0$i$i29 + 1 | 0;
 }
 $__i$0$i$i32 = 0;
 while (1) {
  if (($__i$0$i$i32 | 0) == 3) break;
  HEAP32[$__psn + ($__i$0$i$i32 << 2) >> 2] = 0;
  $__i$0$i$i32 = $__i$0$i$i32 + 1 | 0;
 }
 $__i$0$i$i35 = 0;
 while (1) {
  if (($__i$0$i$i35 | 0) == 3) break;
  HEAP32[$__nsn + ($__i$0$i$i35 << 2) >> 2] = 0;
  $__i$0$i$i35 = $__i$0$i$i35 + 1 | 0;
 }
 $__i$0$i$i38 = 0;
 while (1) {
  if (($__i$0$i$i38 | 0) == 3) break;
  HEAP32[$__spaces + ($__i$0$i$i38 << 2) >> 2] = 0;
  $__i$0$i$i38 = $__i$0$i$i38 + 1 | 0;
 }
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $15 = $__ct + 8 | 0;
 $16 = $__psn + 4 | 0;
 $17 = $__nsn + 4 | 0;
 $18 = $__nsn + 8 | 0;
 $19 = $__nsn + 1 | 0;
 $20 = $__psn + 8 | 0;
 $21 = $__psn + 1 | 0;
 $23 = ($__flags & 512 | 0) != 0;
 $24 = $__sym + 8 | 0;
 $25 = $__sym + 1 | 0;
 $26 = $__sym + 4 | 0;
 $27 = $__spaces + 4 | 0;
 $28 = $__spaces + 8 | 0;
 $29 = $__spaces + 1 | 0;
 $30 = $__pat + 3 | 0;
 $31 = $__grp + 4 | 0;
 $741 = $__gbuf;
 $__p$0 = 0;
 $__trailing_sign$0 = 0;
 L21 : while (1) {
  if ($__p$0 >>> 0 >= 4) {
   $$lcssa278 = $741;
   $__trailing_sign$0$lcssa = $__trailing_sign$0;
   label = 218;
   break;
  }
  $33 = HEAP32[$__b >> 2] | 0;
  do if (!$33) $45 = 0; else if ((HEAP32[$33 + 12 >> 2] | 0) == (HEAP32[$33 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 63]($33) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $45 = 0;
   break;
  } else {
   $45 = HEAP32[$__b >> 2] | 0;
   break;
  } else $45 = $33; while (0);
  $46 = ($45 | 0) == 0;
  $47 = HEAP32[$__e >> 2] | 0;
  do if (!$47) label = 28; else {
   if ((HEAP32[$47 + 12 >> 2] | 0) != (HEAP32[$47 + 16 >> 2] | 0)) if ($46) {
    $742 = $47;
    break;
   } else {
    $$lcssa278 = $741;
    $__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 218;
    break L21;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 36 >> 2] & 63]($47) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 28;
    break;
   } else if ($46) {
    $742 = $47;
    break;
   } else {
    $$lcssa278 = $741;
    $__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 218;
    break L21;
   }
  } while (0);
  if ((label | 0) == 28) {
   label = 0;
   if ($46) {
    $$lcssa278 = $741;
    $__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 218;
    break;
   } else $742 = 0;
  }
  L42 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 1:
   {
    if (($__p$0 | 0) == 3) {
     $743 = $741;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $63 = HEAP32[$__b >> 2] | 0;
     $65 = HEAP32[$63 + 12 >> 2] | 0;
     if (($65 | 0) == (HEAP32[$63 + 16 >> 2] | 0)) $$0$i$i52 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$63 >> 2] | 0) + 36 >> 2] & 63]($63) | 0; else $$0$i$i52 = HEAPU8[$65 >> 0] | 0;
     if (($$0$i$i52 & 255) << 24 >> 24 <= -1) {
      label = 42;
      break L21;
     }
     if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i52 << 24 >> 24 << 1) >> 1] & 8192)) {
      label = 42;
      break L21;
     }
     $82 = HEAP32[$__b >> 2] | 0;
     $83 = $82 + 12 | 0;
     $84 = HEAP32[$83 >> 2] | 0;
     if (($84 | 0) == (HEAP32[$82 + 16 >> 2] | 0)) $$0$i$i54 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$82 >> 2] | 0) + 40 >> 2] & 63]($82) | 0; else {
      HEAP32[$83 >> 2] = $84 + 1;
      $$0$i$i54 = HEAPU8[$84 >> 0] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i54 & 255);
     $$pre$i2$i$i60 = $742;
     $113 = $742;
     label = 44;
    }
    break;
   }
  case 0:
   {
    if (($__p$0 | 0) == 3) {
     $743 = $741;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $$pre$i2$i$i60 = $742;
     $113 = $742;
     label = 44;
    }
    break;
   }
  case 3:
   {
    $159 = HEAP8[$__psn >> 0] | 0;
    $165 = ($159 & 1) == 0 ? ($159 & 255) >>> 1 : HEAP32[$16 >> 2] | 0;
    $166 = HEAP8[$__nsn >> 0] | 0;
    $172 = ($166 & 1) == 0 ? ($166 & 255) >>> 1 : HEAP32[$17 >> 2] | 0;
    if (($165 | 0) == (0 - $172 | 0)) {
     $743 = $741;
     $__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $175 = ($165 | 0) == 0;
     $177 = HEAP32[$__b >> 2] | 0;
     $179 = HEAP32[$177 + 12 >> 2] | 0;
     $181 = HEAP32[$177 + 16 >> 2] | 0;
     $182 = ($179 | 0) == ($181 | 0);
     if ($175 | ($172 | 0) == 0) {
      if ($182) $$0$i$i102 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$177 >> 2] | 0) + 36 >> 2] & 63]($177) | 0; else $$0$i$i102 = HEAPU8[$179 >> 0] | 0;
      $189 = $$0$i$i102 & 255;
      if ($175) {
       if ($189 << 24 >> 24 != (HEAP8[((HEAP8[$__nsn >> 0] & 1) == 0 ? $19 : HEAP32[$18 >> 2] | 0) >> 0] | 0)) {
        $743 = $741;
        $__trailing_sign$1 = $__trailing_sign$0;
        break L42;
       }
       $222 = HEAP32[$__b >> 2] | 0;
       $223 = $222 + 12 | 0;
       $224 = HEAP32[$223 >> 2] | 0;
       if (($224 | 0) == (HEAP32[$222 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$222 >> 2] | 0) + 40 >> 2] & 63]($222) | 0; else HEAP32[$223 >> 2] = $224 + 1;
       HEAP8[$__neg >> 0] = 1;
       $232 = HEAP8[$__nsn >> 0] | 0;
       $743 = $741;
       $__trailing_sign$1 = (($232 & 1) == 0 ? ($232 & 255) >>> 1 : HEAP32[$17 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
       break L42;
      }
      if ($189 << 24 >> 24 != (HEAP8[((HEAP8[$__psn >> 0] & 1) == 0 ? $21 : HEAP32[$20 >> 2] | 0) >> 0] | 0)) {
       HEAP8[$__neg >> 0] = 1;
       $743 = $741;
       $__trailing_sign$1 = $__trailing_sign$0;
       break L42;
      }
      $197 = HEAP32[$__b >> 2] | 0;
      $198 = $197 + 12 | 0;
      $199 = HEAP32[$198 >> 2] | 0;
      if (($199 | 0) == (HEAP32[$197 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$197 >> 2] | 0) + 40 >> 2] & 63]($197) | 0; else HEAP32[$198 >> 2] = $199 + 1;
      $207 = HEAP8[$__psn >> 0] | 0;
      $743 = $741;
      $__trailing_sign$1 = (($207 & 1) == 0 ? ($207 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L42;
     }
     if ($182) {
      $243 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$177 >> 2] | 0) + 36 >> 2] & 63]($177) | 0;
      $$pre222 = HEAP32[$__b >> 2] | 0;
      $$0$i$i110 = $243;
      $248 = HEAP8[$__psn >> 0] | 0;
      $255 = $$pre222;
      $256 = HEAP32[$$pre222 + 12 >> 2] | 0;
      $258 = HEAP32[$$pre222 + 16 >> 2] | 0;
     } else {
      $$0$i$i110 = HEAPU8[$179 >> 0] | 0;
      $248 = $159;
      $255 = $177;
      $256 = $179;
      $258 = $181;
     }
     $254 = $255 + 12 | 0;
     $257 = ($256 | 0) == ($258 | 0);
     if (($$0$i$i110 & 255) << 24 >> 24 == (HEAP8[(($248 & 1) == 0 ? $21 : HEAP32[$20 >> 2] | 0) >> 0] | 0)) {
      if ($257) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$255 >> 2] | 0) + 40 >> 2] & 63]($255) | 0; else HEAP32[$254 >> 2] = $256 + 1;
      $263 = HEAP8[$__psn >> 0] | 0;
      $743 = $741;
      $__trailing_sign$1 = (($263 & 1) == 0 ? ($263 & 255) >>> 1 : HEAP32[$16 >> 2] | 0) >>> 0 > 1 ? $__psn : $__trailing_sign$0;
      break L42;
     }
     if ($257) $$0$i$i120 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$255 >> 2] | 0) + 36 >> 2] & 63]($255) | 0; else $$0$i$i120 = HEAPU8[$256 >> 0] | 0;
     if (($$0$i$i120 & 255) << 24 >> 24 != (HEAP8[((HEAP8[$__nsn >> 0] & 1) == 0 ? $19 : HEAP32[$18 >> 2] | 0) >> 0] | 0)) {
      label = 98;
      break L21;
     }
     $285 = HEAP32[$__b >> 2] | 0;
     $286 = $285 + 12 | 0;
     $287 = HEAP32[$286 >> 2] | 0;
     if (($287 | 0) == (HEAP32[$285 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$285 >> 2] | 0) + 40 >> 2] & 63]($285) | 0; else HEAP32[$286 >> 2] = $287 + 1;
     HEAP8[$__neg >> 0] = 1;
     $295 = HEAP8[$__nsn >> 0] | 0;
     $743 = $741;
     $__trailing_sign$1 = (($295 & 1) == 0 ? ($295 & 255) >>> 1 : HEAP32[$17 >> 2] | 0) >>> 0 > 1 ? $__nsn : $__trailing_sign$0;
    }
    break;
   }
  case 2:
   {
    if (!($__p$0 >>> 0 < 2 | ($__trailing_sign$0 | 0) != 0)) if (!($23 | ($__p$0 | 0) == 2 & (HEAP8[$30 >> 0] | 0) != 0)) {
     $743 = $741;
     $__trailing_sign$1 = 0;
     break L42;
    }
    $311 = HEAP8[$__sym >> 0] | 0;
    $313 = ($311 & 1) == 0;
    $314 = HEAP32[$24 >> 2] | 0;
    $315 = $313 ? $25 : $314;
    $316 = $315;
    L104 : do if (!$__p$0) {
     $$pre$i2$i$i143 = $742;
     $359 = $311;
     $364 = $314;
     $384 = $742;
     $__sym_curr_char$sroa$0$0 = $316;
    } else if ((HEAPU8[$__pat + ($__p$0 + -1) >> 0] | 0) < 2) {
     $325 = $315 + ($313 ? ($311 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0;
     $__sym_space_end$sroa$0$0 = $316;
     while (1) {
      $326 = $__sym_space_end$sroa$0$0;
      if (($326 | 0) == ($325 | 0)) {
       $__sym_space_end$sroa$0$0$lcssa = $__sym_space_end$sroa$0$0;
       break;
      }
      $328 = HEAP8[$326 >> 0] | 0;
      if ($328 << 24 >> 24 <= -1) {
       $__sym_space_end$sroa$0$0$lcssa = $__sym_space_end$sroa$0$0;
       break;
      }
      if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($328 << 24 >> 24 << 1) >> 1] & 8192)) {
       $__sym_space_end$sroa$0$0$lcssa = $__sym_space_end$sroa$0$0;
       break;
      }
      $__sym_space_end$sroa$0$0 = $326 + 1 | 0;
     }
     $337 = $__sym_space_end$sroa$0$0$lcssa - $316 | 0;
     $338 = HEAP8[$__spaces >> 0] | 0;
     $340 = ($338 & 1) == 0;
     $344 = $340 ? ($338 & 255) >>> 1 : HEAP32[$27 >> 2] | 0;
     if ($337 >>> 0 > $344 >>> 0) {
      $$pre$i2$i$i143 = $742;
      $359 = $311;
      $364 = $314;
      $384 = $742;
      $__sym_curr_char$sroa$0$0 = $316;
     } else {
      $348 = ($340 ? $29 : HEAP32[$28 >> 2] | 0) + $344 | 0;
      $$sink = $315;
      $351 = $348 + (0 - $337) | 0;
      while (1) {
       if (($351 | 0) == ($348 | 0)) {
        $$pre$i2$i$i143 = $742;
        $359 = $311;
        $364 = $314;
        $384 = $742;
        $__sym_curr_char$sroa$0$0 = $__sym_space_end$sroa$0$0$lcssa;
        break L104;
       }
       if ((HEAP8[$351 >> 0] | 0) != (HEAP8[$$sink >> 0] | 0)) {
        $$pre$i2$i$i143 = $742;
        $359 = $311;
        $364 = $314;
        $384 = $742;
        $__sym_curr_char$sroa$0$0 = $316;
        break L104;
       }
       $$sink = $$sink + 1 | 0;
       $351 = $351 + 1 | 0;
      }
     }
    } else {
     $$pre$i2$i$i143 = $742;
     $359 = $311;
     $364 = $314;
     $384 = $742;
     $__sym_curr_char$sroa$0$0 = $316;
    } while (0);
    L118 : while (1) {
     $360 = ($359 & 1) == 0;
     $367 = ($360 ? $25 : $364) + ($360 ? ($359 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0;
     $368 = $__sym_curr_char$sroa$0$0;
     if (($368 | 0) == ($367 | 0)) {
      $$lcssa = $367;
      break;
     }
     $370 = HEAP32[$__b >> 2] | 0;
     do if (!$370) $382 = 0; else if ((HEAP32[$370 + 12 >> 2] | 0) == (HEAP32[$370 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$370 >> 2] | 0) + 36 >> 2] & 63]($370) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $382 = 0;
      break;
     } else {
      $382 = HEAP32[$__b >> 2] | 0;
      break;
     } else $382 = $370; while (0);
     $383 = ($382 | 0) == 0;
     do if (!$384) {
      $$pre$i2$i$i143219 = $$pre$i2$i$i143;
      label = 124;
     } else {
      if ((HEAP32[$384 + 12 >> 2] | 0) != (HEAP32[$384 + 16 >> 2] | 0)) if ($383) {
       $$pre$i2$i$i143218 = $$pre$i2$i$i143;
       $745 = $384;
       break;
      } else {
       $$lcssa = $368;
       break L118;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$384 >> 2] | 0) + 36 >> 2] & 63]($384) | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i2$i$i143219 = 0;
       label = 124;
       break;
      } else if ($383 ^ ($$pre$i2$i$i143 | 0) == 0) {
       $$pre$i2$i$i143218 = $$pre$i2$i$i143;
       $745 = $$pre$i2$i$i143;
       break;
      } else {
       $$lcssa = $368;
       break L118;
      }
     } while (0);
     if ((label | 0) == 124) {
      label = 0;
      if ($383) {
       $$lcssa = $368;
       break;
      } else {
       $$pre$i2$i$i143218 = $$pre$i2$i$i143219;
       $745 = 0;
      }
     }
     $397 = HEAP32[$__b >> 2] | 0;
     $399 = HEAP32[$397 + 12 >> 2] | 0;
     if (($399 | 0) == (HEAP32[$397 + 16 >> 2] | 0)) $$0$i$i135 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$397 >> 2] | 0) + 36 >> 2] & 63]($397) | 0; else $$0$i$i135 = HEAPU8[$399 >> 0] | 0;
     if (($$0$i$i135 & 255) << 24 >> 24 != (HEAP8[$368 >> 0] | 0)) {
      $$lcssa = $368;
      break;
     }
     $412 = HEAP32[$__b >> 2] | 0;
     $413 = $412 + 12 | 0;
     $414 = HEAP32[$413 >> 2] | 0;
     if (($414 | 0) == (HEAP32[$412 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$412 >> 2] | 0) + 40 >> 2] & 63]($412) | 0; else HEAP32[$413 >> 2] = $414 + 1;
     $$pre$i2$i$i143 = $$pre$i2$i$i143218;
     $359 = HEAP8[$__sym >> 0] | 0;
     $364 = HEAP32[$24 >> 2] | 0;
     $384 = $745;
     $__sym_curr_char$sroa$0$0 = $368 + 1 | 0;
    }
    if ($23) {
     $424 = HEAP8[$__sym >> 0] | 0;
     $426 = ($424 & 1) == 0;
     if (($$lcssa | 0) == (($426 ? $25 : HEAP32[$24 >> 2] | 0) + ($426 ? ($424 & 255) >>> 1 : HEAP32[$26 >> 2] | 0) | 0)) {
      $743 = $741;
      $__trailing_sign$1 = $__trailing_sign$0;
     } else {
      label = 136;
      break L21;
     }
    } else {
     $743 = $741;
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
  case 4:
   {
    $62 = HEAP8[$__ts >> 0] | 0;
    $$pre$i2$i$i128 = $742;
    $451 = $742;
    $500 = $741;
    $__ng$0 = 0;
    L151 : while (1) {
     $437 = HEAP32[$__b >> 2] | 0;
     do if (!$437) $449 = 0; else if ((HEAP32[$437 + 12 >> 2] | 0) == (HEAP32[$437 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$437 >> 2] | 0) + 36 >> 2] & 63]($437) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $449 = 0;
      break;
     } else {
      $449 = HEAP32[$__b >> 2] | 0;
      break;
     } else $449 = $437; while (0);
     $450 = ($449 | 0) == 0;
     do if (!$451) {
      $$pre$i2$i$i128209 = $$pre$i2$i$i128;
      label = 147;
     } else {
      if ((HEAP32[$451 + 12 >> 2] | 0) != (HEAP32[$451 + 16 >> 2] | 0)) if ($450) {
       $$pre$i2$i$i128211 = $$pre$i2$i$i128;
       $746 = $451;
       break;
      } else {
       $$lcssa277 = $500;
       $$pre$i2$i$i98 = $$pre$i2$i$i128;
       $__ng$0$lcssa = $__ng$0;
       break L151;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$451 >> 2] | 0) + 36 >> 2] & 63]($451) | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i2$i$i128209 = 0;
       label = 147;
       break;
      } else if ($450 ^ ($$pre$i2$i$i128 | 0) == 0) {
       $$pre$i2$i$i128211 = $$pre$i2$i$i128;
       $746 = $$pre$i2$i$i128;
       break;
      } else {
       $$lcssa277 = $500;
       $$pre$i2$i$i98 = $$pre$i2$i$i128;
       $__ng$0$lcssa = $__ng$0;
       break L151;
      }
     } while (0);
     if ((label | 0) == 147) {
      label = 0;
      if ($450) {
       $$lcssa277 = $500;
       $$pre$i2$i$i98 = $$pre$i2$i$i128209;
       $__ng$0$lcssa = $__ng$0;
       break;
      } else {
       $$pre$i2$i$i128211 = $$pre$i2$i$i128209;
       $746 = 0;
      }
     }
     $464 = HEAP32[$__b >> 2] | 0;
     $466 = HEAP32[$464 + 12 >> 2] | 0;
     if (($466 | 0) == (HEAP32[$464 + 16 >> 2] | 0)) $$0$i$i118 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$464 >> 2] | 0) + 36 >> 2] & 63]($464) | 0; else $$0$i$i118 = HEAPU8[$466 >> 0] | 0;
     $476 = $$0$i$i118 & 255;
     if ($476 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i118 << 24 >> 24 << 1) >> 1] & 2048)) label = 157; else {
      $483 = HEAP32[$__wn >> 2] | 0;
      if (($483 | 0) == (HEAP32[$0 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
       $487 = HEAP32[$__wn >> 2] | 0;
      } else $487 = $483;
      HEAP32[$__wn >> 2] = $487 + 1;
      HEAP8[$487 >> 0] = $476;
      $747 = $500;
      $__ng$2$ph = $__ng$0 + 1 | 0;
     } else label = 157;
     if ((label | 0) == 157) {
      label = 0;
      $489 = HEAP8[$__grp >> 0] | 0;
      if (!($476 << 24 >> 24 == $62 << 24 >> 24 & ($__ng$0 | 0 ? ((($489 & 1) == 0 ? ($489 & 255) >>> 1 : HEAP32[$31 >> 2] | 0) | 0) != 0 : 0))) {
       $$lcssa277 = $500;
       $$pre$i2$i$i98 = $$pre$i2$i$i128211;
       $__ng$0$lcssa = $__ng$0;
       break;
      }
      if (($500 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $503 = HEAP32[$__gn >> 2] | 0;
      } else $503 = $500;
      $502 = $503 + 4 | 0;
      HEAP32[$__gn >> 2] = $502;
      HEAP32[$503 >> 2] = $__ng$0;
      $747 = $502;
      $__ng$2$ph = 0;
     }
     $504 = HEAP32[$__b >> 2] | 0;
     $505 = $504 + 12 | 0;
     $506 = HEAP32[$505 >> 2] | 0;
     if (($506 | 0) == (HEAP32[$504 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$504 >> 2] | 0) + 40 >> 2] & 63]($504) | 0;
      $$pre$i2$i$i128 = $$pre$i2$i$i128211;
      $451 = $746;
      $500 = $747;
      $__ng$0 = $__ng$2$ph;
      continue;
     } else {
      HEAP32[$505 >> 2] = $506 + 1;
      $$pre$i2$i$i128 = $$pre$i2$i$i128211;
      $451 = $746;
      $500 = $747;
      $__ng$0 = $__ng$2$ph;
      continue;
     }
    }
    if ($__ng$0$lcssa | 0 ? (HEAP32[$__gb >> 2] | 0) != ($$lcssa277 | 0) : 0) {
     if (($$lcssa277 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $520 = HEAP32[$__gn >> 2] | 0;
     } else $520 = $$lcssa277;
     $519 = $520 + 4 | 0;
     HEAP32[$__gn >> 2] = $519;
     HEAP32[$520 >> 2] = $__ng$0$lcssa;
     $748 = $519;
    } else $748 = $$lcssa277;
    $521 = HEAP32[$__fd >> 2] | 0;
    L198 : do if (($521 | 0) > 0) {
     $523 = HEAP32[$__b >> 2] | 0;
     do if (!$523) $535 = 0; else if ((HEAP32[$523 + 12 >> 2] | 0) == (HEAP32[$523 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$523 >> 2] | 0) + 36 >> 2] & 63]($523) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $535 = 0;
      break;
     } else {
      $535 = HEAP32[$__b >> 2] | 0;
      break;
     } else $535 = $523; while (0);
     $536 = ($535 | 0) == 0;
     do if (!$$pre$i2$i$i98) label = 179; else {
      if ((HEAP32[$$pre$i2$i$i98 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i98 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i98 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i98) | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       label = 179;
       break;
      }
      if ($536) $749 = $$pre$i2$i$i98; else {
       label = 184;
       break L21;
      }
     } while (0);
     if ((label | 0) == 179) {
      label = 0;
      if ($536) {
       label = 184;
       break L21;
      } else $749 = 0;
     }
     $548 = HEAP32[$__b >> 2] | 0;
     $550 = HEAP32[$548 + 12 >> 2] | 0;
     if (($550 | 0) == (HEAP32[$548 + 16 >> 2] | 0)) $$0$i$i90 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$548 >> 2] | 0) + 36 >> 2] & 63]($548) | 0; else $$0$i$i90 = HEAPU8[$550 >> 0] | 0;
     if (($$0$i$i90 & 255) << 24 >> 24 != (HEAP8[$__dp >> 0] | 0)) {
      label = 184;
      break L21;
     }
     $565 = HEAP32[$__b >> 2] | 0;
     $566 = $565 + 12 | 0;
     $567 = HEAP32[$566 >> 2] | 0;
     if (($567 | 0) == (HEAP32[$565 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$565 >> 2] | 0) + 40 >> 2] & 63]($565) | 0;
      $$pre$i2$i$i82 = $749;
      $575 = $521;
      $591 = $749;
     } else {
      HEAP32[$566 >> 2] = $567 + 1;
      $$pre$i2$i$i82 = $749;
      $575 = $521;
      $591 = $749;
     }
     while (1) {
      if (($575 | 0) <= 0) break L198;
      $577 = HEAP32[$__b >> 2] | 0;
      do if (!$577) $589 = 0; else if ((HEAP32[$577 + 12 >> 2] | 0) == (HEAP32[$577 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$577 >> 2] | 0) + 36 >> 2] & 63]($577) | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $589 = 0;
       break;
      } else {
       $589 = HEAP32[$__b >> 2] | 0;
       break;
      } else $589 = $577; while (0);
      $590 = ($589 | 0) == 0;
      do if (!$591) {
       $$pre$i2$i$i82214$ph = $$pre$i2$i$i82;
       label = 199;
      } else {
       if ((HEAP32[$591 + 12 >> 2] | 0) != (HEAP32[$591 + 16 >> 2] | 0)) if ($590) {
        $$pre$i2$i$i82214231 = $$pre$i2$i$i82;
        $750 = $591;
        break;
       } else {
        label = 206;
        break L21;
       }
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$591 >> 2] | 0) + 36 >> 2] & 63]($591) | 0) == -1) {
        HEAP32[$__e >> 2] = 0;
        $$pre$i2$i$i82214$ph = 0;
        label = 199;
        break;
       } else if ($590 ^ ($$pre$i2$i$i82 | 0) == 0) {
        $$pre$i2$i$i82214231 = $$pre$i2$i$i82;
        $750 = $$pre$i2$i$i82;
        break;
       } else {
        label = 206;
        break L21;
       }
      } while (0);
      if ((label | 0) == 199) {
       label = 0;
       if ($590) {
        label = 206;
        break L21;
       } else {
        $$pre$i2$i$i82214231 = $$pre$i2$i$i82214$ph;
        $750 = 0;
       }
      }
      $604 = HEAP32[$__b >> 2] | 0;
      $606 = HEAP32[$604 + 12 >> 2] | 0;
      if (($606 | 0) == (HEAP32[$604 + 16 >> 2] | 0)) $$0$i$i74 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$604 >> 2] | 0) + 36 >> 2] & 63]($604) | 0; else $$0$i$i74 = HEAPU8[$606 >> 0] | 0;
      if (($$0$i$i74 & 255) << 24 >> 24 <= -1) {
       label = 206;
       break L21;
      }
      if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i74 << 24 >> 24 << 1) >> 1] & 2048)) {
       label = 206;
       break L21;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$0 >> 2] | 0)) __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
      $628 = HEAP32[$__b >> 2] | 0;
      $630 = HEAP32[$628 + 12 >> 2] | 0;
      if (($630 | 0) == (HEAP32[$628 + 16 >> 2] | 0)) $$0$i$i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$628 >> 2] | 0) + 36 >> 2] & 63]($628) | 0; else $$0$i$i42 = HEAPU8[$630 >> 0] | 0;
      $641 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $641 + 1;
      HEAP8[$641 >> 0] = $$0$i$i42;
      $643 = $575 + -1 | 0;
      HEAP32[$__fd >> 2] = $643;
      $644 = HEAP32[$__b >> 2] | 0;
      $645 = $644 + 12 | 0;
      $646 = HEAP32[$645 >> 2] | 0;
      if (($646 | 0) == (HEAP32[$644 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[$644 >> 2] | 0) + 40 >> 2] & 63]($644) | 0;
       $$pre$i2$i$i82 = $$pre$i2$i$i82214231;
       $575 = $643;
       $591 = $750;
       continue;
      } else {
       HEAP32[$645 >> 2] = $646 + 1;
       $$pre$i2$i$i82 = $$pre$i2$i$i82214231;
       $575 = $643;
       $591 = $750;
       continue;
      }
     }
    } while (0);
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 216;
     break L21;
    } else {
     $743 = $748;
     $__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
  default:
   {
    $743 = $741;
    $__trailing_sign$1 = $__trailing_sign$0;
   }
  } while (0);
  L262 : do if ((label | 0) == 44) while (1) {
   label = 0;
   $99 = HEAP32[$__b >> 2] | 0;
   do if (!$99) $111 = 0; else if ((HEAP32[$99 + 12 >> 2] | 0) == (HEAP32[$99 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] & 63]($99) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $111 = 0;
    break;
   } else {
    $111 = HEAP32[$__b >> 2] | 0;
    break;
   } else $111 = $99; while (0);
   $112 = ($111 | 0) == 0;
   do if (!$113) {
    $$pre$i2$i$i60226 = $$pre$i2$i$i60;
    label = 54;
   } else {
    if ((HEAP32[$113 + 12 >> 2] | 0) != (HEAP32[$113 + 16 >> 2] | 0)) if ($112) {
     $$pre$i2$i$i60228 = $$pre$i2$i$i60;
     $744 = $113;
     break;
    } else {
     $743 = $741;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L262;
    }
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$113 >> 2] | 0) + 36 >> 2] & 63]($113) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$pre$i2$i$i60226 = 0;
     label = 54;
     break;
    } else if ($112 ^ ($$pre$i2$i$i60 | 0) == 0) {
     $$pre$i2$i$i60228 = $$pre$i2$i$i60;
     $744 = $$pre$i2$i$i60;
     break;
    } else {
     $743 = $741;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L262;
    }
   } while (0);
   if ((label | 0) == 54) {
    label = 0;
    if ($112) {
     $743 = $741;
     $__trailing_sign$1 = $__trailing_sign$0;
     break L262;
    } else {
     $$pre$i2$i$i60228 = $$pre$i2$i$i60226;
     $744 = 0;
    }
   }
   $126 = HEAP32[$__b >> 2] | 0;
   $128 = HEAP32[$126 + 12 >> 2] | 0;
   if (($128 | 0) == (HEAP32[$126 + 16 >> 2] | 0)) $$0$i$i64 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$126 >> 2] | 0) + 36 >> 2] & 63]($126) | 0; else $$0$i$i64 = HEAPU8[$128 >> 0] | 0;
   if (($$0$i$i64 & 255) << 24 >> 24 <= -1) {
    $743 = $741;
    $__trailing_sign$1 = $__trailing_sign$0;
    break L262;
   }
   if (!(HEAP16[(HEAP32[$15 >> 2] | 0) + ($$0$i$i64 << 24 >> 24 << 1) >> 1] & 8192)) {
    $743 = $741;
    $__trailing_sign$1 = $__trailing_sign$0;
    break L262;
   }
   $145 = HEAP32[$__b >> 2] | 0;
   $146 = $145 + 12 | 0;
   $147 = HEAP32[$146 >> 2] | 0;
   if (($147 | 0) == (HEAP32[$145 + 16 >> 2] | 0)) $$0$i$i70 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$145 >> 2] | 0) + 40 >> 2] & 63]($145) | 0; else {
    HEAP32[$146 >> 2] = $147 + 1;
    $$0$i$i70 = HEAPU8[$147 >> 0] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i70 & 255);
   $$pre$i2$i$i60 = $$pre$i2$i$i60228;
   $113 = $744;
   label = 44;
  } while (0);
  $741 = $743;
  $__p$0 = $__p$0 + 1 | 0;
  $__trailing_sign$0 = $__trailing_sign$1;
 }
 L294 : do if ((label | 0) == 42) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 98) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 136) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 184) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 206) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 216) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$10 = 0;
 } else if ((label | 0) == 218) {
  L296 : do if ($__trailing_sign$0$lcssa | 0) {
   $661 = $__trailing_sign$0$lcssa + 1 | 0;
   $662 = $__trailing_sign$0$lcssa + 8 | 0;
   $663 = $__trailing_sign$0$lcssa + 4 | 0;
   $__i$0 = 1;
   L298 : while (1) {
    $664 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
    if (!($664 & 1)) $671 = ($664 & 255) >>> 1; else $671 = HEAP32[$663 >> 2] | 0;
    if ($__i$0 >>> 0 >= $671 >>> 0) break L296;
    $672 = HEAP32[$__b >> 2] | 0;
    do if (!$672) $684 = 0; else if ((HEAP32[$672 + 12 >> 2] | 0) == (HEAP32[$672 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$672 >> 2] | 0) + 36 >> 2] & 63]($672) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $684 = 0;
     break;
    } else {
     $684 = HEAP32[$__b >> 2] | 0;
     break;
    } else $684 = $672; while (0);
    $685 = ($684 | 0) == 0;
    $686 = HEAP32[$__e >> 2] | 0;
    do if (!$686) label = 234; else {
     if ((HEAP32[$686 + 12 >> 2] | 0) == (HEAP32[$686 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$686 >> 2] | 0) + 36 >> 2] & 63]($686) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 234;
      break;
     }
     if (!$685) break L298;
    } while (0);
    if ((label | 0) == 234) {
     label = 0;
     if ($685) break;
    }
    $698 = HEAP32[$__b >> 2] | 0;
    $700 = HEAP32[$698 + 12 >> 2] | 0;
    if (($700 | 0) == (HEAP32[$698 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$698 >> 2] | 0) + 36 >> 2] & 63]($698) | 0; else $$0$i$i = HEAPU8[$700 >> 0] | 0;
    if (!(HEAP8[$__trailing_sign$0$lcssa >> 0] & 1)) $716 = $661; else $716 = HEAP32[$662 >> 2] | 0;
    if (($$0$i$i & 255) << 24 >> 24 != (HEAP8[$716 + $__i$0 >> 0] | 0)) break;
    $721 = $__i$0 + 1 | 0;
    $722 = HEAP32[$__b >> 2] | 0;
    $723 = $722 + 12 | 0;
    $724 = HEAP32[$723 >> 2] | 0;
    if (($724 | 0) == (HEAP32[$722 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$722 >> 2] | 0) + 40 >> 2] & 63]($722) | 0;
     $__i$0 = $721;
     continue;
    } else {
     HEAP32[$723 >> 2] = $724 + 1;
     $__i$0 = $721;
     continue;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$10 = 0;
   break L294;
  } while (0);
  $732 = HEAP32[$__gb >> 2] | 0;
  if (($732 | 0) == ($$lcssa278 | 0)) $$10 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $732, $$lcssa278, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) {
    $$10 = 1;
    break;
   } else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $$10 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $738 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($738 | 0) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($738);
 STACKTOP = sp;
 return $$10 | 0;
}

function _vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa386 = 0, $$lcssa40 = 0, $$pre$phi184Z2D = 0, $$size$0 = 0, $0 = 0, $10 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $136 = 0, $14 = 0, $142 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $156 = 0, $160 = 0, $164 = 0, $166 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $180 = 0, $185 = 0, $189 = 0, $194 = 0, $195 = 0, $196 = 0, $198 = 0, $20 = 0, $200 = 0, $201 = 0, $209 = 0, $219 = 0, $221 = 0, $225 = 0, $227 = 0, $235 = 0, $243 = 0, $244 = 0, $247 = 0, $249 = 0, $25 = 0, $255 = 0, $262 = 0, $264 = 0, $270 = 0, $277 = 0, $282 = 0, $283 = 0, $290 = 0, $303 = 0, $307 = 0.0, $32 = 0, $326 = 0, $38 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $61 = 0, $7 = 0, $8 = 0, $81 = 0, $82 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0402 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $base$0 = 0, $c$0102 = 0, $dest$0 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph22 = 0, $i$0$ph22$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigittmp = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0107 = 0, $matches$0107$lcssa = 0, $matches$0107371 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $p$0110 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$398 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0111 = 0, $pos$1 = 0, $pos$2 = 0, $s$0105 = 0, $s$0105$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $scanset = 0, $size$0 = 0, $st = 0, $wc = 0, $wcs$0106 = 0, $wcs$0106$lcssa = 0, $wcs$1 = 0, $wcs$10 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$099 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $ap2$i = sp + 16 | 0;
 $st = sp + 8 | 0;
 $scanset = sp + 33 | 0;
 $wc = sp;
 $0 = sp + 32 | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $326 = ___lockfile($f) | 0; else $326 = 0;
 $5 = HEAP8[$fmt >> 0] | 0;
 L4 : do if (!($5 << 24 >> 24)) $matches$3 = 0; else {
  $7 = $f + 4 | 0;
  $8 = $f + 100 | 0;
  $9 = $f + 108 | 0;
  $10 = $f + 8 | 0;
  $11 = $scanset + 10 | 0;
  $12 = $scanset + 33 | 0;
  $13 = $st + 4 | 0;
  $14 = $scanset + 46 | 0;
  $15 = $scanset + 94 | 0;
  $17 = $5;
  $matches$0107 = 0;
  $p$0110 = $fmt;
  $pos$0111 = 0;
  $s$0105 = 0;
  $wcs$0106 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace($17 & 255) | 0)) {
    $47 = (HEAP8[$p$0110 >> 0] | 0) == 37;
    L10 : do if ($47) {
     $48 = $p$0110 + 1 | 0;
     $49 = HEAP8[$48 >> 0] | 0;
     L12 : do switch ($49 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       $dest$0 = 0;
       $p$2 = $p$0110 + 2 | 0;
       break;
      }
     default:
      {
       $isdigittmp = ($49 & 255) + -48 | 0;
       if ($isdigittmp >>> 0 < 10) if ((HEAP8[$p$0110 + 2 >> 0] | 0) == 36) {
        HEAP32[$ap2$i >> 2] = HEAP32[$ap >> 2];
        $i$0$i = $isdigittmp;
        while (1) {
         $81 = (HEAP32[$ap2$i >> 2] | 0) + (4 - 1) & ~(4 - 1);
         $82 = HEAP32[$81 >> 2] | 0;
         HEAP32[$ap2$i >> 2] = $81 + 4;
         if ($i$0$i >>> 0 > 1) $i$0$i = $i$0$i + -1 | 0; else {
          $$lcssa = $82;
          break;
         }
        }
        $dest$0 = $$lcssa;
        $p$2 = $p$0110 + 3 | 0;
        break L12;
       }
       $90 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $91 = HEAP32[$90 >> 2] | 0;
       HEAP32[$ap >> 2] = $90 + 4;
       $dest$0 = $91;
       $p$2 = $48;
      }
     } while (0);
     $92 = HEAP8[$p$2 >> 0] | 0;
     $93 = $92 & 255;
     if (($93 + -48 | 0) >>> 0 < 10) {
      $97 = $93;
      $p$398 = $p$2;
      $width$099 = 0;
      while (1) {
       $96 = ($width$099 * 10 | 0) + -48 + $97 | 0;
       $98 = $p$398 + 1 | 0;
       $99 = HEAP8[$98 >> 0] | 0;
       $97 = $99 & 255;
       if (($97 + -48 | 0) >>> 0 >= 10) {
        $$lcssa40 = $99;
        $p$3$lcssa = $98;
        $width$0$lcssa = $96;
        break;
       } else {
        $p$398 = $98;
        $width$099 = $96;
       }
      }
     } else {
      $$lcssa40 = $92;
      $p$3$lcssa = $p$2;
      $width$0$lcssa = 0;
     }
     if ($$lcssa40 << 24 >> 24 == 109) {
      $104 = $p$3$lcssa + 1 | 0;
      $107 = HEAP8[$104 >> 0] | 0;
      $alloc$0 = ($dest$0 | 0) != 0 & 1;
      $p$4 = $104;
      $s$1 = 0;
      $wcs$1 = 0;
     } else {
      $107 = $$lcssa40;
      $alloc$0 = 0;
      $p$4 = $p$3$lcssa;
      $s$1 = $s$0105;
      $wcs$1 = $wcs$0106;
     }
     $105 = $p$4 + 1 | 0;
     switch ($107 & 255 | 0) {
     case 104:
      {
       $109 = (HEAP8[$105 >> 0] | 0) == 104;
       $p$5 = $109 ? $p$4 + 2 | 0 : $105;
       $size$0 = $109 ? -2 : -1;
       break;
      }
     case 108:
      {
       $112 = (HEAP8[$105 >> 0] | 0) == 108;
       $p$5 = $112 ? $p$4 + 2 | 0 : $105;
       $size$0 = $112 ? 3 : 1;
       break;
      }
     case 106:
      {
       $p$5 = $105;
       $size$0 = 3;
       break;
      }
     case 116:
     case 122:
      {
       $p$5 = $105;
       $size$0 = 1;
       break;
      }
     case 76:
      {
       $p$5 = $105;
       $size$0 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $p$5 = $p$4;
       $size$0 = 0;
       break;
      }
     default:
      {
       $alloc$0402 = $alloc$0;
       $matches$0107371 = $matches$0107;
       $s$7 = $s$1;
       $wcs$8 = $wcs$1;
       label = 154;
       break L6;
      }
     }
     $115 = HEAPU8[$p$5 >> 0] | 0;
     $117 = ($115 & 47 | 0) == 3;
     $$ = $117 ? $115 | 32 : $115;
     $$size$0 = $117 ? 1 : $size$0;
     switch ($$ | 0) {
     case 99:
      {
       $pos$1 = $pos$0111;
       $width$1 = ($width$0$lcssa | 0) < 1 ? 1 : $width$0$lcssa;
       break;
      }
     case 91:
      {
       $pos$1 = $pos$0111;
       $width$1 = $width$0$lcssa;
       break;
      }
     case 110:
      {
       if (!$dest$0) {
        $matches$1 = $matches$0107;
        $p$11 = $p$5;
        $pos$2 = $pos$0111;
        $s$6 = $s$1;
        $wcs$7 = $wcs$1;
        break L8;
       }
       switch ($$size$0 | 0) {
       case -2:
        {
         HEAP8[$dest$0 >> 0] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case -1:
        {
         HEAP16[$dest$0 >> 1] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case 0:
        {
         HEAP32[$dest$0 >> 2] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case 1:
        {
         HEAP32[$dest$0 >> 2] = $pos$0111;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       case 3:
        {
         $125 = $dest$0;
         HEAP32[$125 >> 2] = $pos$0111;
         HEAP32[$125 + 4 >> 2] = (($pos$0111 | 0) < 0) << 31 >> 31;
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
         break;
        }
       default:
        {
         $matches$1 = $matches$0107;
         $p$11 = $p$5;
         $pos$2 = $pos$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         break L8;
        }
       }
       break;
      }
     default:
      {
       ___shlim($f, 0);
       do {
        $129 = HEAP32[$7 >> 2] | 0;
        if ($129 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
         HEAP32[$7 >> 2] = $129 + 1;
         $136 = HEAPU8[$129 >> 0] | 0;
        } else $136 = ___shgetc($f) | 0;
       } while ((_isspace($136) | 0) != 0);
       if (!(HEAP32[$8 >> 2] | 0)) $148 = HEAP32[$7 >> 2] | 0; else {
        $142 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
        HEAP32[$7 >> 2] = $142;
        $148 = $142;
       }
       $pos$1 = (HEAP32[$9 >> 2] | 0) + $pos$0111 + $148 - (HEAP32[$10 >> 2] | 0) | 0;
       $width$1 = $width$0$lcssa;
      }
     }
     ___shlim($f, $width$1);
     $150 = HEAP32[$7 >> 2] | 0;
     $151 = HEAP32[$8 >> 2] | 0;
     if ($150 >>> 0 < $151 >>> 0) {
      HEAP32[$7 >> 2] = $150 + 1;
      $156 = $151;
     } else {
      if ((___shgetc($f) | 0) < 0) {
       $alloc$0402 = $alloc$0;
       $matches$0107371 = $matches$0107;
       $s$7 = $s$1;
       $wcs$8 = $wcs$1;
       label = 154;
       break L6;
      }
      $156 = HEAP32[$8 >> 2] | 0;
     }
     if ($156 | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
     L68 : do switch ($$ | 0) {
     case 91:
     case 99:
     case 115:
      {
       $160 = ($$ | 0) == 99;
       L70 : do if (($$ | 16 | 0) == 115) {
        _memset($scanset | 0, -1, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        if (($$ | 0) == 115) {
         HEAP8[$12 >> 0] = 0;
         HEAP8[$11 >> 0] = 0;
         HEAP8[$11 + 1 >> 0] = 0;
         HEAP8[$11 + 2 >> 0] = 0;
         HEAP8[$11 + 3 >> 0] = 0;
         HEAP8[$11 + 4 >> 0] = 0;
         $p$9 = $p$5;
        } else $p$9 = $p$5;
       } else {
        $164 = $p$5 + 1 | 0;
        $166 = (HEAP8[$164 >> 0] | 0) == 94;
        $invert$0 = $166 & 1;
        $p$6 = $166 ? $p$5 + 2 | 0 : $164;
        _memset($scanset | 0, $166 & 1 | 0, 257) | 0;
        HEAP8[$scanset >> 0] = 0;
        switch (HEAP8[$p$6 >> 0] | 0) {
        case 45:
         {
          $172 = ($invert$0 ^ 1) & 255;
          HEAP8[$14 >> 0] = $172;
          $$pre$phi184Z2D = $172;
          $p$7$ph = $p$6 + 1 | 0;
          break;
         }
        case 93:
         {
          $175 = ($invert$0 ^ 1) & 255;
          HEAP8[$15 >> 0] = $175;
          $$pre$phi184Z2D = $175;
          $p$7$ph = $p$6 + 1 | 0;
          break;
         }
        default:
         {
          $$pre$phi184Z2D = ($invert$0 ^ 1) & 255;
          $p$7$ph = $p$6;
         }
        }
        $p$7 = $p$7$ph;
        while (1) {
         $176 = HEAP8[$p$7 >> 0] | 0;
         L81 : do switch ($176 << 24 >> 24) {
         case 0:
          {
           $alloc$0402 = $alloc$0;
           $matches$0107371 = $matches$0107;
           $s$7 = $s$1;
           $wcs$8 = $wcs$1;
           label = 154;
           break L6;
           break;
          }
         case 93:
          {
           $p$9 = $p$7;
           break L70;
           break;
          }
         case 45:
          {
           $177 = $p$7 + 1 | 0;
           $178 = HEAP8[$177 >> 0] | 0;
           switch ($178 << 24 >> 24) {
           case 93:
           case 0:
            {
             $189 = 45;
             $p$8 = $p$7;
             break L81;
             break;
            }
           default:
            {}
           }
           $180 = HEAP8[$p$7 + -1 >> 0] | 0;
           if (($180 & 255) < ($178 & 255)) {
            $c$0102 = $180 & 255;
            do {
             $c$0102 = $c$0102 + 1 | 0;
             HEAP8[$scanset + $c$0102 >> 0] = $$pre$phi184Z2D;
             $185 = HEAP8[$177 >> 0] | 0;
            } while (($c$0102 | 0) < ($185 & 255 | 0));
            $189 = $185;
            $p$8 = $177;
           } else {
            $189 = $178;
            $p$8 = $177;
           }
           break;
          }
         default:
          {
           $189 = $176;
           $p$8 = $p$7;
          }
         } while (0);
         HEAP8[$scanset + (($189 & 255) + 1) >> 0] = $$pre$phi184Z2D;
         $p$7 = $p$8 + 1 | 0;
        }
       } while (0);
       $194 = $160 ? $width$1 + 1 | 0 : 31;
       $195 = ($$size$0 | 0) == 1;
       $196 = ($alloc$0 | 0) != 0;
       L89 : do if ($195) {
        if ($196) {
         $198 = _malloc($194 << 2) | 0;
         if (!$198) {
          $alloc$0402 = $alloc$0;
          $matches$0107371 = $matches$0107;
          $s$7 = 0;
          $wcs$8 = $198;
          label = 154;
          break L6;
         } else $wcs$2 = $198;
        } else $wcs$2 = $dest$0;
        HEAP32[$st >> 2] = 0;
        HEAP32[$13 >> 2] = 0;
        $i$0$ph = 0;
        $k$0$ph = $194;
        $wcs$3$ph = $wcs$2;
        L95 : while (1) {
         $200 = ($wcs$3$ph | 0) == 0;
         $i$0$ph22 = $i$0$ph;
         while (1) {
          L99 : while (1) {
           $201 = HEAP32[$7 >> 2] | 0;
           if ($201 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
            HEAP32[$7 >> 2] = $201 + 1;
            $209 = HEAPU8[$201 >> 0] | 0;
           } else $209 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($209 + 1) >> 0] | 0)) {
            $i$0$ph22$lcssa = $i$0$ph22;
            $wcs$3$ph$lcssa = $wcs$3$ph;
            break L95;
           }
           HEAP8[$0 >> 0] = $209;
           switch (_mbrtowc($wc, $0, 1, $st) | 0) {
           case -1:
            {
             $alloc$0402 = $alloc$0;
             $matches$0107371 = $matches$0107;
             $s$7 = 0;
             $wcs$8 = $wcs$3$ph;
             label = 154;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L99;
           }
          }
          if ($200) $i$1 = $i$0$ph22; else {
           HEAP32[$wcs$3$ph + ($i$0$ph22 << 2) >> 2] = HEAP32[$wc >> 2];
           $i$1 = $i$0$ph22 + 1 | 0;
          }
          if ($196 & ($i$1 | 0) == ($k$0$ph | 0)) break; else $i$0$ph22 = $i$1;
         }
         $219 = $k$0$ph << 1 | 1;
         $221 = _realloc($wcs$3$ph, $219 << 2) | 0;
         if (!$221) {
          $alloc$0402 = $alloc$0;
          $matches$0107371 = $matches$0107;
          $s$7 = 0;
          $wcs$8 = $wcs$3$ph;
          label = 154;
          break L6;
         } else {
          $i$0$ph$phi = $k$0$ph;
          $k$0$ph = $219;
          $wcs$3$ph = $221;
          $i$0$ph = $i$0$ph$phi;
         }
        }
        if (!(_mbsinit($st) | 0)) {
         $alloc$0402 = $alloc$0;
         $matches$0107371 = $matches$0107;
         $s$7 = 0;
         $wcs$8 = $wcs$3$ph$lcssa;
         label = 154;
         break L6;
        } else {
         $i$4 = $i$0$ph22$lcssa;
         $s$4 = 0;
         $wcs$5 = $wcs$3$ph$lcssa;
        }
       } else {
        if ($196) {
         $225 = _malloc($194) | 0;
         if (!$225) {
          $alloc$0402 = $alloc$0;
          $matches$0107371 = $matches$0107;
          $s$7 = 0;
          $wcs$8 = 0;
          label = 154;
          break L6;
         } else {
          $i$2$ph = 0;
          $k$1$ph = $194;
          $s$2$ph = $225;
         }
         while (1) {
          $i$2 = $i$2$ph;
          do {
           $227 = HEAP32[$7 >> 2] | 0;
           if ($227 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
            HEAP32[$7 >> 2] = $227 + 1;
            $235 = HEAPU8[$227 >> 0] | 0;
           } else $235 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($235 + 1) >> 0] | 0)) {
            $i$4 = $i$2;
            $s$4 = $s$2$ph;
            $wcs$5 = 0;
            break L89;
           }
           HEAP8[$s$2$ph + $i$2 >> 0] = $235;
           $i$2 = $i$2 + 1 | 0;
          } while (($i$2 | 0) != ($k$1$ph | 0));
          $243 = $k$1$ph << 1 | 1;
          $244 = _realloc($s$2$ph, $243) | 0;
          if (!$244) {
           $alloc$0402 = $alloc$0;
           $matches$0107371 = $matches$0107;
           $s$7 = $s$2$ph;
           $wcs$8 = 0;
           label = 154;
           break L6;
          } else {
           $i$2$ph$phi = $k$1$ph;
           $k$1$ph = $243;
           $s$2$ph = $244;
           $i$2$ph = $i$2$ph$phi;
          }
         }
        }
        if (!$dest$0) {
         $264 = $156;
         while (1) {
          $262 = HEAP32[$7 >> 2] | 0;
          if ($262 >>> 0 < $264 >>> 0) {
           HEAP32[$7 >> 2] = $262 + 1;
           $270 = HEAPU8[$262 >> 0] | 0;
          } else $270 = ___shgetc($f) | 0;
          if (!(HEAP8[$scanset + ($270 + 1) >> 0] | 0)) {
           $i$4 = 0;
           $s$4 = 0;
           $wcs$5 = 0;
           break L89;
          }
          $264 = HEAP32[$8 >> 2] | 0;
         }
        } else {
         $249 = $156;
         $i$3 = 0;
         while (1) {
          $247 = HEAP32[$7 >> 2] | 0;
          if ($247 >>> 0 < $249 >>> 0) {
           HEAP32[$7 >> 2] = $247 + 1;
           $255 = HEAPU8[$247 >> 0] | 0;
          } else $255 = ___shgetc($f) | 0;
          if (!(HEAP8[$scanset + ($255 + 1) >> 0] | 0)) {
           $i$4 = $i$3;
           $s$4 = $dest$0;
           $wcs$5 = 0;
           break L89;
          }
          HEAP8[$dest$0 + $i$3 >> 0] = $255;
          $249 = HEAP32[$8 >> 2] | 0;
          $i$3 = $i$3 + 1 | 0;
         }
        }
       } while (0);
       if (!(HEAP32[$8 >> 2] | 0)) $282 = HEAP32[$7 >> 2] | 0; else {
        $277 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
        HEAP32[$7 >> 2] = $277;
        $282 = $277;
       }
       $283 = $282 - (HEAP32[$10 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) | 0;
       if (!$283) {
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0107;
        $s$9 = $s$4;
        $wcs$10 = $wcs$5;
        break L6;
       }
       if (!(($283 | 0) == ($width$1 | 0) | $160 ^ 1)) {
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0107;
        $s$9 = $s$4;
        $wcs$10 = $wcs$5;
        break L6;
       }
       do if ($196) if ($195) {
        HEAP32[$dest$0 >> 2] = $wcs$5;
        break;
       } else {
        HEAP32[$dest$0 >> 2] = $s$4;
        break;
       } while (0);
       if ($160) {
        $p$10 = $p$9;
        $s$5 = $s$4;
        $wcs$6 = $wcs$5;
       } else {
        if ($wcs$5 | 0) HEAP32[$wcs$5 + ($i$4 << 2) >> 2] = 0;
        if (!$s$4) {
         $p$10 = $p$9;
         $s$5 = 0;
         $wcs$6 = $wcs$5;
         break L68;
        }
        HEAP8[$s$4 + $i$4 >> 0] = 0;
        $p$10 = $p$9;
        $s$5 = $s$4;
        $wcs$6 = $wcs$5;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $base$0 = 16;
       label = 136;
       break;
      }
     case 111:
      {
       $base$0 = 8;
       label = 136;
       break;
      }
     case 117:
     case 100:
      {
       $base$0 = 10;
       label = 136;
       break;
      }
     case 105:
      {
       $base$0 = 0;
       label = 136;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $307 = +___floatscan($f, $$size$0, 0);
       if ((HEAP32[$9 >> 2] | 0) == ((HEAP32[$10 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0)) {
        $alloc$2 = $alloc$0;
        $matches$2 = $matches$0107;
        $s$9 = $s$1;
        $wcs$10 = $wcs$1;
        break L6;
       }
       if (!$dest$0) {
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
       } else switch ($$size$0 | 0) {
       case 0:
        {
         HEAPF32[$dest$0 >> 2] = $307;
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
         break;
        }
       case 1:
        {
         HEAPF64[$dest$0 >> 3] = $307;
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
         break;
        }
       case 2:
        {
         HEAPF64[$dest$0 >> 3] = $307;
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
         break;
        }
       default:
        {
         $p$10 = $p$5;
         $s$5 = $s$1;
         $wcs$6 = $wcs$1;
         break L68;
        }
       }
       break;
      }
     default:
      {
       $p$10 = $p$5;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
      }
     } while (0);
     L169 : do if ((label | 0) == 136) {
      label = 0;
      $290 = ___intscan($f, $base$0, 0, -1, -1) | 0;
      if ((HEAP32[$9 >> 2] | 0) == ((HEAP32[$10 >> 2] | 0) - (HEAP32[$7 >> 2] | 0) | 0)) {
       $alloc$2 = $alloc$0;
       $matches$2 = $matches$0107;
       $s$9 = $s$1;
       $wcs$10 = $wcs$1;
       break L6;
      }
      if (($dest$0 | 0) != 0 & ($$ | 0) == 112) {
       HEAP32[$dest$0 >> 2] = $290;
       $p$10 = $p$5;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
       break;
      }
      if (!$dest$0) {
       $p$10 = $p$5;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
      } else switch ($$size$0 | 0) {
      case -2:
       {
        HEAP8[$dest$0 >> 0] = $290;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case -1:
       {
        HEAP16[$dest$0 >> 1] = $290;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case 0:
       {
        HEAP32[$dest$0 >> 2] = $290;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case 1:
       {
        HEAP32[$dest$0 >> 2] = $290;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      case 3:
       {
        $303 = $dest$0;
        HEAP32[$303 >> 2] = $290;
        HEAP32[$303 + 4 >> 2] = tempRet0;
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
        break;
       }
      default:
       {
        $p$10 = $p$5;
        $s$5 = $s$1;
        $wcs$6 = $wcs$1;
        break L169;
       }
      }
     } while (0);
     $matches$1 = (($dest$0 | 0) != 0 & 1) + $matches$0107 | 0;
     $p$11 = $p$10;
     $pos$2 = (HEAP32[$9 >> 2] | 0) + $pos$1 + (HEAP32[$7 >> 2] | 0) - (HEAP32[$10 >> 2] | 0) | 0;
     $s$6 = $s$5;
     $wcs$7 = $wcs$6;
     break L8;
    } while (0);
    $51 = $p$0110 + ($47 & 1) | 0;
    ___shlim($f, 0);
    $52 = HEAP32[$7 >> 2] | 0;
    if ($52 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $52 + 1;
     $61 = HEAPU8[$52 >> 0] | 0;
    } else $61 = ___shgetc($f) | 0;
    if (($61 | 0) != (HEAPU8[$51 >> 0] | 0)) {
     $$lcssa386 = $61;
     $matches$0107$lcssa = $matches$0107;
     $s$0105$lcssa = $s$0105;
     $wcs$0106$lcssa = $wcs$0106;
     label = 22;
     break L6;
    }
    $matches$1 = $matches$0107;
    $p$11 = $51;
    $pos$2 = $pos$0111 + 1 | 0;
    $s$6 = $s$0105;
    $wcs$7 = $wcs$0106;
   } else {
    $p$1 = $p$0110;
    while (1) {
     $20 = $p$1 + 1 | 0;
     if (!(_isspace(HEAPU8[$20 >> 0] | 0) | 0)) {
      $p$1$lcssa = $p$1;
      break;
     } else $p$1 = $20;
    }
    ___shlim($f, 0);
    do {
     $25 = HEAP32[$7 >> 2] | 0;
     if ($25 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $25 + 1;
      $32 = HEAPU8[$25 >> 0] | 0;
     } else $32 = ___shgetc($f) | 0;
    } while ((_isspace($32) | 0) != 0);
    if (!(HEAP32[$8 >> 2] | 0)) $44 = HEAP32[$7 >> 2] | 0; else {
     $38 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
     HEAP32[$7 >> 2] = $38;
     $44 = $38;
    }
    $matches$1 = $matches$0107;
    $p$11 = $p$1$lcssa;
    $pos$2 = (HEAP32[$9 >> 2] | 0) + $pos$0111 + $44 - (HEAP32[$10 >> 2] | 0) | 0;
    $s$6 = $s$0105;
    $wcs$7 = $wcs$0106;
   } while (0);
   $p$0110 = $p$11 + 1 | 0;
   $17 = HEAP8[$p$0110 >> 0] | 0;
   if (!($17 << 24 >> 24)) {
    $matches$3 = $matches$1;
    break L4;
   } else {
    $matches$0107 = $matches$1;
    $pos$0111 = $pos$2;
    $s$0105 = $s$6;
    $wcs$0106 = $wcs$7;
   }
  }
  if ((label | 0) == 22) {
   if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
   if (($matches$0107$lcssa | 0) != 0 | ($$lcssa386 | 0) > -1) {
    $matches$3 = $matches$0107$lcssa;
    break;
   } else {
    $alloc$1 = 0;
    $s$8 = $s$0105$lcssa;
    $wcs$9 = $wcs$0106$lcssa;
    label = 155;
   }
  } else if ((label | 0) == 154) if (!$matches$0107371) {
   $alloc$1 = $alloc$0402;
   $s$8 = $s$7;
   $wcs$9 = $wcs$8;
   label = 155;
  } else {
   $alloc$2 = $alloc$0402;
   $matches$2 = $matches$0107371;
   $s$9 = $s$7;
   $wcs$10 = $wcs$8;
  }
  if ((label | 0) == 155) {
   $alloc$2 = $alloc$1;
   $matches$2 = -1;
   $s$9 = $s$8;
   $wcs$10 = $wcs$9;
  }
  if (!$alloc$2) $matches$3 = $matches$2; else {
   _free($s$9);
   _free($wcs$10);
   $matches$3 = $matches$2;
  }
 } while (0);
 if ($326 | 0) ___unlockfile($f);
 STACKTOP = sp;
 return $matches$3 | 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $1 = 0, $104 = 0, $105 = 0, $113 = 0, $114 = 0, $12 = 0, $122 = 0, $130 = 0, $135 = 0, $136 = 0, $139 = 0, $141 = 0, $143 = 0, $15 = 0, $158 = 0, $16 = 0, $163 = 0, $165 = 0, $168 = 0, $171 = 0, $174 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $203 = 0, $208 = 0, $211 = 0, $212 = 0, $218 = 0, $23 = 0, $233 = 0, $236 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $249 = 0, $25 = 0, $254 = 0, $255 = 0, $258 = 0, $260 = 0, $263 = 0, $268 = 0, $27 = 0, $274 = 0, $278 = 0, $279 = 0, $297 = 0, $299 = 0, $306 = 0, $307 = 0, $308 = 0, $316 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $52 = 0, $55 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $73 = 0, $74 = 0, $8 = 0, $83 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0;
 if (!$mem) return;
 $1 = $mem + -8 | 0;
 $2 = HEAP32[918963] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $1 + $8 | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) return;
  $15 = $1 + (0 - $12) | 0;
  $16 = $12 + $8 | 0;
  if ($15 >>> 0 < $2 >>> 0) _abort();
  if (($15 | 0) == (HEAP32[918964] | 0)) {
   $104 = $9 + 4 | 0;
   $105 = HEAP32[$104 >> 2] | 0;
   if (($105 & 3 | 0) != 3) {
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   HEAP32[918961] = $16;
   HEAP32[$104 >> 2] = $105 & -2;
   HEAP32[$15 + 4 >> 2] = $16 | 1;
   HEAP32[$15 + $16 >> 2] = $16;
   return;
  }
  $20 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $23 = HEAP32[$15 + 8 >> 2] | 0;
   $25 = HEAP32[$15 + 12 >> 2] | 0;
   $27 = 3675876 + ($20 << 1 << 2) | 0;
   if (($23 | 0) != ($27 | 0)) {
    if ($23 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$23 + 12 >> 2] | 0) != ($15 | 0)) _abort();
   }
   if (($25 | 0) == ($23 | 0)) {
    HEAP32[918959] = HEAP32[918959] & ~(1 << $20);
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   if (($25 | 0) == ($27 | 0)) $$pre$phi43Z2D = $25 + 8 | 0; else {
    if ($25 >>> 0 < $2 >>> 0) _abort();
    $40 = $25 + 8 | 0;
    if ((HEAP32[$40 >> 2] | 0) == ($15 | 0)) $$pre$phi43Z2D = $40; else _abort();
   }
   HEAP32[$23 + 12 >> 2] = $25;
   HEAP32[$$pre$phi43Z2D >> 2] = $23;
   $p$1 = $15;
   $psize$1 = $16;
   break;
  }
  $45 = HEAP32[$15 + 24 >> 2] | 0;
  $47 = HEAP32[$15 + 12 >> 2] | 0;
  do if (($47 | 0) == ($15 | 0)) {
   $58 = $15 + 16 | 0;
   $59 = $58 + 4 | 0;
   $60 = HEAP32[$59 >> 2] | 0;
   if (!$60) {
    $62 = HEAP32[$58 >> 2] | 0;
    if (!$62) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $62;
     $RP$1 = $58;
    }
   } else {
    $R$1 = $60;
    $RP$1 = $59;
   }
   while (1) {
    $64 = $R$1 + 20 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    if ($65 | 0) {
     $R$1 = $65;
     $RP$1 = $64;
     continue;
    }
    $67 = $R$1 + 16 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    if (!$68) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $68;
     $RP$1 = $67;
    }
   }
   if ($RP$1$lcssa >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $50 = HEAP32[$15 + 8 >> 2] | 0;
   if ($50 >>> 0 < $2 >>> 0) _abort();
   $52 = $50 + 12 | 0;
   if ((HEAP32[$52 >> 2] | 0) != ($15 | 0)) _abort();
   $55 = $47 + 8 | 0;
   if ((HEAP32[$55 >> 2] | 0) == ($15 | 0)) {
    HEAP32[$52 >> 2] = $47;
    HEAP32[$55 >> 2] = $50;
    $R$3 = $47;
    break;
   } else _abort();
  } while (0);
  if (!$45) {
   $p$1 = $15;
   $psize$1 = $16;
  } else {
   $73 = HEAP32[$15 + 28 >> 2] | 0;
   $74 = 3676140 + ($73 << 2) | 0;
   if (($15 | 0) == (HEAP32[$74 >> 2] | 0)) {
    HEAP32[$74 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[918960] = HEAP32[918960] & ~(1 << $73);
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
   } else {
    if ($45 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
    $83 = $45 + 16 | 0;
    if ((HEAP32[$83 >> 2] | 0) == ($15 | 0)) HEAP32[$83 >> 2] = $R$3; else HEAP32[$45 + 20 >> 2] = $R$3;
    if (!$R$3) {
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
   }
   $88 = HEAP32[918963] | 0;
   if ($R$3 >>> 0 < $88 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $45;
   $91 = $15 + 16 | 0;
   $92 = HEAP32[$91 >> 2] | 0;
   do if ($92 | 0) if ($92 >>> 0 < $88 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $92;
    HEAP32[$92 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $98 = HEAP32[$91 + 4 >> 2] | 0;
   if (!$98) {
    $p$1 = $15;
    $psize$1 = $16;
   } else if ($98 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $98;
    HEAP32[$98 + 24 >> 2] = $R$3;
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
  }
 } else {
  $p$1 = $1;
  $psize$1 = $8;
 } while (0);
 if ($p$1 >>> 0 >= $9 >>> 0) _abort();
 $113 = $9 + 4 | 0;
 $114 = HEAP32[$113 >> 2] | 0;
 if (!($114 & 1)) _abort();
 if (!($114 & 2)) {
  if (($9 | 0) == (HEAP32[918965] | 0)) {
   $122 = (HEAP32[918962] | 0) + $psize$1 | 0;
   HEAP32[918962] = $122;
   HEAP32[918965] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $122 | 1;
   if (($p$1 | 0) != (HEAP32[918964] | 0)) return;
   HEAP32[918964] = 0;
   HEAP32[918961] = 0;
   return;
  }
  if (($9 | 0) == (HEAP32[918964] | 0)) {
   $130 = (HEAP32[918961] | 0) + $psize$1 | 0;
   HEAP32[918961] = $130;
   HEAP32[918964] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $130 | 1;
   HEAP32[$p$1 + $130 >> 2] = $130;
   return;
  }
  $135 = ($114 & -8) + $psize$1 | 0;
  $136 = $114 >>> 3;
  do if ($114 >>> 0 < 256) {
   $139 = HEAP32[$9 + 8 >> 2] | 0;
   $141 = HEAP32[$9 + 12 >> 2] | 0;
   $143 = 3675876 + ($136 << 1 << 2) | 0;
   if (($139 | 0) != ($143 | 0)) {
    if ($139 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
    if ((HEAP32[$139 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($141 | 0) == ($139 | 0)) {
    HEAP32[918959] = HEAP32[918959] & ~(1 << $136);
    break;
   }
   if (($141 | 0) == ($143 | 0)) $$pre$phi41Z2D = $141 + 8 | 0; else {
    if ($141 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
    $158 = $141 + 8 | 0;
    if ((HEAP32[$158 >> 2] | 0) == ($9 | 0)) $$pre$phi41Z2D = $158; else _abort();
   }
   HEAP32[$139 + 12 >> 2] = $141;
   HEAP32[$$pre$phi41Z2D >> 2] = $139;
  } else {
   $163 = HEAP32[$9 + 24 >> 2] | 0;
   $165 = HEAP32[$9 + 12 >> 2] | 0;
   do if (($165 | 0) == ($9 | 0)) {
    $177 = $9 + 16 | 0;
    $178 = $177 + 4 | 0;
    $179 = HEAP32[$178 >> 2] | 0;
    if (!$179) {
     $181 = HEAP32[$177 >> 2] | 0;
     if (!$181) {
      $R8$3 = 0;
      break;
     } else {
      $R8$1 = $181;
      $RP10$1 = $177;
     }
    } else {
     $R8$1 = $179;
     $RP10$1 = $178;
    }
    while (1) {
     $183 = $R8$1 + 20 | 0;
     $184 = HEAP32[$183 >> 2] | 0;
     if ($184 | 0) {
      $R8$1 = $184;
      $RP10$1 = $183;
      continue;
     }
     $186 = $R8$1 + 16 | 0;
     $187 = HEAP32[$186 >> 2] | 0;
     if (!$187) {
      $R8$1$lcssa = $R8$1;
      $RP10$1$lcssa = $RP10$1;
      break;
     } else {
      $R8$1 = $187;
      $RP10$1 = $186;
     }
    }
    if ($RP10$1$lcssa >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
     HEAP32[$RP10$1$lcssa >> 2] = 0;
     $R8$3 = $R8$1$lcssa;
     break;
    }
   } else {
    $168 = HEAP32[$9 + 8 >> 2] | 0;
    if ($168 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
    $171 = $168 + 12 | 0;
    if ((HEAP32[$171 >> 2] | 0) != ($9 | 0)) _abort();
    $174 = $165 + 8 | 0;
    if ((HEAP32[$174 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$171 >> 2] = $165;
     HEAP32[$174 >> 2] = $168;
     $R8$3 = $165;
     break;
    } else _abort();
   } while (0);
   if ($163 | 0) {
    $193 = HEAP32[$9 + 28 >> 2] | 0;
    $194 = 3676140 + ($193 << 2) | 0;
    if (($9 | 0) == (HEAP32[$194 >> 2] | 0)) {
     HEAP32[$194 >> 2] = $R8$3;
     if (!$R8$3) {
      HEAP32[918960] = HEAP32[918960] & ~(1 << $193);
      break;
     }
    } else {
     if ($163 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
     $203 = $163 + 16 | 0;
     if ((HEAP32[$203 >> 2] | 0) == ($9 | 0)) HEAP32[$203 >> 2] = $R8$3; else HEAP32[$163 + 20 >> 2] = $R8$3;
     if (!$R8$3) break;
    }
    $208 = HEAP32[918963] | 0;
    if ($R8$3 >>> 0 < $208 >>> 0) _abort();
    HEAP32[$R8$3 + 24 >> 2] = $163;
    $211 = $9 + 16 | 0;
    $212 = HEAP32[$211 >> 2] | 0;
    do if ($212 | 0) if ($212 >>> 0 < $208 >>> 0) _abort(); else {
     HEAP32[$R8$3 + 16 >> 2] = $212;
     HEAP32[$212 + 24 >> 2] = $R8$3;
     break;
    } while (0);
    $218 = HEAP32[$211 + 4 >> 2] | 0;
    if ($218 | 0) if ($218 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
     HEAP32[$R8$3 + 20 >> 2] = $218;
     HEAP32[$218 + 24 >> 2] = $R8$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $135 | 1;
  HEAP32[$p$1 + $135 >> 2] = $135;
  if (($p$1 | 0) == (HEAP32[918964] | 0)) {
   HEAP32[918961] = $135;
   return;
  } else $psize$2 = $135;
 } else {
  HEAP32[$113 >> 2] = $114 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$p$1 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $236 = 3675876 + ($233 << 1 << 2) | 0;
  $237 = HEAP32[918959] | 0;
  $238 = 1 << $233;
  if (!($237 & $238)) {
   HEAP32[918959] = $237 | $238;
   $$pre$phiZ2D = $236 + 8 | 0;
   $F18$0 = $236;
  } else {
   $242 = $236 + 8 | 0;
   $243 = HEAP32[$242 >> 2] | 0;
   if ($243 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $242;
    $F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F18$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F18$0;
  HEAP32[$p$1 + 12 >> 2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 if (!$249) $I20$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I20$0 = 31; else {
  $254 = ($249 + 1048320 | 0) >>> 16 & 8;
  $255 = $249 << $254;
  $258 = ($255 + 520192 | 0) >>> 16 & 4;
  $260 = $255 << $258;
  $263 = ($260 + 245760 | 0) >>> 16 & 2;
  $268 = 14 - ($258 | $254 | $263) + ($260 << $263 >>> 15) | 0;
  $I20$0 = $psize$2 >>> ($268 + 7 | 0) & 1 | $268 << 1;
 }
 $274 = 3676140 + ($I20$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I20$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $278 = HEAP32[918960] | 0;
 $279 = 1 << $I20$0;
 do if (!($278 & $279)) {
  HEAP32[918960] = $278 | $279;
  HEAP32[$274 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $274;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $K21$0 = $psize$2 << (($I20$0 | 0) == 31 ? 0 : 25 - ($I20$0 >>> 1) | 0);
  $T$0 = HEAP32[$274 >> 2] | 0;
  while (1) {
   if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
    $T$0$lcssa = $T$0;
    label = 130;
    break;
   }
   $297 = $T$0 + 16 + ($K21$0 >>> 31 << 2) | 0;
   $299 = HEAP32[$297 >> 2] | 0;
   if (!$299) {
    $$lcssa = $297;
    $T$0$lcssa48 = $T$0;
    label = 127;
    break;
   } else {
    $K21$0 = $K21$0 << 1;
    $T$0 = $299;
   }
  }
  if ((label | 0) == 127) if ($$lcssa >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
   HEAP32[$$lcssa >> 2] = $p$1;
   HEAP32[$p$1 + 24 >> 2] = $T$0$lcssa48;
   HEAP32[$p$1 + 12 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $p$1;
   break;
  } else if ((label | 0) == 130) {
   $306 = $T$0$lcssa + 8 | 0;
   $307 = HEAP32[$306 >> 2] | 0;
   $308 = HEAP32[918963] | 0;
   if ($307 >>> 0 >= $308 >>> 0 & $T$0$lcssa >>> 0 >= $308 >>> 0) {
    HEAP32[$307 + 12 >> 2] = $p$1;
    HEAP32[$306 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $307;
    HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
    HEAP32[$p$1 + 24 >> 2] = 0;
    break;
   } else _abort();
  }
 } while (0);
 $316 = (HEAP32[918967] | 0) + -1 | 0;
 HEAP32[918967] = $316;
 if (!$316) $sp$0$in$i = 3676292; else return;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[918967] = -1;
 return;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $100 = 0, $101 = 0, $108 = 0, $120 = 0, $121 = 0, $128 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $135 = 0, $136 = 0, $144 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $156 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $195 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $222 = 0, $223 = 0, $224 = 0, $239 = 0, $25 = 0, $259 = 0, $261 = 0, $272 = 0, $281 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $47 = 0, $51 = 0, $6 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$1 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0;
 L1 : do if ($base >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $286 = 0;
  $287 = 0;
 } else {
  $3 = $f + 4 | 0;
  $4 = $f + 100 | 0;
  do {
   $6 = HEAP32[$3 >> 2] | 0;
   if ($6 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $6 + 1;
    $13 = HEAPU8[$6 >> 0] | 0;
   } else $13 = ___shgetc($f) | 0;
  } while ((_isspace($13) | 0) != 0);
  $$lcssa113 = $13;
  L11 : do switch ($$lcssa113 | 0) {
  case 43:
  case 45:
   {
    $17 = (($$lcssa113 | 0) == 45) << 31 >> 31;
    $18 = HEAP32[$3 >> 2] | 0;
    if ($18 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $18 + 1;
     $c$0 = HEAPU8[$18 >> 0] | 0;
     $neg$0 = $17;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $17;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $$lcssa113;
    $neg$0 = 0;
   }
  } while (0);
  $25 = ($base | 0) == 0;
  do if (($base | 16 | 0) == 16 & ($c$0 | 0) == 48) {
   $29 = HEAP32[$3 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $29 + 1;
    $37 = HEAPU8[$29 >> 0] | 0;
   } else $37 = ___shgetc($f) | 0;
   if (($37 | 32 | 0) != 120) if ($25) {
    $$116 = 8;
    $c$117 = $37;
    label = 46;
    break;
   } else {
    $$1 = $base;
    $c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3 >> 2] | 0;
   if ($39 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $39 + 1;
    $47 = HEAPU8[$39 >> 0] | 0;
   } else $47 = ___shgetc($f) | 0;
   if ((HEAPU8[3670099 + $47 >> 0] | 0) > 15) {
    $51 = (HEAP32[$4 >> 2] | 0) == 0;
    if (!$51) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0);
     $286 = 0;
     $287 = 0;
     break L1;
    }
    if ($51) {
     $286 = 0;
     $287 = 0;
     break L1;
    }
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    $286 = 0;
    $287 = 0;
    break L1;
   } else {
    $$116 = 16;
    $c$117 = $47;
    label = 46;
   }
  } else {
   $$base14 = $25 ? 10 : $base;
   if ((HEAPU8[3670099 + $c$0 >> 0] | 0) >>> 0 < $$base14 >>> 0) {
    $$1 = $$base14;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    ___shlim($f, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    $286 = 0;
    $287 = 0;
    break L1;
   }
  } while (0);
  if ((label | 0) == 32) if (($$1 | 0) == 10) {
   $67 = $c$1 + -48 | 0;
   if ($67 >>> 0 < 10) {
    $71 = $67;
    $x$070 = 0;
    while (1) {
     $70 = ($x$070 * 10 | 0) + $71 | 0;
     $72 = HEAP32[$3 >> 2] | 0;
     if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $72 + 1;
      $c$2$be = HEAPU8[$72 >> 0] | 0;
     } else $c$2$be = ___shgetc($f) | 0;
     $71 = $c$2$be + -48 | 0;
     if (!($71 >>> 0 < 10 & $70 >>> 0 < 429496729)) {
      $$lcssa112 = $70;
      $c$2$be$lcssa = $c$2$be;
      break;
     } else $x$070 = $70;
    }
    $288 = $$lcssa112;
    $289 = 0;
    $c$2$lcssa = $c$2$be$lcssa;
   } else {
    $288 = 0;
    $289 = 0;
    $c$2$lcssa = $c$1;
   }
   $83 = $c$2$lcssa + -48 | 0;
   if ($83 >>> 0 < 10) {
    $85 = $288;
    $86 = $289;
    $89 = $83;
    $c$359 = $c$2$lcssa;
    while (1) {
     $87 = ___muldi3($85 | 0, $86 | 0, 10, 0) | 0;
     $88 = tempRet0;
     $91 = (($89 | 0) < 0) << 31 >> 31;
     $93 = ~$91;
     if ($88 >>> 0 > $93 >>> 0 | ($88 | 0) == ($93 | 0) & $87 >>> 0 > ~$89 >>> 0) {
      $$lcssa = $89;
      $290 = $85;
      $291 = $86;
      $c$3$lcssa = $c$359;
      break;
     }
     $99 = _i64Add($87 | 0, $88 | 0, $89 | 0, $91 | 0) | 0;
     $100 = tempRet0;
     $101 = HEAP32[$3 >> 2] | 0;
     if ($101 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $101 + 1;
      $c$3$be = HEAPU8[$101 >> 0] | 0;
     } else $c$3$be = ___shgetc($f) | 0;
     $108 = $c$3$be + -48 | 0;
     if ($108 >>> 0 < 10 & ($100 >>> 0 < 429496729 | ($100 | 0) == 429496729 & $99 >>> 0 < 2576980378)) {
      $85 = $99;
      $86 = $100;
      $89 = $108;
      $c$359 = $c$3$be;
     } else {
      $$lcssa = $108;
      $290 = $99;
      $291 = $100;
      $c$3$lcssa = $c$3$be;
      break;
     }
    }
    if ($$lcssa >>> 0 > 9) {
     $259 = $291;
     $261 = $290;
     $neg$1 = $neg$0;
    } else {
     $$115 = 10;
     $292 = $290;
     $293 = $291;
     $c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $259 = $289;
    $261 = $288;
    $neg$1 = $neg$0;
   }
  } else {
   $$116 = $$1;
   $c$117 = $c$1;
   label = 46;
  }
  L63 : do if ((label | 0) == 46) {
   if (!($$116 + -1 & $$116)) {
    $128 = HEAP8[3670355 + (($$116 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $130 = HEAP8[3670099 + $c$117 >> 0] | 0;
    $131 = $130 & 255;
    if ($131 >>> 0 < $$116 >>> 0) {
     $135 = $131;
     $x$136 = 0;
     while (1) {
      $134 = $135 | $x$136 << $128;
      $136 = HEAP32[$3 >> 2] | 0;
      if ($136 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $136 + 1;
       $c$4$be = HEAPU8[$136 >> 0] | 0;
      } else $c$4$be = ___shgetc($f) | 0;
      $144 = HEAP8[3670099 + $c$4$be >> 0] | 0;
      $135 = $144 & 255;
      if (!($134 >>> 0 < 134217728 & $135 >>> 0 < $$116 >>> 0)) {
       $$lcssa108 = $134;
       $$lcssa109 = $144;
       $c$4$be$lcssa = $c$4$be;
       break;
      } else $x$136 = $134;
     }
     $152 = $$lcssa109;
     $154 = 0;
     $156 = $$lcssa108;
     $c$4$lcssa = $c$4$be$lcssa;
    } else {
     $152 = $130;
     $154 = 0;
     $156 = 0;
     $c$4$lcssa = $c$117;
    }
    $149 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
    $150 = tempRet0;
    if (($152 & 255) >>> 0 >= $$116 >>> 0 | ($154 >>> 0 > $150 >>> 0 | ($154 | 0) == ($150 | 0) & $156 >>> 0 > $149 >>> 0)) {
     $$115 = $$116;
     $292 = $156;
     $293 = $154;
     $c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $161 = $156;
     $162 = $154;
     $166 = $152;
    }
    while (1) {
     $163 = _bitshift64Shl($161 | 0, $162 | 0, $128 | 0) | 0;
     $164 = tempRet0;
     $167 = $166 & 255 | $163;
     $168 = HEAP32[$3 >> 2] | 0;
     if ($168 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $168 + 1;
      $c$5$be = HEAPU8[$168 >> 0] | 0;
     } else $c$5$be = ___shgetc($f) | 0;
     $166 = HEAP8[3670099 + $c$5$be >> 0] | 0;
     if (($166 & 255) >>> 0 >= $$116 >>> 0 | ($164 >>> 0 > $150 >>> 0 | ($164 | 0) == ($150 | 0) & $167 >>> 0 > $149 >>> 0)) {
      $$115 = $$116;
      $292 = $167;
      $293 = $164;
      $c$8 = $c$5$be;
      label = 72;
      break L63;
     } else {
      $161 = $167;
      $162 = $164;
     }
    }
   }
   $120 = HEAP8[3670099 + $c$117 >> 0] | 0;
   $121 = $120 & 255;
   if ($121 >>> 0 < $$116 >>> 0) {
    $186 = $121;
    $x$254 = 0;
    while (1) {
     $185 = $186 + (Math_imul($x$254, $$116) | 0) | 0;
     $187 = HEAP32[$3 >> 2] | 0;
     if ($187 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $187 + 1;
      $c$6$be = HEAPU8[$187 >> 0] | 0;
     } else $c$6$be = ___shgetc($f) | 0;
     $195 = HEAP8[3670099 + $c$6$be >> 0] | 0;
     $186 = $195 & 255;
     if (!($185 >>> 0 < 119304647 & $186 >>> 0 < $$116 >>> 0)) {
      $$lcssa110 = $185;
      $$lcssa111 = $195;
      $c$6$be$lcssa = $c$6$be;
      break;
     } else $x$254 = $185;
    }
    $201 = $$lcssa111;
    $294 = $$lcssa110;
    $295 = 0;
    $c$6$lcssa = $c$6$be$lcssa;
   } else {
    $201 = $120;
    $294 = 0;
    $295 = 0;
    $c$6$lcssa = $c$117;
   }
   if (($201 & 255) >>> 0 < $$116 >>> 0) {
    $203 = ___udivdi3(-1, -1, $$116 | 0, 0) | 0;
    $204 = tempRet0;
    $205 = $295;
    $207 = $294;
    $215 = $201;
    $c$742 = $c$6$lcssa;
    while (1) {
     if ($205 >>> 0 > $204 >>> 0 | ($205 | 0) == ($204 | 0) & $207 >>> 0 > $203 >>> 0) {
      $$115 = $$116;
      $292 = $207;
      $293 = $205;
      $c$8 = $c$742;
      label = 72;
      break L63;
     }
     $212 = ___muldi3($207 | 0, $205 | 0, $$116 | 0, 0) | 0;
     $213 = tempRet0;
     $214 = $215 & 255;
     if ($213 >>> 0 > 4294967295 | ($213 | 0) == -1 & $212 >>> 0 > ~$214 >>> 0) {
      $$115 = $$116;
      $292 = $207;
      $293 = $205;
      $c$8 = $c$742;
      label = 72;
      break L63;
     }
     $222 = _i64Add($214 | 0, 0, $212 | 0, $213 | 0) | 0;
     $223 = tempRet0;
     $224 = HEAP32[$3 >> 2] | 0;
     if ($224 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $224 + 1;
      $c$7$be = HEAPU8[$224 >> 0] | 0;
     } else $c$7$be = ___shgetc($f) | 0;
     $215 = HEAP8[3670099 + $c$7$be >> 0] | 0;
     if (($215 & 255) >>> 0 >= $$116 >>> 0) {
      $$115 = $$116;
      $292 = $222;
      $293 = $223;
      $c$8 = $c$7$be;
      label = 72;
      break;
     } else {
      $205 = $223;
      $207 = $222;
      $c$742 = $c$7$be;
     }
    }
   } else {
    $$115 = $$116;
    $292 = $294;
    $293 = $295;
    $c$8 = $c$6$lcssa;
    label = 72;
   }
  } while (0);
  if ((label | 0) == 72) if ((HEAPU8[3670099 + $c$8 >> 0] | 0) >>> 0 < $$115 >>> 0) {
   do {
    $239 = HEAP32[$3 >> 2] | 0;
    if ($239 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $239 + 1;
     $c$9$be = HEAPU8[$239 >> 0] | 0;
    } else $c$9$be = ___shgetc($f) | 0;
   } while ((HEAPU8[3670099 + $c$9$be >> 0] | 0) >>> 0 < $$115 >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $259 = $1;
   $261 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $259 = $293;
   $261 = $292;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
  if (!($259 >>> 0 < $1 >>> 0 | ($259 | 0) == ($1 | 0) & $261 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $272 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $286 = tempRet0;
    $287 = $272;
    break;
   }
   if ($259 >>> 0 > $1 >>> 0 | ($259 | 0) == ($1 | 0) & $261 >>> 0 > $0 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $286 = $1;
    $287 = $0;
    break;
   }
  }
  $281 = (($neg$1 | 0) < 0) << 31 >> 31;
  $284 = _i64Subtract($261 ^ $neg$1 | 0, $259 ^ $281 | 0, $neg$1 | 0, $281 | 0) | 0;
  $286 = tempRet0;
  $287 = $284;
 } while (0);
 tempRet0 = $286;
 return $287 | 0;
}
function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $100 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $116 = 0, $124 = 0, $129 = 0, $130 = 0, $133 = 0, $135 = 0, $137 = 0, $15 = 0, $150 = 0, $155 = 0, $157 = 0, $160 = 0, $162 = 0, $165 = 0, $168 = 0, $169 = 0, $170 = 0, $172 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $193 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $208 = 0, $22 = 0, $223 = 0, $226 = 0, $227 = 0, $228 = 0, $232 = 0, $233 = 0, $239 = 0, $244 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $258 = 0, $264 = 0, $268 = 0, $269 = 0, $287 = 0, $289 = 0, $296 = 0, $297 = 0, $298 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $83 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, label = 0;
 $0 = $p + $psize | 0;
 $2 = HEAP32[$p + 4 >> 2] | 0;
 do if (!($2 & 1)) {
  $5 = HEAP32[$p >> 2] | 0;
  if (!($2 & 3)) return;
  $9 = $p + (0 - $5) | 0;
  $10 = $5 + $psize | 0;
  $11 = HEAP32[918963] | 0;
  if ($9 >>> 0 < $11 >>> 0) _abort();
  if (($9 | 0) == (HEAP32[918964] | 0)) {
   $99 = $0 + 4 | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   if (($100 & 3 | 0) != 3) {
    $$1 = $9;
    $$14 = $10;
    break;
   }
   HEAP32[918961] = $10;
   HEAP32[$99 >> 2] = $100 & -2;
   HEAP32[$9 + 4 >> 2] = $10 | 1;
   HEAP32[$9 + $10 >> 2] = $10;
   return;
  }
  $15 = $5 >>> 3;
  if ($5 >>> 0 < 256) {
   $18 = HEAP32[$9 + 8 >> 2] | 0;
   $20 = HEAP32[$9 + 12 >> 2] | 0;
   $22 = 3675876 + ($15 << 1 << 2) | 0;
   if (($18 | 0) != ($22 | 0)) {
    if ($18 >>> 0 < $11 >>> 0) _abort();
    if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($20 | 0) == ($18 | 0)) {
    HEAP32[918959] = HEAP32[918959] & ~(1 << $15);
    $$1 = $9;
    $$14 = $10;
    break;
   }
   if (($20 | 0) == ($22 | 0)) $$pre$phi24Z2D = $20 + 8 | 0; else {
    if ($20 >>> 0 < $11 >>> 0) _abort();
    $35 = $20 + 8 | 0;
    if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) $$pre$phi24Z2D = $35; else _abort();
   }
   HEAP32[$18 + 12 >> 2] = $20;
   HEAP32[$$pre$phi24Z2D >> 2] = $18;
   $$1 = $9;
   $$14 = $10;
   break;
  }
  $40 = HEAP32[$9 + 24 >> 2] | 0;
  $42 = HEAP32[$9 + 12 >> 2] | 0;
  do if (($42 | 0) == ($9 | 0)) {
   $53 = $9 + 16 | 0;
   $54 = $53 + 4 | 0;
   $55 = HEAP32[$54 >> 2] | 0;
   if (!$55) {
    $57 = HEAP32[$53 >> 2] | 0;
    if (!$57) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $57;
     $RP$1 = $53;
    }
   } else {
    $R$1 = $55;
    $RP$1 = $54;
   }
   while (1) {
    $59 = $R$1 + 20 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if ($60 | 0) {
     $R$1 = $60;
     $RP$1 = $59;
     continue;
    }
    $62 = $R$1 + 16 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    if (!$63) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $63;
     $RP$1 = $62;
    }
   }
   if ($RP$1$lcssa >>> 0 < $11 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $45 = HEAP32[$9 + 8 >> 2] | 0;
   if ($45 >>> 0 < $11 >>> 0) _abort();
   $47 = $45 + 12 | 0;
   if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) _abort();
   $50 = $42 + 8 | 0;
   if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
    HEAP32[$47 >> 2] = $42;
    HEAP32[$50 >> 2] = $45;
    $R$3 = $42;
    break;
   } else _abort();
  } while (0);
  if (!$40) {
   $$1 = $9;
   $$14 = $10;
  } else {
   $68 = HEAP32[$9 + 28 >> 2] | 0;
   $69 = 3676140 + ($68 << 2) | 0;
   if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
    HEAP32[$69 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[918960] = HEAP32[918960] & ~(1 << $68);
     $$1 = $9;
     $$14 = $10;
     break;
    }
   } else {
    if ($40 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
    $78 = $40 + 16 | 0;
    if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) HEAP32[$78 >> 2] = $R$3; else HEAP32[$40 + 20 >> 2] = $R$3;
    if (!$R$3) {
     $$1 = $9;
     $$14 = $10;
     break;
    }
   }
   $83 = HEAP32[918963] | 0;
   if ($R$3 >>> 0 < $83 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $40;
   $86 = $9 + 16 | 0;
   $87 = HEAP32[$86 >> 2] | 0;
   do if ($87 | 0) if ($87 >>> 0 < $83 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $87;
    HEAP32[$87 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $93 = HEAP32[$86 + 4 >> 2] | 0;
   if (!$93) {
    $$1 = $9;
    $$14 = $10;
   } else if ($93 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $R$3;
    $$1 = $9;
    $$14 = $10;
    break;
   }
  }
 } else {
  $$1 = $p;
  $$14 = $psize;
 } while (0);
 $107 = HEAP32[918963] | 0;
 if ($0 >>> 0 < $107 >>> 0) _abort();
 $109 = $0 + 4 | 0;
 $110 = HEAP32[$109 >> 2] | 0;
 if (!($110 & 2)) {
  if (($0 | 0) == (HEAP32[918965] | 0)) {
   $116 = (HEAP32[918962] | 0) + $$14 | 0;
   HEAP32[918962] = $116;
   HEAP32[918965] = $$1;
   HEAP32[$$1 + 4 >> 2] = $116 | 1;
   if (($$1 | 0) != (HEAP32[918964] | 0)) return;
   HEAP32[918964] = 0;
   HEAP32[918961] = 0;
   return;
  }
  if (($0 | 0) == (HEAP32[918964] | 0)) {
   $124 = (HEAP32[918961] | 0) + $$14 | 0;
   HEAP32[918961] = $124;
   HEAP32[918964] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   HEAP32[$$1 + $124 >> 2] = $124;
   return;
  }
  $129 = ($110 & -8) + $$14 | 0;
  $130 = $110 >>> 3;
  do if ($110 >>> 0 < 256) {
   $133 = HEAP32[$0 + 8 >> 2] | 0;
   $135 = HEAP32[$0 + 12 >> 2] | 0;
   $137 = 3675876 + ($130 << 1 << 2) | 0;
   if (($133 | 0) != ($137 | 0)) {
    if ($133 >>> 0 < $107 >>> 0) _abort();
    if ((HEAP32[$133 + 12 >> 2] | 0) != ($0 | 0)) _abort();
   }
   if (($135 | 0) == ($133 | 0)) {
    HEAP32[918959] = HEAP32[918959] & ~(1 << $130);
    break;
   }
   if (($135 | 0) == ($137 | 0)) $$pre$phi22Z2D = $135 + 8 | 0; else {
    if ($135 >>> 0 < $107 >>> 0) _abort();
    $150 = $135 + 8 | 0;
    if ((HEAP32[$150 >> 2] | 0) == ($0 | 0)) $$pre$phi22Z2D = $150; else _abort();
   }
   HEAP32[$133 + 12 >> 2] = $135;
   HEAP32[$$pre$phi22Z2D >> 2] = $133;
  } else {
   $155 = HEAP32[$0 + 24 >> 2] | 0;
   $157 = HEAP32[$0 + 12 >> 2] | 0;
   do if (($157 | 0) == ($0 | 0)) {
    $168 = $0 + 16 | 0;
    $169 = $168 + 4 | 0;
    $170 = HEAP32[$169 >> 2] | 0;
    if (!$170) {
     $172 = HEAP32[$168 >> 2] | 0;
     if (!$172) {
      $R7$3 = 0;
      break;
     } else {
      $R7$1 = $172;
      $RP9$1 = $168;
     }
    } else {
     $R7$1 = $170;
     $RP9$1 = $169;
    }
    while (1) {
     $174 = $R7$1 + 20 | 0;
     $175 = HEAP32[$174 >> 2] | 0;
     if ($175 | 0) {
      $R7$1 = $175;
      $RP9$1 = $174;
      continue;
     }
     $177 = $R7$1 + 16 | 0;
     $178 = HEAP32[$177 >> 2] | 0;
     if (!$178) {
      $R7$1$lcssa = $R7$1;
      $RP9$1$lcssa = $RP9$1;
      break;
     } else {
      $R7$1 = $178;
      $RP9$1 = $177;
     }
    }
    if ($RP9$1$lcssa >>> 0 < $107 >>> 0) _abort(); else {
     HEAP32[$RP9$1$lcssa >> 2] = 0;
     $R7$3 = $R7$1$lcssa;
     break;
    }
   } else {
    $160 = HEAP32[$0 + 8 >> 2] | 0;
    if ($160 >>> 0 < $107 >>> 0) _abort();
    $162 = $160 + 12 | 0;
    if ((HEAP32[$162 >> 2] | 0) != ($0 | 0)) _abort();
    $165 = $157 + 8 | 0;
    if ((HEAP32[$165 >> 2] | 0) == ($0 | 0)) {
     HEAP32[$162 >> 2] = $157;
     HEAP32[$165 >> 2] = $160;
     $R7$3 = $157;
     break;
    } else _abort();
   } while (0);
   if ($155 | 0) {
    $183 = HEAP32[$0 + 28 >> 2] | 0;
    $184 = 3676140 + ($183 << 2) | 0;
    if (($0 | 0) == (HEAP32[$184 >> 2] | 0)) {
     HEAP32[$184 >> 2] = $R7$3;
     if (!$R7$3) {
      HEAP32[918960] = HEAP32[918960] & ~(1 << $183);
      break;
     }
    } else {
     if ($155 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
     $193 = $155 + 16 | 0;
     if ((HEAP32[$193 >> 2] | 0) == ($0 | 0)) HEAP32[$193 >> 2] = $R7$3; else HEAP32[$155 + 20 >> 2] = $R7$3;
     if (!$R7$3) break;
    }
    $198 = HEAP32[918963] | 0;
    if ($R7$3 >>> 0 < $198 >>> 0) _abort();
    HEAP32[$R7$3 + 24 >> 2] = $155;
    $201 = $0 + 16 | 0;
    $202 = HEAP32[$201 >> 2] | 0;
    do if ($202 | 0) if ($202 >>> 0 < $198 >>> 0) _abort(); else {
     HEAP32[$R7$3 + 16 >> 2] = $202;
     HEAP32[$202 + 24 >> 2] = $R7$3;
     break;
    } while (0);
    $208 = HEAP32[$201 + 4 >> 2] | 0;
    if ($208 | 0) if ($208 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$3 + 20 >> 2] = $208;
     HEAP32[$208 + 24 >> 2] = $R7$3;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $129 | 1;
  HEAP32[$$1 + $129 >> 2] = $129;
  if (($$1 | 0) == (HEAP32[918964] | 0)) {
   HEAP32[918961] = $129;
   return;
  } else $$2 = $129;
 } else {
  HEAP32[$109 >> 2] = $110 & -2;
  HEAP32[$$1 + 4 >> 2] = $$14 | 1;
  HEAP32[$$1 + $$14 >> 2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $226 = 3675876 + ($223 << 1 << 2) | 0;
  $227 = HEAP32[918959] | 0;
  $228 = 1 << $223;
  if (!($227 & $228)) {
   HEAP32[918959] = $227 | $228;
   $$pre$phiZ2D = $226 + 8 | 0;
   $F17$0 = $226;
  } else {
   $232 = $226 + 8 | 0;
   $233 = HEAP32[$232 >> 2] | 0;
   if ($233 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $232;
    $F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$F17$0 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $F17$0;
  HEAP32[$$1 + 12 >> 2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 if (!$239) $I20$0 = 0; else if ($$2 >>> 0 > 16777215) $I20$0 = 31; else {
  $244 = ($239 + 1048320 | 0) >>> 16 & 8;
  $245 = $239 << $244;
  $248 = ($245 + 520192 | 0) >>> 16 & 4;
  $250 = $245 << $248;
  $253 = ($250 + 245760 | 0) >>> 16 & 2;
  $258 = 14 - ($248 | $244 | $253) + ($250 << $253 >>> 15) | 0;
  $I20$0 = $$2 >>> ($258 + 7 | 0) & 1 | $258 << 1;
 }
 $264 = 3676140 + ($I20$0 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $I20$0;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $268 = HEAP32[918960] | 0;
 $269 = 1 << $I20$0;
 if (!($268 & $269)) {
  HEAP32[918960] = $268 | $269;
  HEAP32[$264 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $264;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $K21$0 = $$2 << (($I20$0 | 0) == 31 ? 0 : 25 - ($I20$0 >>> 1) | 0);
 $T$0 = HEAP32[$264 >> 2] | 0;
 while (1) {
  if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $287 = $T$0 + 16 + ($K21$0 >>> 31 << 2) | 0;
  $289 = HEAP32[$287 >> 2] | 0;
  if (!$289) {
   $$lcssa = $287;
   $T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $K21$0 << 1;
   $T$0 = $289;
  }
 }
 if ((label | 0) == 124) {
  if ($$lcssa >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
  HEAP32[$$lcssa >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $T$0$lcssa30;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } else if ((label | 0) == 127) {
  $296 = $T$0$lcssa + 8 | 0;
  $297 = HEAP32[$296 >> 2] | 0;
  $298 = HEAP32[918963] | 0;
  if (!($297 >>> 0 >= $298 >>> 0 & $T$0$lcssa >>> 0 >= $298 >>> 0)) _abort();
  HEAP32[$297 + 12 >> 2] = $$1;
  HEAP32[$296 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $297;
  HEAP32[$$1 + 12 >> 2] = $T$0$lcssa;
  HEAP32[$$1 + 24 >> 2] = 0;
  return;
 }
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $95 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy30 = sp + 132 | 0;
 $$byval_copy26 = sp + 116 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 124 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 100 | 0;
 $8 = sp + 96 | 0;
 $9 = sp + 92 | 0;
 $10 = sp + 88 | 0;
 $11 = sp + 84 | 0;
 $12 = sp + 80 | 0;
 $13 = sp + 76 | 0;
 $14 = sp + 72 | 0;
 $15 = sp + 68 | 0;
 $16 = sp + 64 | 0;
 $17 = sp + 60 | 0;
 $18 = sp + 56 | 0;
 $19 = sp + 52 | 0;
 $20 = sp + 48 | 0;
 $21 = sp + 44 | 0;
 $22 = sp + 40 | 0;
 $23 = sp + 36 | 0;
 $24 = sp + 32 | 0;
 $25 = sp + 28 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 16 | 0;
 $29 = sp + 12 | 0;
 $30 = sp + 8 | 0;
 $31 = sp + 4 | 0;
 $32 = sp;
 HEAP32[$__err >> 2] = 0;
 $33 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$1 >> 2] = $33;
 $34 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 3677412) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($33) | 0;
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$2 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$3 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$3 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 99:
  {
   $40 = $this + 8 | 0;
   $44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 12 >> 2] & 63]($40) | 0;
   HEAP32[$4 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$5 >> 2] = HEAP32[$__e >> 2];
   $47 = HEAP8[$44 >> 0] | 0;
   $49 = ($47 & 1) == 0;
   $52 = $44 + 4 | 0;
   $53 = $49 ? $52 : HEAP32[$44 + 8 >> 2] | 0;
   $58 = $53 + (($49 ? ($47 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) << 2) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $53, $58) | 0;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$6 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$6 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 12 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$7 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$8 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 16160, 16192) | 0;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$9 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$10 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 16192, 16224) | 0;
   label = 26;
   break;
  }
 case 72:
  {
   HEAP32[$11 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$11 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 73:
  {
   HEAP32[$12 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$12 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 106:
  {
   HEAP32[$13 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$13 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 28 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 109:
  {
   HEAP32[$14 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$14 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 77:
  {
   HEAP32[$15 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$15 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 4 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$16 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$16 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 112:
  {
   HEAP32[$17 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$17 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$18 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$19 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$18 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 16224, 16268) | 0;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$20 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$21 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 16268, 16288) | 0;
   label = 26;
   break;
  }
 case 83:
  {
   HEAP32[$22 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$22 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$23 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$24 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$23 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$24 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 16288, 16320) | 0;
   label = 26;
   break;
  }
 case 119:
  {
   HEAP32[$25 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$25 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 120:
  {
   $95 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$26 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$27 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$27 >> 2];
   $$sroa$07$0 = FUNCTION_TABLE_iiiiiii[$95 & 63]($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm) | 0;
   break;
  }
 case 88:
  {
   $99 = $this + 8 | 0;
   $103 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$99 >> 2] | 0) + 24 >> 2] & 63]($99) | 0;
   HEAP32[$28 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$29 >> 2] = HEAP32[$__e >> 2];
   $106 = HEAP8[$103 >> 0] | 0;
   $108 = ($106 & 1) == 0;
   $111 = $103 + 4 | 0;
   $112 = $108 ? $111 : HEAP32[$103 + 8 >> 2] | 0;
   $117 = $112 + (($108 ? ($106 & 255) >>> 1 : HEAP32[$111 >> 2] | 0) << 2) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$29 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $112, $117) | 0;
   label = 26;
   break;
  }
 case 121:
  {
   HEAP32[$30 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$30 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 89:
  {
   HEAP32[$31 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$31 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 37:
  {
   HEAP32[$32 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$32 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $$sroa$07$0 = HEAP32[$__b >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$07$0 | 0;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$07$0 = 0, $1 = 0, $10 = 0, $100 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $113 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy30 = sp + 132 | 0;
 $$byval_copy26 = sp + 116 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 124 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 100 | 0;
 $8 = sp + 96 | 0;
 $9 = sp + 92 | 0;
 $10 = sp + 88 | 0;
 $11 = sp + 84 | 0;
 $12 = sp + 80 | 0;
 $13 = sp + 76 | 0;
 $14 = sp + 72 | 0;
 $15 = sp + 68 | 0;
 $16 = sp + 64 | 0;
 $17 = sp + 60 | 0;
 $18 = sp + 56 | 0;
 $19 = sp + 52 | 0;
 $20 = sp + 48 | 0;
 $21 = sp + 44 | 0;
 $22 = sp + 40 | 0;
 $23 = sp + 36 | 0;
 $24 = sp + 32 | 0;
 $25 = sp + 28 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 16 | 0;
 $29 = sp + 12 | 0;
 $30 = sp + 8 | 0;
 $31 = sp + 4 | 0;
 $32 = sp;
 HEAP32[$__err >> 2] = 0;
 $33 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$1 >> 2] = $33;
 $34 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 3677380) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($33) | 0;
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$2 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$3 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$3 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 99:
  {
   $40 = $this + 8 | 0;
   $44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$40 >> 2] | 0) + 12 >> 2] & 63]($40) | 0;
   HEAP32[$4 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$5 >> 2] = HEAP32[$__e >> 2];
   $47 = HEAP8[$44 >> 0] | 0;
   $49 = ($47 & 1) == 0;
   $53 = $49 ? $44 + 1 | 0 : HEAP32[$44 + 8 >> 2] | 0;
   $59 = $53 + ($49 ? ($47 & 255) >>> 1 : HEAP32[$44 + 4 >> 2] | 0) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $53, $59) | 0;
   label = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$6 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$6 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 12 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 68:
  {
   HEAP32[$7 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$8 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3671666, 3671674) | 0;
   label = 26;
   break;
  }
 case 70:
  {
   HEAP32[$9 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$10 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3671674, 3671682) | 0;
   label = 26;
   break;
  }
 case 72:
  {
   HEAP32[$11 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$11 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 73:
  {
   HEAP32[$12 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$12 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 106:
  {
   HEAP32[$13 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$13 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 28 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 109:
  {
   HEAP32[$14 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$14 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 77:
  {
   HEAP32[$15 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$15 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 4 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$16 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$16 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 112:
  {
   HEAP32[$17 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$17 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 114:
  {
   HEAP32[$18 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$19 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$18 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3671682, 3671693) | 0;
   label = 26;
   break;
  }
 case 82:
  {
   HEAP32[$20 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$21 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3671693, 3671698) | 0;
   label = 26;
   break;
  }
 case 83:
  {
   HEAP32[$22 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$22 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 84:
  {
   HEAP32[$23 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$24 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$23 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$24 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3671698, 3671706) | 0;
   label = 26;
   break;
  }
 case 119:
  {
   HEAP32[$25 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$25 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 120:
  {
   $96 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$26 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$27 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$27 >> 2];
   $$sroa$07$0 = FUNCTION_TABLE_iiiiiii[$96 & 63]($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm) | 0;
   break;
  }
 case 88:
  {
   $100 = $this + 8 | 0;
   $104 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 24 >> 2] & 63]($100) | 0;
   HEAP32[$28 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$29 >> 2] = HEAP32[$__e >> 2];
   $107 = HEAP8[$104 >> 0] | 0;
   $109 = ($107 & 1) == 0;
   $113 = $109 ? $104 + 1 | 0 : HEAP32[$104 + 8 >> 2] | 0;
   $119 = $113 + ($109 ? ($107 & 255) >>> 1 : HEAP32[$104 + 4 >> 2] | 0) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$29 >> 2];
   HEAP32[$__b >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $113, $119) | 0;
   label = 26;
   break;
  }
 case 121:
  {
   HEAP32[$30 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$30 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 89:
  {
   HEAP32[$31 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$31 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 case 37:
  {
   HEAP32[$32 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$32 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $$byval_copy30, $__err, $34);
   label = 26;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 26;
  }
 } while (0);
 if ((label | 0) == 26) $$sroa$07$0 = HEAP32[$__b >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$07$0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i21 = 0, $$0$i$i$i$i6 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i12 = 0, $$0$i$i1$i$i27 = 0, $$0$i$i18 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa114 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa118$lcssa = 0, $$lcssa118$lcssa121 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa128 = 0, $$lcssa129 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i23 = 0, $$pre$i$i$i8 = 0, $$pre$i3$i$i14 = 0, $$pre$i3$i$i1445 = 0, $$pre$i3$i$i1446 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $114 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $135 = 0, $142 = 0, $152 = 0, $162 = 0, $165 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $4 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $58 = 0, $6 = 0, $61 = 0, $75 = 0, $8 = 0, $85 = 0, $88 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy1 = sp + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $3;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677412) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0;
 HEAP32[$__err >> 2] = 0;
 $$0$ph = $__fmtb;
 $$pre = 0;
 L1 : while (1) {
  $5 = ($$0$ph | 0) != ($__fmte | 0);
  $6 = $$pre;
  while (1) {
   $8 = HEAP32[$__b >> 2] | 0;
   if (!($5 & ($6 | 0) == 0)) {
    $$pre$i$i$i23 = $8;
    break L1;
   }
   $10 = $8;
   if (!$8) {
    $122 = 0;
    $178 = $10;
    $179 = 1;
   } else {
    $12 = HEAP32[$8 + 12 >> 2] | 0;
    if (($12 | 0) == (HEAP32[$8 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 36 >> 2] & 63]($8) | 0; else $$0$i$i$i$i = HEAP32[$12 >> 2] | 0;
    if (($$0$i$i$i$i | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $122 = 0;
     $178 = 0;
     $179 = 1;
    } else {
     $122 = $8;
     $178 = $10;
     $179 = 0;
    }
   }
   $22 = HEAP32[$__e >> 2] | 0;
   $24 = $22;
   do if (!$22) {
    $$ph = $24;
    label = 16;
   } else {
    $26 = HEAP32[$22 + 12 >> 2] | 0;
    if (($26 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i1$i$i = HEAP32[$26 >> 2] | 0;
    if (($$0$i$i1$i$i | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$ph = 0;
     label = 16;
     break;
    } else if ($179) {
     $180 = $22;
     $181 = $24;
     break;
    } else {
     $$lcssa117 = $122;
     label = 18;
     break L1;
    }
   } while (0);
   if ((label | 0) == 16) {
    label = 0;
    if ($179) {
     $$lcssa117 = $122;
     label = 18;
     break L1;
    } else {
     $180 = 0;
     $181 = $$ph;
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($4, HEAP32[$$0$ph >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
    $$lcssa114 = $178;
    $$lcssa118 = $122;
    $$lcssa125 = $181;
    label = 20;
    break;
   }
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, 8192, HEAP32[$$0$ph >> 2] | 0) | 0) {
    $$lcssa119 = $122;
    $$lcssa123 = $180;
    label = 28;
    break;
   }
   $121 = $122 + 12 | 0;
   $123 = HEAP32[$121 >> 2] | 0;
   $124 = $122 + 16 | 0;
   if (($123 | 0) == (HEAP32[$124 >> 2] | 0)) $$0$i$i18 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 36 >> 2] & 63]($122) | 0; else $$0$i$i18 = HEAP32[$123 >> 2] | 0;
   $135 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 15]($4, $$0$i$i18) | 0;
   if (($135 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 15]($4, HEAP32[$$0$ph >> 2] | 0) | 0)) {
    $$lcssa120 = $122;
    $$lcssa128 = $121;
    $$lcssa129 = $124;
    label = 57;
    break;
   }
   HEAP32[$__err >> 2] = 4;
   $6 = 4;
  }
  L33 : do if ((label | 0) == 20) {
   label = 0;
   $42 = $$0$ph + 4 | 0;
   if (($42 | 0) == ($__fmte | 0)) {
    $$lcssa118$lcssa = $$lcssa118;
    label = 21;
    break L1;
   }
   $48 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($4, HEAP32[$42 >> 2] | 0, 0) | 0;
   switch ($48 << 24 >> 24) {
   case 48:
   case 69:
    {
     $49 = $$0$ph + 8 | 0;
     if (($49 | 0) == ($__fmte | 0)) {
      $$lcssa118$lcssa121 = $$lcssa118;
      label = 26;
      break L1;
     }
     $61 = $42;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($4, HEAP32[$49 >> 2] | 0, 0) | 0;
     $__opt$0 = $48;
     break;
    }
   default:
    {
     $61 = $$0$ph;
     $__cmd$0 = $48;
     $__opt$0 = 0;
    }
   }
   $58 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$1 >> 2] = $$lcssa114;
   HEAP32[$2 >> 2] = $$lcssa125;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$__b >> 2] = FUNCTION_TABLE_iiiiiiiii[$58 & 15]($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0;
   $$0$ph$be = $61 + 8 | 0;
  } else if ((label | 0) == 28) {
   label = 0;
   $$0$pn = $$0$ph;
   while (1) {
    $$3 = $$0$pn + 4 | 0;
    if (($$3 | 0) == ($__fmte | 0)) {
     $$3$lcssa = $__fmte;
     break;
    }
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, 8192, HEAP32[$$3 >> 2] | 0) | 0) $$0$pn = $$3; else {
     $$3$lcssa = $$3;
     break;
    }
   }
   $$pre$i$i$i8 = $$lcssa119;
   $$pre$i3$i$i14 = $$lcssa123;
   $85 = $$lcssa123;
   while (1) {
    if (!$$pre$i$i$i8) {
     $100 = 0;
     $98 = 1;
    } else {
     $75 = HEAP32[$$pre$i$i$i8 + 12 >> 2] | 0;
     if (($75 | 0) == (HEAP32[$$pre$i$i$i8 + 16 >> 2] | 0)) $$0$i$i$i$i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i8 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i8) | 0; else $$0$i$i$i$i6 = HEAP32[$75 >> 2] | 0;
     if (($$0$i$i$i$i6 | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $100 = 0;
      $98 = 1;
     } else {
      $100 = $$pre$i$i$i8;
      $98 = 0;
     }
    }
    do if (!$85) {
     $$pre$i3$i$i1446 = $$pre$i3$i$i14;
     label = 44;
    } else {
     $88 = HEAP32[$85 + 12 >> 2] | 0;
     if (($88 | 0) == (HEAP32[$85 + 16 >> 2] | 0)) $$0$i$i1$i$i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 36 >> 2] & 63]($85) | 0; else $$0$i$i1$i$i12 = HEAP32[$88 >> 2] | 0;
     if (($$0$i$i1$i$i12 | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      $$pre$i3$i$i1446 = 0;
      label = 44;
      break;
     } else if ($98 ^ ($$pre$i3$i$i14 | 0) == 0) {
      $$pre$i3$i$i1445 = $$pre$i3$i$i14;
      $182 = $$pre$i3$i$i14;
      break;
     } else {
      $$0$ph$be = $$3$lcssa;
      break L33;
     }
    } while (0);
    if ((label | 0) == 44) {
     label = 0;
     if ($98) {
      $$0$ph$be = $$3$lcssa;
      break L33;
     } else {
      $$pre$i3$i$i1445 = $$pre$i3$i$i1446;
      $182 = 0;
     }
    }
    $99 = $100 + 12 | 0;
    $101 = HEAP32[$99 >> 2] | 0;
    $102 = $100 + 16 | 0;
    if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] & 63]($100) | 0; else $$0$i$i = HEAP32[$101 >> 2] | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, 8192, $$0$i$i) | 0)) {
     $$0$ph$be = $$3$lcssa;
     break L33;
    }
    $114 = HEAP32[$99 >> 2] | 0;
    if (($114 | 0) == (HEAP32[$102 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 40 >> 2] & 63]($100) | 0;
     $$pre$i$i$i8 = $100;
     $$pre$i3$i$i14 = $$pre$i3$i$i1445;
     $85 = $182;
     continue;
    } else {
     HEAP32[$99 >> 2] = $114 + 4;
     $$pre$i$i$i8 = $100;
     $$pre$i3$i$i14 = $$pre$i3$i$i1445;
     $85 = $182;
     continue;
    }
   }
  } else if ((label | 0) == 57) {
   label = 0;
   $142 = HEAP32[$$lcssa128 >> 2] | 0;
   if (($142 | 0) == (HEAP32[$$lcssa129 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa120 >> 2] | 0) + 40 >> 2] & 63]($$lcssa120) | 0; else HEAP32[$$lcssa128 >> 2] = $142 + 4;
   $$0$ph$be = $$0$ph + 4 | 0;
  } while (0);
  $$0$ph = $$0$ph$be;
  $$pre = HEAP32[$__err >> 2] | 0;
 }
 if ((label | 0) == 18) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i23 = $$lcssa117;
 } else if ((label | 0) == 21) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i23 = $$lcssa118$lcssa;
 } else if ((label | 0) == 26) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i23 = $$lcssa118$lcssa121;
 }
 if (!$$pre$i$i$i23) {
  $177 = 0;
  $183 = 1;
 } else {
  $152 = HEAP32[$$pre$i$i$i23 + 12 >> 2] | 0;
  if (($152 | 0) == (HEAP32[$$pre$i$i$i23 + 16 >> 2] | 0)) $$0$i$i$i$i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i23 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i23) | 0; else $$0$i$i$i$i21 = HEAP32[$152 >> 2] | 0;
  if (($$0$i$i$i$i21 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $177 = 0;
   $183 = 1;
  } else {
   $177 = $$pre$i$i$i23;
   $183 = 0;
  }
 }
 $162 = HEAP32[$__e >> 2] | 0;
 do if (!$162) label = 75; else {
  $165 = HEAP32[$162 + 12 >> 2] | 0;
  if (($165 | 0) == (HEAP32[$162 + 16 >> 2] | 0)) $$0$i$i1$i$i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$162 >> 2] | 0) + 36 >> 2] & 63]($162) | 0; else $$0$i$i1$i$i27 = HEAP32[$165 >> 2] | 0;
  if (($$0$i$i1$i$i27 | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 75;
   break;
  } else if ($183) break; else {
   label = 77;
   break;
  }
 } while (0);
 if ((label | 0) == 75) if ($183) label = 77;
 if ((label | 0) == 77) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return $177 | 0;
}

function __ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 var $$0$i1 = 0, $$0$i38 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $105 = 0, $106 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $120 = 0, $122 = 0, $128 = 0, $131 = 0, $137 = 0, $140 = 0, $141 = 0, $146 = 0, $147 = 0, $150 = 0, $152 = 0, $155 = 0, $161 = 0, $165 = 0, $173 = 0, $177 = 0, $180 = 0, $182 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $209 = 0, $212 = 0, $218 = 0, $220 = 0, $221 = 0, $229 = 0, $232 = 0, $241 = 0, $243 = 0, $244 = 0, $245 = 0, $258 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $265 = 0, $267 = 0, $268 = 0, $28 = 0, $280 = 0, $285 = 0, $291 = 0, $295 = 0, $3 = 0, $314 = 0, $32 = 0, $320 = 0, $324 = 0, $45 = 0, $46 = 0, $50 = 0, $6 = 0, $82 = 0, $9 = 0, $drect$sroa$16$0 = 0, $drect$sroa$24$0 = 0, $x$010$us = 0, $x2$05$us = 0, $x6$018$us = 0, $y$014$us = 0, $y1$06$us = 0, $y5$022$us = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $2 = $cmd + 16 | 0;
 $3 = HEAP32[$cmd + 12 >> 2] | 0;
 $6 = HEAPU8[$this + 2580 >> 0] | 0;
 L1 : do switch ($6 | 0) {
 case 8:
  {
   $9 = HEAP32[$this + 2584 + (($3 & 255) << 2) >> 2] | 0;
   $20 = HEAP32[$this + 2584 + ((HEAP32[$2 >> 2] & 255) << 2) >> 2] | 0;
   $$0$i1 = $20 << 16 & 16711680 | $20 & 65280 | $20 >>> 16 & 255;
   $$0$i38 = $9 << 16 & 16711680 | $9 & 65280 | $9 >>> 16 & 255;
   break;
  }
 case 15:
  {
   $28 = $3 >>> 7;
   $32 = $3 >>> 2;
   $45 = HEAP32[$2 >> 2] | 0;
   $46 = $45 >>> 7;
   $50 = $45 >>> 2;
   $$0$i1 = $46 & 248 | $45 >>> 12 & 7 | ($50 & 248 | $46 & 7) << 8 | ($45 << 3 & 248 | $50 & 7) << 16;
   $$0$i38 = $28 & 248 | $3 >>> 12 & 7 | ($32 & 248 | $28 & 7) << 8 | ($3 << 3 & 248 | $32 & 7) << 16;
   break;
  }
 case 16:
  {
   $82 = HEAP32[$2 >> 2] | 0;
   $$0$i1 = $82 >>> 8 & 248 | $82 >>> 13 & 7 | ($82 >>> 3 & 252 | $82 >>> 9 & 3) << 8 | ($82 << 3 & 248 | $82 >>> 2 & 7) << 16;
   $$0$i38 = $3 >>> 8 & 248 | $3 >>> 13 & 7 | ($3 >>> 3 & 252 | $3 >>> 9 & 3) << 8 | ($3 << 3 & 248 | $3 >>> 2 & 7) << 16;
   break;
  }
 case 32:
 case 24:
  {
   switch ($6 | 0) {
   case 24:
   case 32:
    {
     $$0$i1 = HEAP32[$2 >> 2] & 16777215;
     $$0$i38 = $3 & 16777215;
     break L1;
     break;
    }
   default:
    _exit(0);
   }
   break;
  }
 default:
  _exit(0);
 } while (0);
 $105 = $this + 52 | 0;
 $106 = HEAP32[$105 >> 2] | 0;
 $112 = ((($106 >>> 16) + 65535 | $106 + 65535) & 32768 | 0) == 0;
 $113 = HEAP16[$clip >> 1] | 0;
 $115 = $113 << 16 >> 16 > 0 ? $113 : 0;
 $118 = HEAP16[$clip + 2 >> 1] | 0;
 $120 = $118 << 16 >> 16 > 0 ? $118 : 0;
 $122 = $112 ? $106 << 16 >> 16 : 0;
 $128 = (HEAPU16[$clip + 4 >> 1] | 0) + ($113 & 65535) << 16 >> 16;
 $131 = $112 ? $106 >> 16 : 0;
 $137 = (HEAPU16[$clip + 6 >> 1] | 0) + ($118 & 65535) << 16 >> 16;
 $140 = (($128 | 0) < ($122 | 0) ? $128 : $122) - ($115 << 16 >> 16) | 0;
 $141 = (($137 | 0) < ($131 | 0) ? $137 : $131) - ($120 << 16 >> 16) | 0;
 $146 = (($141 + 65535 | $140 + 65535) & 32768 | 0) == 0;
 $147 = HEAP16[$cmd >> 1] | 0;
 $150 = ($147 << 16 >> 16 < $115 << 16 >> 16 ? $115 : $147) << 16 >> 16;
 $152 = HEAP16[$cmd + 2 >> 1] | 0;
 $155 = ($152 << 16 >> 16 < $120 << 16 >> 16 ? $120 : $152) << 16 >> 16;
 $161 = (HEAPU16[$cmd + 4 >> 1] | 0) + ($147 & 65535) << 16 >> 16;
 $165 = ($146 ? $140 : 0) + ($115 & 65535) << 16 >> 16;
 $173 = (HEAPU16[$cmd + 6 >> 1] | 0) + ($152 & 65535) << 16 >> 16;
 $177 = ($146 ? $141 : 0) + ($120 & 65535) << 16 >> 16;
 $180 = (($165 | 0) < ($161 | 0) ? $165 : $161) - $150 | 0;
 $182 = (($177 | 0) < ($173 | 0) ? $177 : $173) - $155 | 0;
 $188 = (($182 + 65535 | $180 + 65535) & 32768 | 0) == 0;
 $drect$sroa$16$0 = $188 ? $180 & 65535 : 0;
 $drect$sroa$24$0 = $188 ? $182 & 65535 : 0;
 $192 = $cmd + 8 | 0;
 $193 = HEAP8[$192 >> 0] | 0;
 L11 : do if ((HEAP8[$cmd + 22 >> 0] | 0) == 3) {
  switch ($193 << 24 >> 24) {
  case 90:
  case -16:
   break;
  default:
   break L11;
  }
  switch ($193 & 255 | 0) {
  case 90:
   {
    $195 = $this + 5820 | 0;
    _SDL_LockSurface(HEAP32[$195 >> 2] | 0) | 0;
    $197 = $drect$sroa$24$0 << 16 >> 16 == 0;
    if (!$197) {
     $198 = $drect$sroa$16$0 & 65535;
     if ($drect$sroa$16$0 << 16 >> 16) {
      $200 = $drect$sroa$24$0 & 65535;
      $y$014$us = 0;
      do {
       $201 = ($y$014$us | 0) % 2 | 0;
       $209 = (HEAP32[(HEAP32[$195 >> 2] | 0) + 20 >> 2] | 0) + ((Math_imul(HEAPU16[$105 >> 1] | 0, $y$014$us + $155 | 0) | 0) << 2) | 0;
       $x$010$us = 0;
       do {
        $212 = $209 + ($x$010$us << 2) + ($201 << 2) + ($150 << 2) | 0;
        HEAP32[$212 >> 2] = HEAP32[$212 >> 2] ^ $$0$i1;
        $x$010$us = $x$010$us + 2 | 0;
       } while (($x$010$us | 0) < ($198 | 0));
       $y$014$us = $y$014$us + 1 | 0;
      } while (($y$014$us | 0) != ($200 | 0));
      if (!$197) {
       $218 = $drect$sroa$16$0 & 65535;
       if (($drect$sroa$16$0 & 65535) > 1) {
        $220 = $drect$sroa$24$0 & 65535;
        $y1$06$us = 0;
        do {
         $221 = ($y1$06$us | 0) % 2 | 0;
         $229 = (HEAP32[(HEAP32[$195 >> 2] | 0) + 20 >> 2] | 0) + ((Math_imul(HEAPU16[$105 >> 1] | 0, $y1$06$us + $155 | 0) | 0) << 2) | 0;
         $x2$05$us = 1;
         do {
          $232 = $229 + ($x2$05$us << 2) + ($221 << 2) + ($150 << 2) | 0;
          HEAP32[$232 >> 2] = HEAP32[$232 >> 2] ^ $$0$i38;
          $x2$05$us = $x2$05$us + 2 | 0;
         } while (($x2$05$us | 0) < ($218 | 0));
         $y1$06$us = $y1$06$us + 1 | 0;
        } while (($y1$06$us | 0) != ($220 | 0));
       }
      }
     }
    }
    _SDL_UnlockSurface(HEAP32[$195 >> 2] | 0);
    STACKTOP = sp;
    return;
   }
  case 240:
   {
    HEAP32[$0 >> 2] = $150;
    HEAP32[$0 + 4 >> 2] = $155;
    $241 = $drect$sroa$16$0 & 65535;
    HEAP32[$0 + 8 >> 2] = $241;
    $243 = $drect$sroa$24$0 & 65535;
    HEAP32[$0 + 12 >> 2] = $243;
    $244 = $this + 5820 | 0;
    $245 = HEAP32[$244 >> 2] | 0;
    _SDL_FillRect($245 | 0, $0 | 0, _SDL_MapRGBA(HEAP32[$245 + 4 >> 2] | 0, $$0$i38 >>> 16 & 255 | 0, $$0$i38 >>> 8 & 255 | 0, $$0$i38 & 255 | 0, -1) | 0) | 0;
    _SDL_LockSurface(HEAP32[$244 >> 2] | 0) | 0;
    if ($drect$sroa$24$0 << 16 >> 16) {
     $258 = $$0$i1 >>> 16 & 255;
     $260 = $$0$i1 >>> 8 & 255;
     $261 = $$0$i1 & 255;
     if ($drect$sroa$16$0 << 16 >> 16) {
      $$pre = HEAP32[$244 >> 2] | 0;
      $y5$022$us = 0;
      while (1) {
       $262 = ($y5$022$us | 0) % 2 | 0;
       $263 = $y5$022$us + $155 | 0;
       $265 = $$pre;
       $x6$018$us = 0;
       while (1) {
        $267 = _SDL_MapRGBA(HEAP32[$265 + 4 >> 2] | 0, $258 | 0, $260 | 0, $261 | 0, -1) | 0;
        $268 = HEAP32[$244 >> 2] | 0;
        HEAP32[(HEAP32[$268 + 20 >> 2] | 0) + ((Math_imul(HEAPU16[$105 >> 1] | 0, $263) | 0) << 2) + ($x6$018$us << 2) + ($262 << 2) + ($150 << 2) >> 2] = $267;
        $x6$018$us = $x6$018$us + 2 | 0;
        if (($x6$018$us | 0) >= ($241 | 0)) {
         $$lcssa = $268;
         break;
        } else $265 = $268;
       }
       $280 = $y5$022$us + 1 | 0;
       if (($280 | 0) == ($243 | 0)) break; else {
        $$pre = $$lcssa;
        $y5$022$us = $280;
       }
      }
     }
    }
    _SDL_UnlockSurface(HEAP32[$244 >> 2] | 0);
    STACKTOP = sp;
    return;
   }
  default:
   {
    $285 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(3676420, 3667631, 27) | 0, HEAPU8[$192 >> 0] | 0) | 0;
    HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($285 + (HEAP32[(HEAP32[$285 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
    $291 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
    $295 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$291 >> 2] | 0) + 28 >> 2] & 15]($291, 10) | 0;
    __ZNSt3__16localeD2Ev($0);
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($285, $295) | 0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($285) | 0;
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 switch ($193 & 255 | 0) {
 case 0:
  {
   HEAP32[$0 >> 2] = $155;
   HEAP32[$0 + 4 >> 2] = $150;
   HEAP32[$0 + 8 >> 2] = $drect$sroa$16$0 & 65535;
   HEAP32[$0 + 12 >> 2] = $drect$sroa$24$0 & 65535;
   _SDL_FillRect(HEAP32[$this + 5820 >> 2] | 0, $0 | 0, 255) | 0;
   STACKTOP = sp;
   return;
  }
 case 255:
  {
   HEAP32[$0 >> 2] = $155;
   HEAP32[$0 + 4 >> 2] = $150;
   HEAP32[$0 + 8 >> 2] = $drect$sroa$16$0 & 65535;
   HEAP32[$0 + 12 >> 2] = $drect$sroa$24$0 & 65535;
   _SDL_FillRect(HEAP32[$this + 5820 >> 2] | 0, $0 | 0, -1) | 0;
   STACKTOP = sp;
   return;
  }
 case 170:
 case 90:
 case 85:
  {
   STACKTOP = sp;
   return;
  }
 default:
  {
   $314 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(3676420, 3667659, 10) | 0, HEAPU8[$192 >> 0] | 0) | 0;
   HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($314 + (HEAP32[(HEAP32[$314 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
   $320 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
   $324 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$320 >> 2] | 0) + 28 >> 2] & 15]($320, 10) | 0;
   __ZNSt3__16localeD2Ev($0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($314, $324) | 0;
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($314) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i27 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$3 = 0, $$3$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa116$lcssa = 0, $$lcssa116$lcssa119 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa121 = 0, $$lcssa123 = 0, $$lcssa126 = 0, $$lcssa127 = 0, $$lcssa128 = 0, $$pre = 0, $$pre$i$i$i18 = 0, $$pre$i$i$i9 = 0, $$pre$i2$i$i22 = 0, $$pre$i2$i$i2240 = 0, $$pre$i2$i$i2241 = 0, $0 = 0, $1 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $121 = 0, $128 = 0, $129 = 0, $130 = 0, $143 = 0, $150 = 0, $169 = 0, $170 = 0, $171 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $4 = 0, $43 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $7 = 0, $71 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $__cmd$0 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy1 = sp + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $3;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0;
 HEAP32[$__err >> 2] = 0;
 $5 = $4 + 8 | 0;
 $$0$ph = $__fmtb;
 $$pre = 0;
 L1 : while (1) {
  $6 = ($$0$ph | 0) != ($__fmte | 0);
  $7 = $$pre;
  while (1) {
   $9 = HEAP32[$__b >> 2] | 0;
   if (!($6 & ($7 | 0) == 0)) {
    $$pre$i$i$i9 = $9;
    break L1;
   }
   $11 = $9;
   if (!$9) {
    $185 = $11;
    $22 = 0;
   } else if ((HEAP32[$9 + 12 >> 2] | 0) == (HEAP32[$9 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 36 >> 2] & 63]($9) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $185 = 0;
    $22 = 0;
   } else {
    $185 = $11;
    $22 = $9;
   } else {
    $185 = $11;
    $22 = $9;
   }
   $23 = ($22 | 0) == 0;
   $24 = HEAP32[$__e >> 2] | 0;
   $26 = $24;
   do if (!$24) {
    $186 = $26;
    label = 13;
   } else {
    if ((HEAP32[$24 + 12 >> 2] | 0) == (HEAP32[$24 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] & 63]($24) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $186 = 0;
     label = 13;
     break;
    }
    if ($23) {
     $187 = $24;
     $188 = $26;
    } else {
     $$lcssa115 = $22;
     label = 14;
     break L1;
    }
   } while (0);
   if ((label | 0) == 13) {
    label = 0;
    if ($23) {
     $$lcssa115 = $22;
     label = 14;
     break L1;
    } else {
     $187 = 0;
     $188 = $186;
    }
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 31]($4, HEAP8[$$0$ph >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
    $$lcssa112 = $185;
    $$lcssa116 = $22;
    $$lcssa123 = $188;
    label = 16;
    break;
   }
   $63 = HEAP8[$$0$ph >> 0] | 0;
   if ($63 << 24 >> 24 > -1) {
    $65 = HEAP32[$5 >> 2] | 0;
    if (HEAP16[$65 + ($63 << 24 >> 24 << 1) >> 1] & 8192) {
     $$lcssa117 = $22;
     $$lcssa121 = $187;
     $$lcssa126 = $65;
     label = 25;
     break;
    }
   }
   $128 = $22 + 12 | 0;
   $129 = HEAP32[$128 >> 2] | 0;
   $130 = $22 + 16 | 0;
   if (($129 | 0) == (HEAP32[$130 >> 2] | 0)) $$0$i$i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i27 = HEAPU8[$129 >> 0] | 0;
   $143 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 15]($4, $$0$i$i27 & 255) | 0;
   if ($143 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 15]($4, HEAP8[$$0$ph >> 0] | 0) | 0) << 24 >> 24) {
    $$lcssa118 = $22;
    $$lcssa127 = $128;
    $$lcssa128 = $130;
    label = 53;
    break;
   }
   HEAP32[$__err >> 2] = 4;
   $7 = 4;
  }
  L29 : do if ((label | 0) == 16) {
   label = 0;
   $43 = $$0$ph + 1 | 0;
   if (($43 | 0) == ($__fmte | 0)) {
    $$lcssa116$lcssa = $$lcssa116;
    label = 17;
    break L1;
   }
   $49 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 31]($4, HEAP8[$43 >> 0] | 0, 0) | 0;
   switch ($49 << 24 >> 24) {
   case 48:
   case 69:
    {
     $50 = $$0$ph + 2 | 0;
     if (($50 | 0) == ($__fmte | 0)) {
      $$lcssa116$lcssa119 = $$lcssa116;
      label = 22;
      break L1;
     }
     $62 = $43;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 31]($4, HEAP8[$50 >> 0] | 0, 0) | 0;
     $__opt$0 = $49;
     break;
    }
   default:
    {
     $62 = $$0$ph;
     $__cmd$0 = $49;
     $__opt$0 = 0;
    }
   }
   $59 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$1 >> 2] = $$lcssa112;
   HEAP32[$2 >> 2] = $$lcssa123;
   HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$__b >> 2] = FUNCTION_TABLE_iiiiiiiii[$59 & 15]($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0) | 0;
   $$0$ph$be = $62 + 2 | 0;
  } else if ((label | 0) == 25) {
   label = 0;
   $$0$pn = $$0$ph;
   while (1) {
    $$3 = $$0$pn + 1 | 0;
    if (($$3 | 0) == ($__fmte | 0)) {
     $$3$lcssa = $__fmte;
     break;
    }
    $71 = HEAP8[$$3 >> 0] | 0;
    if ($71 << 24 >> 24 <= -1) {
     $$3$lcssa = $$3;
     break;
    }
    if (!(HEAP16[$$lcssa126 + ($71 << 24 >> 24 << 1) >> 1] & 8192)) {
     $$3$lcssa = $$3;
     break;
    } else $$0$pn = $$3;
   }
   $$pre$i$i$i18 = $$lcssa117;
   $$pre$i2$i$i22 = $$lcssa121;
   $90 = $$lcssa121;
   while (1) {
    if (!$$pre$i$i$i18) $88 = 0; else if ((HEAP32[$$pre$i$i$i18 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i18 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i18 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i18) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $88 = 0;
    } else $88 = $$pre$i$i$i18; else $88 = $$pre$i$i$i18;
    $89 = ($88 | 0) == 0;
    do if (!$90) {
     $$pre$i2$i$i2241 = $$pre$i2$i$i22;
     label = 39;
    } else {
     if ((HEAP32[$90 + 12 >> 2] | 0) != (HEAP32[$90 + 16 >> 2] | 0)) if ($89) {
      $$pre$i2$i$i2240 = $$pre$i2$i$i22;
      $189 = $90;
      break;
     } else {
      $$0$ph$be = $$3$lcssa;
      break L29;
     }
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$90 >> 2] | 0) + 36 >> 2] & 63]($90) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      $$pre$i2$i$i2241 = 0;
      label = 39;
      break;
     } else if ($89 ^ ($$pre$i2$i$i22 | 0) == 0) {
      $$pre$i2$i$i2240 = $$pre$i2$i$i22;
      $189 = $$pre$i2$i$i22;
      break;
     } else {
      $$0$ph$be = $$3$lcssa;
      break L29;
     }
    } while (0);
    if ((label | 0) == 39) {
     label = 0;
     if ($89) {
      $$0$ph$be = $$3$lcssa;
      break L29;
     } else {
      $$pre$i2$i$i2240 = $$pre$i2$i$i2241;
      $189 = 0;
     }
    }
    $103 = $88 + 12 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $88 + 16 | 0;
    if (($104 | 0) == (HEAP32[$105 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] & 63]($88) | 0; else $$0$i$i = HEAPU8[$104 >> 0] | 0;
    if (($$0$i$i & 255) << 24 >> 24 <= -1) {
     $$0$ph$be = $$3$lcssa;
     break L29;
    }
    if (!(HEAP16[(HEAP32[$5 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
     $$0$ph$be = $$3$lcssa;
     break L29;
    }
    $121 = HEAP32[$103 >> 2] | 0;
    if (($121 | 0) == (HEAP32[$105 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 40 >> 2] & 63]($88) | 0;
     $$pre$i$i$i18 = $88;
     $$pre$i2$i$i22 = $$pre$i2$i$i2240;
     $90 = $189;
     continue;
    } else {
     HEAP32[$103 >> 2] = $121 + 1;
     $$pre$i$i$i18 = $88;
     $$pre$i2$i$i22 = $$pre$i2$i$i2240;
     $90 = $189;
     continue;
    }
   }
  } else if ((label | 0) == 53) {
   label = 0;
   $150 = HEAP32[$$lcssa127 >> 2] | 0;
   if (($150 | 0) == (HEAP32[$$lcssa128 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa118 >> 2] | 0) + 40 >> 2] & 63]($$lcssa118) | 0; else HEAP32[$$lcssa127 >> 2] = $150 + 1;
   $$0$ph$be = $$0$ph + 1 | 0;
  } while (0);
  $$0$ph = $$0$ph$be;
  $$pre = HEAP32[$__err >> 2] | 0;
 }
 if ((label | 0) == 14) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i9 = $$lcssa115;
 } else if ((label | 0) == 17) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i9 = $$lcssa116$lcssa;
 } else if ((label | 0) == 22) {
  HEAP32[$__err >> 2] = 4;
  $$pre$i$i$i9 = $$lcssa116$lcssa119;
 }
 if (!$$pre$i$i$i9) $169 = 0; else if ((HEAP32[$$pre$i$i$i9 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i9 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i9 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i9) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $169 = 0;
 } else $169 = $$pre$i$i$i9; else $169 = $$pre$i$i$i9;
 $170 = ($169 | 0) == 0;
 $171 = HEAP32[$__e >> 2] | 0;
 do if (!$171) label = 68; else {
  if ((HEAP32[$171 + 12 >> 2] | 0) == (HEAP32[$171 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$171 >> 2] | 0) + 36 >> 2] & 63]($171) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 68;
   break;
  }
  if (!$170) label = 69;
 } while (0);
 if ((label | 0) == 68) if ($170) label = 69;
 if ((label | 0) == 69) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 STACKTOP = sp;
 return $169 | 0;
}

function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$pre$phi32Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $3 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $9 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i13 = 0, $__i$0$i$i$i17 = 0, $__i$0$i$i$i21 = 0, $__i$0$i$i$i25 = 0, $__i$0$i$i$i29 = 0, $__i$0$i$i$i5 = 0, $__i$0$i$i$i9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($__intl) {
  $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679100) | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$13 + 44 >> 2] & 63]($0, $12);
   $16 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $16;
   HEAP8[$__pat + 1 >> 0] = $16 >> 8;
   HEAP8[$__pat + 2 >> 0] = $16 >> 16;
   HEAP8[$__pat + 3 >> 0] = $16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 63]($1, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$1 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$1 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
   $$pre$phiZ2D = $12;
  } else {
   FUNCTION_TABLE_vii[HEAP32[$13 + 40 >> 2] & 63]($2, $12);
   $31 = HEAP32[$2 >> 2] | 0;
   HEAP8[$__pat >> 0] = $31;
   HEAP8[$__pat + 1 >> 0] = $31 >> 8;
   HEAP8[$__pat + 2 >> 0] = $31 >> 16;
   HEAP8[$__pat + 3 >> 0] = $31 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 63]($3, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$3 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   $__i$0$i$i$i5 = 0;
   while (1) {
    if (($__i$0$i$i$i5 | 0) == 3) break;
    HEAP32[$3 + ($__i$0$i$i$i5 << 2) >> 2] = 0;
    $__i$0$i$i$i5 = $__i$0$i$i$i5 + 1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $$pre$phiZ2D = $12;
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 63]($12) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 63]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 20 >> 2] & 63]($4, $12);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $__i$0$i$i$i9 = 0;
  while (1) {
   if (($__i$0$i$i$i9 | 0) == 3) break;
   HEAP32[$4 + ($__i$0$i$i$i9 << 2) >> 2] = 0;
   $__i$0$i$i$i9 = $__i$0$i$i$i9 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 24 >> 2] & 63]($5, $12);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$5 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  $__i$0$i$i$i13 = 0;
  while (1) {
   if (($__i$0$i$i$i13 | 0) == 3) break;
   HEAP32[$5 + ($__i$0$i$i$i13 << 2) >> 2] = 0;
   $__i$0$i$i$i13 = $__i$0$i$i$i13 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 63]($12) | 0;
 } else {
  $80 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679092) | 0;
  $81 = HEAP32[$80 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$81 + 44 >> 2] & 63]($6, $80);
   $84 = HEAP32[$6 >> 2] | 0;
   HEAP8[$__pat >> 0] = $84;
   HEAP8[$__pat + 1 >> 0] = $84 >> 8;
   HEAP8[$__pat + 2 >> 0] = $84 >> 16;
   HEAP8[$__pat + 3 >> 0] = $84 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$80 >> 2] | 0) + 32 >> 2] & 63]($7, $80);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$7 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   $__i$0$i$i$i17 = 0;
   while (1) {
    if (($__i$0$i$i$i17 | 0) == 3) break;
    HEAP32[$7 + ($__i$0$i$i$i17 << 2) >> 2] = 0;
    $__i$0$i$i$i17 = $__i$0$i$i$i17 + 1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $$pre$phi32Z2D = $80;
  } else {
   FUNCTION_TABLE_vii[HEAP32[$81 + 40 >> 2] & 63]($8, $80);
   $99 = HEAP32[$8 >> 2] | 0;
   HEAP8[$__pat >> 0] = $99;
   HEAP8[$__pat + 1 >> 0] = $99 >> 8;
   HEAP8[$__pat + 2 >> 0] = $99 >> 16;
   HEAP8[$__pat + 3 >> 0] = $99 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$80 >> 2] | 0) + 28 >> 2] & 63]($9, $80);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$9 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   $__i$0$i$i$i21 = 0;
   while (1) {
    if (($__i$0$i$i$i21 | 0) == 3) break;
    HEAP32[$9 + ($__i$0$i$i$i21 << 2) >> 2] = 0;
    $__i$0$i$i$i21 = $__i$0$i$i$i21 + 1 | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
   $$pre$phi32Z2D = $80;
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 12 >> 2] & 63]($80) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 16 >> 2] & 63]($80) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi32Z2D >> 2] | 0) + 20 >> 2] & 63]($10, $80);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$10 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  $__i$0$i$i$i25 = 0;
  while (1) {
   if (($__i$0$i$i$i25 | 0) == 3) break;
   HEAP32[$10 + ($__i$0$i$i$i25 << 2) >> 2] = 0;
   $__i$0$i$i$i25 = $__i$0$i$i$i25 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi32Z2D >> 2] | 0) + 24 >> 2] & 63]($11, $80);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$11 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $__i$0$i$i$i29 = 0;
  while (1) {
   if (($__i$0$i$i$i29 | 0) == 3) break;
   HEAP32[$11 + ($__i$0$i$i$i29 << 2) >> 2] = 0;
   $__i$0$i$i$i29 = $__i$0$i$i$i29 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$80 >> 2] | 0) + 36 >> 2] & 63]($80) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i5 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i11 = 0, $$026 = 0, $$lcssa = 0, $$pre$i3$i$i13 = 0, $$pre$i3$i$i13$lcssa = 0, $101 = 0, $102 = 0, $108 = 0, $115 = 0, $122 = 0, $123 = 0, $124 = 0, $137 = 0, $144 = 0, $15 = 0, $158 = 0, $21 = 0, $24 = 0, $3 = 0, $34 = 0, $37 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $66 = 0, $77 = 0, $8 = 0, $90 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $3 = ($__ke - $__kb | 0) / 12 | 0;
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0;
  if (!$5) __ZSt17__throw_bad_allocv(); else {
   $__stat_hold$sroa$0$0 = $5;
   $__status$0 = $5;
  }
 } else {
  $__stat_hold$sroa$0$0 = 0;
  $__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;
 $__n_does_match$0 = 0;
 $__n_might_match$0 = $3;
 $__st$0 = $__status$0;
 while (1) {
  if (($__ky$0 | 0) == ($__ke | 0)) {
   $__n_does_match$0$lcssa = $__n_does_match$0;
   $__n_might_match$0$lcssa = $__n_might_match$0;
   break;
  }
  $8 = HEAP8[$__ky$0 >> 0] | 0;
  if (!($8 & 1)) $15 = ($8 & 255) >>> 1; else $15 = HEAP32[$__ky$0 + 4 >> 2] | 0;
  if (!$15) {
   HEAP8[$__st$0 >> 0] = 2;
   $__n_does_match$1 = $__n_does_match$0 + 1 | 0;
   $__n_might_match$1 = $__n_might_match$0 + -1 | 0;
  } else {
   HEAP8[$__st$0 >> 0] = 1;
   $__n_does_match$1 = $__n_does_match$0;
   $__n_might_match$1 = $__n_might_match$0;
  }
  $__ky$0 = $__ky$0 + 12 | 0;
  $__n_does_match$0 = $__n_does_match$1;
  $__n_might_match$0 = $__n_might_match$1;
  $__st$0 = $__st$0 + 1 | 0;
 }
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0$lcssa;
 $__n_might_match$2 = $__n_might_match$0$lcssa;
 L17 : while (1) {
  $21 = HEAP32[$__b >> 2] | 0;
  do if (!$21) $48 = 1; else {
   $24 = HEAP32[$21 + 12 >> 2] | 0;
   if (($24 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $$0$i$i$i$i = HEAP32[$24 >> 2] | 0;
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $48 = 1;
    break;
   } else {
    $48 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $34 = HEAP32[$__e >> 2] | 0;
  if (!$34) {
   $$pre$i3$i$i13 = 0;
   $47 = 1;
  } else {
   $37 = HEAP32[$34 + 12 >> 2] | 0;
   if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 63]($34) | 0; else $$0$i$i1$i$i = HEAP32[$37 >> 2] | 0;
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    $$pre$i3$i$i13 = 0;
    $47 = 1;
   } else {
    $$pre$i3$i$i13 = $34;
    $47 = 0;
   }
  }
  $51 = HEAP32[$__b >> 2] | 0;
  if (!(($__n_might_match$2 | 0) != 0 & ($48 ^ $47))) {
   $$lcssa = $51;
   $$pre$i3$i$i13$lcssa = $$pre$i3$i$i13;
   break;
  }
  $77 = HEAP32[$51 + 12 >> 2] | 0;
  if (($77 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 63]($51) | 0; else $$0$i$i = HEAP32[$77 >> 2] | 0;
  if ($__case_sensitive) $__c$0 = $$0$i$i; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, $$0$i$i) | 0;
  $90 = $__indx$0 + 1 | 0;
  $__consume$0$off0 = 0;
  $__ky1$0 = $__kb;
  $__n_does_match$3 = $__n_does_match$2;
  $__n_might_match$3 = $__n_might_match$2;
  $__st$1 = $__status$0;
  while (1) {
   if (($__ky1$0 | 0) == ($__ke | 0)) break;
   do if ((HEAP8[$__st$1 >> 0] | 0) == 1) {
    if (!(HEAP8[$__ky1$0 >> 0] & 1)) $101 = $__ky1$0 + 4 | 0; else $101 = HEAP32[$__ky1$0 + 8 >> 2] | 0;
    $102 = HEAP32[$101 + ($__indx$0 << 2) >> 2] | 0;
    if ($__case_sensitive) $__kc$0 = $102; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, $102) | 0;
    if (($__c$0 | 0) != ($__kc$0 | 0)) {
     HEAP8[$__st$1 >> 0] = 0;
     $__consume$2$off0 = $__consume$0$off0;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
     break;
    }
    $108 = HEAP8[$__ky1$0 >> 0] | 0;
    if (!($108 & 1)) $115 = ($108 & 255) >>> 1; else $115 = HEAP32[$__ky1$0 + 4 >> 2] | 0;
    if (($115 | 0) == ($90 | 0)) {
     HEAP8[$__st$1 >> 0] = 2;
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3 + 1 | 0;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
    } else {
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3;
    }
   } else {
    $__consume$2$off0 = $__consume$0$off0;
    $__n_does_match$5 = $__n_does_match$3;
    $__n_might_match$5 = $__n_might_match$3;
   } while (0);
   $__consume$0$off0 = $__consume$2$off0;
   $__ky1$0 = $__ky1$0 + 12 | 0;
   $__n_does_match$3 = $__n_does_match$5;
   $__n_might_match$3 = $__n_might_match$5;
   $__st$1 = $__st$1 + 1 | 0;
  }
  if (!$__consume$0$off0) {
   $__indx$0 = $90;
   $__n_does_match$2 = $__n_does_match$3;
   $__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  $122 = HEAP32[$__b >> 2] | 0;
  $123 = $122 + 12 | 0;
  $124 = HEAP32[$123 >> 2] | 0;
  if (($124 | 0) == (HEAP32[$122 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 40 >> 2] & 63]($122) | 0; else HEAP32[$123 >> 2] = $124 + 4;
  if (($__n_does_match$3 + $__n_might_match$3 | 0) >>> 0 > 1) {
   $__ky2$0 = $__kb;
   $__n_does_match$6 = $__n_does_match$3;
   $__st$2 = $__status$0;
  } else {
   $__indx$0 = $90;
   $__n_does_match$2 = $__n_does_match$3;
   $__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  while (1) {
   if (($__ky2$0 | 0) == ($__ke | 0)) {
    $__indx$0 = $90;
    $__n_does_match$2 = $__n_does_match$6;
    $__n_might_match$2 = $__n_might_match$3;
    continue L17;
   }
   if ((HEAP8[$__st$2 >> 0] | 0) == 2) {
    $137 = HEAP8[$__ky2$0 >> 0] | 0;
    if (!($137 & 1)) $144 = ($137 & 255) >>> 1; else $144 = HEAP32[$__ky2$0 + 4 >> 2] | 0;
    if (($144 | 0) == ($90 | 0)) $__n_does_match$7 = $__n_does_match$6; else {
     HEAP8[$__st$2 >> 0] = 0;
     $__n_does_match$7 = $__n_does_match$6 + -1 | 0;
    }
   } else $__n_does_match$7 = $__n_does_match$6;
   $__ky2$0 = $__ky2$0 + 12 | 0;
   $__n_does_match$6 = $__n_does_match$7;
   $__st$2 = $__st$2 + 1 | 0;
  }
 }
 do if (!$$lcssa) $158 = 1; else {
  $54 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($54 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i5 = HEAP32[$54 >> 2] | 0;
  if (($$0$i$i$i$i5 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $158 = 1;
   break;
  } else {
   $158 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$$pre$i3$i$i13$lcssa) label = 41; else {
  $66 = HEAP32[$$pre$i3$i$i13$lcssa + 12 >> 2] | 0;
  if (($66 | 0) == (HEAP32[$$pre$i3$i$i13$lcssa + 16 >> 2] | 0)) $$0$i$i1$i$i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i13$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i13$lcssa) | 0; else $$0$i$i1$i$i11 = HEAP32[$66 >> 2] | 0;
  if (($$0$i$i1$i$i11 | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  } else if ($158) {
   $$0 = $__kb;
   $__st$3 = $__status$0;
   break;
  } else {
   label = 77;
   break;
  }
 } while (0);
 if ((label | 0) == 41) if ($158) label = 77; else {
  $$0 = $__kb;
  $__st$3 = $__status$0;
 }
 if ((label | 0) == 77) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
  $$0 = $__kb;
  $__st$3 = $__status$0;
 }
 while (1) {
  if (($$0 | 0) == ($__ke | 0)) {
   label = 81;
   break;
  }
  if ((HEAP8[$__st$3 >> 0] | 0) == 2) {
   $$026 = $$0;
   break;
  }
  $$0 = $$0 + 12 | 0;
  $__st$3 = $__st$3 + 1 | 0;
 }
 if ((label | 0) == 81) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$026 = $__ke;
 }
 _free($__stat_hold$sroa$0$0);
 STACKTOP = sp;
 return $$026 | 0;
}

function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $95 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i11 = 0, $__i$0$i$i$i15 = 0, $__i$0$i$i$i19 = 0, $__i$0$i$i$i23 = 0, $__i$0$i$i$i27 = 0, $__i$0$i$i$i5 = 0, $__i$0$i$i$i8 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($__intl) {
  $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679116) | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$13 + 44 >> 2] & 63]($0, $12);
   $16 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $16;
   HEAP8[$__pat + 1 >> 0] = $16 >> 8;
   HEAP8[$__pat + 2 >> 0] = $16 >> 16;
   HEAP8[$__pat + 3 >> 0] = $16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 63]($1, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$1 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$1 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$13 + 40 >> 2] & 63]($2, $12);
   $30 = HEAP32[$2 >> 2] | 0;
   HEAP8[$__pat >> 0] = $30;
   HEAP8[$__pat + 1 >> 0] = $30 >> 8;
   HEAP8[$__pat + 2 >> 0] = $30 >> 16;
   HEAP8[$__pat + 3 >> 0] = $30 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 63]($3, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$3 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   $__i$0$i$i$i5 = 0;
   while (1) {
    if (($__i$0$i$i$i5 | 0) == 3) break;
    HEAP32[$3 + ($__i$0$i$i$i5 << 2) >> 2] = 0;
    $__i$0$i$i$i5 = $__i$0$i$i$i5 + 1 | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 63]($12) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 63]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 63]($4, $12);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$4 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $__i$0$i$i$i8 = 0;
  while (1) {
   if (($__i$0$i$i$i8 | 0) == 3) break;
   HEAP32[$4 + ($__i$0$i$i$i8 << 2) >> 2] = 0;
   $__i$0$i$i$i8 = $__i$0$i$i$i8 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 63]($5, $12);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$5 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  $__i$0$i$i$i11 = 0;
  while (1) {
   if (($__i$0$i$i$i11 | 0) == 3) break;
   HEAP32[$5 + ($__i$0$i$i$i11 << 2) >> 2] = 0;
   $__i$0$i$i$i11 = $__i$0$i$i$i11 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 63]($12) | 0;
 } else {
  $77 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679108) | 0;
  $78 = HEAP32[$77 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$78 + 44 >> 2] & 63]($6, $77);
   $81 = HEAP32[$6 >> 2] | 0;
   HEAP8[$__pat >> 0] = $81;
   HEAP8[$__pat + 1 >> 0] = $81 >> 8;
   HEAP8[$__pat + 2 >> 0] = $81 >> 16;
   HEAP8[$__pat + 3 >> 0] = $81 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 32 >> 2] & 63]($7, $77);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$7 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   $__i$0$i$i$i15 = 0;
   while (1) {
    if (($__i$0$i$i$i15 | 0) == 3) break;
    HEAP32[$7 + ($__i$0$i$i$i15 << 2) >> 2] = 0;
    $__i$0$i$i$i15 = $__i$0$i$i$i15 + 1 | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$78 + 40 >> 2] & 63]($8, $77);
   $95 = HEAP32[$8 >> 2] | 0;
   HEAP8[$__pat >> 0] = $95;
   HEAP8[$__pat + 1 >> 0] = $95 >> 8;
   HEAP8[$__pat + 2 >> 0] = $95 >> 16;
   HEAP8[$__pat + 3 >> 0] = $95 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 28 >> 2] & 63]($9, $77);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn >> 2] = HEAP32[$9 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   $__i$0$i$i$i19 = 0;
   while (1) {
    if (($__i$0$i$i$i19 | 0) == 3) break;
    HEAP32[$9 + ($__i$0$i$i$i19 << 2) >> 2] = 0;
    $__i$0$i$i$i19 = $__i$0$i$i$i19 + 1 | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 12 >> 2] & 63]($77) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 16 >> 2] & 63]($77) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 20 >> 2] & 63]($10, $77);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$10 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  $__i$0$i$i$i23 = 0;
  while (1) {
   if (($__i$0$i$i$i23 | 0) == 3) break;
   HEAP32[$10 + ($__i$0$i$i$i23 << 2) >> 2] = 0;
   $__i$0$i$i$i23 = $__i$0$i$i$i23 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$77 >> 2] | 0) + 24 >> 2] & 63]($11, $77);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$11 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $__i$0$i$i$i27 = 0;
  while (1) {
   if (($__i$0$i$i$i27 | 0) == 3) break;
   HEAP32[$11 + ($__i$0$i$i$i27 << 2) >> 2] = 0;
   $__i$0$i$i$i27 = $__i$0$i$i$i27 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] & 63]($77) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0 = 0, $$0$i$i = 0, $$022 = 0, $$lcssa = 0, $$lcssa36 = 0, $$pre$i2$i$i10 = 0, $$pre$i2$i$i10$lcssa = 0, $101 = 0, $102 = 0, $108 = 0, $115 = 0, $122 = 0, $123 = 0, $124 = 0, $137 = 0, $144 = 0, $15 = 0, $21 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $47 = 0, $5 = 0, $50 = 0, $62 = 0, $63 = 0, $75 = 0, $8 = 0, $85 = 0, $90 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$2$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_does_match$7 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$5 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__stat_hold$sroa$0$0 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $3 = ($__ke - $__kb | 0) / 12 | 0;
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0;
  if (!$5) __ZSt17__throw_bad_allocv(); else {
   $__stat_hold$sroa$0$0 = $5;
   $__status$0 = $5;
  }
 } else {
  $__stat_hold$sroa$0$0 = 0;
  $__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;
 $__n_does_match$0 = 0;
 $__n_might_match$0 = $3;
 $__st$0 = $__status$0;
 while (1) {
  if (($__ky$0 | 0) == ($__ke | 0)) {
   $__n_does_match$0$lcssa = $__n_does_match$0;
   $__n_might_match$0$lcssa = $__n_might_match$0;
   break;
  }
  $8 = HEAP8[$__ky$0 >> 0] | 0;
  if (!($8 & 1)) $15 = ($8 & 255) >>> 1; else $15 = HEAP32[$__ky$0 + 4 >> 2] | 0;
  if (!$15) {
   HEAP8[$__st$0 >> 0] = 2;
   $__n_does_match$1 = $__n_does_match$0 + 1 | 0;
   $__n_might_match$1 = $__n_might_match$0 + -1 | 0;
  } else {
   HEAP8[$__st$0 >> 0] = 1;
   $__n_does_match$1 = $__n_does_match$0;
   $__n_might_match$1 = $__n_might_match$0;
  }
  $__ky$0 = $__ky$0 + 12 | 0;
  $__n_does_match$0 = $__n_does_match$1;
  $__n_might_match$0 = $__n_might_match$1;
  $__st$0 = $__st$0 + 1 | 0;
 }
 $__indx$0 = 0;
 $__n_does_match$2 = $__n_does_match$0$lcssa;
 $__n_might_match$2 = $__n_might_match$0$lcssa;
 L17 : while (1) {
  $21 = HEAP32[$__b >> 2] | 0;
  do if (!$21) $33 = 0; else if ((HEAP32[$21 + 12 >> 2] | 0) == (HEAP32[$21 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $33 = 0;
   break;
  } else {
   $33 = HEAP32[$__b >> 2] | 0;
   break;
  } else $33 = $21; while (0);
  $34 = ($33 | 0) == 0;
  $35 = HEAP32[$__e >> 2] | 0;
  if (!$35) $$pre$i2$i$i10 = 0; else if ((HEAP32[$35 + 12 >> 2] | 0) == (HEAP32[$35 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 63]($35) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   $$pre$i2$i$i10 = 0;
  } else $$pre$i2$i$i10 = $35; else $$pre$i2$i$i10 = $35;
  $47 = ($$pre$i2$i$i10 | 0) == 0;
  $50 = HEAP32[$__b >> 2] | 0;
  if (!(($__n_might_match$2 | 0) != 0 & ($34 ^ $47))) {
   $$lcssa = $47;
   $$lcssa36 = $50;
   $$pre$i2$i$i10$lcssa = $$pre$i2$i$i10;
   break;
  }
  $75 = HEAP32[$50 + 12 >> 2] | 0;
  if (($75 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 63]($50) | 0; else $$0$i$i = HEAPU8[$75 >> 0] | 0;
  $85 = $$0$i$i & 255;
  if ($__case_sensitive) $__c$0 = $85; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 15]($__ct, $85) | 0;
  $90 = $__indx$0 + 1 | 0;
  $__consume$0$off0 = 0;
  $__ky1$0 = $__kb;
  $__n_does_match$3 = $__n_does_match$2;
  $__n_might_match$3 = $__n_might_match$2;
  $__st$1 = $__status$0;
  while (1) {
   if (($__ky1$0 | 0) == ($__ke | 0)) break;
   do if ((HEAP8[$__st$1 >> 0] | 0) == 1) {
    if (!(HEAP8[$__ky1$0 >> 0] & 1)) $101 = $__ky1$0 + 1 | 0; else $101 = HEAP32[$__ky1$0 + 8 >> 2] | 0;
    $102 = HEAP8[$101 + $__indx$0 >> 0] | 0;
    if ($__case_sensitive) $__kc$0 = $102; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 15]($__ct, $102) | 0;
    if ($__c$0 << 24 >> 24 != $__kc$0 << 24 >> 24) {
     HEAP8[$__st$1 >> 0] = 0;
     $__consume$2$off0 = $__consume$0$off0;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
     break;
    }
    $108 = HEAP8[$__ky1$0 >> 0] | 0;
    if (!($108 & 1)) $115 = ($108 & 255) >>> 1; else $115 = HEAP32[$__ky1$0 + 4 >> 2] | 0;
    if (($115 | 0) == ($90 | 0)) {
     HEAP8[$__st$1 >> 0] = 2;
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3 + 1 | 0;
     $__n_might_match$5 = $__n_might_match$3 + -1 | 0;
    } else {
     $__consume$2$off0 = 1;
     $__n_does_match$5 = $__n_does_match$3;
     $__n_might_match$5 = $__n_might_match$3;
    }
   } else {
    $__consume$2$off0 = $__consume$0$off0;
    $__n_does_match$5 = $__n_does_match$3;
    $__n_might_match$5 = $__n_might_match$3;
   } while (0);
   $__consume$0$off0 = $__consume$2$off0;
   $__ky1$0 = $__ky1$0 + 12 | 0;
   $__n_does_match$3 = $__n_does_match$5;
   $__n_might_match$3 = $__n_might_match$5;
   $__st$1 = $__st$1 + 1 | 0;
  }
  if (!$__consume$0$off0) {
   $__indx$0 = $90;
   $__n_does_match$2 = $__n_does_match$3;
   $__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  $122 = HEAP32[$__b >> 2] | 0;
  $123 = $122 + 12 | 0;
  $124 = HEAP32[$123 >> 2] | 0;
  if (($124 | 0) == (HEAP32[$122 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$122 >> 2] | 0) + 40 >> 2] & 63]($122) | 0; else HEAP32[$123 >> 2] = $124 + 1;
  if (($__n_does_match$3 + $__n_might_match$3 | 0) >>> 0 > 1) {
   $__ky2$0 = $__kb;
   $__n_does_match$6 = $__n_does_match$3;
   $__st$2 = $__status$0;
  } else {
   $__indx$0 = $90;
   $__n_does_match$2 = $__n_does_match$3;
   $__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  while (1) {
   if (($__ky2$0 | 0) == ($__ke | 0)) {
    $__indx$0 = $90;
    $__n_does_match$2 = $__n_does_match$6;
    $__n_might_match$2 = $__n_might_match$3;
    continue L17;
   }
   if ((HEAP8[$__st$2 >> 0] | 0) == 2) {
    $137 = HEAP8[$__ky2$0 >> 0] | 0;
    if (!($137 & 1)) $144 = ($137 & 255) >>> 1; else $144 = HEAP32[$__ky2$0 + 4 >> 2] | 0;
    if (($144 | 0) == ($90 | 0)) $__n_does_match$7 = $__n_does_match$6; else {
     HEAP8[$__st$2 >> 0] = 0;
     $__n_does_match$7 = $__n_does_match$6 + -1 | 0;
    }
   } else $__n_does_match$7 = $__n_does_match$6;
   $__ky2$0 = $__ky2$0 + 12 | 0;
   $__n_does_match$6 = $__n_does_match$7;
   $__st$2 = $__st$2 + 1 | 0;
  }
 }
 do if (!$$lcssa36) $62 = 0; else if ((HEAP32[$$lcssa36 + 12 >> 2] | 0) == (HEAP32[$$lcssa36 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa36 >> 2] | 0) + 36 >> 2] & 63]($$lcssa36) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $62 = 0;
  break;
 } else {
  $62 = HEAP32[$__b >> 2] | 0;
  break;
 } else $62 = $$lcssa36; while (0);
 $63 = ($62 | 0) == 0;
 do if ($$lcssa) label = 34; else {
  if ((HEAP32[$$pre$i2$i$i10$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i10$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i10$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i10$lcssa) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 34;
   break;
  }
  if ($63) {
   $$0 = $__kb;
   $__st$3 = $__status$0;
  } else label = 69;
 } while (0);
 if ((label | 0) == 34) if ($63) label = 69; else {
  $$0 = $__kb;
  $__st$3 = $__status$0;
 }
 if ((label | 0) == 69) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
  $$0 = $__kb;
  $__st$3 = $__status$0;
 }
 while (1) {
  if (($$0 | 0) == ($__ke | 0)) {
   label = 73;
   break;
  }
  if ((HEAP8[$__st$3 >> 0] | 0) == 2) {
   $$022 = $$0;
   break;
  }
  $$0 = $$0 + 12 | 0;
  $__st$3 = $__st$3 + 1 | 0;
 }
 if ((label | 0) == 73) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$022 = $__ke;
 }
 _free($__stat_hold$sroa$0$0);
 STACKTOP = sp;
 return $$022 | 0;
}

function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $75 = 0, $79 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i11 = 0, $__i$0$i$i$i15 = 0, $__i$0$i$i$i19 = 0, $__i$0$i$i$i23 = 0, $__i$0$i$i$i27 = 0, $__i$0$i$i$i3 = 0, $__i$0$i$i$i7 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 52 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if ($__intl) {
  $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679100) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 44 >> 2] & 63]($0, $10);
  $14 = HEAP32[$0 >> 2] | 0;
  HEAP8[$__pat >> 0] = $14;
  HEAP8[$__pat + 1 >> 0] = $14 >> 8;
  HEAP8[$__pat + 2 >> 0] = $14 >> 16;
  HEAP8[$__pat + 3 >> 0] = $14 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 32 >> 2] & 63]($1, $10);
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn + 1 >> 0] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn >> 2] = HEAP32[$1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $__i$0$i$i$i = 0;
  while (1) {
   if (($__i$0$i$i$i | 0) == 3) break;
   HEAP32[$1 + ($__i$0$i$i$i << 2) >> 2] = 0;
   $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 63]($2, $10);
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn + 1 >> 0] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0);
  HEAP32[$__psn >> 2] = HEAP32[$2 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  $__i$0$i$i$i3 = 0;
  while (1) {
   if (($__i$0$i$i$i3 | 0) == 3) break;
   HEAP32[$2 + ($__i$0$i$i$i3 << 2) >> 2] = 0;
   $__i$0$i$i$i3 = $__i$0$i$i$i3 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 63]($10) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 63]($3, $10);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$3 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $__i$0$i$i$i7 = 0;
  while (1) {
   if (($__i$0$i$i$i7 | 0) == 3) break;
   HEAP32[$3 + ($__i$0$i$i$i7 << 2) >> 2] = 0;
   $__i$0$i$i$i7 = $__i$0$i$i$i7 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 63]($4, $10);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $__i$0$i$i$i11 = 0;
  while (1) {
   if (($__i$0$i$i$i11 | 0) == 3) break;
   HEAP32[$4 + ($__i$0$i$i$i11 << 2) >> 2] = 0;
   $__i$0$i$i$i11 = $__i$0$i$i$i11 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0;
 } else {
  $75 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679092) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 44 >> 2] & 63]($5, $75);
  $79 = HEAP32[$5 >> 2] | 0;
  HEAP8[$__pat >> 0] = $79;
  HEAP8[$__pat + 1 >> 0] = $79 >> 8;
  HEAP8[$__pat + 2 >> 0] = $79 >> 16;
  HEAP8[$__pat + 3 >> 0] = $79 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 32 >> 2] & 63]($6, $75);
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn + 1 >> 0] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn >> 2] = HEAP32[$6 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  $__i$0$i$i$i15 = 0;
  while (1) {
   if (($__i$0$i$i$i15 | 0) == 3) break;
   HEAP32[$6 + ($__i$0$i$i$i15 << 2) >> 2] = 0;
   $__i$0$i$i$i15 = $__i$0$i$i$i15 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 28 >> 2] & 63]($7, $75);
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn + 1 >> 0] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0);
  HEAP32[$__psn >> 2] = HEAP32[$7 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  $__i$0$i$i$i19 = 0;
  while (1) {
   if (($__i$0$i$i$i19 | 0) == 3) break;
   HEAP32[$7 + ($__i$0$i$i$i19 << 2) >> 2] = 0;
   $__i$0$i$i$i19 = $__i$0$i$i$i19 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$75 >> 2] | 0) + 12 >> 2] & 63]($75) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$75 >> 2] | 0) + 16 >> 2] & 63]($75) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 20 >> 2] & 63]($8, $75);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$8 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  $__i$0$i$i$i23 = 0;
  while (1) {
   if (($__i$0$i$i$i23 | 0) == 3) break;
   HEAP32[$8 + ($__i$0$i$i$i23 << 2) >> 2] = 0;
   $__i$0$i$i$i23 = $__i$0$i$i$i23 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$75 >> 2] | 0) + 24 >> 2] & 63]($9, $75);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$9 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  $__i$0$i$i$i27 = 0;
  while (1) {
   if (($__i$0$i$i$i27 | 0) == 3) break;
   HEAP32[$9 + ($__i$0$i$i$i27 << 2) >> 2] = 0;
   $__i$0$i$i$i27 = $__i$0$i$i$i27 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$75 >> 2] | 0) + 36 >> 2] & 63]($75) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $72 = 0, $76 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i13 = 0, $__i$0$i$i$i17 = 0, $__i$0$i$i$i21 = 0, $__i$0$i$i$i25 = 0, $__i$0$i$i$i3 = 0, $__i$0$i$i$i6 = 0, $__i$0$i$i$i9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 52 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if ($__intl) {
  $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679116) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 44 >> 2] & 63]($0, $10);
  $14 = HEAP32[$0 >> 2] | 0;
  HEAP8[$__pat >> 0] = $14;
  HEAP8[$__pat + 1 >> 0] = $14 >> 8;
  HEAP8[$__pat + 2 >> 0] = $14 >> 16;
  HEAP8[$__pat + 3 >> 0] = $14 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 32 >> 2] & 63]($1, $10);
  if (!(HEAP8[$__nsn >> 0] & 1)) HEAP8[$__nsn >> 0] = 0; else HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
  HEAP32[$__nsn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn >> 2] = HEAP32[$1 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $__i$0$i$i$i = 0;
  while (1) {
   if (($__i$0$i$i$i | 0) == 3) break;
   HEAP32[$1 + ($__i$0$i$i$i << 2) >> 2] = 0;
   $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 63]($2, $10);
  if (!(HEAP8[$__psn >> 0] & 1)) HEAP8[$__psn >> 0] = 0; else HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
  HEAP32[$__psn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0);
  HEAP32[$__psn >> 2] = HEAP32[$2 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  $__i$0$i$i$i3 = 0;
  while (1) {
   if (($__i$0$i$i$i3 | 0) == 3) break;
   HEAP32[$2 + ($__i$0$i$i$i3 << 2) >> 2] = 0;
   $__i$0$i$i$i3 = $__i$0$i$i$i3 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 63]($10) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 63]($3, $10);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$3 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  $__i$0$i$i$i6 = 0;
  while (1) {
   if (($__i$0$i$i$i6 | 0) == 3) break;
   HEAP32[$3 + ($__i$0$i$i$i6 << 2) >> 2] = 0;
   $__i$0$i$i$i6 = $__i$0$i$i$i6 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 63]($4, $10);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$4 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  $__i$0$i$i$i9 = 0;
  while (1) {
   if (($__i$0$i$i$i9 | 0) == 3) break;
   HEAP32[$4 + ($__i$0$i$i$i9 << 2) >> 2] = 0;
   $__i$0$i$i$i9 = $__i$0$i$i$i9 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0;
 } else {
  $72 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679108) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 44 >> 2] & 63]($5, $72);
  $76 = HEAP32[$5 >> 2] | 0;
  HEAP8[$__pat >> 0] = $76;
  HEAP8[$__pat + 1 >> 0] = $76 >> 8;
  HEAP8[$__pat + 2 >> 0] = $76 >> 16;
  HEAP8[$__pat + 3 >> 0] = $76 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 32 >> 2] & 63]($6, $72);
  if (!(HEAP8[$__nsn >> 0] & 1)) HEAP8[$__nsn >> 0] = 0; else HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
  HEAP32[$__nsn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn >> 2] = HEAP32[$6 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  $__i$0$i$i$i13 = 0;
  while (1) {
   if (($__i$0$i$i$i13 | 0) == 3) break;
   HEAP32[$6 + ($__i$0$i$i$i13 << 2) >> 2] = 0;
   $__i$0$i$i$i13 = $__i$0$i$i$i13 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 28 >> 2] & 63]($7, $72);
  if (!(HEAP8[$__psn >> 0] & 1)) HEAP8[$__psn >> 0] = 0; else HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
  HEAP32[$__psn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0);
  HEAP32[$__psn >> 2] = HEAP32[$7 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  $__i$0$i$i$i17 = 0;
  while (1) {
   if (($__i$0$i$i$i17 | 0) == 3) break;
   HEAP32[$7 + ($__i$0$i$i$i17 << 2) >> 2] = 0;
   $__i$0$i$i$i17 = $__i$0$i$i$i17 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 12 >> 2] & 63]($72) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 16 >> 2] & 63]($72) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 20 >> 2] & 63]($8, $72);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp >> 2] = HEAP32[$8 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  $__i$0$i$i$i21 = 0;
  while (1) {
   if (($__i$0$i$i$i21 | 0) == 3) break;
   HEAP32[$8 + ($__i$0$i$i$i21 << 2) >> 2] = 0;
   $__i$0$i$i$i21 = $__i$0$i$i$i21 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 24 >> 2] & 63]($9, $72);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym >> 2] = HEAP32[$9 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  $__i$0$i$i$i25 = 0;
  while (1) {
   if (($__i$0$i$i$i25 | 0) == 3) break;
   HEAP32[$9 + ($__i$0$i$i$i25 << 2) >> 2] = 0;
   $__i$0$i$i$i25 = $__i$0$i$i$i25 + 1 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] & 63]($72) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0, $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$lcssa = 0, $$lcssa102 = 0, $$lcssa88 = 0, $$lcssa89 = 0, $$lcssa90 = 0, $$lcssa94 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $0 = 0, $102 = 0, $108 = 0, $109 = 0, $117 = 0, $119 = 0, $122 = 0, $127 = 0, $129 = 0, $132 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $29 = 0, $34 = 0, $41 = 0, $48 = 0, $55 = 0, $64 = 0, $7 = 0, $72 = 0, $88 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $s$0 = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0;
 $0 = HEAP32[$src >> 2] | 0;
 if (!$st) label = 5; else {
  $2 = HEAP32[$st >> 2] | 0;
  if (!$2) label = 5; else if (!$ws) {
   $$36 = $wn;
   $c$2 = $2;
   $s$3 = $0;
   label = 16;
  } else {
   HEAP32[$st >> 2] = 0;
   $$3 = $ws;
   $$7 = $wn;
   $c$4 = $2;
   $s$8 = $0;
   label = 37;
  }
 }
 if ((label | 0) == 5) if (!$ws) {
  $$03 = $wn;
  $s$0 = $0;
  label = 7;
 } else {
  $$02$ph = $ws;
  $$47$ph = $wn;
  $s$5$ph = $0;
  label = 6;
 }
 L7 : while (1) if ((label | 0) == 6) {
  label = 0;
  if (!$$47$ph) {
   $s$5$lcssa = $s$5$ph;
   label = 26;
   break;
  } else {
   $$0219 = $$02$ph;
   $$4718 = $$47$ph;
   $s$520 = $s$5$ph;
  }
  while (1) {
   $64 = HEAP8[$s$520 >> 0] | 0;
   do if ((($64 & 255) + -1 | 0) >>> 0 < 127) if ($$4718 >>> 0 > 4 & ($s$520 & 3 | 0) == 0) {
    $$1 = $$0219;
    $$5 = $$4718;
    $s$6 = $s$520;
    while (1) {
     $72 = HEAP32[$s$6 >> 2] | 0;
     if (($72 + -16843009 | $72) & -2139062144 | 0) {
      $$1$lcssa = $$1;
      $$5$lcssa = $$5;
      $$lcssa94 = $72;
      $s$6$lcssa = $s$6;
      label = 32;
      break;
     }
     HEAP32[$$1 >> 2] = $72 & 255;
     HEAP32[$$1 + 4 >> 2] = HEAPU8[$s$6 + 1 >> 0];
     HEAP32[$$1 + 8 >> 2] = HEAPU8[$s$6 + 2 >> 0];
     $88 = $s$6 + 4 | 0;
     $91 = $$1 + 16 | 0;
     HEAP32[$$1 + 12 >> 2] = HEAPU8[$s$6 + 3 >> 0];
     $92 = $$5 + -4 | 0;
     if ($92 >>> 0 > 4) {
      $$1 = $91;
      $$5 = $92;
      $s$6 = $88;
     } else {
      $$lcssa96 = $88;
      $$lcssa97 = $91;
      $$lcssa98 = $92;
      label = 31;
      break;
     }
    }
    if ((label | 0) == 31) {
     label = 0;
     $$2 = $$lcssa97;
     $$6 = $$lcssa98;
     $95 = HEAP8[$$lcssa96 >> 0] | 0;
     $s$7 = $$lcssa96;
     break;
    } else if ((label | 0) == 32) {
     label = 0;
     $$2 = $$1$lcssa;
     $$6 = $$5$lcssa;
     $95 = $$lcssa94 & 255;
     $s$7 = $s$6$lcssa;
     break;
    }
   } else {
    $$2 = $$0219;
    $$6 = $$4718;
    $95 = $64;
    $s$7 = $s$520;
   } else {
    $$2 = $$0219;
    $$6 = $$4718;
    $95 = $64;
    $s$7 = $s$520;
   } while (0);
   $94 = $95 & 255;
   if (($94 + -1 | 0) >>> 0 >= 127) {
    $$2$lcssa = $$2;
    $$6$lcssa = $$6;
    $$lcssa102 = $94;
    $s$7$lcssa = $s$7;
    break;
   }
   $98 = $s$7 + 1 | 0;
   HEAP32[$$2 >> 2] = $94;
   $$4718 = $$6 + -1 | 0;
   if (!$$4718) {
    $s$5$lcssa = $98;
    label = 26;
    break L7;
   } else {
    $$0219 = $$2 + 4 | 0;
    $s$520 = $98;
   }
  }
  $102 = $$lcssa102 + -194 | 0;
  if ($102 >>> 0 > 50) {
   $$434 = $$2$lcssa;
   $$833 = $$6$lcssa;
   $s$1035 = $s$7$lcssa;
   label = 48;
   break;
  }
  $$3 = $$2$lcssa;
  $$7 = $$6$lcssa;
  $c$4 = HEAP32[11672 + ($102 << 2) >> 2] | 0;
  $s$8 = $s$7$lcssa + 1 | 0;
  label = 37;
  continue;
 } else if ((label | 0) == 7) {
  label = 0;
  $7 = HEAP8[$s$0 >> 0] | 0;
  if ((($7 & 255) + -1 | 0) >>> 0 < 127) if (!($s$0 & 3)) {
   $14 = HEAP32[$s$0 >> 2] | 0;
   $19 = $14 & 255;
   if (!(($14 + -16843009 | $14) & -2139062144)) {
    $$1415 = $$03;
    $s$116 = $s$0;
    while (1) {
     $20 = $s$116 + 4 | 0;
     $21 = $$1415 + -4 | 0;
     $22 = HEAP32[$20 >> 2] | 0;
     if (!(($22 + -16843009 | $22) & -2139062144)) {
      $$1415 = $21;
      $s$116 = $20;
     } else {
      $$lcssa = $20;
      $$lcssa88 = $21;
      $$lcssa89 = $22;
      break;
     }
    }
    $$25 = $$lcssa88;
    $29 = $$lcssa89 & 255;
    $s$2 = $$lcssa;
   } else {
    $$25 = $$03;
    $29 = $19;
    $s$2 = $s$0;
   }
  } else {
   $$25 = $$03;
   $29 = $7;
   $s$2 = $s$0;
  } else {
   $$25 = $$03;
   $29 = $7;
   $s$2 = $s$0;
  }
  $28 = $29 & 255;
  if (($28 + -1 | 0) >>> 0 < 127) {
   $$03 = $$25 + -1 | 0;
   $s$0 = $s$2 + 1 | 0;
   label = 7;
   continue;
  } else {
   $$25$lcssa = $$25;
   $$lcssa90 = $28;
   $s$2$lcssa = $s$2;
  }
  $34 = $$lcssa90 + -194 | 0;
  if ($34 >>> 0 > 50) {
   $$434 = $ws;
   $$833 = $$25$lcssa;
   $s$1035 = $s$2$lcssa;
   label = 48;
   break;
  }
  $$36 = $$25$lcssa;
  $c$2 = HEAP32[11672 + ($34 << 2) >> 2] | 0;
  $s$3 = $s$2$lcssa + 1 | 0;
  label = 16;
  continue;
 } else if ((label | 0) == 16) {
  label = 0;
  $41 = (HEAPU8[$s$3 >> 0] | 0) >>> 3;
  if (($41 + -16 | $41 + ($c$2 >> 26)) >>> 0 > 7) {
   label = 17;
   break;
  }
  $48 = $s$3 + 1 | 0;
  if (!($c$2 & 33554432)) $s$4 = $48; else {
   if ((HEAP8[$48 >> 0] & -64) << 24 >> 24 != -128) {
    label = 20;
    break;
   }
   $55 = $s$3 + 2 | 0;
   if (!($c$2 & 524288)) $s$4 = $55; else {
    if ((HEAP8[$55 >> 0] & -64) << 24 >> 24 != -128) {
     label = 23;
     break;
    }
    $s$4 = $s$3 + 3 | 0;
   }
  }
  $$03 = $$36 + -1 | 0;
  $s$0 = $s$4;
  label = 7;
  continue;
 } else if ((label | 0) == 37) {
  label = 0;
  $108 = HEAPU8[$s$8 >> 0] | 0;
  $109 = $108 >>> 3;
  if (($109 + -16 | $109 + ($c$4 >> 26)) >>> 0 > 7) {
   label = 38;
   break;
  }
  $117 = $s$8 + 1 | 0;
  $119 = $108 + -128 | $c$4 << 6;
  if (($119 | 0) < 0) {
   $122 = HEAPU8[$117 >> 0] | 0;
   if (($122 & 192 | 0) != 128) {
    label = 41;
    break;
   }
   $127 = $s$8 + 2 | 0;
   $129 = $122 + -128 | $119 << 6;
   if (($129 | 0) < 0) {
    $132 = HEAPU8[$127 >> 0] | 0;
    if (($132 & 192 | 0) != 128) {
     label = 44;
     break;
    }
    $c$5 = $132 + -128 | $129 << 6;
    $s$9 = $s$8 + 3 | 0;
   } else {
    $c$5 = $129;
    $s$9 = $127;
   }
  } else {
   $c$5 = $119;
   $s$9 = $117;
  }
  HEAP32[$$3 >> 2] = $c$5;
  $$02$ph = $$3 + 4 | 0;
  $$47$ph = $$7 + -1 | 0;
  $s$5$ph = $s$9;
  label = 6;
  continue;
 }
 if ((label | 0) == 17) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 20) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 23) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 26) {
  HEAP32[$src >> 2] = $s$5$lcssa;
  $$0 = $wn;
 } else if ((label | 0) == 38) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $c$4;
  $s$10 = $s$8 + -1 | 0;
  label = 47;
 } else if ((label | 0) == 41) {
  $$48 = $$3;
  $s$109 = $s$8 + -1 | 0;
  label = 52;
 } else if ((label | 0) == 44) {
  $$48 = $$3;
  $s$109 = $s$8 + -1 | 0;
  label = 52;
 }
 if ((label | 0) == 47) if (!$c$6) {
  $$434 = $$4;
  $$833 = $$8;
  $s$1035 = $s$10;
  label = 48;
 } else {
  $$48 = $$4;
  $s$109 = $s$10;
  label = 52;
 }
 if ((label | 0) == 48) if (!(HEAP8[$s$1035 >> 0] | 0)) {
  if ($$434 | 0) {
   HEAP32[$$434 >> 2] = 0;
   HEAP32[$src >> 2] = 0;
  }
  $$0 = $wn - $$833 | 0;
 } else {
  $$48 = $$434;
  $s$109 = $s$1035;
  label = 52;
 }
 if ((label | 0) == 52) {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  if (!$$48) $$0 = -1; else {
   HEAP32[$src >> 2] = $s$109;
   $$0 = -1;
  }
 }
 return $$0 | 0;
}

function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$lcssa = 0, $$0$i$i2 = 0, $$0$i$i9 = 0, $$0$i$i9$lcssa = 0, $$01$i$i = 0, $$2 = 0, $$lcssa36 = 0, $$pn = 0, $$sroa$04$0$i = 0, $$sroa$04$0$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $12 = 0, $124 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $134 = 0, $136 = 0, $141 = 0, $142 = 0, $15 = 0, $19 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $5 = 0, $51 = 0, $54 = 0, $55 = 0, $6 = 0, $61 = 0, $64 = 0, $7 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $85 = 0, $87 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $98 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 4 | 0;
 $1 = $__sn + 8 | 0;
 $2 = $__sn + 1 | 0;
 $3 = $__sym + 4 | 0;
 $5 = ($__flags & 512 | 0) == 0;
 $6 = $__sym + 8 | 0;
 $7 = $__sym + 1 | 0;
 $8 = $__ct + 8 | 0;
 $9 = ($__fd | 0) > 0;
 $10 = $__grp + 4 | 0;
 $11 = $__grp + 8 | 0;
 $12 = $__grp + 1 | 0;
 $$0 = $__db;
 $__p$0 = 0;
 while (1) {
  if (($__p$0 | 0) == 4) break;
  L4 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $$2 = $$0;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $29 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 32) | 0;
    $30 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $30 + 1;
    HEAP8[$30 >> 0] = $29;
    $$2 = $$0;
    break;
   }
  case 3:
   {
    $32 = HEAP8[$__sn >> 0] | 0;
    $34 = ($32 & 1) == 0;
    if (!(($34 ? ($32 & 255) >>> 1 : HEAP32[$0 >> 2] | 0) | 0)) $$2 = $$0; else {
     $42 = HEAP8[($34 ? $2 : HEAP32[$1 >> 2] | 0) >> 0] | 0;
     $43 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $43 + 1;
     HEAP8[$43 >> 0] = $42;
     $$2 = $$0;
    }
    break;
   }
  case 2:
   {
    $45 = HEAP8[$__sym >> 0] | 0;
    $47 = ($45 & 1) == 0;
    $51 = $47 ? ($45 & 255) >>> 1 : HEAP32[$3 >> 2] | 0;
    if ($5 | ($51 | 0) == 0) $$2 = $$0; else {
     $54 = $47 ? $7 : HEAP32[$6 >> 2] | 0;
     $55 = $54 + $51 | 0;
     $$0$i$i9 = HEAP32[$__me >> 2] | 0;
     $$sroa$04$0$i8 = $54;
     while (1) {
      if (($$sroa$04$0$i8 | 0) == ($55 | 0)) {
       $$0$i$i9$lcssa = $$0$i$i9;
       break;
      }
      HEAP8[$$0$i$i9 >> 0] = HEAP8[$$sroa$04$0$i8 >> 0] | 0;
      $$0$i$i9 = $$0$i$i9 + 1 | 0;
      $$sroa$04$0$i8 = $$sroa$04$0$i8 + 1 | 0;
     }
     HEAP32[$__me >> 2] = $$0$i$i9$lcssa;
     $$2 = $$0;
    }
    break;
   }
  case 4:
   {
    $61 = HEAP32[$__me >> 2] | 0;
    $$$0 = $__neg ? $$0 + 1 | 0 : $$0;
    $__d$0 = $$$0;
    while (1) {
     if ($__d$0 >>> 0 >= $__de >>> 0) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $64 = HEAP8[$__d$0 >> 0] | 0;
     if ($64 << 24 >> 24 <= -1) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     if (!(HEAP16[(HEAP32[$8 >> 2] | 0) + ($64 << 24 >> 24 << 1) >> 1] & 2048)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $__d$0 = $__d$0 + 1 | 0;
    }
    if ($9) {
     $__d$1 = $__d$0$lcssa;
     $__f$0 = $__fd;
     while (1) {
      $73 = ($__f$0 | 0) > 0;
      if (!($__d$1 >>> 0 > $$$0 >>> 0 & $73)) break;
      $75 = $__d$1 + -1 | 0;
      $76 = HEAP8[$75 >> 0] | 0;
      $77 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $77 + 1;
      HEAP8[$77 >> 0] = $76;
      $__d$1 = $75;
      $__f$0 = $__f$0 + -1 | 0;
     }
     if ($73) $87 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 48) | 0; else $87 = 0;
     $__f$1 = $__f$0;
     while (1) {
      $85 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $85 + 1;
      if (($__f$1 | 0) <= 0) {
       $$lcssa36 = $85;
       break;
      }
      HEAP8[$85 >> 0] = $87;
      $__f$1 = $__f$1 + -1 | 0;
     }
     HEAP8[$$lcssa36 >> 0] = $__dp;
     $__d$2 = $__d$1;
    } else $__d$2 = $__d$0$lcssa;
    L35 : do if (($__d$2 | 0) == ($$$0 | 0)) {
     $93 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 15]($__ct, 48) | 0;
     $94 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $94 + 1;
     HEAP8[$94 >> 0] = $93;
    } else {
     $96 = HEAP8[$__grp >> 0] | 0;
     $98 = ($96 & 1) == 0;
     if (!(($98 ? ($96 & 255) >>> 1 : HEAP32[$10 >> 2] | 0) | 0)) {
      $__d$3 = $__d$2;
      $__gl$0 = -1;
      $__ig$0 = 0;
      $__ng$0 = 0;
     } else {
      $__d$3 = $__d$2;
      $__gl$0 = HEAP8[($98 ? $12 : HEAP32[$11 >> 2] | 0) >> 0] | 0;
      $__ig$0 = 0;
      $__ng$0 = 0;
     }
     while (1) {
      if (($__d$3 | 0) == ($$$0 | 0)) break L35;
      if (($__ng$0 | 0) == ($__gl$0 | 0)) {
       $110 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $110 + 1;
       HEAP8[$110 >> 0] = $__ts;
       $112 = $__ig$0 + 1 | 0;
       $113 = HEAP8[$__grp >> 0] | 0;
       $115 = ($113 & 1) == 0;
       if ($112 >>> 0 < ($115 ? ($113 & 255) >>> 1 : HEAP32[$10 >> 2] | 0) >>> 0) {
        $124 = HEAP8[($115 ? $12 : HEAP32[$11 >> 2] | 0) + $112 >> 0] | 0;
        $__gl$1 = $124 << 24 >> 24 == 127 ? -1 : $124 << 24 >> 24;
        $__ig$1 = $112;
        $__ng$1 = 0;
       } else {
        $__gl$1 = $__ng$0;
        $__ig$1 = $112;
        $__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$0;
       $__ig$1 = $__ig$0;
       $__ng$1 = $__ng$0;
      }
      $127 = $__d$3 + -1 | 0;
      $128 = HEAP8[$127 >> 0] | 0;
      $129 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $129 + 1;
      HEAP8[$129 >> 0] = $128;
      $__d$3 = $127;
      $__gl$0 = $__gl$1;
      $__ig$0 = $__ig$1;
      $__ng$0 = $__ng$1 + 1 | 0;
     }
    } while (0);
    $132 = HEAP32[$__me >> 2] | 0;
    if (($61 | 0) == ($132 | 0)) $$2 = $$$0; else {
     $$0$i$i2 = $132;
     $$01$i$i = $61;
     while (1) {
      $134 = $$0$i$i2 + -1 | 0;
      if ($$01$i$i >>> 0 >= $134 >>> 0) {
       $$2 = $$$0;
       break L4;
      }
      $136 = HEAP8[$$01$i$i >> 0] | 0;
      HEAP8[$$01$i$i >> 0] = HEAP8[$134 >> 0] | 0;
      HEAP8[$134 >> 0] = $136;
      $$0$i$i2 = $134;
      $$01$i$i = $$01$i$i + 1 | 0;
     }
    }
    break;
   }
  default:
   $$2 = $$0;
  } while (0);
  $$0 = $$2;
  $__p$0 = $__p$0 + 1 | 0;
 }
 $13 = HEAP8[$__sn >> 0] | 0;
 $15 = ($13 & 1) == 0;
 $19 = $15 ? ($13 & 255) >>> 1 : HEAP32[$0 >> 2] | 0;
 if ($19 >>> 0 > 1) {
  $141 = $15 ? $2 : HEAP32[$1 >> 2] | 0;
  $142 = $141 + $19 | 0;
  $$0$i$i = HEAP32[$__me >> 2] | 0;
  $$pn = $141;
  while (1) {
   $$sroa$04$0$i = $$pn + 1 | 0;
   if (($$sroa$04$0$i | 0) == ($142 | 0)) {
    $$0$i$i$lcssa = $$0$i$i;
    break;
   }
   HEAP8[$$0$i$i >> 0] = HEAP8[$$sroa$04$0$i >> 0] | 0;
   $$0$i$i = $$0$i$i + 1 | 0;
   $$pn = $$sroa$04$0$i;
  }
  HEAP32[$__me >> 2] = $$0$i$i$lcssa;
 }
 switch ($__flags & 176 | 0) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$__mi >> 2] = $__mb;
 }
 return;
}

function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i2 = 0, $$0$i$i6 = 0, $$01$i$i = 0, $$2 = 0, $$lcssa34 = 0, $$lcssa35 = 0, $0 = 0, $1 = 0, $10 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $119 = 0, $12 = 0, $122 = 0, $123 = 0, $125 = 0, $128 = 0, $129 = 0, $131 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $142 = 0, $143 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $6 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 4 | 0;
 $1 = $__sn + 8 | 0;
 $2 = $__sym + 4 | 0;
 $4 = ($__flags & 512 | 0) == 0;
 $5 = $__sym + 8 | 0;
 $6 = ($__fd | 0) > 0;
 $7 = $__grp + 4 | 0;
 $8 = $__grp + 8 | 0;
 $9 = $__grp + 1 | 0;
 $$0 = $__db;
 $__p$0 = 0;
 while (1) {
  if (($__p$0 | 0) == 4) break;
  L4 : do switch (HEAP8[$__pat + $__p$0 >> 0] | 0) {
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $$2 = $$0;
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 32) | 0;
    $27 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $27 + 4;
    HEAP32[$27 >> 2] = $26;
    $$2 = $$0;
    break;
   }
  case 3:
   {
    $29 = HEAP8[$__sn >> 0] | 0;
    $31 = ($29 & 1) == 0;
    if (!(($31 ? ($29 & 255) >>> 1 : HEAP32[$0 >> 2] | 0) | 0)) $$2 = $$0; else {
     $39 = HEAP32[($31 ? $0 : HEAP32[$1 >> 2] | 0) >> 2] | 0;
     $40 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $40 + 4;
     HEAP32[$40 >> 2] = $39;
     $$2 = $$0;
    }
    break;
   }
  case 2:
   {
    $42 = HEAP8[$__sym >> 0] | 0;
    $44 = ($42 & 1) == 0;
    $48 = $44 ? ($42 & 255) >>> 1 : HEAP32[$2 >> 2] | 0;
    if ($4 | ($48 | 0) == 0) $$2 = $$0; else {
     $51 = $44 ? $2 : HEAP32[$5 >> 2] | 0;
     $52 = $51 + ($48 << 2) | 0;
     $53 = HEAP32[$__me >> 2] | 0;
     $$0$i$i6 = $53;
     $54 = $51;
     while (1) {
      if (($54 | 0) == ($52 | 0)) break;
      HEAP32[$$0$i$i6 >> 2] = HEAP32[$54 >> 2];
      $$0$i$i6 = $$0$i$i6 + 4 | 0;
      $54 = $54 + 4 | 0;
     }
     HEAP32[$__me >> 2] = $53 + ($48 << 2);
     $$2 = $$0;
    }
    break;
   }
  case 4:
   {
    $59 = HEAP32[$__me >> 2] | 0;
    $$$0 = $__neg ? $$0 + 4 | 0 : $$0;
    $__d$0 = $$$0;
    while (1) {
     if ($__d$0 >>> 0 >= $__de >>> 0) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, HEAP32[$__d$0 >> 2] | 0) | 0)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $__d$0 = $__d$0 + 4 | 0;
    }
    if ($6) {
     $__d$1 = $__d$0$lcssa;
     $__f$0 = $__fd;
     while (1) {
      $69 = ($__f$0 | 0) > 0;
      if (!($__d$1 >>> 0 > $$$0 >>> 0 & $69)) break;
      $71 = $__d$1 + -4 | 0;
      $72 = HEAP32[$71 >> 2] | 0;
      $73 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $73 + 4;
      HEAP32[$73 >> 2] = $72;
      $__d$1 = $71;
      $__f$0 = $__f$0 + -1 | 0;
     }
     if ($69) $83 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 48) | 0; else $83 = 0;
     $82 = HEAP32[$__me >> 2] | 0;
     $__f$1 = $__f$0;
     while (1) {
      $81 = $82 + 4 | 0;
      if (($__f$1 | 0) <= 0) {
       $$lcssa34 = $82;
       $$lcssa35 = $81;
       break;
      }
      HEAP32[$82 >> 2] = $83;
      $82 = $81;
      $__f$1 = $__f$1 + -1 | 0;
     }
     HEAP32[$__me >> 2] = $$lcssa35;
     HEAP32[$$lcssa34 >> 2] = $__dp;
     $__d$2 = $__d$1;
    } else $__d$2 = $__d$0$lcssa;
    if (($__d$2 | 0) == ($$$0 | 0)) {
     $89 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 15]($__ct, 48) | 0;
     $90 = HEAP32[$__me >> 2] | 0;
     $91 = $90 + 4 | 0;
     HEAP32[$__me >> 2] = $91;
     HEAP32[$90 >> 2] = $89;
     $128 = $91;
    } else {
     $92 = HEAP8[$__grp >> 0] | 0;
     $94 = ($92 & 1) == 0;
     $95 = HEAP32[$7 >> 2] | 0;
     if (!(($94 ? ($92 & 255) >>> 1 : $95) | 0)) {
      $__d$3 = $__d$2;
      $__gl$0 = -1;
      $__ig$0 = 0;
      $__ng$0 = 0;
     } else {
      $__d$3 = $__d$2;
      $__gl$0 = HEAP8[($94 ? $9 : HEAP32[$8 >> 2] | 0) >> 0] | 0;
      $__ig$0 = 0;
      $__ng$0 = 0;
     }
     while (1) {
      if (($__d$3 | 0) == ($$$0 | 0)) break;
      $106 = HEAP32[$__me >> 2] | 0;
      if (($__ng$0 | 0) == ($__gl$0 | 0)) {
       $107 = $106 + 4 | 0;
       HEAP32[$__me >> 2] = $107;
       HEAP32[$106 >> 2] = $__ts;
       $108 = $__ig$0 + 1 | 0;
       $109 = HEAP8[$__grp >> 0] | 0;
       $111 = ($109 & 1) == 0;
       if ($108 >>> 0 < ($111 ? ($109 & 255) >>> 1 : $95) >>> 0) {
        $119 = HEAP8[($111 ? $9 : HEAP32[$8 >> 2] | 0) + $108 >> 0] | 0;
        $125 = $107;
        $__gl$1 = $119 << 24 >> 24 == 127 ? -1 : $119 << 24 >> 24;
        $__ig$1 = $108;
        $__ng$1 = 0;
       } else {
        $125 = $107;
        $__gl$1 = $__ng$0;
        $__ig$1 = $108;
        $__ng$1 = 0;
       }
      } else {
       $125 = $106;
       $__gl$1 = $__gl$0;
       $__ig$1 = $__ig$0;
       $__ng$1 = $__ng$0;
      }
      $122 = $__d$3 + -4 | 0;
      $123 = HEAP32[$122 >> 2] | 0;
      HEAP32[$__me >> 2] = $125 + 4;
      HEAP32[$125 >> 2] = $123;
      $__d$3 = $122;
      $__gl$0 = $__gl$1;
      $__ig$0 = $__ig$1;
      $__ng$0 = $__ng$1 + 1 | 0;
     }
     $128 = HEAP32[$__me >> 2] | 0;
    }
    if (($59 | 0) == ($128 | 0)) $$2 = $$$0; else {
     $$0$i$i2 = $128;
     $$01$i$i = $59;
     while (1) {
      $129 = $$0$i$i2 + -4 | 0;
      if ($$01$i$i >>> 0 >= $129 >>> 0) {
       $$2 = $$$0;
       break L4;
      }
      $131 = HEAP32[$$01$i$i >> 2] | 0;
      HEAP32[$$01$i$i >> 2] = HEAP32[$129 >> 2];
      HEAP32[$129 >> 2] = $131;
      $$0$i$i2 = $129;
      $$01$i$i = $$01$i$i + 4 | 0;
     }
    }
    break;
   }
  default:
   $$2 = $$0;
  } while (0);
  $$0 = $$2;
  $__p$0 = $__p$0 + 1 | 0;
 }
 $10 = HEAP8[$__sn >> 0] | 0;
 $12 = ($10 & 1) == 0;
 $16 = $12 ? ($10 & 255) >>> 1 : HEAP32[$0 >> 2] | 0;
 if ($16 >>> 0 > 1) {
  $136 = $12 ? $0 : HEAP32[$1 >> 2] | 0;
  $137 = $136 + 4 | 0;
  $138 = $136 + ($16 << 2) | 0;
  $139 = HEAP32[$__me >> 2] | 0;
  $142 = $138 - $137 | 0;
  $$0$i$i = $139;
  $143 = $137;
  while (1) {
   if (($143 | 0) == ($138 | 0)) break;
   HEAP32[$$0$i$i >> 2] = HEAP32[$143 >> 2];
   $$0$i$i = $$0$i$i + 4 | 0;
   $143 = $143 + 4 | 0;
  }
  HEAP32[$__me >> 2] = $139 + ($142 >>> 2 << 2);
 }
 switch ($__flags & 176 | 0) {
 case 32:
  {
   HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$__mi >> 2] = $__mb;
 }
 return;
}

function __ZN12Front_JS_SDL4drawERK9RDPMemBltRK4RectRK6Bitmap($this, $cmd, $clip, $bitmap) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 $bitmap = $bitmap | 0;
 var $$pre29$pre = 0, $$pre34$pre = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $106 = 0, $12 = 0, $13 = 0, $136 = 0, $139 = 0, $140 = 0, $142 = 0, $145 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $162 = 0, $165 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $174 = 0, $18 = 0, $20 = 0, $22 = 0, $221 = 0, $226 = 0, $23 = 0, $233 = 0, $239 = 0, $243 = 0, $25 = 0, $3 = 0, $31 = 0, $35 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $57 = 0, $69 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $9 = 0, $95 = 0, $98 = 0, $99 = 0, $x$011$us = 0, $x7$015$us = 0, $y$012$us = 0, $y6$018$us = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp;
 $1 = sp + 16 | 0;
 $3 = $cmd + 2 | 0;
 $4 = $3;
 $5 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
 $7 = $3 + 4 | 0;
 $8 = HEAPU16[$7 >> 1] | HEAPU16[$7 + 2 >> 1] << 16;
 $9 = $5 & 65535;
 $10 = _bitshift64Lshr($5 | 0, $8 | 0, 16) | 0;
 $12 = $10 & 65535;
 $13 = _bitshift64Lshr($5 | 0, $8 | 0, 48) | 0;
 $15 = HEAP16[$clip >> 1] | 0;
 $17 = $9 << 16 >> 16 < $15 << 16 >> 16 ? $15 : $9;
 $18 = $17 << 16 >> 16;
 $20 = HEAP16[$clip + 2 >> 1] | 0;
 $22 = $12 << 16 >> 16 < $20 << 16 >> 16 ? $20 : $12;
 $23 = $22 << 16 >> 16;
 $25 = $8 + $5 << 16 >> 16;
 $31 = (HEAPU16[$clip + 4 >> 1] | 0) + ($15 & 65535) << 16 >> 16;
 $35 = $13 + $10 << 16 >> 16;
 $41 = (HEAPU16[$clip + 6 >> 1] | 0) + ($20 & 65535) << 16 >> 16;
 $44 = (($31 | 0) < ($25 | 0) ? $31 : $25) - $18 | 0;
 $45 = $44 & 65535;
 $46 = (($41 | 0) < ($35 | 0) ? $41 : $35) - $23 | 0;
 HEAP16[$1 >> 1] = $17;
 HEAP16[$1 + 2 >> 1] = $22;
 $49 = $1 + 4 | 0;
 HEAP16[$49 >> 1] = $45;
 $50 = $1 + 6 | 0;
 HEAP16[$50 >> 1] = $46;
 if (($46 + 65535 | $44 + 65535) & 32768 | 0) {
  HEAP16[$49 >> 1] = 0;
  HEAP16[$50 >> 1] = 0;
  STACKTOP = sp;
  return;
 }
 if (!($45 << 16 >> 16)) {
  STACKTOP = sp;
  return;
 }
 $57 = $cmd + 10 | 0;
 switch (HEAPU8[$57 >> 0] | 0) {
 case 0:
  {
   HEAP32[$0 >> 2] = $23;
   HEAP32[$0 + 4 >> 2] = $18;
   HEAP32[$0 + 8 >> 2] = $44 & 65535;
   HEAP32[$0 + 12 >> 2] = $46 & 65535;
   _SDL_FillRect(HEAP32[$this + 5820 >> 2] | 0, $0 | 0, 0) | 0;
   STACKTOP = sp;
   return;
  }
 case 34:
  {
   $69 = HEAP32[(HEAP32[$bitmap >> 2] | 0) + 16 >> 2] | 0;
   $72 = HEAPU16[$cmd + 12 >> 1] | 0;
   $73 = $9 << 16 >> 16;
   $75 = $18 - $73 + $72 | 0;
   $78 = HEAPU16[$cmd + 14 >> 1] | 0;
   $81 = HEAP16[$cmd + 4 >> 1] | 0;
   $83 = $23 - $81 + $78 | 0;
   $84 = $46 & 65535;
   $85 = $44 & 65535;
   $87 = $this + 5820 | 0;
   _SDL_LockSurface(HEAP32[$87 >> 2] | 0) | 0;
   if (($83 | 0) < ($75 + $85 | 0) & ($75 | 0) < ($83 + $84 | 0)) {
    $95 = $23 + $78 + $84 - $81 | 0;
    $98 = $18 + $72 + $85 - $73 | 0;
    $$pre34$pre = HEAP32[(HEAP32[$87 >> 2] | 0) + 20 >> 2] | 0;
    $99 = HEAPU16[$this + 52 >> 1] | 0;
    $y$012$us = $83;
    do {
     $101 = $$pre34$pre + ((Math_imul($23 + $y$012$us | 0, $99) | 0) << 2) | 0;
     $106 = Math_imul($y$012$us - $83 + $23 | 0, $99) | 0;
     $x$011$us = $75;
     do {
      $102 = $101 + ($x$011$us << 2) + ($18 << 2) | 0;
      HEAP32[$102 >> 2] = HEAP32[$102 >> 2] & ~HEAPU8[$69 + ($x$011$us - $75 + $106 + $18) >> 0];
      $x$011$us = $x$011$us + 1 | 0;
     } while (($x$011$us | 0) != ($95 | 0));
     $y$012$us = $y$012$us + 1 | 0;
    } while (($y$012$us | 0) != ($98 | 0));
   }
   _SDL_UnlockSurface(HEAP32[$87 >> 2] | 0);
   STACKTOP = sp;
   return;
  }
 case 85:
  {
   __ZN12Front_JS_SDL11draw_MemBltERK4RectRK6BitmapiiNS_8uint32_tE($this, $1, $bitmap, $18 + (HEAPU16[$cmd + 12 >> 1] | 0) - ($9 << 16 >> 16) | 0, $23 + (HEAPU16[$cmd + 14 >> 1] | 0) - (HEAP16[$cmd + 4 >> 1] | 0) | 0, -1);
   STACKTOP = sp;
   return;
  }
 case 102:
  {
   $136 = HEAP32[(HEAP32[$bitmap >> 2] | 0) + 16 >> 2] | 0;
   $139 = HEAPU16[$cmd + 12 >> 1] | 0;
   $140 = $9 << 16 >> 16;
   $142 = $18 - $140 + $139 | 0;
   $145 = HEAPU16[$cmd + 14 >> 1] | 0;
   $148 = HEAP16[$cmd + 4 >> 1] | 0;
   $150 = $23 - $148 + $145 | 0;
   $151 = $46 & 65535;
   $152 = $44 & 65535;
   $154 = $this + 5820 | 0;
   _SDL_LockSurface(HEAP32[$154 >> 2] | 0) | 0;
   if (($150 | 0) < ($142 + $152 | 0) & ($142 | 0) < ($150 + $151 | 0)) {
    $162 = $23 + $145 + $151 - $148 | 0;
    $165 = $18 + $139 + $152 - $140 | 0;
    $$pre29$pre = HEAP32[(HEAP32[$154 >> 2] | 0) + 20 >> 2] | 0;
    $166 = HEAPU16[$this + 52 >> 1] | 0;
    $y6$018$us = $150;
    do {
     $174 = Math_imul($152, $y6$018$us - $150 + $23 | 0) | 0;
     $168 = $$pre29$pre + ((Math_imul($23 + $y6$018$us | 0, $166) | 0) << 2) | 0;
     $x7$015$us = $142;
     do {
      $169 = $168 + ($x7$015$us << 2) + ($18 << 2) | 0;
      HEAP32[$169 >> 2] = HEAPU8[$136 + ($x7$015$us - $142 + $18 + $174) >> 0] ^ HEAP32[$169 >> 2];
      $x7$015$us = $x7$015$us + 1 | 0;
     } while (($x7$015$us | 0) != ($162 | 0));
     $y6$018$us = $y6$018$us + 1 | 0;
    } while (($y6$018$us | 0) != ($165 | 0));
   }
   _SDL_UnlockSurface(HEAP32[$154 >> 2] | 0);
   STACKTOP = sp;
   return;
  }
 case 204:
  {
   __ZN12Front_JS_SDL11draw_MemBltERK4RectRK6BitmapiiNS_8uint32_tE($this, $1, $bitmap, $18 + (HEAPU16[$cmd + 12 >> 1] | 0) - ($9 << 16 >> 16) | 0, $23 + (HEAPU16[$cmd + 14 >> 1] | 0) - (HEAP16[$cmd + 4 >> 1] | 0) | 0, 0);
   STACKTOP = sp;
   return;
  }
 case 238:
  {
   __ZN12Front_JS_SDL11draw_MemBltERK4RectRK6BitmapiiNS_8uint32_tE($this, $1, $bitmap, $18 + (HEAPU16[$cmd + 12 >> 1] | 0) - ($9 << 16 >> 16) | 0, $23 + (HEAPU16[$cmd + 14 >> 1] | 0) - (HEAP16[$cmd + 4 >> 1] | 0) | 0, 0);
   STACKTOP = sp;
   return;
  }
 case 255:
  {
   HEAP32[$0 >> 2] = $23;
   HEAP32[$0 + 4 >> 2] = $18;
   HEAP32[$0 + 8 >> 2] = $44 & 65535;
   HEAP32[$0 + 12 >> 2] = $46 & 65535;
   _SDL_FillRect(HEAP32[$this + 5820 >> 2] | 0, $0 | 0, -1) | 0;
   STACKTOP = sp;
   return;
  }
 case 153:
  {
   STACKTOP = sp;
   return;
  }
 default:
  {
   $221 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(3676420, 3667539, 11) | 0;
   $226 = $221 + (HEAP32[(HEAP32[$221 >> 2] | 0) + -12 >> 2] | 0) + 4 | 0;
   HEAP32[$226 >> 2] = HEAP32[$226 >> 2] & -75 | 8;
   $233 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($221, HEAPU8[$57 >> 0] | 0) | 0, 3667537, 1) | 0;
   HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($233 + (HEAP32[(HEAP32[$233 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
   $239 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
   $243 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$239 >> 2] | 0) + 28 >> 2] & 15]($239, 10) | 0;
   __ZNSt3__16localeD2Ev($0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($233, $243) | 0;
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($233) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i8 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i = 0, $$pre22 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $11 = 0, $119 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $85 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP32[$__decimal_point >> 2] | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i4) {
   $$pre$i$i$i = 0;
   $132 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0; else $$0$i$i$i$i2 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i2 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $132 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i4;
    $132 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; else $$0$i$i1$i$i8 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i1$i$i8 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($132) {
    $133 = $30;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = $30;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($132) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i3$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre22 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $104 = $$pre22; else if (($$pre22 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre22 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre22 >> 2] = $100;
  $104 = $101;
 } else $104 = $$pre22;
 HEAPF32[$__v >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err);
 if (!$$pre$i$i$i$lcssa) $134 = 1; else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$107 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 1;
  } else $134 = 0;
 }
 do if (!$$pre$i3$i$i) label = 47; else {
  $119 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($119 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$119 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($134) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($134) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $131 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $131 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i8 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i = 0, $$pre22 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $11 = 0, $119 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $85 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP32[$__decimal_point >> 2] | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i4) {
   $$pre$i$i$i = 0;
   $132 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0; else $$0$i$i$i$i2 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i2 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $132 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i4;
    $132 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; else $$0$i$i1$i$i8 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i1$i$i8 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($132) {
    $133 = $30;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = $30;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($132) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i3$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre22 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $104 = $$pre22; else if (($$pre22 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre22 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre22 >> 2] = $100;
  $104 = $101;
 } else $104 = $$pre22;
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err);
 if (!$$pre$i$i$i$lcssa) $134 = 1; else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$107 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 1;
  } else $134 = 0;
 }
 do if (!$$pre$i3$i$i) label = 47; else {
  $119 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($119 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$119 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($134) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($134) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $131 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $131 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i8 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i = 0, $$pre22 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $11 = 0, $119 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $30 = 0, $33 = 0, $44 = 0, $50 = 0, $59 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $85 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP32[$__decimal_point >> 2] | 0;
 $17 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i4) {
   $$pre$i$i$i = 0;
   $132 = 1;
  } else {
   $20 = HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0; else $$0$i$i$i$i2 = HEAP32[$20 >> 2] | 0;
   if (($$0$i$i$i$i2 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $132 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i4;
    $132 = 0;
   }
  }
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 19; else {
   $33 = HEAP32[$30 + 12 >> 2] | 0;
   if (($33 | 0) == (HEAP32[$30 + 16 >> 2] | 0)) $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0; else $$0$i$i1$i$i8 = HEAP32[$33 >> 2] | 0;
   if (($$0$i$i1$i$i8 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($132) {
    $133 = $30;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = $30;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($132) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $44 = HEAP8[$__buf >> 0] | 0;
  $50 = ($44 & 1) == 0 ? ($44 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $50 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $50 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $59 = 10; else $59 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $59, 0);
   $64 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $64 + $50;
   $__a$1 = $64;
  } else $__a$1 = $__a$0;
  $66 = $$pre$i$i$i + 12 | 0;
  $67 = HEAP32[$66 >> 2] | 0;
  $68 = $$pre$i$i$i + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i3$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$66 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$66 >> 2] = $78 + 4;
   $$pre$i$i$i4 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 $$pre22 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($85 & 1) == 0 ? ($85 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $104 = $$pre22; else if (($$pre22 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre22 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre22 >> 2] = $100;
  $104 = $101;
 } else $104 = $$pre22;
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err);
 if (!$$pre$i$i$i$lcssa) $134 = 1; else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$107 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 1;
  } else $134 = 0;
 }
 do if (!$$pre$i3$i$i) label = 47; else {
  $119 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($119 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$119 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 47;
   break;
  } else if ($134) break; else {
   label = 49;
   break;
  }
 } while (0);
 if ((label | 0) == 47) if ($134) label = 49;
 if ((label | 0) == 49) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $131 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $131 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $105 = 0, $109 = 0, $112 = 0, $124 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $32 = 0, $35 = 0, $46 = 0, $52 = 0, $61 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $80 = 0, $87 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0;
   $137 = 1;
  } else {
   $22 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0;
   if (($22 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; else $$0$i$i$i$i1 = HEAP32[$22 >> 2] | 0;
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $137 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i3;
    $137 = 0;
   }
  }
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 23; else {
   $35 = HEAP32[$32 + 12 >> 2] | 0;
   if (($35 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0; else $$0$i$i1$i$i7 = HEAP32[$35 >> 2] | 0;
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 23;
    break;
   } else if ($137) {
    $138 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 23) {
   label = 0;
   if ($137) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $138 = 0;
  }
  $46 = HEAP8[$__buf >> 0] | 0;
  $52 = ($46 & 1) == 0 ? ($46 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $52 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $52 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $61 = 10; else $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   $66 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $66 + $52;
   $__a$1 = $66;
  } else $__a$1 = $__a$0;
  $68 = $$pre$i$i$i + 12 | 0;
  $69 = HEAP32[$68 >> 2] | 0;
  $70 = $$pre$i$i$i + 16 | 0;
  if (($69 | 0) == (HEAP32[$70 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$69 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i3$i$i = $138;
   $__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$68 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$70 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$68 >> 2] = $80 + 4;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($87 & 1) == 0 ? ($87 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $109 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre21 >> 2] = $100;
  $109 = $101;
 } else $109 = $$pre21;
 $103 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 $105 = $__v;
 HEAP32[$105 >> 2] = $103;
 HEAP32[$105 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $109, $__err);
 if (!$$pre$i$i$i$lcssa) $139 = 1; else {
  $112 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($112 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$112 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $139 = 1;
  } else $139 = 0;
 }
 do if (!$$pre$i3$i$i) label = 51; else {
  $124 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($124 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$124 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 51;
   break;
  } else if ($139) break; else {
   label = 53;
   break;
  }
 } while (0);
 if ((label | 0) == 51) if ($139) label = 53;
 if ((label | 0) == 53) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $136 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $136 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $105 = 0, $109 = 0, $112 = 0, $124 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $32 = 0, $35 = 0, $46 = 0, $52 = 0, $61 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $80 = 0, $87 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0;
   $137 = 1;
  } else {
   $22 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0;
   if (($22 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; else $$0$i$i$i$i1 = HEAP32[$22 >> 2] | 0;
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $137 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i3;
    $137 = 0;
   }
  }
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 23; else {
   $35 = HEAP32[$32 + 12 >> 2] | 0;
   if (($35 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0; else $$0$i$i1$i$i7 = HEAP32[$35 >> 2] | 0;
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 23;
    break;
   } else if ($137) {
    $138 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 23) {
   label = 0;
   if ($137) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $138 = 0;
  }
  $46 = HEAP8[$__buf >> 0] | 0;
  $52 = ($46 & 1) == 0 ? ($46 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $52 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $52 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $61 = 10; else $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   $66 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $66 + $52;
   $__a$1 = $66;
  } else $__a$1 = $__a$0;
  $68 = $$pre$i$i$i + 12 | 0;
  $69 = HEAP32[$68 >> 2] | 0;
  $70 = $$pre$i$i$i + 16 | 0;
  if (($69 | 0) == (HEAP32[$70 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$69 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i3$i$i = $138;
   $__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$68 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$70 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$68 >> 2] = $80 + 4;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($87 & 1) == 0 ? ($87 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $109 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre21 >> 2] = $100;
  $109 = $101;
 } else $109 = $$pre21;
 $103 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 $105 = $__v;
 HEAP32[$105 >> 2] = $103;
 HEAP32[$105 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $109, $__err);
 if (!$$pre$i$i$i$lcssa) $139 = 1; else {
  $112 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($112 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$112 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $139 = 1;
  } else $139 = 0;
 }
 do if (!$$pre$i3$i$i) label = 51; else {
  $124 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($124 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$124 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 51;
   break;
  } else if ($139) break; else {
   label = 53;
   break;
  }
 } while (0);
 if ((label | 0) == 51) if ($139) label = 53;
 if ((label | 0) == 53) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $136 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $136 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $119 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $32 = 0, $35 = 0, $46 = 0, $52 = 0, $61 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $80 = 0, $87 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0;
   $132 = 1;
  } else {
   $22 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0;
   if (($22 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; else $$0$i$i$i$i1 = HEAP32[$22 >> 2] | 0;
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $132 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i3;
    $132 = 0;
   }
  }
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 23; else {
   $35 = HEAP32[$32 + 12 >> 2] | 0;
   if (($35 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0; else $$0$i$i1$i$i7 = HEAP32[$35 >> 2] | 0;
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 23;
    break;
   } else if ($132) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 23) {
   label = 0;
   if ($132) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $46 = HEAP8[$__buf >> 0] | 0;
  $52 = ($46 & 1) == 0 ? ($46 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $52 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $52 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $61 = 10; else $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   $66 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $66 + $52;
   $__a$1 = $66;
  } else $__a$1 = $__a$0;
  $68 = $$pre$i$i$i + 12 | 0;
  $69 = HEAP32[$68 >> 2] | 0;
  $70 = $$pre$i$i$i + 16 | 0;
  if (($69 | 0) == (HEAP32[$70 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$69 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i3$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$68 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$70 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$68 >> 2] = $80 + 4;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($87 & 1) == 0 ? ($87 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $104 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre21 >> 2] = $100;
  $104 = $101;
 } else $104 = $$pre21;
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err);
 if (!$$pre$i$i$i$lcssa) $134 = 1; else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$107 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 1;
  } else $134 = 0;
 }
 do if (!$$pre$i3$i$i) label = 51; else {
  $119 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($119 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$119 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 51;
   break;
  } else if ($134) break; else {
   label = 53;
   break;
  }
 } while (0);
 if ((label | 0) == 51) if ($134) label = 53;
 if ((label | 0) == 53) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $131 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $131 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $119 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $32 = 0, $35 = 0, $46 = 0, $52 = 0, $61 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $80 = 0, $87 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0;
   $132 = 1;
  } else {
   $22 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0;
   if (($22 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; else $$0$i$i$i$i1 = HEAP32[$22 >> 2] | 0;
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $132 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i3;
    $132 = 0;
   }
  }
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 23; else {
   $35 = HEAP32[$32 + 12 >> 2] | 0;
   if (($35 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0; else $$0$i$i1$i$i7 = HEAP32[$35 >> 2] | 0;
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 23;
    break;
   } else if ($132) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 23) {
   label = 0;
   if ($132) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $46 = HEAP8[$__buf >> 0] | 0;
  $52 = ($46 & 1) == 0 ? ($46 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $52 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $52 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $61 = 10; else $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   $66 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $66 + $52;
   $__a$1 = $66;
  } else $__a$1 = $__a$0;
  $68 = $$pre$i$i$i + 12 | 0;
  $69 = HEAP32[$68 >> 2] | 0;
  $70 = $$pre$i$i$i + 16 | 0;
  if (($69 | 0) == (HEAP32[$70 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$69 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i3$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$68 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$70 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$68 >> 2] = $80 + 4;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($87 & 1) == 0 ? ($87 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $104 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre21 >> 2] = $100;
  $104 = $101;
 } else $104 = $$pre21;
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err);
 if (!$$pre$i$i$i$lcssa) $134 = 1; else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$107 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 1;
  } else $134 = 0;
 }
 do if (!$$pre$i3$i$i) label = 51; else {
  $119 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($119 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$119 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 51;
   break;
  } else if ($134) break; else {
   label = 53;
   break;
  }
 } while (0);
 if ((label | 0) == 51) if ($134) label = 53;
 if ((label | 0) == 53) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $131 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $131 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $119 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $32 = 0, $35 = 0, $46 = 0, $52 = 0, $61 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $80 = 0, $87 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0;
   $132 = 1;
  } else {
   $22 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0;
   if (($22 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; else $$0$i$i$i$i1 = HEAP32[$22 >> 2] | 0;
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $132 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i3;
    $132 = 0;
   }
  }
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 23; else {
   $35 = HEAP32[$32 + 12 >> 2] | 0;
   if (($35 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0; else $$0$i$i1$i$i7 = HEAP32[$35 >> 2] | 0;
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 23;
    break;
   } else if ($132) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 23) {
   label = 0;
   if ($132) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $46 = HEAP8[$__buf >> 0] | 0;
  $52 = ($46 & 1) == 0 ? ($46 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $52 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $52 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $61 = 10; else $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   $66 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $66 + $52;
   $__a$1 = $66;
  } else $__a$1 = $__a$0;
  $68 = $$pre$i$i$i + 12 | 0;
  $69 = HEAP32[$68 >> 2] | 0;
  $70 = $$pre$i$i$i + 16 | 0;
  if (($69 | 0) == (HEAP32[$70 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$69 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i3$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$68 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$70 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$68 >> 2] = $80 + 4;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($87 & 1) == 0 ? ($87 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $104 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre21 >> 2] = $100;
  $104 = $101;
 } else $104 = $$pre21;
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err);
 if (!$$pre$i$i$i$lcssa) $134 = 1; else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$107 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 1;
  } else $134 = 0;
 }
 do if (!$$pre$i3$i$i) label = 51; else {
  $119 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($119 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$119 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 51;
   break;
  } else if ($134) break; else {
   label = 53;
   break;
  }
 } while (0);
 if ((label | 0) == 51) if ($134) label = 53;
 if ((label | 0) == 53) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $131 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $131 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre21 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $107 = 0, $119 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $32 = 0, $35 = 0, $46 = 0, $52 = 0, $61 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $80 = 0, $87 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i3) {
   $$pre$i$i$i = 0;
   $132 = 1;
  } else {
   $22 = HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0;
   if (($22 | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0; else $$0$i$i$i$i1 = HEAP32[$22 >> 2] | 0;
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $132 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i3;
    $132 = 0;
   }
  }
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 23; else {
   $35 = HEAP32[$32 + 12 >> 2] | 0;
   if (($35 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0; else $$0$i$i1$i$i7 = HEAP32[$35 >> 2] | 0;
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 23;
    break;
   } else if ($132) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 23) {
   label = 0;
   if ($132) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $46 = HEAP8[$__buf >> 0] | 0;
  $52 = ($46 & 1) == 0 ? ($46 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $52 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $52 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $61 = 10; else $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   $66 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $66 + $52;
   $__a$1 = $66;
  } else $__a$1 = $__a$0;
  $68 = $$pre$i$i$i + 12 | 0;
  $69 = HEAP32[$68 >> 2] | 0;
  $70 = $$pre$i$i$i + 16 | 0;
  if (($69 | 0) == (HEAP32[$70 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$69 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i3$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$68 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$70 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$68 >> 2] = $80 + 4;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping >> 0] | 0;
 $$pre21 = HEAP32[$__g_end >> 2] | 0;
 if (!((($87 & 1) == 0 ? ($87 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $104 = $$pre21; else if (($$pre21 - $__g | 0) < 160) {
  $100 = HEAP32[$__dc >> 2] | 0;
  $101 = $$pre21 + 4 | 0;
  HEAP32[$__g_end >> 2] = $101;
  HEAP32[$$pre21 >> 2] = $100;
  $104 = $101;
 } else $104 = $$pre21;
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $104, $__err);
 if (!$$pre$i$i$i$lcssa) $134 = 1; else {
  $107 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($107 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$107 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $134 = 1;
  } else $134 = 0;
 }
 do if (!$$pre$i3$i$i) label = 51; else {
  $119 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($119 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$119 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 51;
   break;
  } else if ($134) break; else {
   label = 53;
   break;
  }
 } while (0);
 if ((label | 0) == 51) if ($134) label = 53;
 if ((label | 0) == 53) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $131 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $131 | 0;
}

function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$0$i$i = 0, $$0$i$i2 = 0, $$01$i$i = 0, $$01$i$i1 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $103 = 0, $11 = 0, $117 = 0, $118 = 0, $123 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $135 = 0, $136 = 0, $137 = 0, $142 = 0, $146 = 0, $152 = 0, $153 = 0, $19 = 0, $24 = 0, $25 = 0, $27 = 0, $32 = 0, $33 = 0, $37 = 0, $44 = 0, $49 = 0, $5 = 0, $52 = 0, $66 = 0, $68 = 0, $70 = 0, $76 = 0, $77 = 0, $78 = 0, $83 = 0, $84 = 0, $86 = 0, $88 = 0, $97 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa20 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677412) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677420) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1);
 HEAP32[$__oe >> 2] = $__ob;
 $5 = HEAP8[$__nb >> 0] | 0;
 switch ($5 << 24 >> 24) {
 case 43:
 case 45:
  {
   $10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, $5) | 0;
   $11 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $11 + 4;
   HEAP32[$11 >> 2] = $10;
   $__nf$0 = $__nb + 1 | 0;
   break;
  }
 default:
  $__nf$0 = $__nb;
 }
 $13 = $__ne;
 L4 : do if (($13 - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $19 = $__nf$0 + 1 | 0;
  switch (HEAP8[$19 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    $__ns$1 = $__nf$0;
    label = 10;
    break L4;
   }
  }
  $24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, 48) | 0;
  $25 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $25 + 4;
  HEAP32[$25 >> 2] = $24;
  $27 = $__nf$0 + 2 | 0;
  $32 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, HEAP8[$19 >> 0] | 0) | 0;
  $33 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $33 + 4;
  HEAP32[$33 >> 2] = $32;
  $__ns$0 = $27;
  while (1) {
   if ($__ns$0 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $27;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $37 = HEAP8[$__ns$0 >> 0] | 0;
   if (!(_isxdigit_l($37, __ZNSt3__16__clocEv() | 0) | 0)) {
    $__nf$1 = $27;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $__ns$0 = $__ns$0 + 1 | 0;
  }
 } else {
  $__ns$1 = $__nf$0;
  label = 10;
 } else {
  $__ns$1 = $__nf$0;
  label = 10;
 } while (0);
 L12 : do if ((label | 0) == 10) while (1) {
  label = 0;
  if ($__ns$1 >>> 0 >= $__ne >>> 0) {
   $__nf$1 = $__nf$0;
   $__ns$2 = $__ns$1;
   break L12;
  }
  $44 = HEAP8[$__ns$1 >> 0] | 0;
  if (!(_isdigit_l($44, __ZNSt3__16__clocEv() | 0) | 0)) {
   $__nf$1 = $__nf$0;
   $__ns$2 = $__ns$1;
   break L12;
  }
  $__ns$1 = $__ns$1 + 1 | 0;
  label = 10;
 } while (0);
 $49 = HEAP8[$__grouping >> 0] | 0;
 $52 = $__grouping + 4 | 0;
 L18 : do if (!((($49 & 1) == 0 ? ($49 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  $66 = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1 << 2) | 0;
  HEAP32[$__oe >> 2] = $66;
  $$pre$phiZ2D = $0;
  $152 = $66;
 } else {
  L21 : do if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $$0$i$i = $__ns$2;
   $$01$i$i = $__nf$1;
   while (1) {
    $68 = $$0$i$i + -1 | 0;
    if ($$01$i$i >>> 0 >= $68 >>> 0) break L21;
    $70 = HEAP8[$$01$i$i >> 0] | 0;
    HEAP8[$$01$i$i >> 0] = HEAP8[$68 >> 0] | 0;
    HEAP8[$68 >> 0] = $70;
    $$0$i$i = $68;
    $$01$i$i = $$01$i$i + 1 | 0;
   }
  } while (0);
  $76 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0;
  $77 = $__grouping + 8 | 0;
  $78 = $__grouping + 1 | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ns$2 >>> 0) break;
   $97 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $78 : HEAP32[$77 >> 2] | 0) + $__dg$0 >> 0] | 0;
   if ($97 << 24 >> 24 > 0 & ($__dc$0 | 0) == ($97 << 24 >> 24 | 0)) {
    $101 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $101 + 4;
    HEAP32[$101 >> 2] = $76;
    $103 = HEAP8[$__grouping >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = ($__dg$0 >>> 0 < ((($103 & 1) == 0 ? ($103 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$0 | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $117 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, HEAP8[$__p$0 >> 0] | 0) | 0;
   $118 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $118 + 4;
   HEAP32[$118 >> 2] = $117;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $83 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  $84 = HEAP32[$__oe >> 2] | 0;
  if (($83 | 0) == ($84 | 0)) {
   $$pre$phiZ2D = $0;
   $152 = $83;
  } else {
   $$0$i$i2 = $84;
   $$01$i$i1 = $83;
   while (1) {
    $86 = $$0$i$i2 + -4 | 0;
    if ($$01$i$i1 >>> 0 >= $86 >>> 0) {
     $$pre$phiZ2D = $0;
     $152 = $84;
     break L18;
    }
    $88 = HEAP32[$$01$i$i1 >> 2] | 0;
    HEAP32[$$01$i$i1 >> 2] = HEAP32[$86 >> 2];
    HEAP32[$86 >> 2] = $88;
    $$0$i$i2 = $86;
    $$01$i$i1 = $$01$i$i1 + 4 | 0;
   }
  }
 } while (0);
 $153 = $152;
 $__nf$2 = $__ns$2;
 while (1) {
  if ($__nf$2 >>> 0 >= $__ne >>> 0) {
   $142 = $153;
   $__nf$3 = $__nf$2;
   break;
  }
  $123 = HEAP8[$__nf$2 >> 0] | 0;
  if ($123 << 24 >> 24 == 46) {
   $__nf$2$lcssa20 = $__nf$2;
   label = 29;
   break;
  }
  $135 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 44 >> 2] & 15]($0, $123) | 0;
  $136 = HEAP32[$__oe >> 2] | 0;
  $137 = $136 + 4 | 0;
  HEAP32[$__oe >> 2] = $137;
  HEAP32[$136 >> 2] = $135;
  $153 = $137;
  $__nf$2 = $__nf$2 + 1 | 0;
 }
 if ((label | 0) == 29) {
  $128 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 63]($1) | 0;
  $129 = HEAP32[$__oe >> 2] | 0;
  $130 = $129 + 4 | 0;
  HEAP32[$__oe >> 2] = $130;
  HEAP32[$129 >> 2] = $128;
  $142 = $130;
  $__nf$3 = $__nf$2$lcssa20 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, $__nf$3, $__ne, $142) | 0;
 $146 = (HEAP32[$__oe >> 2] | 0) + ($13 - $__nf$3 << 2) | 0;
 HEAP32[$__oe >> 2] = $146;
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $146 : $__ob + ($__np - $__nb << 2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $0 = 0, $104 = 0, $116 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $15 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $3 = 0, $36 = 0, $39 = 0, $4 = 0, $50 = 0, $56 = 0, $65 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $84 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $vararg_buffer = sp;
 $__atoms = sp + 208 | 0;
 $__grouping = sp + 196 | 0;
 $0 = sp + 180 | 0;
 $__buf = sp + 184 | 0;
 $__a_end = sp + 176 | 0;
 $__g = sp + 16 | 0;
 $__g_end = sp + 8 | 0;
 $__dc = sp + 4 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $3;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677412) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 48 >> 2] & 7]($4, 3671184, 3671210, $__atoms) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0;
 $__i$0$i$i1 = 0;
 while (1) {
  if (($__i$0$i$i1 | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i1 << 2) >> 2] = 0;
  $__i$0$i$i1 = $__i$0$i$i1 + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $15 = 10; else $15 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $15, 0);
 $19 = $__buf + 8 | 0;
 $21 = $__buf + 1 | 0;
 $22 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $22;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $23 = $__buf + 4 | 0;
 $$pre$i$i$i6 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $22;
 L12 : while (1) {
  if (!$$pre$i$i$i6) {
   $$pre$i$i$i = 0;
   $129 = 1;
  } else {
   $26 = HEAP32[$$pre$i$i$i6 + 12 >> 2] | 0;
   if (($26 | 0) == (HEAP32[$$pre$i$i$i6 + 16 >> 2] | 0)) $$0$i$i$i$i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i6) | 0; else $$0$i$i$i$i4 = HEAP32[$26 >> 2] | 0;
   if (($$0$i$i$i$i4 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i = 0;
    $129 = 1;
   } else {
    $$pre$i$i$i = $$pre$i$i$i6;
    $129 = 0;
   }
  }
  $36 = HEAP32[$__e >> 2] | 0;
  do if (!$36) label = 22; else {
   $39 = HEAP32[$36 + 12 >> 2] | 0;
   if (($39 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) $$0$i$i1$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 63]($36) | 0; else $$0$i$i1$i$i10 = HEAP32[$39 >> 2] | 0;
   if (($$0$i$i1$i$i10 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 22;
    break;
   } else if ($129) {
    $130 = $36;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = $36;
    $__a$2 = $__a$0;
    break L12;
   }
  } while (0);
  if ((label | 0) == 22) {
   label = 0;
   if ($129) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $130 = 0;
  }
  $50 = HEAP8[$__buf >> 0] | 0;
  $56 = ($50 & 1) == 0 ? ($50 & 255) >>> 1 : HEAP32[$23 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $56 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $56 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $65 = 10; else $65 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $65, 0);
   $70 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $70 + $56;
   $__a$1 = $70;
  } else $__a$1 = $__a$0;
  $72 = $$pre$i$i$i + 12 | 0;
  $73 = HEAP32[$72 >> 2] | 0;
  $74 = $$pre$i$i$i + 16 | 0;
  if (($73 | 0) == (HEAP32[$74 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAP32[$73 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i3$i$i = $130;
   $__a$2 = $__a$1;
   break;
  }
  $84 = HEAP32[$72 >> 2] | 0;
  if (($84 | 0) == (HEAP32[$74 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i6 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$72 >> 2] = $84 + 4;
   $$pre$i$i$i6 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0);
 $98 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
 $99 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($98, $99, 3671219, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$$pre$i$i$i$lcssa) $131 = 1; else {
  $104 = HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0;
  if (($104 | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$104 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $131 = 1;
  } else $131 = 0;
 }
 do if (!$$pre$i3$i$i) label = 49; else {
  $116 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($116 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$116 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 49;
   break;
  } else if ($131) break; else {
   label = 51;
   break;
  }
 } while (0);
 if ((label | 0) == 49) if ($131) label = 51;
 if ((label | 0) == 51) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $128 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $128 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i = 0, $$pre19 = 0, $101 = 0, $102 = 0, $105 = 0, $11 = 0, $117 = 0, $118 = 0, $13 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $86 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP8[$__decimal_point >> 0] | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i3) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i3; else $$pre$i$i$i = $$pre$i$i$i3;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $30;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $30;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i2$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre19 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $105 = $$pre19; else if (($$pre19 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre19 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre19 >> 2] = $101;
  $105 = $102;
 } else $105 = $$pre19;
 HEAPF32[$__v >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err);
 if (!$$pre$i$i$i$lcssa) $117 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $117 = 0;
 } else $117 = $$pre$i$i$i$lcssa; else $117 = $$pre$i$i$i$lcssa;
 $118 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$118) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($118) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $132 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i = 0, $$pre19 = 0, $101 = 0, $102 = 0, $105 = 0, $11 = 0, $117 = 0, $118 = 0, $13 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $86 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP8[$__decimal_point >> 0] | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i3) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i3; else $$pre$i$i$i = $$pre$i$i$i3;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $30;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $30;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i2$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre19 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $105 = $$pre19; else if (($$pre19 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre19 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre19 >> 2] = $101;
  $105 = $102;
 } else $105 = $$pre19;
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err);
 if (!$$pre$i$i$i$lcssa) $117 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $117 = 0;
 } else $117 = $$pre$i$i$i$lcssa; else $117 = $$pre$i$i$i$lcssa;
 $118 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$118) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($118) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $132 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i = 0, $$pre19 = 0, $101 = 0, $102 = 0, $105 = 0, $11 = 0, $117 = 0, $118 = 0, $13 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $29 = 0, $30 = 0, $43 = 0, $49 = 0, $58 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $86 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $7 = 10; else $7 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $7, 0);
 $11 = $__buf + 8 | 0;
 $13 = $__buf + 1 | 0;
 $14 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $14;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $15 = $__buf + 4 | 0;
 $16 = HEAP8[$__decimal_point >> 0] | 0;
 $17 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i3 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $14;
 L8 : while (1) {
  if (!$$pre$i$i$i3) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i3 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i3 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i3) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i3; else $$pre$i$i$i = $$pre$i$i$i3;
  $29 = ($$pre$i$i$i | 0) == 0;
  $30 = HEAP32[$__e >> 2] | 0;
  do if (!$30) label = 16; else {
   if ((HEAP32[$30 + 12 >> 2] | 0) != (HEAP32[$30 + 16 >> 2] | 0)) if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $30;
    $__a$2 = $__a$0;
    break L8;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 36 >> 2] & 63]($30) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 16;
    break;
   } else if ($29) {
    $133 = $30;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $30;
    $__a$2 = $__a$0;
    break L8;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($29) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $43 = HEAP8[$__buf >> 0] | 0;
  $49 = ($43 & 1) == 0 ? ($43 & 255) >>> 1 : HEAP32[$15 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $49 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $49 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $58 = 10; else $58 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $58, 0);
   $63 = (HEAP8[$__buf >> 0] & 1) == 0 ? $13 : HEAP32[$11 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $49;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $$pre$i$i$i + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $$pre$i$i$i + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $16, $17, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i2$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i3 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 $$pre19 = HEAP32[$__g_end >> 2] | 0;
 if ((HEAP8[$__in_units >> 0] | 0) == 0 ? 1 : ((($86 & 1) == 0 ? ($86 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) == 0) $105 = $$pre19; else if (($$pre19 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre19 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre19 >> 2] = $101;
  $105 = $102;
 } else $105 = $$pre19;
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err);
 if (!$$pre$i$i$i$lcssa) $117 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $117 = 0;
 } else $117 = $$pre$i$i$i$lcssa; else $117 = $$pre$i$i$i$lcssa;
 $118 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 41; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 41;
   break;
  }
  if (!$118) label = 42;
 } while (0);
 if ((label | 0) == 41) if ($118) label = 42;
 if ((label | 0) == 42) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $132 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $10 = 0, $101 = 0, $102 = 0, $104 = 0, $106 = 0, $110 = 0, $122 = 0, $123 = 0, $137 = 0, $138 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $31 = 0, $32 = 0, $45 = 0, $51 = 0, $60 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $81 = 0, $88 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i2; else $$pre$i$i$i = $$pre$i$i$i2;
  $31 = ($$pre$i$i$i | 0) == 0;
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 20; else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) if ($31) {
    $138 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 20;
    break;
   } else if ($31) {
    $138 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 20) {
   label = 0;
   if ($31) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $138 = 0;
  }
  $45 = HEAP8[$__buf >> 0] | 0;
  $51 = ($45 & 1) == 0 ? ($45 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $51 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $60 = 10; else $60 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $60, 0);
   $65 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $65 + $51;
   $__a$1 = $65;
  } else $__a$1 = $__a$0;
  $67 = $$pre$i$i$i + 12 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $$pre$i$i$i + 16 | 0;
  if (($68 | 0) == (HEAP32[$69 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$68 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i2$i$i = $138;
   $__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67 >> 2] | 0;
  if (($81 | 0) == (HEAP32[$69 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $81 + 1;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($88 & 1) == 0 ? ($88 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $110 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre18 >> 2] = $101;
  $110 = $102;
 } else $110 = $$pre18;
 $104 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 $106 = $__v;
 HEAP32[$106 >> 2] = $104;
 HEAP32[$106 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $110, $__err);
 if (!$$pre$i$i$i$lcssa) $122 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $122 = 0;
 } else $122 = $$pre$i$i$i$lcssa; else $122 = $$pre$i$i$i$lcssa;
 $123 = ($122 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 45; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 45;
   break;
  }
  if (!$123) label = 46;
 } while (0);
 if ((label | 0) == 45) if ($123) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $137 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $137 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $10 = 0, $101 = 0, $102 = 0, $104 = 0, $106 = 0, $110 = 0, $122 = 0, $123 = 0, $137 = 0, $138 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $31 = 0, $32 = 0, $45 = 0, $51 = 0, $60 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $81 = 0, $88 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i2; else $$pre$i$i$i = $$pre$i$i$i2;
  $31 = ($$pre$i$i$i | 0) == 0;
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 20; else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) if ($31) {
    $138 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 20;
    break;
   } else if ($31) {
    $138 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 20) {
   label = 0;
   if ($31) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $138 = 0;
  }
  $45 = HEAP8[$__buf >> 0] | 0;
  $51 = ($45 & 1) == 0 ? ($45 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $51 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $60 = 10; else $60 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $60, 0);
   $65 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $65 + $51;
   $__a$1 = $65;
  } else $__a$1 = $__a$0;
  $67 = $$pre$i$i$i + 12 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $$pre$i$i$i + 16 | 0;
  if (($68 | 0) == (HEAP32[$69 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$68 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i2$i$i = $138;
   $__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67 >> 2] | 0;
  if (($81 | 0) == (HEAP32[$69 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $81 + 1;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($88 & 1) == 0 ? ($88 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $110 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre18 >> 2] = $101;
  $110 = $102;
 } else $110 = $$pre18;
 $104 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 $106 = $__v;
 HEAP32[$106 >> 2] = $104;
 HEAP32[$106 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $110, $__err);
 if (!$$pre$i$i$i$lcssa) $122 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $122 = 0;
 } else $122 = $$pre$i$i$i$lcssa; else $122 = $$pre$i$i$i$lcssa;
 $123 = ($122 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 45; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 45;
   break;
  }
  if (!$123) label = 46;
 } while (0);
 if ((label | 0) == 45) if ($123) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $137 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $137 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $10 = 0, $101 = 0, $102 = 0, $105 = 0, $117 = 0, $118 = 0, $132 = 0, $133 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $31 = 0, $32 = 0, $45 = 0, $51 = 0, $60 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $81 = 0, $88 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i2; else $$pre$i$i$i = $$pre$i$i$i2;
  $31 = ($$pre$i$i$i | 0) == 0;
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 20; else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) if ($31) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 20;
    break;
   } else if ($31) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 20) {
   label = 0;
   if ($31) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $45 = HEAP8[$__buf >> 0] | 0;
  $51 = ($45 & 1) == 0 ? ($45 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $51 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $60 = 10; else $60 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $60, 0);
   $65 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $65 + $51;
   $__a$1 = $65;
  } else $__a$1 = $__a$0;
  $67 = $$pre$i$i$i + 12 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $$pre$i$i$i + 16 | 0;
  if (($68 | 0) == (HEAP32[$69 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$68 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i2$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67 >> 2] | 0;
  if (($81 | 0) == (HEAP32[$69 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $81 + 1;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($88 & 1) == 0 ? ($88 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $105 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre18 >> 2] = $101;
  $105 = $102;
 } else $105 = $$pre18;
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err);
 if (!$$pre$i$i$i$lcssa) $117 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $117 = 0;
 } else $117 = $$pre$i$i$i$lcssa; else $117 = $$pre$i$i$i$lcssa;
 $118 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 45; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 45;
   break;
  }
  if (!$118) label = 46;
 } while (0);
 if ((label | 0) == 45) if ($118) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $132 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $10 = 0, $101 = 0, $102 = 0, $105 = 0, $117 = 0, $118 = 0, $132 = 0, $133 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $31 = 0, $32 = 0, $45 = 0, $51 = 0, $60 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $81 = 0, $88 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i2; else $$pre$i$i$i = $$pre$i$i$i2;
  $31 = ($$pre$i$i$i | 0) == 0;
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 20; else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) if ($31) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 20;
    break;
   } else if ($31) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 20) {
   label = 0;
   if ($31) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $45 = HEAP8[$__buf >> 0] | 0;
  $51 = ($45 & 1) == 0 ? ($45 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $51 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $60 = 10; else $60 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $60, 0);
   $65 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $65 + $51;
   $__a$1 = $65;
  } else $__a$1 = $__a$0;
  $67 = $$pre$i$i$i + 12 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $$pre$i$i$i + 16 | 0;
  if (($68 | 0) == (HEAP32[$69 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$68 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i2$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67 >> 2] | 0;
  if (($81 | 0) == (HEAP32[$69 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $81 + 1;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($88 & 1) == 0 ? ($88 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $105 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre18 >> 2] = $101;
  $105 = $102;
 } else $105 = $$pre18;
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err);
 if (!$$pre$i$i$i$lcssa) $117 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $117 = 0;
 } else $117 = $$pre$i$i$i$lcssa; else $117 = $$pre$i$i$i$lcssa;
 $118 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 45; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 45;
   break;
  }
  if (!$118) label = 46;
 } while (0);
 if ((label | 0) == 45) if ($118) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $132 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $10 = 0, $101 = 0, $102 = 0, $105 = 0, $117 = 0, $118 = 0, $132 = 0, $133 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $31 = 0, $32 = 0, $45 = 0, $51 = 0, $60 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $81 = 0, $88 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i2; else $$pre$i$i$i = $$pre$i$i$i2;
  $31 = ($$pre$i$i$i | 0) == 0;
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 20; else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) if ($31) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 20;
    break;
   } else if ($31) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 20) {
   label = 0;
   if ($31) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $45 = HEAP8[$__buf >> 0] | 0;
  $51 = ($45 & 1) == 0 ? ($45 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $51 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $60 = 10; else $60 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $60, 0);
   $65 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $65 + $51;
   $__a$1 = $65;
  } else $__a$1 = $__a$0;
  $67 = $$pre$i$i$i + 12 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $$pre$i$i$i + 16 | 0;
  if (($68 | 0) == (HEAP32[$69 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$68 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i2$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67 >> 2] | 0;
  if (($81 | 0) == (HEAP32[$69 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $81 + 1;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($88 & 1) == 0 ? ($88 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $105 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre18 >> 2] = $101;
  $105 = $102;
 } else $105 = $$pre18;
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err);
 if (!$$pre$i$i$i$lcssa) $117 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $117 = 0;
 } else $117 = $$pre$i$i$i$lcssa; else $117 = $$pre$i$i$i$lcssa;
 $118 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 45; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 45;
   break;
  }
  if (!$118) label = 46;
 } while (0);
 if ((label | 0) == 45) if ($118) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $132 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre18 = 0, $10 = 0, $101 = 0, $102 = 0, $105 = 0, $117 = 0, $118 = 0, $132 = 0, $133 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $31 = 0, $32 = 0, $45 = 0, $51 = 0, $60 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $81 = 0, $88 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 switch (HEAP32[$__iob + 4 >> 2] & 74 | 0) {
 case 64:
  {
   $$0$i = 8;
   break;
  }
 case 8:
  {
   $$0$i = 16;
   break;
  }
 case 0:
  {
   $$0$i = 0;
   break;
  }
 default:
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $10 = 10; else $10 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $10, 0);
 $14 = $__buf + 8 | 0;
 $16 = $__buf + 1 | 0;
 $17 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $17;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $18 = $__buf + 4 | 0;
 $19 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i2 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $17;
 L13 : while (1) {
  if (!$$pre$i$i$i2) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i2 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i2 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i2) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i2; else $$pre$i$i$i = $$pre$i$i$i2;
  $31 = ($$pre$i$i$i | 0) == 0;
  $32 = HEAP32[$__e >> 2] | 0;
  do if (!$32) label = 20; else {
   if ((HEAP32[$32 + 12 >> 2] | 0) != (HEAP32[$32 + 16 >> 2] | 0)) if ($31) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 20;
    break;
   } else if ($31) {
    $133 = $32;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $32;
    $__a$2 = $__a$0;
    break L13;
   }
  } while (0);
  if ((label | 0) == 20) {
   label = 0;
   if ($31) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $133 = 0;
  }
  $45 = HEAP8[$__buf >> 0] | 0;
  $51 = ($45 & 1) == 0 ? ($45 & 255) >>> 1 : HEAP32[$18 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $51 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $60 = 10; else $60 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $60, 0);
   $65 = (HEAP8[$__buf >> 0] & 1) == 0 ? $16 : HEAP32[$14 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $65 + $51;
   $__a$1 = $65;
  } else $__a$1 = $__a$0;
  $67 = $$pre$i$i$i + 12 | 0;
  $68 = HEAP32[$67 >> 2] | 0;
  $69 = $$pre$i$i$i + 16 | 0;
  if (($68 | 0) == (HEAP32[$69 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$68 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $$0$i, $__a$1, $__a_end, $__dc, $19, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i2$i$i = $133;
   $__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67 >> 2] | 0;
  if (($81 | 0) == (HEAP32[$69 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$67 >> 2] = $81 + 1;
   $$pre$i$i$i2 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping >> 0] | 0;
 $$pre18 = HEAP32[$__g_end >> 2] | 0;
 if (!((($88 & 1) == 0 ? ($88 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $105 = $$pre18; else if (($$pre18 - $__g | 0) < 160) {
  $101 = HEAP32[$__dc >> 2] | 0;
  $102 = $$pre18 + 4 | 0;
  HEAP32[$__g_end >> 2] = $102;
  HEAP32[$$pre18 >> 2] = $101;
  $105 = $102;
 } else $105 = $$pre18;
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $$0$i) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $105, $__err);
 if (!$$pre$i$i$i$lcssa) $117 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $117 = 0;
 } else $117 = $$pre$i$i$i$lcssa; else $117 = $$pre$i$i$i$lcssa;
 $118 = ($117 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 45; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 45;
   break;
  }
  if (!$118) label = 46;
 } while (0);
 if ((label | 0) == 45) if ($118) label = 46;
 if ((label | 0) == 46) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $132 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$0$i$i = 0, $$0$i$i2 = 0, $$01$i$i = 0, $$01$i$i1 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $103 = 0, $11 = 0, $117 = 0, $118 = 0, $123 = 0, $128 = 0, $129 = 0, $13 = 0, $135 = 0, $136 = 0, $146 = 0, $19 = 0, $24 = 0, $25 = 0, $27 = 0, $32 = 0, $33 = 0, $37 = 0, $44 = 0, $49 = 0, $5 = 0, $52 = 0, $68 = 0, $70 = 0, $76 = 0, $77 = 0, $78 = 0, $83 = 0, $84 = 0, $86 = 0, $88 = 0, $97 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa17 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677380) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677392) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1);
 HEAP32[$__oe >> 2] = $__ob;
 $5 = HEAP8[$__nb >> 0] | 0;
 switch ($5 << 24 >> 24) {
 case 43:
 case 45:
  {
   $10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, $5) | 0;
   $11 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $11 + 1;
   HEAP8[$11 >> 0] = $10;
   $__nf$0 = $__nb + 1 | 0;
   break;
  }
 default:
  $__nf$0 = $__nb;
 }
 $13 = $__ne;
 L4 : do if (($13 - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $19 = $__nf$0 + 1 | 0;
  switch (HEAP8[$19 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    $__ns$1 = $__nf$0;
    label = 10;
    break L4;
   }
  }
  $24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, 48) | 0;
  $25 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $25 + 1;
  HEAP8[$25 >> 0] = $24;
  $27 = $__nf$0 + 2 | 0;
  $32 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, HEAP8[$19 >> 0] | 0) | 0;
  $33 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $33 + 1;
  HEAP8[$33 >> 0] = $32;
  $__ns$0 = $27;
  while (1) {
   if ($__ns$0 >>> 0 >= $__ne >>> 0) {
    $__nf$1 = $27;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $37 = HEAP8[$__ns$0 >> 0] | 0;
   if (!(_isxdigit_l($37, __ZNSt3__16__clocEv() | 0) | 0)) {
    $__nf$1 = $27;
    $__ns$2 = $__ns$0;
    break L4;
   }
   $__ns$0 = $__ns$0 + 1 | 0;
  }
 } else {
  $__ns$1 = $__nf$0;
  label = 10;
 } else {
  $__ns$1 = $__nf$0;
  label = 10;
 } while (0);
 L12 : do if ((label | 0) == 10) while (1) {
  label = 0;
  if ($__ns$1 >>> 0 >= $__ne >>> 0) {
   $__nf$1 = $__nf$0;
   $__ns$2 = $__ns$1;
   break L12;
  }
  $44 = HEAP8[$__ns$1 >> 0] | 0;
  if (!(_isdigit_l($44, __ZNSt3__16__clocEv() | 0) | 0)) {
   $__nf$1 = $__nf$0;
   $__ns$2 = $__ns$1;
   break L12;
  }
  $__ns$1 = $__ns$1 + 1 | 0;
  label = 10;
 } while (0);
 $49 = HEAP8[$__grouping >> 0] | 0;
 $52 = $__grouping + 4 | 0;
 L18 : do if (!((($49 & 1) == 0 ? ($49 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  HEAP32[$__oe >> 2] = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1);
  $$pre$phiZ2D = $0;
 } else {
  L21 : do if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $$0$i$i = $__ns$2;
   $$01$i$i = $__nf$1;
   while (1) {
    $68 = $$0$i$i + -1 | 0;
    if ($$01$i$i >>> 0 >= $68 >>> 0) break L21;
    $70 = HEAP8[$$01$i$i >> 0] | 0;
    HEAP8[$$01$i$i >> 0] = HEAP8[$68 >> 0] | 0;
    HEAP8[$68 >> 0] = $70;
    $$0$i$i = $68;
    $$01$i$i = $$01$i$i + 1 | 0;
   }
  } while (0);
  $76 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0;
  $77 = $__grouping + 8 | 0;
  $78 = $__grouping + 1 | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ns$2 >>> 0) break;
   $97 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $78 : HEAP32[$77 >> 2] | 0) + $__dg$0 >> 0] | 0;
   if ($97 << 24 >> 24 > 0 & ($__dc$0 | 0) == ($97 << 24 >> 24 | 0)) {
    $101 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $101 + 1;
    HEAP8[$101 >> 0] = $76;
    $103 = HEAP8[$__grouping >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = ($__dg$0 >>> 0 < ((($103 & 1) == 0 ? ($103 & 255) >>> 1 : HEAP32[$52 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$0 | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $117 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, HEAP8[$__p$0 >> 0] | 0) | 0;
   $118 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $118 + 1;
   HEAP8[$118 >> 0] = $117;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $83 = $__ob + ($__nf$1 - $__nb) | 0;
  $84 = HEAP32[$__oe >> 2] | 0;
  if (($83 | 0) == ($84 | 0)) $$pre$phiZ2D = $0; else {
   $$0$i$i2 = $84;
   $$01$i$i1 = $83;
   while (1) {
    $86 = $$0$i$i2 + -1 | 0;
    if ($$01$i$i1 >>> 0 >= $86 >>> 0) {
     $$pre$phiZ2D = $0;
     break L18;
    }
    $88 = HEAP8[$$01$i$i1 >> 0] | 0;
    HEAP8[$$01$i$i1 >> 0] = HEAP8[$86 >> 0] | 0;
    HEAP8[$86 >> 0] = $88;
    $$0$i$i2 = $86;
    $$01$i$i1 = $$01$i$i1 + 1 | 0;
   }
  }
 } while (0);
 $__nf$2 = $__ns$2;
 while (1) {
  if ($__nf$2 >>> 0 >= $__ne >>> 0) {
   $__nf$3 = $__nf$2;
   break;
  }
  $123 = HEAP8[$__nf$2 >> 0] | 0;
  if ($123 << 24 >> 24 == 46) {
   $__nf$2$lcssa17 = $__nf$2;
   label = 29;
   break;
  }
  $135 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 28 >> 2] & 15]($0, $123) | 0;
  $136 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $136 + 1;
  HEAP8[$136 >> 0] = $135;
  $__nf$2 = $__nf$2 + 1 | 0;
 }
 if ((label | 0) == 29) {
  $128 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 63]($1) | 0;
  $129 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $129 + 1;
  HEAP8[$129 >> 0] = $128;
  $__nf$3 = $__nf$2$lcssa17 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, $__nf$3, $__ne, HEAP32[$__oe >> 2] | 0) | 0;
 $146 = (HEAP32[$__oe >> 2] | 0) + ($13 - $__nf$3) | 0;
 HEAP32[$__oe >> 2] = $146;
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $146 : $__ob + ($__np - $__nb) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$2 = 0, $$lcssa = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $124 = 0, $13 = 0, $136 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $16 = 0, $28 = 0, $3 = 0, $30 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $60 = 0, $63 = 0, $73 = 0, $76 = 0, $86 = 0, $87 = 0, $90 = 0, $92 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $148 = 1; else {
  $3 = HEAP32[$0 + 12 >> 2] | 0;
  if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $148 = 1;
   break;
  } else {
   $148 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0;
 do if (!$13) label = 14; else {
  $16 = HEAP32[$13 + 12 >> 2] | 0;
  if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0; else $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  } else if ($148) {
   $149 = $13;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($148) label = 16; else {
  $149 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $$2 = 0;
 } else if ((label | 0) == 17) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; else $$0$i$i = HEAP32[$30 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i) | 0)) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$2 = 0;
   break;
  }
  $49 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24;
  $50 = HEAP32[$__b >> 2] | 0;
  $51 = $50 + 12 | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  if (($52 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 40 >> 2] & 63]($50) | 0;
   $$0$in = $__n;
   $$pre$i3$i$i10 = $149;
   $73 = $149;
   $__r$0$in = $49;
  } else {
   HEAP32[$51 >> 2] = $52 + 4;
   $$0$in = $__n;
   $$pre$i3$i$i10 = $149;
   $73 = $149;
   $__r$0$in = $49;
  }
  while (1) {
   $__r$0 = $__r$0$in + -48 | 0;
   $$0 = $$0$in + -1 | 0;
   $60 = HEAP32[$__b >> 2] | 0;
   do if (!$60) $87 = 1; else {
    $63 = HEAP32[$60 + 12 >> 2] | 0;
    if (($63 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 63]($60) | 0; else $$0$i$i$i$i2 = HEAP32[$63 >> 2] | 0;
    if (($$0$i$i$i$i2 | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $87 = 1;
     break;
    } else {
     $87 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!$73) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;
    $150 = 0;
    $86 = 1;
   } else {
    $76 = HEAP32[$73 + 12 >> 2] | 0;
    if (($76 | 0) == (HEAP32[$73 + 16 >> 2] | 0)) $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 36 >> 2] & 63]($73) | 0; else $$0$i$i1$i$i8 = HEAP32[$76 >> 2] | 0;
    if (($$0$i$i1$i$i8 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$pre$i3$i$i25 = 0;
     $150 = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i3$i$i25 = $$pre$i3$i$i10;
     $150 = $$pre$i3$i$i10;
     $86 = ($$pre$i3$i$i10 | 0) == 0;
     break;
    }
   } while (0);
   $90 = HEAP32[$__b >> 2] | 0;
   if (!(($$0$in | 0) > 1 & ($87 ^ $86))) {
    $$lcssa = $90;
    $$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;
    $__r$0$lcssa = $__r$0;
    break;
   }
   $92 = HEAP32[$90 + 12 >> 2] | 0;
   if (($92 | 0) == (HEAP32[$90 + 16 >> 2] | 0)) $$0$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$90 >> 2] | 0) + 36 >> 2] & 63]($90) | 0; else $$0$i$i14 = HEAP32[$92 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i14) | 0)) {
    $$2 = $__r$0;
    break L22;
   }
   $111 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i14, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0;
   $112 = HEAP32[$__b >> 2] | 0;
   $113 = $112 + 12 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   if (($114 | 0) == (HEAP32[$112 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$112 >> 2] | 0) + 40 >> 2] & 63]($112) | 0;
    $$0$in = $$0;
    $$pre$i3$i$i10 = $$pre$i3$i$i25;
    $73 = $150;
    $__r$0$in = $111;
    continue;
   } else {
    HEAP32[$113 >> 2] = $114 + 4;
    $$0$in = $$0;
    $$pre$i3$i$i10 = $$pre$i3$i$i25;
    $73 = $150;
    $__r$0$in = $111;
    continue;
   }
  }
  do if (!$$lcssa) $151 = 1; else {
   $124 = HEAP32[$$lcssa + 12 >> 2] | 0;
   if (($124 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i17 = HEAP32[$124 >> 2] | 0;
   if (($$0$i$i$i$i17 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $151 = 1;
    break;
   } else {
    $151 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$$pre$i3$i$i25$lcssa) label = 60; else {
   $136 = HEAP32[$$pre$i3$i$i25$lcssa + 12 >> 2] | 0;
   if (($136 | 0) == (HEAP32[$$pre$i3$i$i25$lcssa + 16 >> 2] | 0)) $$0$i$i1$i$i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i25$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i25$lcssa) | 0; else $$0$i$i1$i$i23 = HEAP32[$136 >> 2] | 0;
   if (($$0$i$i1$i$i23 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 60;
    break;
   } else if ($151) {
    $$2 = $__r$0$lcssa;
    break L22;
   } else break;
  } while (0);
  if ((label | 0) == 60) if (!$151) {
   $$2 = $__r$0$lcssa;
   break;
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
  $$2 = $__r$0$lcssa;
 } while (0);
 return $$2 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $0 = 0, $100 = 0, $114 = 0, $115 = 0, $129 = 0, $130 = 0, $15 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $49 = 0, $55 = 0, $64 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $85 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $vararg_buffer = sp;
 $__atoms = sp + 208 | 0;
 $__grouping = sp + 196 | 0;
 $0 = sp + 180 | 0;
 $__buf = sp + 184 | 0;
 $__a_end = sp + 176 | 0;
 $__g = sp + 16 | 0;
 $__g_end = sp + 8 | 0;
 $__dc = sp + 4 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grouping + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $3 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $3;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] & 7]($4, 3671184, 3671210, $__atoms) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($3) | 0;
 $__i$0$i$i1 = 0;
 while (1) {
  if (($__i$0$i$i1 | 0) == 3) break;
  HEAP32[$__buf + ($__i$0$i$i1 << 2) >> 2] = 0;
  $__i$0$i$i1 = $__i$0$i$i1 + 1 | 0;
 }
 if (!(HEAP8[$__buf >> 0] & 1)) $15 = 10; else $15 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $15, 0);
 $19 = $__buf + 8 | 0;
 $21 = $__buf + 1 | 0;
 $22 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
 HEAP32[$__a_end >> 2] = $22;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $23 = $__buf + 4 | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $22;
 L12 : while (1) {
  if (!$$pre$i$i$i5) $$pre$i$i$i = 0; else if ((HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $$pre$i$i$i = 0;
  } else $$pre$i$i$i = $$pre$i$i$i5; else $$pre$i$i$i = $$pre$i$i$i5;
  $35 = ($$pre$i$i$i | 0) == 0;
  $36 = HEAP32[$__e >> 2] | 0;
  do if (!$36) label = 19; else {
   if ((HEAP32[$36 + 12 >> 2] | 0) != (HEAP32[$36 + 16 >> 2] | 0)) if ($35) {
    $130 = $36;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $36;
    $__a$2 = $__a$0;
    break L12;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 63]($36) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 19;
    break;
   } else if ($35) {
    $130 = $36;
    break;
   } else {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = $36;
    $__a$2 = $__a$0;
    break L12;
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   if ($35) {
    $$pre$i$i$i$lcssa = $$pre$i$i$i;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $130 = 0;
  }
  $49 = HEAP8[$__buf >> 0] | 0;
  $55 = ($49 & 1) == 0 ? ($49 & 255) >>> 1 : HEAP32[$23 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $55 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $64 = 10; else $64 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $64, 0);
   $69 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
   HEAP32[$__a_end >> 2] = $69 + $55;
   $__a$1 = $69;
  } else $__a$1 = $__a$0;
  $71 = $$pre$i$i$i + 12 | 0;
  $72 = HEAP32[$71 >> 2] | 0;
  $73 = $$pre$i$i$i + 16 | 0;
  if (($72 | 0) == (HEAP32[$73 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i) | 0; else $$0$i$i = HEAPU8[$72 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$pre$i$i$i$lcssa = $$pre$i$i$i;
   $$pre$i2$i$i = $130;
   $__a$2 = $__a$1;
   break;
  }
  $85 = HEAP32[$71 >> 2] | 0;
  if (($85 | 0) == (HEAP32[$73 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i) | 0;
   $$pre$i$i$i5 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$71 >> 2] = $85 + 1;
   $$pre$i$i$i5 = $$pre$i$i$i;
   $__a$0 = $__a$1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0);
 $99 = (HEAP8[$__buf >> 0] & 1) == 0 ? $21 : HEAP32[$19 >> 2] | 0;
 $100 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($99, $100, 3671219, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$$pre$i$i$i$lcssa) $114 = 0; else if ((HEAP32[$$pre$i$i$i$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $114 = 0;
 } else $114 = $$pre$i$i$i$lcssa; else $114 = $$pre$i$i$i$lcssa;
 $115 = ($114 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 43; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 43;
   break;
  }
  if (!$115) label = 44;
 } while (0);
 if ((label | 0) == 43) if ($115) label = 44;
 if ((label | 0) == 44) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $129 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return $129 | 0;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $104 = 0, $106 = 0, $109 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $127 = 0, $128 = 0, $137 = 0, $142 = 0, $145 = 0, $146 = 0, $152 = 0, $163 = 0, $166 = 0, $173 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $3 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $58 = 0, $65 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $94 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $newp$2 = 0, $storemerge = 0, $storemerge1 = 0;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[918963] | 0;
 $5 = $1 & 3;
 if (!(($5 | 0) != 1 & $p >>> 0 >= $4 >>> 0 & $p >>> 0 < $3 >>> 0)) _abort();
 $8 = HEAP32[$3 + 4 >> 2] | 0;
 if (!($8 & 1)) _abort();
 if (!$5) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($2 >>> 0 >= ($nb + 4 | 0) >>> 0) if (($2 - $nb | 0) >>> 0 <= HEAP32[919079] << 1 >>> 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($2 >>> 0 >= $nb >>> 0) {
  $20 = $2 - $nb | 0;
  if ($20 >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $22 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$22 + 4 >> 2] = $20 | 3;
  $29 = $22 + $20 + 4 | 0;
  HEAP32[$29 >> 2] = HEAP32[$29 >> 2] | 1;
  _dispose_chunk($22, $20);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($3 | 0) == (HEAP32[918965] | 0)) {
  $35 = (HEAP32[918962] | 0) + $2 | 0;
  if ($35 >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $37 = $35 - $nb | 0;
  $38 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$38 + 4 >> 2] = $37 | 1;
  HEAP32[918965] = $38;
  HEAP32[918962] = $37;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($3 | 0) == (HEAP32[918964] | 0)) {
  $47 = (HEAP32[918961] | 0) + $2 | 0;
  if ($47 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $49 = $47 - $nb | 0;
  if ($49 >>> 0 > 15) {
   $51 = $p + $nb | 0;
   $52 = $51 + $49 | 0;
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
   HEAP32[$51 + 4 >> 2] = $49 | 1;
   HEAP32[$52 >> 2] = $49;
   $58 = $52 + 4 | 0;
   HEAP32[$58 >> 2] = HEAP32[$58 >> 2] & -2;
   $storemerge = $51;
   $storemerge1 = $49;
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $47 | 2;
   $65 = $p + $47 + 4 | 0;
   HEAP32[$65 >> 2] = HEAP32[$65 >> 2] | 1;
   $storemerge = 0;
   $storemerge1 = 0;
  }
  HEAP32[918961] = $storemerge1;
  HEAP32[918964] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($8 & 2 | 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $71 = ($8 & -8) + $2 | 0;
 if ($71 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $73 = $71 - $nb | 0;
 $74 = $8 >>> 3;
 do if ($8 >>> 0 < 256) {
  $77 = HEAP32[$3 + 8 >> 2] | 0;
  $79 = HEAP32[$3 + 12 >> 2] | 0;
  $81 = 3675876 + ($74 << 1 << 2) | 0;
  if (($77 | 0) != ($81 | 0)) {
   if ($77 >>> 0 < $4 >>> 0) _abort();
   if ((HEAP32[$77 + 12 >> 2] | 0) != ($3 | 0)) _abort();
  }
  if (($79 | 0) == ($77 | 0)) {
   HEAP32[918959] = HEAP32[918959] & ~(1 << $74);
   break;
  }
  if (($79 | 0) == ($81 | 0)) $$pre$phiZ2D = $79 + 8 | 0; else {
   if ($79 >>> 0 < $4 >>> 0) _abort();
   $94 = $79 + 8 | 0;
   if ((HEAP32[$94 >> 2] | 0) == ($3 | 0)) $$pre$phiZ2D = $94; else _abort();
  }
  HEAP32[$77 + 12 >> 2] = $79;
  HEAP32[$$pre$phiZ2D >> 2] = $77;
 } else {
  $99 = HEAP32[$3 + 24 >> 2] | 0;
  $101 = HEAP32[$3 + 12 >> 2] | 0;
  do if (($101 | 0) == ($3 | 0)) {
   $112 = $3 + 16 | 0;
   $113 = $112 + 4 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   if (!$114) {
    $116 = HEAP32[$112 >> 2] | 0;
    if (!$116) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $116;
     $RP$1 = $112;
    }
   } else {
    $R$1 = $114;
    $RP$1 = $113;
   }
   while (1) {
    $118 = $R$1 + 20 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    if ($119 | 0) {
     $R$1 = $119;
     $RP$1 = $118;
     continue;
    }
    $121 = $R$1 + 16 | 0;
    $122 = HEAP32[$121 >> 2] | 0;
    if (!$122) {
     $R$1$lcssa = $R$1;
     $RP$1$lcssa = $RP$1;
     break;
    } else {
     $R$1 = $122;
     $RP$1 = $121;
    }
   }
   if ($RP$1$lcssa >>> 0 < $4 >>> 0) _abort(); else {
    HEAP32[$RP$1$lcssa >> 2] = 0;
    $R$3 = $R$1$lcssa;
    break;
   }
  } else {
   $104 = HEAP32[$3 + 8 >> 2] | 0;
   if ($104 >>> 0 < $4 >>> 0) _abort();
   $106 = $104 + 12 | 0;
   if ((HEAP32[$106 >> 2] | 0) != ($3 | 0)) _abort();
   $109 = $101 + 8 | 0;
   if ((HEAP32[$109 >> 2] | 0) == ($3 | 0)) {
    HEAP32[$106 >> 2] = $101;
    HEAP32[$109 >> 2] = $104;
    $R$3 = $101;
    break;
   } else _abort();
  } while (0);
  if ($99 | 0) {
   $127 = HEAP32[$3 + 28 >> 2] | 0;
   $128 = 3676140 + ($127 << 2) | 0;
   if (($3 | 0) == (HEAP32[$128 >> 2] | 0)) {
    HEAP32[$128 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[918960] = HEAP32[918960] & ~(1 << $127);
     break;
    }
   } else {
    if ($99 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort();
    $137 = $99 + 16 | 0;
    if ((HEAP32[$137 >> 2] | 0) == ($3 | 0)) HEAP32[$137 >> 2] = $R$3; else HEAP32[$99 + 20 >> 2] = $R$3;
    if (!$R$3) break;
   }
   $142 = HEAP32[918963] | 0;
   if ($R$3 >>> 0 < $142 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $99;
   $145 = $3 + 16 | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   do if ($146 | 0) if ($146 >>> 0 < $142 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $146;
    HEAP32[$146 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $152 = HEAP32[$145 + 4 >> 2] | 0;
   if ($152 | 0) if ($152 >>> 0 < (HEAP32[918963] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $152;
    HEAP32[$152 + 24 >> 2] = $R$3;
    break;
   }
  }
 } while (0);
 if ($73 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $71 | $1 & 1 | 2;
  $163 = $p + $71 + 4 | 0;
  HEAP32[$163 >> 2] = HEAP32[$163 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $166 = $p + $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$166 + 4 >> 2] = $73 | 3;
  $173 = $166 + $73 + 4 | 0;
  HEAP32[$173 >> 2] = HEAP32[$173 >> 2] | 1;
  _dispose_chunk($166, $73);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $48 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $70 = 0, $77 = 0, $78 = 0, $79 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off0 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $p$0 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0;
 L1 : do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else {
  if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
   $59 = HEAP32[$this + 12 >> 2] | 0;
   $60 = $this + 16 + ($59 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
   $61 = $this + 24 | 0;
   if (($59 | 0) <= 1) break;
   $64 = HEAP32[$this + 8 >> 2] | 0;
   if (!($64 & 2)) {
    $67 = $info + 36 | 0;
    if ((HEAP32[$67 >> 2] | 0) != 1) {
     if (!($64 & 1)) {
      $79 = $info + 54 | 0;
      $p2$2 = $61;
      while (1) {
       if (HEAP8[$79 >> 0] | 0) break L1;
       if ((HEAP32[$67 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2, $info, $current_ptr, $path_below, $use_strcmp);
       $p2$2 = $p2$2 + 8 | 0;
       if ($p2$2 >>> 0 >= $60 >>> 0) break L1;
      }
     }
     $77 = $info + 24 | 0;
     $78 = $info + 54 | 0;
     $p2$1 = $61;
     while (1) {
      if (HEAP8[$78 >> 0] | 0) break L1;
      if ((HEAP32[$67 >> 2] | 0) == 1) if ((HEAP32[$77 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1, $info, $current_ptr, $path_below, $use_strcmp);
      $p2$1 = $p2$1 + 8 | 0;
      if ($p2$1 >>> 0 >= $60 >>> 0) break L1;
     }
    }
   }
   $70 = $info + 54 | 0;
   $p2$0 = $61;
   while (1) {
    if (HEAP8[$70 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0, $info, $current_ptr, $path_below, $use_strcmp);
    $p2$0 = $p2$0 + 8 | 0;
    if ($p2$0 >>> 0 >= $60 >>> 0) break L1;
   }
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $20 = $info + 44 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 4) break;
    $26 = $this + 16 + (HEAP32[$this + 12 >> 2] << 3) | 0;
    $27 = $info + 52 | 0;
    $28 = $info + 53 | 0;
    $29 = $info + 54 | 0;
    $30 = $this + 8 | 0;
    $31 = $info + 24 | 0;
    $does_dst_type_point_to_our_static_type$0$off0 = 0;
    $is_dst_type_derived_from_static_type$0$off0 = 0;
    $p$0 = $this + 16 | 0;
    L34 : while (1) {
     if ($p$0 >>> 0 >= $26 >>> 0) {
      $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;
      $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
      label = 20;
      break;
     }
     HEAP8[$27 >> 0] = 0;
     HEAP8[$28 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if (HEAP8[$29 >> 0] | 0) {
      $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;
      $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
      label = 20;
      break;
     }
     do if (!(HEAP8[$28 >> 0] | 0)) {
      $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;
      $is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off0;
     } else {
      if (!(HEAP8[$27 >> 0] | 0)) if (!(HEAP32[$30 >> 2] & 1)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;
       $is_dst_type_derived_from_static_type$2$off0 = 1;
       label = 20;
       break L34;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;
       $is_dst_type_derived_from_static_type$1$off0 = 1;
       break;
      }
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       label = 25;
       break L34;
      }
      if (!(HEAP32[$30 >> 2] & 2)) {
       label = 25;
       break L34;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = 1;
       $is_dst_type_derived_from_static_type$1$off0 = 1;
      }
     } while (0);
     $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;
     $is_dst_type_derived_from_static_type$0$off0 = $is_dst_type_derived_from_static_type$1$off0;
     $p$0 = $p$0 + 8 | 0;
    }
    do if ((label | 0) == 20) {
     if (!$does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      HEAP32[$14 >> 2] = $current_ptr;
      $48 = $info + 40 | 0;
      HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
      if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$31 >> 2] | 0) == 2) {
       HEAP8[$29 >> 0] = 1;
       if ($is_dst_type_derived_from_static_type$2$off0) {
        label = 25;
        break;
       } else {
        $56 = 4;
        break;
       }
      }
     }
     if ($is_dst_type_derived_from_static_type$2$off0) label = 25; else $56 = 4;
    } while (0);
    if ((label | 0) == 25) $56 = 3;
    HEAP32[$20 >> 2] = $56;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$2 = 0, $$lcssa = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $107 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $142 = 0, $143 = 0, $157 = 0, $28 = 0, $30 = 0, $40 = 0, $42 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $65 = 0, $77 = 0, $78 = 0, $79 = 0, $91 = 0, $95 = 0, $97 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $12 = 0; else if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $12 = 0;
  break;
 } else {
  $12 = HEAP32[$__b >> 2] | 0;
  break;
 } else $12 = $0; while (0);
 $13 = ($12 | 0) == 0;
 $14 = HEAP32[$__e >> 2] | 0;
 do if (!$14) label = 11; else {
  if ((HEAP32[$14 + 12 >> 2] | 0) == (HEAP32[$14 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 63]($14) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 11;
   break;
  }
  if ($13) {
   $157 = $14;
   label = 13;
  } else label = 12;
 } while (0);
 if ((label | 0) == 11) if ($13) label = 12; else {
  $157 = 0;
  label = 13;
 }
 L16 : do if ((label | 0) == 12) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $$2 = 0;
 } else if ((label | 0) == 13) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; else $$0$i$i = HEAPU8[$30 >> 0] | 0;
  $40 = $$0$i$i & 255;
  if ($40 << 24 >> 24 > -1) {
   $42 = $__ct + 8 | 0;
   if (HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 2048) {
    $54 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $40, 0) | 0) << 24 >> 24;
    $55 = HEAP32[$__b >> 2] | 0;
    $56 = $55 + 12 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    if (($57 | 0) == (HEAP32[$55 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 40 >> 2] & 63]($55) | 0;
     $$0$in = $__n;
     $$pre$i2$i$i7 = $157;
     $79 = $157;
     $__r$0$in = $54;
    } else {
     HEAP32[$56 >> 2] = $57 + 1;
     $$0$in = $__n;
     $$pre$i2$i$i7 = $157;
     $79 = $157;
     $__r$0$in = $54;
    }
    while (1) {
     $__r$0 = $__r$0$in + -48 | 0;
     $$0 = $$0$in + -1 | 0;
     $65 = HEAP32[$__b >> 2] | 0;
     do if (!$65) $77 = 0; else if ((HEAP32[$65 + 12 >> 2] | 0) == (HEAP32[$65 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 36 >> 2] & 63]($65) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $77 = 0;
      break;
     } else {
      $77 = HEAP32[$__b >> 2] | 0;
      break;
     } else $77 = $65; while (0);
     $78 = ($77 | 0) == 0;
     if (!$79) {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;
      $91 = 0;
     } else if ((HEAP32[$79 + 12 >> 2] | 0) == (HEAP32[$79 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$79 >> 2] | 0) + 36 >> 2] & 63]($79) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      $$pre$i2$i$i20 = 0;
      $91 = 0;
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;
      $91 = $$pre$i2$i$i7;
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;
      $91 = $79;
     }
     $95 = HEAP32[$__b >> 2] | 0;
     if (!(($$0$in | 0) > 1 & ($78 ^ ($91 | 0) == 0))) {
      $$lcssa = $95;
      $$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;
      $__r$0$lcssa = $__r$0;
      break;
     }
     $97 = HEAP32[$95 + 12 >> 2] | 0;
     if (($97 | 0) == (HEAP32[$95 + 16 >> 2] | 0)) $$0$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$95 >> 2] | 0) + 36 >> 2] & 63]($95) | 0; else $$0$i$i10 = HEAPU8[$97 >> 0] | 0;
     $107 = $$0$i$i10 & 255;
     if ($107 << 24 >> 24 <= -1) {
      $$2 = $__r$0;
      break L16;
     }
     if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i10 << 24 >> 24 << 1) >> 1] & 2048)) {
      $$2 = $__r$0;
      break L16;
     }
     $120 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $107, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0;
     $121 = HEAP32[$__b >> 2] | 0;
     $122 = $121 + 12 | 0;
     $123 = HEAP32[$122 >> 2] | 0;
     if (($123 | 0) == (HEAP32[$121 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$121 >> 2] | 0) + 40 >> 2] & 63]($121) | 0;
      $$0$in = $$0;
      $$pre$i2$i$i7 = $$pre$i2$i$i20;
      $79 = $91;
      $__r$0$in = $120;
      continue;
     } else {
      HEAP32[$122 >> 2] = $123 + 1;
      $$0$in = $$0;
      $$pre$i2$i$i7 = $$pre$i2$i$i20;
      $79 = $91;
      $__r$0$in = $120;
      continue;
     }
    }
    do if (!$$lcssa) $142 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $142 = 0;
     break;
    } else {
     $142 = HEAP32[$__b >> 2] | 0;
     break;
    } else $142 = $$lcssa; while (0);
    $143 = ($142 | 0) == 0;
    do if (!$$pre$i2$i$i20$lcssa) label = 50; else {
     if ((HEAP32[$$pre$i2$i$i20$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i20$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i20$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i20$lcssa) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 50;
      break;
     }
     if ($143) {
      $$2 = $__r$0$lcssa;
      break L16;
     }
    } while (0);
    if ((label | 0) == 50) if (!$143) {
     $$2 = $__r$0$lcssa;
     break;
    }
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    $$2 = $__r$0$lcssa;
    break;
   }
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$2 = 0;
 } while (0);
 return $$2 | 0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $147 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $17 = 0, $2 = 0, $24 = 0.0, $26 = 0, $27 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $94 = 0, $95 = 0, $97 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $fabs = 0.0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $6 = $4 & 2047;
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $12 = tempRet0;
 L1 : do if (($11 | 0) == 0 & ($12 | 0) == 0) label = 3; else {
  $fabs = +Math_abs(+$y);
  HEAPF64[tempDoublePtr >> 3] = $fabs;
  $17 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  if ($17 >>> 0 > 2146435072 | ($17 | 0) == 2146435072 & (HEAP32[tempDoublePtr >> 2] | 0) >>> 0 > 0 | ($6 | 0) == 2047) label = 3; else {
   $26 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $27 = tempRet0;
   if (!($27 >>> 0 > $12 >>> 0 | ($27 | 0) == ($12 | 0) & $26 >>> 0 > $11 >>> 0)) return +(($26 | 0) == ($11 | 0) & ($27 | 0) == ($12 | 0) ? $x * 0.0 : $x);
   if (!$6) {
    $38 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $39 = tempRet0;
    if (($39 | 0) > -1 | ($39 | 0) == -1 & $38 >>> 0 > 4294967295) {
     $46 = $38;
     $47 = $39;
     $ex$026 = 0;
     while (1) {
      $45 = $ex$026 + -1 | 0;
      $46 = _bitshift64Shl($46 | 0, $47 | 0, 1) | 0;
      $47 = tempRet0;
      if (!(($47 | 0) > -1 | ($47 | 0) == -1 & $46 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $45;
       break;
      } else $ex$026 = $45;
     }
    } else $ex$0$lcssa = 0;
    $56 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $84 = $56;
    $85 = tempRet0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $84 = $0;
    $85 = $1 & 1048575 | 1048576;
    $ex$1 = $6;
   }
   if (!$9) {
    $61 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $62 = tempRet0;
    if (($62 | 0) > -1 | ($62 | 0) == -1 & $61 >>> 0 > 4294967295) {
     $69 = $61;
     $70 = $62;
     $ey$020 = 0;
     while (1) {
      $68 = $ey$020 + -1 | 0;
      $69 = _bitshift64Shl($69 | 0, $70 | 0, 1) | 0;
      $70 = tempRet0;
      if (!(($70 | 0) > -1 | ($70 | 0) == -1 & $69 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $68;
       break;
      } else $ey$020 = $68;
     }
    } else $ey$0$lcssa = 0;
    $79 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $86 = $79;
    $87 = tempRet0;
    $ey$1$ph = $ey$0$lcssa;
   } else {
    $86 = $2;
    $87 = $3 & 1048575 | 1048576;
    $ey$1$ph = $9;
   }
   $88 = _i64Subtract($84 | 0, $85 | 0, $86 | 0, $87 | 0) | 0;
   $89 = tempRet0;
   $94 = ($89 | 0) > -1 | ($89 | 0) == -1 & $88 >>> 0 > 4294967295;
   L23 : do if (($ex$1 | 0) > ($ey$1$ph | 0)) {
    $153 = $94;
    $154 = $88;
    $155 = $89;
    $95 = $84;
    $97 = $85;
    $ex$212 = $ex$1;
    while (1) {
     if ($153) if (($95 | 0) == ($86 | 0) & ($97 | 0) == ($87 | 0)) break; else {
      $101 = $154;
      $102 = $155;
     } else {
      $101 = $95;
      $102 = $97;
     }
     $103 = _bitshift64Shl($101 | 0, $102 | 0, 1) | 0;
     $104 = tempRet0;
     $105 = $ex$212 + -1 | 0;
     $107 = _i64Subtract($103 | 0, $104 | 0, $86 | 0, $87 | 0) | 0;
     $108 = tempRet0;
     $113 = ($108 | 0) > -1 | ($108 | 0) == -1 & $107 >>> 0 > 4294967295;
     if (($105 | 0) > ($ey$1$ph | 0)) {
      $153 = $113;
      $154 = $107;
      $155 = $108;
      $95 = $103;
      $97 = $104;
      $ex$212 = $105;
     } else {
      $$lcssa7 = $113;
      $114 = $103;
      $116 = $104;
      $156 = $107;
      $157 = $108;
      $ex$2$lcssa = $105;
      break L23;
     }
    }
    $$0 = $x * 0.0;
    break L1;
   } else {
    $$lcssa7 = $94;
    $114 = $84;
    $116 = $85;
    $156 = $88;
    $157 = $89;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($$lcssa7) if (($114 | 0) == ($86 | 0) & ($116 | 0) == ($87 | 0)) {
    $$0 = $x * 0.0;
    break;
   } else {
    $119 = $157;
    $121 = $156;
   } else {
    $119 = $116;
    $121 = $114;
   }
   if ($119 >>> 0 < 1048576 | ($119 | 0) == 1048576 & $121 >>> 0 < 0) {
    $127 = $121;
    $128 = $119;
    $ex$39 = $ex$2$lcssa;
    while (1) {
     $129 = _bitshift64Shl($127 | 0, $128 | 0, 1) | 0;
     $130 = tempRet0;
     $131 = $ex$39 + -1 | 0;
     if ($130 >>> 0 < 1048576 | ($130 | 0) == 1048576 & $129 >>> 0 < 0) {
      $127 = $129;
      $128 = $130;
      $ex$39 = $131;
     } else {
      $138 = $129;
      $139 = $130;
      $ex$3$lcssa = $131;
      break;
     }
    }
   } else {
    $138 = $121;
    $139 = $119;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $140 = _i64Add($138 | 0, $139 | 0, 0, -1048576) | 0;
    $141 = tempRet0;
    $142 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $150 = $141 | tempRet0;
    $152 = $140 | $142;
   } else {
    $147 = _bitshift64Lshr($138 | 0, $139 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $150 = tempRet0;
    $152 = $147;
   }
   HEAP32[tempDoublePtr >> 2] = $152;
   HEAP32[tempDoublePtr + 4 >> 2] = $150 | $10;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $24 = $x * $y;
  $$0 = $24 / $24;
 }
 return +$$0;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $4 = 0, $42 = 0, $5 = 0, $54 = 0, $62 = 0, $73 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $90 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hn$sroa$0$0 = 0, $__hw$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i2 = 0, $__i$0$i$i4 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 $$byval_copy = sp + 8 | 0;
 $vararg_buffer1 = sp;
 $__buf = sp + 896 | 0;
 $__bb = sp + 888 | 0;
 $__digits = sp + 488 | 0;
 $__loc = sp + 480 | 0;
 $__pat = sp + 892 | 0;
 $__dp = sp + 476 | 0;
 $__ts = sp + 472 | 0;
 $__grp = sp + 460 | 0;
 $__sym = sp + 448 | 0;
 $__sn = sp + 436 | 0;
 $__fd = sp + 432 | 0;
 $__mbuf = sp + 32 | 0;
 $__mi = sp + 24 | 0;
 $__me = sp + 16 | 0;
 $0 = sp + 20 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$$byval_copy >> 3] = $__units;
 $1 = _snprintf($__buf, 100, 3672684, $$byval_copy) | 0;
 if ($1 >>> 0 > 99) {
  $3 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $__units;
  $4 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $3, 3672684, $vararg_buffer1) | 0;
  $5 = HEAP32[$__bb >> 2] | 0;
  if (!$5) __ZSt17__throw_bad_allocv();
  $9 = _malloc($4 << 2) | 0;
  if (!$9) __ZSt17__throw_bad_allocv(); else {
   $__db$0 = $9;
   $__hd$sroa$0$0 = $9;
   $__hn$sroa$0$0 = $5;
   $__n$0 = $4;
  }
 } else {
  $__db$0 = $__digits;
  $__hd$sroa$0$0 = 0;
  $__hn$sroa$0$0 = 0;
  $__n$0 = $1;
 }
 $12 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $12;
 $13 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677412) | 0;
 $14 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 48 >> 2] & 7]($13, $14, $14 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $29 = 0; else $29 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i2 = 0;
 while (1) {
  if (($__i$0$i$i2 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i2 << 2) >> 2] = 0;
  $__i$0$i$i2 = $__i$0$i$i2 + 1 | 0;
 }
 $__i$0$i$i4 = 0;
 while (1) {
  if (($__i$0$i$i4 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i4 << 2) >> 2] = 0;
  $__i$0$i$i4 = $__i$0$i$i4 + 1 | 0;
 }
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $29, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $30 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($30 | 0)) {
  $34 = HEAP8[$__sn >> 0] | 0;
  $42 = HEAP8[$__sym >> 0] | 0;
  $73 = ($__n$0 - $30 << 1 | 1) + $30 + (($34 & 1) == 0 ? ($34 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($42 & 1) == 0 ? ($42 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 } else {
  $54 = HEAP8[$__sn >> 0] | 0;
  $62 = HEAP8[$__sym >> 0] | 0;
  $73 = $30 + 2 + (($54 & 1) == 0 ? ($54 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($62 & 1) == 0 ? ($62 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 }
 if ($73 >>> 0 > 100) {
  $76 = _malloc($73 << 2) | 0;
  if (!$76) __ZSt17__throw_bad_allocv(); else {
   $__hw$sroa$0$0 = $76;
   $__mb$0 = $76;
  }
 } else {
  $__hw$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + ($__n$0 << 2) | 0, $13, $29, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $30);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $85 = HEAP32[$__mi >> 2] | 0;
 $86 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $87 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $85, $86, $__iob, $__fl) | 0;
 if (!$__hw$sroa$0$0) $90 = $12; else {
  _free($__hw$sroa$0$0);
  $90 = HEAP32[$__loc >> 2] | 0;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv($90) | 0;
 if ($__hd$sroa$0$0 | 0) _free($__hd$sroa$0$0);
 if ($__hn$sroa$0$0 | 0) _free($__hn$sroa$0$0);
 STACKTOP = sp;
 return $87 | 0;
}

function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$lcssa = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$lcssa87 = 0, $$pre42 = 0, $116 = 0, $16 = 0, $17 = 0, $28 = 0, $38 = 0, $42 = 0, $44 = 0, $57 = 0, $71 = 0, $77 = 0, $79 = 0, $81 = 0, $93 = 0, $96 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$5 = 0, $nchar16_t$0 = 0, $nchar16_t$2 = 0, label = 0;
 $$pre42 = $frm_end;
 if (!($mode & 4)) {
  $frm_nxt$1 = $frm;
  $nchar16_t$0 = 0;
 } else if (($$pre42 - $frm | 0) > 2) if ((HEAP8[$frm >> 0] | 0) == -17) if ((HEAP8[$frm + 1 >> 0] | 0) == -69) {
  $frm_nxt$1 = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm;
  $nchar16_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar16_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar16_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar16_t$0 = 0;
 }
 L6 : while (1) {
  if (!($nchar16_t$0 >>> 0 < $mx >>> 0 & $frm_nxt$1 >>> 0 < $frm_end >>> 0)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $16 = HEAP8[$frm_nxt$1 >> 0] | 0;
  $17 = $16 & 255;
  if ($17 >>> 0 > $Maxcode >>> 0) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  do if ($16 << 24 >> 24 > -1) {
   $frm_nxt$5 = $frm_nxt$1 + 1 | 0;
   $nchar16_t$2 = $nchar16_t$0;
  } else {
   if (($16 & 255) < 194) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   if (($16 & 255) < 224) {
    if (($$pre42 - $frm_nxt$1 | 0) < 2) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $28 = HEAPU8[$frm_nxt$1 + 1 >> 0] | 0;
    if (($28 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    if (($28 & 63 | $17 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    } else {
     $frm_nxt$5 = $frm_nxt$1 + 2 | 0;
     $nchar16_t$2 = $nchar16_t$0;
     break;
    }
   }
   if (($16 & 255) < 240) {
    $38 = $frm_nxt$1;
    if (($$pre42 - $38 | 0) < 3) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $42 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
    $44 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
    switch ($17 | 0) {
    case 224:
     {
      if (($42 & -32) << 24 >> 24 != -96) {
       $$lcssa86 = $38;
       label = 19;
       break L6;
      }
      break;
     }
    case 237:
     {
      if (($42 & -32) << 24 >> 24 != -128) {
       $$lcssa85 = $38;
       label = 21;
       break L6;
      }
      break;
     }
    default:
     if (($42 & -64) << 24 >> 24 != -128) {
      $$lcssa87 = $38;
      label = 23;
      break L6;
     }
    }
    $57 = $44 & 255;
    if (($57 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    if ((($42 & 255) << 6 & 4032 | $17 << 12 & 61440 | $57 & 63) >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    } else {
     $frm_nxt$5 = $frm_nxt$1 + 3 | 0;
     $nchar16_t$2 = $nchar16_t$0;
     break;
    }
   }
   if (($16 & 255) >= 245) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $71 = $frm_nxt$1;
   if (($mx - $nchar16_t$0 | 0) >>> 0 < 2 | ($$pre42 - $71 | 0) < 4) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $77 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
   $79 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
   $81 = HEAP8[$frm_nxt$1 + 3 >> 0] | 0;
   switch ($17 | 0) {
   case 240:
    {
     if (($77 + 112 & 255) >= 48) {
      $$lcssa83 = $71;
      label = 30;
      break L6;
     }
     break;
    }
   case 244:
    {
     if (($77 & -16) << 24 >> 24 != -128) {
      $$lcssa = $71;
      label = 32;
      break L6;
     }
     break;
    }
   default:
    if (($77 & -64) << 24 >> 24 != -128) {
     $$lcssa84 = $71;
     label = 34;
     break L6;
    }
   }
   $93 = $79 & 255;
   if (($93 & 192 | 0) != 128) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $96 = $81 & 255;
   if (($96 & 192 | 0) != 128) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   if ((($77 & 255) << 12 & 258048 | $17 << 18 & 1835008 | $93 << 6 & 4032 | $96 & 63) >>> 0 > $Maxcode >>> 0) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $frm_nxt$5 = $frm_nxt$1 + 4 | 0;
   $nchar16_t$2 = $nchar16_t$0 + 1 | 0;
  } while (0);
  $frm_nxt$1 = $frm_nxt$5;
  $nchar16_t$0 = $nchar16_t$2 + 1 | 0;
 }
 if ((label | 0) == 19) $116 = $$lcssa86 - $frm | 0; else if ((label | 0) == 21) $116 = $$lcssa85 - $frm | 0; else if ((label | 0) == 23) $116 = $$lcssa87 - $frm | 0; else if ((label | 0) == 30) $116 = $$lcssa83 - $frm | 0; else if ((label | 0) == 32) $116 = $$lcssa - $frm | 0; else if ((label | 0) == 34) $116 = $$lcssa84 - $frm | 0; else if ((label | 0) == 40) $116 = $frm_nxt$1$lcssa - $frm | 0;
 return $116 | 0;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($this, $__s, $__intl, $__iob, $__fl, $__units) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $28 = 0, $29 = 0, $3 = 0, $33 = 0, $4 = 0, $41 = 0, $5 = 0, $53 = 0, $61 = 0, $72 = 0, $74 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $88 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__hd$sroa$0$0 = 0, $__hn$sroa$0$0 = 0, $__hw$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i4 = 0, $__i$0$i$i7 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 $$byval_copy = sp + 8 | 0;
 $vararg_buffer1 = sp;
 $__buf = sp + 284 | 0;
 $__bb = sp + 72 | 0;
 $__digits = sp + 184 | 0;
 $__loc = sp + 68 | 0;
 $__pat = sp + 180 | 0;
 $__dp = sp + 177 | 0;
 $__ts = sp + 176 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__sn = sp + 32 | 0;
 $__fd = sp + 28 | 0;
 $__mbuf = sp + 76 | 0;
 $__mi = sp + 24 | 0;
 $__me = sp + 16 | 0;
 $0 = sp + 20 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[$$byval_copy >> 3] = $__units;
 $1 = _snprintf($__buf, 100, 3672684, $$byval_copy) | 0;
 if ($1 >>> 0 > 99) {
  $3 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[$vararg_buffer1 >> 3] = $__units;
  $4 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $3, 3672684, $vararg_buffer1) | 0;
  $5 = HEAP32[$__bb >> 2] | 0;
  if (!$5) __ZSt17__throw_bad_allocv();
  $8 = _malloc($4) | 0;
  if (!$8) __ZSt17__throw_bad_allocv(); else {
   $__db$0 = $8;
   $__hd$sroa$0$0 = $8;
   $__hn$sroa$0$0 = $5;
   $__n$0 = $4;
  }
 } else {
  $__db$0 = $__digits;
  $__hd$sroa$0$0 = 0;
  $__hn$sroa$0$0 = 0;
  $__n$0 = $1;
 }
 $11 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $11;
 $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677380) | 0;
 $13 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 7]($12, $13, $13 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $28 = 0; else $28 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i4 = 0;
 while (1) {
  if (($__i$0$i$i4 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i4 << 2) >> 2] = 0;
  $__i$0$i$i4 = $__i$0$i$i4 + 1 | 0;
 }
 $__i$0$i$i7 = 0;
 while (1) {
  if (($__i$0$i$i7 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i7 << 2) >> 2] = 0;
  $__i$0$i$i7 = $__i$0$i$i7 + 1 | 0;
 }
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $28, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $29 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($29 | 0)) {
  $33 = HEAP8[$__sn >> 0] | 0;
  $41 = HEAP8[$__sym >> 0] | 0;
  $72 = ($__n$0 - $29 << 1 | 1) + $29 + (($33 & 1) == 0 ? ($33 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($41 & 1) == 0 ? ($41 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 } else {
  $53 = HEAP8[$__sn >> 0] | 0;
  $61 = HEAP8[$__sym >> 0] | 0;
  $72 = $29 + 2 + (($53 & 1) == 0 ? ($53 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($61 & 1) == 0 ? ($61 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 }
 if ($72 >>> 0 > 100) {
  $74 = _malloc($72) | 0;
  if (!$74) __ZSt17__throw_bad_allocv(); else {
   $__hw$sroa$0$0 = $74;
   $__mb$0 = $74;
  }
 } else {
  $__hw$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + $__n$0 | 0, $12, $28, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $29);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $83 = HEAP32[$__mi >> 2] | 0;
 $84 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $85 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $83, $84, $__iob, $__fl) | 0;
 if (!$__hw$sroa$0$0) $88 = $11; else {
  _free($__hw$sroa$0$0);
  $88 = HEAP32[$__loc >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv($88) | 0;
 if ($__hd$sroa$0$0 | 0) _free($__hd$sroa$0$0);
 if ($__hn$sroa$0$0 | 0) _free($__hn$sroa$0$0);
 STACKTOP = sp;
 return $85 | 0;
}

function __ZNSt3__16locale5__impC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $2 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 18008;
 $2 = $this + 8 | 0;
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($2, 28);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this + 144 | 0, 3671217, 1);
 $4 = HEAP32[$2 >> 2] | 0;
 $5 = $this + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 while (1) {
  if (($6 | 0) == ($4 | 0)) break;
  $8 = $6 + -4 | 0;
  HEAP32[$5 >> 2] = $8;
  $6 = $8;
 }
 HEAP32[918537] = 0;
 HEAP32[918536] = 15672;
 __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this, 3674144);
 HEAP32[918539] = 0;
 HEAP32[918538] = 15704;
 __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this, 3674152);
 __ZNSt3__15ctypeIcEC2EPKtbj(3674160, 0, 0, 1);
 __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this, 3674160);
 HEAP32[918545] = 0;
 HEAP32[918544] = 18224;
 __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this, 3674176);
 HEAP32[918547] = 0;
 HEAP32[918546] = 18292;
 __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, 3674184);
 HEAP32[918549] = 0;
 HEAP32[918548] = 17960;
 HEAP32[918550] = __ZNSt3__16__clocEv() | 0;
 __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, 3674192);
 HEAP32[918553] = 0;
 HEAP32[918552] = 18340;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, 3674208);
 HEAP32[918555] = 0;
 HEAP32[918554] = 18388;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, 3674216);
 __ZNSt3__18numpunctIcEC2Ej(3674224, 1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this, 3674224);
 __ZNSt3__18numpunctIwEC2Ej(3674248, 1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this, 3674248);
 HEAP32[918571] = 0;
 HEAP32[918570] = 15736;
 __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 3674280);
 HEAP32[918573] = 0;
 HEAP32[918572] = 15800;
 __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 3674288);
 HEAP32[918575] = 0;
 HEAP32[918574] = 15864;
 __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 3674296);
 HEAP32[918577] = 0;
 HEAP32[918576] = 15916;
 __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 3674304);
 HEAP32[918579] = 0;
 HEAP32[918578] = 17464;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, 3674312);
 HEAP32[918581] = 0;
 HEAP32[918580] = 17520;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, 3674320);
 HEAP32[918583] = 0;
 HEAP32[918582] = 17576;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, 3674328);
 HEAP32[918585] = 0;
 HEAP32[918584] = 17632;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, 3674336);
 HEAP32[918587] = 0;
 HEAP32[918586] = 17688;
 __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 3674344);
 HEAP32[918589] = 0;
 HEAP32[918588] = 17716;
 __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 3674352);
 HEAP32[918591] = 0;
 HEAP32[918590] = 17744;
 __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 3674360);
 HEAP32[918593] = 0;
 HEAP32[918592] = 17772;
 __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 3674368);
 HEAP32[918595] = 0;
 HEAP32[918594] = 15968;
 HEAP32[918596] = 16016;
 __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 3674376);
 HEAP32[918599] = 0;
 HEAP32[918598] = 16052;
 HEAP32[918600] = 16100;
 __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 3674392);
 HEAP32[918603] = 0;
 HEAP32[918602] = 18204;
 HEAP32[918604] = __ZNSt3__16__clocEv() | 0;
 HEAP32[918602] = 17416;
 __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 3674408);
 HEAP32[918607] = 0;
 HEAP32[918606] = 18204;
 HEAP32[918608] = __ZNSt3__16__clocEv() | 0;
 HEAP32[918606] = 17440;
 __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 3674424);
 HEAP32[918611] = 0;
 HEAP32[918610] = 17800;
 __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this, 3674440);
 HEAP32[918613] = 0;
 HEAP32[918612] = 17832;
 __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this, 3674448);
 return;
}

function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$37 = 0, $$lcssa = 0, $$lcssa88 = 0, $$lcssa89 = 0, $$lcssa90 = 0, $$lcssa91 = 0, $$lcssa92 = 0, $$pre47 = 0, $16 = 0, $17 = 0, $28 = 0, $38 = 0, $42 = 0, $44 = 0, $57 = 0, $71 = 0, $75 = 0, $77 = 0, $79 = 0, $91 = 0, $94 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$5 = 0, $nchar32_t$0 = 0, label = 0;
 $$pre47 = $frm_end;
 if (!($mode & 4)) {
  $frm_nxt$1 = $frm;
  $nchar32_t$0 = 0;
 } else if (($$pre47 - $frm | 0) > 2) if ((HEAP8[$frm >> 0] | 0) == -17) if ((HEAP8[$frm + 1 >> 0] | 0) == -69) {
  $frm_nxt$1 = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm;
  $nchar32_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar32_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar32_t$0 = 0;
 } else {
  $frm_nxt$1 = $frm;
  $nchar32_t$0 = 0;
 }
 L6 : while (1) {
  if (!($nchar32_t$0 >>> 0 < $mx >>> 0 & $frm_nxt$1 >>> 0 < $frm_end >>> 0)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 40;
   break;
  }
  $16 = HEAP8[$frm_nxt$1 >> 0] | 0;
  $17 = $16 & 255;
  do if ($16 << 24 >> 24 > -1) {
   if ($17 >>> 0 > $Maxcode >>> 0) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $frm_nxt$5 = $frm_nxt$1 + 1 | 0;
  } else {
   if (($16 & 255) < 194) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   if (($16 & 255) < 224) {
    if (($$pre47 - $frm_nxt$1 | 0) < 2) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $28 = HEAPU8[$frm_nxt$1 + 1 >> 0] | 0;
    if (($28 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    if (($28 & 63 | $17 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $frm_nxt$5 = $frm_nxt$1 + 2 | 0;
    break;
   }
   if (($16 & 255) < 240) {
    $38 = $frm_nxt$1;
    if (($$pre47 - $38 | 0) < 3) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    $42 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
    $44 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
    switch ($17 | 0) {
    case 224:
     {
      if (($42 & -32) << 24 >> 24 != -96) {
       $$lcssa91 = $38;
       label = 20;
       break L6;
      }
      break;
     }
    case 237:
     {
      if (($42 & -32) << 24 >> 24 != -128) {
       $$lcssa90 = $38;
       label = 22;
       break L6;
      }
      break;
     }
    default:
     if (($42 & -64) << 24 >> 24 != -128) {
      $$lcssa92 = $38;
      label = 24;
      break L6;
     }
    }
    $57 = $44 & 255;
    if (($57 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    }
    if ((($42 & 255) << 6 & 4032 | $17 << 12 & 61440 | $57 & 63) >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 40;
     break L6;
    } else {
     $frm_nxt$5 = $frm_nxt$1 + 3 | 0;
     break;
    }
   }
   if (($16 & 255) >= 245) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $71 = $frm_nxt$1;
   if (($$pre47 - $71 | 0) < 4) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $75 = HEAP8[$frm_nxt$1 + 1 >> 0] | 0;
   $77 = HEAP8[$frm_nxt$1 + 2 >> 0] | 0;
   $79 = HEAP8[$frm_nxt$1 + 3 >> 0] | 0;
   switch ($17 | 0) {
   case 240:
    {
     if (($75 + 112 & 255) >= 48) {
      $$lcssa88 = $71;
      label = 31;
      break L6;
     }
     break;
    }
   case 244:
    {
     if (($75 & -16) << 24 >> 24 != -128) {
      $$lcssa = $71;
      label = 33;
      break L6;
     }
     break;
    }
   default:
    if (($75 & -64) << 24 >> 24 != -128) {
     $$lcssa89 = $71;
     label = 35;
     break L6;
    }
   }
   $91 = $77 & 255;
   if (($91 & 192 | 0) != 128) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   $94 = $79 & 255;
   if (($94 & 192 | 0) != 128) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   }
   if ((($75 & 255) << 12 & 258048 | $17 << 18 & 1835008 | $91 << 6 & 4032 | $94 & 63) >>> 0 > $Maxcode >>> 0) {
    $frm_nxt$1$lcssa = $frm_nxt$1;
    label = 40;
    break L6;
   } else $frm_nxt$5 = $frm_nxt$1 + 4 | 0;
  } while (0);
  $frm_nxt$1 = $frm_nxt$5;
  $nchar32_t$0 = $nchar32_t$0 + 1 | 0;
 }
 if ((label | 0) == 20) $$37 = $$lcssa91 - $frm | 0; else if ((label | 0) == 22) $$37 = $$lcssa90 - $frm | 0; else if ((label | 0) == 24) $$37 = $$lcssa92 - $frm | 0; else if ((label | 0) == 31) $$37 = $$lcssa88 - $frm | 0; else if ((label | 0) == 33) $$37 = $$lcssa - $frm | 0; else if ((label | 0) == 35) $$37 = $$lcssa89 - $frm | 0; else if ((label | 0) == 40) $$37 = $frm_nxt$1$lcssa - $frm | 0;
 return $$37 | 0;
}

function __ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 var $1 = 0, $10 = 0, $100 = 0, $112 = 0, $114 = 0, $119 = 0, $127 = 0, $13 = 0, $132 = 0, $139 = 0, $145 = 0, $149 = 0, $15 = 0, $17 = 0, $23 = 0, $26 = 0, $32 = 0, $35 = 0, $36 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $50 = 0, $56 = 0, $60 = 0, $68 = 0, $7 = 0, $72 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $93 = 0, $99 = 0, $dPosition$i = 0, $rect = 0, $sPosition$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $dPosition$i = sp + 16 | 0;
 $sPosition$i = sp;
 $rect = sp + 32 | 0;
 $1 = HEAP32[$this + 52 >> 2] | 0;
 $7 = ((($1 >>> 16) + 65535 | $1 + 65535) & 32768 | 0) == 0;
 $8 = HEAP16[$clip >> 1] | 0;
 $10 = $8 << 16 >> 16 > 0 ? $8 : 0;
 $13 = HEAP16[$clip + 2 >> 1] | 0;
 $15 = $13 << 16 >> 16 > 0 ? $13 : 0;
 $17 = $7 ? $1 << 16 >> 16 : 0;
 $23 = (HEAPU16[$clip + 4 >> 1] | 0) + ($8 & 65535) << 16 >> 16;
 $26 = $7 ? $1 >> 16 : 0;
 $32 = (HEAPU16[$clip + 6 >> 1] | 0) + ($13 & 65535) << 16 >> 16;
 $35 = (($23 | 0) < ($17 | 0) ? $23 : $17) - ($10 << 16 >> 16) | 0;
 $36 = (($32 | 0) < ($26 | 0) ? $32 : $26) - ($15 << 16 >> 16) | 0;
 $41 = (($36 + 65535 | $35 + 65535) & 32768 | 0) == 0;
 $42 = HEAP16[$cmd >> 1] | 0;
 $44 = $42 << 16 >> 16 < $10 << 16 >> 16 ? $10 : $42;
 $45 = $44 << 16 >> 16;
 $47 = HEAP16[$cmd + 2 >> 1] | 0;
 $49 = $47 << 16 >> 16 < $15 << 16 >> 16 ? $15 : $47;
 $50 = $49 << 16 >> 16;
 $56 = (HEAPU16[$cmd + 4 >> 1] | 0) + ($42 & 65535) << 16 >> 16;
 $60 = ($41 ? $35 : 0) + ($10 & 65535) << 16 >> 16;
 $68 = (HEAPU16[$cmd + 6 >> 1] | 0) + ($47 & 65535) << 16 >> 16;
 $72 = ($41 ? $36 : 0) + ($15 & 65535) << 16 >> 16;
 $75 = (($60 | 0) < ($56 | 0) ? $60 : $56) - $45 | 0;
 $76 = $75 & 65535;
 $77 = (($72 | 0) < ($68 | 0) ? $72 : $68) - $50 | 0;
 HEAP16[$rect >> 1] = $44;
 HEAP16[$rect + 2 >> 1] = $49;
 $80 = $rect + 4 | 0;
 HEAP16[$80 >> 1] = $76;
 $81 = $rect + 6 | 0;
 HEAP16[$81 >> 1] = $77;
 if (($77 + 65535 | $75 + 65535) & 32768 | 0) {
  HEAP16[$80 >> 1] = 0;
  HEAP16[$81 >> 1] = 0;
  STACKTOP = sp;
  return;
 }
 if (!($76 << 16 >> 16)) {
  STACKTOP = sp;
  return;
 }
 $93 = (HEAPU16[$cmd + 10 >> 1] | 0) + $45 - ($42 << 16 >> 16) | 0;
 $99 = (HEAPU16[$cmd + 12 >> 1] | 0) + $50 - ($47 << 16 >> 16) | 0;
 $100 = $cmd + 8 | 0;
 switch (HEAPU8[$100 >> 0] | 0 | 0) {
 case 0:
  {
   HEAP32[$dPosition$i >> 2] = $50;
   HEAP32[$dPosition$i + 4 >> 2] = $45;
   HEAP32[$dPosition$i + 8 >> 2] = $75 & 65535;
   HEAP32[$dPosition$i + 12 >> 2] = $77 & 65535;
   _SDL_FillRect(HEAP32[$this + 5820 >> 2] | 0, $dPosition$i | 0, 0) | 0;
   STACKTOP = sp;
   return;
  }
 case 85:
  {
   __ZN12Front_JS_SDL14draw_RDPScrBltEiiRK4RectNS_8uint32_tE($this, $93, $99, $rect, -1);
   STACKTOP = sp;
   return;
  }
 case 204:
  {
   HEAP32[$dPosition$i >> 2] = $45;
   HEAP32[$dPosition$i + 4 >> 2] = $50;
   $112 = $75 & 65535;
   HEAP32[$dPosition$i + 8 >> 2] = $112;
   $114 = $77 & 65535;
   HEAP32[$dPosition$i + 12 >> 2] = $114;
   HEAP32[$sPosition$i >> 2] = $93;
   HEAP32[$sPosition$i + 4 >> 2] = $99;
   HEAP32[$sPosition$i + 8 >> 2] = $112;
   HEAP32[$sPosition$i + 12 >> 2] = $114;
   $119 = HEAP32[$this + 5820 >> 2] | 0;
   _SDL_UpperBlit($119 | 0, $sPosition$i | 0, $119 | 0, $dPosition$i | 0) | 0;
   STACKTOP = sp;
   return;
  }
 case 255:
  {
   HEAP32[$dPosition$i >> 2] = $50;
   HEAP32[$dPosition$i + 4 >> 2] = $45;
   HEAP32[$dPosition$i + 8 >> 2] = $75 & 65535;
   HEAP32[$dPosition$i + 12 >> 2] = $77 & 65535;
   _SDL_FillRect(HEAP32[$this + 5820 >> 2] | 0, $dPosition$i | 0, -1) | 0;
   STACKTOP = sp;
   return;
  }
 case 170:
  {
   STACKTOP = sp;
   return;
  }
 default:
  {
   $127 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(3676420, 3667525, 11) | 0;
   $132 = $127 + (HEAP32[(HEAP32[$127 >> 2] | 0) + -12 >> 2] | 0) + 4 | 0;
   HEAP32[$132 >> 2] = HEAP32[$132 >> 2] & -75 | 8;
   $139 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($127, HEAPU8[$100 >> 0] | 0) | 0, 3667537, 1) | 0;
   HEAP32[$dPosition$i >> 2] = __ZNKSt3__18ios_base6getlocEv($139 + (HEAP32[(HEAP32[$139 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
   $145 = __ZNKSt3__16locale9use_facetERNS0_2idE($dPosition$i, 3677380) | 0;
   $149 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$145 >> 2] | 0) + 28 >> 2] & 15]($145, 10) | 0;
   __ZNSt3__16localeD2Ev($dPosition$i);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($139, $149) | 0;
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($139) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$0$i$i = 0, $$0$i$i3 = 0, $$01$i$i = 0, $$01$i$i2 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $102 = 0, $110 = 0, $18 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $35 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $8 = 0, $81 = 0, $85 = 0, $87 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677412) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677420) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1);
 $5 = HEAP8[$__grouping >> 0] | 0;
 $8 = $__grouping + 4 | 0;
 L1 : do if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, $__nb, $__ne, $__ob) | 0;
  $18 = $__nb;
  $20 = $__ob + ($__ne - $18 << 2) | 0;
  HEAP32[$__oe >> 2] = $20;
  $$pre$phiZ2D = $18;
  $110 = $20;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $21 = HEAP8[$__nb >> 0] | 0;
  switch ($21 << 24 >> 24) {
  case 43:
  case 45:
   {
    $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, $21) | 0;
    $27 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $27 + 4;
    HEAP32[$27 >> 2] = $26;
    $__nf$0 = $__nb + 1 | 0;
    break;
   }
  default:
   $__nf$0 = $__nb;
  }
  L7 : do if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $35 = $__nf$0 + 1 | 0;
   switch (HEAP8[$35 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $__nf$1 = $__nf$0;
     break L7;
    }
   }
   $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, 48) | 0;
   $41 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $41 + 4;
   HEAP32[$41 >> 2] = $40;
   $48 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, HEAP8[$35 >> 0] | 0) | 0;
   $49 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $49 + 4;
   HEAP32[$49 >> 2] = $48;
   $__nf$1 = $__nf$0 + 2 | 0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0; while (0);
  L12 : do if (($__nf$1 | 0) != ($__ne | 0)) {
   $$0$i$i = $__ne;
   $$01$i$i = $__nf$1;
   while (1) {
    $52 = $$0$i$i + -1 | 0;
    if ($$01$i$i >>> 0 >= $52 >>> 0) break L12;
    $54 = HEAP8[$$01$i$i >> 0] | 0;
    HEAP8[$$01$i$i >> 0] = HEAP8[$52 >> 0] | 0;
    HEAP8[$52 >> 0] = $54;
    $$0$i$i = $52;
    $$01$i$i = $$01$i$i + 1 | 0;
   }
  } while (0);
  $60 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0;
  $61 = $__grouping + 8 | 0;
  $62 = $__grouping + 1 | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ne >>> 0) break;
   $81 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $62 : HEAP32[$61 >> 2] | 0) + $__dg$0 >> 0] | 0;
   if ($81 << 24 >> 24 != 0 & ($__dc$0 | 0) == ($81 << 24 >> 24 | 0)) {
    $85 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $85 + 4;
    HEAP32[$85 >> 2] = $60;
    $87 = HEAP8[$__grouping >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = ($__dg$0 >>> 0 < ((($87 & 1) == 0 ? ($87 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$0 | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $101 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 15]($0, HEAP8[$__p$0 >> 0] | 0) | 0;
   $102 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $102 + 4;
   HEAP32[$102 >> 2] = $101;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $65 = $__nb;
  $67 = $__ob + ($__nf$1 - $65 << 2) | 0;
  $68 = HEAP32[$__oe >> 2] | 0;
  if (($67 | 0) == ($68 | 0)) {
   $$pre$phiZ2D = $65;
   $110 = $67;
  } else {
   $$0$i$i3 = $68;
   $$01$i$i2 = $67;
   while (1) {
    $70 = $$0$i$i3 + -4 | 0;
    if ($$01$i$i2 >>> 0 >= $70 >>> 0) {
     $$pre$phiZ2D = $65;
     $110 = $68;
     break L1;
    }
    $72 = HEAP32[$$01$i$i2 >> 2] | 0;
    HEAP32[$$01$i$i2 >> 2] = HEAP32[$70 >> 2];
    HEAP32[$70 >> 2] = $72;
    $$0$i$i3 = $70;
    $$01$i$i2 = $$01$i$i2 + 4 | 0;
   }
  }
 } while (0);
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $110 : $__ob + ($__np - $$pre$phiZ2D << 2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$0$i$i = 0, $$0$i$i3 = 0, $$01$i$i = 0, $$01$i$i2 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $102 = 0, $110 = 0, $18 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $35 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $8 = 0, $81 = 0, $85 = 0, $87 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677380) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677392) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1);
 $5 = HEAP8[$__grouping >> 0] | 0;
 $8 = $__grouping + 4 | 0;
 if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, $__nb, $__ne, $__ob) | 0;
  $18 = $__nb;
  $20 = $__ob + ($__ne - $18) | 0;
  HEAP32[$__oe >> 2] = $20;
  $$pre$phiZ2D = $18;
  $110 = $20;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $21 = HEAP8[$__nb >> 0] | 0;
  switch ($21 << 24 >> 24) {
  case 43:
  case 45:
   {
    $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, $21) | 0;
    $27 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $27 + 1;
    HEAP8[$27 >> 0] = $26;
    $__nf$0 = $__nb + 1 | 0;
    break;
   }
  default:
   $__nf$0 = $__nb;
  }
  L7 : do if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $35 = $__nf$0 + 1 | 0;
   switch (HEAP8[$35 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     $__nf$1 = $__nf$0;
     break L7;
    }
   }
   $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, 48) | 0;
   $41 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $41 + 1;
   HEAP8[$41 >> 0] = $40;
   $48 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, HEAP8[$35 >> 0] | 0) | 0;
   $49 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $49 + 1;
   HEAP8[$49 >> 0] = $48;
   $__nf$1 = $__nf$0 + 2 | 0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0; while (0);
  L12 : do if (($__nf$1 | 0) != ($__ne | 0)) {
   $$0$i$i = $__ne;
   $$01$i$i = $__nf$1;
   while (1) {
    $52 = $$0$i$i + -1 | 0;
    if ($$01$i$i >>> 0 >= $52 >>> 0) break L12;
    $54 = HEAP8[$$01$i$i >> 0] | 0;
    HEAP8[$$01$i$i >> 0] = HEAP8[$52 >> 0] | 0;
    HEAP8[$52 >> 0] = $54;
    $$0$i$i = $52;
    $$01$i$i = $$01$i$i + 1 | 0;
   }
  } while (0);
  $60 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0;
  $61 = $__grouping + 8 | 0;
  $62 = $__grouping + 1 | 0;
  $__dc$0 = 0;
  $__dg$0 = 0;
  $__p$0 = $__nf$1;
  while (1) {
   if ($__p$0 >>> 0 >= $__ne >>> 0) break;
   $81 = HEAP8[((HEAP8[$__grouping >> 0] & 1) == 0 ? $62 : HEAP32[$61 >> 2] | 0) + $__dg$0 >> 0] | 0;
   if ($81 << 24 >> 24 != 0 & ($__dc$0 | 0) == ($81 << 24 >> 24 | 0)) {
    $85 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $85 + 1;
    HEAP8[$85 >> 0] = $60;
    $87 = HEAP8[$__grouping >> 0] | 0;
    $__dc$1 = 0;
    $__dg$1 = ($__dg$0 >>> 0 < ((($87 & 1) == 0 ? ($87 & 255) >>> 1 : HEAP32[$8 >> 2] | 0) + -1 | 0) >>> 0 & 1) + $__dg$0 | 0;
   } else {
    $__dc$1 = $__dc$0;
    $__dg$1 = $__dg$0;
   }
   $101 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 15]($0, HEAP8[$__p$0 >> 0] | 0) | 0;
   $102 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $102 + 1;
   HEAP8[$102 >> 0] = $101;
   $__dc$0 = $__dc$1 + 1 | 0;
   $__dg$0 = $__dg$1;
   $__p$0 = $__p$0 + 1 | 0;
  }
  $65 = $__nb;
  $67 = $__ob + ($__nf$1 - $65) | 0;
  $68 = HEAP32[$__oe >> 2] | 0;
  if (($67 | 0) == ($68 | 0)) {
   $$pre$phiZ2D = $65;
   $110 = $67;
  } else {
   $$0$i$i3 = $68;
   $$01$i$i2 = $67;
   while (1) {
    $70 = $$0$i$i3 + -1 | 0;
    if ($$01$i$i2 >>> 0 >= $70 >>> 0) break;
    $72 = HEAP8[$$01$i$i2 >> 0] | 0;
    HEAP8[$$01$i$i2 >> 0] = HEAP8[$70 >> 0] | 0;
    HEAP8[$70 >> 0] = $72;
    $$0$i$i3 = $70;
    $$01$i$i2 = $$01$i$i2 + 1 | 0;
   }
   $$pre$phiZ2D = $65;
   $110 = HEAP32[$__oe >> 2] | 0;
  }
 }
 HEAP32[$__op >> 2] = ($__np | 0) == ($__ne | 0) ? $110 : $__ob + ($__np - $$pre$phiZ2D) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZN6BitmapC2EhRKS_($this, $out_bpp, $bmp) {
 $this = $this | 0;
 $out_bpp = $out_bpp | 0;
 $bmp = $bmp | 0;
 var $$0$i = 0, $$0$i1 = 0, $0 = 0, $10 = 0, $11 = 0, $126 = 0, $127 = 0, $130 = 0, $134 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $27 = 0, $28 = 0, $30 = 0, $35 = 0, $44 = 0, $47 = 0, $5 = 0, $54 = 0, $59 = 0, $6 = 0, $b$02$i = 0, $dest$015 = 0, $dest$1$lcssa = 0, $dest$110 = 0, $indvars$iv$i = 0, $pixel$0 = 0, $res$0$lcssa$i = 0, $res$01$i = 0, $src$014 = 0, $src$1$lcssa = 0, $src$18 = 0, $x$012 = 0, $y$016 = 0, label = 0;
 $0 = HEAP32[$bmp >> 2] | 0;
 $2 = HEAP16[$0 + 4 >> 1] | 0;
 if (($2 & 255) << 24 >> 24 == $out_bpp << 24 >> 24) {
  HEAP32[$this >> 2] = $0;
  HEAP8[$0 + 5 >> 0] = (($2 & 65535) >>> 8 & 255) + 1 << 24 >> 24;
  return;
 }
 $5 = $out_bpp & 255;
 $6 = HEAP32[$0 >> 2] | 0;
 $10 = __ZN6Bitmap10DataBitmap9constructEhtt($out_bpp, $6 & 65535, $6 >>> 16 & 65535) | 0;
 HEAP32[$this >> 2] = $10;
 $11 = HEAP32[$bmp >> 2] | 0;
 $16 = ((HEAPU8[$11 + 4 >> 0] | 0) + 7 | 0) >>> 3;
 $18 = ($5 + 7 | 0) >>> 3;
 $19 = $18 & 255;
 L5 : do if (HEAP16[$11 + 2 >> 1] | 0) {
  $27 = ($16 | 0) == 0;
  $28 = $19 << 24 >> 24 == 0;
  $30 = $11;
  $dest$015 = HEAP32[$10 + 16 >> 2] | 0;
  $src$014 = HEAP32[$11 + 16 >> 2] | 0;
  $y$016 = 0;
  L7 : while (1) {
   L9 : do if (!(HEAP16[$30 >> 1] | 0)) {
    $35 = $30;
    $dest$1$lcssa = $dest$015;
    $src$1$lcssa = $src$014;
   } else {
    $47 = $30;
    $dest$110 = $dest$015;
    $src$18 = $src$014;
    $x$012 = 0;
    while (1) {
     if ($27) $res$0$lcssa$i = 0; else {
      $b$02$i = 0;
      $res$01$i = 0;
      while (1) {
       $44 = HEAPU8[$src$18 + $b$02$i >> 0] << ($b$02$i << 3) | $res$01$i;
       $b$02$i = $b$02$i + 1 | 0;
       if (($b$02$i | 0) == ($16 | 0)) {
        $res$0$lcssa$i = $44;
        break;
       } else $res$01$i = $44;
      }
     }
     switch (HEAPU8[$47 + 4 >> 0] | 0) {
     case 8:
      {
       $$0$i1 = HEAP32[$47 + 52 + (($res$0$lcssa$i & 255) << 2) >> 2] | 0;
       break;
      }
     case 15:
      {
       $54 = $res$0$lcssa$i >>> 7;
       $59 = $res$0$lcssa$i >>> 2;
       $$0$i1 = $res$0$lcssa$i << 3 & 248 | $59 & 7 | ($59 & 248 | $54 & 7) << 8 | ($54 & 248 | $res$0$lcssa$i >>> 12 & 7) << 16;
       break;
      }
     case 16:
      {
       $$0$i1 = $res$0$lcssa$i << 3 & 248 | $res$0$lcssa$i >>> 2 & 7 | ($res$0$lcssa$i >>> 3 & 252 | $res$0$lcssa$i >>> 9 & 3) << 8 | ($res$0$lcssa$i >>> 8 & 248 | $res$0$lcssa$i >>> 13 & 7) << 16;
       break;
      }
     case 32:
     case 24:
      {
       $$0$i1 = $res$0$lcssa$i & 16777215;
       break;
      }
     default:
      {
       label = 14;
       break L7;
      }
     }
     switch ($out_bpp << 24 >> 24) {
     case 8:
     case 15:
     case 16:
      {
       $pixel$0 = $$0$i1 << 16 & 16711680 | $$0$i1 & 65280 | $$0$i1 >>> 16 & 255;
       break;
      }
     default:
      $pixel$0 = $$0$i1;
     }
     switch ($5 | 0) {
     case 8:
      {
       $$0$i = $pixel$0 >>> 16 & 224 | $pixel$0 >>> 11 & 28 | $pixel$0 >>> 6 & 3;
       break;
      }
     case 15:
      {
       $$0$i = $pixel$0 << 7 & 31744 | $pixel$0 >>> 6 & 992 | $pixel$0 >>> 19 & 31;
       break;
      }
     case 16:
      {
       $$0$i = $pixel$0 << 8 & 63488 | $pixel$0 >>> 5 & 2016 | $pixel$0 >>> 19 & 31;
       break;
      }
     case 24:
     case 32:
      {
       $$0$i = $pixel$0;
       break;
      }
     default:
      {
       label = 21;
       break L7;
      }
     }
     if ($28) $130 = $47; else {
      $indvars$iv$i = 0;
      do {
       HEAP8[$dest$110 + $indvars$iv$i >> 0] = $$0$i >>> ($indvars$iv$i << 3);
       $indvars$iv$i = $indvars$iv$i + 1 | 0;
      } while (($indvars$iv$i & 255) << 24 >> 24 != $19 << 24 >> 24);
      $130 = HEAP32[$bmp >> 2] | 0;
     }
     $126 = $src$18 + $16 | 0;
     $127 = $dest$110 + $18 | 0;
     $x$012 = $x$012 + 1 | 0;
     if ($x$012 >>> 0 >= (HEAPU16[$130 >> 1] | 0) >>> 0) {
      $35 = $130;
      $dest$1$lcssa = $127;
      $src$1$lcssa = $126;
      break L9;
     } else {
      $47 = $130;
      $dest$110 = $127;
      $src$18 = $126;
     }
    }
   } while (0);
   $y$016 = $y$016 + 1 | 0;
   if ($y$016 >>> 0 >= (HEAPU16[$35 + 2 >> 1] | 0) >>> 0) break L5; else {
    $30 = $35;
    $dest$015 = $dest$1$lcssa;
    $src$014 = $src$1$lcssa;
   }
  }
  if ((label | 0) == 14) _exit(0); else if ((label | 0) == 21) ___assert_fail(3673186, 3667551, 409, 3667605);
 } while (0);
 if ($out_bpp << 24 >> 24 != 8) return;
 $134 = (HEAP32[$this >> 2] | 0) + 52 | 0;
 __ZN10BGRPalette11classic_332Ev() | 0;
 _memcpy($134 | 0, 3674632, 1024) | 0;
 return;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $100 = 0, $103 = 0, $15 = 0, $2 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $39 = 0, $47 = 0, $5 = 0, $59 = 0, $6 = 0, $67 = 0, $78 = 0, $81 = 0, $87 = 0, $90 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $__i$0$i$i3 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $$byval_copy = sp + 468 | 0;
 $__loc = sp + 464 | 0;
 $__pat = sp + 472 | 0;
 $__dp = sp + 460 | 0;
 $__ts = sp + 456 | 0;
 $__grp = sp + 444 | 0;
 $__sym = sp + 432 | 0;
 $__sn = sp + 420 | 0;
 $__fd = sp + 416 | 0;
 $__mbuf = sp + 16 | 0;
 $__mi = sp + 8 | 0;
 $__me = sp + 4 | 0;
 $0 = sp;
 $1 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $1;
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677412) | 0;
 $3 = HEAP8[$__digits >> 0] | 0;
 $5 = ($3 & 1) == 0;
 $6 = $__digits + 4 | 0;
 if (!(($5 ? ($3 & 255) >>> 1 : HEAP32[$6 >> 2] | 0) | 0)) $27 = 0; else {
  $15 = HEAP32[($5 ? $6 : HEAP32[$__digits + 8 >> 2] | 0) >> 2] | 0;
  $27 = ($15 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 44 >> 2] & 15]($2, 45) | 0);
 }
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i1 = 0;
 while (1) {
  if (($__i$0$i$i1 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i1 << 2) >> 2] = 0;
  $__i$0$i$i1 = $__i$0$i$i1 + 1 | 0;
 }
 $__i$0$i$i3 = 0;
 while (1) {
  if (($__i$0$i$i3 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i3 << 2) >> 2] = 0;
  $__i$0$i$i3 = $__i$0$i$i3 + 1 | 0;
 }
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $27, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $28 = HEAP8[$__digits >> 0] | 0;
 $31 = HEAP32[$6 >> 2] | 0;
 $34 = ($28 & 1) == 0 ? ($28 & 255) >>> 1 : $31;
 $35 = HEAP32[$__fd >> 2] | 0;
 if (($34 | 0) > ($35 | 0)) {
  $39 = HEAP8[$__sn >> 0] | 0;
  $47 = HEAP8[$__sym >> 0] | 0;
  $78 = ($34 - $35 << 1 | 1) + $35 + (($39 & 1) == 0 ? ($39 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($47 & 1) == 0 ? ($47 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 } else {
  $59 = HEAP8[$__sn >> 0] | 0;
  $67 = HEAP8[$__sym >> 0] | 0;
  $78 = $35 + 2 + (($59 & 1) == 0 ? ($59 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($67 & 1) == 0 ? ($67 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 }
 if ($78 >>> 0 > 100) {
  $81 = _malloc($78 << 2) | 0;
  if (!$81) __ZSt17__throw_bad_allocv(); else {
   $__h$sroa$0$0 = $81;
   $__mb$0 = $81;
  }
 } else {
  $__h$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 $87 = ($28 & 1) == 0;
 $90 = $87 ? $6 : HEAP32[$__digits + 8 >> 2] | 0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $90, $90 + (($87 ? ($28 & 255) >>> 1 : $31) << 2) | 0, $2, $27, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $35);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $98 = HEAP32[$__mi >> 2] | 0;
 $99 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $100 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $98, $99, $__iob, $__fl) | 0;
 if (!$__h$sroa$0$0) $103 = $1; else {
  _free($__h$sroa$0$0);
  $103 = HEAP32[$__loc >> 2] | 0;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv($103) | 0;
 STACKTOP = sp;
 return $100 | 0;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $100 = 0, $101 = 0, $104 = 0, $16 = 0, $2 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $40 = 0, $48 = 0, $5 = 0, $6 = 0, $60 = 0, $68 = 0, $79 = 0, $81 = 0, $87 = 0, $91 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__h$sroa$0$0 = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $__i$0$i$i4 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy = sp + 56 | 0;
 $__loc = sp + 52 | 0;
 $__pat = sp + 164 | 0;
 $__dp = sp + 161 | 0;
 $__ts = sp + 160 | 0;
 $__grp = sp + 40 | 0;
 $__sym = sp + 28 | 0;
 $__sn = sp + 16 | 0;
 $__fd = sp + 12 | 0;
 $__mbuf = sp + 60 | 0;
 $__mi = sp + 8 | 0;
 $__me = sp + 4 | 0;
 $0 = sp;
 $1 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $1;
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677380) | 0;
 $3 = HEAP8[$__digits >> 0] | 0;
 $5 = ($3 & 1) == 0;
 $6 = $__digits + 4 | 0;
 if (!(($5 ? ($3 & 255) >>> 1 : HEAP32[$6 >> 2] | 0) | 0)) $28 = 0; else {
  $16 = HEAP8[($5 ? $__digits + 1 | 0 : HEAP32[$__digits + 8 >> 2] | 0) >> 0] | 0;
  $28 = $16 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 15]($2, 45) | 0) << 24 >> 24;
 }
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__grp + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__i$0$i$i1 = 0;
 while (1) {
  if (($__i$0$i$i1 | 0) == 3) break;
  HEAP32[$__sym + ($__i$0$i$i1 << 2) >> 2] = 0;
  $__i$0$i$i1 = $__i$0$i$i1 + 1 | 0;
 }
 $__i$0$i$i4 = 0;
 while (1) {
  if (($__i$0$i$i4 | 0) == 3) break;
  HEAP32[$__sn + ($__i$0$i$i4 << 2) >> 2] = 0;
  $__i$0$i$i4 = $__i$0$i$i4 + 1 | 0;
 }
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $28, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $29 = HEAP8[$__digits >> 0] | 0;
 $32 = HEAP32[$6 >> 2] | 0;
 $35 = ($29 & 1) == 0 ? ($29 & 255) >>> 1 : $32;
 $36 = HEAP32[$__fd >> 2] | 0;
 if (($35 | 0) > ($36 | 0)) {
  $40 = HEAP8[$__sn >> 0] | 0;
  $48 = HEAP8[$__sym >> 0] | 0;
  $79 = ($35 - $36 << 1 | 1) + $36 + (($40 & 1) == 0 ? ($40 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($48 & 1) == 0 ? ($48 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 } else {
  $60 = HEAP8[$__sn >> 0] | 0;
  $68 = HEAP8[$__sym >> 0] | 0;
  $79 = $36 + 2 + (($60 & 1) == 0 ? ($60 & 255) >>> 1 : HEAP32[$__sn + 4 >> 2] | 0) + (($68 & 1) == 0 ? ($68 & 255) >>> 1 : HEAP32[$__sym + 4 >> 2] | 0) | 0;
 }
 if ($79 >>> 0 > 100) {
  $81 = _malloc($79) | 0;
  if (!$81) __ZSt17__throw_bad_allocv(); else {
   $__h$sroa$0$0 = $81;
   $__mb$0 = $81;
  }
 } else {
  $__h$sroa$0$0 = 0;
  $__mb$0 = $__mbuf;
 }
 $87 = ($29 & 1) == 0;
 $91 = $87 ? $__digits + 1 | 0 : HEAP32[$__digits + 8 >> 2] | 0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $91, $91 + ($87 ? ($29 & 255) >>> 1 : $32) | 0, $2, $28, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $36);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $99 = HEAP32[$__mi >> 2] | 0;
 $100 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $101 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__mb$0, $99, $100, $__iob, $__fl) | 0;
 if (!$__h$sroa$0$0) $104 = $1; else {
  _free($__h$sroa$0$0);
  $104 = HEAP32[$__loc >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv($104) | 0;
 STACKTOP = sp;
 return $101 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$02 = 0, $$02$lcssa75 = 0, $$05 = 0, $$05$lcssa72 = 0, $$1$ph = 0, $$13 = 0, $$13$lcssa = 0, $$13$lcssa70 = 0, $$13$lcssa71 = 0, $$2 = 0, $$24 = 0, $$lcssa = 0, $$pre = 0, $13 = 0, $14 = 0, $18 = 0, $25 = 0, $26 = 0, $33 = 0, $34 = 0, $4 = 0, $42 = 0, $46 = 0, $47 = 0, $5 = 0, $53 = 0, $58 = 0, $60 = 0, $61 = 0, $8 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$4$ph = 0, $save_state = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $save_state = sp;
 $fend$0 = $frm;
 while (1) {
  if (($fend$0 | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  if (!(HEAP8[$fend$0 >> 0] | 0)) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $fend$0 = $fend$0 + 1 | 0;
 }
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $4 = $to_end;
 $5 = $this + 8 | 0;
 $$02 = $frm;
 $$05 = $to;
 $fend$1 = $fend$0$lcssa;
 L6 : while (1) {
  if (($$05 | 0) == ($to_end | 0) | ($$02 | 0) == ($frm_end | 0)) {
   $58 = $$02;
   label = 34;
   break;
  }
  $8 = $st;
  $13 = HEAP32[$8 + 4 >> 2] | 0;
  $14 = $save_state;
  HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$14 + 4 >> 2] = $13;
  $18 = $fend$1;
  $25 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
  $26 = _mbsnrtowcs($$05, $frm_nxt, $18 - $$02 | 0, $4 - $$05 >> 2, $st) | 0;
  if ($25 | 0) _uselocale($25) | 0;
  switch ($26 | 0) {
  case -1:
   {
    $$02$lcssa75 = $$02;
    $$05$lcssa72 = $$05;
    $$lcssa = $18;
    label = 10;
    break L6;
    break;
   }
  case 0:
   {
    $$1$ph = 2;
    label = 30;
    break L6;
    break;
   }
  default:
   {}
  }
  $42 = (HEAP32[$to_nxt >> 2] | 0) + ($26 << 2) | 0;
  HEAP32[$to_nxt >> 2] = $42;
  if (($42 | 0) == ($to_end | 0)) {
   label = 31;
   break;
  }
  $$pre = HEAP32[$frm_nxt >> 2] | 0;
  if (($fend$1 | 0) == ($frm_end | 0)) {
   $60 = $42;
   $61 = $$pre;
   $fend$4$ph = $frm_end;
  } else {
   $46 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
   $47 = _mbrtowc($42, $$pre, 1, $st) | 0;
   if ($46 | 0) _uselocale($46) | 0;
   if ($47 | 0) {
    $$1$ph = 2;
    label = 30;
    break;
   }
   HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
   $53 = (HEAP32[$frm_nxt >> 2] | 0) + 1 | 0;
   HEAP32[$frm_nxt >> 2] = $53;
   $fend$2 = $53;
   while (1) {
    if (($fend$2 | 0) == ($frm_end | 0)) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    if (!(HEAP8[$fend$2 >> 0] | 0)) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $fend$2 = $fend$2 + 1 | 0;
   }
   $60 = HEAP32[$to_nxt >> 2] | 0;
   $61 = $53;
   $fend$4$ph = $fend$2$lcssa;
  }
  $$02 = $61;
  $$05 = $60;
  $fend$1 = $fend$4$ph;
 }
 do if ((label | 0) == 10) {
  $$13 = $$02$lcssa75;
  $storemerge = $$05$lcssa72;
  L29 : while (1) {
   HEAP32[$to_nxt >> 2] = $storemerge;
   if (($$13 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
    $$13$lcssa = $$13;
    label = 20;
    break;
   }
   $33 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
   $34 = _mbrtowc($storemerge, $$13, $$lcssa - $$13 | 0, $save_state) | 0;
   if ($33 | 0) _uselocale($33) | 0;
   switch ($34 | 0) {
   case -1:
    {
     $$13$lcssa70 = $$13;
     label = 16;
     break L29;
     break;
    }
   case -2:
    {
     $$13$lcssa71 = $$13;
     label = 17;
     break L29;
     break;
    }
   case 0:
    {
     $$24 = $$13 + 1 | 0;
     break;
    }
   default:
    $$24 = $$13 + $34 | 0;
   }
   $$13 = $$24;
   $storemerge = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
  }
  if ((label | 0) == 16) {
   HEAP32[$frm_nxt >> 2] = $$13$lcssa70;
   $$1$ph = 2;
   label = 30;
   break;
  } else if ((label | 0) == 17) {
   HEAP32[$frm_nxt >> 2] = $$13$lcssa71;
   $$1$ph = 1;
   label = 30;
   break;
  } else if ((label | 0) == 20) {
   HEAP32[$frm_nxt >> 2] = $$13$lcssa;
   $$1$ph = ($$13$lcssa | 0) != ($frm_end | 0) & 1;
   label = 30;
   break;
  }
 } else if ((label | 0) == 31) {
  $58 = HEAP32[$frm_nxt >> 2] | 0;
  label = 34;
 } while (0);
 if ((label | 0) == 30) $$2 = $$1$ph; else if ((label | 0) == 34) $$2 = ($58 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$8 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $102 = 0, $105 = 0, $126 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $34 = 0, $40 = 0, $49 = 0, $51 = 0, $58 = 0, $67 = 0, $77 = 0, $79 = 0, $81 = 0, $87 = 0, $90 = 0, $96 = 0, $98 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 if (!($mode & 4)) $$pre$phiZ2D = $frm_end; else {
  $2 = HEAP32[$frm_nxt >> 2] | 0;
  $3 = $frm_end;
  if (($3 - $2 | 0) > 2) if ((HEAP8[$2 >> 0] | 0) == -17) if ((HEAP8[$2 + 1 >> 0] | 0) == -69) if ((HEAP8[$2 + 2 >> 0] | 0) == -65) {
   HEAP32[$frm_nxt >> 2] = $2 + 3;
   $$pre$phiZ2D = $3;
  } else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3;
 }
 $16 = $to_end;
 L9 : while (1) {
  $17 = HEAP32[$frm_nxt >> 2] | 0;
  $18 = $17 >>> 0 < $frm_end >>> 0;
  if (!$18) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $19 = HEAP32[$to_nxt >> 2] | 0;
  if ($19 >>> 0 >= $to_end >>> 0) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $21 = HEAP8[$17 >> 0] | 0;
  $22 = $21 & 255;
  if ($22 >>> 0 > $Maxcode >>> 0) {
   $$8 = 2;
   break;
  }
  do if ($21 << 24 >> 24 > -1) {
   HEAP16[$19 >> 1] = $21 & 255;
   HEAP32[$frm_nxt >> 2] = $17 + 1;
  } else {
   if (($21 & 255) < 194) {
    $$8 = 2;
    break L9;
   }
   if (($21 & 255) < 224) {
    if (($$pre$phiZ2D - $17 | 0) < 2) {
     $$8 = 1;
     break L9;
    }
    $34 = HEAPU8[$17 + 1 >> 0] | 0;
    if (($34 & 192 | 0) != 128) {
     $$8 = 2;
     break L9;
    }
    $40 = $34 & 63 | $22 << 6 & 1984;
    if ($40 >>> 0 > $Maxcode >>> 0) {
     $$8 = 2;
     break L9;
    }
    HEAP16[$19 >> 1] = $40;
    HEAP32[$frm_nxt >> 2] = $17 + 2;
    break;
   }
   if (($21 & 255) < 240) {
    if (($$pre$phiZ2D - $17 | 0) < 3) {
     $$8 = 1;
     break L9;
    }
    $49 = HEAP8[$17 + 1 >> 0] | 0;
    $51 = HEAP8[$17 + 2 >> 0] | 0;
    switch ($22 | 0) {
    case 224:
     {
      if (($49 & -32) << 24 >> 24 != -96) {
       $$8 = 2;
       break L9;
      }
      break;
     }
    case 237:
     {
      if (($49 & -32) << 24 >> 24 != -128) {
       $$8 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($49 & -64) << 24 >> 24 != -128) {
      $$8 = 2;
      break L9;
     }
    }
    $58 = $51 & 255;
    if (($58 & 192 | 0) != 128) {
     $$8 = 2;
     break L9;
    }
    $67 = ($49 & 255) << 6 & 4032 | $22 << 12 | $58 & 63;
    if (($67 & 65535) >>> 0 > $Maxcode >>> 0) {
     $$8 = 2;
     break L9;
    }
    HEAP16[$19 >> 1] = $67;
    HEAP32[$frm_nxt >> 2] = $17 + 3;
    break;
   }
   if (($21 & 255) >= 245) {
    $$8 = 2;
    break L9;
   }
   if (($$pre$phiZ2D - $17 | 0) < 4) {
    $$8 = 1;
    break L9;
   }
   $77 = HEAP8[$17 + 1 >> 0] | 0;
   $79 = HEAP8[$17 + 2 >> 0] | 0;
   $81 = HEAP8[$17 + 3 >> 0] | 0;
   switch ($22 | 0) {
   case 240:
    {
     if (($77 + 112 & 255) >= 48) {
      $$8 = 2;
      break L9;
     }
     break;
    }
   case 244:
    {
     if (($77 & -16) << 24 >> 24 != -128) {
      $$8 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($77 & -64) << 24 >> 24 != -128) {
     $$8 = 2;
     break L9;
    }
   }
   $87 = $79 & 255;
   if (($87 & 192 | 0) != 128) {
    $$8 = 2;
    break L9;
   }
   $90 = $81 & 255;
   if (($90 & 192 | 0) != 128) {
    $$8 = 2;
    break L9;
   }
   if (($16 - $19 | 0) < 4) {
    $$8 = 1;
    break L9;
   }
   $96 = $22 & 7;
   $98 = $77 & 255;
   $102 = $87 << 6;
   $105 = $90 & 63;
   if (($98 << 12 & 258048 | $96 << 18 | $102 & 4032 | $105) >>> 0 > $Maxcode >>> 0) {
    $$8 = 2;
    break L9;
   }
   HEAP16[$19 >> 1] = $98 << 2 & 60 | $87 >>> 4 & 3 | (($98 >>> 4 & 3 | $96 << 2) << 6) + 16320 | 55296;
   $126 = $19 + 2 | 0;
   HEAP32[$to_nxt >> 2] = $126;
   HEAP16[$126 >> 1] = $105 | $102 & 960 | 56320;
   HEAP32[$frm_nxt >> 2] = (HEAP32[$frm_nxt >> 2] | 0) + 4;
  } while (0);
  HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 2;
 }
 if ((label | 0) == 41) $$8 = $$lcssa & 1;
 return $$8 | 0;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$byval_copy = 0, $0 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $45 = 0, $48 = 0, $5 = 0, $58 = 0, $61 = 0, $73 = 0, $75 = 0, $78 = 0, $8 = 0, $__h$sroa$0$0 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 $$byval_copy = sp + 424 | 0;
 $vararg_buffer = sp;
 $__wbuf = sp + 24 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 12 | 0;
 $__loc = sp + 8 | 0;
 $__neg = sp + 564 | 0;
 $0 = sp + 4 | 0;
 $__nbuf = sp + 464 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 119;
 HEAP32[$__loc >> 2] = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677412) | 0;
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 $8 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] & 7]($5, 3672578, 3672588, $$byval_copy) | 0;
  $13 = HEAP32[$__wn >> 2] | 0;
  $14 = HEAP32[$__wb >> 2] | 0;
  $15 = $13 - $14 | 0;
  $17 = $14;
  $18 = $13;
  if (($15 | 0) > 392) {
   $21 = _malloc(($15 >> 2) + 2 | 0) | 0;
   if (!$21) __ZSt17__throw_bad_allocv(); else {
    $__h$sroa$0$0 = $21;
    $__nc$0 = $21;
   }
  } else {
   $__h$sroa$0$0 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  $27 = $$byval_copy + 40 | 0;
  $28 = $$byval_copy;
  $30 = $18;
  $__nc$2 = $__nc$1;
  $__w$0 = $17;
  while (1) {
   if ($__w$0 >>> 0 >= $30 >>> 0) {
    $__nc$2$lcssa = $__nc$2;
    break;
   }
   $32 = HEAP32[$__w$0 >> 2] | 0;
   $$0$i = $$byval_copy;
   while (1) {
    if (($$0$i | 0) == ($27 | 0)) {
     $$0$lcssa$i = $27;
     break;
    }
    if ((HEAP32[$$0$i >> 2] | 0) == ($32 | 0)) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $$0$i = $$0$i + 4 | 0;
   }
   HEAP8[$__nc$2 >> 0] = HEAP8[3672578 + ($$0$lcssa$i - $28 >> 2) >> 0] | 0;
   $30 = HEAP32[$__wn >> 2] | 0;
   $__nc$2 = $__nc$2 + 1 | 0;
   $__w$0 = $__w$0 + 4 | 0;
  }
  HEAP8[$__nc$2$lcssa >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  _sscanf($__nbuf, 3672479, $vararg_buffer) | 0;
  if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 }
 $45 = HEAP32[$__b >> 2] | 0;
 do if (!$45) $78 = 1; else {
  $48 = HEAP32[$45 + 12 >> 2] | 0;
  if (($48 | 0) == (HEAP32[$45 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$45 >> 2] | 0) + 36 >> 2] & 63]($45) | 0; else $$0$i$i$i$i = HEAP32[$48 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $78 = 1;
   break;
  } else {
   $78 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $58 = HEAP32[$__e >> 2] | 0;
 do if (!$58) label = 30; else {
  $61 = HEAP32[$58 + 12 >> 2] | 0;
  if (($61 | 0) == (HEAP32[$58 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] & 63]($58) | 0; else $$0$i$i1$i$i = HEAP32[$61 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 30;
   break;
  } else if ($78) break; else {
   label = 32;
   break;
  }
 } while (0);
 if ((label | 0) == 30) if ($78) label = 32;
 if ((label | 0) == 32) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $73 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $75 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($75 | 0) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($75);
 STACKTOP = sp;
 return $73 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$03 = 0, $$03$lcssa69 = 0, $$05 = 0, $$05$lcssa65 = 0, $$12 = 0, $$14 = 0, $$14$lcssa = 0, $$3$ph = 0, $$4 = 0, $13 = 0, $14 = 0, $25 = 0, $26 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $41 = 0, $45 = 0, $46 = 0, $5 = 0, $54 = 0, $56 = 0, $57 = 0, $64 = 0, $66 = 0, $67 = 0, $8 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $fend$5$ph11 = 0, $n$0 = 0, $p$0 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $save_state = sp;
 $tmp = sp + 8 | 0;
 $fend$0 = $frm;
 while (1) {
  if (($fend$0 | 0) == ($frm_end | 0)) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  if (!(HEAP32[$fend$0 >> 2] | 0)) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $fend$0 = $fend$0 + 4 | 0;
 }
 HEAP32[$to_nxt >> 2] = $to;
 HEAP32[$frm_nxt >> 2] = $frm;
 $4 = $to_end;
 $5 = $this + 8 | 0;
 $$03 = $frm;
 $$05 = $to;
 $fend$1 = $fend$0$lcssa;
 L6 : while (1) {
  if (($$05 | 0) == ($to_end | 0) | ($$03 | 0) == ($frm_end | 0)) {
   $64 = $$03;
   label = 35;
   break;
  }
  $8 = $st;
  $13 = HEAP32[$8 + 4 >> 2] | 0;
  $14 = $save_state;
  HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$14 + 4 >> 2] = $13;
  $25 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
  $26 = _wcsnrtombs($$05, $frm_nxt, $fend$1 - $$03 >> 2, $4 - $$05 | 0, $st) | 0;
  if ($25 | 0) _uselocale($25) | 0;
  switch ($26 | 0) {
  case -1:
   {
    $$03$lcssa69 = $$03;
    $$05$lcssa65 = $$05;
    label = 10;
    break L6;
    break;
   }
  case 0:
   {
    $$3$ph = 1;
    label = 32;
    break L6;
    break;
   }
  default:
   {}
  }
  $41 = (HEAP32[$to_nxt >> 2] | 0) + $26 | 0;
  HEAP32[$to_nxt >> 2] = $41;
  if (($41 | 0) == ($to_end | 0)) {
   label = 33;
   break;
  }
  if (($fend$1 | 0) == ($frm_end | 0)) {
   $66 = $41;
   $67 = HEAP32[$frm_nxt >> 2] | 0;
   $fend$5$ph11 = $frm_end;
  } else {
   $45 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
   $46 = _wcrtomb($tmp, 0, $st) | 0;
   if ($45 | 0) _uselocale($45) | 0;
   if (($46 | 0) == -1) {
    $$12 = 2;
    label = 31;
    break;
   }
   if ($46 >>> 0 > ($4 - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) {
    $$12 = 1;
    label = 31;
    break;
   } else {
    $n$0 = $46;
    $p$0 = $tmp;
   }
   while (1) {
    if (!$n$0) break;
    $56 = HEAP8[$p$0 >> 0] | 0;
    $57 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $57 + 1;
    HEAP8[$57 >> 0] = $56;
    $n$0 = $n$0 + -1 | 0;
    $p$0 = $p$0 + 1 | 0;
   }
   $54 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
   HEAP32[$frm_nxt >> 2] = $54;
   $fend$2 = $54;
   while (1) {
    if (($fend$2 | 0) == ($frm_end | 0)) {
     $fend$2$lcssa = $frm_end;
     break;
    }
    if (!(HEAP32[$fend$2 >> 2] | 0)) {
     $fend$2$lcssa = $fend$2;
     break;
    }
    $fend$2 = $fend$2 + 4 | 0;
   }
   $66 = HEAP32[$to_nxt >> 2] | 0;
   $67 = $54;
   $fend$5$ph11 = $fend$2$lcssa;
  }
  $$03 = $67;
  $$05 = $66;
  $fend$1 = $fend$5$ph11;
 }
 if ((label | 0) == 10) {
  HEAP32[$to_nxt >> 2] = $$05$lcssa65;
  $$14 = $$03$lcssa69;
  $33 = $$05$lcssa65;
  while (1) {
   if (($$14 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
    $$14$lcssa = $$14;
    break;
   }
   $30 = HEAP32[$$14 >> 2] | 0;
   $32 = _uselocale(HEAP32[$5 >> 2] | 0) | 0;
   $34 = _wcrtomb($33, $30, $save_state) | 0;
   if ($32 | 0) _uselocale($32) | 0;
   if (($34 | 0) == -1) {
    $$14$lcssa = $$14;
    break;
   }
   $38 = (HEAP32[$to_nxt >> 2] | 0) + $34 | 0;
   HEAP32[$to_nxt >> 2] = $38;
   $$14 = $$14 + 4 | 0;
   $33 = $38;
  }
  HEAP32[$frm_nxt >> 2] = $$14$lcssa;
  $$3$ph = 2;
  label = 32;
 } else if ((label | 0) == 31) {
  $$3$ph = $$12;
  label = 32;
 } else if ((label | 0) == 33) {
  $64 = HEAP32[$frm_nxt >> 2] | 0;
  label = 35;
 }
 if ((label | 0) == 32) $$4 = $$3$ph; else if ((label | 0) == 35) $$4 = ($64 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZN12Front_JS_SDL4drawERK10RDPMem3BltRK4RectRK6Bitmap($this, $cmd, $clip, $bitmap) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 $bitmap = $bitmap | 0;
 var $0 = 0, $10 = 0, $115 = 0, $117 = 0, $119 = 0, $124 = 0, $13 = 0, $131 = 0, $137 = 0, $141 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $33 = 0, $39 = 0, $42 = 0, $44 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $78 = 0, $79 = 0, $85 = 0, $88 = 0, $89 = 0, $9 = 0, $92 = 0, $95 = 0, $99 = 0, $x$03$us = 0, $y$04$us = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $2 = HEAP16[$cmd + 2 >> 1] | 0;
 $3 = HEAP16[$clip >> 1] | 0;
 $6 = ($2 << 16 >> 16 < $3 << 16 >> 16 ? $3 : $2) << 16 >> 16;
 $9 = HEAP16[$cmd + 4 >> 1] | 0;
 $10 = HEAP16[$clip + 2 >> 1] | 0;
 $13 = ($9 << 16 >> 16 < $10 << 16 >> 16 ? $10 : $9) << 16 >> 16;
 $19 = (HEAPU16[$cmd + 6 >> 1] | 0) + ($2 & 65535) << 16 >> 16;
 $25 = (HEAPU16[$clip + 4 >> 1] | 0) + ($3 & 65535) << 16 >> 16;
 $33 = (HEAPU16[$cmd + 8 >> 1] | 0) + ($9 & 65535) << 16 >> 16;
 $39 = (HEAPU16[$clip + 6 >> 1] | 0) + ($10 & 65535) << 16 >> 16;
 $42 = (($25 | 0) < ($19 | 0) ? $25 : $19) - $6 | 0;
 $44 = (($39 | 0) < ($33 | 0) ? $39 : $33) - $13 | 0;
 if (($42 & 65535) << 16 >> 16 == 0 | (($44 + 65535 | $42 + 65535) & 32768 | 0) != 0) {
  STACKTOP = sp;
  return;
 }
 $52 = HEAP32[HEAP32[$bitmap >> 2] >> 2] | 0;
 if (($52 & 65535) << 16 >> 16 == 0 | $52 >>> 0 < 65536) {
  STACKTOP = sp;
  return;
 }
 $56 = $cmd + 10 | 0;
 if ((HEAP8[$56 >> 0] | 0) != -72) {
  $119 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(3676420, 3667618, 12) | 0;
  $124 = $119 + (HEAP32[(HEAP32[$119 >> 2] | 0) + -12 >> 2] | 0) + 4 | 0;
  HEAP32[$124 >> 2] = HEAP32[$124 >> 2] & -75 | 8;
  $131 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($119, HEAPU8[$56 >> 0] | 0) | 0, 3667537, 1) | 0;
  HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($131 + (HEAP32[(HEAP32[$131 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  $137 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
  $141 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$137 >> 2] | 0) + 28 >> 2] & 15]($137, 10) | 0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($131, $141) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($131) | 0;
  STACKTOP = sp;
  return;
 }
 __ZN6BitmapC2EhRKS_($0, 32, $bitmap);
 $58 = HEAP32[$0 >> 2] | 0;
 $60 = HEAP32[$58 + 16 >> 2] | 0;
 $61 = $this + 5820 | 0;
 _SDL_LockSurface(HEAP32[$61 >> 2] | 0) | 0;
 $63 = $44 & 65535;
 if ($63 | 0) {
  $65 = $42 & 65535;
  $67 = $58 + 4 | 0;
  $69 = $13 + -1 + $63 | 0;
  $70 = $this + 52 | 0;
  $71 = $cmd + 16 | 0;
  if ($65 | 0) {
   $y$04$us = 0;
   do {
    $73 = Math_imul($y$04$us, $65) | 0;
    $85 = $69 - $y$04$us | 0;
    $x$03$us = 0;
    do {
     $78 = Math_imul(((HEAPU8[$67 >> 0] | 0) + 1 | 0) >>> 3, $x$03$us + $73 | 0) | 0;
     $79 = HEAP32[$61 >> 2] | 0;
     $88 = (HEAP32[$79 + 20 >> 2] | 0) + ((Math_imul(HEAPU16[$70 >> 1] | 0, $85) | 0) << 2) + ($x$03$us << 2) + ($6 << 2) | 0;
     $89 = $60 + $78 | 0;
     $92 = $60 + ($78 + 1) | 0;
     $95 = $60 + ($78 + 2) | 0;
     $99 = _SDL_MapRGBA(HEAP32[$79 + 4 >> 2] | 0, HEAP8[$95 >> 0] | 0, HEAP8[$92 >> 0] | 0, HEAP8[$89 >> 0] | 0, -1) | 0;
     if (($99 | 0) != (HEAP32[$71 >> 2] | 0)) HEAP32[$88 >> 2] = _SDL_MapRGBA(HEAP32[(HEAP32[$61 >> 2] | 0) + 4 >> 2] | 0, HEAP8[$95 >> 0] | 0, HEAP8[$92 >> 0] | 0, HEAP8[$89 >> 0] | 0, -1) | 0;
     $x$03$us = $x$03$us + 1 | 0;
    } while (($x$03$us | 0) < ($65 | 0));
    $y$04$us = $y$04$us + 1 | 0;
   } while (($y$04$us | 0) < ($63 | 0));
  }
 }
 _SDL_UnlockSurface(HEAP32[$61 >> 2] | 0);
 if ($58 | 0) {
  $115 = $58 + 5 | 0;
  $117 = (HEAP8[$115 >> 0] | 0) + -1 << 24 >> 24;
  HEAP8[$115 >> 0] = $117;
  if (!($117 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($58);
  HEAP32[$0 >> 2] = 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$byval_copy = 0, $0 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $43 = 0, $5 = 0, $55 = 0, $56 = 0, $57 = 0, $71 = 0, $73 = 0, $8 = 0, $__h$sroa$0$0 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $$byval_copy = sp + 24 | 0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 12 | 0;
 $__loc = sp + 8 | 0;
 $__neg = sp + 136 | 0;
 $0 = sp + 4 | 0;
 $__nbuf = sp + 36 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 119;
 HEAP32[$__loc >> 2] = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677380) | 0;
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 $8 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] & 7]($5, 3672468, 3672478, $$byval_copy) | 0;
  $13 = HEAP32[$__wn >> 2] | 0;
  $14 = HEAP32[$__wb >> 2] | 0;
  $15 = $13 - $14 | 0;
  $17 = $14;
  $18 = $13;
  if (($15 | 0) > 98) {
   $20 = _malloc($15 + 2 | 0) | 0;
   if (!$20) __ZSt17__throw_bad_allocv(); else {
    $__h$sroa$0$0 = $20;
    $__nc$0 = $20;
   }
  } else {
   $__h$sroa$0$0 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  $26 = $$byval_copy + 10 | 0;
  $27 = $$byval_copy;
  $29 = $18;
  $__nc$2 = $__nc$1;
  $__w$0 = $17;
  while (1) {
   if ($__w$0 >>> 0 >= $29 >>> 0) {
    $__nc$2$lcssa = $__nc$2;
    break;
   }
   $31 = HEAP8[$__w$0 >> 0] | 0;
   $$0$i = $$byval_copy;
   while (1) {
    if (($$0$i | 0) == ($26 | 0)) {
     $$0$lcssa$i = $26;
     break;
    }
    if ((HEAP8[$$0$i >> 0] | 0) == $31 << 24 >> 24) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $$0$i = $$0$i + 1 | 0;
   }
   HEAP8[$__nc$2 >> 0] = HEAP8[3672468 + ($$0$lcssa$i - $27) >> 0] | 0;
   $29 = HEAP32[$__wn >> 2] | 0;
   $__nc$2 = $__nc$2 + 1 | 0;
   $__w$0 = $__w$0 + 1 | 0;
  }
  HEAP8[$__nc$2$lcssa >> 0] = 0;
  HEAP32[$vararg_buffer >> 2] = $__v;
  _sscanf($__nbuf, 3672479, $vararg_buffer) | 0;
  if ($__h$sroa$0$0 | 0) _free($__h$sroa$0$0);
 }
 $43 = HEAP32[$__b >> 2] | 0;
 do if (!$43) $55 = 0; else if ((HEAP32[$43 + 12 >> 2] | 0) == (HEAP32[$43 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$43 >> 2] | 0) + 36 >> 2] & 63]($43) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $55 = 0;
  break;
 } else {
  $55 = HEAP32[$__b >> 2] | 0;
  break;
 } else $55 = $43; while (0);
 $56 = ($55 | 0) == 0;
 $57 = HEAP32[$__e >> 2] | 0;
 do if (!$57) label = 27; else {
  if ((HEAP32[$57 + 12 >> 2] | 0) == (HEAP32[$57 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] & 63]($57) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 27;
   break;
  }
  if (!$56) label = 28;
 } while (0);
 if ((label | 0) == 27) if ($56) label = 28;
 if ((label | 0) == 28) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $71 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $73 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($73 | 0) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($73);
 STACKTOP = sp;
 return $71 | 0;
}

function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$4 = 0, $$pre7 = 0, $10 = 0, $101 = 0, $106 = 0, $109 = 0, $11 = 0, $121 = 0, $126 = 0, $129 = 0, $13 = 0, $14 = 0, $17 = 0, $24 = 0, $35 = 0, $38 = 0, $50 = 0, $55 = 0, $6 = 0, $61 = 0, $63 = 0, $69 = 0, $79 = 0, $8 = 0, $83 = 0, $92 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre7 = $to_end;
 if (!($mode & 2)) label = 4; else if (($$pre7 - $to | 0) < 3) $$4 = 1; else {
  HEAP32[$to_nxt >> 2] = $to + 1;
  HEAP8[$to >> 0] = -17;
  $6 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $6 + 1;
  HEAP8[$6 >> 0] = -69;
  $8 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $8 + 1;
  HEAP8[$8 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $10 = $frm_end;
  $11 = HEAP32[$frm_nxt >> 2] | 0;
  while (1) {
   if ($11 >>> 0 >= $frm_end >>> 0) {
    $$4 = 0;
    break L4;
   }
   $13 = HEAP16[$11 >> 1] | 0;
   $14 = $13 & 65535;
   if ($14 >>> 0 > $Maxcode >>> 0) {
    $$4 = 2;
    break L4;
   }
   do if (($13 & 65535) < 128) {
    $17 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre7 - $17 | 0) < 1) {
     $$4 = 1;
     break L4;
    }
    HEAP32[$to_nxt >> 2] = $17 + 1;
    HEAP8[$17 >> 0] = $13;
   } else {
    if (($13 & 65535) < 2048) {
     $24 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre7 - $24 | 0) < 2) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $24 + 1;
     HEAP8[$24 >> 0] = $14 >>> 6 | 192;
     $35 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $35 + 1;
     HEAP8[$35 >> 0] = $14 & 63 | 128;
     break;
    }
    if (($13 & 65535) < 55296) {
     $38 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre7 - $38 | 0) < 3) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $38 + 1;
     HEAP8[$38 >> 0] = $14 >>> 12 | 224;
     $50 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $50 + 1;
     HEAP8[$50 >> 0] = $14 >>> 6 & 63 | 128;
     $55 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $55 + 1;
     HEAP8[$55 >> 0] = $14 & 63 | 128;
     break;
    }
    if (($13 & 65535) >= 56320) {
     if (($13 & 65535) < 57344) {
      $$4 = 2;
      break L4;
     }
     $109 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre7 - $109 | 0) < 3) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $109 + 1;
     HEAP8[$109 >> 0] = $14 >>> 12 | 224;
     $121 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $121 + 1;
     HEAP8[$121 >> 0] = $14 >>> 6 & 63 | 128;
     $126 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $126 + 1;
     HEAP8[$126 >> 0] = $14 & 63 | 128;
     break;
    }
    if (($10 - $11 | 0) < 4) {
     $$4 = 1;
     break L4;
    }
    $61 = $11 + 2 | 0;
    $63 = HEAPU16[$61 >> 1] | 0;
    if (($63 & 64512 | 0) != 56320) {
     $$4 = 2;
     break L4;
    }
    if (($$pre7 - (HEAP32[$to_nxt >> 2] | 0) | 0) < 4) {
     $$4 = 1;
     break L4;
    }
    $69 = $14 & 960;
    if ((($69 << 10) + 65536 | $14 << 10 & 64512 | $63 & 1023) >>> 0 > $Maxcode >>> 0) {
     $$4 = 2;
     break L4;
    }
    HEAP32[$frm_nxt >> 2] = $61;
    $79 = ($69 >>> 6) + 1 | 0;
    $83 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $83 + 1;
    HEAP8[$83 >> 0] = $79 >>> 2 | 240;
    $92 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $92 + 1;
    HEAP8[$92 >> 0] = $14 >>> 2 & 15 | $79 << 4 & 48 | 128;
    $101 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $101 + 1;
    HEAP8[$101 >> 0] = $14 << 4 & 48 | $63 >>> 6 & 15 | 128;
    $106 = HEAP32[$to_nxt >> 2] | 0;
    HEAP32[$to_nxt >> 2] = $106 + 1;
    HEAP8[$106 >> 0] = $63 & 63 | 128;
   } while (0);
   $129 = (HEAP32[$frm_nxt >> 2] | 0) + 2 | 0;
   HEAP32[$frm_nxt >> 2] = $129;
   $11 = $129;
  }
 } while (0);
 return $$4 | 0;
}

function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$9 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $32 = 0, $38 = 0, $46 = 0, $48 = 0, $55 = 0, $65 = 0, $73 = 0, $75 = 0, $77 = 0, $83 = 0, $86 = 0, $99 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 if (!($mode & 4)) $$pre$phiZ2D = $frm_end; else {
  $2 = HEAP32[$frm_nxt >> 2] | 0;
  $3 = $frm_end;
  if (($3 - $2 | 0) > 2) if ((HEAP8[$2 >> 0] | 0) == -17) if ((HEAP8[$2 + 1 >> 0] | 0) == -69) if ((HEAP8[$2 + 2 >> 0] | 0) == -65) {
   HEAP32[$frm_nxt >> 2] = $2 + 3;
   $$pre$phiZ2D = $3;
  } else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3; else $$pre$phiZ2D = $3;
 }
 L9 : while (1) {
  $16 = HEAP32[$frm_nxt >> 2] | 0;
  $17 = $16 >>> 0 < $frm_end >>> 0;
  if (!$17) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $18 = HEAP32[$to_nxt >> 2] | 0;
  if ($18 >>> 0 >= $to_end >>> 0) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $20 = HEAP8[$16 >> 0] | 0;
  $21 = $20 & 255;
  do if ($20 << 24 >> 24 > -1) {
   if ($21 >>> 0 > $Maxcode >>> 0) {
    $$9 = 2;
    break L9;
   }
   HEAP32[$18 >> 2] = $21;
   HEAP32[$frm_nxt >> 2] = $16 + 1;
  } else {
   if (($20 & 255) < 194) {
    $$9 = 2;
    break L9;
   }
   if (($20 & 255) < 224) {
    if (($$pre$phiZ2D - $16 | 0) < 2) {
     $$9 = 1;
     break L9;
    }
    $32 = HEAPU8[$16 + 1 >> 0] | 0;
    if (($32 & 192 | 0) != 128) {
     $$9 = 2;
     break L9;
    }
    $38 = $32 & 63 | $21 << 6 & 1984;
    if ($38 >>> 0 > $Maxcode >>> 0) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$18 >> 2] = $38;
    HEAP32[$frm_nxt >> 2] = $16 + 2;
    break;
   }
   if (($20 & 255) < 240) {
    if (($$pre$phiZ2D - $16 | 0) < 3) {
     $$9 = 1;
     break L9;
    }
    $46 = HEAP8[$16 + 1 >> 0] | 0;
    $48 = HEAP8[$16 + 2 >> 0] | 0;
    switch ($21 | 0) {
    case 224:
     {
      if (($46 & -32) << 24 >> 24 != -96) {
       $$9 = 2;
       break L9;
      }
      break;
     }
    case 237:
     {
      if (($46 & -32) << 24 >> 24 != -128) {
       $$9 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($46 & -64) << 24 >> 24 != -128) {
      $$9 = 2;
      break L9;
     }
    }
    $55 = $48 & 255;
    if (($55 & 192 | 0) != 128) {
     $$9 = 2;
     break L9;
    }
    $65 = ($46 & 255) << 6 & 4032 | $21 << 12 & 61440 | $55 & 63;
    if ($65 >>> 0 > $Maxcode >>> 0) {
     $$9 = 2;
     break L9;
    }
    HEAP32[$18 >> 2] = $65;
    HEAP32[$frm_nxt >> 2] = $16 + 3;
    break;
   }
   if (($20 & 255) >= 245) {
    $$9 = 2;
    break L9;
   }
   if (($$pre$phiZ2D - $16 | 0) < 4) {
    $$9 = 1;
    break L9;
   }
   $73 = HEAP8[$16 + 1 >> 0] | 0;
   $75 = HEAP8[$16 + 2 >> 0] | 0;
   $77 = HEAP8[$16 + 3 >> 0] | 0;
   switch ($21 | 0) {
   case 240:
    {
     if (($73 + 112 & 255) >= 48) {
      $$9 = 2;
      break L9;
     }
     break;
    }
   case 244:
    {
     if (($73 & -16) << 24 >> 24 != -128) {
      $$9 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($73 & -64) << 24 >> 24 != -128) {
     $$9 = 2;
     break L9;
    }
   }
   $83 = $75 & 255;
   if (($83 & 192 | 0) != 128) {
    $$9 = 2;
    break L9;
   }
   $86 = $77 & 255;
   if (($86 & 192 | 0) != 128) {
    $$9 = 2;
    break L9;
   }
   $99 = ($73 & 255) << 12 & 258048 | $21 << 18 & 1835008 | $83 << 6 & 4032 | $86 & 63;
   if ($99 >>> 0 > $Maxcode >>> 0) {
    $$9 = 2;
    break L9;
   }
   HEAP32[$18 >> 2] = $99;
   HEAP32[$frm_nxt >> 2] = $16 + 4;
  } while (0);
  HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
 }
 if ((label | 0) == 40) $$9 = $$lcssa & 1;
 return $$9 | 0;
}

function __ZN12Front_JS_SDL4drawERK10RDPDestBltRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 var $0 = 0, $106 = 0, $11 = 0, $111 = 0, $118 = 0, $124 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $27 = 0, $33 = 0, $36 = 0, $37 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $57 = 0, $61 = 0, $69 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $82 = 0, $89 = 0, $9 = 0, $rect = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp;
 $rect = sp + 16 | 0;
 $2 = HEAP32[$this + 52 >> 2] | 0;
 $8 = ((($2 >>> 16) + 65535 | $2 + 65535) & 32768 | 0) == 0;
 $9 = HEAP16[$clip >> 1] | 0;
 $11 = $9 << 16 >> 16 > 0 ? $9 : 0;
 $14 = HEAP16[$clip + 2 >> 1] | 0;
 $16 = $14 << 16 >> 16 > 0 ? $14 : 0;
 $18 = $8 ? $2 << 16 >> 16 : 0;
 $24 = (HEAPU16[$clip + 4 >> 1] | 0) + ($9 & 65535) << 16 >> 16;
 $27 = $8 ? $2 >> 16 : 0;
 $33 = (HEAPU16[$clip + 6 >> 1] | 0) + ($14 & 65535) << 16 >> 16;
 $36 = (($24 | 0) < ($18 | 0) ? $24 : $18) - ($11 << 16 >> 16) | 0;
 $37 = (($33 | 0) < ($27 | 0) ? $33 : $27) - ($16 << 16 >> 16) | 0;
 $42 = (($37 + 65535 | $36 + 65535) & 32768 | 0) == 0;
 $43 = HEAP16[$cmd >> 1] | 0;
 $45 = $43 << 16 >> 16 < $11 << 16 >> 16 ? $11 : $43;
 $46 = $45 << 16 >> 16;
 $48 = HEAP16[$cmd + 2 >> 1] | 0;
 $50 = $48 << 16 >> 16 < $16 << 16 >> 16 ? $16 : $48;
 $51 = $50 << 16 >> 16;
 $57 = (HEAPU16[$cmd + 4 >> 1] | 0) + ($43 & 65535) << 16 >> 16;
 $61 = ($42 ? $36 : 0) + ($11 & 65535) << 16 >> 16;
 $69 = (HEAPU16[$cmd + 6 >> 1] | 0) + ($48 & 65535) << 16 >> 16;
 $73 = ($42 ? $37 : 0) + ($16 & 65535) << 16 >> 16;
 $76 = (($61 | 0) < ($57 | 0) ? $61 : $57) - $46 | 0;
 $77 = $76 & 65535;
 $78 = (($73 | 0) < ($69 | 0) ? $73 : $69) - $51 | 0;
 HEAP16[$rect >> 1] = $45;
 HEAP16[$rect + 2 >> 1] = $50;
 $81 = $rect + 4 | 0;
 HEAP16[$81 >> 1] = $77;
 $82 = $rect + 6 | 0;
 HEAP16[$82 >> 1] = $78;
 if (($78 + 65535 | $76 + 65535) & 32768 | 0) {
  HEAP16[$81 >> 1] = 0;
  HEAP16[$82 >> 1] = 0;
  STACKTOP = sp;
  return;
 }
 if (!($77 << 16 >> 16)) {
  STACKTOP = sp;
  return;
 }
 $89 = $cmd + 8 | 0;
 switch (HEAPU8[$89 >> 0] | 0 | 0) {
 case 0:
  {
   HEAP32[$0 >> 2] = $51;
   HEAP32[$0 + 4 >> 2] = $46;
   HEAP32[$0 + 8 >> 2] = $76 & 65535;
   HEAP32[$0 + 12 >> 2] = $78 & 65535;
   _SDL_FillRect(HEAP32[$this + 5820 >> 2] | 0, $0 | 0, 255) | 0;
   STACKTOP = sp;
   return;
  }
 case 85:
  {
   __ZN12Front_JS_SDL14draw_RDPScrBltEiiRK4RectNS_8uint32_tE($this, $51, $46, $rect, -1);
   STACKTOP = sp;
   return;
  }
 case 255:
  {
   HEAP32[$0 >> 2] = $51;
   HEAP32[$0 + 4 >> 2] = $46;
   HEAP32[$0 + 8 >> 2] = $76 & 65535;
   HEAP32[$0 + 12 >> 2] = $78 & 65535;
   _SDL_FillRect(HEAP32[$this + 5820 >> 2] | 0, $0 | 0, -1) | 0;
   STACKTOP = sp;
   return;
  }
 case 170:
  {
   STACKTOP = sp;
   return;
  }
 default:
  {
   $106 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(3676420, 3667525, 11) | 0;
   $111 = $106 + (HEAP32[(HEAP32[$106 >> 2] | 0) + -12 >> 2] | 0) + 4 | 0;
   HEAP32[$111 >> 2] = HEAP32[$111 >> 2] & -75 | 8;
   $118 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($106, HEAPU8[$89 >> 0] | 0) | 0, 3667537, 1) | 0;
   HEAP32[$0 >> 2] = __ZNKSt3__18ios_base6getlocEv($118 + (HEAP32[(HEAP32[$118 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
   $124 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
   $128 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$124 >> 2] | 0) + 28 >> 2] & 15]($124, 10) | 0;
   __ZNSt3__16localeD2Ev($0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($118, $128) | 0;
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($118) | 0;
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN14ClientTimeZoneC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $110 = 0, $2 = 0, $20 = 0, $5 = 0, $50 = 0, $60 = 0, $62 = 0, $65 = 0, $80 = 0, $i$02$i = 0, $i$02$i2 = 0, $i$1$i = 0, $i$1$i6 = 0, $i_t$01$i = 0, $i_t$01$i3 = 0, $ucode$0$i = 0, $ucode$0$i5 = 0, label = 0, $i_t$01$i3$looptemp = 0, $i_t$01$i$looptemp = 0;
 $0 = $this + 168 | 0;
 _memset($this | 0, 0, 172) | 0;
 $2 = 71;
 $i$02$i2 = 0;
 $i_t$01$i3 = 0;
 L1 : while (1) {
  switch ($2 >>> 4 | 0) {
  case 11:
  case 10:
  case 9:
  case 8:
   {
    break L1;
    break;
   }
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
  case 0:
   {
    $i$1$i6 = $i$02$i2;
    $ucode$0$i5 = $2;
    break;
   }
  case 13:
  case 12:
   {
    $5 = $i$02$i2 + 1 | 0;
    $i$1$i6 = $5;
    $ucode$0$i5 = (HEAPU8[3667406 + $5 >> 0] | 0) & 63 | $2 << 6 & 1984;
    break;
   }
  case 14:
   {
    $20 = $i$02$i2 + 2 | 0;
    $i$1$i6 = $20;
    $ucode$0$i5 = (HEAPU8[3667406 + ($i$02$i2 + 1) >> 0] | 0) << 6 & 4032 | $2 << 12 & 61440 | (HEAPU8[3667406 + $20 >> 0] | 0) & 63;
    break;
   }
  case 15:
   {
    $i$1$i6 = $i$02$i2 + 3 | 0;
    $ucode$0$i5 = (HEAPU8[3667406 + ($i$02$i2 + 1) >> 0] | 0) << 6 & 4032 | $2 << 12 & 258048 | (HEAPU8[3667406 + ($i$02$i2 + 2) >> 0] | 0) & 63;
    break;
   }
  default:
   {
    label = 6;
    break L1;
   }
  }
  $i_t$01$i3$looptemp = $i_t$01$i3;
  $i_t$01$i3 = $i_t$01$i3 + 2 | 0;
  if ($i_t$01$i3 >>> 0 > 64) break;
  HEAP8[$this + 4 + $i_t$01$i3$looptemp >> 0] = $ucode$0$i5;
  HEAP8[($i_t$01$i3$looptemp | 1) + ($this + 4) >> 0] = $ucode$0$i5 >>> 8;
  $50 = $i$1$i6 + 1 | 0;
  if (($50 | 0) == 3) break; else {
   $2 = HEAPU8[3667406 + $50 >> 0] | 0;
   $i$02$i2 = $50;
  }
 }
 if ((label | 0) == 6) {}
 HEAP16[$this + 68 >> 1] = 0;
 HEAP16[$this + 70 >> 1] = 10;
 HEAP16[$this + 72 >> 1] = 0;
 HEAP16[$this + 74 >> 1] = 5;
 HEAP16[$this + 76 >> 1] = 2;
 $60 = $this + 78 | 0;
 HEAP16[$60 >> 1] = 0;
 HEAP16[$60 + 2 >> 1] = 0;
 HEAP16[$60 + 4 >> 1] = 0;
 HEAP16[$60 + 6 >> 1] = 0;
 HEAP16[$60 + 8 >> 1] = 0;
 $62 = 71;
 $i$02$i = 0;
 $i_t$01$i = 0;
 L12 : while (1) {
  switch ($62 >>> 4 | 0) {
  case 11:
  case 10:
  case 9:
  case 8:
   {
    label = 17;
    break L12;
    break;
   }
  case 7:
  case 6:
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
  case 0:
   {
    $i$1$i = $i$02$i;
    $ucode$0$i = $62;
    break;
   }
  case 13:
  case 12:
   {
    $65 = $i$02$i + 1 | 0;
    $i$1$i = $65;
    $ucode$0$i = (HEAPU8[3667410 + $65 >> 0] | 0) & 63 | $62 << 6 & 1984;
    break;
   }
  case 14:
   {
    $80 = $i$02$i + 2 | 0;
    $i$1$i = $80;
    $ucode$0$i = (HEAPU8[3667410 + ($i$02$i + 1) >> 0] | 0) << 6 & 4032 | $62 << 12 & 61440 | (HEAPU8[3667410 + $80 >> 0] | 0) & 63;
    break;
   }
  case 15:
   {
    $i$1$i = $i$02$i + 3 | 0;
    $ucode$0$i = (HEAPU8[3667410 + ($i$02$i + 1) >> 0] | 0) << 6 & 4032 | $62 << 12 & 258048 | (HEAPU8[3667410 + ($i$02$i + 2) >> 0] | 0) & 63;
    break;
   }
  default:
   {
    label = 14;
    break L12;
   }
  }
  $i_t$01$i$looptemp = $i_t$01$i;
  $i_t$01$i = $i_t$01$i + 2 | 0;
  if ($i_t$01$i >>> 0 > 64) {
   label = 17;
   break;
  }
  HEAP8[$this + 88 + $i_t$01$i$looptemp >> 0] = $ucode$0$i;
  HEAP8[($i_t$01$i$looptemp | 1) + ($this + 88) >> 0] = $ucode$0$i >>> 8;
  $110 = $i$1$i + 1 | 0;
  if (($110 | 0) == 19) {
   label = 17;
   break;
  } else {
   $62 = HEAPU8[3667410 + $110 >> 0] | 0;
   $i$02$i = $110;
  }
 }
 if ((label | 0) == 14) {} else if ((label | 0) == 17) {
  HEAP16[$this + 152 >> 1] = 0;
  HEAP16[$this + 154 >> 1] = 3;
  HEAP16[$this + 156 >> 1] = 0;
  HEAP16[$this + 158 >> 1] = 5;
  HEAP16[$this + 160 >> 1] = 1;
  HEAP16[$this + 162 >> 1] = 0;
  HEAP16[$this + 164 >> 1] = 0;
  HEAP16[$this + 166 >> 1] = 0;
  HEAP32[$0 >> 2] = -60;
  return;
 }
}

function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$2 = 0, $14 = 0, $19 = 0, $22 = 0, $3 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $62 = 0, $65 = 0, $73 = 0, $82 = 0, $87 = 0, $89 = 0;
 L1 : do if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) if (!(HEAP8[$__in_units >> 0] | 0)) $$2 = -1; else {
  HEAP8[$__in_units >> 0] = 0;
  $3 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = 46;
  $5 = HEAP8[$__grouping >> 0] | 0;
  if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $$2 = 0; else {
   $14 = HEAP32[$__g_end >> 2] | 0;
   if (($14 - $__g | 0) < 160) {
    $19 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $14 + 4;
    HEAP32[$14 >> 2] = $19;
    $$2 = 0;
   } else $$2 = 0;
  }
 } else {
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
   $22 = HEAP8[$__grouping >> 0] | 0;
   if ((($22 & 1) == 0 ? ($22 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
    if (!(HEAP8[$__in_units >> 0] | 0)) {
     $$2 = -1;
     break;
    }
    $33 = HEAP32[$__g_end >> 2] | 0;
    if (($33 - $__g | 0) >= 160) {
     $$2 = 0;
     break;
    }
    $38 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $33 + 4;
    HEAP32[$33 >> 2] = $38;
    HEAP32[$__dc >> 2] = 0;
    $$2 = 0;
    break;
   }
  }
  $40 = $__atoms + 32 | 0;
  $$0$i = $__atoms;
  while (1) {
   if (($$0$i | 0) == ($40 | 0)) {
    $$0$lcssa$i = $40;
    break;
   }
   if ((HEAP8[$$0$i >> 0] | 0) == $__ct << 24 >> 24) {
    $$0$lcssa$i = $$0$i;
    break;
   }
   $$0$i = $$0$i + 1 | 0;
  }
  $47 = $$0$lcssa$i - $__atoms | 0;
  if (($47 | 0) > 31) $$2 = -1; else {
   $50 = HEAP8[3671184 + $47 >> 0] | 0;
   switch ($47 | 0) {
   case 24:
   case 25:
    {
     $51 = HEAP32[$__a_end >> 2] | 0;
     if (($51 | 0) != ($__a | 0)) if ((HEAPU8[$51 + -1 >> 0] & 95 | 0) != (HEAPU8[$__exp >> 0] & 127 | 0)) {
      $$2 = -1;
      break L1;
     }
     HEAP32[$__a_end >> 2] = $51 + 1;
     HEAP8[$51 >> 0] = $50;
     $$2 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[$__exp >> 0] = 80;
     $62 = HEAP32[$__a_end >> 2] | 0;
     HEAP32[$__a_end >> 2] = $62 + 1;
     HEAP8[$62 >> 0] = $50;
     $$2 = 0;
     break L1;
     break;
    }
   default:
    {
     $65 = $50 & 95;
     if (($65 | 0) == (HEAP8[$__exp >> 0] | 0)) {
      HEAP8[$__exp >> 0] = $65 | 128;
      if (HEAP8[$__in_units >> 0] | 0) {
       HEAP8[$__in_units >> 0] = 0;
       $73 = HEAP8[$__grouping >> 0] | 0;
       if ((($73 & 1) == 0 ? ($73 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
        $82 = HEAP32[$__g_end >> 2] | 0;
        if (($82 - $__g | 0) < 160) {
         $87 = HEAP32[$__dc >> 2] | 0;
         HEAP32[$__g_end >> 2] = $82 + 4;
         HEAP32[$82 >> 2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end >> 2] | 0;
     HEAP32[$__a_end >> 2] = $89 + 1;
     HEAP8[$89 >> 0] = $50;
     if (($47 | 0) > 21) {
      $$2 = 0;
      break L1;
     }
     HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
     $$2 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return $$2 | 0;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$byval_copy = 0, $0 = 0, $10 = 0, $2 = 0, $26 = 0, $28 = 0, $29 = 0, $34 = 0, $37 = 0, $4 = 0, $49 = 0, $5 = 0, $6 = 0, $62 = 0, $63 = 0, $66 = 0, $8 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 $$byval_copy = sp + 424 | 0;
 $__wbuf = sp + 24 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 8 | 0;
 $__loc = sp + 4 | 0;
 $__neg = sp + 428 | 0;
 $0 = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 119;
 $4 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $4;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677412) | 0;
 HEAP8[$__neg >> 0] = 0;
 $6 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $6;
 $8 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $10 = $6;
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  if (!(HEAP8[$__v >> 0] & 1)) HEAP8[$__v >> 0] = 0; else HEAP32[HEAP32[$__v + 8 >> 2] >> 2] = 0;
  HEAP32[$__v + 4 >> 2] = 0;
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 44 >> 2] & 15]($5, 45) | 0);
  $26 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 44 >> 2] & 15]($5, 48) | 0;
  $28 = HEAP32[$__wn >> 2] | 0;
  $29 = $28 + -4 | 0;
  $__w$0 = HEAP32[$__wb >> 2] | 0;
  while (1) {
   if ($__w$0 >>> 0 >= $29 >>> 0) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   if ((HEAP32[$__w$0 >> 2] | 0) != ($26 | 0)) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   $__w$0 = $__w$0 + 4 | 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $28) | 0;
 }
 $34 = HEAP32[$__b >> 2] | 0;
 do if (!$34) $66 = 1; else {
  $37 = HEAP32[$34 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] & 63]($34) | 0; else $$0$i$i$i$i = HEAP32[$37 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $66 = 1;
   break;
  } else {
   $66 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$6) label = 25; else {
  $49 = HEAP32[$10 + 12 >> 2] | 0;
  if (($49 | 0) == (HEAP32[$10 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 63]($10) | 0; else $$0$i$i1$i$i = HEAP32[$49 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 25;
   break;
  } else if ($66) break; else {
   label = 27;
   break;
  }
 } while (0);
 if ((label | 0) == 25) if ($66) label = 27;
 if ((label | 0) == 27) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $62 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($4) | 0;
 $63 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($63 | 0) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($63);
 STACKTOP = sp;
 return $62 | 0;
}

function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$2 = 0, $14 = 0, $19 = 0, $22 = 0, $3 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $64 = 0, $72 = 0, $81 = 0, $86 = 0, $88 = 0;
 L1 : do if (($__ct | 0) == ($__decimal_point | 0)) if (!(HEAP8[$__in_units >> 0] | 0)) $$2 = -1; else {
  HEAP8[$__in_units >> 0] = 0;
  $3 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = 46;
  $5 = HEAP8[$__grouping >> 0] | 0;
  if (!((($5 & 1) == 0 ? ($5 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0)) $$2 = 0; else {
   $14 = HEAP32[$__g_end >> 2] | 0;
   if (($14 - $__g | 0) < 160) {
    $19 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $14 + 4;
    HEAP32[$14 >> 2] = $19;
    $$2 = 0;
   } else $$2 = 0;
  }
 } else {
  if (($__ct | 0) == ($__thousands_sep | 0)) {
   $22 = HEAP8[$__grouping >> 0] | 0;
   if ((($22 & 1) == 0 ? ($22 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
    if (!(HEAP8[$__in_units >> 0] | 0)) {
     $$2 = -1;
     break;
    }
    $33 = HEAP32[$__g_end >> 2] | 0;
    if (($33 - $__g | 0) >= 160) {
     $$2 = 0;
     break;
    }
    $38 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $33 + 4;
    HEAP32[$33 >> 2] = $38;
    HEAP32[$__dc >> 2] = 0;
    $$2 = 0;
    break;
   }
  }
  $40 = $__atoms + 128 | 0;
  $$0$i = $__atoms;
  while (1) {
   if (($$0$i | 0) == ($40 | 0)) {
    $$0$lcssa$i = $40;
    break;
   }
   if ((HEAP32[$$0$i >> 2] | 0) == ($__ct | 0)) {
    $$0$lcssa$i = $$0$i;
    break;
   }
   $$0$i = $$0$i + 4 | 0;
  }
  $47 = $$0$lcssa$i - $__atoms | 0;
  $48 = $47 >> 2;
  if (($47 | 0) > 124) $$2 = -1; else {
   $51 = HEAP8[3671184 + $48 >> 0] | 0;
   switch ($48 | 0) {
   case 24:
   case 25:
    {
     $52 = HEAP32[$__a_end >> 2] | 0;
     if (($52 | 0) != ($__a | 0)) if ((HEAPU8[$52 + -1 >> 0] & 95 | 0) != (HEAPU8[$__exp >> 0] & 127 | 0)) {
      $$2 = -1;
      break L1;
     }
     HEAP32[$__a_end >> 2] = $52 + 1;
     HEAP8[$52 >> 0] = $51;
     $$2 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[$__exp >> 0] = 80;
     break;
    }
   default:
    {
     $64 = $51 & 95;
     if (($64 | 0) == (HEAP8[$__exp >> 0] | 0)) {
      HEAP8[$__exp >> 0] = $64 | 128;
      if (HEAP8[$__in_units >> 0] | 0) {
       HEAP8[$__in_units >> 0] = 0;
       $72 = HEAP8[$__grouping >> 0] | 0;
       if ((($72 & 1) == 0 ? ($72 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) {
        $81 = HEAP32[$__g_end >> 2] | 0;
        if (($81 - $__g | 0) < 160) {
         $86 = HEAP32[$__dc >> 2] | 0;
         HEAP32[$__g_end >> 2] = $81 + 4;
         HEAP32[$81 >> 2] = $86;
        }
       }
      }
     }
    }
   }
   $88 = HEAP32[$__a_end >> 2] | 0;
   HEAP32[$__a_end >> 2] = $88 + 1;
   HEAP8[$88 >> 0] = $51;
   if (($47 | 0) > 84) $$2 = 0; else {
    HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
    $$2 = 0;
   }
  }
 } while (0);
 return $$2 | 0;
}

function __ZN12Front_JS_SDL4drawERK9RDPLineToRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 var $$0$i = 0.0, $$0$i3 = 0, $0 = 0, $1 = 0, $101 = 0.0, $103 = 0, $105 = 0.0, $108 = 0.0, $11 = 0, $111 = 0.0, $114 = 0.0, $117 = 0.0, $119 = 0, $122 = 0, $125 = 0, $126 = 0, $128 = 0.0, $13 = 0, $133 = 0, $134 = 0.0, $140 = 0, $16 = 0, $17 = 0, $23 = 0, $26 = 0, $32 = 0, $35 = 0, $36 = 0, $41 = 0, $43 = 0, $45 = 0, $49 = 0, $57 = 0, $61 = 0, $7 = 0, $8 = 0, $95 = 0, $97 = 0, $98 = 0, $err$06 = 0.0, $x$07 = 0, $x1$0 = 0.0, $x2$0 = 0.0, $y$05 = 0, $y1$0 = 0.0, $y2$0 = 0.0;
 $0 = $this + 52 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $7 = ((($1 >>> 16) + 65535 | $1 + 65535) & 32768 | 0) == 0;
 $8 = HEAP16[$clip >> 1] | 0;
 $11 = ($8 << 16 >> 16 > 0 ? $8 : 0) << 16 >> 16;
 $13 = HEAP16[$clip + 2 >> 1] | 0;
 $16 = ($13 << 16 >> 16 > 0 ? $13 : 0) << 16 >> 16;
 $17 = $7 ? $1 << 16 >> 16 : 0;
 $23 = (HEAPU16[$clip + 4 >> 1] | 0) + ($8 & 65535) << 16 >> 16;
 $26 = $7 ? $1 >> 16 : 0;
 $32 = (HEAPU16[$clip + 6 >> 1] | 0) + ($13 & 65535) << 16 >> 16;
 $35 = (($23 | 0) < ($17 | 0) ? $23 : $17) - $11 | 0;
 $36 = (($32 | 0) < ($26 | 0) ? $32 : $26) - $16 | 0;
 $41 = (($36 + 65535 | $35 + 65535) & 32768 | 0) == 0;
 $43 = HEAP32[$cmd + 12 >> 2] | 0;
 $45 = HEAP8[$this + 2580 >> 0] | 0;
 __ZN10BGRPalette11classic_332Ev() | 0;
 switch ($45 & 255 | 0) {
 case 8:
  {
   $49 = HEAP32[3674632 + (($43 & 255) << 2) >> 2] | 0;
   $$0$i3 = $49 << 16 & 16711680 | $49 & 65280 | $49 >>> 16 & 255;
   break;
  }
 case 15:
  {
   $57 = $43 >>> 7;
   $61 = $43 >>> 2;
   $$0$i3 = $57 & 248 | $43 >>> 12 & 7 | ($61 & 248 | $57 & 7) << 8 | ($43 << 3 & 248 | $61 & 7) << 16;
   break;
  }
 case 16:
  {
   $$0$i3 = $43 >>> 8 & 248 | $43 >>> 13 & 7 | ($43 >>> 3 & 252 | $43 >>> 9 & 3) << 8 | ($43 << 3 & 248 | $43 >>> 2 & 7) << 16;
   break;
  }
 case 32:
 case 24:
  {
   $$0$i3 = $43 & 16777215;
   break;
  }
 default:
  _exit(0);
 }
 $95 = $$0$i3 >>> 16 & 255;
 $97 = $$0$i3 >>> 8 & 255;
 $98 = $$0$i3 & 255;
 $101 = +(HEAP16[$cmd + 2 >> 1] | 0);
 $103 = HEAP32[$cmd + 4 >> 2] | 0;
 $105 = +(($103 & 65535) << 16 >> 16);
 $108 = +(($103 >>> 16 & 65535) << 16 >> 16);
 $111 = +(HEAP16[$cmd + 8 >> 1] | 0);
 if ($101 > $108) {
  $x1$0 = $108;
  $x2$0 = $101;
  $y1$0 = $111;
  $y2$0 = $105;
 } else {
  $x1$0 = $101;
  $x2$0 = $108;
  $y1$0 = $105;
  $y2$0 = $111;
 }
 $114 = $x2$0 - $x1$0;
 $117 = ($y2$0 - $y1$0) / $114;
 $119 = $y1$0 < $y2$0 ? 1 : -1;
 $122 = ($41 ? $35 & 65535 : 0) + $11 | 0;
 $125 = ($41 ? $36 & 65535 : 0) + $16 | 0;
 $126 = $this + 5820 | 0;
 _SDL_LockSurface(HEAP32[$126 >> 2] | 0) | 0;
 $128 = $114;
 $$0$i = $114 > 0.0 ? $128 : -$128;
 if (!($$0$i > 0.0)) {
  $133 = HEAP32[$126 >> 2] | 0;
  _SDL_UnlockSurface($133 | 0);
  return;
 }
 $err$06 = 0.0;
 $x$07 = 0;
 $y$05 = ~~$y1$0;
 while (1) {
  $134 = $117 + $err$06;
  if (($y$05 | 0) < ($125 | 0) & ((($y$05 | 0) < ($16 | 0) | (($x$07 | 0) >= ($122 | 0) | ($x$07 | 0) < ($11 | 0))) ^ 1)) {
   $140 = _SDL_MapRGBA(HEAP32[(HEAP32[$126 >> 2] | 0) + 4 >> 2] | 0, $98 | 0, $97 | 0, $95 | 0, -1) | 0;
   HEAP32[(HEAP32[(HEAP32[$126 >> 2] | 0) + 20 >> 2] | 0) + ((Math_imul(HEAPU16[$0 >> 1] | 0, $y$05) | 0) << 2) + ($x$07 << 2) >> 2] = $140;
  }
  $x$07 = $x$07 + 1 | 0;
  if (!(+($x$07 | 0) < $$0$i)) break; else {
   $err$06 = $134;
   $y$05 = (!($134 >= .5) ? 0 : $119) + $y$05 | 0;
  }
 }
 $133 = HEAP32[$126 >> 2] | 0;
 _SDL_UnlockSurface($133 | 0);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i3$i$i915 = 0, $0 = 0, $13 = 0, $16 = 0, $28 = 0, $3 = 0, $30 = 0, $46 = 0, $47 = 0, $48 = 0, $58 = 0, $59 = 0, $71 = 0, $83 = 0, $84 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $83 = 1; else {
  $3 = HEAP32[$0 + 12 >> 2] | 0;
  if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $83 = 1;
   break;
  } else {
   $83 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0;
 do if (!$13) label = 14; else {
  $16 = HEAP32[$13 + 12 >> 2] | 0;
  if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0; else $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  } else if ($83) {
   $$pre$i3$i$i915 = $13;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($83) label = 16; else {
  $$pre$i3$i$i915 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 17) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; else $$0$i$i = HEAP32[$30 >> 2] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $46 = HEAP32[$__b >> 2] | 0;
  $47 = $46 + 12 | 0;
  $48 = HEAP32[$47 >> 2] | 0;
  if (($48 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 63]($46) | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   if (!$$pre) $84 = 1; else {
    $58 = $$pre;
    label = 25;
   }
  } else {
   HEAP32[$47 >> 2] = $48 + 4;
   $58 = $46;
   label = 25;
  }
  do if ((label | 0) == 25) {
   $59 = HEAP32[$58 + 12 >> 2] | 0;
   if (($59 | 0) == (HEAP32[$58 + 16 >> 2] | 0)) $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] & 63]($58) | 0; else $$0$i$i$i$i1 = HEAP32[$59 >> 2] | 0;
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $84 = 1;
    break;
   } else {
    $84 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$$pre$i3$i$i915) label = 37; else {
   $71 = HEAP32[$$pre$i3$i$i915 + 12 >> 2] | 0;
   if (($71 | 0) == (HEAP32[$$pre$i3$i$i915 + 16 >> 2] | 0)) $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i915 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i915) | 0; else $$0$i$i1$i$i7 = HEAP32[$71 >> 2] | 0;
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 37;
    break;
   } else if ($84) break L22; else break;
  } while (0);
  if ((label | 0) == 37) if (!$84) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $$byval_copy = sp + 304 | 0;
 $vararg_buffer9 = sp + 48 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 308 | 0;
 $__nb = sp + 300 | 0;
 $__o = sp + 72 | 0;
 $__op = sp + 68 | 0;
 $__oe = sp + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 3671438, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  if ($9) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer9) | 0;
  }
  $21 = HEAP32[$__nb >> 2] | 0;
  if (!$21) __ZSt17__throw_bad_allocv(); else {
   $24 = $21;
   $__nbh$sroa$0$0 = $21;
   $__nc$2 = $__nc$1;
  }
 } else {
  $24 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $23 = $24 + $__nc$2 | 0;
 $25 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24, $23, $__iob) | 0;
 if (($24 | 0) == ($__nar | 0)) {
  $31 = $__nar;
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 0;
 } else {
  $28 = _malloc($__nc$2 << 3) | 0;
  if (!$28) __ZSt17__throw_bad_allocv(); else {
   $31 = $24;
   $__ob$0 = $28;
   $__obh$sroa$0$0 = $28;
  }
 }
 $30 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $30;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($31, $25, $23, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($30) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $33 = HEAP32[$__op >> 2] | 0;
 $34 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $35 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $33, $34, $__iob, $__fl) | 0;
 HEAP32[$__s >> 2] = $35;
 if ($__obh$sroa$0$0 | 0) _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $35 | 0;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $10 = 0, $2 = 0, $27 = 0, $29 = 0, $30 = 0, $35 = 0, $4 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $63 = 0, $64 = 0, $8 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy = sp + 24 | 0;
 $__wbuf = sp + 32 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 8 | 0;
 $__loc = sp + 4 | 0;
 $__neg = sp + 28 | 0;
 $0 = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 $2 = $__wb + 4 | 0;
 HEAP32[$2 >> 2] = 119;
 $4 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $4;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677380) | 0;
 HEAP8[$__neg >> 0] = 0;
 $6 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $6;
 $8 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $10 = $6;
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $8, $__err, $__neg, $5, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  if (!(HEAP8[$__v >> 0] & 1)) {
   HEAP8[$__v + 1 >> 0] = 0;
   HEAP8[$__v >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__v + 8 >> 2] >> 0] = 0;
   HEAP32[$__v + 4 >> 2] = 0;
  }
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 15]($5, 45) | 0);
  $27 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 15]($5, 48) | 0;
  $29 = HEAP32[$__wn >> 2] | 0;
  $30 = $29 + -1 | 0;
  $__w$0 = HEAP32[$__wb >> 2] | 0;
  while (1) {
   if ($__w$0 >>> 0 >= $30 >>> 0) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   if ((HEAP8[$__w$0 >> 0] | 0) != $27 << 24 >> 24) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   $__w$0 = $__w$0 + 1 | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $29) | 0;
 }
 $35 = HEAP32[$__b >> 2] | 0;
 do if (!$35) $47 = 0; else if ((HEAP32[$35 + 12 >> 2] | 0) == (HEAP32[$35 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 63]($35) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $47 = 0;
  break;
 } else {
  $47 = HEAP32[$__b >> 2] | 0;
  break;
 } else $47 = $35; while (0);
 $48 = ($47 | 0) == 0;
 do if (!$6) label = 22; else {
  if ((HEAP32[$10 + 12 >> 2] | 0) == (HEAP32[$10 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 63]($10) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 22;
   break;
  }
  if (!$48) label = 23;
 } while (0);
 if ((label | 0) == 22) if ($48) label = 23;
 if ((label | 0) == 23) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 $63 = HEAP32[$__b >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($4) | 0;
 $64 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($64 | 0) FUNCTION_TABLE_vi[HEAP32[$2 >> 2] & 127]($64);
 STACKTOP = sp;
 return $63 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy = sp + 76 | 0;
 $vararg_buffer9 = sp + 48 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 138 | 0;
 $__nb = sp + 72 | 0;
 $__o = sp + 80 | 0;
 $__op = sp + 68 | 0;
 $__oe = sp + 64 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 3671438, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  if ($9) {
   HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
   HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0;
  } else {
   HEAPF64[$vararg_buffer9 >> 3] = $__v;
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer9) | 0;
  }
  $21 = HEAP32[$__nb >> 2] | 0;
  if (!$21) __ZSt17__throw_bad_allocv(); else {
   $24 = $21;
   $__nbh$sroa$0$0 = $21;
   $__nc$2 = $__nc$1;
  }
 } else {
  $24 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$2 = $__nc$0;
 }
 $23 = $24 + $__nc$2 | 0;
 $25 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24, $23, $__iob) | 0;
 if (($24 | 0) == ($__nar | 0)) {
  $31 = $__nar;
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 0;
 } else {
  $28 = _malloc($__nc$2 << 1) | 0;
  if (!$28) __ZSt17__throw_bad_allocv(); else {
   $31 = $24;
   $__ob$0 = $28;
   $__obh$sroa$0$0 = $28;
  }
 }
 $30 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $30;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($31, $25, $23, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($30) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $33 = HEAP32[$__op >> 2] | 0;
 $34 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $35 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $33, $34, $__iob, $__fl) | 0;
 _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $35 | 0;
}

function __ZNSt3__110__stdinbufIcE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$10 = 0, $$11 = 0, $$9 = 0, $0 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $4 = 0, $44 = 0, $57 = 0, $6 = 0, $61 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$0 = 0, $__i6$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa42 = 0, $__nread$044 = 0, $__nread$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $0 = $this + 52 | 0;
 if (!(HEAP8[$0 >> 0] | 0)) {
  $6 = HEAP32[$this + 44 >> 2] | 0;
  $8 = ($6 | 0) > 1 ? $6 : 1;
  $9 = $this + 32 | 0;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) >= ($8 | 0)) {
    label = 8;
    break;
   }
   $12 = _getc(HEAP32[$9 >> 2] | 0) | 0;
   if (($12 | 0) == -1) {
    $$10 = -1;
    break;
   }
   HEAP8[$__extbuf + $__i$0 >> 0] = $12;
   $__i$0 = $__i$0 + 1 | 0;
  }
  if ((label | 0) == 8) {
   do if (!(HEAP8[$this + 53 >> 0] | 0)) {
    $21 = $this + 40 | 0;
    $22 = $this + 36 | 0;
    $23 = $__1buf + 1 | 0;
    $__nread$0 = $8;
    L11 : while (1) {
     $24 = HEAP32[$21 >> 2] | 0;
     $25 = $24;
     $27 = HEAP32[$25 >> 2] | 0;
     $30 = HEAP32[$25 + 4 >> 2] | 0;
     $31 = HEAP32[$22 >> 2] | 0;
     $32 = $__extbuf + $__nread$0 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$31 >> 2] | 0) + 16 >> 2] & 15]($31, $24, $__extbuf, $32, $__enxt, $__1buf, $23, $__inxt) | 0) {
     case 3:
      {
       $__nread$0$lcssa42 = $__nread$0;
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      {
       $__nread$044 = $__nread$0;
       break L11;
      }
     }
     $38 = HEAP32[$21 >> 2] | 0;
     HEAP32[$38 >> 2] = $27;
     HEAP32[$38 + 4 >> 2] = $30;
     if (($__nread$0 | 0) == 8) {
      label = 17;
      break;
     }
     $44 = _getc(HEAP32[$9 >> 2] | 0) | 0;
     if (($44 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$32 >> 0] = $44;
     $__nread$0 = $__nread$0 + 1 | 0;
    }
    if ((label | 0) == 15) {
     HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
     $__nread$044 = $__nread$0$lcssa42;
    } else if ((label | 0) == 17) {
     $$9 = -1;
     break;
    }
    $__nread$3 = $__nread$044;
    label = 18;
   } else {
    HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
    $__nread$3 = $8;
    label = 18;
   } while (0);
   L21 : do if ((label | 0) == 18) {
    if ($__consume) {
     $57 = HEAP8[$__1buf >> 0] | 0;
     HEAP32[$this + 48 >> 2] = $57 & 255;
     $61 = $57;
    } else {
     $__i6$0 = $__nread$3;
     while (1) {
      if (($__i6$0 | 0) <= 0) break;
      $__i6$0 = $__i6$0 + -1 | 0;
      if ((_ungetc(HEAPU8[$__extbuf + $__i6$0 >> 0] | 0, HEAP32[$9 >> 2] | 0) | 0) == -1) {
       $$9 = -1;
       break L21;
      }
     }
     $61 = HEAP8[$__1buf >> 0] | 0;
    }
    $$9 = $61 & 255;
   } while (0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $3 = $this + 48 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if ($__consume) {
   HEAP32[$3 >> 2] = -1;
   HEAP8[$0 >> 0] = 0;
   $$11 = $4;
  } else $$11 = $4;
 }
 STACKTOP = sp;
 return $$11 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $48 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $78 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $x$013 = 0;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $9 = HEAPU8[$1 >> 0] | 0;
 } else $9 = ___shgetc($f) | 0;
 switch ($9 | 0) {
 case 43:
 case 45:
  {
   $11 = ($9 | 0) == 45 & 1;
   $12 = HEAP32[$0 >> 2] | 0;
   if ($12 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $12 + 1;
    $20 = HEAPU8[$12 >> 0] | 0;
   } else $20 = ___shgetc($f) | 0;
   if (($pok | 0) != 0 & ($20 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
    $c$0 = $20;
    $neg$0 = $11;
   } else {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    $c$0 = $20;
    $neg$0 = $11;
   } else {
    $c$0 = $20;
    $neg$0 = $11;
   }
   break;
  }
 default:
  {
   $c$0 = $9;
   $neg$0 = 0;
  }
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
  $98 = -2147483648;
  $99 = 0;
 } else {
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $98 = -2147483648;
  $99 = 0;
 } else {
  $c$112 = $c$0;
  $x$013 = 0;
  while (1) {
   $35 = $c$112 + -48 + ($x$013 * 10 | 0) | 0;
   $36 = HEAP32[$0 >> 2] | 0;
   if ($36 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $36 + 1;
    $c$1$be = HEAPU8[$36 >> 0] | 0;
   } else $c$1$be = ___shgetc($f) | 0;
   if (($c$1$be + -48 | 0) >>> 0 < 10 & ($35 | 0) < 214748364) {
    $c$112 = $c$1$be;
    $x$013 = $35;
   } else {
    $$lcssa22 = $35;
    $c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $48 = (($$lcssa22 | 0) < 0) << 31 >> 31;
  if (($c$1$be$lcssa + -48 | 0) >>> 0 < 10) {
   $53 = $$lcssa22;
   $54 = $48;
   $c$27 = $c$1$be$lcssa;
   while (1) {
    $55 = ___muldi3($53 | 0, $54 | 0, 10, 0) | 0;
    $56 = tempRet0;
    $59 = _i64Add($c$27 | 0, (($c$27 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $61 = _i64Add($59 | 0, tempRet0 | 0, $55 | 0, $56 | 0) | 0;
    $62 = tempRet0;
    $63 = HEAP32[$0 >> 2] | 0;
    if ($63 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $63 + 1;
     $c$2$be = HEAPU8[$63 >> 0] | 0;
    } else $c$2$be = ___shgetc($f) | 0;
    if (($c$2$be + -48 | 0) >>> 0 < 10 & (($62 | 0) < 21474836 | ($62 | 0) == 21474836 & $61 >>> 0 < 2061584302)) {
     $53 = $61;
     $54 = $62;
     $c$27 = $c$2$be;
    } else {
     $92 = $61;
     $93 = $62;
     $c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;
   $93 = $48;
   $c$2$lcssa = $c$1$be$lcssa;
  }
  if (($c$2$lcssa + -48 | 0) >>> 0 < 10) do {
   $78 = HEAP32[$0 >> 2] | 0;
   if ($78 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $78 + 1;
    $c$3$be = HEAPU8[$78 >> 0] | 0;
   } else $c$3$be = ___shgetc($f) | 0;
  } while (($c$3$be + -48 | 0) >>> 0 < 10);
  if (HEAP32[$2 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $91 = ($neg$0 | 0) != 0;
  $94 = _i64Subtract(0, 0, $92 | 0, $93 | 0) | 0;
  $98 = $91 ? tempRet0 : $93;
  $99 = $91 ? $94 : $92;
 }
 tempRet0 = $98;
 return $99 | 0;
}

function __ZNSt3__110__stdinbufIwE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$10 = 0, $$11 = 0, $$9 = 0, $0 = 0, $12 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $45 = 0, $59 = 0, $6 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$0 = 0, $__i6$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa42 = 0, $__nread$044 = 0, $__nread$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $0 = $this + 52 | 0;
 if (!(HEAP8[$0 >> 0] | 0)) {
  $6 = HEAP32[$this + 44 >> 2] | 0;
  $8 = ($6 | 0) > 1 ? $6 : 1;
  $9 = $this + 32 | 0;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) >= ($8 | 0)) {
    label = 8;
    break;
   }
   $12 = _getc(HEAP32[$9 >> 2] | 0) | 0;
   if (($12 | 0) == -1) {
    $$10 = -1;
    break;
   }
   HEAP8[$__extbuf + $__i$0 >> 0] = $12;
   $__i$0 = $__i$0 + 1 | 0;
  }
  if ((label | 0) == 8) {
   do if (!(HEAP8[$this + 53 >> 0] | 0)) {
    $22 = $this + 40 | 0;
    $23 = $this + 36 | 0;
    $24 = $__1buf + 4 | 0;
    $__nread$0 = $8;
    L11 : while (1) {
     $25 = HEAP32[$22 >> 2] | 0;
     $26 = $25;
     $28 = HEAP32[$26 >> 2] | 0;
     $31 = HEAP32[$26 + 4 >> 2] | 0;
     $32 = HEAP32[$23 >> 2] | 0;
     $33 = $__extbuf + $__nread$0 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$32 >> 2] | 0) + 16 >> 2] & 15]($32, $25, $__extbuf, $33, $__enxt, $__1buf, $24, $__inxt) | 0) {
     case 3:
      {
       $__nread$0$lcssa42 = $__nread$0;
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      {
       $__nread$044 = $__nread$0;
       break L11;
      }
     }
     $39 = HEAP32[$22 >> 2] | 0;
     HEAP32[$39 >> 2] = $28;
     HEAP32[$39 + 4 >> 2] = $31;
     if (($__nread$0 | 0) == 8) {
      label = 17;
      break;
     }
     $45 = _getc(HEAP32[$9 >> 2] | 0) | 0;
     if (($45 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$33 >> 0] = $45;
     $__nread$0 = $__nread$0 + 1 | 0;
    }
    if ((label | 0) == 15) {
     HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
     $__nread$044 = $__nread$0$lcssa42;
    } else if ((label | 0) == 17) {
     $$9 = -1;
     break;
    }
    $__nread$3 = $__nread$044;
    label = 18;
   } else {
    HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
    $__nread$3 = $8;
    label = 18;
   } while (0);
   L21 : do if ((label | 0) == 18) {
    if ($__consume) {
     $59 = HEAP32[$__1buf >> 2] | 0;
     HEAP32[$this + 48 >> 2] = $59;
     $$9 = $59;
     break;
    } else $__i6$0 = $__nread$3;
    while (1) {
     if (($__i6$0 | 0) <= 0) break;
     $__i6$0 = $__i6$0 + -1 | 0;
     if ((_ungetc(HEAP8[$__extbuf + $__i6$0 >> 0] | 0, HEAP32[$9 >> 2] | 0) | 0) == -1) {
      $$9 = -1;
      break L21;
     }
    }
    $$9 = HEAP32[$__1buf >> 2] | 0;
   } while (0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $3 = $this + 48 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if ($__consume) {
   HEAP32[$3 >> 2] = -1;
   HEAP8[$0 >> 0] = 0;
   $$11 = $4;
  } else $$11 = $4;
 }
 STACKTOP = sp;
 return $$11 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $13 = 0, $16 = 0, $26 = 0, $28 = 0, $3 = 0, $41 = 0, $42 = 0, $43 = 0, $51 = 0, $54 = 0, $66 = 0, $78 = 0, $79 = 0, $80 = 0, label = 0;
 L1 : while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  do if (!$0) $78 = 1; else {
   $3 = HEAP32[$0 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $78 = 1;
    break;
   } else {
    $78 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $13 = HEAP32[$__e >> 2] | 0;
  do if (!$13) label = 15; else {
   $16 = HEAP32[$13 + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0; else $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0;
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 15;
    break;
   } else if ($78) {
    $79 = $13;
    break;
   } else {
    $$pre$i3$i$i9 = $13;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else $79 = 0;
  }
  $26 = HEAP32[$__b >> 2] | 0;
  $28 = HEAP32[$26 + 12 >> 2] | 0;
  if (($28 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 63]($26) | 0; else $$0$i$i = HEAP32[$28 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i) | 0)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b >> 2] | 0;
  $42 = $41 + 12 | 0;
  $43 = HEAP32[$42 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$41 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 40 >> 2] & 63]($41) | 0;
   continue;
  } else {
   HEAP32[$42 >> 2] = $43 + 4;
   continue;
  }
 }
 $51 = HEAP32[$__b >> 2] | 0;
 do if (!$51) $80 = 1; else {
  $54 = HEAP32[$51 + 12 >> 2] | 0;
  if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 63]($51) | 0; else $$0$i$i$i$i1 = HEAP32[$54 >> 2] | 0;
  if (($$0$i$i$i$i1 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $80 = 1;
   break;
  } else {
   $80 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$$pre$i3$i$i9) label = 37; else {
  $66 = HEAP32[$$pre$i3$i$i9 + 12 >> 2] | 0;
  if (($66 | 0) == (HEAP32[$$pre$i3$i$i9 + 16 >> 2] | 0)) $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i9 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i9) | 0; else $$0$i$i1$i$i7 = HEAP32[$66 >> 2] | 0;
  if (($$0$i$i1$i$i7 | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 37;
   break;
  } else if ($80) break; else {
   label = 39;
   break;
  }
 } while (0);
 if ((label | 0) == 37) if ($80) label = 39;
 if ((label | 0) == 39) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function _wcsrtombs($s, $ws, $n, $st) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa83 = 0, $$5 = 0, $$pn = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $46 = 0, $5 = 0, $7 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 L1 : do if (!$s) {
  $2 = HEAP32[$ws >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  if (!$3) $$0 = 0; else {
   $$0218 = 0;
   $5 = $3;
   $ws2$019 = $2;
   while (1) {
    if ($5 >>> 0 > 127) {
     $7 = _wcrtomb($buf, $5, 0) | 0;
     if (($7 | 0) == -1) {
      $$0 = -1;
      break L1;
     } else $$pn = $7;
    } else $$pn = 1;
    $$13 = $$pn + $$0218 | 0;
    $ws2$019 = $ws2$019 + 4 | 0;
    $5 = HEAP32[$ws2$019 >> 2] | 0;
    if (!$5) {
     $$0 = $$13;
     break;
    } else $$0218 = $$13;
   }
  }
 } else {
  L9 : do if ($n >>> 0 > 3) {
   $$0129 = $s;
   $$2428 = $n;
   $14 = HEAP32[$ws >> 2] | 0;
   while (1) {
    $13 = HEAP32[$14 >> 2] | 0;
    if (($13 + -1 | 0) >>> 0 > 126) {
     if (!$13) {
      $$0129$lcssa = $$0129;
      $$2428$lcssa = $$2428;
      break;
     }
     $19 = _wcrtomb($$0129, $13, 0) | 0;
     if (($19 | 0) == -1) {
      $$0 = -1;
      break L1;
     }
     $$1 = $$0129 + $19 | 0;
     $$35 = $$2428 - $19 | 0;
     $27 = $14;
    } else {
     HEAP8[$$0129 >> 0] = $13;
     $$1 = $$0129 + 1 | 0;
     $$35 = $$2428 + -1 | 0;
     $27 = HEAP32[$ws >> 2] | 0;
    }
    $14 = $27 + 4 | 0;
    HEAP32[$ws >> 2] = $14;
    if ($$35 >>> 0 <= 3) {
     $$01$lcssa = $$1;
     $$24$lcssa = $$35;
     break L9;
    } else {
     $$0129 = $$1;
     $$2428 = $$35;
    }
   }
   HEAP8[$$0129$lcssa >> 0] = 0;
   HEAP32[$ws >> 2] = 0;
   $$0 = $n - $$2428$lcssa | 0;
   break L1;
  } else {
   $$01$lcssa = $s;
   $$24$lcssa = $n;
  } while (0);
  if (!$$24$lcssa) $$0 = $n; else {
   $$223 = $$01$lcssa;
   $$422 = $$24$lcssa;
   $30 = HEAP32[$ws >> 2] | 0;
   while (1) {
    $29 = HEAP32[$30 >> 2] | 0;
    if (($29 + -1 | 0) >>> 0 > 126) {
     if (!$29) {
      $$223$lcssa = $$223;
      $$422$lcssa = $$422;
      label = 19;
      break;
     }
     $35 = _wcrtomb($buf, $29, 0) | 0;
     if (($35 | 0) == -1) {
      $$0 = -1;
      break L1;
     }
     if ($$422 >>> 0 < $35 >>> 0) {
      $$422$lcssa83 = $$422;
      label = 22;
      break;
     }
     _wcrtomb($$223, HEAP32[$30 >> 2] | 0, 0) | 0;
     $$3 = $$223 + $35 | 0;
     $$5 = $$422 - $35 | 0;
     $46 = $30;
    } else {
     HEAP8[$$223 >> 0] = $29;
     $$3 = $$223 + 1 | 0;
     $$5 = $$422 + -1 | 0;
     $46 = HEAP32[$ws >> 2] | 0;
    }
    $30 = $46 + 4 | 0;
    HEAP32[$ws >> 2] = $30;
    if (!$$5) {
     $$0 = $n;
     break L1;
    } else {
     $$223 = $$3;
     $$422 = $$5;
    }
   }
   if ((label | 0) == 19) {
    HEAP8[$$223$lcssa >> 0] = 0;
    HEAP32[$ws >> 2] = 0;
    $$0 = $n - $$422$lcssa | 0;
    break;
   } else if ((label | 0) == 22) {
    $$0 = $n - $$422$lcssa83 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $$byval_copy = sp + 296 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 300 | 0;
 $__nb = sp + 292 | 0;
 $__o = sp + 64 | 0;
 $__op = sp + 60 | 0;
 $__oe = sp + 56 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 48 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 5254245, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
  $19 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0;
  $20 = HEAP32[$__nb >> 2] | 0;
  if (!$20) __ZSt17__throw_bad_allocv(); else {
   $23 = $20;
   $__nbh$sroa$0$0 = $20;
   $__nc$1 = $19;
  }
 } else {
  $23 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$1 = $__nc$0;
 }
 $22 = $23 + $__nc$1 | 0;
 $24 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($23, $22, $__iob) | 0;
 if (($23 | 0) == ($__nar | 0)) {
  $30 = $__nar;
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 0;
 } else {
  $27 = _malloc($__nc$1 << 3) | 0;
  if (!$27) __ZSt17__throw_bad_allocv(); else {
   $30 = $23;
   $__ob$0 = $27;
   $__obh$sroa$0$0 = $27;
  }
 }
 $29 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $29;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($30, $24, $22, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($29) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $32 = HEAP32[$__op >> 2] | 0;
 $33 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $34 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $32, $33, $__iob, $__fl) | 0;
 HEAP32[$__s >> 2] = $34;
 if ($__obh$sroa$0$0 | 0) _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $34 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nbh$sroa$0$0 = 0, $__nc$0 = 0, $__nc$1 = 0, $__o = 0, $__ob$0 = 0, $__obh$sroa$0$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $$byval_copy = sp + 68 | 0;
 $vararg_buffer5 = sp + 32 | 0;
 $vararg_buffer2 = sp + 24 | 0;
 $vararg_buffer = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 130 | 0;
 $__nb = sp + 64 | 0;
 $__o = sp + 72 | 0;
 $__op = sp + 60 | 0;
 $__oe = sp + 56 | 0;
 $0 = sp + 52 | 0;
 $1 = sp + 48 | 0;
 $2 = $__fmt;
 HEAP32[$2 >> 2] = 37;
 HEAP32[$2 + 4 >> 2] = 0;
 $9 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 5254245, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $10 = __ZNSt3__16__clocEv() | 0;
 if ($9) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $__v;
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $10, $__fmt, $vararg_buffer2) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $16 = __ZNSt3__16__clocEv() | 0;
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$__iob + 8 >> 2];
  HEAPF64[$vararg_buffer5 + 8 >> 3] = $__v;
  $19 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $16, $__fmt, $vararg_buffer5) | 0;
  $20 = HEAP32[$__nb >> 2] | 0;
  if (!$20) __ZSt17__throw_bad_allocv(); else {
   $23 = $20;
   $__nbh$sroa$0$0 = $20;
   $__nc$1 = $19;
  }
 } else {
  $23 = HEAP32[$__nb >> 2] | 0;
  $__nbh$sroa$0$0 = 0;
  $__nc$1 = $__nc$0;
 }
 $22 = $23 + $__nc$1 | 0;
 $24 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($23, $22, $__iob) | 0;
 if (($23 | 0) == ($__nar | 0)) {
  $30 = $__nar;
  $__ob$0 = $__o;
  $__obh$sroa$0$0 = 0;
 } else {
  $27 = _malloc($__nc$1 << 1) | 0;
  if (!$27) __ZSt17__throw_bad_allocv(); else {
   $30 = $23;
   $__ob$0 = $27;
   $__obh$sroa$0$0 = $27;
  }
 }
 $29 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $29;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($30, $24, $22, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($29) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $32 = HEAP32[$__op >> 2] | 0;
 $33 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $34 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__ob$0, $32, $33, $__iob, $__fl) | 0;
 _free($__obh$sroa$0$0);
 _free($__nbh$sroa$0$0);
 STACKTOP = sp;
 return $34 | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[3674e3] | 0)) if (___cxa_guard_acquire(3674e3) | 0) {
  if (!(HEAP8[3674008] | 0)) if (___cxa_guard_acquire(3674008) | 0) {
   $9 = 3677624;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 3677912);
   ___cxa_atexit(112, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(3674008);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677624, 3671791) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677636, 3671799) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677648, 3671808) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677660, 3671814) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677672, 3671820) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677684, 3671824) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677696, 3671829) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677708, 3671834) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677720, 3671841) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677732, 3671851) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677744, 3671859) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677756, 3671868) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677768, 3671877) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677780, 3671881) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677792, 3671885) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677804, 3671889) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677816, 3671820) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677828, 3671893) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677840, 3671897) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677852, 3671901) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677864, 3671905) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677876, 3671909) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677888, 3671913) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677900, 3671917) | 0;
  HEAP32[919478] = 3677624;
  ___cxa_guard_release(3674e3);
 }
 return HEAP32[919478] | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[3674080] | 0)) if (___cxa_guard_acquire(3674080) | 0) {
  if (!(HEAP8[3674088] | 0)) if (___cxa_guard_acquire(3674088) | 0) {
   $9 = 3678436;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 3678724);
   ___cxa_atexit(116, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(3674088);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678436, 16660) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678448, 16692) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678460, 16728) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678472, 16752) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678484, 16776) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678496, 16792) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678508, 16812) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678520, 16832) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678532, 16860) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678544, 16900) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678556, 16932) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678568, 16968) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678580, 17004) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678592, 17020) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678604, 17036) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678616, 17052) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678628, 16776) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678640, 17068) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678652, 17084) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678664, 17100) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678676, 17116) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678688, 17132) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678700, 17148) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678712, 17164) | 0;
  HEAP32[919681] = 3678436;
  ___cxa_guard_release(3674080);
 }
 return HEAP32[919681] | 0;
}

function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$0$i = 0, $$0$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $24 = 0, $41 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $60 = 0, $7 = 0, $__bn$i7 = 0, $__buf$i6 = 0, $__i$0$i$i = 0, $__i$0$i$i2 = 0, $__mb$i5 = 0, $__ndflt = 0, $__p$0$i = 0, $__p$0$i10 = 0, $__r$0$i = 0, $__r$0$i8 = 0, $__wn$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $__mb$i5 = sp + 168 | 0;
 $__buf$i6 = sp + 40 | 0;
 $__bn$i7 = sp + 36 | 0;
 $__wn$i = sp + 32 | 0;
 $__ndflt = sp;
 $0 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__ndflt + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = 17864;
 $5 = HEAP8[$__dflt >> 0] | 0;
 $7 = ($5 & 1) == 0;
 $10 = $__dflt + 4 | 0;
 $11 = $7 ? $10 : HEAP32[$__dflt + 8 >> 2] | 0;
 $16 = $11 + (($7 ? ($5 & 255) >>> 1 : HEAP32[$10 >> 2] | 0) << 2) | 0;
 $17 = $__buf$i6 + 32 | 0;
 $$0$i9 = $11;
 $__r$0$i8 = 0;
 while (1) {
  if (!(($__r$0$i8 | 0) != 2 & $$0$i9 >>> 0 < $16 >>> 0)) break;
  HEAP32[$__wn$i >> 2] = $$0$i9;
  $24 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 15]($0, $__mb$i5, $$0$i9, $16, $__wn$i, $__buf$i6, $17, $__bn$i7) | 0;
  $__p$0$i10 = $__buf$i6;
  while (1) {
   if ($__p$0$i10 >>> 0 >= (HEAP32[$__bn$i7 >> 2] | 0) >>> 0) break;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__p$0$i10 >> 0] | 0);
   $__p$0$i10 = $__p$0$i10 + 1 | 0;
  }
  $$0$i9 = HEAP32[$__wn$i >> 2] | 0;
  $__r$0$i8 = $24;
 }
 $41 = _catgets(($__c | 0) == -1 ? -1 : $__c << 1, $__set, $__msgid, (HEAP8[$__ndflt >> 0] & 1) == 0 ? $__ndflt + 1 | 0 : HEAP32[$__ndflt + 8 >> 2] | 0) | 0;
 $__i$0$i$i2 = 0;
 while (1) {
  if (($__i$0$i$i2 | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i2 << 2) >> 2] = 0;
  $__i$0$i$i2 = $__i$0$i$i2 + 1 | 0;
 }
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = 17912;
 $46 = $41 + (_strlen($41) | 0) | 0;
 $47 = $46;
 $48 = $__buf$i6 + 128 | 0;
 $$0$i = $41;
 $__r$0$i = 0;
 while (1) {
  if (!(($__r$0$i | 0) != 2 & $$0$i >>> 0 < $46 >>> 0)) break;
  HEAP32[$__wn$i >> 2] = $$0$i;
  $60 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 15]($1, $__mb$i5, $$0$i, ($47 - $$0$i | 0) > 32 ? $$0$i + 32 | 0 : $46, $__wn$i, $__buf$i6, $48, $__bn$i7) | 0;
  $__p$0$i = $__buf$i6;
  while (1) {
   if ($__p$0$i >>> 0 >= (HEAP32[$__bn$i7 >> 2] | 0) >>> 0) break;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result, HEAP32[$__p$0$i >> 2] | 0);
   $__p$0$i = $__p$0$i + 4 | 0;
  }
  $$0$i = HEAP32[$__wn$i >> 2] | 0;
  $__r$0$i = $60;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 STACKTOP = sp;
 return;
}

function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 $wcs = $wcs | 0;
 $src = $src | 0;
 $n = $n | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$019 = 0, $$02$ = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$214 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $0 = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $23 = 0, $24 = 0, $32 = 0, $37 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $cnt$020 = 0, $cnt$1 = 0, $cnt$215 = 0, $cnt$215$lcssa = 0, $cnt$3 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$010 = 0, $ws$021 = 0, $ws$021$lcssa56 = 0, $ws$1 = 0, $ws$216 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $wbuf = sp + 8 | 0;
 $s = sp;
 $0 = HEAP32[$src >> 2] | 0;
 HEAP32[$s >> 2] = $0;
 $1 = ($wcs | 0) != 0;
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $$cast = $0;
 L1 : do if (($wn$ | 0) != 0 & ($0 | 0) != 0) {
  $$019 = $n;
  $$0218 = $wn$;
  $37 = $$cast;
  $cnt$020 = 0;
  $ws$021 = $wcs$;
  while (1) {
   $4 = $$019 >>> 2;
   $5 = $4 >>> 0 >= $$0218 >>> 0;
   if (!($$019 >>> 0 > 131 | $5)) {
    $$1 = $$019;
    $$24 = $$0218;
    $18 = $37;
    $cnt$1 = $cnt$020;
    $ws$010 = $ws$021;
    break L1;
   }
   $$02$ = $5 ? $$0218 : $4;
   $8 = $$019 - $$02$ | 0;
   $9 = _mbsrtowcs($ws$021, $s, $$02$, $st) | 0;
   if (($9 | 0) == -1) {
    $$lcssa57 = $8;
    $ws$021$lcssa56 = $ws$021;
    break;
   }
   $11 = ($ws$021 | 0) == ($wbuf | 0);
   $13 = $11 ? 0 : $9;
   $$13 = $$0218 - $13 | 0;
   $ws$1 = $11 ? $ws$021 : $ws$021 + ($9 << 2) | 0;
   $14 = $9 + $cnt$020 | 0;
   $15 = HEAP32[$s >> 2] | 0;
   if (($$0218 | 0) != ($13 | 0) & ($15 | 0) != 0) {
    $$019 = $8;
    $$0218 = $$13;
    $37 = $15;
    $cnt$020 = $14;
    $ws$021 = $ws$1;
   } else {
    $$1 = $8;
    $$24 = $$13;
    $18 = $15;
    $cnt$1 = $14;
    $ws$010 = $ws$1;
    break L1;
   }
  }
  $$1 = $$lcssa57;
  $$24 = 0;
  $18 = HEAP32[$s >> 2] | 0;
  $cnt$1 = -1;
  $ws$010 = $ws$021$lcssa56;
 } else {
  $$1 = $n;
  $$24 = $wn$;
  $18 = $$cast;
  $cnt$1 = 0;
  $ws$010 = $wcs$;
 } while (0);
 L8 : do if (!$18) $cnt$3 = $cnt$1; else if (($$24 | 0) != 0 & ($$1 | 0) != 0) {
  $$214 = $$1;
  $$313 = $$24;
  $23 = $18;
  $cnt$215 = $cnt$1;
  $ws$216 = $ws$010;
  while (1) {
   $24 = _mbrtowc($ws$216, $23, $$214, $st) | 0;
   if (($24 + 2 | 0) >>> 0 < 3) {
    $$lcssa = $24;
    $cnt$215$lcssa = $cnt$215;
    break;
   }
   $23 = (HEAP32[$s >> 2] | 0) + $24 | 0;
   HEAP32[$s >> 2] = $23;
   $$313 = $$313 + -1 | 0;
   $32 = $cnt$215 + 1 | 0;
   if (!(($$313 | 0) != 0 & ($$214 | 0) != ($24 | 0))) {
    $cnt$3 = $32;
    break L8;
   } else {
    $$214 = $$214 - $24 | 0;
    $cnt$215 = $32;
    $ws$216 = $ws$216 + 4 | 0;
   }
  }
  switch ($$lcssa | 0) {
  case -1:
   {
    $cnt$3 = -1;
    break L8;
    break;
   }
  case 0:
   {
    HEAP32[$s >> 2] = 0;
    $cnt$3 = $cnt$215$lcssa;
    break L8;
    break;
   }
  default:
   {
    HEAP32[$st >> 2] = 0;
    $cnt$3 = $cnt$215$lcssa;
    break L8;
   }
  }
 } else $cnt$3 = $cnt$1; while (0);
 if ($1) HEAP32[$src >> 2] = HEAP32[$s >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZN8CHANNELS15ChannelDefArrayC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = 0;
 HEAP8[$this + 4 >> 0] = 0;
 HEAP32[$this + 28 >> 2] = 0;
 HEAP32[$this + 32 >> 2] = 0;
 HEAP8[$this + 20 >> 0] = 0;
 HEAP32[$this + 44 >> 2] = 0;
 HEAP32[$this + 48 >> 2] = 0;
 HEAP8[$this + 36 >> 0] = 0;
 HEAP32[$this + 60 >> 2] = 0;
 HEAP32[$this + 64 >> 2] = 0;
 HEAP8[$this + 52 >> 0] = 0;
 HEAP32[$this + 76 >> 2] = 0;
 HEAP32[$this + 80 >> 2] = 0;
 HEAP8[$this + 68 >> 0] = 0;
 HEAP32[$this + 92 >> 2] = 0;
 HEAP32[$this + 96 >> 2] = 0;
 HEAP8[$this + 84 >> 0] = 0;
 HEAP32[$this + 108 >> 2] = 0;
 HEAP32[$this + 112 >> 2] = 0;
 HEAP8[$this + 100 >> 0] = 0;
 HEAP32[$this + 124 >> 2] = 0;
 HEAP32[$this + 128 >> 2] = 0;
 HEAP8[$this + 116 >> 0] = 0;
 HEAP32[$this + 140 >> 2] = 0;
 HEAP32[$this + 144 >> 2] = 0;
 HEAP8[$this + 132 >> 0] = 0;
 HEAP32[$this + 156 >> 2] = 0;
 HEAP32[$this + 160 >> 2] = 0;
 HEAP8[$this + 148 >> 0] = 0;
 HEAP32[$this + 172 >> 2] = 0;
 HEAP32[$this + 176 >> 2] = 0;
 HEAP8[$this + 164 >> 0] = 0;
 HEAP32[$this + 188 >> 2] = 0;
 HEAP32[$this + 192 >> 2] = 0;
 HEAP8[$this + 180 >> 0] = 0;
 HEAP32[$this + 204 >> 2] = 0;
 HEAP32[$this + 208 >> 2] = 0;
 HEAP8[$this + 196 >> 0] = 0;
 HEAP32[$this + 220 >> 2] = 0;
 HEAP32[$this + 224 >> 2] = 0;
 HEAP8[$this + 212 >> 0] = 0;
 HEAP32[$this + 236 >> 2] = 0;
 HEAP32[$this + 240 >> 2] = 0;
 HEAP8[$this + 228 >> 0] = 0;
 HEAP32[$this + 252 >> 2] = 0;
 HEAP32[$this + 256 >> 2] = 0;
 HEAP8[$this + 244 >> 0] = 0;
 HEAP32[$this + 268 >> 2] = 0;
 HEAP32[$this + 272 >> 2] = 0;
 HEAP8[$this + 260 >> 0] = 0;
 HEAP32[$this + 284 >> 2] = 0;
 HEAP32[$this + 288 >> 2] = 0;
 HEAP8[$this + 276 >> 0] = 0;
 HEAP32[$this + 300 >> 2] = 0;
 HEAP32[$this + 304 >> 2] = 0;
 HEAP8[$this + 292 >> 0] = 0;
 HEAP32[$this + 316 >> 2] = 0;
 HEAP32[$this + 320 >> 2] = 0;
 HEAP8[$this + 308 >> 0] = 0;
 HEAP32[$this + 332 >> 2] = 0;
 HEAP32[$this + 336 >> 2] = 0;
 HEAP8[$this + 324 >> 0] = 0;
 HEAP32[$this + 348 >> 2] = 0;
 HEAP32[$this + 352 >> 2] = 0;
 HEAP8[$this + 340 >> 0] = 0;
 HEAP32[$this + 364 >> 2] = 0;
 HEAP32[$this + 368 >> 2] = 0;
 HEAP8[$this + 356 >> 0] = 0;
 HEAP32[$this + 380 >> 2] = 0;
 HEAP32[$this + 384 >> 2] = 0;
 HEAP8[$this + 372 >> 0] = 0;
 HEAP32[$this + 396 >> 2] = 0;
 HEAP32[$this + 400 >> 2] = 0;
 HEAP8[$this + 388 >> 0] = 0;
 HEAP32[$this + 412 >> 2] = 0;
 HEAP32[$this + 416 >> 2] = 0;
 HEAP8[$this + 404 >> 0] = 0;
 HEAP32[$this + 428 >> 2] = 0;
 HEAP32[$this + 432 >> 2] = 0;
 HEAP8[$this + 420 >> 0] = 0;
 HEAP32[$this + 444 >> 2] = 0;
 HEAP32[$this + 448 >> 2] = 0;
 HEAP8[$this + 436 >> 0] = 0;
 HEAP32[$this + 460 >> 2] = 0;
 HEAP32[$this + 464 >> 2] = 0;
 HEAP8[$this + 452 >> 0] = 0;
 HEAP32[$this + 476 >> 2] = 0;
 HEAP32[$this + 480 >> 2] = 0;
 HEAP8[$this + 468 >> 0] = 0;
 HEAP32[$this + 492 >> 2] = 0;
 HEAP32[$this + 496 >> 2] = 0;
 HEAP8[$this + 484 >> 0] = 0;
 HEAP32[$this + 508 >> 2] = 0;
 HEAP32[$this + 512 >> 2] = 0;
 HEAP8[$this + 500 >> 0] = 0;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $27 = 0, $29 = 0, $46 = 0, $47 = 0, $48 = 0, $56 = 0, $68 = 0, $69 = 0, $83 = 0, label = 0;
 $0 = $__ct + 8 | 0;
 L1 : while (1) {
  $1 = HEAP32[$__b >> 2] | 0;
  do if (!$1) $13 = 0; else if ((HEAP32[$1 + 12 >> 2] | 0) == (HEAP32[$1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] & 63]($1) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $13 = 0;
   break;
  } else {
   $13 = HEAP32[$__b >> 2] | 0;
   break;
  } else $13 = $1; while (0);
  $14 = ($13 | 0) == 0;
  $15 = HEAP32[$__e >> 2] | 0;
  do if (!$15) label = 12; else {
   if ((HEAP32[$15 + 12 >> 2] | 0) != (HEAP32[$15 + 16 >> 2] | 0)) if ($14) {
    $83 = $15;
    break;
   } else {
    $$pre$i2$i$i6 = $15;
    break L1;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$15 >> 2] | 0) + 36 >> 2] & 63]($15) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 12;
    break;
   } else if ($14) {
    $83 = $15;
    break;
   } else {
    $$pre$i2$i$i6 = $15;
    break L1;
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ($14) {
    $$pre$i2$i$i6 = 0;
    break;
   } else $83 = 0;
  }
  $27 = HEAP32[$__b >> 2] | 0;
  $29 = HEAP32[$27 + 12 >> 2] | 0;
  if (($29 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 63]($27) | 0; else $$0$i$i = HEAPU8[$29 >> 0] | 0;
  if (($$0$i$i & 255) << 24 >> 24 <= -1) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  if (!(HEAP16[(HEAP32[$0 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b >> 2] | 0;
  $47 = $46 + 12 | 0;
  $48 = HEAP32[$47 >> 2] | 0;
  if (($48 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 63]($46) | 0;
   continue;
  } else {
   HEAP32[$47 >> 2] = $48 + 1;
   continue;
  }
 }
 $56 = HEAP32[$__b >> 2] | 0;
 do if (!$56) $68 = 0; else if ((HEAP32[$56 + 12 >> 2] | 0) == (HEAP32[$56 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 36 >> 2] & 63]($56) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $68 = 0;
  break;
 } else {
  $68 = HEAP32[$__b >> 2] | 0;
  break;
 } else $68 = $56; while (0);
 $69 = ($68 | 0) == 0;
 do if (!$$pre$i2$i$i6) label = 32; else {
  if ((HEAP32[$$pre$i2$i$i6 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i6 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i6) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 32;
   break;
  }
  if (!$69) label = 33;
 } while (0);
 if ((label | 0) == 32) if ($69) label = 33;
 if ((label | 0) == 33) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i2$i$i611 = 0, $0 = 0, $12 = 0, $13 = 0, $14 = 0, $28 = 0, $30 = 0, $48 = 0, $49 = 0, $50 = 0, $60 = 0, $70 = 0, $71 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $12 = 0; else if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $12 = 0;
  break;
 } else {
  $12 = HEAP32[$__b >> 2] | 0;
  break;
 } else $12 = $0; while (0);
 $13 = ($12 | 0) == 0;
 $14 = HEAP32[$__e >> 2] | 0;
 do if (!$14) label = 11; else {
  if ((HEAP32[$14 + 12 >> 2] | 0) == (HEAP32[$14 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 63]($14) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 11;
   break;
  }
  if ($13) {
   $$pre$i2$i$i611 = $14;
   label = 13;
  } else label = 12;
 } while (0);
 if ((label | 0) == 11) if ($13) label = 12; else {
  $$pre$i2$i$i611 = 0;
  label = 13;
 }
 L16 : do if ((label | 0) == 12) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 13) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; else $$0$i$i = HEAPU8[$30 >> 0] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $$0$i$i & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $48 = HEAP32[$__b >> 2] | 0;
  $49 = $48 + 12 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  if (($50 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 40 >> 2] & 63]($48) | 0;
   $$pre = HEAP32[$__b >> 2] | 0;
   if (!$$pre) $70 = 0; else {
    $60 = $$pre;
    label = 21;
   }
  } else {
   HEAP32[$49 >> 2] = $50 + 1;
   $60 = $48;
   label = 21;
  }
  do if ((label | 0) == 21) if ((HEAP32[$60 + 12 >> 2] | 0) == (HEAP32[$60 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 63]($60) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $70 = 0;
   break;
  } else {
   $70 = HEAP32[$__b >> 2] | 0;
   break;
  } else $70 = $60; while (0);
  $71 = ($70 | 0) == 0;
  do if (!$$pre$i2$i$i611) label = 30; else {
   if ((HEAP32[$$pre$i2$i$i611 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i611 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i611 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i611) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 30;
    break;
   }
   if ($71) break L16;
  } while (0);
  if ((label | 0) == 30) if (!$71) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$2 = 0, $$pre2 = 0, $10 = 0, $12 = 0, $17 = 0, $24 = 0, $35 = 0, $38 = 0, $40 = 0, $50 = 0, $55 = 0, $6 = 0, $66 = 0, $72 = 0, $77 = 0, $8 = 0, $80 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre2 = $to_end;
 if (!($mode & 2)) label = 4; else if (($$pre2 - $to | 0) < 3) $$2 = 1; else {
  HEAP32[$to_nxt >> 2] = $to + 1;
  HEAP8[$to >> 0] = -17;
  $6 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $6 + 1;
  HEAP8[$6 >> 0] = -69;
  $8 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $8 + 1;
  HEAP8[$8 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $10 = HEAP32[$frm_nxt >> 2] | 0;
  while (1) {
   if ($10 >>> 0 >= $frm_end >>> 0) {
    $$2 = 0;
    break L4;
   }
   $12 = HEAP32[$10 >> 2] | 0;
   if ($12 >>> 0 > $Maxcode >>> 0 | ($12 & -2048 | 0) == 55296) {
    $$2 = 2;
    break L4;
   }
   do if ($12 >>> 0 < 128) {
    $17 = HEAP32[$to_nxt >> 2] | 0;
    if (($$pre2 - $17 | 0) < 1) {
     $$2 = 1;
     break L4;
    }
    HEAP32[$to_nxt >> 2] = $17 + 1;
    HEAP8[$17 >> 0] = $12;
   } else {
    if ($12 >>> 0 < 2048) {
     $24 = HEAP32[$to_nxt >> 2] | 0;
     if (($$pre2 - $24 | 0) < 2) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $24 + 1;
     HEAP8[$24 >> 0] = $12 >>> 6 | 192;
     $35 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $35 + 1;
     HEAP8[$35 >> 0] = $12 & 63 | 128;
     break;
    }
    $38 = HEAP32[$to_nxt >> 2] | 0;
    $40 = $$pre2 - $38 | 0;
    if ($12 >>> 0 < 65536) {
     if (($40 | 0) < 3) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $38 + 1;
     HEAP8[$38 >> 0] = $12 >>> 12 | 224;
     $50 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $50 + 1;
     HEAP8[$50 >> 0] = $12 >>> 6 & 63 | 128;
     $55 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $55 + 1;
     HEAP8[$55 >> 0] = $12 & 63 | 128;
     break;
    } else {
     if (($40 | 0) < 4) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $38 + 1;
     HEAP8[$38 >> 0] = $12 >>> 18 | 240;
     $66 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $66 + 1;
     HEAP8[$66 >> 0] = $12 >>> 12 & 63 | 128;
     $72 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $72 + 1;
     HEAP8[$72 >> 0] = $12 >>> 6 & 63 | 128;
     $77 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $77 + 1;
     HEAP8[$77 >> 0] = $12 & 63 | 128;
     break;
    }
   } while (0);
   $80 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
   HEAP32[$frm_nxt >> 2] = $80;
   $10 = $80;
  }
 } while (0);
 return $$2 | 0;
}

function _pop_arg_257($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $105 = 0, $106 = 0.0, $112 = 0, $113 = 0.0, $13 = 0, $14 = 0, $17 = 0, $26 = 0, $27 = 0, $28 = 0, $37 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $56 = 0, $59 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $79 = 0, $80 = 0, $82 = 0, $85 = 0, $94 = 0, $95 = 0, $96 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $6 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $7 = HEAP32[$6 >> 2] | 0;
   HEAP32[$ap >> 2] = $6 + 4;
   HEAP32[$arg >> 2] = $7;
   break L1;
   break;
  }
 case 10:
  {
   $13 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $14 = HEAP32[$13 >> 2] | 0;
   HEAP32[$ap >> 2] = $13 + 4;
   $17 = $arg;
   HEAP32[$17 >> 2] = $14;
   HEAP32[$17 + 4 >> 2] = (($14 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $26 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $27 = HEAP32[$26 >> 2] | 0;
   HEAP32[$ap >> 2] = $26 + 4;
   $28 = $arg;
   HEAP32[$28 >> 2] = $27;
   HEAP32[$28 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $37 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $38 = $37;
   $40 = HEAP32[$38 >> 2] | 0;
   $43 = HEAP32[$38 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $37 + 8;
   $44 = $arg;
   HEAP32[$44 >> 2] = $40;
   HEAP32[$44 + 4 >> 2] = $43;
   break L1;
   break;
  }
 case 13:
  {
   $53 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $54 = HEAP32[$53 >> 2] | 0;
   HEAP32[$ap >> 2] = $53 + 4;
   $56 = ($54 & 65535) << 16 >> 16;
   $59 = $arg;
   HEAP32[$59 >> 2] = $56;
   HEAP32[$59 + 4 >> 2] = (($56 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $68 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $69 = HEAP32[$68 >> 2] | 0;
   HEAP32[$ap >> 2] = $68 + 4;
   $70 = $arg;
   HEAP32[$70 >> 2] = $69 & 65535;
   HEAP32[$70 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $79 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $80 = HEAP32[$79 >> 2] | 0;
   HEAP32[$ap >> 2] = $79 + 4;
   $82 = ($80 & 255) << 24 >> 24;
   $85 = $arg;
   HEAP32[$85 >> 2] = $82;
   HEAP32[$85 + 4 >> 2] = (($82 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $94 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $95 = HEAP32[$94 >> 2] | 0;
   HEAP32[$ap >> 2] = $94 + 4;
   $96 = $arg;
   HEAP32[$96 >> 2] = $95 & 255;
   HEAP32[$96 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $105 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $106 = +HEAPF64[$105 >> 3];
   HEAP32[$ap >> 2] = $105 + 8;
   HEAPF64[$arg >> 3] = $106;
   break L1;
   break;
  }
 case 18:
  {
   $112 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $113 = +HEAPF64[$112 >> 3];
   HEAP32[$ap >> 2] = $112 + 8;
   HEAPF64[$arg >> 3] = $113;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $20 = 0, $25 = 0, $3 = 0, $34 = 0, $36 = 0, $38 = 0, $49 = 0, $5 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iovs = sp + 32 | 0;
 $0 = $f + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$iovs >> 2] = $1;
 $3 = $f + 20 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) - $1 | 0;
 HEAP32[$iovs + 4 >> 2] = $5;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $9 = $f + 60 | 0;
 $10 = $f + 44 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $5 + $len | 0;
 while (1) {
  if (!(HEAP32[918945] | 0)) {
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $iov$0;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $iovcnt$0;
   $cnt$0 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
  } else {
   _pthread_cleanup_push(106, $f | 0);
   HEAP32[$vararg_buffer >> 2] = HEAP32[$9 >> 2];
   HEAP32[$vararg_buffer + 4 >> 2] = $iov$0;
   HEAP32[$vararg_buffer + 8 >> 2] = $iovcnt$0;
   $15 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  if (($rem$0 | 0) == ($cnt$0 | 0)) {
   label = 6;
   break;
  }
  if (($cnt$0 | 0) < 0) {
   $iov$0$lcssa11 = $iov$0;
   $iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = $rem$0 - $cnt$0 | 0;
  $36 = HEAP32[$iov$0 + 4 >> 2] | 0;
  if ($cnt$0 >>> 0 > $36 >>> 0) {
   $38 = HEAP32[$10 >> 2] | 0;
   HEAP32[$0 >> 2] = $38;
   HEAP32[$3 >> 2] = $38;
   $49 = HEAP32[$iov$0 + 12 >> 2] | 0;
   $cnt$1 = $cnt$0 - $36 | 0;
   $iov$1 = $iov$0 + 8 | 0;
   $iovcnt$1 = $iovcnt$0 + -1 | 0;
  } else if (($iovcnt$0 | 0) == 2) {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $cnt$0;
   $49 = $36;
   $cnt$1 = $cnt$0;
   $iov$1 = $iov$0;
   $iovcnt$1 = 2;
  } else {
   $49 = $36;
   $cnt$1 = $cnt$0;
   $iov$1 = $iov$0;
   $iovcnt$1 = $iovcnt$0;
  }
  HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$1;
  HEAP32[$iov$1 + 4 >> 2] = $49 - $cnt$1;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$1;
  $rem$0 = $34;
 }
 if ((label | 0) == 6) {
  $20 = HEAP32[$10 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $20 + (HEAP32[$f + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$0 >> 2] = $25;
  HEAP32[$3 >> 2] = $25;
  $$0 = $len;
 } else if ((label | 0) == 8) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$0$lcssa12 | 0) == 2) $$0 = 0; else $$0 = $len - (HEAP32[$iov$0$lcssa11 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 $dst = $dst | 0;
 $wcs = $wcs | 0;
 $wn = $wn | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$019 = 0, $$02$$0 = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$214 = 0, $$24 = 0, $$313 = 0, $$cast = 0, $$lcssa = 0, $$lcssa57 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $23 = 0, $24 = 0, $33 = 0, $38 = 0, $4 = 0, $7 = 0, $8 = 0, $buf = 0, $cnt$020 = 0, $cnt$1 = 0, $cnt$215 = 0, $cnt$215$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $s$010 = 0, $s$021 = 0, $s$021$lcssa56 = 0, $s$1 = 0, $s$216 = 0, $ws = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $buf = sp + 8 | 0;
 $ws = sp;
 $0 = HEAP32[$wcs >> 2] | 0;
 HEAP32[$ws >> 2] = $0;
 $1 = ($dst | 0) != 0;
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $$cast = $0;
 L1 : do if (($n$ | 0) != 0 & ($0 | 0) != 0) {
  $$019 = $wn;
  $$0218 = $n$;
  $38 = $$cast;
  $cnt$020 = 0;
  $s$021 = $dst$;
  while (1) {
   $4 = $$019 >>> 0 >= $$0218 >>> 0;
   if (!($4 | $$019 >>> 0 > 32)) {
    $$1 = $$019;
    $$24 = $$0218;
    $17 = $38;
    $cnt$1 = $cnt$020;
    $s$010 = $s$021;
    break L1;
   }
   $$02$$0 = $4 ? $$0218 : $$019;
   $7 = $$019 - $$02$$0 | 0;
   $8 = _wcsrtombs($s$021, $ws, $$02$$0, 0) | 0;
   if (($8 | 0) == -1) {
    $$lcssa57 = $7;
    $s$021$lcssa56 = $s$021;
    break;
   }
   $10 = ($s$021 | 0) == ($buf | 0);
   $12 = $10 ? 0 : $8;
   $$13 = $$0218 - $12 | 0;
   $s$1 = $10 ? $s$021 : $s$021 + $8 | 0;
   $13 = $8 + $cnt$020 | 0;
   $14 = HEAP32[$ws >> 2] | 0;
   if (($$0218 | 0) != ($12 | 0) & ($14 | 0) != 0) {
    $$019 = $7;
    $$0218 = $$13;
    $38 = $14;
    $cnt$020 = $13;
    $s$021 = $s$1;
   } else {
    $$1 = $7;
    $$24 = $$13;
    $17 = $14;
    $cnt$1 = $13;
    $s$010 = $s$1;
    break L1;
   }
  }
  $$1 = $$lcssa57;
  $$24 = 0;
  $17 = HEAP32[$ws >> 2] | 0;
  $cnt$1 = -1;
  $s$010 = $s$021$lcssa56;
 } else {
  $$1 = $wn;
  $$24 = $n$;
  $17 = $$cast;
  $cnt$1 = 0;
  $s$010 = $dst$;
 } while (0);
 L8 : do if (!$17) $cnt$3 = $cnt$1; else if (($$24 | 0) != 0 & ($$1 | 0) != 0) {
  $$214 = $$1;
  $$313 = $$24;
  $23 = $17;
  $cnt$215 = $cnt$1;
  $s$216 = $s$010;
  while (1) {
   $24 = _wcrtomb($s$216, HEAP32[$23 >> 2] | 0, 0) | 0;
   if (($24 + 1 | 0) >>> 0 < 2) {
    $$lcssa = $24;
    $cnt$215$lcssa = $cnt$215;
    break;
   }
   $23 = (HEAP32[$ws >> 2] | 0) + 4 | 0;
   HEAP32[$ws >> 2] = $23;
   $$214 = $$214 + -1 | 0;
   $33 = $cnt$215 + 1 | 0;
   if (!(($$313 | 0) != ($24 | 0) & ($$214 | 0) != 0)) {
    $cnt$3 = $33;
    break L8;
   } else {
    $$313 = $$313 - $24 | 0;
    $cnt$215 = $33;
    $s$216 = $s$216 + $24 | 0;
   }
  }
  if (!$$lcssa) {
   HEAP32[$ws >> 2] = 0;
   $cnt$3 = $cnt$215$lcssa;
  } else $cnt$3 = -1;
 } else $cnt$3 = $cnt$1; while (0);
 if ($1) HEAP32[$wcs >> 2] = HEAP32[$ws >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $35 = 0, $4 = 0, $47 = 0, $50 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 do if ($1) {
  $4 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0);
  if (!$4) if ((HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0)) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $4 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $10 = HEAP8[$__grouping >> 0] | 0;
  if (($__ct | 0) == ($__thousands_sep | 0) ? ((($10 & 1) == 0 ? ($10 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) != 0 : 0) {
   $20 = HEAP32[$__g_end >> 2] | 0;
   if (($20 - $__g | 0) >= 160) {
    $$1 = 0;
    break;
   }
   $25 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $20 + 4;
   HEAP32[$20 >> 2] = $25;
   HEAP32[$__dc >> 2] = 0;
   $$1 = 0;
   break;
  }
  $27 = $__atoms + 104 | 0;
  $$0$i = $__atoms;
  while (1) {
   if (($$0$i | 0) == ($27 | 0)) {
    $$0$lcssa$i = $27;
    break;
   }
   if ((HEAP32[$$0$i >> 2] | 0) == ($__ct | 0)) {
    $$0$lcssa$i = $$0$i;
    break;
   }
   $$0$i = $$0$i + 4 | 0;
  }
  $34 = $$0$lcssa$i - $__atoms | 0;
  $35 = $34 >> 2;
  if (($34 | 0) > 92) $$1 = -1; else {
   switch ($__base | 0) {
   case 10:
   case 8:
    {
     if (($35 | 0) >= ($__base | 0)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($34 | 0) >= 88) {
      if ($1) {
       $$1 = -1;
       break L6;
      }
      if (($0 - $__a | 0) >= 3) {
       $$1 = -1;
       break L6;
      }
      if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$__dc >> 2] = 0;
      $47 = HEAP8[3671184 + $35 >> 0] | 0;
      HEAP32[$__a_end >> 2] = $0 + 1;
      HEAP8[$0 >> 0] = $47;
      $$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $50 = HEAP8[3671184 + $35 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $50;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $$1 = 0;
  }
 } while (0);
 return $$1 | 0;
}

function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $4 = 0, $46 = 0, $49 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 do if ($1) {
  $4 = (HEAP8[$__atoms + 24 >> 0] | 0) == $__ct << 24 >> 24;
  if (!$4) if ((HEAP8[$__atoms + 25 >> 0] | 0) != $__ct << 24 >> 24) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $4 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $10 = HEAP8[$__grouping >> 0] | 0;
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24 ? ((($10 & 1) == 0 ? ($10 & 255) >>> 1 : HEAP32[$__grouping + 4 >> 2] | 0) | 0) != 0 : 0) {
   $20 = HEAP32[$__g_end >> 2] | 0;
   if (($20 - $__g | 0) >= 160) {
    $$1 = 0;
    break;
   }
   $25 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $20 + 4;
   HEAP32[$20 >> 2] = $25;
   HEAP32[$__dc >> 2] = 0;
   $$1 = 0;
   break;
  }
  $27 = $__atoms + 26 | 0;
  $$0$i = $__atoms;
  while (1) {
   if (($$0$i | 0) == ($27 | 0)) {
    $$0$lcssa$i = $27;
    break;
   }
   if ((HEAP8[$$0$i >> 0] | 0) == $__ct << 24 >> 24) {
    $$0$lcssa$i = $$0$i;
    break;
   }
   $$0$i = $$0$i + 1 | 0;
  }
  $34 = $$0$lcssa$i - $__atoms | 0;
  if (($34 | 0) > 23) $$1 = -1; else {
   switch ($__base | 0) {
   case 10:
   case 8:
    {
     if (($34 | 0) >= ($__base | 0)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($34 | 0) >= 22) {
      if ($1) {
       $$1 = -1;
       break L6;
      }
      if (($0 - $__a | 0) >= 3) {
       $$1 = -1;
       break L6;
      }
      if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$__dc >> 2] = 0;
      $46 = HEAP8[3671184 + $34 >> 0] | 0;
      HEAP32[$__a_end >> 2] = $0 + 1;
      HEAP8[$0 >> 0] = $46;
      $$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $49 = HEAP8[3671184 + $34 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $49;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $$1 = 0;
  }
 } while (0);
 return $$1 | 0;
}

function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $18 = 0, $2 = 0, $31 = 0, $41 = 0, $8 = 0;
 $0 = HEAP32[2889] | 0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(3677012, $0, 3677068);
 HEAP32[919083] = 15516;
 HEAP32[919085] = 15536;
 HEAP32[919084] = 0;
 __ZNSt3__18ios_base4initEPv(3676340, 3677012);
 HEAP32[919103] = 0;
 HEAP32[919104] = -1;
 $1 = HEAP32[2859] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(3677116, $1, 3677076);
 HEAP32[919105] = 15596;
 HEAP32[919106] = 15616;
 __ZNSt3__18ios_base4initEPv(3676424, 3677116);
 HEAP32[919124] = 0;
 HEAP32[919125] = -1;
 $2 = HEAP32[2830] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(3677164, $2, 3677084);
 HEAP32[919126] = 15596;
 HEAP32[919127] = 15616;
 __ZNSt3__18ios_base4initEPv(3676508, 3677164);
 HEAP32[919145] = 0;
 HEAP32[919146] = -1;
 $8 = HEAP32[3676504 + (HEAP32[(HEAP32[919126] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[919147] = 15596;
 HEAP32[919148] = 15616;
 __ZNSt3__18ios_base4initEPv(3676592, $8);
 HEAP32[919166] = 0;
 HEAP32[919167] = -1;
 HEAP32[3676332 + (HEAP32[(HEAP32[919083] | 0) + -12 >> 2] | 0) + 72 >> 2] = 3676420;
 $18 = 3676504 + (HEAP32[(HEAP32[919126] | 0) + -12 >> 2] | 0) + 4 | 0;
 HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | 8192;
 HEAP32[3676504 + (HEAP32[(HEAP32[919126] | 0) + -12 >> 2] | 0) + 72 >> 2] = 3676420;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(3677212, $0, 3677092);
 HEAP32[919168] = 15556;
 HEAP32[919170] = 15576;
 HEAP32[919169] = 0;
 __ZNSt3__18ios_base4initEPv(3676680, 3677212);
 HEAP32[919188] = 0;
 HEAP32[919189] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(3677268, $1, 3677100);
 HEAP32[919190] = 15636;
 HEAP32[919191] = 15656;
 __ZNSt3__18ios_base4initEPv(3676764, 3677268);
 HEAP32[919209] = 0;
 HEAP32[919210] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(3677316, $2, 3677108);
 HEAP32[919211] = 15636;
 HEAP32[919212] = 15656;
 __ZNSt3__18ios_base4initEPv(3676848, 3677316);
 HEAP32[919230] = 0;
 HEAP32[919231] = -1;
 $31 = HEAP32[3676844 + (HEAP32[(HEAP32[919211] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[919232] = 15636;
 HEAP32[919233] = 15656;
 __ZNSt3__18ios_base4initEPv(3676932, $31);
 HEAP32[919251] = 0;
 HEAP32[919252] = -1;
 HEAP32[3676672 + (HEAP32[(HEAP32[919168] | 0) + -12 >> 2] | 0) + 72 >> 2] = 3676760;
 $41 = 3676844 + (HEAP32[(HEAP32[919211] | 0) + -12 >> 2] | 0) + 4 | 0;
 HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 8192;
 HEAP32[3676844 + (HEAP32[(HEAP32[919211] | 0) + -12 >> 2] | 0) + 72 >> 2] = 3676760;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $32 = 0, $4 = 0, $__lv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy2 = sp + 48 | 0;
 $$byval_copy = sp + 24 | 0;
 $__lv = sp + 16 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $11 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
  HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2];
  $14 = FUNCTION_TABLE_iiiiiii[$11 & 63]($this, $$byval_copy, $$byval_copy2, $__iob, $__err, $__lv) | 0;
  HEAP32[$__b >> 2] = $14;
  switch (HEAP32[$__lv >> 2] | 0) {
  case 0:
   {
    HEAP8[$__v >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$__v >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$__v >> 0] = 1;
    HEAP32[$__err >> 2] = 4;
   }
  }
  $$sroa$01$0 = $14;
 } else {
  $16 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$2 >> 2] = $16;
  $17 = __ZNKSt3__16locale9use_facetERNS0_2idE($2, 3677412) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($16) | 0;
  $18 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$3 >> 2] = $18;
  $19 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 3677420) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($18) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 24 >> 2] & 63]($$byval_copy, $19);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 28 >> 2] & 63]($$byval_copy + 12 | 0, $19);
  HEAP32[$4 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2];
  HEAP8[$__v >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy2, $$byval_copy, $$byval_copy + 24 | 0, $17, $__err, 1) | 0) == ($$byval_copy | 0) & 1;
  $32 = HEAP32[$__b >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy + 12 | 0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
  $$sroa$01$0 = $32;
 }
 STACKTOP = sp;
 return $$sroa$01$0 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $$sroa$01$0 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $32 = 0, $4 = 0, $__lv = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy2 = sp + 48 | 0;
 $$byval_copy = sp + 24 | 0;
 $__lv = sp + 16 | 0;
 $0 = sp + 20 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $11 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
  HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$1 >> 2];
  $14 = FUNCTION_TABLE_iiiiiii[$11 & 63]($this, $$byval_copy, $$byval_copy2, $__iob, $__err, $__lv) | 0;
  HEAP32[$__b >> 2] = $14;
  switch (HEAP32[$__lv >> 2] | 0) {
  case 0:
   {
    HEAP8[$__v >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$__v >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$__v >> 0] = 1;
    HEAP32[$__err >> 2] = 4;
   }
  }
  $$sroa$01$0 = $14;
 } else {
  $16 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$2 >> 2] = $16;
  $17 = __ZNKSt3__16locale9use_facetERNS0_2idE($2, 3677380) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($16) | 0;
  $18 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$3 >> 2] = $18;
  $19 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 3677392) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($18) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 24 >> 2] & 63]($$byval_copy, $19);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 28 >> 2] & 63]($$byval_copy + 12 | 0, $19);
  HEAP32[$4 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy2 >> 2] = HEAP32[$4 >> 2];
  HEAP8[$__v >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy2, $$byval_copy, $$byval_copy + 24 | 0, $17, $__err, 1) | 0) == ($$byval_copy | 0) & 1;
  $32 = HEAP32[$__b >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy + 12 | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
  $$sroa$01$0 = $32;
 }
 STACKTOP = sp;
 return $$sroa$01$0 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0;
 $0 = $c & 255;
 $4 = ($n | 0) != 0;
 L1 : do if ($4 & ($src & 3 | 0) != 0) {
  $5 = $c & 255;
  $$019 = $n;
  $s$020 = $src;
  while (1) {
   if ((HEAP8[$s$020 >> 0] | 0) == $5 << 24 >> 24) {
    $$0$lcssa30 = $$019;
    $s$0$lcssa29 = $s$020;
    label = 6;
    break L1;
   }
   $8 = $s$020 + 1 | 0;
   $9 = $$019 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if ($13 & ($8 & 3 | 0) != 0) {
    $$019 = $9;
    $s$020 = $8;
   } else {
    $$0$lcssa = $9;
    $$lcssa = $13;
    $s$0$lcssa = $8;
    label = 5;
    break;
   }
  }
 } else {
  $$0$lcssa = $n;
  $$lcssa = $4;
  $s$0$lcssa = $src;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$0$lcssa30 = $$0$lcssa;
  $s$0$lcssa29 = $s$0$lcssa;
  label = 6;
 } else {
  $$3 = 0;
  $s$2 = $s$0$lcssa;
 }
 L8 : do if ((label | 0) == 6) {
  $15 = $c & 255;
  if ((HEAP8[$s$0$lcssa29 >> 0] | 0) == $15 << 24 >> 24) {
   $$3 = $$0$lcssa30;
   $s$2 = $s$0$lcssa29;
  } else {
   $17 = Math_imul($0, 16843009) | 0;
   L11 : do if ($$0$lcssa30 >>> 0 > 3) {
    $$110 = $$0$lcssa30;
    $w$011 = $s$0$lcssa29;
    while (1) {
     $20 = HEAP32[$w$011 >> 2] ^ $17;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009 | 0) {
      $$110$lcssa = $$110;
      $w$011$lcssa = $w$011;
      break;
     }
     $26 = $w$011 + 4 | 0;
     $27 = $$110 + -4 | 0;
     if ($27 >>> 0 > 3) {
      $$110 = $27;
      $w$011 = $26;
     } else {
      $$1$lcssa = $27;
      $w$0$lcssa = $26;
      label = 11;
      break L11;
     }
    }
    $$24 = $$110$lcssa;
    $s$15 = $w$011$lcssa;
   } else {
    $$1$lcssa = $$0$lcssa30;
    $w$0$lcssa = $s$0$lcssa29;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$1$lcssa) {
    $$3 = 0;
    $s$2 = $w$0$lcssa;
    break;
   } else {
    $$24 = $$1$lcssa;
    $s$15 = $w$0$lcssa;
   }
   while (1) {
    if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
     $$3 = $$24;
     $s$2 = $s$15;
     break L8;
    }
    $32 = $s$15 + 1 | 0;
    $$24 = $$24 + -1 | 0;
    if (!$$24) {
     $$3 = 0;
     $s$2 = $32;
     break;
    } else $s$15 = $32;
   }
  }
 } while (0);
 return ($$3 | 0 ? $s$2 : 0) | 0;
}

function __ZN12Front_JS_SDL8draw_bmpERK4RectRK6Bitmap($this, $drect, $bitmap) {
 $this = $this | 0;
 $drect = $drect | 0;
 $bitmap = $bitmap | 0;
 var $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $39 = 0, $49 = 0, $51 = 0, $52 = 0, $58 = 0, $60 = 0, $66 = 0, $74 = 0, $76 = 0, $8 = 0, $bitmapBpp = 0, $x$04$us = 0, $y$05 = 0, $y$05$us = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $bitmapBpp = sp;
 __ZN6BitmapC2EhRKS_($bitmapBpp, 32, $bitmap);
 $0 = HEAP32[$bitmapBpp >> 2] | 0;
 $1 = HEAP16[$0 >> 1] | 0;
 $2 = $this + 52 | 0;
 $8 = (HEAPU16[$2 >> 1] | 0) - (HEAPU16[$drect >> 1] | 0) & 65535;
 $10 = HEAP16[$drect + 4 >> 1] | 0;
 $12 = $10 << 16 >> 16 < $8 << 16 >> 16 ? $10 : $8;
 $14 = $12 << 16 >> 16 < $1 << 16 >> 16 ? $12 : $1;
 $16 = HEAP32[$0 + 16 >> 2] | 0;
 $17 = $this + 5820 | 0;
 _SDL_LockSurface(HEAP32[$17 >> 2] | 0) | 0;
 $19 = $drect + 6 | 0;
 $20 = HEAP16[$19 >> 1] | 0;
 L1 : do if ($20 << 16 >> 16) {
  $25 = $20 & 65535;
  $26 = $14 << 16 >> 16;
  $28 = $0 + 4 | 0;
  $30 = $25 + -1 + (HEAP16[$drect + 2 >> 1] | 0) | 0;
  if ($14 << 16 >> 16 <= 0) {
   $y$05 = 0;
   while (1) {
    $y$05 = $y$05 + 1 | 0;
    if (($y$05 | 0) >= ($25 | 0)) break L1;
   }
  }
  $$pre = HEAP32[$17 >> 2] | 0;
  $y$05$us = 0;
  while (1) {
   $58 = $30 - $y$05$us | 0;
   $49 = $$pre;
   $x$04$us = 0;
   while (1) {
    $34 = (Math_imul(HEAPU16[$0 >> 1] | 0, $y$05$us) | 0) + $x$04$us | 0;
    $39 = Math_imul(((HEAPU8[$28 >> 0] | 0) + 1 | 0) >>> 3, $34) | 0;
    $51 = _SDL_MapRGBA(HEAP32[$49 + 4 >> 2] | 0, HEAP8[$16 + ($39 + 2) >> 0] | 0, HEAP8[$16 + ($39 + 1) >> 0] | 0, HEAP8[$16 + $39 >> 0] | 0, -1) | 0;
    $52 = HEAP32[$17 >> 2] | 0;
    $60 = (HEAP32[$52 + 20 >> 2] | 0) + ((Math_imul(HEAPU16[$2 >> 1] | 0, $58) | 0) << 2) + ($x$04$us << 2) | 0;
    HEAP32[$60 + (HEAP16[$drect >> 1] << 2) >> 2] = $51;
    $x$04$us = $x$04$us + 1 | 0;
    if (($x$04$us | 0) >= ($26 | 0)) {
     $$lcssa = $52;
     break;
    } else $49 = $52;
   }
   $66 = $y$05$us + 1 | 0;
   if (($66 | 0) < (HEAPU16[$19 >> 1] | 0)) {
    $$pre = $$lcssa;
    $y$05$us = $66;
   } else break;
  }
 } while (0);
 _SDL_UnlockSurface(HEAP32[$17 >> 2] | 0);
 if (!$0) {
  STACKTOP = sp;
  return;
 }
 $74 = $0 + 5 | 0;
 $76 = (HEAP8[$74 >> 0] | 0) + -1 << 24 >> 24;
 HEAP8[$74 >> 0] = $76;
 if (!($76 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($0);
 HEAP32[$bitmapBpp >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZN12Front_JS_SDL11draw_MemBltERK4RectRK6BitmapiiNS_8uint32_tE($this, $drect, $bitmap, $srcx, $srcy, $mask) {
 $this = $this | 0;
 $drect = $drect | 0;
 $bitmap = $bitmap | 0;
 $srcx = $srcx | 0;
 $srcy = $srcy | 0;
 $mask = $mask | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $29 = 0, $32 = 0, $35 = 0, $40 = 0, $50 = 0, $53 = 0, $6 = 0, $61 = 0, $66 = 0, $7 = 0, $70 = 0, $72 = 0, $74 = 0, $75 = 0, $9 = 0, $bitmapBpp = 0, $x$02 = 0, $y$03 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $bitmapBpp = sp;
 __ZN6BitmapC2EhRKS_($bitmapBpp, 32, $bitmap);
 $0 = HEAP32[$bitmapBpp >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!(($1 & 65535) << 16 >> 16 == 0 | $1 >>> 0 < 65536)) {
  $6 = HEAP32[$0 + 16 >> 2] | 0;
  $7 = $this + 5820 | 0;
  _SDL_LockSurface(HEAP32[$7 >> 2] | 0) | 0;
  $9 = $drect + 6 | 0;
  $10 = HEAP16[$9 >> 1] | 0;
  if ($10 << 16 >> 16) {
   $16 = $drect + 4 | 0;
   $17 = $0 + 4 | 0;
   $19 = ($10 & 65535) + -1 + (HEAP16[$drect + 2 >> 1] | 0) | 0;
   $20 = $this + 52 | 0;
   $21 = HEAP16[$16 >> 1] | 0;
   $74 = $10;
   $y$03 = 0;
   while (1) {
    if (!($21 << 16 >> 16)) {
     $29 = $74;
     $75 = 0;
    } else {
     $24 = $y$03 + $srcy | 0;
     $25 = $19 - $y$03 | 0;
     $32 = $21 & 65535;
     $50 = HEAP32[$7 >> 2] | 0;
     $x$02 = 0;
     do {
      $35 = $x$02 + $srcx + (Math_imul($32 + $srcx | 0, $24) | 0) | 0;
      $40 = Math_imul(((HEAPU8[$17 >> 0] | 0) + 1 | 0) >>> 3, $35) | 0;
      $53 = (_SDL_MapRGBA(HEAP32[$50 + 4 >> 2] | 0, HEAP8[$6 + ($40 + 2) >> 0] | 0, HEAP8[$6 + ($40 + 1) >> 0] | 0, HEAP8[$6 + $40 >> 0] | 0, -1) | 0) ^ $mask;
      $50 = HEAP32[$7 >> 2] | 0;
      $61 = (HEAP32[$50 + 20 >> 2] | 0) + ((Math_imul(HEAPU16[$20 >> 1] | 0, $25) | 0) << 2) + ($x$02 << 2) | 0;
      HEAP32[$61 + (HEAP16[$drect >> 1] << 2) >> 2] = $53;
      $x$02 = $x$02 + 1 | 0;
      $66 = HEAP16[$16 >> 1] | 0;
      $32 = $66 & 65535;
     } while (($x$02 | 0) < ($32 | 0));
     $$lcssa = $66;
     $29 = HEAP16[$9 >> 1] | 0;
     $75 = $$lcssa;
    }
    $y$03 = $y$03 + 1 | 0;
    if (($y$03 | 0) >= ($29 & 65535 | 0)) break; else {
     $21 = $75;
     $74 = $29;
    }
   }
  }
  _SDL_UnlockSurface(HEAP32[$7 >> 2] | 0);
 }
 if (!$0) {
  STACKTOP = sp;
  return;
 }
 $70 = $0 + 5 | 0;
 $72 = (HEAP8[$70 >> 0] | 0) + -1 << 24 >> 24;
 HEAP8[$70 >> 0] = $72;
 if (!($72 << 24 >> 24)) __ZN6Bitmap10DataBitmap8destructEPS0_($0);
 HEAP32[$bitmapBpp >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $32 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $8 = 0, $__i$sroa$0$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $8 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$8 & 31]($this, $$byval_copy, $__iob, $__fl, $__v & 1) | 0;
 } else {
  $12 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$1 >> 2] = $12;
  $13 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 3677392) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($12) | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$14 + 24 >> 2] & 63]($$byval_copy, $13); else FUNCTION_TABLE_vii[HEAP32[$14 + 28 >> 2] & 63]($$byval_copy, $13);
  $19 = HEAP8[$$byval_copy >> 0] | 0;
  $22 = $$byval_copy + 1 | 0;
  $23 = $$byval_copy + 8 | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  $25 = $$byval_copy + 4 | 0;
  $27 = $19;
  $32 = $24;
  $__i$sroa$0$0 = ($19 & 1) == 0 ? $22 : $24;
  while (1) {
   $28 = ($27 & 1) == 0;
   if (($__i$sroa$0$0 | 0) == (($28 ? $22 : $32) + ($28 ? ($27 & 255) >>> 1 : HEAP32[$25 >> 2] | 0) | 0)) break;
   $38 = HEAP8[$__i$sroa$0$0 >> 0] | 0;
   $39 = HEAP32[$__s >> 2] | 0;
   do if ($39 | 0) {
    $41 = $39 + 24 | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    if (($42 | 0) != (HEAP32[$39 + 28 >> 2] | 0)) {
     HEAP32[$41 >> 2] = $42 + 1;
     HEAP8[$42 >> 0] = $38;
     break;
    }
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$39 >> 2] | 0) + 52 >> 2] & 15]($39, $38 & 255) | 0) == -1) HEAP32[$__s >> 2] = 0;
   } while (0);
   $27 = HEAP8[$$byval_copy >> 0] | 0;
   $32 = HEAP32[$23 >> 2] | 0;
   $__i$sroa$0$0 = $__i$sroa$0$0 + 1 | 0;
  }
  $37 = HEAP32[$__s >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
  $$sroa$0$0 = $37;
 }
 STACKTOP = sp;
 return $$sroa$0$0 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$byval_copy = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $31 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $8 = 0, $__i$sroa$0$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $8 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$8 & 31]($this, $$byval_copy, $__iob, $__fl, $__v & 1) | 0;
 } else {
  $12 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
  HEAP32[$1 >> 2] = $12;
  $13 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 3677420) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv($12) | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$14 + 24 >> 2] & 63]($$byval_copy, $13); else FUNCTION_TABLE_vii[HEAP32[$14 + 28 >> 2] & 63]($$byval_copy, $13);
  $19 = HEAP8[$$byval_copy >> 0] | 0;
  $22 = $$byval_copy + 4 | 0;
  $23 = $$byval_copy + 8 | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  $26 = $19;
  $31 = $24;
  $__i$sroa$0$0 = ($19 & 1) == 0 ? $22 : $24;
  while (1) {
   $27 = ($26 & 1) == 0;
   if (($__i$sroa$0$0 | 0) == (($27 ? $22 : $31) + (($27 ? ($26 & 255) >>> 1 : HEAP32[$22 >> 2] | 0) << 2) | 0)) break;
   $37 = HEAP32[$__i$sroa$0$0 >> 2] | 0;
   $38 = HEAP32[$__s >> 2] | 0;
   if ($38 | 0) {
    $40 = $38 + 24 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    if (($41 | 0) == (HEAP32[$38 + 28 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$38 >> 2] | 0) + 52 >> 2] & 15]($38, $37) | 0; else {
     HEAP32[$40 >> 2] = $41 + 4;
     HEAP32[$41 >> 2] = $37;
     $$0$i$i = $37;
    }
    if (($$0$i$i | 0) == -1) HEAP32[$__s >> 2] = 0;
   }
   $26 = HEAP8[$$byval_copy >> 0] | 0;
   $31 = HEAP32[$23 >> 2] | 0;
   $__i$sroa$0$0 = $__i$sroa$0$0 + 4 | 0;
  }
  $36 = HEAP32[$__s >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
  $$sroa$0$0 = $36;
 }
 STACKTOP = sp;
 return $$sroa$0$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $33 = 0, $43 = 0, $45 = 0, $6 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, label = 0;
 do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else {
  if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
   $45 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$45 >> 2] | 0) + 24 >> 2] & 3]($45, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $20 = $info + 44 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 4) break;
    $23 = $info + 52 | 0;
    HEAP8[$23 >> 0] = 0;
    $24 = $info + 53 | 0;
    HEAP8[$24 >> 0] = 0;
    $26 = HEAP32[$this + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$26 >> 2] | 0) + 20 >> 2] & 15]($26, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
    if (!(HEAP8[$24 >> 0] | 0)) {
     $is_dst_type_derived_from_static_type$0$off02 = 0;
     label = 13;
    } else if (!(HEAP8[$23 >> 0] | 0)) {
     $is_dst_type_derived_from_static_type$0$off02 = 1;
     label = 13;
    } else label = 17;
    do if ((label | 0) == 13) {
     HEAP32[$14 >> 2] = $current_ptr;
     $33 = $info + 40 | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
      HEAP8[$info + 54 >> 0] = 1;
      if ($is_dst_type_derived_from_static_type$0$off02) {
       label = 17;
       break;
      } else {
       $43 = 4;
       break;
      }
     }
     if ($is_dst_type_derived_from_static_type$0$off02) label = 17; else $43 = 4;
    } while (0);
    if ((label | 0) == 17) $43 = 3;
    HEAP32[$20 >> 2] = $43;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $1 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $30 = 0, $7 = 0, $8 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $dummy = sp;
 $$st = ($st | 0) == 0 ? 3675828 : $st;
 $1 = HEAP32[$$st >> 2] | 0;
 L1 : do if (!$src) if (!$1) $$0 = 0; else label = 15; else {
  $dummy$wc = ($wc | 0) == 0 ? $dummy : $wc;
  if (!$n) $$0 = -2; else {
   if (!$1) {
    $7 = HEAP8[$src >> 0] | 0;
    $8 = $7 & 255;
    if ($7 << 24 >> 24 > -1) {
     HEAP32[$dummy$wc >> 2] = $8;
     $$0 = $7 << 24 >> 24 != 0 & 1;
     break;
    }
    $12 = $8 + -194 | 0;
    if ($12 >>> 0 > 50) {
     label = 15;
     break;
    }
    $16 = HEAP32[11672 + ($12 << 2) >> 2] | 0;
    $17 = $n + -1 | 0;
    if (!$17) $c$2 = $16; else {
     $$024 = $17;
     $c$05 = $16;
     $s$06 = $src + 1 | 0;
     label = 9;
    }
   } else {
    $$024 = $n;
    $c$05 = $1;
    $s$06 = $src;
    label = 9;
   }
   L11 : do if ((label | 0) == 9) {
    $19 = HEAP8[$s$06 >> 0] | 0;
    $21 = ($19 & 255) >>> 3;
    if (($21 + -16 | $21 + ($c$05 >> 26)) >>> 0 > 7) {
     label = 15;
     break L1;
    } else {
     $$1 = $$024;
     $30 = $19;
     $c$1 = $c$05;
     $s$1 = $s$06;
    }
    while (1) {
     $s$1 = $s$1 + 1 | 0;
     $c$1 = ($30 & 255) + -128 | $c$1 << 6;
     $$1 = $$1 + -1 | 0;
     if (($c$1 | 0) >= 0) {
      $$lcssa = $c$1;
      $$lcssa35 = $$1;
      break;
     }
     if (!$$1) {
      $c$2 = $c$1;
      break L11;
     }
     $30 = HEAP8[$s$1 >> 0] | 0;
     if (($30 & -64) << 24 >> 24 != -128) {
      label = 15;
      break L1;
     }
    }
    HEAP32[$$st >> 2] = 0;
    HEAP32[$dummy$wc >> 2] = $$lcssa;
    $$0 = $n - $$lcssa35 | 0;
    break L1;
   } while (0);
   HEAP32[$$st >> 2] = $c$2;
   $$0 = -2;
  }
 } while (0);
 if ((label | 0) == 15) {
  HEAP32[$$st >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZN12Front_JS_SDLC2ER10ClientInfoi($this, $info, $verb) {
 $this = $this | 0;
 $info = $info | 0;
 $verb = $verb | 0;
 var $0 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $23 = 0, $3 = 0, $37 = 0, $43 = 0, $44 = 0, $47 = 0, $9 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP8[$this + 4 >> 0] = 0;
 $2 = $this + 8 | 0;
 HEAP32[$this >> 2] = 11100;
 HEAP32[$2 >> 2] = 11308;
 $3 = $this + 12 | 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP16[$3 + 8 >> 1] = 0;
 HEAP8[$this + 24 >> 0] = 0;
 HEAP32[$this + 28 >> 2] = 0;
 HEAP8[$this + 40 >> 0] = 0;
 HEAP8[$this + 41 >> 0] = 0;
 _gettimeofday($0 | 0, 0) | 0;
 $9 = $0;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $15 = $this + 32 | 0;
 HEAP32[$15 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$15 + 4 >> 2] = $14;
 HEAP32[$this >> 2] = 10864;
 HEAP32[$2 >> 2] = 11080;
 HEAP32[$this + 44 >> 2] = $verb;
 $20 = $this + 48 | 0;
 _memcpy($20 | 0, $info | 0, 2464) | 0;
 HEAP32[$this + 2572 >> 2] = 0;
 $23 = $this + 2576 | 0;
 dest = $this + 2512 | 0;
 stop = dest + 52 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$23 >> 2] = 30;
 HEAP8[$this + 2580 >> 0] = HEAP32[$20 >> 2];
 __ZN10BGRPalette11classic_332Ev() | 0;
 _memcpy($this + 2584 | 0, 3674632, 1024) | 0;
 HEAP32[$this + 4644 >> 2] = 0;
 HEAP32[$this + 4648 >> 2] = 0;
 HEAP32[$this + 4732 >> 2] = 0;
 HEAP32[$this + 4736 >> 2] = 0;
 HEAP8[$this + 4820 >> 0] = 0;
 HEAP32[$this + 4824 >> 2] = 1584;
 HEAP32[$this + 4976 >> 2] = 0;
 HEAP8[$this + 4980 >> 0] = 0;
 _memset($this + 3616 | 0, 0, 1028) | 0;
 $37 = $this + 5e3 | 0;
 HEAP32[$this + 4988 >> 2] = $37;
 HEAP32[$this + 4992 >> 2] = $this + 5256;
 HEAP32[$this + 4996 >> 2] = $37;
 __ZN8CHANNELS15ChannelDefArrayC2Ev($this + 5260 | 0);
 $43 = $this + 5780 | 0;
 HEAP32[$43 >> 2] = 0;
 HEAP32[$43 + 4 >> 2] = 0;
 HEAP32[$43 + 8 >> 2] = 0;
 $44 = $this + 5816 | 0;
 HEAP32[$44 >> 2] = $this;
 _SDL_Init(32) | 0;
 $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 52 >> 2] | 0;
 HEAP32[$this + 5820 >> 2] = _SDL_SetVideoMode($47 & 65535 | 0, $47 >>> 16 | 0, 32, 4194304) | 0;
 STACKTOP = sp;
 return;
}

function __ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 var $0 = 0, $1 = 0, $10 = 0, $109 = 0, $17 = 0, $23 = 0, $3 = 0, $31 = 0, $37 = 0, $40 = 0, $41 = 0, $46 = 0, $48 = 0, $54 = 0, $57 = 0, $60 = 0, $61 = 0, $65 = 0, $68 = 0, $7 = 0, $72 = 0, $75 = 0, $76 = 0, $8 = 0, $81 = 0, $83 = 0, $trect = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $trect = sp;
 $0 = HEAP16[$clip >> 1] | 0;
 $1 = HEAP16[$cmd >> 1] | 0;
 $3 = $0 << 16 >> 16 < $1 << 16 >> 16 ? $1 : $0;
 $7 = HEAP16[$clip + 2 >> 1] | 0;
 $8 = HEAP16[$cmd + 2 >> 1] | 0;
 $10 = $7 << 16 >> 16 < $8 << 16 >> 16 ? $8 : $7;
 $17 = (HEAPU16[$clip + 4 >> 1] | 0) + ($0 & 65535) << 16 >> 16;
 $23 = (HEAPU16[$cmd + 4 >> 1] | 0) + ($1 & 65535) << 16 >> 16;
 $31 = (HEAPU16[$clip + 6 >> 1] | 0) + ($7 & 65535) << 16 >> 16;
 $37 = (HEAPU16[$cmd + 6 >> 1] | 0) + ($8 & 65535) << 16 >> 16;
 $40 = (($23 | 0) < ($17 | 0) ? $23 : $17) - ($3 << 16 >> 16) | 0;
 $41 = (($37 | 0) < ($31 | 0) ? $37 : $31) - ($10 << 16 >> 16) | 0;
 $46 = (($41 + 65535 | $40 + 65535) & 32768 | 0) == 0;
 $48 = HEAP32[$this + 52 >> 2] | 0;
 $54 = ((($48 >>> 16) + 65535 | $48 + 65535) & 32768 | 0) == 0;
 $57 = ($3 << 16 >> 16 > 0 ? $3 : 0) << 16 >> 16;
 $60 = ($10 << 16 >> 16 > 0 ? $10 : 0) << 16 >> 16;
 $61 = $54 ? $48 << 16 >> 16 : 0;
 $65 = ($46 ? $40 : 0) + ($3 & 65535) << 16 >> 16;
 $68 = $54 ? $48 >> 16 : 0;
 $72 = ($46 ? $41 : 0) + ($10 & 65535) << 16 >> 16;
 $75 = (($65 | 0) < ($61 | 0) ? $65 : $61) - $57 | 0;
 $76 = (($72 | 0) < ($68 | 0) ? $72 : $68) - $60 | 0;
 $81 = (($76 + 65535 | $75 + 65535) & 32768 | 0) == 0;
 $83 = HEAP32[$cmd + 8 >> 2] | 0;
 HEAP32[$trect >> 2] = $57;
 HEAP32[$trect + 4 >> 2] = $60;
 HEAP32[$trect + 8 >> 2] = $81 ? $75 & 65535 : 0;
 HEAP32[$trect + 12 >> 2] = $81 ? $76 & 65535 : 0;
 $109 = HEAP32[$this + 5820 >> 2] | 0;
 _SDL_FillRect($109 | 0, $trect | 0, _SDL_MapRGB(HEAP32[$109 + 4 >> 2] | 0, ($83 >>> 8 & 248 | $83 >>> 13 & 7) & 255 | 0, ($83 >>> 3 & 252 | $83 >>> 9 & 3) & 255 | 0, ($83 >>> 2 & 7 | $83 << 3) & 255 | 0) | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[3673984] | 0)) if (___cxa_guard_acquire(3673984) | 0) {
  if (!(HEAP8[3673992] | 0)) if (___cxa_guard_acquire(3673992) | 0) {
   $9 = 3677452;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 3677620);
   ___cxa_atexit(111, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(3673992);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677452, 3671706) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677464, 3671713) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677476, 3671720) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677488, 3671728) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677500, 3671738) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677512, 3671747) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677524, 3671754) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677536, 3671763) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677548, 3671767) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677560, 3671771) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677572, 3671775) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677584, 3671779) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677596, 3671783) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677608, 3671787) | 0;
  HEAP32[919405] = 3677452;
  ___cxa_guard_release(3673984);
 }
 return HEAP32[919405] | 0;
}

function __ZN6Bitmap10DataBitmap9constructEhtt($bpp, $cx, $cy) {
 $bpp = $bpp | 0;
 $cx = $cx | 0;
 $cy = $cy | 0;
 var $$3$i = 0, $$lcssa$i = 0, $$lcssa8$i = 0, $10 = 0, $11 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $31 = 0, $36 = 0, $46 = 0, $5 = 0, $6 = 0, $8 = 0, label = 0;
 $2 = ($cx & 65535) + 3 & 65532;
 $5 = (($bpp & 255) + 7 | 0) >>> 3;
 $6 = $cy & 65535;
 $8 = Math_imul(Math_imul($6, $5) | 0, $2) | 0;
 $10 = $bpp << 24 >> 24 == 8 ? 1076 : 52;
 $11 = $8 + $10 | 0;
 if ((HEAP32[918919] | 0) >>> 0 < $11 >>> 0) label = 3; else {
  $14 = HEAP32[918918] | 0;
  if (($14 | 0) == (HEAP32[918916] | 0)) label = 3; else {
   $$lcssa$i = 3675672;
   $$lcssa8$i = $14;
   label = 4;
  }
 }
 do if ((label | 0) == 3) {
  if ((HEAP32[918925] | 0) >>> 0 >= $11 >>> 0) {
   $21 = HEAP32[918924] | 0;
   if (($21 | 0) != (HEAP32[918922] | 0)) {
    $$lcssa$i = 3675696;
    $$lcssa8$i = $21;
    label = 4;
    break;
   }
  }
  if ((HEAP32[918931] | 0) >>> 0 >= $11 >>> 0) {
   $26 = HEAP32[918930] | 0;
   if (($26 | 0) != (HEAP32[918928] | 0)) {
    $$lcssa$i = 3675720;
    $$lcssa8$i = $26;
    label = 4;
    break;
   }
  }
  if ((HEAP32[918937] | 0) >>> 0 >= $11 >>> 0) {
   $31 = HEAP32[918936] | 0;
   if (($31 | 0) != (HEAP32[918934] | 0)) {
    $$lcssa$i = 3675744;
    $$lcssa8$i = $31;
    label = 4;
    break;
   }
  }
  if ((HEAP32[918943] | 0) >>> 0 >= $11 >>> 0) {
   $36 = HEAP32[918942] | 0;
   if (($36 | 0) != (HEAP32[918940] | 0)) {
    $$lcssa$i = 3675768;
    $$lcssa8$i = $36;
    label = 4;
    break;
   }
  }
  $$3$i = __Znwj($11) | 0;
 } while (0);
 if ((label | 0) == 4) {
  $19 = $$lcssa8$i + -4 | 0;
  HEAP32[$$lcssa$i >> 2] = $19;
  $$3$i = HEAP32[$19 >> 2] | 0;
 }
 HEAP16[$$3$i >> 1] = $2;
 HEAP16[$$3$i + 2 >> 1] = $cy;
 HEAP8[$$3$i + 4 >> 0] = $bpp;
 HEAP8[$$3$i + 5 >> 0] = 1;
 $46 = Math_imul($2, $5) | 0;
 HEAP32[$$3$i + 8 >> 2] = $46;
 HEAP32[$$3$i + 12 >> 2] = Math_imul($46, $6) | 0;
 HEAP32[$$3$i + 16 >> 2] = $$3$i + $10;
 HEAP32[$$3$i + 20 >> 2] = 0;
 HEAP32[$$3$i + 24 >> 2] = 0;
 HEAP8[$$3$i + 48 >> 0] = 0;
 return $$3$i | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[3674064] | 0)) if (___cxa_guard_acquire(3674064) | 0) {
  if (!(HEAP8[3674072] | 0)) if (___cxa_guard_acquire(3674072) | 0) {
   $9 = 3678264;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 3678432);
   ___cxa_atexit(115, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(3674072);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678264, 16320) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678276, 16348) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678288, 16376) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678300, 16408) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678312, 16448) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678324, 16484) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678336, 16512) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678348, 16548) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678360, 16564) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678372, 16580) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678384, 16596) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678396, 16612) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678408, 16628) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678420, 16644) | 0;
  HEAP32[919608] = 3678264;
  ___cxa_guard_release(3674064);
 }
 return HEAP32[919608] | 0;
}

function __ZN12Front_JS_SDL14draw_RDPScrBltEiiRK4RectNS_8uint32_tE($this, $srcx, $srcy, $drect, $mask) {
 $this = $this | 0;
 $srcx = $srcx | 0;
 $srcy = $srcy | 0;
 $drect = $drect | 0;
 $mask = $mask | 0;
 var $11 = 0, $13 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $47 = 0, $7 = 0, $9 = 0, $dPosition = 0, $sPosition = 0, $x$01$us = 0, $y$02$us = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $dPosition = sp + 16 | 0;
 $sPosition = sp;
 HEAP32[$dPosition >> 2] = HEAP16[$drect >> 1];
 $3 = $drect + 2 | 0;
 HEAP32[$dPosition + 4 >> 2] = HEAP16[$3 >> 1];
 $7 = $drect + 4 | 0;
 $9 = HEAPU16[$7 >> 1] | 0;
 HEAP32[$dPosition + 8 >> 2] = $9;
 $11 = $drect + 6 | 0;
 $13 = HEAPU16[$11 >> 1] | 0;
 HEAP32[$dPosition + 12 >> 2] = $13;
 HEAP32[$sPosition >> 2] = $srcx;
 HEAP32[$sPosition + 4 >> 2] = $srcy;
 HEAP32[$sPosition + 8 >> 2] = $9;
 HEAP32[$sPosition + 12 >> 2] = $13;
 $17 = $this + 5820 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 _SDL_UpperBlit($18 | 0, $sPosition | 0, $18 | 0, $dPosition | 0) | 0;
 _SDL_LockSurface(HEAP32[$17 >> 2] | 0) | 0;
 $20 = HEAP16[$11 >> 1] | 0;
 if (!($20 << 16 >> 16)) {
  $47 = HEAP32[$17 >> 2] | 0;
  _SDL_UnlockSurface($47 | 0);
  STACKTOP = sp;
  return;
 }
 $22 = HEAP16[$7 >> 1] | 0;
 $24 = $20 & 65535;
 $26 = HEAP16[$3 >> 1] | 0;
 $27 = $this + 52 | 0;
 $29 = HEAP16[$drect >> 1] | 0;
 $30 = $22 & 65535;
 if (!($22 << 16 >> 16)) {
  $47 = HEAP32[$17 >> 2] | 0;
  _SDL_UnlockSurface($47 | 0);
  STACKTOP = sp;
  return;
 } else $y$02$us = 0;
 do {
  $32 = (HEAP32[(HEAP32[$17 >> 2] | 0) + 20 >> 2] | 0) + ((Math_imul($26 + $y$02$us | 0, HEAPU16[$27 >> 1] | 0) | 0) << 2) | 0;
  $x$01$us = 0;
  do {
   $33 = $32 + ($x$01$us << 2) + ($29 << 2) | 0;
   HEAP32[$33 >> 2] = HEAP32[$33 >> 2] ^ $mask;
   $x$01$us = $x$01$us + 1 | 0;
  } while (($x$01$us | 0) < ($30 | 0));
  $y$02$us = $y$02$us + 1 | 0;
 } while (($y$02$us | 0) < ($24 | 0));
 $47 = HEAP32[$17 >> 2] | 0;
 _SDL_UnlockSurface($47 | 0);
 STACKTOP = sp;
 return;
}

function ___cxx_global_array_dtor_112($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3679004);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678992);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678980);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678968);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678956);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678944);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678932);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678920);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678908);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678896);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678884);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678872);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678860);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678848);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678836);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678824);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678812);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678800);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678788);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678776);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678764);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678752);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678740);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678728);
 return;
}

function ___cxx_global_array_dtor_85($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678712);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678700);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678688);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678676);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678664);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678652);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678640);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678628);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678616);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678604);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678592);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678580);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678568);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678556);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678544);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678532);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678520);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678508);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678496);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678484);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678472);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678460);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678448);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678436);
 return;
}

function ___cxx_global_array_dtor_61($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677900);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677888);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677876);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677864);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677852);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677840);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677828);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677816);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677804);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677792);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677780);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677768);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677756);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677744);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677732);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677720);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677708);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677696);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677684);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677672);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677660);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677648);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677636);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677624);
 return;
}

function ___cxx_global_array_dtor_109($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678192);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678180);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678168);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678156);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678144);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678132);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678120);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678108);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678096);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678084);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678072);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678060);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678048);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678036);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678024);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678012);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3678e3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677988);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677976);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677964);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677952);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677940);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677928);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677916);
 return;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $5 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $3 = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $5 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $9 = $info + 16 | 0;
 $10 = $info + 20 | 0;
 $11 = $info + 24 | 0;
 $12 = $info + 28 | 0;
 $13 = $info + 32 | 0;
 $14 = $info + 40 | 0;
 $15 = ($5 | 0) == ($dst_type | 0);
 dest = $9;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$9 + 36 >> 1] = 0;
 HEAP8[$9 + 38 >> 0] = 0;
 L1 : do if ($15) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$dst_type >> 2] | 0) + 20 >> 2] & 15]($dst_type, $info, $3, $3, 1, 0);
  $dst_ptr$0 = (HEAP32[$11 >> 2] | 0) == 1 ? $3 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 24 >> 2] & 3]($5, $info, $3, 1, 0);
  switch (HEAP32[$info + 36 >> 2] | 0) {
  case 0:
   {
    $dst_ptr$0 = (HEAP32[$14 >> 2] | 0) == 1 & (HEAP32[$12 >> 2] | 0) == 1 & (HEAP32[$13 >> 2] | 0) == 1 ? HEAP32[$10 >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $dst_ptr$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$11 >> 2] | 0) != 1) if (!((HEAP32[$14 >> 2] | 0) == 0 & (HEAP32[$12 >> 2] | 0) == 1 & (HEAP32[$13 >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$9 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function __ZNSt3__111__stdoutbufIcE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$4 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $31 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 $0 = ($__c | 0) == -1;
 do if ($0) label = 14; else {
  HEAP8[$__1buf >> 0] = $__c;
  if (HEAP8[$this + 44 >> 0] | 0) if ((_fwrite($__1buf, 1, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
   label = 14;
   break;
  } else {
   $$4 = -1;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $9 = $__1buf + 1 | 0;
  $10 = $this + 36 | 0;
  $11 = $this + 40 | 0;
  $12 = $__extbuf + 8 | 0;
  $13 = $__extbuf;
  $14 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $15 = HEAP32[$10 >> 2] | 0;
   $20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] & 15]($15, HEAP32[$11 >> 2] | 0, $pbase$0, $9, $__e, $__extbuf, $12, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    label = 13;
    break;
   }
   if (($20 | 0) == 3) {
    $pbase$0$lcssa25 = $pbase$0;
    label = 7;
    break;
   }
   if (($20 | 1 | 0) != 1) {
    label = 13;
    break;
   }
   $31 = (HEAP32[$__extbe >> 2] | 0) - $13 | 0;
   if ((_fwrite($__extbuf, 1, $31, HEAP32[$14 >> 2] | 0) | 0) != ($31 | 0)) {
    label = 13;
    break;
   }
   if (($20 | 0) == 1) $pbase$0 = HEAP32[$__e >> 2] | 0; else {
    label = 12;
    break;
   }
  }
  if ((label | 0) == 7) if ((_fwrite($pbase$0$lcssa25, 1, 1, HEAP32[$14 >> 2] | 0) | 0) == 1) label = 12; else label = 13;
  if ((label | 0) == 12) {
   label = 14;
   break;
  } else if ((label | 0) == 13) {
   $$4 = -1;
   break;
  }
 } while (0);
 if ((label | 0) == 14) $$4 = $0 ? 0 : $__c;
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZNSt3__111__stdoutbufIwE8overflowEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$4 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $30 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 $0 = ($__c | 0) == -1;
 do if ($0) label = 14; else {
  HEAP32[$__1buf >> 2] = $__c;
  if (HEAP8[$this + 44 >> 0] | 0) if ((_fwrite($__1buf, 4, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
   label = 14;
   break;
  } else {
   $$4 = -1;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $8 = $__1buf + 4 | 0;
  $9 = $this + 36 | 0;
  $10 = $this + 40 | 0;
  $11 = $__extbuf + 8 | 0;
  $12 = $__extbuf;
  $13 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $14 = HEAP32[$9 >> 2] | 0;
   $19 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] & 15]($14, HEAP32[$10 >> 2] | 0, $pbase$0, $8, $__e, $__extbuf, $11, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    label = 13;
    break;
   }
   if (($19 | 0) == 3) {
    $pbase$0$lcssa25 = $pbase$0;
    label = 7;
    break;
   }
   if (($19 | 1 | 0) != 1) {
    label = 13;
    break;
   }
   $30 = (HEAP32[$__extbe >> 2] | 0) - $12 | 0;
   if ((_fwrite($__extbuf, 1, $30, HEAP32[$13 >> 2] | 0) | 0) != ($30 | 0)) {
    label = 13;
    break;
   }
   if (($19 | 0) == 1) $pbase$0 = HEAP32[$__e >> 2] | 0; else {
    label = 12;
    break;
   }
  }
  if ((label | 0) == 7) if ((_fwrite($pbase$0$lcssa25, 1, 1, HEAP32[$13 >> 2] | 0) | 0) == 1) label = 12; else label = 13;
  if ((label | 0) == 12) {
   label = 14;
   break;
  } else if ((label | 0) == 13) {
   $$4 = -1;
   break;
  }
 } while (0);
 if ((label | 0) == 14) $$4 = $0 ? 0 : $__c;
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZN6Bitmap10DataBitmap8destructEPS0_($cdata) {
 $cdata = $cdata | 0;
 var $1 = 0, $10 = 0, $34 = 0, $__begin$04$lcssa$i = 0, $__begin$04$lcssa$i$i = 0, label = 0;
 $1 = HEAP32[$cdata + 20 >> 2] | 0;
 if ((HEAP32[918914] | 0) >>> 0 <= $1 >>> 0 & (HEAP32[918915] | 0) >>> 0 > $1 >>> 0) {
  $__begin$04$lcssa$i$i = 3675656;
  label = 3;
 } else if ((HEAP32[918920] | 0) >>> 0 <= $1 >>> 0 & (HEAP32[918921] | 0) >>> 0 > $1 >>> 0) {
  $__begin$04$lcssa$i$i = 3675680;
  label = 3;
 } else if ((HEAP32[918926] | 0) >>> 0 <= $1 >>> 0 & (HEAP32[918927] | 0) >>> 0 > $1 >>> 0) {
  $__begin$04$lcssa$i$i = 3675704;
  label = 3;
 } else if ((HEAP32[918932] | 0) >>> 0 <= $1 >>> 0 & (HEAP32[918933] | 0) >>> 0 > $1 >>> 0) {
  $__begin$04$lcssa$i$i = 3675728;
  label = 3;
 } else if ((HEAP32[918938] | 0) >>> 0 <= $1 >>> 0 & (HEAP32[918939] | 0) >>> 0 > $1 >>> 0) {
  $__begin$04$lcssa$i$i = 3675752;
  label = 3;
 } else __ZdlPv($1);
 if ((label | 0) == 3) {
  $10 = $__begin$04$lcssa$i$i + 16 | 0;
  HEAP32[HEAP32[$10 >> 2] >> 2] = $1;
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 4;
 }
 if ((HEAP32[918914] | 0) >>> 0 <= $cdata >>> 0 & (HEAP32[918915] | 0) >>> 0 > $cdata >>> 0) $__begin$04$lcssa$i = 3675656; else if ((HEAP32[918920] | 0) >>> 0 <= $cdata >>> 0 & (HEAP32[918921] | 0) >>> 0 > $cdata >>> 0) $__begin$04$lcssa$i = 3675680; else if ((HEAP32[918926] | 0) >>> 0 <= $cdata >>> 0 & (HEAP32[918927] | 0) >>> 0 > $cdata >>> 0) $__begin$04$lcssa$i = 3675704; else if ((HEAP32[918932] | 0) >>> 0 <= $cdata >>> 0 & (HEAP32[918933] | 0) >>> 0 > $cdata >>> 0) $__begin$04$lcssa$i = 3675728; else if ((HEAP32[918938] | 0) >>> 0 <= $cdata >>> 0 & (HEAP32[918939] | 0) >>> 0 > $cdata >>> 0) $__begin$04$lcssa$i = 3675752; else {
  __ZdlPv($cdata);
  return;
 }
 $34 = $__begin$04$lcssa$i + 16 | 0;
 HEAP32[HEAP32[$34 >> 2] >> 2] = $cdata;
 HEAP32[$34 >> 2] = (HEAP32[$34 >> 2] | 0) + 4;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 116 | 0;
 $__nar = sp + 104 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 8 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[3671427] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3671428] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3671429] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3671430] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3671431] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3671432] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3671433, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $9;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $13 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 116 | 0;
 $__nar = sp + 104 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 8 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[3671427] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3671428] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3671429] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3671430] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3671431] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3671432] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3671433, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $9;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $13 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 56 | 0;
 $__nar = sp + 44 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 8 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[3671427] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3671428] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3671429] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3671430] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3671431] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3671432] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3671433, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $9;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $13 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 56 | 0;
 $__nar = sp + 44 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 8 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[3671427] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3671428] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3671429] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3671430] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3671431] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3671432] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3671433, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 $9 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $9;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv($9) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $13 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $11, $12, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $$sroa$0$2 = 0, $0 = 0, $10 = 0, $2 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 if (!$0) {
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = $2 - $3 | 0;
 $5 = $__iob + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $__ns$0 = ($6 | 0) > ($4 | 0) ? $6 - $4 | 0 : 0;
 $9 = $__op;
 $10 = $9 - $3 | 0;
 if (($10 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__ob, $10) | 0) != ($10 | 0)) {
  HEAP32[$__s >> 2] = 0;
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 do if (($__ns$0 | 0) > 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp, $__ns$0, $__fl);
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, (HEAP8[$__sp >> 0] & 1) == 0 ? $__sp + 1 | 0 : HEAP32[$__sp + 8 >> 2] | 0, $__ns$0) | 0) == ($__ns$0 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
   break;
  }
  HEAP32[$__s >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 } while (0);
 $30 = $2 - $9 | 0;
 if (($30 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__op, $30) | 0) != ($30 | 0)) {
  HEAP32[$__s >> 2] = 0;
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 HEAP32[$5 >> 2] = 0;
 $$sroa$0$2 = $0;
 STACKTOP = sp;
 return $$sroa$0$2 | 0;
}

function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $$sroa$0$2 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 L1 : do if (!$0) $$sroa$0$2 = 0; else {
  $2 = $__oe;
  $3 = $__ob;
  $5 = $2 - $3 >> 2;
  $6 = $__iob + 12 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $__ns$0 = ($7 | 0) > ($5 | 0) ? $7 - $5 | 0 : 0;
  $10 = $__op;
  $11 = $10 - $3 | 0;
  $12 = $11 >> 2;
  if (($11 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__ob, $12) | 0) != ($12 | 0)) {
   HEAP32[$__s >> 2] = 0;
   $$sroa$0$2 = 0;
   break;
  }
  do if (($__ns$0 | 0) > 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp, $__ns$0, $__fl);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, (HEAP8[$__sp >> 0] & 1) == 0 ? $__sp + 4 | 0 : HEAP32[$__sp + 8 >> 2] | 0, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
    break;
   } else {
    HEAP32[$__s >> 2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
    $$sroa$0$2 = 0;
    break L1;
   }
  } while (0);
  $32 = $2 - $10 | 0;
  $33 = $32 >> 2;
  if (($32 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__op, $33) | 0) != ($33 | 0)) {
   HEAP32[$__s >> 2] = 0;
   $$sroa$0$2 = 0;
   break;
  }
  HEAP32[$6 >> 2] = 0;
  $$sroa$0$2 = $0;
 } while (0);
 STACKTOP = sp;
 return $$sroa$0$2 | 0;
}

function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os, $__str, $__len) {
 $__os = $__os | 0;
 $__str = $__str | 0;
 $__len = $__len | 0;
 var $$byval_copy = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $23 = 0, $32 = 0, $6 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $__s = sp;
 $0 = sp + 8 | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $__os);
 if (!(HEAP8[$__s >> 0] | 0)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;
  return $__os | 0;
 }
 $6 = $__os + (HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0) | 0;
 HEAP32[$0 >> 2] = HEAP32[$6 + 24 >> 2];
 $10 = HEAP32[$6 + 4 >> 2] | 0;
 $11 = $__str + $__len | 0;
 $12 = $6 + 76 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if (($13 | 0) == -1) {
  HEAP32[$$byval_copy >> 2] = __ZNKSt3__18ios_base6getlocEv($6) | 0;
  $16 = __ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy, 3677380) | 0;
  $20 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$16 >> 2] | 0) + 28 >> 2] & 15]($16, 32) | 0;
  __ZNSt3__16localeD2Ev($$byval_copy);
  $21 = $20 << 24 >> 24;
  HEAP32[$12 >> 2] = $21;
  $23 = $21;
 } else $23 = $13;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 if (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__str, ($10 & 176 | 0) == 32 ? $11 : $__str, $11, $6, $23 & 255) | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;
  return $__os | 0;
 }
 $32 = $__os + (HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNSt3__18ios_base5clearEj($32, HEAP32[$32 + 16 >> 2] | 5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $__os | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $28 = 0, $32 = 0, $6 = 0, $7 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) $$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $32 = ___lockfile($f) | 0; else $32 = 0;
  $6 = HEAP32[$f >> 2] | 0;
  $7 = $6 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $6 & -33;
  $12 = $f + 48 | 0;
  if (!(HEAP32[$12 >> 2] | 0)) {
   $16 = $f + 44 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$16 >> 2] = $internal_buf;
   $18 = $f + 28 | 0;
   HEAP32[$18 >> 2] = $internal_buf;
   $19 = $f + 20 | 0;
   HEAP32[$19 >> 2] = $internal_buf;
   HEAP32[$12 >> 2] = 80;
   $21 = $f + 16 | 0;
   HEAP32[$21 >> 2] = $internal_buf + 80;
   $22 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   if (!$17) $ret$1 = $22; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
    $$ = (HEAP32[$19 >> 2] | 0) == 0 ? -1 : $22;
    HEAP32[$16 >> 2] = $17;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$18 >> 2] = 0;
    HEAP32[$19 >> 2] = 0;
    $ret$1 = $$;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  $28 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $28 | $7;
  if ($32 | 0) ___unlockfile($f);
  $$0 = ($28 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $p$0 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $3 = $info + 52 | 0;
  $4 = HEAP16[$3 >> 1] | 0;
  $5 = $4 & 255;
  $6 = $info + 53 | 0;
  $8 = ($4 & 65535) >>> 8 & 255;
  $11 = HEAP32[$this + 12 >> 2] | 0;
  $12 = $this + 16 + ($11 << 3) | 0;
  HEAP8[$3 >> 0] = 0;
  HEAP8[$6 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  L4 : do if (($11 | 0) > 1) {
   $15 = $info + 24 | 0;
   $16 = $this + 8 | 0;
   $17 = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    if (HEAP8[$17 >> 0] | 0) break L4;
    $20 = HEAP16[$3 >> 1] | 0;
    if (!(($20 & 255) << 24 >> 24)) {
     if (($20 & 65535) >= 256) if (!(HEAP32[$16 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[$15 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[$16 >> 2] & 2)) break L4;
    }
    HEAP8[$3 >> 0] = 0;
    HEAP8[$6 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $12 >>> 0);
  } while (0);
  HEAP8[$3 >> 0] = $5;
  HEAP8[$6 >> 0] = $8;
 }
 return;
}

function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$0$i$i = 0, $$01$i$i = 0, $0 = 0, $10 = 0, $12 = 0, $16 = 0, $17 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $4 = 0, $__ig$0 = 0, $__r$0 = 0, $or$cond2 = 0, label = 0;
 $0 = HEAP8[$__grouping >> 0] | 0;
 $3 = $__grouping + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 do if ((($0 & 1) == 0 ? ($0 & 255) >>> 1 : $4) | 0) {
  if (($__g | 0) == ($__g_end | 0)) {
   $16 = $0;
   $24 = $4;
  } else {
   $$0$i$i = $__g_end;
   $$01$i$i = $__g;
   while (1) {
    $10 = $$0$i$i + -4 | 0;
    if ($$01$i$i >>> 0 >= $10 >>> 0) break;
    $12 = HEAP32[$$01$i$i >> 2] | 0;
    HEAP32[$$01$i$i >> 2] = HEAP32[$10 >> 2];
    HEAP32[$10 >> 2] = $12;
    $$0$i$i = $10;
    $$01$i$i = $$01$i$i + 4 | 0;
   }
   $16 = HEAP8[$__grouping >> 0] | 0;
   $24 = HEAP32[$3 >> 2] | 0;
  }
  $17 = ($16 & 1) == 0;
  $21 = $17 ? $__grouping + 1 | 0 : HEAP32[$__grouping + 8 >> 2] | 0;
  $27 = $__g_end + -4 | 0;
  $28 = $21 + ($17 ? ($16 & 255) >>> 1 : $24) | 0;
  $__ig$0 = $21;
  $__r$0 = $__g;
  while (1) {
   $30 = HEAP8[$__ig$0 >> 0] | 0;
   $or$cond2 = $30 << 24 >> 24 < 1 | $30 << 24 >> 24 == 127;
   if ($__r$0 >>> 0 >= $27 >>> 0) break;
   if (!$or$cond2) if (($30 << 24 >> 24 | 0) != (HEAP32[$__r$0 >> 2] | 0)) {
    label = 10;
    break;
   }
   $__ig$0 = ($28 - $__ig$0 | 0) > 1 ? $__ig$0 + 1 | 0 : $__ig$0;
   $__r$0 = $__r$0 + 4 | 0;
  }
  if ((label | 0) == 10) {
   HEAP32[$__err >> 2] = 4;
   break;
  }
  if (!$or$cond2) if (((HEAP32[$27 >> 2] | 0) + -1 | 0) >>> 0 >= $30 << 24 >> 24 >>> 0) HEAP32[$__err >> 2] = 4;
 } while (0);
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__nar = 0, $__o = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 180 | 0;
 $__nar = sp + 160 | 0;
 $__o = sp + 8 | 0;
 $0 = sp + 156 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[3671440] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3671441] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3671442] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3671443] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3671444] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3671445] | 0;
 $2 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $3 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $2, $__fmt, $$byval_copy) | 0;
 $4 = $__nar + $3 | 0;
 $5 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $4, $__iob) | 0;
 $6 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $6;
 $7 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677412) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($6) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 7]($7, $__nar, $4, $__o) | 0;
 $11 = $__o + ($3 << 2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $18 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, ($5 | 0) == ($4 | 0) ? $11 : $__o + ($5 - $__nar << 2) | 0, $11, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $18 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($this, $__s, $__iob, $__fl, $__v) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__fmt = 0, $__nar = 0, $__o = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 72 | 0;
 $__nar = sp + 52 | 0;
 $__o = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt >> 0] = HEAP8[3671440] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3671441] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3671442] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3671443] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3671444] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3671445] | 0;
 $2 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $3 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $2, $__fmt, $$byval_copy) | 0;
 $4 = $__nar + $3 | 0;
 $5 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $4, $__iob) | 0;
 $6 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $6;
 $7 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($6) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 32 >> 2] & 7]($7, $__nar, $4, $__o) | 0;
 $11 = $__o + $3 | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 $18 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, ($5 | 0) == ($4 | 0) ? $11 : $__o + ($5 - $__nar) | 0, $11, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $18 | 0;
}

function __ZNSt3__110__stdinbufIwE9pbackfailEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $1 = 0, $11 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 8 | 0;
 $__ci = sp + 4 | 0;
 $__inxt = sp;
 $1 = $this + 52 | 0;
 $3 = (HEAP8[$1 >> 0] | 0) != 0;
 L1 : do if (($__c | 0) == -1) if ($3) $$1 = -1; else {
  $5 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1;
  $$1 = $5;
 } else {
  do if ($3) {
   $8 = $this + 48 | 0;
   HEAP32[$__ci >> 2] = HEAP32[$8 >> 2];
   $11 = HEAP32[$this + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] & 15]($11, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 4 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
   case 1:
   case 2:
    {
     $$1 = -1;
     break L1;
     break;
    }
   case 3:
    {
     HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2];
     HEAP32[$__enxt >> 2] = $__extbuf + 1;
     break;
    }
   default:
    {}
   }
   $23 = $this + 32 | 0;
   while (1) {
    $24 = HEAP32[$__enxt >> 2] | 0;
    if ($24 >>> 0 <= $__extbuf >>> 0) {
     label = 13;
     break;
    }
    $26 = $24 + -1 | 0;
    HEAP32[$__enxt >> 2] = $26;
    if ((_ungetc(HEAP8[$26 >> 0] | 0, HEAP32[$23 >> 2] | 0) | 0) == -1) {
     label = 12;
     break;
    }
   }
   if ((label | 0) == 12) {
    $$1 = -1;
    break L1;
   } else if ((label | 0) == 13) {
    $$pre$phiZ2D = $8;
    break;
   }
  } else $$pre$phiZ2D = $this + 48 | 0; while (0);
  HEAP32[$$pre$phiZ2D >> 2] = $__c;
  HEAP8[$1 >> 0] = 1;
  $$1 = $__c;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__110__stdinbufIcE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $1 = 0, $12 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 4 | 0;
 $__ci = sp + 8 | 0;
 $__inxt = sp;
 $1 = $this + 52 | 0;
 $3 = (HEAP8[$1 >> 0] | 0) != 0;
 L1 : do if (($__c | 0) == -1) if ($3) $$1 = -1; else {
  $5 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1;
  $$1 = $5;
 } else {
  do if ($3) {
   $8 = $this + 48 | 0;
   HEAP8[$__ci >> 0] = HEAP32[$8 >> 2];
   $12 = HEAP32[$this + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 15]($12, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 1 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0) {
   case 1:
   case 2:
    {
     $$1 = -1;
     break L1;
     break;
    }
   case 3:
    {
     HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2];
     HEAP32[$__enxt >> 2] = $__extbuf + 1;
     break;
    }
   default:
    {}
   }
   $24 = $this + 32 | 0;
   while (1) {
    $25 = HEAP32[$__enxt >> 2] | 0;
    if ($25 >>> 0 <= $__extbuf >>> 0) {
     label = 13;
     break;
    }
    $27 = $25 + -1 | 0;
    HEAP32[$__enxt >> 2] = $27;
    if ((_ungetc(HEAP8[$27 >> 0] | 0, HEAP32[$24 >> 2] | 0) | 0) == -1) {
     label = 12;
     break;
    }
   }
   if ((label | 0) == 12) {
    $$1 = -1;
    break L1;
   } else if ((label | 0) == 13) {
    $$pre$phiZ2D = $8;
    break;
   }
  } else $$pre$phiZ2D = $this + 48 | 0; while (0);
  HEAP32[$$pre$phiZ2D >> 2] = $__c;
  HEAP8[$1 >> 0] = 1;
  $$1 = $__c;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 204 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 20 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3671435, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$2 >> 2] = $19;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 $23 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $23 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 196 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 20 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3671435, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$2 >> 2] = $19;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 $23 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $23 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 75 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 20 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3671435, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$2 >> 2] = $19;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 $23 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $23 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($this, $__s, $__iob, $__fl, $0, $1) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 74 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 20 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3671435, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 $19 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$2 >> 2] = $19;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv($19) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 $23 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $__o, $21, $22, $__iob, $__fl) | 0;
 STACKTOP = sp;
 return $23 | 0;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $15 = 0, $2 = 0, $27 = 0, $30 = 0, $31 = 0, $7 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iov = sp + 32 | 0;
 HEAP32[$iov >> 2] = $buf;
 $0 = $iov + 4 | 0;
 $1 = $f + 48 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 >> 2] = $len - (($2 | 0) != 0 & 1);
 $7 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$iov + 12 >> 2] = $2;
 if (!(HEAP32[918945] | 0)) {
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer3 + 4 >> 2] = $iov;
  HEAP32[$vararg_buffer3 + 8 >> 2] = 2;
  $cnt$0 = ___syscall_ret(___syscall145(145, $vararg_buffer3 | 0) | 0) | 0;
 } else {
  _pthread_cleanup_push(107, $f | 0);
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $iov;
  HEAP32[$vararg_buffer + 8 >> 2] = 2;
  $15 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 if (($cnt$0 | 0) < 1) {
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | $cnt$0 & 48 ^ 16;
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0 >> 2] | 0;
  if ($cnt$0 >>> 0 > $27 >>> 0) {
   $30 = HEAP32[$7 >> 2] | 0;
   $31 = $f + 4 | 0;
   HEAP32[$31 >> 2] = $30;
   $$cast = $30;
   HEAP32[$f + 8 >> 2] = $$cast + ($cnt$0 - $27);
   if (!(HEAP32[$1 >> 2] | 0)) $$0 = $len; else {
    HEAP32[$31 >> 2] = $$cast + 1;
    HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
    $$0 = $len;
   }
  } else $$0 = $cnt$0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $1 = 0, $14 = 0, $16 = 0, $20 = 0, $22 = 0, $28 = 0, $4 = 0, $41 = 0, $8 = 0, $__new_data$0 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 if ($__res_arg >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $22 = 10;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $22 = ($4 & -2) + -1 | 0;
  $8 = $4 & 255;
 }
 if (!($8 & 1)) $14 = ($8 & 255) >>> 1; else $14 = HEAP32[$this + 4 >> 2] | 0;
 $16 = $14 >>> 0 > $__res_arg >>> 0 ? $14 : $__res_arg;
 if ($16 >>> 0 < 11) $20 = 10; else $20 = ($16 + 16 & -16) + -1 | 0;
 do if (($20 | 0) != ($22 | 0)) {
  do if (($20 | 0) == 10) {
   $__new_data$0 = $this + 1 | 0;
   $__now_long$0$off0 = 0;
   $__p$0 = HEAP32[$this + 8 >> 2] | 0;
   $__was_long$0$off0 = 1;
  } else {
   $28 = __Znwj($20 + 1 | 0) | 0;
   if (!($8 & 1)) {
    $__new_data$0 = $28;
    $__now_long$0$off0 = 1;
    $__p$0 = $this + 1 | 0;
    $__was_long$0$off0 = 0;
    break;
   } else {
    $__new_data$0 = $28;
    $__now_long$0$off0 = 1;
    $__p$0 = HEAP32[$this + 8 >> 2] | 0;
    $__was_long$0$off0 = 1;
    break;
   }
  } while (0);
  if (!($8 & 1)) $41 = ($8 & 255) >>> 1; else $41 = HEAP32[$this + 4 >> 2] | 0;
  _memcpy($__new_data$0 | 0, $__p$0 | 0, $41 + 1 | 0) | 0;
  if ($__was_long$0$off0) __ZdlPv($__p$0);
  if ($__now_long$0$off0) {
   HEAP32[$this >> 2] = $20 + 1 | 1;
   HEAP32[$this + 4 >> 2] = $14;
   HEAP32[$this + 8 >> 2] = $__new_data$0;
   break;
  } else {
   HEAP8[$this >> 0] = $14 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $1 = 0, $14 = 0, $16 = 0, $20 = 0, $22 = 0, $29 = 0, $4 = 0, $42 = 0, $8 = 0, $__new_data$0 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 if ($__res_arg >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $22 = 1;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $22 = ($4 & -2) + -1 | 0;
  $8 = $4 & 255;
 }
 if (!($8 & 1)) $14 = ($8 & 255) >>> 1; else $14 = HEAP32[$this + 4 >> 2] | 0;
 $16 = $14 >>> 0 > $__res_arg >>> 0 ? $14 : $__res_arg;
 if ($16 >>> 0 < 2) $20 = 1; else $20 = ($16 + 4 & -4) + -1 | 0;
 do if (($20 | 0) != ($22 | 0)) {
  do if (($20 | 0) == 1) {
   $__new_data$0 = $this + 4 | 0;
   $__now_long$0$off0 = 0;
   $__p$0 = HEAP32[$this + 8 >> 2] | 0;
   $__was_long$0$off0 = 1;
  } else {
   $29 = __Znwj(($20 << 2) + 4 | 0) | 0;
   if (!($8 & 1)) {
    $__new_data$0 = $29;
    $__now_long$0$off0 = 1;
    $__p$0 = $this + 4 | 0;
    $__was_long$0$off0 = 0;
    break;
   } else {
    $__new_data$0 = $29;
    $__now_long$0$off0 = 1;
    $__p$0 = HEAP32[$this + 8 >> 2] | 0;
    $__was_long$0$off0 = 1;
    break;
   }
  } while (0);
  if (!($8 & 1)) $42 = ($8 & 255) >>> 1; else $42 = HEAP32[$this + 4 >> 2] | 0;
  _wmemcpy($__new_data$0, $__p$0, $42 + 1 | 0) | 0;
  if ($__was_long$0$off0) __ZdlPv($__p$0);
  if ($__now_long$0$off0) {
   HEAP32[$this >> 2] = $20 + 1 | 1;
   HEAP32[$this + 4 >> 2] = $14;
   HEAP32[$this + 8 >> 2] = $__new_data$0;
   break;
  } else {
   HEAP8[$this >> 0] = $14 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$0$i = 0, $$0$i6 = 0, $14 = 0, $2 = 0, $29 = 0, $33 = 0, $4 = 0, $8 = 0, $__i$0$i$i = 0, $__i$0$i$i2 = 0, $__ndflt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__ndflt = sp;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$__ndflt + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $2 = HEAP8[$__dflt >> 0] | 0;
 $4 = ($2 & 1) == 0;
 $8 = $4 ? $__dflt + 1 | 0 : HEAP32[$__dflt + 8 >> 2] | 0;
 $14 = $8 + ($4 ? ($2 & 255) >>> 1 : HEAP32[$__dflt + 4 >> 2] | 0) | 0;
 $$0$i6 = $8;
 while (1) {
  if ($$0$i6 >>> 0 >= $14 >>> 0) break;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$$0$i6 >> 0] | 0);
  $$0$i6 = $$0$i6 + 1 | 0;
 }
 $29 = _catgets(($__c | 0) == -1 ? -1 : $__c << 1, $__set, $__msgid, (HEAP8[$__ndflt >> 0] & 1) == 0 ? $__ndflt + 1 | 0 : HEAP32[$__ndflt + 8 >> 2] | 0) | 0;
 $__i$0$i$i2 = 0;
 while (1) {
  if (($__i$0$i$i2 | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i2 << 2) >> 2] = 0;
  $__i$0$i$i2 = $__i$0$i$i2 + 1 | 0;
 }
 $33 = $29 + (_strlen($29) | 0) | 0;
 $$0$i = $29;
 while (1) {
  if ($$0$i >>> 0 >= $33 >>> 0) break;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, HEAP8[$$0$i >> 0] | 0);
  $$0$i = $$0$i + 1 | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $37 = 0, $9 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 12 | 0;
 $__s = sp;
 $1 = sp + 8 | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this);
 if (HEAP8[$__s >> 0] | 0) {
  HEAP32[$1 >> 2] = __ZNKSt3__18ios_base6getlocEv($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  $9 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 3677436) | 0;
  __ZNSt3__16localeD2Ev($1);
  $13 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0;
  $15 = HEAP32[$13 + 24 >> 2] | 0;
  $16 = $13 + 76 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  if (($17 | 0) == -1) {
   HEAP32[$$byval_copy >> 2] = __ZNKSt3__18ios_base6getlocEv($13) | 0;
   $20 = __ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy, 3677380) | 0;
   $24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] & 15]($20, 32) | 0;
   __ZNSt3__16localeD2Ev($$byval_copy);
   $25 = $24 << 24 >> 24;
   HEAP32[$16 >> 2] = $25;
   $27 = $25;
  } else $27 = $17;
  $30 = HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$0 >> 2] = $15;
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  if (!(FUNCTION_TABLE_iiiiii[$30 & 31]($9, $$byval_copy, $13, $27 & 255, $__n) | 0)) {
   $37 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
   HEAP32[$37 >> 2] = HEAP32[$37 >> 2] | 5;
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp, $__len, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$2$ph = 0, $11 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $specify_precision$0$off0$ph = 0;
 if (!($__flags & 2048)) $$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 1024)) $$1 = $$0; else {
  HEAP8[$$0 >> 0] = 35;
  $$1 = $$0 + 1 | 0;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6 | 0) == 260;
 if ($8) {
  $$2$ph = $$1;
  $specify_precision$0$off0$ph = 0;
 } else {
  HEAP8[$$1 >> 0] = 46;
  HEAP8[$$1 + 1 >> 0] = 42;
  $$2$ph = $$1 + 2 | 0;
  $specify_precision$0$off0$ph = 1;
 }
 $$01 = $__len;
 $$2 = $$2$ph;
 while (1) {
  $11 = HEAP8[$$01 >> 0] | 0;
  if (!($11 << 24 >> 24)) {
   $$2$lcssa = $$2;
   break;
  }
  HEAP8[$$2 >> 0] = $11;
  $$01 = $$01 + 1 | 0;
  $$2 = $$2 + 1 | 0;
 }
 L14 : do switch ($6 | 0) {
 case 4:
  {
   if (!($7 & 1)) {
    HEAP8[$$2$lcssa >> 0] = 102;
    break L14;
   } else {
    HEAP8[$$2$lcssa >> 0] = 70;
    break L14;
   }
   break;
  }
 case 256:
  {
   if (!($7 & 1)) {
    HEAP8[$$2$lcssa >> 0] = 101;
    break L14;
   } else {
    HEAP8[$$2$lcssa >> 0] = 69;
    break L14;
   }
   break;
  }
 default:
  {
   $20 = ($7 & 1 | 0) != 0;
   if ($8) if ($20) {
    HEAP8[$$2$lcssa >> 0] = 65;
    break L14;
   } else {
    HEAP8[$$2$lcssa >> 0] = 97;
    break L14;
   } else if ($20) {
    HEAP8[$$2$lcssa >> 0] = 71;
    break L14;
   } else {
    HEAP8[$$2$lcssa >> 0] = 103;
    break L14;
   }
  }
 } while (0);
 return $specify_precision$0$off0$ph | 0;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $11 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $30 = 0, $34 = 0, $6 = 0, $8 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36 | 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 | 0) {
   $6 = $2 + 48 | 0;
   $8 = HEAP32[$6 >> 2] | 0;
   $11 = HEAP32[$6 + 4 >> 2] | 0;
   if (!(($8 & -256 | 0) == 1126902528 & ($11 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[4628];
    _abort_message(3673736, $vararg_buffer7);
   }
   if (($8 | 0) == 1126902529 & ($11 | 0) == 1129074247) $21 = HEAP32[$2 + 44 >> 2] | 0; else $21 = $2 + 80 | 0;
   HEAP32[$thrown_object >> 2] = $21;
   $22 = HEAP32[$2 >> 2] | 0;
   $24 = HEAP32[$22 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[364] | 0) + 16 >> 2] & 31](1456, $22, $thrown_object) | 0) {
    $29 = HEAP32[$thrown_object >> 2] | 0;
    $30 = HEAP32[4628] | 0;
    $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 8 >> 2] & 63]($29) | 0;
    HEAP32[$vararg_buffer >> 2] = $30;
    HEAP32[$vararg_buffer + 4 >> 2] = $24;
    HEAP32[$vararg_buffer + 8 >> 2] = $34;
    _abort_message(3673650, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[4628];
    HEAP32[$vararg_buffer3 + 4 >> 2] = $24;
    _abort_message(3673695, $vararg_buffer3);
   }
  }
 }
 _abort_message(3673774, $vararg_buffer10);
}

function __ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap($this, $bitmap_data, $bmp) {
 $this = $this | 0;
 $bitmap_data = $bitmap_data | 0;
 $bmp = $bmp | 0;
 var $0 = 0, $1 = 0, $13 = 0, $17 = 0, $19 = 0, $25 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $8 = 0, $rect = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rect = sp;
 $0 = HEAP16[$bitmap_data >> 1] | 0;
 $1 = $0 & 65535;
 $3 = HEAP16[$bitmap_data + 2 >> 1] | 0;
 $4 = $3 & 65535;
 $8 = (HEAPU16[$bitmap_data + 4 >> 1] | 0) - $1 | 0;
 $13 = (HEAPU16[$bitmap_data + 6 >> 1] | 0) - $4 | 0;
 $17 = (($13 | $8) & 32768 | 0) == 0;
 $19 = HEAP32[$this + 52 >> 2] | 0;
 $25 = ((($19 >>> 16) + 65535 | $19 + 65535) & 32768 | 0) == 0;
 $27 = $0 << 16 >> 16 > 0 ? $0 : 0;
 $30 = $3 << 16 >> 16 > 0 ? $3 : 0;
 $32 = $25 ? $19 << 16 >> 16 : 0;
 $35 = ($17 ? $8 + 1 | 0 : 0) + $1 << 16 >> 16;
 $38 = $25 ? $19 >> 16 : 0;
 $41 = ($17 ? $13 + 1 | 0 : 0) + $4 << 16 >> 16;
 $44 = (($35 | 0) < ($32 | 0) ? $35 : $32) - ($27 << 16 >> 16) | 0;
 $46 = (($41 | 0) < ($38 | 0) ? $41 : $38) - ($30 << 16 >> 16) | 0;
 HEAP16[$rect >> 1] = $27;
 HEAP16[$rect + 2 >> 1] = $30;
 $49 = $rect + 4 | 0;
 HEAP16[$49 >> 1] = $44;
 $50 = $rect + 6 | 0;
 HEAP16[$50 >> 1] = $46;
 if (!(($46 + 65535 | $44 + 65535) & 32768)) {
  __ZN12Front_JS_SDL8draw_bmpERK4RectRK6Bitmap($this, $rect, $bmp);
  STACKTOP = sp;
  return;
 }
 HEAP16[$49 >> 1] = 0;
 HEAP16[$50 >> 1] = 0;
 __ZN12Front_JS_SDL8draw_bmpERK4RectRK6Bitmap($this, $rect, $bmp);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i = 0, $$0$i3 = 0, $$pre$i1 = 0, $1 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $3 = 0, $8 = 0, $__v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 $2 = $this + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($1 - $3 >> 2 >>> 0 < $__n >>> 0) {
  $14 = HEAP32[$this >> 2] | 0;
  $16 = $3 - $14 >> 2;
  $17 = $16 + $__n | 0;
  if ($17 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  $19 = $1 - $14 | 0;
  if ($19 >> 2 >>> 0 < 536870911) {
   $22 = $19 >> 1;
   $$0$i3 = $22 >>> 0 < $17 >>> 0 ? $17 : $22;
  } else $$0$i3 = 1073741823;
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v, $$0$i3, $16, $this + 16 | 0);
  $25 = $__v + 8 | 0;
  $$pre$i1 = HEAP32[$25 >> 2] | 0;
  _memset($$pre$i1 | 0, 0, $__n << 2 | 0) | 0;
  HEAP32[$25 >> 2] = $$pre$i1 + ($__n << 2);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else {
  $$0$i = $__n;
  $8 = $3;
  do {
   HEAP32[$8 >> 2] = 0;
   $8 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
   HEAP32[$2 >> 2] = $8;
   $$0$i = $$0$i + -1 | 0;
  } while (($$0$i | 0) != 0);
 }
 STACKTOP = sp;
 return;
}

function _mbtowc($wc, $src, $n) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $29 = 0, $3 = 0, $33 = 0, $38 = 0, $4 = 0, $42 = 0, $8 = 0, $dummy = 0, $dummy$wc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $dummy = sp;
 L1 : do if (!$src) $$0 = 0; else {
  do if ($n | 0) {
   $dummy$wc = ($wc | 0) == 0 ? $dummy : $wc;
   $3 = HEAP8[$src >> 0] | 0;
   $4 = $3 & 255;
   if ($3 << 24 >> 24 > -1) {
    HEAP32[$dummy$wc >> 2] = $4;
    $$0 = $3 << 24 >> 24 != 0 & 1;
    break L1;
   }
   $8 = $4 + -194 | 0;
   if ($8 >>> 0 <= 50) {
    $10 = $src + 1 | 0;
    $12 = HEAP32[11672 + ($8 << 2) >> 2] | 0;
    if ($n >>> 0 < 4) if ($12 & -2147483648 >>> (($n * 6 | 0) + -6 | 0) | 0) break;
    $20 = HEAPU8[$10 >> 0] | 0;
    $21 = $20 >>> 3;
    if (($21 + -16 | $21 + ($12 >> 26)) >>> 0 <= 7) {
     $29 = $20 + -128 | $12 << 6;
     if (($29 | 0) >= 0) {
      HEAP32[$dummy$wc >> 2] = $29;
      $$0 = 2;
      break L1;
     }
     $33 = HEAPU8[$src + 2 >> 0] | 0;
     if (($33 & 192 | 0) == 128) {
      $38 = $33 + -128 | $29 << 6;
      if (($38 | 0) >= 0) {
       HEAP32[$dummy$wc >> 2] = $38;
       $$0 = 3;
       break L1;
      }
      $42 = HEAPU8[$src + 3 >> 0] | 0;
      if (($42 & 192 | 0) == 128) {
       HEAP32[$dummy$wc >> 2] = $42 + -128 | $38 << 6;
       $$0 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $34 = 0, $9 = 0;
 if ((1073741806 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $21 = $this + 4 | 0; else $21 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  $18 = $12 >>> 0 < 2 ? 2 : $12 + 4 & -4;
 } else $18 = 1073741807;
 $19 = __Znwj($18 << 2) | 0;
 if ($__n_copy | 0) _wmemcpy($19, $21, $__n_copy) | 0;
 if ($__n_add | 0) _wmemcpy($19 + ($__n_copy << 2) | 0, $__p_new_stuff, $__n_add) | 0;
 $24 = $__old_sz - $__n_del | 0;
 if (($24 | 0) != ($__n_copy | 0)) _wmemcpy($19 + ($__n_copy << 2) + ($__n_add << 2) | 0, $21 + ($__n_copy << 2) + ($__n_del << 2) | 0, $24 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 1) __ZdlPv($21);
 HEAP32[$this + 8 >> 2] = $19;
 HEAP32[$this >> 2] = $18 | 1;
 $34 = $24 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $34;
 HEAP32[$19 + ($34 << 2) >> 2] = 0;
 return;
}

function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$0$i$i = 0, $$sroa$02$0$i = 0, $$sroa$02$0$i$lcssa = 0, $$sroa$02$1$i = 0, $10 = 0, $20 = 0, $4 = 0, $7 = 0, $9 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__nar = sp + 4 | 0;
 $__ne = sp;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $4 = HEAP32[$__ne >> 2] | 0;
 $$0$i$i = $__nar;
 $$sroa$02$0$i = HEAP32[$__s >> 2] | 0;
 while (1) {
  if (($$0$i$i | 0) == ($4 | 0)) {
   $$sroa$02$0$i$lcssa = $$sroa$02$0$i;
   break;
  }
  $7 = HEAP8[$$0$i$i >> 0] | 0;
  do if (!$$sroa$02$0$i) $$sroa$02$1$i = 0; else {
   $9 = $$sroa$02$0$i + 24 | 0;
   $10 = HEAP32[$9 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$$sroa$02$0$i + 28 >> 2] | 0)) {
    $20 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$sroa$02$0$i >> 2] | 0) + 52 >> 2] & 15]($$sroa$02$0$i, $7 & 255) | 0) == -1;
    $$sroa$02$1$i = $20 ? 0 : $$sroa$02$0$i;
    break;
   } else {
    HEAP32[$9 >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $7;
    $$sroa$02$1$i = $$sroa$02$0$i;
    break;
   }
  } while (0);
  $$0$i$i = $$0$i$i + 1 | 0;
  $$sroa$02$0$i = $$sroa$02$1$i;
 }
 STACKTOP = sp;
 return $$sroa$02$0$i$lcssa | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $33 = 0, $9 = 0;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $20 = $this + 1 | 0; else $20 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  $17 = $12 >>> 0 < 11 ? 11 : $12 + 16 & -16;
 } else $17 = -17;
 $18 = __Znwj($17) | 0;
 if ($__n_copy | 0) _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0;
 if ($__n_add | 0) _memcpy($18 + $__n_copy | 0, $__p_new_stuff | 0, $__n_add | 0) | 0;
 $23 = $__old_sz - $__n_del | 0;
 if (($23 | 0) != ($__n_copy | 0)) _memcpy($18 + $__n_copy + $__n_add | 0, $20 + $__n_copy + $__n_del | 0, $23 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 10) __ZdlPv($20);
 HEAP32[$this + 8 >> 2] = $18;
 HEAP32[$this >> 2] = $17 | 1;
 $33 = $23 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $33;
 HEAP8[$18 + $33 >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $33 = 0, $40 = 0, $8 = 0, $__p$0 = 0, $scevgep1 = 0;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $15 = ($1 & 255) >>> 1;
  $16 = 10;
  $40 = $1;
 } else {
  $8 = HEAP32[$this >> 2] | 0;
  $15 = HEAP32[$this + 4 >> 2] | 0;
  $16 = ($8 & -2) + -1 | 0;
  $40 = $8 & 255;
 }
 $12 = $__last - $0 | 0;
 do if (($__last | 0) != ($__first | 0)) {
  if (($16 - $15 | 0) >>> 0 < $12 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $16, $15 + $12 - $16 | 0, $15, $15, 0, 0);
   $21 = HEAP8[$this >> 0] | 0;
  } else $21 = $40;
  if (!($21 & 1)) $27 = $this + 1 | 0; else $27 = HEAP32[$this + 8 >> 2] | 0;
  $scevgep1 = $__last + ($15 - $0) | 0;
  $$0 = $__first;
  $__p$0 = $27 + $15 | 0;
  while (1) {
   if (($$0 | 0) == ($__last | 0)) break;
   HEAP8[$__p$0 >> 0] = HEAP8[$$0 >> 0] | 0;
   $$0 = $$0 + 1 | 0;
   $__p$0 = $__p$0 + 1 | 0;
  }
  HEAP8[$27 + $scevgep1 >> 0] = 0;
  $33 = $15 + $12 | 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $33 << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $33;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$02$0$i = 0, $$sroa$02$0$i$lcssa = 0, $$sroa$02$1$i = 0, $10 = 0, $4 = 0, $7 = 0, $9 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $__nar = sp + 8 | 0;
 $__ne = sp;
 HEAP32[$__ne >> 2] = $__nar + 400;
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $4 = HEAP32[$__ne >> 2] | 0;
 $$0$i$i = $__nar;
 $$sroa$02$0$i = HEAP32[$__s >> 2] | 0;
 while (1) {
  if (($$0$i$i | 0) == ($4 | 0)) {
   $$sroa$02$0$i$lcssa = $$sroa$02$0$i;
   break;
  }
  $7 = HEAP32[$$0$i$i >> 2] | 0;
  if (!$$sroa$02$0$i) $$sroa$02$1$i = 0; else {
   $9 = $$sroa$02$0$i + 24 | 0;
   $10 = HEAP32[$9 >> 2] | 0;
   if (($10 | 0) == (HEAP32[$$sroa$02$0$i + 28 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$$sroa$02$0$i >> 2] | 0) + 52 >> 2] & 15]($$sroa$02$0$i, $7) | 0; else {
    HEAP32[$9 >> 2] = $10 + 4;
    HEAP32[$10 >> 2] = $7;
    $$0$i$i$i$i = $7;
   }
   $$sroa$02$1$i = ($$0$i$i$i$i | 0) == -1 ? 0 : $$sroa$02$0$i;
  }
  $$0$i$i = $$0$i$i + 4 | 0;
  $$sroa$02$0$i = $$sroa$02$1$i;
 }
 STACKTOP = sp;
 return $$sroa$02$0$i$lcssa | 0;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $11 = 0, $19 = 0, $29 = 0, $6 = 0, $7 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0, $i$1 = 0, label = 0;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) if (!(___towrite($f) | 0)) {
  $9 = HEAP32[$0 >> 2] | 0;
  label = 5;
 } else $$0 = 0; else {
  $9 = $1;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $6 = $f + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $11 = $7;
  if (($9 - $7 | 0) >>> 0 < $l >>> 0) {
   $$0 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
   $i$0 = $l;
   while (1) {
    if (!$i$0) {
     $$01 = $l;
     $$02 = $s;
     $29 = $11;
     $i$1 = 0;
     break L10;
    }
    $19 = $i$0 + -1 | 0;
    if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
     $i$0$lcssa12 = $i$0;
     break;
    } else $i$0 = $19;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $i$0$lcssa12) | 0) >>> 0 < $i$0$lcssa12 >>> 0) {
    $$0 = $i$0$lcssa12;
    break L5;
   }
   $$01 = $l - $i$0$lcssa12 | 0;
   $$02 = $s + $i$0$lcssa12 | 0;
   $29 = HEAP32[$6 >> 2] | 0;
   $i$1 = $i$0$lcssa12;
  } else {
   $$01 = $l;
   $$02 = $s;
   $29 = $11;
   $i$1 = 0;
  } while (0);
  _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $$01;
  $$0 = $i$1 + $$01 | 0;
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $13 = 0, $16 = 0, $17 = 0, $22 = 0, $28 = 0, $32 = 0, $37 = 0, $44 = 0, $8 = 0, $__p$0 = 0;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $16 = ($1 & 255) >>> 1;
  $17 = 1;
  $44 = $1;
 } else {
  $8 = HEAP32[$this >> 2] | 0;
  $16 = HEAP32[$this + 4 >> 2] | 0;
  $17 = ($8 & -2) + -1 | 0;
  $44 = $8 & 255;
 }
 $13 = $__last - $0 >> 2;
 do if ($13 | 0) {
  if (($17 - $16 | 0) >>> 0 < $13 >>> 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $17, $16 + $13 - $17 | 0, $16, $16, 0, 0);
   $22 = HEAP8[$this >> 0] | 0;
  } else $22 = $44;
  if (!($22 & 1)) $28 = $this + 4 | 0; else $28 = HEAP32[$this + 8 >> 2] | 0;
  $32 = $16 + (($__last - $0 | 0) >>> 2) | 0;
  $$0 = $__first;
  $__p$0 = $28 + ($16 << 2) | 0;
  while (1) {
   if (($$0 | 0) == ($__last | 0)) break;
   HEAP32[$__p$0 >> 2] = HEAP32[$$0 >> 2];
   $$0 = $$0 + 4 | 0;
   $__p$0 = $__p$0 + 4 | 0;
  }
  HEAP32[$28 + ($32 << 2) >> 2] = 0;
  $37 = $16 + $13 | 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $37 << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $37;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0, $22 = 0, $23 = 0, $29 = 0, $31 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 63]($1) | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 if (!($6 & 1)) $23 = ($6 & 255) >>> 1; else $23 = HEAP32[$5 + 4 >> 2] | 0;
 $14 = HEAP8[$5 + 12 >> 0] | 0;
 if (!($14 & 1)) $22 = ($14 & 255) >>> 1; else $22 = HEAP32[$5 + 16 >> 2] | 0;
 do if (($23 | 0) == (0 - $22 | 0)) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; else {
  HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  $29 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 24 | 0, $__ct, $__err, 0) | 0;
  $31 = HEAP32[$__h >> 2] | 0;
  if (($29 | 0) == ($5 | 0) & ($31 | 0) == 12) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($31 | 0) < 12 & ($29 - $5 | 0) == 12) HEAP32[$__h >> 2] = $31 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0, $22 = 0, $23 = 0, $29 = 0, $31 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 63]($1) | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 if (!($6 & 1)) $23 = ($6 & 255) >>> 1; else $23 = HEAP32[$5 + 4 >> 2] | 0;
 $14 = HEAP8[$5 + 12 >> 0] | 0;
 if (!($14 & 1)) $22 = ($14 & 255) >>> 1; else $22 = HEAP32[$5 + 16 >> 2] | 0;
 do if (($23 | 0) == (0 - $22 | 0)) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; else {
  HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
  $29 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 24 | 0, $__ct, $__err, 0) | 0;
  $31 = HEAP32[$__h >> 2] | 0;
  if (($29 | 0) == ($5 | 0) & ($31 | 0) == 12) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($31 | 0) < 12 & ($29 - $5 | 0) == 12) HEAP32[$__h >> 2] = $31 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$phi$trans$insert3 = 0, $$pre = 0, $0 = 0, $1 = 0, $13 = 0, $18 = 0, $20 = 0, $25 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $41 = 0, $6 = 0, $9 = 0, label = 0;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) label = 3; else if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) label = 3; else label = 4;
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  if (($6 | 0) < 0) label = 4; else {
   $9 = HEAP32[$0 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (!$9) {
    $41 = $$pre;
    label = 9;
   } else {
    $13 = HEAP32[$f + 4 >> 2] | 0;
    $18 = $9 - (HEAP32[$f + 108 >> 2] | 0) | 0;
    $20 = $$pre;
    if (($$pre - $13 | 0) < ($18 | 0)) {
     $41 = $20;
     label = 9;
    } else {
     HEAP32[$f + 100 >> 2] = $13 + ($18 + -1);
     $25 = $20;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 100 >> 2] = $$pre;
    $25 = $41;
   }
   $$phi$trans$insert3 = $f + 4 | 0;
   if (!$25) $36 = HEAP32[$$phi$trans$insert3 >> 2] | 0; else {
    $27 = HEAP32[$$phi$trans$insert3 >> 2] | 0;
    $29 = $f + 108 | 0;
    HEAP32[$29 >> 2] = $25 + 1 - $27 + (HEAP32[$29 >> 2] | 0);
    $36 = $27;
   }
   $35 = $36 + -1 | 0;
   if ((HEAPU8[$35 >> 0] | 0 | 0) == ($6 | 0)) $$0 = $6; else {
    HEAP8[$35 >> 0] = $6;
    $$0 = $6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 100 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $$1 = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $5 = tempRet0;
  $6 = HEAP32[$1 >> 2] | 0;
  if (!$6) HEAP32[$1 >> 2] = $2;
  L7 : do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) {
   do if (($6 | 0) == 34) {
    HEAP32[$__err >> 2] = 4;
    if (($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 0) {
     $$0 = 2147483647;
     break L7;
    }
   } else {
    if (($5 | 0) < -1 | ($5 | 0) == -1 & $4 >>> 0 < 2147483648) {
     HEAP32[$__err >> 2] = 4;
     break;
    }
    if (($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 2147483647) {
     HEAP32[$__err >> 2] = 4;
     $$0 = 2147483647;
     break L7;
    } else {
     $$0 = $4;
     break L7;
    }
   } while (0);
   $$0 = -2147483648;
  } else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f;
 src = 11876;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $$01 = $b;
  $$02 = 1;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
 } else {
  $$01 = $s;
  $$02 = $n;
  label = 4;
 }
 if ((label | 0) == 4) {
  $5 = -2 - $$01 | 0;
  $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02;
  HEAP32[$f + 48 >> 2] = $$$02;
  $8 = $f + 20 | 0;
  HEAP32[$8 >> 2] = $$01;
  HEAP32[$f + 44 >> 2] = $$01;
  $10 = $$01 + $$$02 | 0;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $10;
  HEAP32[$f + 28 >> 2] = $10;
  $13 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$$$02) $$0 = $13; else {
   $15 = HEAP32[$8 >> 2] | 0;
   HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $9 = 0;
 if ((1073741807 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $21 = $this + 4 | 0; else $21 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  $18 = $12 >>> 0 < 2 ? 2 : $12 + 4 & -4;
 } else $18 = 1073741807;
 $19 = __Znwj($18 << 2) | 0;
 if ($__n_copy | 0) _wmemcpy($19, $21, $__n_copy) | 0;
 $22 = $__old_sz - $__n_del | 0;
 if (($22 | 0) != ($__n_copy | 0)) _wmemcpy($19 + ($__n_copy << 2) + ($__n_add << 2) | 0, $21 + ($__n_copy << 2) + ($__n_del << 2) | 0, $22 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 1) __ZdlPv($21);
 HEAP32[$this + 8 >> 2] = $19;
 HEAP32[$this >> 2] = $18 | 1;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $11 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = $this + 8 | 0;
 $6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 63]($2) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 $9 = HEAP8[$6 >> 0] | 0;
 $11 = ($9 & 1) == 0;
 $14 = $6 + 4 | 0;
 $15 = $11 ? $14 : HEAP32[$6 + 8 >> 2] | 0;
 $20 = $15 + (($11 ? ($9 & 255) >>> 1 : HEAP32[$14 >> 2] | 0) << 2) | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $21 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $15, $20) | 0;
 STACKTOP = sp;
 return $21 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $9 = 0;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $20 = $this + 1 | 0; else $20 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  $17 = $12 >>> 0 < 11 ? 11 : $12 + 16 & -16;
 } else $17 = -17;
 $18 = __Znwj($17) | 0;
 if ($__n_copy | 0) _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0;
 $21 = $__old_sz - $__n_del | 0;
 if (($21 | 0) != ($__n_copy | 0)) _memcpy($18 + $__n_copy + $__n_add | 0, $20 + $__n_copy + $__n_del | 0, $21 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 10) __ZdlPv($20);
 HEAP32[$this + 8 >> 2] = $18;
 HEAP32[$this >> 2] = $17 | 1;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $11 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = $this + 8 | 0;
 $6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 63]($2) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 $9 = HEAP8[$6 >> 0] | 0;
 $11 = ($9 & 1) == 0;
 $15 = $11 ? $6 + 1 | 0 : HEAP32[$6 + 8 >> 2] | 0;
 $21 = $15 + ($11 ? ($9 & 255) >>> 1 : HEAP32[$6 + 4 >> 2] | 0) | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $22 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $15, $21) | 0;
 STACKTOP = sp;
 return $22 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $16 = 0, $17 = 0, $22 = 0, $25 = 0, $5 = 0, $6 = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $5 = $info + 16 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if (!$6) {
   HEAP32[$5 >> 2] = $dst_ptr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($6 | 0) != ($dst_ptr | 0)) {
   $25 = $info + 36 | 0;
   HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $16 = $info + 24 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  if (($17 | 0) == 2) {
   HEAP32[$16 >> 2] = $path_below;
   $22 = $path_below;
  } else $22 = $17;
  if (($22 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) HEAP8[$info + 54 >> 0] = 1;
 } while (0);
 return;
}

function ___cxx_global_array_dtor_46($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678420);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678408);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678396);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678384);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678372);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678360);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678348);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678336);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678324);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678312);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678300);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678288);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678276);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(3678264);
 return;
}

function ___cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677608);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677596);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677584);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677572);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677560);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677548);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677536);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677524);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677512);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677500);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677488);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677476);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677464);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(3677452);
 return;
}

function __ZN10BGRPalette11classic_332Ev() {
 var $11 = 0, $16 = 0, $17 = 0, $9 = 0, $bindex$04$i = 0, $gindex$03$i = 0;
 if (HEAP8[3673968] | 0) return 3674632;
 if (!(___cxa_guard_acquire(3673968) | 0)) return 3674632; else $bindex$04$i = 0;
 do {
  $9 = $bindex$04$i << 4 | $bindex$04$i | $bindex$04$i << 6 | $bindex$04$i << 2;
  $gindex$03$i = 0;
  do {
   $11 = $gindex$03$i << 2;
   $16 = $9 | ($gindex$03$i << 5 | $11 | $gindex$03$i >>> 1) << 8;
   $17 = $11 | $bindex$04$i;
   HEAP32[3674632 + ($17 << 2) >> 2] = $16;
   HEAP32[3674632 + (($17 | 32) << 2) >> 2] = $16 | 2359296;
   HEAP32[3674632 + (($17 | 64) << 2) >> 2] = $16 | 4784128;
   HEAP32[3674632 + (($17 | 96) << 2) >> 2] = $16 | 7143424;
   HEAP32[3674632 + (($17 | 128) << 2) >> 2] = $16 | 9568256;
   HEAP32[3674632 + (($17 | 160) << 2) >> 2] = $16 | 11927552;
   HEAP32[3674632 + (($17 | 192) << 2) >> 2] = $16 | 14352384;
   HEAP32[3674632 + (($17 | 224) << 2) >> 2] = $16 | 16711680;
   $gindex$03$i = $gindex$03$i + 1 | 0;
  } while (($gindex$03$i | 0) != 8);
  $bindex$04$i = $bindex$04$i + 1 | 0;
 } while (($bindex$04$i | 0) != 4);
 ___cxa_guard_release(3673968);
 return 3674632;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else if (($this | 0) == (HEAP32[$info >> 2] | 0)) {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    HEAP32[$14 >> 2] = $current_ptr;
    $20 = $info + 40 | 0;
    HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $13 = 0, $14 = 0, $25 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$05 = $s;
  $7 = $0;
  $8 = $1;
  while (1) {
   $9 = ___uremdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $13 = $$05 + -1 | 0;
   HEAP8[$13 >> 0] = $9 | 48;
   $14 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   if ($8 >>> 0 > 9 | ($8 | 0) == 9 & $7 >>> 0 > 4294967295) {
    $$05 = $13;
    $7 = $14;
    $8 = tempRet0;
   } else {
    $$lcssa19 = $13;
    $28 = $14;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;
  $$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;
  $$01$lcssa$off0 = $0;
 }
 if (!$$01$lcssa$off0) $$1$lcssa = $$0$lcssa; else {
  $$12 = $$0$lcssa;
  $y$03 = $$01$lcssa$off0;
  while (1) {
   $25 = $$12 + -1 | 0;
   HEAP8[$25 >> 0] = ($y$03 >>> 0) % 10 | 0 | 48;
   if ($y$03 >>> 0 < 10) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;
    $y$03 = ($y$03 >>> 0) / 10 | 0;
   }
  }
 }
 return $$1$lcssa | 0;
}

function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677412) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] & 7]($1, 3671184, 3671216, $__atoms) | 0;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677420) | 0;
 HEAP32[$__decimal_point >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 63]($5) | 0;
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 63]($5) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $5);
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677380) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] & 7]($1, 3671184, 3671216, $__atoms) | 0;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677392) | 0;
 HEAP8[$__decimal_point >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 63]($5) | 0;
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 63]($5) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $5);
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0;
 STACKTOP = sp;
 return;
}

function _fflush($f) {
 $f = $f | 0;
 var $$0 = 0, $$012 = 0, $$014 = 0, $23 = 0, $27 = 0, $6 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0;
 do if (!$f) {
  if (!(HEAP32[2888] | 0)) $27 = 0; else $27 = _fflush(HEAP32[2888] | 0) | 0;
  ___lock(3675808);
  $$012 = HEAP32[918951] | 0;
  if (!$$012) $r$0$lcssa = $27; else {
   $$014 = $$012;
   $r$03 = $27;
   while (1) {
    if ((HEAP32[$$014 + 76 >> 2] | 0) > -1) $23 = ___lockfile($$014) | 0; else $23 = 0;
    if ((HEAP32[$$014 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$014 + 28 >> 2] | 0) >>> 0) $r$1 = ___fflush_unlocked($$014) | 0 | $r$03; else $r$1 = $r$03;
    if ($23 | 0) ___unlockfile($$014);
    $$014 = HEAP32[$$014 + 56 >> 2] | 0;
    if (!$$014) {
     $r$0$lcssa = $r$1;
     break;
    } else $r$03 = $r$1;
   }
  }
  ___unlock(3675808);
  $$0 = $r$0$lcssa;
 } else {
  if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
   $$0 = ___fflush_unlocked($f) | 0;
   break;
  }
  $phitmp = (___lockfile($f) | 0) == 0;
  $6 = ___fflush_unlocked($f) | 0;
  if ($phitmp) $$0 = $6; else {
   ___unlockfile($f);
   $$0 = $6;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $13 = 0;
  $14 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $13 = 0;
   $14 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($8 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $15 = -1;
   $16 = -1;
  } else {
   $15 = $6;
   $16 = $7;
  } else {
   HEAP32[$__err >> 2] = 4;
   $15 = 0;
   $16 = 0;
  }
  $13 = $16;
  $14 = $15;
 } while (0);
 tempRet0 = $13;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $$1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $$1 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 65535 | ($8 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $6 & 65535;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $$1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $$1 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 4294967295 | ($8 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $6;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $$1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $$1 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  do if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 4294967295 | ($8 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $6;
   break;
  } else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $18 = 0;
  $19 = 0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $5 = tempRet0;
  $6 = HEAP32[$1 >> 2] | 0;
  if (!$6) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($6 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $15 = ($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 0;
   $20 = $15 ? -1 : 0;
   $21 = $15 ? 2147483647 : -2147483648;
  } else {
   $20 = $4;
   $21 = $5;
  } else {
   HEAP32[$__err >> 2] = 4;
   $20 = 0;
   $21 = 0;
  }
  $18 = $21;
  $19 = $20;
 }
 tempRet0 = $18;
 STACKTOP = sp;
 return $19 | 0;
}

function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp, $__len, $__signd, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__signd = $__signd | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$1$lcssa = 0, $6 = 0;
 if (!($__flags & 2048)) $$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 512)) {
  $$01 = $__len;
  $$1 = $$0;
 } else {
  HEAP8[$$0 >> 0] = 35;
  $$01 = $__len;
  $$1 = $$0 + 1 | 0;
 }
 while (1) {
  $6 = HEAP8[$$01 >> 0] | 0;
  if (!($6 << 24 >> 24)) {
   $$1$lcssa = $$1;
   break;
  }
  HEAP8[$$1 >> 0] = $6;
  $$01 = $$01 + 1 | 0;
  $$1 = $$1 + 1 | 0;
 }
 L10 : do switch ($__flags & 74 | 0) {
 case 64:
  {
   HEAP8[$$1$lcssa >> 0] = 111;
   break;
  }
 case 8:
  {
   if (!($__flags & 16384)) {
    HEAP8[$$1$lcssa >> 0] = 120;
    break L10;
   } else {
    HEAP8[$$1$lcssa >> 0] = 88;
    break L10;
   }
   break;
  }
 default:
  if ($__signd) {
   HEAP8[$$1$lcssa >> 0] = 100;
   break L10;
  } else {
   HEAP8[$$1$lcssa >> 0] = 117;
   break L10;
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$0 = 0, $$2 = 0, $2 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 if (($this | 0) == ($thrown_type | 0)) $$2 = 1; else if (!$thrown_type) $$2 = 0; else {
  $2 = ___dynamic_cast($thrown_type, 1496, 1464, 0) | 0;
  if (!$2) $$2 = 0; else {
   dest = $info;
   stop = dest + 56 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$info >> 2] = $2;
   HEAP32[$info + 8 >> 2] = $this;
   HEAP32[$info + 12 >> 2] = -1;
   HEAP32[$info + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 15]($2, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
   if ((HEAP32[$info + 24 >> 2] | 0) == 1) {
    HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
    $$0 = 1;
   } else $$0 = 0;
   $$2 = $$0;
  }
 }
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $5 = 0, $6 = 0, $9 = 0, $p$0 = 0;
 L1 : do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $5 = HEAP32[$this + 12 >> 2] | 0;
  $6 = $this + 16 + ($5 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($5 | 0) > 1) {
   $9 = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
    if (HEAP8[$9 >> 0] | 0) break L1;
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $6 >>> 0);
  }
 } while (0);
 return;
}

function _strlen($s) {
 $s = $s | 0;
 var $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $0 = 0, $18 = 0, $21 = 0, $5 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $$01$lcssa = $s;
  label = 4;
 } else {
  $$014 = $s;
  $21 = $0;
  while (1) {
   if (!(HEAP8[$$014 >> 0] | 0)) {
    $$pn = $21;
    break L1;
   }
   $5 = $$014 + 1 | 0;
   $21 = $5;
   if (!($21 & 3)) {
    $$01$lcssa = $5;
    label = 4;
    break;
   } else $$014 = $5;
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa;
  while (1) {
   $9 = HEAP32[$w$0 >> 2] | 0;
   if (!(($9 & -2139062144 ^ -2139062144) & $9 + -16843009)) $w$0 = $w$0 + 4 | 0; else {
    $$lcssa20 = $9;
    $w$0$lcssa = $w$0;
    break;
   }
  }
  if (!(($$lcssa20 & 255) << 24 >> 24)) $$1$lcssa = $w$0$lcssa; else {
   $$pn15 = $w$0$lcssa;
   while (1) {
    $18 = $$pn15 + 1 | 0;
    if (!(HEAP8[$18 >> 0] | 0)) {
     $$1$lcssa = $18;
     break;
    } else $$pn15 = $18;
   }
  }
  $$pn = $$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $5 = 0, $n$0 = 0, $p$0 = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmp = sp;
 HEAP32[$to_nxt >> 2] = $to;
 $2 = _uselocale(HEAP32[$this + 8 >> 2] | 0) | 0;
 $3 = _wcrtomb($tmp, 0, $st) | 0;
 if ($2 | 0) _uselocale($2) | 0;
 L4 : do switch ($3 | 0) {
 case 0:
 case -1:
  {
   $$0 = 2;
   break;
  }
 default:
  {
   $5 = $3 + -1 | 0;
   if ($5 >>> 0 > ($to_end - (HEAP32[$to_nxt >> 2] | 0) | 0) >>> 0) $$0 = 1; else {
    $n$0 = $5;
    $p$0 = $tmp;
    while (1) {
     if (!$n$0) {
      $$0 = 0;
      break L4;
     }
     $12 = HEAP8[$p$0 >> 0] | 0;
     $13 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $13 + 1;
     HEAP8[$13 >> 0] = $12;
     $n$0 = $n$0 + -1 | 0;
     $p$0 = $p$0 + 1 | 0;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $10 = 0, $11 = 0, $27 = 0, $7 = 0, $8 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this);
 L1 : do if (HEAP8[$__s >> 0] | 0) {
  $7 = HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  $8 = $7;
  do if ($7 | 0) {
   $10 = $8 + 24 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if (($11 | 0) == (HEAP32[$8 + 28 >> 2] | 0)) if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$7 >> 2] | 0) + 52 >> 2] & 15]($8, $__c & 255) | 0) == -1) break; else break L1; else {
    HEAP32[$10 >> 2] = $11 + 1;
    HEAP8[$11 >> 0] = $__c;
    break L1;
   }
  } while (0);
  $27 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
  HEAP32[$27 >> 2] = HEAP32[$27 >> 2] | 1;
 } while (0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 1;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if (!(HEAP8[$this >> 0] & 1)) label = 7; else label = 8;
 } else if ($2) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 4 | 0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $$pn = $19;
 }
 $__p$0 = $$pn + ($__sz$0 << 2) | 0;
 HEAP32[$__p$0 >> 2] = $__c;
 HEAP32[$__p$0 + 4 >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $1 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $28 = 0, $4 = 0, $8 = 0;
 if ($__n | 0) {
  $1 = HEAP8[$this >> 0] | 0;
  if (!($1 & 1)) {
   $16 = 10;
   $8 = $1;
  } else {
   $4 = HEAP32[$this >> 2] | 0;
   $16 = ($4 & -2) + -1 | 0;
   $8 = $4 & 255;
  }
  if (!($8 & 1)) $15 = ($8 & 255) >>> 1; else $15 = HEAP32[$this + 4 >> 2] | 0;
  if (($16 - $15 | 0) >>> 0 < $__n >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $16, $__n - $16 + $15 | 0, $15, $15, 0, 0);
   $21 = HEAP8[$this >> 0] | 0;
  } else $21 = $8;
  if (!($21 & 1)) $27 = $this + 1 | 0; else $27 = HEAP32[$this + 8 >> 2] | 0;
  _memset($27 + $15 | 0, $__c | 0, $__n | 0) | 0;
  $28 = $15 + $__n | 0;
  if (!(HEAP8[$this >> 0] & 1)) HEAP8[$this >> 0] = $28 << 1; else HEAP32[$this + 4 >> 2] = $28;
  HEAP8[$27 + $28 >> 0] = 0;
 }
 return $this | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$04 = 0, $$15 = 0, $$pn = 0, $0 = 0, $1 = 0, $7 = 0, $8 = 0, $nbytes$0 = 0, $nbytes$0$lcssa = 0, $nwchar_t$0 = 0;
 $0 = $frm_end;
 $1 = $this + 8 | 0;
 $$04 = $frm;
 $nbytes$0 = 0;
 $nwchar_t$0 = 0;
 L1 : while (1) {
  if (($$04 | 0) == ($frm_end | 0) | $nwchar_t$0 >>> 0 >= $mx >>> 0) {
   $nbytes$0$lcssa = $nbytes$0;
   break;
  }
  $7 = _uselocale(HEAP32[$1 >> 2] | 0) | 0;
  $8 = _mbrlen($$04, $0 - $$04 | 0, $st) | 0;
  if ($7 | 0) _uselocale($7) | 0;
  switch ($8 | 0) {
  case -2:
  case -1:
   {
    $nbytes$0$lcssa = $nbytes$0;
    break L1;
    break;
   }
  case 0:
   {
    $$15 = $$04 + 1 | 0;
    $$pn = 1;
    break;
   }
  default:
   {
    $$15 = $$04 + $8 | 0;
    $$pn = $8;
   }
  }
  $$04 = $$15;
  $nbytes$0 = $$pn + $nbytes$0 | 0;
  $nwchar_t$0 = $nwchar_t$0 + 1 | 0;
 }
 return $nbytes$0$lcssa | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $18 = 0, $2 = 0, $3 = 0, $__p$0 = 0, $__p$0$ph = 0;
 $0 = $__first;
 $2 = $__last - $0 | 0;
 $3 = $2 >> 2;
 if ($3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($3 >>> 0 < 2) {
  HEAP8[$this >> 0] = $2 >>> 1;
  $__p$0$ph = $this + 4 | 0;
 } else {
  $10 = $3 + 4 & -4;
  $12 = __Znwj($10 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $12;
  HEAP32[$this >> 2] = $10 | 1;
  HEAP32[$this + 4 >> 2] = $3;
  $__p$0$ph = $12;
 }
 $18 = ($__last - $0 | 0) >>> 2;
 $$0 = $__first;
 $__p$0 = $__p$0$ph;
 while (1) {
  if (($$0 | 0) == ($__last | 0)) break;
  HEAP32[$__p$0 >> 2] = HEAP32[$$0 >> 2];
  $$0 = $$0 + 4 | 0;
  $__p$0 = $__p$0 + 4 | 0;
 }
 HEAP32[$__p$0$ph + ($18 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if (!(HEAP8[$this >> 0] & 1)) label = 7; else label = 8;
 } else if ($2) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 1 | 0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $__sz$0 + 1;
  $$pn = $19;
 }
 $__p$0 = $$pn + $__sz$0 | 0;
 HEAP8[$__p$0 >> 0] = $__c;
 HEAP8[$__p$0 + 1 >> 0] = 0;
 return;
}

function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this | 0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $0 = $this + 36 | 0;
 $1 = $this + 40 | 0;
 $2 = $__extbuf + 8 | 0;
 $3 = $__extbuf;
 $4 = $this + 32 | 0;
 L1 : while (1) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 31]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0;
  $12 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0;
  if ((_fwrite($__extbuf, 1, $12, HEAP32[$4 >> 2] | 0) | 0) != ($12 | 0)) {
   $$2 = -1;
   break;
  }
  switch ($10 | 0) {
  case 1:
   break;
  case 2:
   {
    $$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $$2 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this | 0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $0 = $this + 36 | 0;
 $1 = $this + 40 | 0;
 $2 = $__extbuf + 8 | 0;
 $3 = $__extbuf;
 $4 = $this + 32 | 0;
 L1 : while (1) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 31]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0;
  $12 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0;
  if ((_fwrite($__extbuf, 1, $12, HEAP32[$4 >> 2] | 0) | 0) != ($12 | 0)) {
   $$2 = -1;
   break;
  }
  switch ($10 | 0) {
  case 1:
   break;
  case 2:
   {
    $$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $$2 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $6 = 0, $9 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $6 = 10;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $6 = ($3 & -2) + -1 | 0;
  $9 = $3 & 255;
 }
 $10 = ($9 & 1) == 0;
 do if ($6 >>> 0 < $__n >>> 0) {
  if ($10) $27 = ($9 & 255) >>> 1; else $27 = HEAP32[$this + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $6, $__n - $6 | 0, $27, 0, $27, $__n, $__s);
 } else {
  if ($10) $14 = $this + 1 | 0; else $14 = HEAP32[$this + 8 >> 2] | 0;
  _memmove($14 | 0, $__s | 0, $__n | 0) | 0;
  HEAP8[$14 + $__n >> 0] = 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $__n << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $6 = 0, $9 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $6 = 1;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $6 = ($3 & -2) + -1 | 0;
  $9 = $3 & 255;
 }
 $10 = ($9 & 1) == 0;
 do if ($6 >>> 0 < $__n >>> 0) {
  if ($10) $27 = ($9 & 255) >>> 1; else $27 = HEAP32[$this + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $6, $__n - $6 | 0, $27, 0, $27, $__n, $__s);
 } else {
  if ($10) $14 = $this + 4 | 0; else $14 = HEAP32[$this + 8 >> 2] | 0;
  _wmemmove($14, $__s, $__n) | 0;
  HEAP32[$14 + ($__n << 2) >> 2] = 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $__n << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  }
 } while (0);
 return $this | 0;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $15 = 0, $2 = 0, $9 = 0, $__p$0 = 0, $__p$0$ph = 0;
 $0 = $__first;
 $2 = $__last - $0 | 0;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($2 >>> 0 < 11) {
  HEAP8[$this >> 0] = $2 << 1;
  $__p$0$ph = $this + 1 | 0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __Znwj($9) | 0;
  HEAP32[$this + 8 >> 2] = $10;
  HEAP32[$this >> 2] = $9 | 1;
  HEAP32[$this + 4 >> 2] = $2;
  $__p$0$ph = $10;
 }
 $15 = $__last - $0 | 0;
 $$0 = $__first;
 $__p$0 = $__p$0$ph;
 while (1) {
  if (($$0 | 0) == ($__last | 0)) break;
  HEAP8[$__p$0 >> 0] = HEAP8[$$0 >> 0] | 0;
  $$0 = $$0 + 1 | 0;
  $__p$0 = $__p$0 + 1 | 0;
 }
 HEAP8[$__p$0$ph + $15 >> 0] = 0;
 return;
}

function _pad($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $$0$lcssa6 = 0, $$02 = 0, $10 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0, $7 = 0, $9 = 0, $pad = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $pad = sp;
 do if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $3 = $w - $l | 0;
  _memset($pad | 0, $c | 0, ($3 >>> 0 > 256 ? 256 : $3) | 0) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  $9 = ($7 & 32 | 0) == 0;
  if ($3 >>> 0 > 255) {
   $10 = $w - $l | 0;
   $$02 = $3;
   $17 = $7;
   $18 = $9;
   while (1) {
    if ($18) {
     ___fwritex($pad, 256, $f) | 0;
     $14 = HEAP32[$f >> 2] | 0;
    } else $14 = $17;
    $$02 = $$02 + -256 | 0;
    $18 = ($14 & 32 | 0) == 0;
    if ($$02 >>> 0 <= 255) break; else $17 = $14;
   }
   if ($18) $$0$lcssa6 = $10 & 255; else break;
  } else if ($9) $$0$lcssa6 = $3; else break;
  ___fwritex($pad, $$0$lcssa6, $f) | 0;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] & 63]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $11 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 288 | 0, $__ct, $__err, 0) | 0) - $5 | 0;
 if (($11 | 0) < 288) HEAP32[$__m >> 2] = (($11 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] & 63]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $11 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 288 | 0, $__ct, $__err, 0) | 0) - $5 | 0;
 if (($11 | 0) < 288) HEAP32[$__m >> 2] = (($11 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677412) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677412) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$1 >> 2] >> 2] & 63]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $4, $4 + 168 | 0, $__ct, $__err, 0) | 0) - $4 | 0;
 if (($10 | 0) < 168) HEAP32[$__w >> 2] = (($10 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$1 >> 2] >> 2] & 63]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $4, $4 + 168 | 0, $__ct, $__err, 0) | 0) - $4 | 0;
 if (($10 | 0) < 168) HEAP32[$__w >> 2] = (($10 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677412) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 3677380) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv($2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy, $__err, $3);
 STACKTOP = sp;
 return HEAP32[$__b >> 2] | 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677412) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] & 7]($1, 3671184, 3671210, $__atoms) | 0;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677420) | 0;
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 63]($5) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $5);
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $1 = 0, $5 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 $0 = __ZNKSt3__18ios_base6getlocEv($__iob) | 0;
 HEAP32[$__loc >> 2] = $0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677380) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] & 7]($1, 3671184, 3671210, $__atoms) | 0;
 $5 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3677392) | 0;
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] & 63]($5) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $5);
 __ZNSt3__114__shared_count16__release_sharedEv($0) | 0;
 STACKTOP = sp;
 return;
}

function _fputc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$0 = 0, $10 = 0, $22 = 0, $23 = 0, $31 = 0, $9 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($f) | 0)) label = 3; else {
  if ((HEAP8[$f + 75 >> 0] | 0) == ($c | 0)) label = 10; else {
   $22 = $f + 20 | 0;
   $23 = HEAP32[$22 >> 2] | 0;
   if ($23 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$22 >> 2] = $23 + 1;
    HEAP8[$23 >> 0] = $c;
    $31 = $c & 255;
   } else label = 10;
  }
  if ((label | 0) == 10) $31 = ___overflow($f, $c) | 0;
  ___unlockfile($f);
  $$0 = $31;
 }
 do if ((label | 0) == 3) {
  if ((HEAP8[$f + 75 >> 0] | 0) != ($c | 0)) {
   $9 = $f + 20 | 0;
   $10 = HEAP32[$9 >> 2] | 0;
   if ($10 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$9 >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $c;
    $$0 = $c & 255;
    break;
   }
  }
  $$0 = ___overflow($f, $c) | 0;
 } while (0);
 return $$0 | 0;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $1 = $x * 8988465674311579538646525.0e283;
  $2 = $n + -1023 | 0;
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0;
   $$0 = ($5 | 0) > 1023 ? 1023 : $5;
   $y$0 = $1 * 8988465674311579538646525.0e283;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -1022) {
  $8 = $x * 2.2250738585072014e-308;
  $9 = $n + 1022 | 0;
  if (($9 | 0) < -1022) {
   $12 = $n + 2044 | 0;
   $$0 = ($12 | 0) < -1022 ? -1022 : $12;
   $y$0 = $8 * 2.2250738585072014e-308;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $5 = 0, $9 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $3 = $__v + 4 | 0;
 $5 = (HEAP32[$1 >> 2] | 0) - $0 | 0;
 $9 = (HEAP32[$3 >> 2] | 0) + (0 - ($5 >> 2) << 2) | 0;
 HEAP32[$3 >> 2] = $9;
 _memcpy($9 | 0, $0 | 0, $5 | 0) | 0;
 $10 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $10;
 $12 = $__v + 8 | 0;
 $13 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$12 >> 2] = $13;
 $15 = $this + 8 | 0;
 $16 = $__v + 12 | 0;
 $17 = HEAP32[$15 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 HEAP32[$__v >> 2] = HEAP32[$3 >> 2];
 return;
}

function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 119;
 $4 = HEAP32[$__b >> 2] | 0;
 $5 = (HEAP32[$__e >> 2] | 0) - $4 | 0;
 $$ = $5 >>> 0 < 2147483647 ? $5 << 1 : -1;
 $10 = (HEAP32[$__n >> 2] | 0) - $4 >> 2;
 $12 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$12) __ZSt17__throw_bad_allocv();
 if ($2) {
  HEAP32[$__b >> 2] = $12;
  $20 = $12;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $12;
  if (!$$pr) $20 = $12; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr);
   $20 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 120;
 HEAP32[$__n >> 2] = $20 + ($10 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($$ >>> 2 << 2);
 return;
}

function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 119;
 $4 = HEAP32[$__b >> 2] | 0;
 $5 = (HEAP32[$__e >> 2] | 0) - $4 | 0;
 $$ = $5 >>> 0 < 2147483647 ? $5 << 1 : -1;
 $10 = (HEAP32[$__n >> 2] | 0) - $4 >> 2;
 $12 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$12) __ZSt17__throw_bad_allocv();
 if ($2) {
  HEAP32[$__b >> 2] = $12;
  $20 = $12;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $12;
  if (!$$pr) $20 = $12; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr);
   $20 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 120;
 HEAP32[$__n >> 2] = $20 + ($10 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($$ >>> 2 << 2);
 return;
}

function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__wb = $__wb | 0;
 $__we = $__we | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $1 = 0, $10 = 0, $11 = 0, $8 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $__nar = sp + 16 | 0;
 $__ne = sp + 12 | 0;
 $mb = sp;
 $__nb = sp + 8 | 0;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $1 = $mb;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$__nb >> 2] = $__nar;
 $8 = (HEAP32[$__we >> 2] | 0) - $__wb >> 2;
 $10 = _uselocale(HEAP32[$this >> 2] | 0) | 0;
 $11 = _mbsrtowcs($__wb, $__nb, $8, $mb) | 0;
 if ($10 | 0) _uselocale($10) | 0;
 HEAP32[$__we >> 2] = $__wb + ($11 << 2);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[3674016] | 0)) if (___cxa_guard_acquire(3674016) | 0) {
  if (!(HEAP8[3674024] | 0)) if (___cxa_guard_acquire(3674024) | 0) {
   $9 = 3677916;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 3678204);
   ___cxa_atexit(113, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(3674024);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677916, 3671921) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(3677928, 3671924) | 0;
  HEAP32[919551] = 3677916;
  ___cxa_guard_release(3674016);
 }
 return HEAP32[919551] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 3671658, 3671666) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0;
 do if (!$s) $$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $$0 = 1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 var $9 = 0, $__i$0$i$i$i = 0;
 if (!(HEAP8[3674096] | 0)) if (___cxa_guard_acquire(3674096) | 0) {
  if (!(HEAP8[3674104] | 0)) if (___cxa_guard_acquire(3674104) | 0) {
   $9 = 3678728;
   do {
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$9 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $9 = $9 + 12 | 0;
   } while (($9 | 0) != 3679016);
   ___cxa_atexit(117, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(3674104);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678728, 17180) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(3678740, 17192) | 0;
  HEAP32[919754] = 3678728;
  ___cxa_guard_release(3674096);
 }
 return HEAP32[919754] | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($this, $__b, $__e, $__iob, $__err, $__tm) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 16128, 16160) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $10 = 0, $12 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 119;
 $4 = HEAP32[$__b >> 2] | 0;
 $5 = (HEAP32[$__e >> 2] | 0) - $4 | 0;
 $$ = $5 >>> 0 < 2147483647 ? $5 << 1 : -1;
 $10 = (HEAP32[$__n >> 2] | 0) - $4 | 0;
 $12 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$12) __ZSt17__throw_bad_allocv();
 if ($2) {
  HEAP32[$__b >> 2] = $12;
  $19 = $12;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $12;
  if (!$$pr) $19 = $12; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr);
   $19 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 120;
 HEAP32[$__n >> 2] = $19 + $10;
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + $$;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $__t$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($2 | 0) < 69) $__t$0 = $2 + 2e3 | 0; else $__t$0 = ($2 + -69 | 0) >>> 0 < 31 ? $2 + 1900 | 0 : $2;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $__t$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($2 | 0) < 69) $__t$0 = $2 + 2e3 | 0; else $__t$0 = ($2 + -69 | 0) >>> 0 < 31 ? $2 + 1900 | 0 : $2;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _strerror($e) {
 $e = $e | 0;
 var $$lcssa = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 $i$03 = 0;
 while (1) {
  if ((HEAPU8[3668160 + $i$03 >> 0] | 0) == ($e | 0)) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $i$03 = $i$03 + 1 | 0;
  if (($i$03 | 0) == 87) {
   $i$12 = 87;
   $s$01 = 3668248;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 2) if (!$i$03$lcssa) $s$0$lcssa = 3668248; else {
  $i$12 = $i$03$lcssa;
  $s$01 = 3668248;
  label = 5;
 }
 if ((label | 0) == 5) while (1) {
  label = 0;
  $s$1 = $s$01;
  while (1) {
   $9 = $s$1 + 1 | 0;
   if (!(HEAP8[$s$1 >> 0] | 0)) {
    $$lcssa = $9;
    break;
   } else $s$1 = $9;
  }
  $i$12 = $i$12 + -1 | 0;
  if (!$i$12) {
   $s$0$lcssa = $$lcssa;
   break;
  } else {
   $s$01 = $$lcssa;
   label = 5;
  }
 }
 return $s$0$lcssa | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($this, $__b, $__e, $__iob, $__err, $__v) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$1 >> 2];
 $4 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $6 = 0, $7 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 $0 = $_c & 255;
 HEAP8[$c >> 0] = $0;
 $1 = $f + 16 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) if (!(___towrite($f) | 0)) {
  $9 = HEAP32[$1 >> 2] | 0;
  label = 4;
 } else $$0 = -1; else {
  $9 = $2;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $6 = $f + 20 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if ($7 >>> 0 < $9 >>> 0) {
   $10 = $_c & 255;
   if (($10 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
    HEAP32[$6 >> 2] = $7 + 1;
    HEAP8[$7 >> 0] = $0;
    $$0 = $10;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $c, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 switch ($4 | 0) {
 case 0:
  {
   if ($x != 0.0) {
    $7 = +_frexp($x * 18446744073709551616.0, $e);
    $$01 = $7;
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
   } else {
    $$01 = $x;
    $storemerge = 0;
   }
   HEAP32[$e >> 2] = $storemerge;
   $$0 = $$01;
   break;
  }
 case 2047:
  {
   $$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = $4 + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $11 = 0, $3 = 0, $__i$0 = 0, $__i$0$lcssa = 0, $storemerge = 0;
 $0 = $this + 12 | 0;
 $1 = $this + 16 | 0;
 $$0 = $__s;
 $__i$0 = 0;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $3 + 1;
   $storemerge = HEAP8[$3 >> 0] | 0;
  } else {
   $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 63]($this) | 0;
   if (($11 | 0) == -1) {
    $__i$0$lcssa = $__i$0;
    break;
   }
   $storemerge = $11 & 255;
  }
  HEAP8[$$0 >> 0] = $storemerge;
  $$0 = $$0 + 1 | 0;
  $__i$0 = $__i$0 + 1 | 0;
 }
 return $__i$0$lcssa | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $11 = 0, $3 = 0, $__i$0 = 0, $__i$0$lcssa = 0, $storemerge = 0;
 $0 = $this + 12 | 0;
 $1 = $this + 16 | 0;
 $$0 = $__s;
 $__i$0 = 0;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $3 + 4;
   $storemerge = HEAP32[$3 >> 2] | 0;
  } else {
   $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 63]($this) | 0;
   if (($11 | 0) == -1) {
    $__i$0$lcssa = $__i$0;
    break;
   } else $storemerge = $11;
  }
  HEAP32[$$0 >> 2] = $storemerge;
  $$0 = $$0 + 4 | 0;
  $__i$0 = $__i$0 + 1 | 0;
 }
 return $__i$0$lcssa | 0;
}

function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb, $__ne, $__iob) {
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__iob = $__iob | 0;
 var $$0 = 0, $3 = 0, label = 0;
 L1 : do switch (HEAP32[$__iob + 4 >> 2] & 176 | 0) {
 case 16:
  {
   $3 = HEAP8[$__nb >> 0] | 0;
   switch ($3 << 24 >> 24) {
   case 43:
   case 45:
    {
     $$0 = $__nb + 1 | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($__ne - $__nb | 0) > 1 & $3 << 24 >> 24 == 48) {
    switch (HEAP8[$__nb + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      label = 7;
      break L1;
     }
    }
    $$0 = $__nb + 2 | 0;
   } else label = 7;
   break;
  }
 case 32:
  {
   $$0 = $__ne;
   break;
  }
 default:
  label = 7;
 } while (0);
 if ((label | 0) == 7) $$0 = $__nb;
 return $$0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 < 12 & ($3 & 4 | 0) == 0) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 < 12 & ($3 & 4 | 0) == 0) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 < 31 & ($3 & 4 | 0) == 0) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 3) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 366 & ($3 & 4 | 0) == 0) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 + -1 | 0) >>> 0 < 31 & ($3 & 4 | 0) == 0) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 3) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 366 & ($3 & 4 | 0) == 0) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 13 & ($3 & 4 | 0) == 0) HEAP32[$__m >> 2] = $2 + -1; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 13 & ($3 & 4 | 0) == 0) HEAP32[$__m >> 2] = $2 + -1; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 1) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 7 & ($3 & 4 | 0) == 0) HEAP32[$__w >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 61 & ($3 & 4 | 0) == 0) HEAP32[$__s >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 60 & ($3 & 4 | 0) == 0) HEAP32[$__m >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 1) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 7 & ($3 & 4 | 0) == 0) HEAP32[$__w >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 61 & ($3 & 4 | 0) == 0) HEAP32[$__s >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 60 & ($3 & 4 | 0) == 0) HEAP32[$__m >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 24 & ($3 & 4 | 0) == 0) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($2 | 0) < 24 & ($3 & 4 | 0) == 0) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this | 0;
 var $14 = 0, $24 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 if (HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($__s, $this);
  if (HEAP8[$__s >> 0] | 0) {
   $14 = HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] & 63]($14) | 0) == -1) {
    $24 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
    HEAP32[$24 >> 2] = HEAP32[$24 >> 2] | 1;
   }
  }
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this | 0;
 var $14 = 0, $24 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 if (HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this);
  if (HEAP8[$__s >> 0] | 0) {
   $14 = HEAP32[$this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] & 63]($14) | 0) == -1) {
    $24 = $this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
    HEAP32[$24 >> 2] = HEAP32[$24 >> 2] | 1;
   }
  }
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 }
 STACKTOP = sp;
 return $this | 0;
}

function _ungetc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$1 = 0, $10 = 0, $11 = 0, $16 = 0, $19 = 0, label = 0;
 do if (($c | 0) == -1) $$1 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $16 = ___lockfile($f) | 0; else $16 = 0;
  if (!(HEAP32[$f + 8 >> 2] | 0)) {
   if (!(___toread($f) | 0)) label = 6;
  } else label = 6;
  if ((label | 0) == 6) {
   $10 = $f + 4 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if ($11 >>> 0 > ((HEAP32[$f + 44 >> 2] | 0) + -8 | 0) >>> 0) {
    $19 = $11 + -1 | 0;
    HEAP32[$10 >> 2] = $19;
    HEAP8[$19 >> 0] = $c;
    HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17;
    if (!$16) {
     $$1 = $c;
     break;
    }
    ___unlockfile($f);
    $$1 = $c;
    break;
   }
  }
  if (!$16) $$1 = -1; else {
   ___unlockfile($f);
   $$1 = -1;
  }
 } while (0);
 return $$1 | 0;
}

function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0.0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0);
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($5 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = $4;
  } else $$0 = $4; else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0.0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0);
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) if (($5 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = $4;
  } else $$0 = $4; else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $2 = 0, $3 = 0, label = 0;
 $$01 = $__lo2;
 $$02 = $__lo1;
 while (1) {
  if (($$01 | 0) == ($__hi2 | 0)) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  if (($$02 | 0) == ($__hi1 | 0)) {
   $$0 = -1;
   break;
  }
  $2 = HEAP8[$$02 >> 0] | 0;
  $3 = HEAP8[$$01 >> 0] | 0;
  if ($2 << 24 >> 24 < $3 << 24 >> 24) {
   $$0 = -1;
   break;
  }
  if ($3 << 24 >> 24 < $2 << 24 >> 24) {
   $$0 = 1;
   break;
  }
  $$01 = $$01 + 1 | 0;
  $$02 = $$02 + 1 | 0;
 }
 if ((label | 0) == 7) $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1;
 return $$0 | 0;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 return _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0, tempRet0, 0) | 0) ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
}

function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$1 = 0.0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0);
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) == ($__a_end | 0)) {
   if (($5 | 0) == 34) HEAP32[$__err >> 2] = 4;
   $$0 = $4;
  } else {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $9 = 0, $mem$1 = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $9 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($9 | 0) {
  $mem$1 = $9 + 8 | 0;
  return $mem$1 | 0;
 }
 $12 = _malloc($bytes) | 0;
 if (!$12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $15 = HEAP32[$oldmem + -4 >> 2] | 0;
 $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $12;
 return $mem$1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $3 = 0, $6 = 0, $__i$0 = 0, $__i$0$lcssa = 0;
 $0 = $this + 24 | 0;
 $1 = $this + 28 | 0;
 $$0 = $__s;
 $__i$0 = 0;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   $6 = HEAP32[$$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $3 + 4;
   HEAP32[$3 >> 2] = $6;
  } else if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAP32[$$0 >> 2] | 0) | 0) == -1) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $$0 = $$0 + 4 | 0;
  $__i$0 = $__i$0 + 1 | 0;
 }
 return $__i$0$lcssa | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $17 = 0, $23 = 0, $29 = 0, $34 = 0, $5 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $5 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (HEAP32[$5 + 24 >> 2] | 0) if (!(HEAP32[$5 + 16 >> 2] | 0)) if (HEAP32[$5 + 4 >> 2] & 8192 | 0) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  $17 = HEAP32[$0 >> 2] | 0;
  $23 = HEAP32[$17 + (HEAP32[(HEAP32[$17 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 24 >> 2] & 63]($23) | 0) == -1) {
   $29 = HEAP32[$0 >> 2] | 0;
   $34 = $29 + (HEAP32[(HEAP32[$29 >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
  }
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $17 = 0, $23 = 0, $29 = 0, $34 = 0, $5 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $5 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (HEAP32[$5 + 24 >> 2] | 0) if (!(HEAP32[$5 + 16 >> 2] | 0)) if (HEAP32[$5 + 4 >> 2] & 8192 | 0) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  $17 = HEAP32[$0 >> 2] | 0;
  $23 = HEAP32[$17 + (HEAP32[(HEAP32[$17 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 24 >> 2] & 63]($23) | 0) == -1) {
   $29 = HEAP32[$0 >> 2] | 0;
   $34 = $29 + (HEAP32[(HEAP32[$29 >> 2] | 0) + -12 >> 2] | 0) + 16 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
  }
 }
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $3 = 0, $6 = 0, $__i$0 = 0, $__i$0$lcssa = 0;
 $0 = $this + 24 | 0;
 $1 = $this + 28 | 0;
 $$0 = $__s;
 $__i$0 = 0;
 while (1) {
  if (($__i$0 | 0) >= ($__n | 0)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0 >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   $6 = HEAP8[$$0 >> 0] | 0;
   HEAP32[$0 >> 2] = $3 + 1;
   HEAP8[$3 >> 0] = $6;
  } else if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAPU8[$$0 >> 0] | 0) | 0) == -1) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $$0 = $$0 + 1 | 0;
  $__i$0 = $__i$0 + 1 | 0;
 }
 return $__i$0$lcssa | 0;
}

function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $2 = 0, $3 = 0, label = 0;
 $$01 = $__lo2;
 $$02 = $__lo1;
 while (1) {
  if (($$01 | 0) == ($__hi2 | 0)) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  if (($$02 | 0) == ($__hi1 | 0)) {
   $$0 = -1;
   break;
  }
  $2 = HEAP32[$$02 >> 2] | 0;
  $3 = HEAP32[$$01 >> 2] | 0;
  if (($2 | 0) < ($3 | 0)) {
   $$0 = -1;
   break;
  }
  if (($3 | 0) < ($2 | 0)) {
   $$0 = 1;
   break;
  }
  $$01 = $$01 + 4 | 0;
  $$02 = $$02 + 4 | 0;
 }
 if ((label | 0) == 7) $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1;
 return $$0 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = HEAP32[$_frm_nxt >> 2];
 HEAP32[$to_nxt >> 2] = HEAP32[$_to_nxt >> 2];
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $6 = 0, $9 = 0;
 $0 = $info + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) {
  HEAP32[$0 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
 } else {
  if (($1 | 0) != ($adjustedPtr | 0)) {
   $9 = $info + 36 | 0;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $6 = $info + 24 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 2) HEAP32[$6 >> 2] = $path_below;
 } while (0);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 15]($8, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, $1 & 2 | 0 ? $path_below : 2, $use_strcmp);
 return;
}

function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 15304;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 $6 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 3679180) | 0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[$this + 36 >> 2] = $6;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 63]($6) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 15176;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 $6 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 3679172) | 0;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[$this + 36 >> 2] = $6;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 63]($6) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $2 + -1900;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $2 + -1900;
 STACKTOP = sp;
 return;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $9 = 0, label = 0;
 $0 = $f + 20 | 0;
 $2 = $f + 28 | 0;
 if ((HEAP32[$0 >> 2] | 0) >>> 0 > (HEAP32[$2 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
  if (!(HEAP32[$0 >> 2] | 0)) $$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $9 = $f + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $11 = $f + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 40 >> 2] & 31]($f, $10 - $12 | 0, 1) | 0;
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 15]($4, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $2 = 0, $5 = 0, $9 = 0, $ap2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap2 = sp;
 $0 = _malloc(240) | 0;
 do if (!$0) $$0 = -1; else {
  HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
  $2 = _vsnprintf($0, 240, $fmt, $ap2) | 0;
  if ($2 >>> 0 < 240) {
   $5 = _realloc($0, $2 + 1 | 0) | 0;
   HEAP32[$s >> 2] = $5 | 0 ? $5 : $0;
   $$0 = $2;
   break;
  }
  _free($0);
  if (($2 | 0) < 0) $$0 = -1; else {
   $9 = $2 + 1 | 0;
   $10 = _malloc($9) | 0;
   HEAP32[$s >> 2] = $10;
   if (!$10) $$0 = -1; else $$0 = _vsnprintf($10, $9, $fmt, $ap) | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 $this = $this | 0;
 $f = $f | 0;
 $id = $id | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $10 = 0, $11 = 0, $3 = 0;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = $this + 8 | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 if ((HEAP32[$this + 12 >> 2] | 0) - $3 >> 2 >>> 0 > $id >>> 0) {
  $$pre$phiZ2D = $0;
  $10 = $3;
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0, $id + 1 | 0);
  $$pre$phiZ2D = $0;
  $10 = HEAP32[$0 >> 2] | 0;
 }
 $11 = HEAP32[$10 + ($id << 2) >> 2] | 0;
 if ($11 | 0) __ZNSt3__114__shared_count16__release_sharedEv($11) | 0;
 HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($id << 2) >> 2] = $f;
 return;
}

function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nb, $__ne, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $1 = 0, $fmt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $fmt = sp;
 HEAP8[$fmt >> 0] = 37;
 $0 = $fmt + 1 | 0;
 HEAP8[$0 >> 0] = $__fmt;
 $1 = $fmt + 2 | 0;
 HEAP8[$1 >> 0] = $__mod;
 HEAP8[$fmt + 3 >> 0] = 0;
 if ($__mod << 24 >> 24) {
  HEAP8[$0 >> 0] = $__mod;
  HEAP8[$1 >> 0] = $__fmt;
 }
 HEAP32[$__ne >> 2] = $__nb + (_strftime_l($__nb | 0, (HEAP32[$__ne >> 2] | 0) - $__nb | 0, $fmt | 0, $__tm | 0, HEAP32[$this >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function _getc($f) {
 $f = $f | 0;
 var $$0 = 0, $14 = 0, $15 = 0, $23 = 0, $5 = 0, $6 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($f) | 0)) label = 3; else {
  $14 = $f + 4 | 0;
  $15 = HEAP32[$14 >> 2] | 0;
  if ($15 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
   HEAP32[$14 >> 2] = $15 + 1;
   $23 = HEAPU8[$15 >> 0] | 0;
  } else $23 = ___uflow($f) | 0;
  ___unlockfile($f);
  $$0 = $23;
 }
 do if ((label | 0) == 3) {
  $5 = $f + 4 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$f + 8 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $6 + 1;
   $$0 = HEAPU8[$6 >> 0] | 0;
   break;
  } else {
   $$0 = ___uflow($f) | 0;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] & 3]($8, $info, $current_ptr + $offset_to_base$0 | 0, $1 & 2 | 0 ? $path_below : 2, $use_strcmp);
 return;
}

function _strtox_276($s, $p, $prec) {
 $s = $s | 0;
 $p = $p | 0;
 $prec = $prec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $4 = 0.0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f = sp;
 dest = $f;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0);
 $4 = +___floatscan($f, $prec, 1);
 $10 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$f + 108 >> 2] | 0) | 0;
 if ($p | 0) HEAP32[$p >> 2] = $10 | 0 ? $s + $10 | 0 : $s;
 STACKTOP = sp;
 return +$4;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $3 = 0, $8 = 0, $9 = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $8 = 0; else {
  $3 = $__a + 112 | 0;
  if ($__cap >>> 0 < 29 & (HEAP8[$3 >> 0] | 0) == 0) {
   HEAP8[$3 >> 0] = 1;
   $8 = $__a;
   break;
  } else {
   $8 = __Znwj($__cap << 2) | 0;
   break;
  }
 } while (0);
 HEAP32[$this >> 2] = $8;
 $9 = $8 + ($__start << 2) | 0;
 HEAP32[$this + 8 >> 2] = $9;
 HEAP32[$this + 4 >> 2] = $9;
 HEAP32[$this + 12 >> 2] = $8 + ($__cap << 2);
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $4 = $1 - $2 >> 2;
 $6 = $2;
 $7 = $1;
 L1 : do if ($4 >>> 0 < $__sz >>> 0) __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__sz - $4 | 0); else if ($4 >>> 0 > $__sz >>> 0) {
  $10 = $6 + ($__sz << 2) | 0;
  $11 = $7;
  while (1) {
   if (($11 | 0) == ($10 | 0)) break L1;
   $13 = $11 + -4 | 0;
   HEAP32[$0 >> 2] = $13;
   $11 = $13;
  }
 } while (0);
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $2 = 0, $7 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) == 0;
 if ($2) $7 = ($0 & 255) >>> 1; else $7 = HEAP32[$this + 4 >> 2] | 0;
 do if ($7 >>> 0 < $__n >>> 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n - $7 | 0, $__c) | 0; else if ($2) {
  HEAP8[$this + 1 + $__n >> 0] = 0;
  HEAP8[$this >> 0] = $__n << 1;
  break;
 } else {
  HEAP8[(HEAP32[$this + 8 >> 2] | 0) + $__n >> 0] = 0;
  HEAP32[$this + 4 >> 2] = $__n;
  break;
 } while (0);
 return;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = $f + 20 | 0;
 $8 = $f + 44 | 0;
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 if (!($15 & 20)) {
  $21 = HEAP32[$8 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $21;
  HEAP32[$f + 4 >> 2] = $21;
  $$0 = 0;
 } else if (!($15 & 4)) $$0 = -1; else {
  HEAP32[$f >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 15]($8, $info, $adjustedPtr + $offset_to_base$0 | 0, $1 & 2 | 0 ? $path_below : 2);
 return;
}

function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 15240;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP32[$this + 48 >> 2] = -1;
 HEAP8[$this + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $1);
 __ZNSt3__16localeD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 15112;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP32[$this + 48 >> 2] = -1;
 HEAP8[$this + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $1);
 __ZNSt3__16localeD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZSt9terminatev() {
 var $0 = 0, $17 = 0, $2 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 | 0) {
   $5 = $2 + 48 | 0;
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    FUNCTION_TABLE_v[HEAP32[$2 + 12 >> 2] & 3]();
    _abort_message(3673786, $vararg_buffer);
   }
  }
 }
 $17 = HEAP32[4607] | 0;
 HEAP32[4607] = $17 + 0;
 FUNCTION_TABLE_v[$17 & 3]();
 _abort_message(3673786, $vararg_buffer1);
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__sz + 16 & -16;
  $7 = __Znwj($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0;
 HEAP8[$__p$0 + $__sz >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $8 = 0, $__p$0 = 0;
 if ($__sz >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 2) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 4 | 0;
 } else {
  $6 = $__sz + 4 & -4;
  $8 = __Znwj($6 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $8;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $8;
 }
 _wmemcpy($__p$0, $__s, $__sz) | 0;
 HEAP32[$__p$0 + ($__sz << 2) >> 2] = 0;
 return;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $5 = 0, $ret = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $ret = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $off;
 HEAP32[$vararg_buffer + 12 >> 2] = $ret;
 HEAP32[$vararg_buffer + 16 >> 2] = $whence;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$ret >> 2] = -1;
  $5 = -1;
 } else $5 = HEAP32[$ret >> 2] | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0;
 if ($__n >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 < 11) {
  HEAP8[$this >> 0] = $__n << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__n + 16 & -16;
  $7 = __Znwj($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $7;
 }
 _memset($__p$0 | 0, $__c | 0, $__n | 0) | 0;
 HEAP8[$__p$0 + $__n >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $8 = 0, $__p$0 = 0;
 if ($__n >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 < 2) {
  HEAP8[$this >> 0] = $__n << 1;
  $__p$0 = $this + 4 | 0;
 } else {
  $6 = $__n + 4 & -4;
  $8 = __Znwj($6 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $8;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $8;
 }
 _wmemset($__p$0, $__c, $__n) | 0;
 HEAP32[$__p$0 + ($__n << 2) >> 2] = 0;
 return;
}

function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$01 = 0, $__i$0 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) {
  $$01 = $__s;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) >= ($__n | 0)) {
    $$0 = $__i$0;
    break L1;
   }
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAP32[$$01 >> 2] | 0) | 0) == -1) {
    $$0 = $__i$0;
    break L1;
   }
   $$01 = $$01 + 4 | 0;
   $__i$0 = $__i$0 + 1 | 0;
  }
 } else $$0 = _fwrite($__s, 4, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $$0 | 0;
}

function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$01 = 0, $__i$0 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) {
  $$01 = $__s;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) >= ($__n | 0)) {
    $$0 = $__i$0;
    break L1;
   }
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 15]($this, HEAPU8[$$01 >> 0] | 0) | 0) == -1) {
    $$0 = $__i$0;
    break L1;
   }
   $$01 = $$01 + 1 | 0;
   $__i$0 = $__i$0 + 1 | 0;
  }
 } else $$0 = _fwrite($__s, 1, $__n, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $$0 | 0;
}

function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $3 = 0, $i$0 = 0;
 HEAP32[$this >> 2] = 18008;
 $0 = $this + 8 | 0;
 $1 = $this + 12 | 0;
 $i$0 = 0;
 while (1) {
  $3 = HEAP32[$0 >> 2] | 0;
  if ($i$0 >>> 0 >= (HEAP32[$1 >> 2] | 0) - $3 >> 2 >>> 0) break;
  $10 = HEAP32[$3 + ($i$0 << 2) >> 2] | 0;
  if ($10 | 0) __ZNSt3__114__shared_count16__release_sharedEv($10) | 0;
  $i$0 = $i$0 + 1 | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 144 | 0);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}

function _strtox($s, $p, $base, $0, $1) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $f = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f = sp;
 HEAP32[$f >> 2] = 0;
 $2 = $f + 4 | 0;
 HEAP32[$2 >> 2] = $s;
 HEAP32[$f + 44 >> 2] = $s;
 $6 = $f + 8 | 0;
 HEAP32[$6 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f + 76 >> 2] = -1;
 ___shlim($f, 0);
 $8 = ___intscan($f, $base, 1, $0, $1) | 0;
 if ($p | 0) HEAP32[$p >> 2] = $s + ((HEAP32[$2 >> 2] | 0) + (HEAP32[$f + 108 >> 2] | 0) - (HEAP32[$6 >> 2] | 0));
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i = 0, $0 = 0, $4 = 0;
 HEAP32[$this >> 2] = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 128 >> 0] = 0;
 if ($__n | 0) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n);
  $$0$i = $__n;
  $4 = HEAP32[$0 >> 2] | 0;
  do {
   HEAP32[$4 >> 2] = 0;
   $4 = (HEAP32[$0 >> 2] | 0) + 4 | 0;
   HEAP32[$0 >> 2] = $4;
   $$0$i = $$0$i + -1 | 0;
  } while (($$0$i | 0) != 0);
 }
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 15]($4, $info, $adjustedPtr, $path_below);
 }
 return;
}

function __ZThn8_N12Front_JS_SDLD0Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + -8 | 0;
 HEAP32[$0 >> 2] = 10864;
 HEAP32[$0 + 8 >> 2] = 11080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 5780 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 2552 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 2536 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 2524 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 2512 | 0);
 __ZdlPv($0);
 return;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $0;
  $$lcssa2 = $1;
 } else {
  $$014 = $l;
  $$05 = $r;
  do {
   $$014 = $$014 + 1 | 0;
   $$05 = $$05 + 1 | 0;
   $6 = HEAP8[$$014 >> 0] | 0;
   $7 = HEAP8[$$05 >> 0] | 0;
  } while (!($6 << 24 >> 24 == 0 ? 1 : $6 << 24 >> 24 != $7 << 24 >> 24));
  $$lcssa = $6;
  $$lcssa2 = $7;
 }
 return ($$lcssa & 255) - ($$lcssa2 & 255) | 0;
}

function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $5 = 0;
 $5 = ($n | 0) == 0;
 if ($d - $s >> 2 >>> 0 < $n >>> 0) {
  if (!$5) {
   $$in = $n;
   do {
    $$in = $$in + -1 | 0;
    HEAP32[$d + ($$in << 2) >> 2] = HEAP32[$s + ($$in << 2) >> 2];
   } while (($$in | 0) != 0);
  }
 } else if (!$5) {
  $$025 = $s;
  $$07 = $d;
  $$16 = $n;
  while (1) {
   $$16 = $$16 + -1 | 0;
   HEAP32[$$07 >> 2] = HEAP32[$$025 >> 2];
   if (!$$16) break; else {
    $$025 = $$025 + 4 | 0;
    $$07 = $$07 + 4 | 0;
   }
  }
 }
 return $d | 0;
}

function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 $flag = $flag | 0;
 $arg = $arg | 0;
 $func = $func | 0;
 _pthread_mutex_lock(3679220) | 0;
 while (1) {
  if ((HEAP32[$flag >> 2] | 0) != 1) break;
  _pthread_cond_wait(3679248, 3679220) | 0;
 }
 if (!(HEAP32[$flag >> 2] | 0)) {
  HEAP32[$flag >> 2] = 1;
  _pthread_mutex_unlock(3679220) | 0;
  FUNCTION_TABLE_vi[$func & 127]($arg);
  _pthread_mutex_lock(3679220) | 0;
  HEAP32[$flag >> 2] = -1;
  _pthread_mutex_unlock(3679220) | 0;
  _pthread_cond_broadcast(3679248) | 0;
 } else _pthread_mutex_unlock(3679220) | 0;
 return;
}

function __ZThn8_N12Front_JS_SDLD1Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + -8 | 0;
 HEAP32[$0 >> 2] = 10864;
 HEAP32[$0 + 8 >> 2] = 11080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 5780 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 2552 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 2536 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 2524 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 2512 | 0);
 return;
}

function __ZN12Front_JS_SDLD0Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 10864;
 HEAP32[$this + 8 >> 2] = 11080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 5780 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 2552 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 2536 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 2524 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 2512 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 while (1) {
  if (($3 | 0) == ($1 | 0)) break;
  $5 = $3 + -4 | 0;
  HEAP32[$2 >> 2] = $5;
  $3 = $5;
 }
 $6 = HEAP32[$this >> 2] | 0;
 do if ($6 | 0) {
  $9 = HEAP32[$this + 16 >> 2] | 0;
  if (($9 | 0) == ($6 | 0)) {
   HEAP8[$9 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv($6);
   break;
  }
 } while (0);
 return;
}

function __ZN12Front_JS_SDLD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 10864;
 HEAP32[$this + 8 >> 2] = 11080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 5780 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 2552 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 2536 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 2524 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 2512 | 0);
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i$i = 0, $1 = 0;
 if ($__n >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
 $1 = $this + 128 | 0;
 if ($__n >>> 0 < 29 & (HEAP8[$1 >> 0] | 0) == 0) {
  HEAP8[$1 >> 0] = 1;
  $$0$i$i = $this + 16 | 0;
 } else $$0$i$i = __Znwj($__n << 2) | 0;
 HEAP32[$this + 4 >> 2] = $$0$i$i;
 HEAP32[$this >> 2] = $$0$i$i;
 HEAP32[$this + 8 >> 2] = $$0$i$i + ($__n << 2);
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $$0 = 0, $$01 = 0, $11 = 0, $2 = 0, $4 = 0;
 $2 = ($high - $low | 0) >>> 2;
 $$0 = $vec;
 $$01 = $low;
 while (1) {
  if (($$01 | 0) == ($high | 0)) break;
  $4 = HEAP32[$$01 >> 2] | 0;
  if ($4 >>> 0 < 128) $11 = HEAPU16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($4 << 1) >> 1] | 0; else $11 = 0;
  HEAP16[$$0 >> 1] = $11;
  $$0 = $$0 + 2 | 0;
  $$01 = $$01 + 4 | 0;
 }
 return $low + ($2 << 2) | 0;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer = sp;
 HEAP32[$f + 36 >> 2] = 2;
 if (!(HEAP32[$f >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21505;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 12;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$f + 75 >> 0] = -1;
 }
 $9 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __Znwj($size) {
 $size = $size | 0;
 var $$lcssa = 0, $$size = 0, $1 = 0, $3 = 0, $5 = 0, label = 0;
 $$size = ($size | 0) == 0 ? 1 : $size;
 while (1) {
  $1 = _malloc($$size) | 0;
  if ($1 | 0) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = __ZSt15get_new_handlerv() | 0;
  if (!$3) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 3]();
 }
 if ((label | 0) == 5) {
  $5 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$5 >> 2] = 18524;
  ___cxa_throw($5 | 0, 1520, 102);
 } else if ((label | 0) == 6) return $$lcssa | 0;
 return 0;
}

function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679180) | 0;
 $1 = $this + 36 | 0;
 HEAP32[$1 >> 2] = $0;
 $6 = $this + 44 | 0;
 HEAP32[$6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 63]($0) | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 63]($7) | 0) & 1;
 if ((HEAP32[$6 >> 2] | 0) > 8) {}
 return;
}

function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679172) | 0;
 $1 = $this + 36 | 0;
 HEAP32[$1 >> 2] = $0;
 $6 = $this + 44 | 0;
 HEAP32[$6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 63]($0) | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 63]($7) | 0) & 1;
 if ((HEAP32[$6 >> 2] | 0) > 8) {}
 return;
}

function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $$0$lcssa = 0, $1 = 0;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0 >> 2] | 0;
  if ($1 >>> 0 >= 128) {
   $$0$lcssa = $$0;
   break;
  }
  if (!((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($1 << 1) >> 1] & $m) << 16 >> 16)) {
   $$0$lcssa = $$0;
   break;
  }
  $$0 = $$0 + 4 | 0;
 }
 return $$0$lcssa | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $0 = 0, $10 = 0, $6 = 0, $7 = 0, $phitmp = 0;
 $0 = Math_imul($nmemb, $size) | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $6 = ___fwritex($src, $0, $f) | 0;
  if ($phitmp) $7 = $6; else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else $7 = ___fwritex($src, $0, $f) | 0;
 if (($7 | 0) == ($0 | 0)) $10 = $nmemb; else $10 = ($7 >>> 0) / ($size >>> 0) | 0;
 return $10 | 0;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $3 = 0, $k$0 = 0, $k$0$len = 0;
 $0 = $f + 84 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $len + 256 | 0;
 $3 = _memchr($1, 0, $2) | 0;
 $k$0 = ($3 | 0) == 0 ? $2 : $3 - $1 | 0;
 $k$0$len = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len;
 _memcpy($buf | 0, $1 | 0, $k$0$len | 0) | 0;
 HEAP32[$f + 4 >> 2] = $1 + $k$0$len;
 $11 = $1 + $k$0 | 0;
 HEAP32[$f + 8 >> 2] = $11;
 HEAP32[$0 >> 2] = $11;
 return $k$0$len | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $1 = 0, $6 = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $1 = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($1 >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $1 : -1; else $req$0 = $1;
 }
 $6 = _malloc($req$0) | 0;
 if (!$6) return $6 | 0;
 if (!(HEAP32[$6 + -4 >> 2] & 3)) return $6 | 0;
 _memset($6 | 0, 0, $req$0 | 0) | 0;
 return $6 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function __ZNSt3__18ios_base4initEPv($this, $sb) {
 $this = $this | 0;
 $sb = $sb | 0;
 var $8 = 0, dest = 0, stop = 0;
 HEAP32[$this + 24 >> 2] = $sb;
 HEAP32[$this + 16 >> 2] = ($sb | 0) == 0 & 1;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 4098;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 6;
 $8 = $this + 28 | 0;
 dest = $this + 32 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev($8);
 return;
}

function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp | 0;
 var $$unpack$i$i$i$i = 0, $$unpack2$i$i$i$i = 0, $2 = 0, $9 = 0;
 $$unpack$i$i$i$i = HEAP32[$__vp + 4 >> 2] | 0;
 $$unpack2$i$i$i$i = HEAP32[$__vp + 8 >> 2] | 0;
 $2 = (HEAP32[$__vp >> 2] | 0) + ($$unpack2$i$i$i$i >> 1) | 0;
 if (!($$unpack2$i$i$i$i & 1)) $9 = $$unpack$i$i$i$i; else $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + $$unpack$i$i$i$i >> 2] | 0;
 FUNCTION_TABLE_vi[$9 & 127]($2);
 return;
}

function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0, $5 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 do if ($0 | 0) {
  $2 = $this + 4 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  while (1) {
   if (($3 | 0) == ($0 | 0)) break;
   $5 = $3 + -4 | 0;
   HEAP32[$2 >> 2] = $5;
   $3 = $5;
  }
  if (($this + 16 | 0) == ($0 | 0)) {
   HEAP8[$this + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv($0);
   break;
  }
 } while (0);
 return;
}

function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$0 = 0, $$01 = 0, $2 = 0, $4 = 0;
 $2 = ($high - $low | 0) >>> 2;
 $$0 = $dest;
 $$01 = $low;
 while (1) {
  if (($$01 | 0) == ($high | 0)) break;
  $4 = HEAP32[$$01 >> 2] | 0;
  HEAP8[$$0 >> 0] = $4 >>> 0 < 128 ? $4 & 255 : $dfault;
  $$0 = $$0 + 1 | 0;
  $$01 = $$01 + 4 | 0;
 }
 return $low + ($2 << 2) | 0;
}

function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $$0$lcssa = 0, $1 = 0;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0 >> 2] | 0;
  if ($1 >>> 0 < 128) if ((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($1 << 1) >> 1] & $m) << 16 >> 16) {
   $$0$lcssa = $$0;
   break;
  }
  $$0 = $$0 + 4 | 0;
 }
 return $$0$lcssa | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = HEAP32[$f >> 2] | 0;
 if (!($6 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $13 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $13;
  HEAP32[$f + 20 >> 2] = $13;
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$f >> 2] = $6 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $4 = 0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f = sp;
 dest = $f;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$f + 32 >> 2] = 27;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 HEAP32[$f + 84 >> 2] = $s;
 $4 = _vfscanf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $9 = 0;
 $2 = ($high - $low | 0) >>> 2;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) break;
  $4 = HEAP32[$$0 >> 2] | 0;
  if ($4 >>> 0 < 128) $9 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ($4 << 2) >> 2] | 0; else $9 = $4;
  HEAP32[$$0 >> 2] = $9;
  $$0 = $$0 + 4 | 0;
 }
 return $low + ($2 << 2) | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $9 = 0;
 $2 = ($high - $low | 0) >>> 2;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) break;
  $4 = HEAP32[$$0 >> 2] | 0;
  if ($4 >>> 0 < 128) $9 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($4 << 2) >> 2] | 0; else $9 = $4;
  HEAP32[$$0 >> 2] = $9;
  $$0 = $$0 + 4 | 0;
 }
 return $low + ($2 << 2) | 0;
}

function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l) | 0;
 $1 = _vsnprintf($__s, $__n, $__format, $__va) | 0;
 if ($0 | 0) _uselocale($0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 if (!(HEAP8[$__str >> 0] & 1)) {
  HEAP32[$this >> 2] = HEAP32[$__str >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2];
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, HEAP32[$__str + 8 >> 2] | 0, HEAP32[$__str + 4 >> 2] | 0);
 return;
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $4 = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp = sp;
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2];
 $4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 31]($catchType, $excpType, $temp) | 0;
 if ($4) HEAP32[$thrown >> 2] = HEAP32[$temp >> 2];
 STACKTOP = sp;
 return $4 & 1 | 0;
}

function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $3 = 0, $4 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0;
 $__h$0 = 0;
 $__p$0 = $__lo;
 while (1) {
  if (($__p$0 | 0) == ($__hi | 0)) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $3 = (HEAP32[$__p$0 >> 2] | 0) + ($__h$0 << 4) | 0;
  $4 = $3 & -268435456;
  $__h$0 = ($4 >>> 24 | $4) ^ $3;
  $__p$0 = $__p$0 + 4 | 0;
 }
 return $__h$0$lcssa | 0;
}

function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $4 = 0, $5 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0;
 $__h$0 = 0;
 $__p$0 = $__lo;
 while (1) {
  if (($__p$0 | 0) == ($__hi | 0)) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $4 = (HEAP8[$__p$0 >> 0] | 0) + ($__h$0 << 4) | 0;
  $5 = $4 & -268435456;
  $__h$0 = ($5 >>> 24 | $5) ^ $4;
  $__p$0 = $__p$0 + 1 | 0;
 }
 return $__h$0$lcssa | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0;
 $0 = $this + 8 | 0;
 $2 = _uselocale(HEAP32[$0 >> 2] | 0) | 0;
 $3 = _mbtowc(0, 0, 4) | 0;
 if ($2 | 0) _uselocale($2) | 0;
 if (!$3) {
  $6 = HEAP32[$0 >> 2] | 0;
  if (!$6) $$0 = 1; else {
   $8 = _uselocale($6) | 0;
   if (!$8) $$0 = 0; else {
    _uselocale($8) | 0;
    $$0 = 0;
   }
  }
 } else $$0 = -1;
 return $$0 | 0;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this, $__os) {
 $this = $this | 0;
 $__os = $__os | 0;
 var $4 = 0, $9 = 0;
 HEAP8[$this >> 0] = 0;
 HEAP32[$this + 4 >> 2] = $__os;
 $4 = $__os + (HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (!(HEAP32[$4 + 16 >> 2] | 0)) {
  $9 = HEAP32[$4 + 72 >> 2] | 0;
  if ($9 | 0) __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($9) | 0;
  HEAP8[$this >> 0] = 1;
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this, $__os) {
 $this = $this | 0;
 $__os = $__os | 0;
 var $4 = 0, $9 = 0;
 HEAP8[$this >> 0] = 0;
 HEAP32[$this + 4 >> 2] = $__os;
 $4 = $__os + (HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (!(HEAP32[$4 + 16 >> 2] | 0)) {
  $9 = HEAP32[$4 + 72 >> 2] | 0;
  if ($9 | 0) __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9) | 0;
  HEAP8[$this >> 0] = 1;
 }
 return;
}

function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l) | 0;
 $1 = _vasprintf($__s, $__format, $__va) | 0;
 if ($0 | 0) _uselocale($0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $1 = 0, $8 = 0;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) break;
  $1 = HEAP8[$$0 >> 0] | 0;
  if ($1 << 24 >> 24 > -1) $8 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; else $8 = $1;
  HEAP8[$$0 >> 0] = $8;
  $$0 = $$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0 = 0, $1 = 0, $8 = 0;
 $$0 = $low;
 while (1) {
  if (($$0 | 0) == ($high | 0)) break;
  $1 = HEAP8[$$0 >> 0] | 0;
  if ($1 << 24 >> 24 > -1) $8 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; else $8 = $1;
  HEAP8[$$0 >> 0] = $8;
  $$0 = $$0 + 1 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$0 = 0, $$01 = 0, $1 = 0;
 $$0 = $dest;
 $$01 = $low;
 while (1) {
  if (($$01 | 0) == ($high | 0)) break;
  $1 = HEAP8[$$01 >> 0] | 0;
  HEAP8[$$0 >> 0] = $1 << 24 >> 24 > -1 ? $1 : $dfault;
  $$0 = $$0 + 1 | 0;
  $$01 = $$01 + 1 | 0;
 }
 return $high | 0;
}

function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l) | 0;
 $1 = _vsscanf($__s, $__format, $__va) | 0;
 if ($0 | 0) _uselocale($0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this, $ev) {
 $this = $this | 0;
 $ev = $ev | 0;
 var $2 = 0, $3 = 0, $5 = 0, $i$0 = 0;
 $2 = $this + 32 | 0;
 $3 = $this + 36 | 0;
 $i$0 = HEAP32[$this + 40 >> 2] | 0;
 while (1) {
  if (!$i$0) break;
  $5 = $i$0 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$2 >> 2] | 0) + ($5 << 2) >> 2] & 31]($ev, $this, HEAP32[(HEAP32[$3 >> 2] | 0) + ($5 << 2) >> 2] | 0);
  $i$0 = $5;
 }
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZNSt3__18numpunctIwEC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $4 = 0, $__i$0$i$i = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 18120;
 HEAP32[$this + 8 >> 2] = 46;
 HEAP32[$this + 12 >> 2] = 44;
 $4 = $this + 16 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$4 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__18numpunctIcEC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $4 = 0, $__i$0$i$i = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 18080;
 HEAP8[$this + 8 >> 0] = 46;
 HEAP8[$this + 9 >> 0] = 44;
 $4 = $this + 12 | 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$4 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $3 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 63]($this) | 0;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679180) | 0;
 HEAP32[$this + 36 >> 2] = $3;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1;
 return;
}

function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $3 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 63]($this) | 0;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 3679172) | 0;
 HEAP32[$this + 36 >> 2] = $3;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1;
 return;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $1 = 0, $5 = 0, $fabs = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $fabs = +Math_abs(+$x);
 HEAPF64[tempDoublePtr >> 3] = $fabs;
 $5 = $1 & -2147483648 | HEAP32[tempDoublePtr + 4 >> 2];
 HEAP32[tempDoublePtr >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[tempDoublePtr + 4 >> 2] = $5;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this | 0;
 var $__p$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p$i = sp;
 if ((HEAP32[$this >> 2] | 0) != -1) {
  HEAP32[$__p$i >> 2] = $this;
  HEAP32[$__p$i + 4 >> 2] = 109;
  HEAP32[$__p$i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this, $__p$i, 110);
 }
 STACKTOP = sp;
 return (HEAP32[$this + 4 >> 2] | 0) + -1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $agg$result + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $agg$result + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if (!(HEAP32[$f + 8 >> 2] | 0)) if (!(___toread($f) | 0)) label = 3; else $$0 = -1; else label = 3;
 if ((label | 0) == 3) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function _newlocale($mask, $name, $base) {
 $mask = $mask | 0;
 $name = $name | 0;
 $base = $base | 0;
 var $$01 = 0, label = 0;
 if (!(HEAP8[$name >> 0] | 0)) label = 4; else if (!(_strcmp($name, 3671217) | 0)) label = 4; else if (!(_strcmp($name, 3670092) | 0)) label = 4; else $$01 = 0;
 if ((label | 0) == 4) if (!$base) $$01 = _calloc(1, 4) | 0; else $$01 = $base;
 return $$01 | 0;
}

function __ZNSt3__15ctypeIcEC2EPKtbj($this, $tab, $del, $refs) {
 $this = $this | 0;
 $tab = $tab | 0;
 $del = $del | 0;
 $refs = $refs | 0;
 var $2 = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 18028;
 $2 = $this + 8 | 0;
 HEAP32[$2 >> 2] = $tab;
 HEAP8[$this + 12 >> 0] = $del & 1;
 if (!$tab) HEAP32[$2 >> 2] = HEAP32[(___ctype_b_loc() | 0) >> 2];
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $agg$result + 8 | 0;
 HEAP32[$7 >> 2] = -1;
 HEAP32[$7 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $agg$result + 8 | 0;
 HEAP32[$7 >> 2] = -1;
 HEAP32[$7 + 4 >> 2] = -1;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[3674128] | 0)) if (___cxa_guard_acquire(3674128) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(3679044, 17336, _wcslen(17336) | 0);
  ___cxa_atexit(118, 3679044, ___dso_handle | 0) | 0;
  ___cxa_guard_release(3674128);
 }
 return 3679044;
}

function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[3674120] | 0)) if (___cxa_guard_acquire(3674120) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(3679032, 17288, _wcslen(17288) | 0);
  ___cxa_atexit(118, 3679032, ___dso_handle | 0) | 0;
  ___cxa_guard_release(3674120);
 }
 return 3679032;
}

function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[3674112] | 0)) if (___cxa_guard_acquire(3674112) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(3679020, 17204, _wcslen(17204) | 0);
  ___cxa_atexit(118, 3679020, ___dso_handle | 0) | 0;
  ___cxa_guard_release(3674112);
 }
 return 3679020;
}

function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[3674136] | 0)) if (___cxa_guard_acquire(3674136) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(3679056, 17372, _wcslen(17372) | 0);
  ___cxa_atexit(118, 3679056, ___dso_handle | 0) | 0;
  ___cxa_guard_release(3674136);
 }
 return 3679056;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$0 = 0, $$01 = 0;
 $$0 = $dest;
 $$01 = $low;
 while (1) {
  if (($$01 | 0) == ($high | 0)) break;
  HEAP8[$$0 >> 0] = HEAP8[$$01 >> 0] | 0;
  $$0 = $$0 + 1 | 0;
  $$01 = $$01 + 1 | 0;
 }
 return $high | 0;
}

function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$0 = 0, $$01 = 0;
 $$0 = $dest;
 $$01 = $low;
 while (1) {
  if (($$01 | 0) == ($high | 0)) break;
  HEAP32[$$0 >> 2] = HEAP8[$$01 >> 0];
  $$0 = $$0 + 4 | 0;
  $$01 = $$01 + 1 | 0;
 }
 return $high | 0;
}

function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(3676420) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(3676588) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(3676760) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(3676928) | 0;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 63]($this) | 0) == -1) $$0 = -1; else {
  $5 = $this + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $6 + 4;
  $$0 = HEAP32[$6 >> 2] | 0;
 }
 return $$0 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 63]($this) | 0) == -1) $$0 = -1; else {
  $5 = $this + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $6 + 1;
  $$0 = HEAPU8[$6 >> 0] | 0;
 }
 return $$0 | 0;
}

function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function _wmemcpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$014 = 0, $$023 = 0, $$05 = 0;
 if ($n | 0) {
  $$014 = $n;
  $$023 = $s;
  $$05 = $d;
  while (1) {
   $$014 = $$014 + -1 | 0;
   HEAP32[$$05 >> 2] = HEAP32[$$023 >> 2];
   if (!$$014) break; else {
    $$023 = $$023 + 4 | 0;
    $$05 = $$05 + 4 | 0;
   }
  }
 }
 return $d | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 15448;
 __ZNSt3__16localeC2Ev($this + 4 | 0);
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 15384;
 __ZNSt3__16localeC2Ev($this + 4 | 0);
 $1 = $this + 8 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 return;
}

function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[3674040] | 0)) if (___cxa_guard_acquire(3674040) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(3678220, 3671948, 11);
  ___cxa_atexit(114, 3678220, ___dso_handle | 0) | 0;
  ___cxa_guard_release(3674040);
 }
 return 3678220;
}

function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[3674032] | 0)) if (___cxa_guard_acquire(3674032) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(3678208, 3671927, 20);
  ___cxa_atexit(114, 3678208, ___dso_handle | 0) | 0;
  ___cxa_guard_release(3674032);
 }
 return 3678208;
}

function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[3674048] | 0)) if (___cxa_guard_acquire(3674048) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(3678232, 3671960, 8);
  ___cxa_atexit(114, 3678232, ___dso_handle | 0) | 0;
  ___cxa_guard_release(3674048);
 }
 return 3678232;
}

function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[3674056] | 0)) if (___cxa_guard_acquire(3674056) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(3678244, 3671969, 8);
  ___cxa_atexit(114, 3678244, ___dso_handle | 0) | 0;
  ___cxa_guard_release(3674056);
 }
 return 3678244;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $2 = 0, $4 = 0, $5 = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $2 = HEAP32[$f + 8 >> 2] | 0;
 $4 = HEAP32[$f + 4 >> 2] | 0;
 $5 = $2 - $4 | 0;
 HEAP32[$f + 108 >> 2] = $5;
 if (($lim | 0) != 0 & ($5 | 0) > ($lim | 0)) HEAP32[$f + 100 >> 2] = $4 + $lim; else HEAP32[$f + 100 >> 2] = $2;
 return;
}

function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 15368;
 __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this, 0);
 __ZNSt3__16localeD2Ev($this + 28 | 0);
 _free(HEAP32[$this + 32 >> 2] | 0);
 _free(HEAP32[$this + 36 >> 2] | 0);
 _free(HEAP32[$this + 48 >> 2] | 0);
 _free(HEAP32[$this + 60 >> 2] | 0);
 return;
}

function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$__nm >> 0] & 1) == 0 ? $__nm + 1 | 0 : HEAP32[$__nm + 8 >> 2] | 0, 1) | 0;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$__nm >> 0] & 1) == 0 ? $__nm + 1 | 0 : HEAP32[$__nm + 8 >> 2] | 0, 1) | 0;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $4 = 0, $l$ = 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $4 >>> 0 > $l >>> 0 ? $l : $4;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 return $l | 0;
}

function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $1 + -1;
 if (!$1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] & 127]($this);
  $$0 = 1;
 } else $$0 = 0;
 return $$0 | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $__i$0$i$i = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[2830] | 0;
 _vfprintf($0, $format, $list) | 0;
 _fputc(10, $0) | 0;
 _abort();
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 $3 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $5 = 0;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if (!$1) $5 = 1; else {
  $3 = _uselocale($1) | 0;
  if (!$3) $5 = 4; else {
   _uselocale($3) | 0;
   $5 = 4;
  }
 }
 return $5 | 0;
}

function __ZN12Front_JS_SDL15send_to_channelERKN8CHANNELS10ChannelDefEPKhjji($this, $channel, $data, $length, $chunk_size, $flags) {
 $this = $this | 0;
 $channel = $channel | 0;
 $data = $data | 0;
 $length = $length | 0;
 $chunk_size = $chunk_size | 0;
 $flags = $flags | 0;
 return;
}

function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsscanf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _wmemset($d, $c, $n) {
 $d = $d | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$012 = 0, $$03 = 0;
 if ($n | 0) {
  $$012 = $n;
  $$03 = $d;
  while (1) {
   $$012 = $$012 + -1 | 0;
   HEAP32[$$03 >> 2] = $c;
   if (!$$012) break; else $$03 = $$03 + 4 | 0;
  }
 }
 return $d | 0;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(3679296, 3) | 0)) {
  $3 = _pthread_getspecific(HEAP32[919825] | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else _abort_message(3673462, sp);
 return 0;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679148) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679140) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679132) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679124) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679084) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679076) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679068) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3678256) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3677444) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3677436) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3677428) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3677404) | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free($p);
 if (!(_pthread_setspecific(HEAP32[919825] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(3673359, sp);
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $3 = 0;
 $3 = $end - $frm | 0;
 return ($3 >>> 0 < $mx >>> 0 ? $3 : $mx) | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 HEAP32[$this >> 2] = 17960;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[$0 >> 2] | 0);
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $6 = 0;
 if ($c >>> 0 < 128) $6 = (HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + ($c << 1) >> 1] & $m) << 16 >> 16 != 0; else $6 = 0;
 return $6 | 0;
}

function __ZN8FrontAPI39disable_input_event_and_graphics_updateEbb($this, $disable_input_event, $disable_graphics_update) {
 $this = $this | 0;
 $disable_input_event = $disable_input_event | 0;
 $disable_graphics_update = $disable_graphics_update | 0;
 return 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, _wcslen($__s) | 0) | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, _strlen($__s) | 0) | 0;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $6 = 0;
 if ($c << 24 >> 24 > -1) $6 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($c << 24 >> 24 << 2) >> 2] & 255; else $6 = $c;
 return $6 | 0;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function __ZNKSt3__16locale9use_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $0 = 0, $1 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = __ZNSt3__16locale2id5__getEv($x) | 0;
 return HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + ($1 << 2) >> 2] | 0;
}

function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $6 = 0;
 if ($c << 24 >> 24 > -1) $6 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (($c & 255) << 2) >> 2] & 255; else $6 = $c;
 return $6 | 0;
}

function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function __ZNSt3__16locale8__globalEv() {
 if (!(HEAP8[3674624] | 0)) if (___cxa_guard_acquire(3674624) | 0) {
  __ZNSt3__16locale5__imp11make_globalEv() | 0;
  HEAP32[919804] = 3679212;
  ___cxa_guard_release(3674624);
 }
 return HEAP32[919804] | 0;
}

function __ZNSt3__16locale7classicEv() {
 if (!(HEAP8[3674456] | 0)) if (___cxa_guard_acquire(3674456) | 0) {
  __ZNSt3__16locale5__imp12make_classicEv() | 0;
  HEAP32[919802] = 3679204;
  ___cxa_guard_release(3674456);
 }
 return HEAP32[919802] | 0;
}

function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 18172, _wcslen(18172) | 0);
 return;
}

function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 18152, _wcslen(18152) | 0);
 return;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45);
 return;
}

function __ZNKSt3__18ios_base6getlocEv($this) {
 $this = $this | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 __ZNSt3__16localeC2ERKS0_($0, $this + 28 | 0);
 STACKTOP = sp;
 return HEAP32[$0 >> 2] | 0;
}

function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $4 = 0;
 if ($c >>> 0 < 128) $4 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ($c << 2) >> 2] | 0; else $4 = $c;
 return $4 | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $4 = 0;
 if ($c >>> 0 < 128) $4 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + ($c << 2) >> 2] | 0; else $4 = $c;
 return $4 | 0;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679188) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679196) | 0);
 return;
}

function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 3673186, 5);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679180) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679172) | 0);
 return;
}

function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 16 | 0);
 return;
}

function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 3673181, 4);
 return;
}

function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result, $this + 12 | 0);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(3679300, 121) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(3673412, sp);
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679116) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679108) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679100) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679092) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__16__clocEv() {
 if (!(HEAP8[3673976] | 0)) if (___cxa_guard_acquire(3673976) | 0) {
  HEAP32[919350] = _newlocale(2147483647, 3671217, 0) | 0;
  ___cxa_guard_release(3673976);
 }
 return HEAP32[919350] | 0;
}

function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return FUNCTION_TABLE_iiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3677420) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3677392) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679164) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3679156) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3677372) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3677364) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3677412) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3677380) | 0);
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNSt3__16localeC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 $1 = HEAP32[(__ZNSt3__16locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[$this >> 2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return;
}

function __ZNSt3__16locale5__imp11make_globalEv() {
 var $1 = 0;
 $1 = HEAP32[(__ZNSt3__16locale7classicEv() | 0) >> 2] | 0;
 HEAP32[919803] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return 3679212;
}

function _wcslen($s) {
 $s = $s | 0;
 var $$0 = 0, $$0$lcssa = 0;
 $$0 = $s;
 while (1) if (!(HEAP32[$$0 >> 2] | 0)) {
  $$0$lcssa = $$0;
  break;
 } else $$0 = $$0 + 4 | 0;
 return $$0$lcssa - $s >> 2 | 0;
}

function __ZNSt3__16localeC2ERKS0_($this, $l) {
 $this = $this | 0;
 $l = $l | 0;
 var $0 = 0;
 $0 = HEAP32[$l >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}

function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 18028;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if ($1 | 0) if (HEAP8[$this + 12 >> 0] | 0) __ZdaPv($1);
 return;
}

function __ZN12Front_JS_SDL4drawERK13RDPGlyphIndexRK4RectRK10GlyphCache($this, $cmd, $clip, $gly_cache) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 $gly_cache = $gly_cache | 0;
 return;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4 | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4 | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8 | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8 | 0);
 return;
}

function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[$this >> 2] | 0);
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18120;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 16 | 0);
 return;
}

function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18080;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this + 12 | 0);
 return;
}

function __ZN8FrontAPI23send_data_indication_exEtPKhj($this, $channelId, $data, $size) {
 $this = $this | 0;
 $channelId = $channelId | 0;
 $data = $data | 0;
 $size = $size | 0;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 15448;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 15384;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $$0 = 0;
 if ($r >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $r;
  $$0 = -1;
 } else $$0 = $r;
 return $$0 | 0;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function b11(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(11);
 return 0;
}

function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 if ($this | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 127]($this);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this >> 0] & 1) __ZdlPv(HEAP32[$this + 8 >> 2] | 0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this >> 0] & 1) __ZdlPv(HEAP32[$this + 8 >> 2] | 0);
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 16 | 0;
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 1;
 return;
}

function _uselocale($l) {
 $l = $l | 0;
 var $1 = 0, $2 = 0;
 $1 = (_pthread_self() | 0) + 180 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if ($l | 0) HEAP32[$1 >> 2] = $l;
 return $2 | 0;
}

function __ZNSt3__18ios_base5clearEj($this, $state) {
 $this = $this | 0;
 $state = $state | 0;
 HEAP32[$this + 16 >> 2] = (HEAP32[$this + 24 >> 2] | 0) == 0 | $state;
 return;
}

function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[919347] | 0;
 HEAP32[919347] = $0 + 1;
 HEAP32[$this + 4 >> 2] = $0 + 1;
 return;
}

function _strtoull_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoull($s, $p, $base) | 0;
 return $0 | 0;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $3 = 0;
 if (!$type) $3 = 0; else $3 = (___dynamic_cast($type, 1496, 1552, 0) | 0) != 0;
 return $3 & 1 | 0;
}

function __ZNK8FrontAPI20intersect_order_capsEiPh($this, $idx, $proxy_order_caps) {
 $this = $this | 0;
 $idx = $idx | 0;
 $proxy_order_caps = $proxy_order_caps | 0;
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c >>> 0 < 128 ? $c & 255 : $dfault) | 0;
}

function __ZN12Front_JS_SDL13server_resizeEiii($this, $width, $height, $bpp) {
 $this = $this | 0;
 $width = $width | 0;
 $height = $height | 0;
 $bpp = $bpp | 0;
 return 0;
}

function _strtoll_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoll($s, $p, $base) | 0;
 return $0 | 0;
}

function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c << 24 >> 24 > -1 ? $c : $dfault) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 15448;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 15384;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 31](a1 | 0, a2 | 0, a3 | 0);
}

function b0(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(0);
 return 0;
}

function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox($s, $p, $base, 0, -2147483648) | 0;
 return $0 | 0;
}

function ___errno_location() {
 var $$0 = 0;
 if (!(HEAP32[918945] | 0)) $$0 = 3675824; else $$0 = HEAP32[(_pthread_self() | 0) + 64 >> 2] | 0;
 return $$0 | 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0;
 $0 = _strtox($s, $p, $base, -1, -1) | 0;
 return $0 | 0;
}

function _isxdigit($c) {
 $c = $c | 0;
 var $4 = 0;
 if (($c + -48 | 0) >>> 0 < 10) $4 = 1; else $4 = (($c | 32) + -97 | 0) >>> 0 < 6;
 return $4 & 1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZN12Front_JS_SDL4drawERKN3RDP14RDPMultiScrBltERK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 return;
}

function __ZN12Front_JS_SDL4drawERKN3RDP14RDPMultiPatBltERK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 return;
}

function __ZSt17__throw_bad_allocv() {
 var $0 = 0;
 $0 = ___cxa_allocate_exception(4) | 0;
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw($0 | 0, 1520, 102);
}

function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 ___assert_fail(3670513, 3670542, 1164, 3673313);
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function __ZN12Front_JS_SDL4drawERK18RDPMultiOpaqueRectRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 return;
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 ___assert_fail(3673213, 3673236, 303, 3673313);
}

function __ZN12Front_JS_SDL4drawERK14RDPMultiDstBltRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 return;
}

function _catgets($catd, $set_id, $msg_id, $s) {
 $catd = $catd | 0;
 $set_id = $set_id | 0;
 $msg_id = $msg_id | 0;
 $s = $s | 0;
 return $s | 0;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0;
}

function __ZNSt3__16localeD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$this >> 2] | 0) | 0;
 return;
}

function __ZN12Front_JS_SDL4drawERK12RDPPolygonSCRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 return;
}

function __ZN12Front_JS_SDL4drawERK12RDPPolygonCBRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 return;
}

function __ZN12Front_JS_SDL4drawERK12RDPEllipseSCRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 return;
}

function __ZN12Front_JS_SDL4drawERK12RDPEllipseCBRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 return;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0;
 if (!$s) $$0 = 0; else $$0 = _wcrtomb($s, $wc, 0) | 0;
 return $$0 | 0;
}

function __ZN12Front_JS_SDL4drawERK11RDPPolylineRK4Rect($this, $cmd, $clip) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 $clip = $clip | 0;
 return;
}

function b6(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(6);
 return 0;
}

function __ZNK8FrontAPI23intersect_order_caps_exER9OrderCaps($this, $order_caps) {
 $this = $this | 0;
 $order_caps = $order_caps | 0;
 return;
}

function b3(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(3);
 return 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 return;
}

function __ZN3gdi10GraphicApi7set_rowEjPKh($this, $rownum, $data) {
 $this = $this | 0;
 $rownum = $rownum | 0;
 $data = $data | 0;
 return;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__16locale5__imp12make_classicEv() {
 __ZNSt3__16locale5__impC2Ej(3674464, 1);
 HEAP32[919801] = 3674464;
 return 3679204;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb($this, 0) | 0;
}

function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb($this, 0) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZN8FrontAPI30retrieve_client_capability_setER10Capability($this, $caps) {
 $this = $this | 0;
 $caps = $caps | 0;
 return 1;
}

function __ZN12Front_JS_SDL4drawERKN3RDP4RAIL19NewOrExistingWindowE($this, $order) {
 $this = $this | 0;
 $order = $order | 0;
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0);
}

function b13(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(13);
}

function __ZThn8_N12Front_JS_SDL23update_pointer_positionEtt($this, $x, $y) {
 $this = $this | 0;
 $x = $x | 0;
 $y = $y | 0;
 return;
}

function _mbrlen($s, $n, $st) {
 $s = $s | 0;
 $n = $n | 0;
 $st = $st | 0;
 return _mbrtowc(0, $s, $n, $st | 0 ? $st : 3675832) | 0;
}

function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb($this, 1) | 0;
}

function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb($this, 1) | 0;
}

function __ZN12Front_JS_SDL14setmod_paletteERK10BGRPalette($this, $palette) {
 $this = $this | 0;
 $palette = $palette | 0;
 return;
}

function _mbsinit($st) {
 $st = $st | 0;
 var $4 = 0;
 if (!$st) $4 = 1; else $4 = (HEAP32[$st >> 2] | 0) == 0;
 return $4 & 1 | 0;
}

function __ZN8FrontAPI14session_updateERK10array_viewIKcE($this, $message) {
 $this = $this | 0;
 $message = $message | 0;
 return;
}

function __ZN3gdi10GraphicApi11set_paletteERK10BGRPalette($this, $palette) {
 $this = $this | 0;
 $palette = $palette | 0;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 return ___string_read($f, $buf, $len) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZN12Front_JS_SDL4drawERKN3RDP4RAIL13DeletedWindowE($this, $order) {
 $this = $this | 0;
 $order = $order | 0;
 return;
}

function __ZN12Front_JS_SDL23update_pointer_positionEtt($this, $x, $y) {
 $this = $this | 0;
 $x = $x | 0;
 $y = $y | 0;
 return;
}

function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}

function b15(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(15);
 return 0;
}

function __GLOBAL__I_000101() {
 __ZNSt3__18ios_base4InitC2Ev(0);
 ___cxa_atexit(108, 5254244, ___dso_handle | 0) | 0;
 return;
}

function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN8FrontAPI23set_keyboard_indicatorsEt($this, $LedFlags) {
 $this = $this | 0;
 $LedFlags = $LedFlags | 0;
 return;
}

function __ZN12Front_JS_SDL4drawERKN3RDP4RAIL10WindowIconE($this, $order) {
 $this = $this | 0;
 $order = $order | 0;
 return;
}

function __ZN12Front_JS_SDL4drawERKN3RDP4RAIL10CachedIconE($this, $order) {
 $this = $this | 0;
 $order = $order | 0;
 return;
}

function __ZN3gdi10GraphicApi4drawERKN3RDP4RAIL19NewOrExistingWindowE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZN3gdi10GraphicApi11set_pointerERK7Pointer($this, $cursor) {
 $this = $this | 0;
 $cursor = $cursor | 0;
 return;
}

function b7(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 abort(7);
 return 0;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN12Front_JS_SDL4drawERKN3RDP11FrameMarkerE($this, $order) {
 $this = $this | 0;
 $order = $order | 0;
 return;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN8FrontAPI21session_probe_startedEb($this, $started) {
 $this = $this | 0;
 $started = $started | 0;
 return;
}

function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN3gdi10GraphicApi4drawERKN3RDP4RAIL13DeletedWindowE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 12 >> 2] | 0;
}

function __ZN8FrontAPI18send_fastpath_dataER8InStream($this, $data) {
 $this = $this | 0;
 $data = $data | 0;
 return;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 63](a1 | 0) | 0;
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[919826] | 0;
 HEAP32[919826] = $0 + 0;
 return $0 | 0;
}

function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 8 >> 2] | 0;
}

function __ZN8FrontAPI29set_focus_on_password_textboxEb($this, $set) {
 $this = $this | 0;
 $set = $set | 0;
 return;
}

function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 9 >> 0] | 0;
}

function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 8 >> 0] | 0;
}

function __ZN3gdi10GraphicApi4drawERKN3RDP4RAIL10WindowIconE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZN3gdi10GraphicApi4drawERKN3RDP4RAIL10CachedIconE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __GLOBAL__sub_I_bitmap_data_allocator_cpp() {
 ___cxa_atexit(105, 3675656, ___dso_handle | 0) | 0;
 return;
}

function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c << 24 >> 24 | 0;
}

function b2(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(2);
}

function __ZN3gdi10GraphicApi4drawERK13RDPBrushCache($this, $cmd) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 return;
}

function __ZN4aux_11BmpMemAllocD2Ev($this) {
 $this = $this | 0;
 __ZdlPv(HEAP32[$this + 120 >> 2] | 0);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZN3gdi10GraphicApi4drawERK11RDPColCache($this, $cmd) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 return;
}

function __ZN12Front_JS_SDL4drawERK13RDPBrushCache($this, $cmd) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 return;
}

function _strtold_l($s, $p, $l) {
 $s = $s | 0;
 $p = $p | 0;
 $l = $l | 0;
 return +(+_strtox_276($s, $p, 2));
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZN8FrontAPI22set_consent_ui_visibleEb($this, $set) {
 $this = $this | 0;
 $set = $set | 0;
 return;
}

function __ZN12Front_JS_SDL4drawERK11RDPColCache($this, $cmd) {
 $this = $this | 0;
 $cmd = $cmd | 0;
 return;
}

function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(12);
 return 0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 127](a1 | 0);
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}

function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN8FrontAPI13set_keylayoutEi($this, $LCID) {
 $this = $this | 0;
 $LCID = $LCID | 0;
 return;
}

function _cleanup_161($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) ___unlockfile($p);
 return;
}

function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c | 0;
}

function __ZNK12Front_JS_SDL16get_channel_listEv($this) {
 $this = $this | 0;
 return $this + 5260 | 0;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 1;
}

function _cleanup($p) {
 $p = $p | 0;
 if (!(HEAP32[$p + 68 >> 2] | 0)) ___unlockfile($p);
 return;
}

function b16(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(16);
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function _isdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0;
}

function __ZNSt9bad_allocC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 18524;
 return;
}

function __ZThn8_N8FrontAPID0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this + -8 | 0);
 return;
}

function _catopen($name, $oflag) {
 $name = $name | 0;
 $oflag = $oflag | 0;
 return -1 | 0;
}

function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(1);
 return 0;
}

function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN8FrontAPI9get_eventEv($this) {
 $this = $this | 0;
 return $this + 24 | 0;
}

function _isxdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return _isxdigit($c) | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg | 0;
 return;
}

function __ZNK8FrontAPI13get_keylayoutEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZN8FrontAPID0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZN12Front_JS_SDL12begin_updateEv($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this | 0;
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3]();
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}

function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 return 3673839;
}

function __ZN12Front_JS_SDL10end_updateEv($this) {
 $this = $this | 0;
 return;
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(9);
}

function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this | 0;
 return;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN3gdi10GraphicApi4syncEv($this) {
 $this = $this | 0;
 return;
}

function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(14);
 return 0;
}

function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZThn8_N8FrontAPID1Ev($this) {
 $this = $this | 0;
 return;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 __ZdlPv($ptr);
 return;
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 return;
}

function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}

function __ZN8FrontAPID2Ev($this) {
 $this = $this | 0;
 return;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _freelocale($l) {
 $l = $l | 0;
 _free($l);
 return;
}

function b5(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(5);
}

function _catclose($catd) {
 $catd = $catd | 0;
 return 0;
}

function b8(p0) {
 p0 = p0 | 0;
 abort(8);
 return 0;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function ___ctype_toupper_loc() {
 return 13560;
}

function ___ctype_tolower_loc() {
 return 12020;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b4(p0) {
 p0 = p0 | 0;
 abort(4);
}

function ___ctype_b_loc() {
 return 15100;
}

function b10() {
 abort(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0];
var FUNCTION_TABLE_iiii = [b1,__ZN8FrontAPI39disable_input_event_and_graphics_updateEbb,___stdio_write,___stdio_seek,___stdout_write,___stdio_read,_sn_write,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_do_read,b1
,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_iiiiiid = [b3,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b3];
var FUNCTION_TABLE_vi = [b4,__ZN12Front_JS_SDLD2Ev,__ZN12Front_JS_SDLD0Ev,__ZN3gdi10GraphicApi4syncEv,__ZN12Front_JS_SDL12begin_updateEv,__ZN12Front_JS_SDL10end_updateEv,__ZThn8_N12Front_JS_SDLD1Ev,__ZThn8_N12Front_JS_SDLD0Ev,__ZN8FrontAPID2Ev,__ZN8FrontAPID0Ev,__ZThn8_N8FrontAPID1Ev,__ZThn8_N8FrontAPID0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev
,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev
,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__18numpunctIcED2Ev
,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN4aux_11BmpMemAllocD2Ev,_cleanup_161,_cleanup,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,___cxx_global_array_dtor,___cxx_global_array_dtor_61,___cxx_global_array_dtor_109,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,___cxx_global_array_dtor_46,___cxx_global_array_dtor_85,___cxx_global_array_dtor_112,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev
,__ZNSt3__112__do_nothingEPv,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,__ZN3gdi10GraphicApi11set_pointerERK7Pointer,__ZN3gdi10GraphicApi11set_paletteERK10BGRPalette,__ZN12Front_JS_SDL4drawERKN3RDP11FrameMarkerE,__ZN12Front_JS_SDL4drawERKN3RDP4RAIL19NewOrExistingWindowE,__ZN12Front_JS_SDL4drawERKN3RDP4RAIL10WindowIconE,__ZN12Front_JS_SDL4drawERKN3RDP4RAIL10CachedIconE,__ZN12Front_JS_SDL4drawERKN3RDP4RAIL13DeletedWindowE,__ZN12Front_JS_SDL4drawERK11RDPColCache,__ZN12Front_JS_SDL4drawERK13RDPBrushCache,__ZNK8FrontAPI23intersect_order_caps_exER9OrderCaps,__ZN8FrontAPI18send_fastpath_dataER8InStream,__ZN8FrontAPI23set_keyboard_indicatorsEt,__ZN8FrontAPI21session_probe_startedEb,__ZN8FrontAPI13set_keylayoutEi,__ZN8FrontAPI29set_focus_on_password_textboxEb,__ZN8FrontAPI22set_consent_ui_visibleEb,__ZN8FrontAPI14session_updateERK10array_viewIKcE,__ZN12Front_JS_SDL14setmod_paletteERK10BGRPalette,__ZN3gdi10GraphicApi4drawERKN3RDP4RAIL19NewOrExistingWindowE,__ZN3gdi10GraphicApi4drawERKN3RDP4RAIL10WindowIconE,__ZN3gdi10GraphicApi4drawERKN3RDP4RAIL10CachedIconE,__ZN3gdi10GraphicApi4drawERKN3RDP4RAIL13DeletedWindowE,__ZN3gdi10GraphicApi4drawERK11RDPColCache,__ZN3gdi10GraphicApi4drawERK13RDPBrushCache,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE
,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv
,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b5];
var FUNCTION_TABLE_iiiiiii = [b6,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiid = [b7,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b7,b7,b7];
var FUNCTION_TABLE_ii = [b8,__ZNK12Front_JS_SDL16get_channel_listEv,__ZN8FrontAPI9get_eventEv,__ZNK8FrontAPI13get_keylayoutEv,___stdio_close,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv
,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv
,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt9bad_alloc4whatEv];
var FUNCTION_TABLE_viii = [b9,__ZN12Front_JS_SDL4drawERK10RDPDestBltRK4Rect,__ZN12Front_JS_SDL4drawERK14RDPMultiDstBltRK4Rect,__ZN12Front_JS_SDL4drawERK9RDPPatBltRK4Rect,__ZN12Front_JS_SDL4drawERKN3RDP14RDPMultiPatBltERK4Rect,__ZN12Front_JS_SDL4drawERK13RDPOpaqueRectRK4Rect,__ZN12Front_JS_SDL4drawERK18RDPMultiOpaqueRectRK4Rect,__ZN12Front_JS_SDL4drawERK9RDPScrBltRK4Rect,__ZN12Front_JS_SDL4drawERKN3RDP14RDPMultiScrBltERK4Rect,__ZN12Front_JS_SDL4drawERK9RDPLineToRK4Rect,__ZN12Front_JS_SDL4drawERK12RDPPolygonSCRK4Rect,__ZN12Front_JS_SDL4drawERK12RDPPolygonCBRK4Rect,__ZN12Front_JS_SDL4drawERK11RDPPolylineRK4Rect,__ZN12Front_JS_SDL4drawERK12RDPEllipseSCRK4Rect,__ZN12Front_JS_SDL4drawERK12RDPEllipseCBRK4Rect,__ZN12Front_JS_SDL4drawERK13RDPBitmapDataRK6Bitmap,__ZN3gdi10GraphicApi7set_rowEjPKh,__ZNK8FrontAPI20intersect_order_capsEiPh,__ZN12Front_JS_SDL23update_pointer_positionEtt,__ZThn8_N12Front_JS_SDL23update_pointer_positionEtt,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_v = [b10,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_iiiiiiiii = [b11,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiii = [b12,__ZN12Front_JS_SDL13server_resizeEiii,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b12];
var FUNCTION_TABLE_viiiiii = [b13,__ZN12Front_JS_SDL15send_to_channelERKN8CHANNELS10ChannelDefEPKhjji,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b13,b13,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_iii = [b14,__ZN8FrontAPI30retrieve_client_capability_setER10Capability,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc];
var FUNCTION_TABLE_iiiiii = [b15,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_viiii = [b16,__ZN12Front_JS_SDL4drawERK9RDPMemBltRK4RectRK6Bitmap,__ZN12Front_JS_SDL4drawERK10RDPMem3BltRK4RectRK6Bitmap,__ZN12Front_JS_SDL4drawERK13RDPGlyphIndexRK4RectRK10GlyphCache,__ZN8FrontAPI23send_data_indication_exEtPKhj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b16,b16,b16,b16];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_bitmap_data_allocator_cpp: __GLOBAL__sub_I_bitmap_data_allocator_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var __GLOBAL__sub_I_bitmap_data_allocator_cpp = Module["__GLOBAL__sub_I_bitmap_data_allocator_cpp"] = asm["__GLOBAL__sub_I_bitmap_data_allocator_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===



if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, Runtime.GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, Runtime.GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        if (request.status !== 200 && request.status !== 0) {
          // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
          // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
          // Look in your browser's devtools network console to see what's going on.
          console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
          doBrowserLoad();
          return;
        }
        applyMemoryInitializer(request.response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






