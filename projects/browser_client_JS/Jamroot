REDEMPTION_PUBLIC_PATH ?= [ SHELL "readlink -n -f ../.." ] ;

ECHO "redemption-src: $(REDEMPTION_PUBLIC_PATH)" ;

JAM_INCLUDE_PATH ?= $(REDEMPTION_PUBLIC_PATH)/jam ;
REDEMPTION_INCLUDE_PATH ?= $(REDEMPTION_PUBLIC_PATH)/include ;
REDEMPTION_MODULES_SRC_PATH ?= $(REDEMPTION_PUBLIC_PATH)/modules ;

SYSTEM_TYPE = emscripten ;

include $(JAM_INCLUDE_PATH)/redemption-config.jam ;
include $(JAM_INCLUDE_PATH)/defines.jam ;
include $(JAM_INCLUDE_PATH)/cxxflags.jam ;
include $(JAM_INCLUDE_PATH)/includes.jam ;
include $(JAM_INCLUDE_PATH)/sanitizer.jam ;

constant NO_FFMPEG : 1 ;
constant BOOST_STACKTRACE : 0 ;
include $(JAM_INCLUDE_PATH)/libs.jam ;

EXE_DEPENDENCIES +=
    <cxxflags>"-s ABORTING_MALLOC=0"
    <cxxflags>"-s EXTRA_EXPORTED_RUNTIME_METHODS=['stringToUTF16']"
;

constant JS_MODULE_NAME : [ setvar JS_MODULE_NAME : "WallixModule" ] ;
constant JS_SOURCE_MAP : [ setvar JS_SOURCE_MAP : "''" ] ;
constant JS_CLIENT_COPY_MODE : [ setvar copy_application_mode : "copy" ] ;

rule filter_flags ( e )
{
    if $(e) = <cxxflags>-msse3
    {
        return ;
    }
    else
    {
        return $(e) ;
    }
}

import sequence ;
REDEMPTION_CXXFLAGS = [ sequence.filter filter_flags : $(REDEMPTION_CXXFLAGS) ] ;

project redjs
    : requirements

    $(REDEMPTION_CXXFLAGS)
    $(BOOST_STACKTRACE_CXXFLAGS)
    # $(REDEMPTION_FFMPEG_FLAGS)

    # <define>REDEMPTION_DISABLE_NO_BOOST_PREPROCESSOR_WARNING=1

    # <cxxflags>-fno-rtti
    # <define>EMSCRIPTEN_HAS_UNBOUND_TYPE_NAMES=0
    <cxxflags>"-isystem system_include"
    <include>src

    # https://github.com/kripken/emscripten/blob/master/src/settings.js
    # DISABLE_EXCEPTION_CATCHING = 0 - generate code to actually catch exceptions
    # DISABLE_EXCEPTION_CATCHING = 1 - disable exception catching at all
    # DISABLE_EXCEPTION_CATCHING = 2 - disable exception catching, but enables catching in whitelist
    <cxxflags>"-s DISABLE_EXCEPTION_CATCHING=0"
    <cxxflags>"-s USE_PTHREADS=0"
    # <linkflags>"-s SIMD=1"
    # <cxxflags>"-s FS_LOG=1"
    # <cxxflags>"-s EXCEPTION_CATCHING_WHITELIST='[Error]'"

    # <cxxflags>"-s USE_LIBPNG=1"
    # <cxxflags>"-s USE_ZLIB=1"

    # <cxx-lto>on

    <cxxflags>"-s WASM=0"
    <variant>debug:<cxxflags>-g
    <variant>debug:<cxxflags>-g4
    <variant>debug:<cxxflags>--emit-symbol-map
    <variant>debug:<cxxflags>"--source-map-base "$(JS_SOURCE_MAP)
    <variant>debug:<cxxflags>"-s DEMANGLE_SUPPORT=1"

    <variant>release:<cxxflags>-O3
    # <variant>release:<cxxflags>-Os
    # <variant>release:<cxxflags>-Oz

    <cxxflags>-Wno-dollar-in-identifier-extension

    : default-build release
;

using emscripten ;


constant CXXFLAGS_TEST :
    <include>$(REDEMPTION_TEST_PATH)/includes
    <define>FIXTURES_PATH='\"$(FIXTURES_PATH)\"'
    <define>REDEMPTION_DECL_LOG_TEST
    <cxxflags>"-s NODERAWFS"
;

objjs register_exception.bc :
    $(REDEMPTION_TEST_PATH)/includes/test_only/test_framework/impl/register_exception.cpp
:
    $(CXXFLAGS_TEST)
    <cxxflags>-O3
;
objjs test_framework.bc :
    $(REDEMPTION_TEST_PATH)/includes/test_only/test_framework/impl/test_framework.cpp
:
    $(CXXFLAGS_TEST)
    <define>BOOST_TEST_DYN_LINK
    <cxxflags>-O3
;
objjs redemption_unit_test.bc :
    $(REDEMPTION_TEST_PATH)/includes/test_only/test_framework/redemption_unit_tests.cpp
:
    $(CXXFLAGS_TEST)
    <define>BOOST_TEST_DYN_LINK
    <cxxflags>-O3
;

alias unit_test.bc :
    test_framework.bc
    redemption_unit_test.bc
;

constant TEST_DEPENDENCIES :
    $(CXXFLAGS_TEST)
    <cxxflags>--bind
    <cxxflags>-fno-rtti&&-frtti
    # TODO only if include ".../bind.h"
    <cxxflags>-Wno-missing-prototypes
;

objjs log_test.bc : $(REDEMPTION_SRC_PATH)/utils/log_as_logtest.cpp ;
alias log_print.bc : $(REDEMPTION_SRC_PATH)/utils/log_as_logprint.cpp ;

objjs app_path_test.bc : $(REDEMPTION_SRC_PATH)/core/app_path.cpp :
    <conditional>@defines-for-test
    <define>SHARE_PATH='\"$(FIXTURES_PATH)\"'
    <define>CFG_PATH='\"$(REDEMPTION_SYS_PATH)/etc/rdpproxy/\"'
;

alias app_path_exe.bc : app_path_test.bc ;

alias bz2.bc ;
alias crypto.bc ;
alias dl.bc ;
alias gssapi_krb5.bc ;
alias krb5.bc ;
alias libpng.bc ;
alias openssl.bc ;
alias snappy.bc ;
alias z.bc ;
alias png.bc : libpng.bc z.bc ;
alias ffmpeg.bc ;
alias ppocr.bc ;
alias boost_stacktrace.bc ;

# objjs program_options.bc : $(PROGRAM_OPTIONS_SRC_PATH)/program_options.cpp ;


actions gen_targets
{
    ./tools/gen_targets.sh > targets.jam
}

explicit targets.jam ;
make targets.jam : : @gen_targets ;



actions exenode
{
  node $(>:S=.js) && : > $(<)
}

rule test-run ( name : objs + : requirements * )
{
    if src/core/error.bc in $(objs)
    {
        objs += register_exception.bc ;
    }

    exejs $(name).em
        : $(objs) unit_test.bc log_test.bc
        : $(TEST_DEPENDENCIES) $(requirements)
        ;
    make $(name) : $(name).em : @exenode ;
}

rule exe-js ( name : src : objs + : deps * )
{
    exejs $(name).em : $(src) $(objs) log_print.bc :
        $(deps)
        <cxxflags>--bind
        # TODO rtti
        <cxxflags>-fno-rtti&&-frtti
        # TODO only if include ".../bind.h"
        <cxxflags>-Wno-missing-prototypes
        <cxxflags>"-s MODULARIZE=1"
        <cxxflags>"-s EXPORT_NAME="$(JS_MODULE_NAME)
    ;
    alias $(name) : $(name).em ;
}

rule test-run-js ( name : src : objs + : deps * )
{
    objjs $(name).bc : $(src) :
        <include>$(REDEMPTION_TEST_PATH)/includes
        <define>RED_TEST_MODULE=$(name)
        <define>BOOST_AUTO_TEST_MAIN
        <define>BOOST_TEST_DYN_LINK
    ;
    test-run $(name) : $(name).bc $(objs) : $(deps) ;
}

actions nothing { }

rule htmljs ( name : objs + : deps * )
{
    exehtml $(name).js : $(objs) : $(deps) ;
    make $(name).html : $(name).js : @nothing ;
    make $(name).wasm : $(name).js : @nothing ;
}


include targets.jam ;
echo $(JS_CLIENT_COPY_MODE)  ;
if $(JS_CLIENT_COPY_MODE) = "copy"
{
    actions copy_client
    {
        cp $(>[1]) $(<) && echo $(>[1])
    }
}
else
{
    actions copy_client
    {
        rm $(<) 2>/dev/null ||:
        ln -s "$PWD/"$(>[1]) $(<) && echo $(>[1])
    }
}

local app_files = ;
rule app_rule ( file )
{
    # depends to js_client for a path with toolset
    make $(file) : src/application/$(file) js_client : @copy_client ;
    app_files += $(file) ;
}

# depends to js_client for a path with toolset
app_rule to_scancode.js ;
app_rule client.html ;

alias rdpclient : $(app_files) ;
explicit $(app_files) rdpclient ;

constant browser : [ setvar browser : xdg-open ] ;
constant username : [ setvar username : '' ] ;
constant password : [ setvar password : '' ] ;
actions open_client
{
    $(browser) $(>[1])"?user="$(username)"&pass="$(password)
}
make open_client : client.html client.html : @open_client ;
explicit open_client ;
