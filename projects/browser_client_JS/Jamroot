REDEMPTION_PUBLIC_PATH ?= [ SHELL "readlink -n -f ../.." ] ;

ECHO "redemption-src: $(REDEMPTION_PUBLIC_PATH)" ;

JAM_INCLUDE_PATH ?= $(REDEMPTION_PUBLIC_PATH)/jam ;
REDEMPTION_INCLUDE_PATH ?= $(REDEMPTION_PUBLIC_PATH)/include ;
REDEMPTION_MODULES_SRC_PATH ?= $(REDEMPTION_PUBLIC_PATH)/modules ;

INSTALLDIR_DEFAULT = ./sandbox ;
SYSTEM_TYPE = emscripten ;

include $(JAM_INCLUDE_PATH)/redemption-config.jam ;
include $(JAM_INCLUDE_PATH)/defines.jam ;
include $(JAM_INCLUDE_PATH)/cxxflags.jam ;
include $(JAM_INCLUDE_PATH)/includes.jam ;
include $(JAM_INCLUDE_PATH)/sanitizer.jam ;

constant NO_FFMPEG : 1 ;
constant BOOST_STACKTRACE : 0 ;
include $(JAM_INCLUDE_PATH)/libs.jam ;

project redjs
    : requirements

    # <conditional>@flags

    $(REDEMPTION_CXXFLAGS)
    $(REDEMPTION_FFMPEG_FLAGS)
    $(REDEMPTION_BOOST_STACKTRACE_FLAGS)

    <define>REDEMPTION_DISABLE_NO_BOOST_PREPROCESSOR_WARNING=1

    <cxxflags>-fno-rtti
    <cxxflags>"-isystem system_include"

    # https://github.com/kripken/emscripten/blob/master/src/settings.js
    # DISABLE_EXCEPTION_CATCHING = 0 - generate code to actually catch exceptions
    # DISABLE_EXCEPTION_CATCHING = 1 - disable exception catching at all
    # DISABLE_EXCEPTION_CATCHING = 2 - disable exception catching, but enables catching in whitelist
    <cxxflags>"-s DISABLE_EXCEPTION_CATCHING=0"
    <cxxflags>"-s FS_LOG"
    # <cxxflags>"-s EXCEPTION_CATCHING_WHITELIST='[Error]'"

    # <cxx-lto>on
    : default-build release
;

using emscripten ;

install pentamino
   : [ glob ./sys/pentamino/* ] pentamino.js pentamino.html pentamino.wasm
   : <location>$(INSTALLDIR)
   ;

objjs penta.bc : src/ftests/penta.cpp
:
    # <cxxflags>"-s WASM=0"
    # <cxxflags>-g3
;

actions nothing { }

rule htmljs ( name : objs + : deps * )
{
    exehtml $(name).js : $(objs) : $(deps) ;
    make $(name).html : $(name).js : @nothing ;
    make $(name).wasm : $(name).js : @nothing ;
}

htmljs pentamino : penta.bc :
   # <cxxflags>-g3
   <cxxflags>"-s EXPORTED_FUNCTIONS=\"['_run_main']\""
   <cxxflags>"--shell-file templates/penta_template.html"
    # <cxxflags>"-s WASM=0"
;

constant CXXFLAGS_TEST :
    <include>$(REDEMPTION_TEST_PATH)/includes
    <define>FIXTURES_PATH='\"$(FIXTURES_PATH)\"'
    <define>REDEMPTION_DECL_LOG_TEST
    <define>BOOST_TEST_DYN_LINK
    <cxxflags>"-s NODERAWFS"
;

objjs register_exception.bc :
    $(REDEMPTION_TEST_PATH)/includes/test_only/test_framework/register_exception.cpp
:
    $(CXXFLAGS_TEST)
;
objjs test_framework.bc :
    $(REDEMPTION_TEST_PATH)/includes/test_only/test_framework/impl/test_framework.cpp
:
    $(CXXFLAGS_TEST)
;
objjs redemption_unit_test.bc :
    $(REDEMPTION_TEST_PATH)/includes/test_only/test_framework/redemption_unit_tests.cpp
:
    $(CXXFLAGS_TEST)
;

alias unit_test.bc :
    test_framework.bc
    redemption_unit_test.bc
;

constant TEST_DEPENDENCIES :
    # <define>BOOST_AUTO_TEST_MAIN
    $(CXXFLAGS_TEST)
;

objjs log_test.bc : $(REDEMPTION_SRC_PATH)/utils/log_as_logemasm.cpp ;

objjs app_path_test.bc : $(REDEMPTION_SRC_PATH)/core/app_path.cpp :
    <conditional>@defines-for-test
    <define>SHARE_PATH='\"$(FIXTURES_PATH)\"'
    <define>CFG_PATH='\"$(REDEMPTION_SYS_PATH)/etc/rdpproxy/\"'
;

actions exenode
{
  node $(>:S=.js) && : > $(<)
}

rule test-run ( name : objects + : requirements * )
{
    if src/core/error.bc in $(objects)
    {
        requirements += register_exception.bc ;
    }

    exejs $(name).node : $(objects) unit_test.bc log_test.bc : $(TEST_DEPENDENCIES) $(requirements) ;
    make $(name) : $(name).node : @exenode ;
}


actions gen_targets
{
    sed -E '/^lib |^exe |\.cpp\.lib\.o :$/,/^;/d;
        /^  <covfile|^  <variant|^  \$\(FFMPEG_CXXFLAGS\)|^  \$\(GCOV_NO_BUILD\)|^  <library>boost_stacktrace|\.coverage ;$/d;
        s/^obj /objjs /;
        s/\.o /.bc /;
        s/\.o$/.bc/;
        s/^  <library>(.*)/  \1.bc/;
        s/\.bc\.bc$/.bc/' \
    ../../targets.jam | sed '/^test-run/,/^;/{
        /^:/d;s/^  </:\n&/;t
    }' > targets.jam
}

explicit targets.jam ;
make targets.jam : : @gen_targets ;


alias bz2.bc ;
alias crypto.bc ;
alias dl.bc ;
alias gssapi_krb5.bc ;
alias krb5.bc ;
alias libpng.bc ;
alias openssl.bc ;
alias snappy.bc ;
alias z.bc ;
alias png.bc : libpng.bc z.bc ;
alias ffmpeg.bc ;
alias ppocr.bc ;
alias program_options.bc ;


include targets.jam ;

# objjs test_rect.bc : $(REDEMPTION_TEST_PATH)/utils/test_rect.cpp ;
# test-run test_rect : test_rect.bc ;
#
# objjs src/utils/hexdump.bc : $(REDEMPTION_SRC_PATH)/utils/hexdump.cpp ;
# test-run tests/utils/test_redirection_info :
#   $(REDEMPTION_TEST_PATH)/utils/test_redirection_info.cpp
#   src/utils/hexdump.bc
# :
# ;
# alias test_redirection_info : tests/utils/test_redirection_info ;



# install client_rdp_JS_natif
#     : [ glob ./sys/js_client/* ] client_rdp_JS_natif.js client_rdp_JS_natif.html
#     : <location>./sandbox
#     ;
#
# #install client_rdp_JS_SDL
# #    : [ glob ./sys/js_client/* ] client_rdp_JS_SDL.js client_rdp_JS_SDL.html client_rdp_JS_SDL.html.mem
# #    : <location>./sandbox
# #    ;
#
# install test_transport_web_socket
#     : [ glob ./sys/js_client/* ] test_transport_web_socket.js test_transport_web_socket.html
#     : <location>./sandbox
#     ;
#
#
#
# #objjs test_rdp_client_test_card_JS_SDL.bc
# #	: src/test_rdp_client_test_card_JS_SDL.cpp
# #	: <include>$(EMSCRIPTEN)/system/include
# #	;
#
#
# objjs test_rdp_client_test_card_JS_natif.bc
# 	: src/test_rdp_client_test_card_JS_natif.cpp
# 	: <include>$(EMSCRIPTEN)/system/include
# 	;
#
# objjs rdp_client.bc
# 	: ../../src/main/rdp_client.cpp
# 	: <include>$(EMSCRIPTEN)/system/include
# 	;
#
#
# # objjs bitmap_data_allocator.bc
# # 	: $($(REDEMPTION_SRC_PATH))/utils/bitmap_data_allocator.cpp
# # 	: <include>$(EMSCRIPTEN)/system/include
# # 	;
#
# objjs test_transport_web_socket.bc
# 	: src/test_transport_web_socket.cpp
# 	: <include>$(EMSCRIPTEN)/system/include
# 	;
#
#
#
# #exejs client_rdp_JS_SDL.js
# #     :
# #        test_rdp_client_test_card_JS_SDL.bc
# #        bitmap_data_allocator.bc
# #     :
# #        <cxxflags>"--shell-file templates/template_mobile_WAB.html"
# #        <cxxflags>"-s EXPORTED_FUNCTIONS=\"['_run_main','_mousePressEventG']\""
# #	<cxxflags>-s\ EXPORTED_FUNCTIONS="['_SDL_CreateRGBSurfaceFrom']"
# #     ;
#
# exejs client_rdp_JS_natif.js
#      :
#         rdp_client.bc
#         # bitmap_data_allocator.bc
#      :
#         <cxxflags>"-Werror"
#         <cxxflags>"-01"
#         <cxxflags>"-s ASSERTIONS=2"
#         <cxxflags>"-s ALLOW_MEMORY_GROWTH=1"
#         <cxxflags>"--shell-file templates/template_client_rdp_js_natif.html"
# #        <cxxflags>"--shell-file templates/template_mobile_WAB.html"
#         <cxxflags>"--llvm-opts 3 --llvm-lto 0"
# 	<cxxflags>"-s EXPORTED_FUNCTIONS=\"['_run_main','_mousePressEvent','_mouseReleaseEvent','_mouseMoveEvent','_charPressed','_enterPressed','_backspacePressed','_refreshPressed','_connexion','_client_event','_up_and_running','_recv_value','_disconnection','_CtrlAltDelPressed']\""
#      ;
#
# exejs test_transport_web_socket.js
#      :
#         test_transport_web_socket.bc
#      :
#         <cxxflags>"--shell-file templates/test_transport_web_socket_template.html"
# 	<cxxflags>"-s EXPORTED_FUNCTIONS=\"['_run_main','_recv_value']\""
#      ;
#
#
# make client_rdp_JS_natif.html : client_rdp_JS_natif.js : @nothing ;
# #make client_rdp_JS_natif.html.mem : client_rdp_JS_natif.js : @nothing ;
#
# #make client_rdp_JS_SDL.html : client_rdp_JS_SDL.js : @nothing ;
# #make client_rdp_JS_SDL.html.mem : client_rdp_JS_natif.js : @nothing ;
#
# make test_transport_web_socket.html : test_transport_web_socket.js : @nothing ;
# #make test_transport_web_socket.html.mem : test_transport_web_socket.js : @nothing ;

