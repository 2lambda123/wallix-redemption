#!/bin/bash

trace_func () {
  if [[ $1 =~ ' at ' ]] ; then
    echo "$1"
  fi
}

prev=''
trace_func_and_previous () {
  if [[ $1 =~ ' at ' ]] ; then
    echo -e "$prev\n$1"
  fi
  prev="$1"
}

usage () {
  echo "$0 [-hcp] [--help] command [-- [gdb-args...]]"
  echo ' -h,--help    Show this help message and exit.'
  echo ' -c           Show only function stack (enable by -p).'
  echo ' -p           Show previous line.'
}

filter=echo

TEMP=`getopt -o cph --long help -n "$0" -- "$@"`
[ $? -ne 0 ] && exit 1
eval set -- "$TEMP"
while true ; do
  case "$1" in
    -h|--help) usage ; exit 0 ;;
    -c) filter=trace_func ; shift ;;
    -p) filter=trace_func_and_previous ; shift ;;
    --) shift ; break ;;
    *) break ;;
  esac
done

[ -z "$1" ] && usage >&2 && exit 1

command="$1"
shift


coproc gdb -q -n "$@" "$command"
echo 'set prompt -- '>&${COPROC[1]}
echo 'b main'>&${COPROC[1]}
echo 'r'>&${COPROC[1]}
echo 's'>&${COPROC[1]}
while read -ru ${COPROC[0]} l ; do
  if [ "$l" = 'Program received signal SIGSEGV, Segmentation fault.' ] ; then
    echo -e "\nBacktrace:\n"
    echo bt >&${COPROC[1]}
    kill $COPROC_PID
  fi
  if [ "$l" = 'The program is not being run.' -o "$l" = 'The program no longer exists.' ] ; then
    kill $COPROC_PID
  fi

  $filter "$l"

  [[ "$l" =~ ^'-- ' ]] && echo >&${COPROC[1]}
done
