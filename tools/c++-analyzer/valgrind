#!/bin/bash

cd "$(dirname "$0")"/../..

TEMP=`getopt -o hd: --long help -n "$0" -- "$@"`
[ $? != 0 ] && exit 1

eval set -- "$TEMP"

d=./bin/gcc/debug/

while true ; do
  case "$1" in
    -d) d="$2" ; shift 2 ;;
    -h|--help) echo "$0 [-d binary-directory] [testnames...]" ; exit 0 ;;
    --) shift ; break ;;
    *) echo "Unknow option $1" ; exit 2 ;;
  esac
done

if [ ! -z "$*" ] ; then
  read -a files <<< "$@"
  ls "${files[@]/#/$d}"
else
  find "$d" -maxdepth 1 -mindepth 1 -name 'test_*' -executable
fi \
| while read f ; do
  echo -n "$f"
  outvalgrind=`valgrind \
    --leak-check=full \
    --max-stackframe=234425648 \
    --track-fds=yes \
    --suppressions=./tools/valgrind-filter/valgrind-ignore-ssl-snappy \
    "$f" 2>&1`
  alloc=`grep -E '^==[0-9]+==   total heap usage:' -m1 <<< "$outvalgrind"`
  read p t h u n1 a n2 other <<< "$alloc"
  grep -E '^==[0-9]+== +at 0x[A-F0-9]+: ' -q <<< "$outvalgrind"
  if [ $? = 0 ] ; then
    echo -e "  \e[38;5;221;1mfail\e[0m"
    echo "$outvalgrind" | ./tools/valgrind-filter/valgrind-output-color
    echo "$f (valgrind error)" >&2
  elif [[ $n1 != $n2 ]] ; then
    echo -e "  \e[38;5;221;1m$n1 allocs, $n2 frees\e[0m"
    echo "$f (leak: $n1 allocs, $n2 frees)" >&2
  else
    echo '  ok'
  fi
done 2>/tmp/valgrind_files_error

echo
exec cat /tmp/valgrind_files_error
