/*
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Product name: redemption, a FLOSS RDP proxy
   Copyright (C) Wallix 2013
   Author(s): Christophe Grosjean
*/

#define RED_TEST_MODULE TestVNCHextileEncoder
#include "system/redemption_unit_tests.hpp"
#include "test_only/fake_graphic.hpp"
#include "test_only/check_sig.hpp"

#include "utils/log.hpp"
#include "core/client_info.hpp"
#include "core/font.hpp"
#include "mod/vnc/vnc.hpp"
#include "test_only/transport/test_transport.hpp"
#include "mod/vnc/encoder/hextile.hpp"


class BlockWrap : public PartialReaderAPI
{
    const_byte_array & t;
    size_t pos;
public:
    BlockWrap(const_byte_array & t) : t(t), pos(0) {}
    
    size_t partial_read(byte_ptr buffer, size_t len) override
    {
        const size_t available = this->t.size() - this->pos;
        if (len >= available){
            std::memcpy(&buffer[0], &this->t[this->pos], available);
            this->pos += available;
            return available;
        }
        std::memcpy(&buffer[0], &this->t[this->pos], len);
        this->pos += len;
        return len;
    }
    bool empty() const {
        return this->t.size() == this->pos;
    }
};


RED_AUTO_TEST_CASE(TestHextile1)
{

    VNC::Encoder::Hextile encoder(16, 2, 0, 0, 44, 19, VNCVerbose::basic_trace);
    RED_CHECK_EQUAL(Rect( 0,  0, 16, 16), encoder.current_tile());
    RED_CHECK_EQUAL(true, encoder.next_tile());
    RED_CHECK_EQUAL(Rect(16,  0, 16, 16), encoder.current_tile());
    RED_CHECK_EQUAL(true, encoder.next_tile());
    RED_CHECK_EQUAL(Rect(32,  0, 12, 16), encoder.current_tile());
    RED_CHECK_EQUAL(true, encoder.next_tile());
    RED_CHECK_EQUAL(Rect( 0, 16, 16, 3), encoder.current_tile());
    RED_CHECK_EQUAL(true, encoder.next_tile());
    RED_CHECK_EQUAL(Rect(16, 16, 16, 3), encoder.current_tile());
    RED_CHECK_EQUAL(true, encoder.next_tile());
    RED_CHECK_EQUAL(Rect(32, 16, 12, 3), encoder.current_tile());
    RED_CHECK_EQUAL(false, encoder.next_tile());
}

RED_AUTO_TEST_CASE(TestHextile2)
{
    VNC::Encoder::Hextile encoder(16, 2, 0, 0, 48, 19, VNCVerbose::basic_trace);
    RED_CHECK_EQUAL(Rect( 0,  0, 16, 16), encoder.current_tile());
    RED_CHECK_EQUAL(true, encoder.next_tile());
    RED_CHECK_EQUAL(Rect(16,  0, 16, 16), encoder.current_tile());
    RED_CHECK_EQUAL(true, encoder.next_tile());
    RED_CHECK_EQUAL(Rect(32,  0, 16, 16), encoder.current_tile());
    RED_CHECK_EQUAL(true, encoder.next_tile());
    RED_CHECK_EQUAL(Rect( 0, 16, 16, 3), encoder.current_tile());
    RED_CHECK_EQUAL(true, encoder.next_tile());
    RED_CHECK_EQUAL(Rect(16, 16, 16, 3), encoder.current_tile());
    RED_CHECK_EQUAL(true, encoder.next_tile());
    RED_CHECK_EQUAL(Rect(32, 16, 16, 3), encoder.current_tile());
    RED_CHECK_EQUAL(false, encoder.next_tile());
    
    
//    encoder->consume(buf, drawable);

}

RED_AUTO_TEST_CASE(TestHextile)
{
    ClientInfo info;
    info.keylayout = 0x040C;
    info.console_session = 0;
    info.brush_cache_code = 0;
    info.bpp = 16;
    info.width = 1308;
    info.height = 19;

    FakeGraphic drawable(info, 20);

    const uint8_t tile[] = {
/* 000 */ "\x01\x04\x19\xc3\x10\xe4\x18\xc3\x10\x25\x21\xe4\x18\x46\x29\x86"
/* 010 */ "\x29\x66\x29\xe8\x39\xc8\x39\x66\x29\x86\x29\xc7\x31\xc7\x31\xa7"
/* 020 */ "\x31\x86\x29\x25\x21\x45\x21\x25\x21\x05\x21\xc3\x10\x25\x21\x66"
/* 030 */ "\x29\xc7\x31\xa7\x31\x66\x29\x66\x29\xa7\x31\x86\x29\x86\x29\xc7"
/* 040 */ "\x31\x25\x21\xc4\x18\x25\x21\x86\x29\xe4\x18\xe4\x18\x45\x21\x86"
/* 050 */ "\x29\x86\x29\x45\x21\x05\x21\x66\x29\xe8\x39\xe8\x39\xc7\x31\x08"
/* 060 */ "\x3a\x46\x29\x46\x29\xa7\x31\x09\x42\x04\x19\x46\x29\x86\x29\x45"
/* 070 */ "\x21\x04\x19\x45\x21\x45\x21\x86\x29\x09\x42\x29\x42\xc7\x31\x66"
/* 080 */ "\x29\xa7\x31\xc7\x31\xe8\x39\xc7\x31\xa3\x10\x45\x21\x66\x29\xc4"
/* 090 */ "\x18\xa3\x10\x04\x19\x45\x21\xa7\x31\x29\x42\x08\x3a\x86\x29\x45"
/* 0a0 */ "\x21\x87\x31\x86\x29\x66\x29\x04\x19\x62\x08\x25\x21\x66\x29\xe4"
/* 0b0 */ "\x18\xa3\x10\xa3\x10\x05\x21\xe8\x39\x29\x42\x66\x29\x25\x21\xc7"
/* 0c0 */ "\x31\x08\x3a\xa7\x31\x45\x21\xc4\x18\xe4\x18\x25\x21\x86\x29\x25"
/* 0d0 */ "\x21\x04\x19\x05\x21\x86\x29\x08\x3a\xc8\x39\xe4\x18\xe4\x18\xe8"
/* 0e0 */ "\x39\xe8\x39\x25\x21\xe4\x18\xa3\x10\x25\x21\xe4\x18\x05\x21\x04"
/* 0f0 */ "\x19\xc3\x10\x66\x29\xc8\x39\xe8\x39\x66\x29\xe4\x18\x25\x21\x08"
/* 100 */ "\x3a\x86\x29\x66\x29\x86\x29\xc3\x10\xc3\x10\xe4\x18\x25\x21\xa3"
/* 110 */ "\x10\xc3\x10\x04\x19\x86\x29\x04\x19\x45\x21\xe8\x39\xa7\x31\xe8"
/* 120 */ "\x39\xc7\x31\x46\x29\x25\x21\xe4\x18\xe4\x18\xe4\x18\x25\x21\xe4"
/* 130 */ "\x18\x66\x29\xa7\x31\xc8\x39\x45\x21\x66\x29\x08\x3a\xe8\x39\x66"
/* 140 */ "\x29\xc7\x31\x45\x21\x25\x21\xa7\x31\xa7\x31\xc8\x39\xe8\x39\xe8"
/* 150 */ "\x39\x08\x3a\x66\x29\x45\x21\xe8\x39\xe8\x39\xe8\x39\x49\x42\x08"
/* 160 */ "\x3a\x45\x21\x05\x21\x25\x21\x09\x42\x08\x3a\x6a\x4a\x09\x42\x08"
/* 170 */ "\x3a\xc7\x31\xe4\x18\xc3\x10\xc8\x39\xe8\x39\xc7\x31\x8a\x4a\x49"
/* 180 */ "\x42\xa7\x31\xa7\x31\xa7\x31\x29\x42\xe8\x39\x49\x42\xe8\x39\x86"
/* 190 */ "\x29\x25\x21\x25\x21\x05\x21\x66\x29\x66\x29\xe8\x39\x6a\x4a\x45"
/* 1a0 */ "\x21\x09\x42\x29\x42\x29\x42\x08\x3a\xa7\x31\x08\x3a\xe8\x39\x66"
/* 1b0 */ "\x29\x04\x19\x25\x21\x45\x21\x66\x29\x66\x29\xa7\x31\xc7\x31\xc3"
/* 1c0 */ "\x10\x66\x29\x66\x29\xa7\x31\x66\x29\x45\x21\x46\x29\xa7\x31\x66"
/* 1d0 */ "\x29\x66\x29\x04\x19\x25\x21\x45\x21\x66\x29\x66\x29\x25\x21\x25"
/* 1e0 */ "\x21\xe4\x18\xc3\x10\x46\x29\x45\x21\x66\x29\x04\x19\x86\x29\x86"
/* 1f0 */ "\x29\x86\x29\x46\x29\x45\x21\x82\x08\xc3\x10\x66\x29\x25\x21\x25"
/* 200 */ "\x21\x01\x66\x29\x45\x21\xc8\x39\xc7\x31\xe8\x39\x86\x29\xc7\x31"
/* 210 */ "\x86\x29\x66\x29\xa7\x31\xc7\x31\x66\x29\x66\x29\x86\x29\xc7\x31"
/* 220 */ "\x86\x29\x66\x29\x66\x29\x86\x29\x25\x21\x66\x29\xc7\x31\x6a\x4a"
/* 230 */ "\x49\x42\x08\x3a\xe8\x39\xc7\x31\x86\x29\xe4\x18\x25\x21\x45\x21"
/* 240 */ "\x25\x21\xc7\x31\x08\x3a\x49\x42\x49\x42\x08\x3a\xc8\x39\xa7\x31"
/* 250 */ "\xe8\x39\x66\x29\xa7\x31\xa7\x31\xe8\x39\x29\x42\x29\x42\xa7\x31"
/* 260 */ "\x29\x42\x29\x42\xe8\x39\xc7\x31\x49\x42\xc7\x31\x08\x3a\x08\x3a"
/* 270 */ "\x29\x42\x29\x42\xe8\x39\x86\x29\x29\x42\x8b\x52\x29\x42\xa7\x31"
/* 280 */ "\x86\x29\x45\x21\xa7\x31\x09\x42\x49\x42\xe8\x39\x66\x29\xa7\x31"
/* 290 */ "\x29\x42\x29\x42\xa7\x31\x66\x29\x45\x21\x66\x29\xa7\x31\x49\x42"
/* 2a0 */ "\x49\x42\xa7\x31\x66\x29\xe8\x39\x08\x3a\x66\x29\x04\x19\xa7\x31"
/* 2b0 */ "\x29\x42\x8b\x52\x08\x3a\x08\x3a\xc7\x31\x66\x29\xa7\x31\xe8\x39"
/* 2c0 */ "\x66\x29\x87\x29\x09\x42\x6a\x4a\x49\x42\xe8\x39\xe8\x39\x09\x3a"
/* 2d0 */ "\x09\x3a\x09\x3a\x09\x42\x29\x42\xa7\x31\x49\x42\x29\x42\xe8\x39"
/* 2e0 */ "\x46\x21\x05\x21\x46\x29\x87\x31\xa7\x31\xc8\x39\xc7\x31\x25\x21"
/* 2f0 */ "\x25\x21\x29\x42\xa7\x31\x05\x21\xc4\x10\xe4\x18\x45\x21\x66\x29"
/* 300 */ "\x66\x29\x05\x19\x46\x29\xe4\x18\x25\x21\x46\x21\xe4\x18\xc4\x10"
/* 310 */ "\xe4\x18\x05\x21\x25\x21\x66\x29\x87\x29\x66\x29\x09\x3a\x09\x3a"
/* 320 */ "\x09\x3a\xe4\x18\x04\x19\xe4\x18\xc4\x10\xe4\x18\x25\x21\x66\x29"
/* 330 */ "\x66\x29\x87\x29\x09\x3a\x4a\x42\xc8\x31\x66\x29\x66\x29\x05\x19"
/* 340 */ "\xc3\x10\x45\x21\x09\x3a\x09\x3a\x66\x29\x66\x29\xa7\x31\xe8\x39"
/* 350 */ "\x66\x29\xc7\x31\x86\x29\x25\x21\x25\x21\xe8\x39\x8b\x52\x4a\x42"
/* 360 */ "\x87\x31\x09\x3a\x4a\x42\x4a\x4a\x09\x42\xa7\x31\x46\x29\x45\x21"
/* 370 */ "\xa7\x31\xe8\x39\xe8\x39\xe8\x39\xe8\x39\x29\x42\x8b\x52\x4a\x42"
/* 380 */ "\x29\x42\x01\x2c\x6b\x14\x9d\xaa\x5a\x69\x52\x49\x4a\xcb\x5a\x08"
/* 390 */ "\x42\x69\x4a\xc7\x31\xa7\x31\xe8\x39\x28\x42\x28\x42\x49\x4a\x69"
/* 3a0 */ "\x4a\x49\x4a\x6d\x73\xeb\x62\xaa\x5a\x28\x42\x49\x4a\x2d\x63\x29"
/* 3b0 */ "\x42\x49\x4a\xe8\x39\xe7\x39\x08\x42\x29\x42\x49\x4a\x8a\x52\xab"
/* 3c0 */ "\x52\x8a\x52\xcf\x83\xf3\x94\x69\x52\xc7\x39\xe8\x41\xeb\x5a\xe7"
/* 3d0 */ "\x39\x08\x3a\x29\x42\x08\x3a\x49\x42\x6a\x4a\x8a\x4a\xcb\x5a\xec"
/* 3e0 */ "\x5a\xcb\x5a\x01\xaa\x52\x4d\x6b\x0c\x5b\xf3\x9c\xf7\xbd\xbb\xd6"
/* 03f0 */"\xba\xd6\x75\xad\xcf\x7b\x4d\x6b\x4d\x6b\x4d\x6b\x4d\x63\x4d\x63"
    };
    const_byte_array datas[1] = {
         make_array_view(tile),
    };
    BlockWrap bw(datas[0]);

    Buf64k buf;
    buf.read_from(bw);

    VNC::Encoder::Hextile encoder(16, 2, 0, 0, 44, 19, VNCVerbose::basic_trace);
    
    
//    encoder->consume(buf, drawable);

}

