/*
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Product name: redemption, a FLOSS RDP proxy
   Copyright (C) Wallix 2010
   Author(s): Christophe Grosjean, Javier Caverni
   Based on xrdp Copyright (C) Jay Sorg 2004-2010

   Unit test for bitmap class (mostly tests of compression/decompression)

*/


#define BOOST_AUTO_TEST_MAIN
#define BOOST_TEST_MODULE TestBitmap
#include <boost/test/auto_unit_test.hpp>
#include <iostream>
#include <sstream>
#include <string>

#include "bitmap.hpp"
#include "colors.hpp"
#include "config.hpp"
#include <sys/time.h>

BOOST_AUTO_TEST_CASE(TestBitmapCompressHardenned)
{
    const unsigned white = 0xFF;
    BGRPalette palette332;
    init_palette332(palette332);

    // test COLOR COUNT EMPTY
    {
        BOOST_CHECK(1);
        int bpp = 8;
        uint8_t data[0] = {};
        Bitmap bmp(bpp, &palette332, 0, 4, data, 0);
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);
        BOOST_CHECK_EQUAL(0, bmp.get_color_count(bpp, pmax, bmp.data_co(bpp), 0xFF));
    }

    // test COLOR COUNT
    {
        BOOST_CHECK_EQUAL(1,1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x05, 0x05, 0x05, 0x05,
            0x05, 0x05, 0x05, 0x05,
            0x05, 0x05, 0x05, 0x05,
            0x05, 0x05, 0x05, 0x05};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);
        BOOST_CHECK_EQUAL(16, bmp.get_color_count(bpp, pmax, bmp.data_co(bpp), 0x05));
        BOOST_CHECK_EQUAL(0, bmp.get_color_count(bpp, pmax, bmp.data_co(bpp), 0xFE));
    }

    // test COLOR COUNT 2
    {
        BOOST_CHECK_EQUAL(1,1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x02, 0x04,
            0x05, 0x06, 0x07, 0x08,
            0x09, 0x0A, 0x0B, 0x0C,
            0x0D, 0x0E, 0x0F, 0x10};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        uint8_t * pmax = bmp.data_co(bpp) + bmp.bmp_size(bpp);
        BOOST_CHECK_EQUAL(1, bmp.get_color_count(bpp, pmax, bmp.data_co(bpp), 0x01));
        BOOST_CHECK_EQUAL(2, bmp.get_color_count(bpp, pmax, bmp.data_co(bpp) + 1, 0x02));
    }

    // test BICOLOR COUNT EMPTY
    {
        int bpp = 8;
        uint8_t data[0] = {};
        Bitmap bmp(bpp, &palette332, 0, 4, data, 0);
        uint8_t * pmax = bmp.data_co(bpp) + bmp.bmp_size(bpp);
        BOOST_CHECK_EQUAL(0, bmp.get_bicolor_count(bpp, pmax, bmp.data_co(bpp), 0xEF, 0xFE));
    }

    // test BICOLOR COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(8, &palette332, 4, 4, data, sizeof(data));
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);
        BOOST_CHECK_EQUAL(16, bmp.get_bicolor_count(bpp, pmax, pmin, 0x01, 0x05));
        BOOST_CHECK_EQUAL(14, bmp.get_bicolor_count(bpp, pmax, pmin+1, 0x05, 0x01));
        BOOST_CHECK_EQUAL(0 , bmp.get_bicolor_count(bpp, pmax, pmin, 0x05, 0x01));
    }

    // test BICOLOR COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);
        BOOST_CHECK_EQUAL(10, bmp.get_bicolor_count(bpp, pmax, pmin, 0x01, 0x05));
        BOOST_CHECK_EQUAL(10, bmp.get_bicolor_count(bpp, pmax, pmin + 1, 0x05, 0x01));
    }

    // test FILL COUNT
    {
        int bpp = 8;
        uint8_t data[0] = {};
        Bitmap bmp(bpp, &palette332, 0, 4, data, 0);
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);
        BOOST_CHECK_EQUAL(0, bmp.get_fill_count(bpp, pmin, pmax, bmp.data_co(bpp)));
    }

    // test FILL COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x00, 0x00, 0x00, 0x00,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);

        // Line above first line is black
        BOOST_CHECK_EQUAL(4, bmp.get_fill_count(bpp, pmin, pmax, bmp.data_co(bpp)));
        BOOST_CHECK_EQUAL(3, bmp.get_fill_count(bpp, pmin, pmax, bmp.data_co(bpp)+1));

        // 3rd line, compared to 2nd line
        BOOST_CHECK_EQUAL(3, bmp.get_fill_count(bpp, pmin, pmax, bmp.data_co(bpp)+8));
    }

    // test FILL COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x01};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);

        // Line above first line is black
        BOOST_CHECK_EQUAL(0, bmp.get_fill_count(bpp, pmin, pmax, bmp.data_co(bpp)));
        BOOST_CHECK_EQUAL(1, bmp.get_fill_count(bpp, pmin, pmax, bmp.data_co(bpp)+1));
        BOOST_CHECK_EQUAL(0, bmp.get_fill_count(bpp, pmin, pmax, bmp.data_co(bpp)+2));
        BOOST_CHECK_EQUAL(2, bmp.get_fill_count(bpp, pmin, pmax, bmp.data_co(bpp)+3));

        // until the end
        BOOST_CHECK_EQUAL(8, bmp.get_fill_count(bpp, pmin, pmax, bmp.data_co(bpp)+8));

    }

    // test MIX COUNT
    {
        int bpp = 8;
        uint8_t data[0] = {};
        Bitmap bmp(bpp, &palette332, 0, 4, data, 0);
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);

        BOOST_CHECK_EQUAL(0, bmp.get_mix_count(bpp, pmin, pmax, bmp.data_co(bpp), white));
    }

    // test MIX COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0xFF, 0xFF, 0xFF, 0xFF,
            0x01, 0x05, 0x01, 0x05,
            0xFE, 0xFA, 0xFE, 0x01,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);

        // Line above first line is black
        BOOST_CHECK_EQUAL(4, bmp.get_mix_count(bpp, pmin, pmax, bmp.data_co(bpp), white));
        BOOST_CHECK_EQUAL(3, bmp.get_mix_count(bpp, pmin, pmax, bmp.data_co(bpp)+1, white));

        // 3rd line, compared to 2nd line
        BOOST_CHECK_EQUAL(3, bmp.get_mix_count(bpp, pmin, pmax, bmp.data_co(bpp)+8, white));
    }

    // test MIX COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0xFF, 0x01, 0xFF,
            0xFE, 0x05, 0x01, 0x01,
            0x01, 0xFA, 0xFE, 0xFE,
            0xFE, 0x05, 0x01, 0x01};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);

        // Line above first line is black
        BOOST_CHECK_EQUAL(0, bmp.get_mix_count(bpp, pmin, pmax, bmp.data_co(bpp), white));
        BOOST_CHECK_EQUAL(1, bmp.get_mix_count(bpp, pmin, pmax, bmp.data_co(bpp)+1, white));
        BOOST_CHECK_EQUAL(0, bmp.get_mix_count(bpp, pmin, pmax, bmp.data_co(bpp)+2, white));
        BOOST_CHECK_EQUAL(2, bmp.get_mix_count(bpp, pmin, pmax, bmp.data_co(bpp)+3, white));

        // until the end
        BOOST_CHECK_EQUAL(8, bmp.get_mix_count(bpp, pmin, pmax, bmp.data_co(bpp)+8, white));
    }

    // test FILL OR MIX COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0x03, 0xFB, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x02, 0x03, 0x04, 0xFA};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);

        // Line above first line is black
        uint8_t masks[512];
        BOOST_CHECK_EQUAL(0, bmp.get_fom_count(bpp, pmin, pmax, bmp.data_co(bpp)+15, white));
        BOOST_CHECK_EQUAL(2, bmp.get_fom_count(bpp, pmin, pmax, bmp.data_co(bpp)+14, white));
        bmp.get_fom_masks(bpp, pmin, pmin+14, masks, 2);
        BOOST_CHECK_EQUAL(0x01, masks[0]);


        BOOST_CHECK_EQUAL(4, bmp.get_fom_count(bpp, pmin, pmax, bmp.data_co(bpp)+12, white));
        bmp.get_fom_masks(bpp, pmin, pmin+12, masks, 4);
        BOOST_CHECK_EQUAL(0x07, masks[0]);

        BOOST_CHECK_EQUAL(5, bmp.get_fom_count(bpp, pmin, pmax, bmp.data_co(bpp)+11, white));
        BOOST_CHECK_EQUAL(6, bmp.get_fom_count(bpp, pmin, pmax, bmp.data_co(bpp)+10, white));

        BOOST_CHECK_EQUAL(12, bmp.get_fom_count(bpp, pmin, pmax, bmp.data_co(bpp)+4, white));
        bmp.get_fom_masks(bpp, pmin, pmin+4, masks, 12);
        BOOST_CHECK_EQUAL(0xA5, masks[0]);
        BOOST_CHECK_EQUAL(0x07, masks[1]);
    }

    {
        BOOST_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x05, 0x06, 0x07, 0x08,
            0x09, 0x0A, 0x0B, 0x0C,
            0x0D, 0x0E, 0x0F, 0x10};
        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);

        unsigned flags = 0;
        uint8_t * p = bmp.data_co(bpp)+3;
        unsigned foreground = bmp.get_pixel_above(bpp, pmin, p) ^ bmp.get_pixel(bpp, p);
        BOOST_CHECK_EQUAL(0x04, foreground);
        BOOST_CHECK_EQUAL(3, bmp.get_mix_count(bpp, pmin, pmax, p+nbbytes(bpp), foreground));
        foreground = white;
        BOOST_CHECK_EQUAL(4, bmp.get_fom_count_set(bpp, pmin, pmax, p, foreground, flags));
        BOOST_CHECK_EQUAL(0x04, foreground);
    }


    {
        BOOST_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t multicolor[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x01, 0x01, 0x01, 0x01,
            0x05, 0x06, 0x07, 0x08,
            0x01, 0x01, 0x01, 0x01};

        Bitmap bmp(bpp, &palette332, 4, 4, multicolor, sizeof(multicolor));
        uint8_t * pmin = bmp.data_co(bpp);
        uint8_t * pmax = pmin + bmp.bmp_size(bpp);
        uint8_t * p = bmp.data_co(bpp)+3;

        unsigned foreground = bmp.get_pixel_above(bpp, pmin, p) ^ bmp.get_pixel(bpp, p);
        BOOST_CHECK_EQUAL(4, foreground);
        BOOST_CHECK_EQUAL(0, bmp.get_mix_count(bpp, pmin, pmax, p+nbbytes(bpp), foreground));
        foreground = white;
        unsigned flags = 0;
        BOOST_CHECK_EQUAL(2, bmp.get_fom_count_set(bpp, pmin, pmax, p, foreground, flags));
        BOOST_CHECK_EQUAL(4, foreground);
        BOOST_CHECK_EQUAL(3, flags); // MIX then FILL

    }


}

BOOST_AUTO_TEST_CASE(TestBitmapCompress)
{
    BGRPalette palette332;
    /* rgb332 palette */
    for (int bindex = 0; bindex < 4; bindex++) {
        for (int gindex = 0; gindex < 8; gindex++) {
            for (int rindex = 0; rindex < 8; rindex++) {
                palette332[(rindex << 5) | (gindex << 2) | bindex] =
                (BGRColor)(
                // r1 r2 r2 r1 r2 r3 r1 r2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
                    (((rindex<<5)|(rindex<<2)|(rindex>>1))<<16)
                // 0 0 0 0 0 0 0 0 g1 g2 g3 g1 g2 g3 g1 g2 0 0 0 0 0 0 0 0
                   | (((gindex<<5)|(gindex<<2)|(gindex>>1))<< 8)
                // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 b1 b2 b1 b2 b1 b2 b1 b2
                   | ((bindex<<6)|(bindex<<4)|(bindex<<2)|(bindex)));
            }
        }
    }

    // test COPY
    {
        BOOST_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x06, 0x07, 0x08, 0x09,
            0x0A, 0x0C, 0x0D, 0x0E,
            0x0F, 0x10, 0x12, 0x13};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));

        Stream out(256);
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x01, 0x02, 0x03, 0x04,
            0x8c, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x12, 0x13
        };


        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), data, sizeof(data)));

//        printf("------- Decompress ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");
    }

    // test COPY 16 bits
    {
        int bpp = 16;
        uint8_t data[4*4*2] = {
            0x01, 0, 0x02, 0, 0x03, 0, 0x04, 0,
            0x05, 0, 0x06, 0, 0x07, 0, 0x08, 0,
            0x09, 0, 0x0A, 0, 0x0B, 0, 0x0C, 0,
            0x0D, 0, 0x0E, 0, 0x0F, 0, 0x10, 0};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, NULL, 4, 4, data, sizeof(data));
        Stream out(256);
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00,
            0xc3, 0x04, 0x00, // 4 COPY
            0xc4, 0x0c, 0x00, // 4 MIX SET
            0xc4, 0x04, 0x00, // 4 MIX SET
            0x81, 0x10, 0x00, // 1 COPY
        };


        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        // empty set to 0,0,0,0,0,0,...
        uint8_t empty[2*4*4] = {};
        Bitmap bmp2(16, NULL, 4, 4, empty, 2*4*4);
        bmp2.decompress(bpp, out.data, out.p - out.data);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test COLOR
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        Stream out(256);
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x01, 0x02, 0x03, 0x04, // 4 COPY
            0x6c, 0x01, // 12 COLOR (01)
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), data, sizeof(data)));

    }

    // test COLOR then COPY
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x0F};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        Stream out(256);
        bmp.compress(bpp, out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0xC4, 0x01, // 4 MIX SET (01)
            0x0b, // 11 FILL
            0x81, 0x0f, // 1 COPY
        };

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), data, sizeof(data)));
    }

    // test interleaved COLOR and COPY
    {
        BOOST_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x01, 0x01, 0x01, 0x01,
            0x05, 0x06, 0x07, 0x08,
            0x01, 0x01, 0x01, 0x01};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        Stream out(256);
        bmp.compress(bpp, out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0x84, 0x01, 0x02, 0x03, 0x04, // COPY
            0x64, 0x01,                   // COLOR
            0x84, 0x05, 0x06, 0x07, 0x08, // COPY
            0x64, 0x01                    // COLOR
        };

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), data, sizeof(data)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test BICOLOR
    {
        int bpp = 8;
        uint8_t data[24] = {
            0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02,
            0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02,
            0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02,

        };

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, &palette332, 24, 1, data, sizeof(data));
        Stream out(256);
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0xeC, 0x01, 0x02 // BICOLOR
        };
        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, &palette332, 24, 1, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test FILL
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0x02, 0x03, 0x04, 0x05,
            0x02, 0x03, 0x04, 0x05,
            0x02, 0x03, 0x04, 0x05};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        Stream out(256);
        bmp.compress(bpp, out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05, // 4 COPY
            0x0c, // 12 FILL
        };
        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), data, sizeof(data)));
    }

    // test MIX
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        Stream out(256);
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05, // 4 COPY
            0x2c, // 12 MIX
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), data, sizeof(data)));
    }


    // test FOM
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0x03, 0xFB, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x03, 0x03, 0x03, 0x03};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        Stream out(256);
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05,
            0x41, 0xa5, // 8 FOM 0b10100101
            0x64, 0x03, // 4 COLOR
        };

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test FOM 2
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0x03, 0xFB, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x02, 0xFC, 0x04, 0xFA};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        Stream out(256);
        bmp.compress(bpp, out);
        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05, // 4 COPY
            0x40, 0x0b, 0xa5, 0x05, // 11 FILL or MIX
        };
        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x40, 0x08, 0x33,                               // 9 FOM 9
            0x0f, 0x66, 0xbb,                               // 15 FILL
            0xd6, 0x62, 0x00, 0x00, 0x40, 0x09, 0x99, 0x00, // 48 FOM SET
            0x66, 0xbb,                                     // 6 COLOR
            0xd6, 0xd0, 0x04, 0xbb, 0xd6, 0x0c, 0x81, 0x00, // 48 FOM SET
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(1);
        Bitmap bmp2(bpp, &palette332, 256, 3, compressed, sizeof(compressed), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");
    }


    {
        int bpp = 16;
        uint8_t raw[] = {
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
        };


        uint8_t compressed[] = {
            // BICOLOR 274 pairs = 548 pixels
            0xf8, 0x12, 0x01, 0x10, 0xe5, 0xef, 0x1a,
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(1);
        Bitmap bmp2(bpp, &palette332, 548, 1, compressed, sizeof(compressed), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(raw));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), raw, sizeof(raw)));

    }


    {
        uint8_t raw[] = {
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
        };


        uint8_t compressed[] = {
            // BICOLOR 274 pairs = 548 pixels
            0xf8, 0x12, 0x01, 0x10, 0xe5, 0xef, 0x1a,
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(1);
        Bitmap bmp2(16, &palette332, 548, 1, compressed, sizeof(compressed), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data_co[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(bmp2.bmp_size(16), sizeof(raw));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(16), raw, sizeof(raw)));

    }


    // functional test , 24 bits, various orders with SET variants
    {
        int bpp = 24;
        uint8_t raw[2*16*3] = {
        0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,
        0x07, 0x07, 0x8e,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0xc8, 0x2a, 0x0a,  0xea, 0x31, 0x0c,  0xea, 0x31, 0x0c,

        0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x09, 0x09, 0xbe,
        0x00, 0x00, 0x0b,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0x9f, 0x21, 0x08,  0xea, 0x31, 0x0c,  0xea, 0x31, 0x0c
        };


//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(raw); i++){
//            printf("%.2x ", raw[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");


        Bitmap bmp(bpp, &palette332, 16, 2, raw, sizeof(raw));
        Stream out(256);
        bmp.compress(bpp, out);

        uint8_t expected[] = {
            0xc4, 0x0c, 0x0c, 0xea,                   // 4 MIX SET 0xea0c0c
            0xd0, 0x08, 0x07, 0x07, 0x8e, 0x01, 0x00, // 9 FOM SET 0x8e0707 0b00000001 0b00000000
            0x81, 0xc8, 0x2a, 0x0a,                   // 1 COPY 0x0a2ac8

//            0xd0, 0x04, 0xea, 0x31, 0x0c, 0x03,       // 5 FOM SET 0x0C31EA 0b00000011
            0xC2, 0xEA, 0x31, 0x0C,                   // 2 MIX SET 0x0C31EA
            0x03,                                     // 3 FILL

            0x81, 0x09, 0x09, 0xbe,                   // 1 COPY 0xbe0909
            0xd0, 0x08, 0x07, 0x07, 0x85, 0x01, 0x00, // 9 FOM SET 0xB0000^0x8e0707 0b00000001 0b00000000
            0xd0, 0x02, 0x57, 0x0b, 0x02, 0x01        // 3 FOM SET 0x08219F 0b00000001
        };

// c2 ea 31 0c 03

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, &palette332, 16, 2, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size(bpp), sizeof(raw));
        BOOST_CHECK(0 == memcmp(bmp2.data_co(bpp), raw, sizeof(raw)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");
    }


    {
        int bpp = 16;
        uint8_t compressed[] = {
            // FOM SET 16px Mix 0x0842 MASK 0x00, 00
            0xd0, 0x0F, 0x08, 0x42, 0x0F, 0x0F,
            // COPY 4px
            0x81, 0x01, 0x02
        };

        Bitmap bmp(bpp, &palette332, 64, 10, compressed, 9, true);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x02
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("%.2x ", bmp.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data_co(bpp), expected, sizeof(expected)));
    }


    {
        int bpp = 16;
        uint8_t compressed[] = {
            // 1_COPY 31_FILL 1_MIX 31_FILL
            // the mix is magically inserted because we have 2 back to back FILL
            // on the first scanline (don't ask why. See RDPBCGR 2.2.9.1.1.3.1.2.4
            // Background Run Orders).
            0x82, 0x01, 0x02, 0x03, 0x04, 0x1F, 0x1F,
            0x00, 0x20, // FILL 64
        };

        Bitmap bmp(bpp, &palette332, 64, 2, compressed, sizeof(compressed), true);

        uint8_t expected[64*2*2] = {
            0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

            0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("0x%.2x, ", bmp.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(bmp.bmp_size(bpp), sizeof(expected));
        BOOST_CHECK(0 == memcmp(bmp.data_co(bpp), expected, sizeof(expected)));
    }

    // Test for magic mix pixel on first line
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x02, 0x02
        };

        Bitmap bmp(bpp, &palette332, 4, 1, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0xff, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("0x%.2x, ", bmp.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data_co(bpp), expected, sizeof(expected)));
    }


    // No magic pixel between first line and followings
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x04, 0x04
        };

        Bitmap bmp(bpp, &palette332, 4, 2, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("0x%.2x, ", bmp.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data_co(bpp), expected, sizeof(expected)));
    }


    // No magic pixel between first line and followings
    // Magic pixel after first line
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x04, 0x04, 0x04
        };

        Bitmap bmp(bpp, &palette332, 4, 3, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0xFF, 0x00, 0x00, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("0x%.2x, ", bmp.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data_co(bpp), expected, sizeof(expected)));
    }


    // No magic pixel between first line and followings
    // Magic pixel after first line, not necessarilly at beginning of a line
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x04, 0x06, 0x02
        };

        Bitmap bmp(bpp, &palette332, 4, 3, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xFF, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("0x%.2x, ", bmp.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data_co(bpp), expected, sizeof(expected)));
    }


    {
        int bpp = 16;
        uint8_t compressed[] = {
            // FOM (24 * 8) pix
            0x58, 0x01, 0x01, 0x01, 0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x0f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0xb0, 0x01, 0x01,
            0x82, 0x01, 0x02, 0x03, 0x04
        };

        Bitmap bmp(bpp, &palette332, 288, 13, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x02, 0x03, 0x04,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", bmp.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data_co(bpp), expected, sizeof(expected)));
    }


//    {
//        uint8_t compressed[] = {
//            0x22,
//            0x60, 0x20, 0x17, 0xc6,
//            0xc0, 0x30, 0xcd, 0x18, // MIX_SET
//            0xd0, 0x01, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
//            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xf3, 0x40, 0x0d, 0x00, 0x00,
//        };

//        Bitmap bmp(16, &palette332, 64, 54, compressed, sizeof(compressed), true);

//    }

    {
        int bpp = 16;
        BOOST_CHECK(1);




        uint8_t uncompressed[] = {
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,

        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,


        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x4e, 0xe1, 0x22,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x61, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xe2, 0x2b, 0x43, 0x57,
        0xa3, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x43, 0x57,
        0x03, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
        0xc3, 0x56, 0x43, 0x57, 0x03, 0x57, 0x23, 0x4e, 0x62, 0x34, 0x40, 0x09, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x80, 0x11, 0xa2, 0x3c, 0x63, 0x4e, 0x23, 0x57, 0x03, 0x57, 0x03, 0x46, 0x22, 0x34,
        0x60, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x1a, 0xc3, 0x45, 0x23, 0x57,
        0x23, 0x57, 0xe3, 0x45, 0xa1, 0x1a, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa3, 0x45,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x23, 0x57, 0x61, 0x1a, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x23, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x41, 0x2b, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1a, 0x43, 0x57,
        0xa0, 0x08, 0x20, 0x00, 0x20, 0x00, 0x60, 0x11, 0xc2, 0x3c, 0x43, 0x57, 0x63, 0x4e, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x11,
        0x43, 0x57, 0x03, 0x57, 0x61, 0x2b, 0xe0, 0x08, 0x20, 0x00, 0x40, 0x00, 0x60, 0x11, 0x41, 0x2b,
        0xe3, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x4e, 0x43, 0x57, 0x02, 0x2c, 0xa0, 0x08,
        0x00, 0x00, 0xa0, 0x08, 0x01, 0x23, 0xc3, 0x56, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x34, 0x43, 0x57,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x43, 0x57, 0x23, 0x57, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x3d,
        0x43, 0x57, 0x61, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x57, 0x43, 0x57, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x1a, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x4e, 0x43, 0x57,
        0x00, 0x00, 0x40, 0x00, 0x40, 0x11, 0xe1, 0x22, 0xe3, 0x45, 0x43, 0x57, 0xc3, 0x45, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x56,
        0x03, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x45, 0x43, 0x57, 0xc2, 0x3c, 0x80, 0x11,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x57, 0x43, 0x57,
        0xc3, 0x56, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x03, 0x57, 0xc0, 0x11, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x11, 0x23, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x83, 0x4e, 0xa3, 0x45, 0x02, 0x34, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x56,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x23, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x09, 0x62, 0x34, 0x23, 0x4e,
        0x03, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x56, 0x43, 0x57,
        0x20, 0x09, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x3d,
        0x43, 0x57, 0x40, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x08, 0x43, 0x57,
        0x43, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x43, 0x57, 0xc3, 0x56, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0xe1, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x40, 0x11, 0x43, 0x57, 0xa3, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x4e, 0x43, 0x57,
        0xe0, 0x08, 0x20, 0x00, 0x20, 0x00, 0x00, 0x09, 0xe1, 0x22, 0xa3, 0x45, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x11,
        0x43, 0x57, 0x63, 0x4e, 0x41, 0x1a, 0x60, 0x00, 0x20, 0x00, 0x60, 0x11, 0x82, 0x45, 0x43, 0x57,
        0x02, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x45, 0x01, 0x23, 0x20, 0x09,
        0x20, 0x00, 0x20, 0x00, 0x20, 0x09, 0xe2, 0x3c, 0x43, 0x57, 0x42, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0xc3, 0x56, 0x01, 0x23, 0x80, 0x00, 0x20, 0x00, 0x60, 0x11,
        0xc3, 0x45, 0x43, 0x57, 0x02, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x34, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xa1, 0x2b, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x23, 0x4e,
        0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0xc3, 0x56, 0x40, 0x11, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x41, 0x23, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x23, 0x57, 0x80, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x1a, 0x43, 0x57,
        0x83, 0x4e, 0x23, 0x57, 0x23, 0x57, 0x43, 0x4e, 0x62, 0x34, 0xa0, 0x11, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x1a, 0x42, 0x3d, 0xc3, 0x56, 0x23, 0x57, 0x63, 0x4e, 0x02, 0x34, 0x60, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x11, 0x22, 0x34, 0x03, 0x4e,
        0x03, 0x57, 0x03, 0x57, 0x43, 0x4e, 0x42, 0x34, 0xe0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x61, 0x1a, 0xc3, 0x45, 0x23, 0x57, 0x03, 0x57,
        0x82, 0x45, 0xc1, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x4e,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x11,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x4e, 0xe1, 0x22,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };


//        uint8_t compressed[] = {
//0xc0, 0x30, 0x1d, 0x99, 0xf0, 0x40, 0x01, 0x82, 0xa6, 0x31, 0xa6, 0x39, 0xc3, 0xbb, 0xa8, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x22, 0x60, 0x20, 0x17, 0xc6, 0xc0,
//0x30, 0xcd, 0x18, 0xd0, 0x7f, 0x01, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
//0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xf3, 0xcb, 0x06, 0x00, 0x00, 0xc3, 0x43, 0x57, 0x82,
//0x43, 0x4e, 0xe1, 0x22, 0x00, 0x1e, 0x62, 0x43, 0x57, 0x81, 0x61, 0x1a, 0x60, 0x1c, 0x00, 0x00,
//0x84, 0x20, 0x00, 0xe2, 0x2b, 0x43, 0x57, 0xa3, 0x45, 0x60, 0x1d, 0x00, 0x00, 0xd0, 0x01, 0x62,
//0x2b, 0x01, 0x81, 0x03, 0x57, 0x00, 0x0e, 0x86, 0x00, 0x09, 0xc3, 0x56, 0x43, 0x57, 0x03, 0x57,
//0x23, 0x4e, 0x62, 0x34, 0xd0, 0x08, 0x40, 0x09, 0x01, 0x00, 0xd0, 0x01, 0x80, 0x00, 0x01, 0xd0,
//0x08, 0x40, 0x00, 0x01, 0x00, 0x87, 0x80, 0x11, 0xa2, 0x3c, 0x63, 0x4e, 0x23, 0x57, 0x03, 0x57,
//0x03, 0x46, 0x22, 0x34, 0xd0, 0x04, 0x60, 0x11, 0x01, 0x82, 0x81, 0x1a, 0xc3, 0x45, 0xc2, 0x23,
//0x57, 0x83, 0xe3, 0x45, 0xa1, 0x1a, 0x00, 0x00, 0xd0, 0x12, 0x43, 0x57, 0x63, 0x60, 0x00, 0x81,
//0xa3, 0x45, 0x65, 0x43, 0x57, 0x82, 0x23, 0x57, 0x61, 0x1a, 0x11, 0x81, 0x41, 0x23, 0x68, 0x43,
//0x57, 0x03, 0x81, 0x01, 0x23, 0x66, 0x43, 0x57, 0x81, 0x41, 0x2b, 0x12, 0x83, 0x01, 0x1a, 0x43,
//0x57, 0xa0, 0x08, 0xc2, 0x63, 0x57, 0x84, 0x60, 0x11, 0xc2, 0x3c, 0x43, 0x57, 0x63, 0x4e, 0x10,
//0x85, 0xc1, 0x11, 0x43, 0x57, 0x03, 0x57, 0x61, 0x2b, 0xe0, 0x08, 0x21, 0x83, 0x40, 0x00, 0x60,
//0x11, 0x41, 0x2b, 0xd0, 0x03, 0xa0, 0x12, 0x01, 0xd0, 0x01, 0x62, 0x6d, 0x01, 0x86, 0x02, 0x2c,
//0xa0, 0x08, 0x00, 0x00, 0xa0, 0x08, 0x01, 0x23, 0xc3, 0x56, 0x12, 0xd0, 0x01, 0x83, 0x2e, 0x01,
//0x64, 0x00, 0x00, 0xd0, 0x01, 0x42, 0x3c, 0x01, 0x81, 0x23, 0x57, 0x10, 0xd0, 0x01, 0xc3, 0x2c,
//0x01, 0x81, 0x61, 0x1a, 0x6a, 0x00, 0x00, 0xd0, 0x01, 0x40, 0x19, 0x01, 0x81, 0x40, 0x00, 0x64,
//0x00, 0x00, 0x81, 0x61, 0x1a, 0x12, 0xd0, 0x02, 0xa1, 0x7a, 0x01, 0x86, 0x40, 0x00, 0x40, 0x11,
//0xe1, 0x22, 0xe3, 0x45, 0x43, 0x57, 0xc3, 0x45, 0x10, 0x82, 0xc3, 0x56, 0x03, 0x57, 0x6b, 0x00,
//0x00, 0xd0, 0x01, 0xc0, 0x12, 0x01, 0x82, 0xc2, 0x3c, 0x80, 0x11, 0xd0, 0x02, 0x40, 0x00, 0x01,
//0x81, 0x20, 0x00, 0x12, 0xd0, 0x01, 0x20, 0x19, 0x01, 0x81, 0xc3, 0x56, 0x64, 0x43, 0x57, 0x82,
//0x03, 0x57, 0xc0, 0x11, 0x10, 0x81, 0x23, 0x57, 0x69, 0x43, 0x57, 0x03, 0x82, 0xe1, 0x11, 0x23,
//0x57, 0x68, 0x43, 0x57, 0x10, 0x64, 0x43, 0x57, 0x84, 0x83, 0x4e, 0xa3, 0x45, 0x02, 0x34, 0x00,
//0x09, 0x69, 0x00, 0x00, 0x08, 0xd0, 0x08, 0xe0, 0x01, 0x01, 0x00, 0xd0, 0x03, 0x60, 0x00, 0x01,
//0x85, 0x00, 0x00, 0x20, 0x09, 0x62, 0x34, 0x23, 0x4e, 0x03, 0x57, 0x0a, 0x81, 0x80, 0x00, 0x0a,
//0xd0, 0x01, 0xa0, 0x01, 0x01, 0x82, 0x20, 0x09, 0x20, 0x00, 0x6d, 0x00, 0x00, 0x08, 0xd0, 0x01,
//0xe1, 0x6b, 0x01, 0x81, 0x40, 0x11, 0xc4, 0x43, 0x57, 0xd0, 0x01, 0x83, 0x5f, 0x01, 0xd0, 0x04,
//0x60, 0x19, 0x01, 0x66, 0x00, 0x00, 0xd0, 0x01, 0x23, 0x57, 0x01, 0xd0, 0x05, 0x80, 0x01, 0x01,
//0xd0, 0x04, 0x61, 0x22, 0x01, 0xd0, 0x01, 0x40, 0x11, 0x01, 0xd0, 0x03, 0xe0, 0x19, 0x01, 0xd0,
//0x01, 0xc0, 0x18, 0x01, 0xd0, 0x01, 0xc0, 0x01, 0x01, 0x84, 0x20, 0x00, 0x00, 0x09, 0xe1, 0x22,
//0xa3, 0x45, 0x11, 0xd0, 0x01, 0xc3, 0x2c, 0x01, 0x87, 0x63, 0x4e, 0x41, 0x1a, 0x60, 0x00, 0x20,
//0x00, 0x60, 0x11, 0x82, 0x45, 0x43, 0x57, 0xd0, 0x04, 0x41, 0x62, 0x01, 0x83, 0xc3, 0x45, 0x01,
//0x23, 0x20, 0x09, 0xc2, 0x20, 0x00, 0x83, 0x20, 0x09, 0xe2, 0x3c, 0x43, 0x57, 0xd0, 0x05, 0x81,
//0x6b, 0x01, 0x87, 0xc3, 0x56, 0x01, 0x23, 0x80, 0x00, 0x20, 0x00, 0x60, 0x11, 0xc3, 0x45, 0x43,
//0x57, 0xd0, 0x03, 0xa1, 0x73, 0x01, 0xd0, 0x01, 0x81, 0x7a, 0x01, 0x66, 0x43, 0x57, 0x06, 0xd0,
//0x0a, 0x43, 0x57, 0x07, 0x00, 0x82, 0x00, 0x00, 0xa1, 0x2b, 0x66, 0x43, 0x57, 0x81, 0x23, 0x4e,
//0xd0, 0x04, 0x62, 0x2c, 0x01, 0x67, 0x43, 0x57, 0x81, 0xc3, 0x56, 0xd0, 0x05, 0x02, 0x2c, 0x01,
//0x81, 0x41, 0x23, 0x65, 0x43, 0x57, 0x81, 0x23, 0x57, 0xd0, 0x03, 0x82, 0x2c, 0x01, 0xd0, 0x01,
//0xe3, 0x2e, 0x01, 0x81, 0x83, 0x4e, 0xc2, 0x60, 0x00, 0x83, 0x43, 0x4e, 0x62, 0x34, 0xa0, 0x11,
//0x12, 0x84, 0x00, 0x00, 0x01, 0x1a, 0x42, 0x3d, 0xc3, 0x56, 0x21, 0x83, 0x63, 0x4e, 0x02, 0x34,
//0x60, 0x00, 0x40, 0x04, 0x01, 0x83, 0x80, 0x11, 0x22, 0x34, 0x03, 0x4e, 0xc2, 0x40, 0x00, 0x83,
//0x43, 0x4e, 0x42, 0x34, 0xe0, 0x08, 0xd0, 0x05, 0x40, 0x11, 0x01, 0x87, 0x00, 0x00, 0x61, 0x1a,
//0xc3, 0x45, 0x23, 0x57, 0x03, 0x57, 0x82, 0x45, 0xc1, 0x11, 0x65, 0x00, 0x00, 0x81, 0x23, 0x4e,
//0x60, 0x1f, 0x00, 0x00, 0x81, 0x80, 0x11, 0x60, 0x6f, 0x00, 0x00, 0xc2, 0x43, 0x57, 0x00, 0x5e,
//0xf3, 0x3c, 0x01, 0x00, 0x00, 0x23, 0x82, 0x43, 0x4e, 0xe1, 0x22, 0x00, 0x10,
//        };


        Bitmap bmp(bpp, &palette332, 64, 64, uncompressed, sizeof(uncompressed));

        Stream out(8192);
        bmp.compress(bpp, out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data) ; i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");


        BOOST_CHECK(2);

        Bitmap bmp2(bpp, &palette332, 64, 64, out.data, (out.p - out.data), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < 8192 ; i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", bmp2.data_co(bpp)[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(0, memcmp(bmp2.data_co(bpp), bmp.data_co(bpp), 8192));


    }

    {
        uint8_t bpp = 8;

        uint8_t compressed[] ={
    0xc0, 0xad, 0x07,        // MIX SET 189 color 7
    0x83, 0x00, 0x00, 0x00,  // COPY 3 colors [0, 0, 0]

    // LINE 17

    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    0xf0, 0x42, 0x02, // FILL 578 (192 * 3 + 2)

    // LINE 16

    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 15

    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 14

    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 13

    //0x07, 0x07,

    // FOM SET 312 mix = 0xF8
    0xf7, 0x38, 0x01, 0xf8,
    0x0f, 0x3e,
    // Mask [0F] 1111 0000 [3E] 0111 1100
    // 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07,
    0x84, 0xc7,
    // Mask [84] 0010 0001 [C7] 1110 0011
    // 0x07, 0x07, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,
    0x60, 0x7c,
    // Mask [60] 0000 0110 [7C] 0011 1110
    // 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07,
    0x86, 0x07,
    // Mask [86] 0110 0001 [07] 1110 0000
    // 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07,
    0xf8, 0x3c,
    // Mask [F8] 0001 1111 [3C] 0011 1100
    // 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07,
    0xe0, 0x78,
    // Mask [E0] 0000 0111 [78] 0001 1110
    // 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07,
    0x1c, 0xc7,
    // Mask [1C] 0011 1000 [C7] 1110 0011
    // 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,
    0x3c, 0x66,
    // Mask [3C] 0011 1100 [66] 0110 0110
    // 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,
    0xc0, 0x18,
    // Mask [C0] 0000 0011 [18] 0001 1000
    // 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,
    0x66, 0xc6,
    // Mask [66] 0110 0110 [C6] 0110 0011
    // 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,
    0xe7, 0x21,
    // Mask [E7] 1110 0111 [21] 1000 0100
    // 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0x07, 0x07,
    0xc2, 0x81,
    // Mask [C2] 0100 0011 [81] 1000 0001
    // 0x07, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x00, 0x00, 0x00,
    // line 12
    // 0x07, 0xff,

    0x16, 0x0d,
    // Mask [16] 0110 1000 [0D] 1011 0000
    // OLD 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07,
    // NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,

    0x4a, 0x0b,
    // Mask [4A] 0101 0010 [0B] 1101 0000
    // OLD 0x07, 0x07, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,
    // NEW 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,

    0x50, 0x1a,
    // Mask [50] 0000 1010 [1A] 0101 1000
    // OLD 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07,
    // NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,

    0x40, 0x0b,
    // Mask [40] 0000 0010 [0B] 0000 1101
    // OLD 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07,
    // NEW 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07,

    0x34, 0x5a,
    // Mask [34] 0010 1100 [5A] 0101 1010
    // OLD 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07,
    // NEW 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,

    0x50, 0xb5,
    // Mask [50] 0000 1010 [B5] 1010 1101
    // OLD 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07,
    // NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,

    0xaa, 0x0a,
    // Mask [AA] 0101 0101 [0A] 0101 0000
    // OLD 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,
    // NEW 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,

    0x5a,
    // Mask [5A] 0101 1010
    // OLD 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07,
    // NEW 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,

    0x00, 0x05, // FILL 37

    // OLD 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,
    // NEW 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,
    // OLD 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,
    // NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,
    // OLD 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
    // NEW 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,

    // FOM 64
    0x48,
    0x8d, 0x96,
    // Mask [8D] 1011 0001 [96] 0110 1001
    // OLD 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07,
    // NEW 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    0x2a, 0x15,
    // Mask [2A]  0101 0100 [15] 1010 1000
    // OLD 0xff, 0x07, 0x07, 0x07, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x00, 0x00
    // NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x00, 0x00,
    0x4a, 0x01,
    // Mask [4A] 0101 0010 [01] 1000 0000
    // OLD 0x00,
    // NEW 0x00,
    // LINE 11
    // OLD 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    // NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,

    0x00, 0x60,
    // Mask [00] 0000 0000 [60] 0000 0110
    // OLD 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,
    // NEW 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07,

    0x1d, // FILL 29
    // OLD 0x07,
    // NEW 0x07,
    // OLD 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    // NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    // OLD 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
    // NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,

    // NEW 0x07, 0x07, 0x07, 0x07,

    // NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,
    // NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
    // NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
    // NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    // NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,
    // NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    // NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
    // NEW 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,


    0x68, 0x07, 0x0b, 0x6a, 0x07, 0x07, 0x66, 0x07, 0x42, 0x18, 0x00, 0x14, 0xfa, 0x00, 0x05,
    0x45, 0x03, 0x00, 0x00, 0xa8, 0x78, 0x1b, 0x4b, 0x0f, 0x00, 0x78, 0x60, 0xf1, 0x2c, 0x0b, 0x00,
    0x00, 0x80, 0x08, 0x1b, 0x42, 0x45, 0x59, 0x1d, 0xf9, 0x18, 0x4b, 0x03, 0x00, 0x18, 0xd0, 0x30,
    0x9a, 0x06, 0x00, 0x00, 0x20, 0x20, 0x1f, 0x06, 0x41, 0x0d, 0x00, 0x04, 0x13, 0x41, 0x01, 0x1b,
    0x43, 0x03, 0x60, 0x18, 0x00, 0x29, 0xf2, 0x90, 0x01, 0x03, 0x00, 0x80, 0x6a, 0x0b, 0x49, 0x00,
    0x48, 0x0b, 0x34, 0x5a, 0x50, 0xb5, 0xaa, 0x2a, 0x5a, 0x5c, 0x00, 0x02, 0xc1, 0xa5, 0xd1, 0x56,
    0xb5, 0x02, 0x00, 0xb3, 0xb1, 0xc7, 0x4b, 0x66, 0x9e, 0x07, 0x38, 0x3c, 0xe0, 0x78, 0x1c, 0xe7,
    0x3c, 0x3a, 0x00, 0x00, 0xa7, 0xc3, 0xe1, 0x8d, 0xd8, 0x41, 0x29, 0x00, 0x46, 0x45, 0x03, 0x00,
    0x40, 0x55, 0x19, 0x00, 0x09, 0x41, 0x2d, 0x1d, 0x60, 0x02, 0x07, 0x00, 0x5a, 0x60, 0x9b, 0x07,
    0xf0, 0x43, 0x02,
        };

        Bitmap bmp2(bpp, &palette332, 192, 18, compressed, 13*16+3, true);

        printf("------- Decompressed ---------\n");
        for (size_t i = 0; i < bmp2.bmp_size(bpp) ; i++){
            if (i % 16 == 0) printf("\n");
            if (i % 192 == 0) printf("\n");
            printf("0x%.2x, ", bmp2.data_co(bpp)[i]);
        }
        printf("\n----------------------------\n");
        printf("\n");

   }

    //------- Decompressed ---------


    // LINE 11

    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
    //0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,
    //0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
    //0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,

    // LINE 10

    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
    //0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
    //0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff,
    //0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0x07,
    //0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,
    //0xff, 0x07, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 9

    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
    //0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0x07, 0xff, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
    //0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,
    //0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 8

    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
    //0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0x07, 0xff, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
    //0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,
    //0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,

    // LINE 7

    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
    //0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff,
    //0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0x07, 0xff, 0xff, 0xff,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,
    //0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07,
    //0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
    //0x07, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 6

    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 5

    //0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 4

    //0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0x07, 0x07, 0xff,
    //0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 3

    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 2

    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 1

    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,

    // LINE 0

    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    //0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
    //----------------------------


}
