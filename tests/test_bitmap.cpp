/*
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Product name: redemption, a FLOSS RDP proxy
   Copyright (C) Wallix 2010
   Author(s): Christophe Grosjean, Javier Caverni
   Based on xrdp Copyright (C) Jay Sorg 2004-2010

   Unit test for bitmap class (mostly tests of compression/decompression)

*/


#define BOOST_AUTO_TEST_MAIN
#define BOOST_TEST_DYN_LINK
#define BOOST_TEST_MODULE TestBitmap
#include <boost/test/auto_unit_test.hpp>
#include <boost/test/unit_test.hpp>

#include"log.hpp"
#define LOGNULL

#include"bitmap.hpp"
#include"colors.hpp"
#include"config.hpp"

BOOST_AUTO_TEST_CASE(TestBitmapCompressHardenned)
{
    const unsigned white = 0xFF;
    BGRPalette palette332;
    init_palette332(palette332);

    // test COLOR COUNT EMPTY
    {
        BOOST_CHECK(1);
        int bpp = 8;
        uint8_t data[0] = {};
        Bitmap bmp(bpp, &palette332, 0, 4, data, 0);
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;
        BOOST_CHECK_EQUAL(0, bmp.get_color_count(::nbbytes(bpp), pmax, bmp.data(), 0xFF));
    }

    // test COLOR COUNT
    {
        BOOST_CHECK_EQUAL(1,1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x05, 0x05, 0x05, 0x05,
            0x05, 0x05, 0x05, 0x05,
            0x05, 0x05, 0x05, 0x05,
            0x05, 0x05, 0x05, 0x05};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;
        BOOST_CHECK_EQUAL(16, bmp.get_color_count(::nbbytes(bpp), pmax, bmp.data(), 0x05));
        BOOST_CHECK_EQUAL(0, bmp.get_color_count(::nbbytes(bpp), pmax, bmp.data(), 0xFE));
    }

    // test COLOR COUNT 2
    {
        BOOST_CHECK_EQUAL(1,1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x02, 0x04,
            0x05, 0x06, 0x07, 0x08,
            0x09, 0x0A, 0x0B, 0x0C,
            0x0D, 0x0E, 0x0F, 0x10};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmax = bmp.data() + bmp.bmp_size;
        BOOST_CHECK_EQUAL(1, bmp.get_color_count(::nbbytes(bpp), pmax, bmp.data(), 0x01));
        BOOST_CHECK_EQUAL(2, bmp.get_color_count(::nbbytes(bpp), pmax, bmp.data() + 1, 0x02));
    }

    // test BICOLOR COUNT EMPTY
    {
        int bpp = 8;
        uint8_t data[0] = {};
        Bitmap bmp(bpp, &palette332, 0, 4, data, 0);
        const uint8_t * pmax = bmp.data() + bmp.bmp_size;
        BOOST_CHECK_EQUAL(0, bmp.get_bicolor_count(::nbbytes(bpp), pmax, bmp.data(), 0xEF, 0xFE));
    }

    // test BICOLOR COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(8, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;
        BOOST_CHECK_EQUAL(16, bmp.get_bicolor_count(::nbbytes(bpp), pmax, pmin, 0x01, 0x05));
        BOOST_CHECK_EQUAL(14, bmp.get_bicolor_count(::nbbytes(bpp), pmax, pmin+1, 0x05, 0x01));
        BOOST_CHECK_EQUAL(0 , bmp.get_bicolor_count(::nbbytes(bpp), pmax, pmin, 0x05, 0x01));
    }

    // test BICOLOR COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;
        BOOST_CHECK_EQUAL(10, bmp.get_bicolor_count(::nbbytes(bpp), pmax, pmin, 0x01, 0x05));
        BOOST_CHECK_EQUAL(10, bmp.get_bicolor_count(::nbbytes(bpp), pmax, pmin + 1, 0x05, 0x01));
    }

    // test FILL COUNT
    {
        int bpp = 8;
        uint8_t data[0] = {};
        Bitmap bmp(bpp, &palette332, 0, 4, data, 0);
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;
        BOOST_CHECK_EQUAL(0, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()));
    }

    // test FILL COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x00, 0x00, 0x00, 0x00,
            0x01, 0x05, 0x01, 0x05,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;

        // Line above first line is black
        BOOST_CHECK_EQUAL(4, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()));
        BOOST_CHECK_EQUAL(3, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+1));

        // 3rd line, compared to 2nd line
        BOOST_CHECK_EQUAL(3, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+8));
    }

    // test FILL COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x00, 0x01, 0x00,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x01,
            0x01, 0x05, 0x01, 0x01};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;

        // Line above first line is black
        BOOST_CHECK_EQUAL(0, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()));
        BOOST_CHECK_EQUAL(1, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+1));
        BOOST_CHECK_EQUAL(0, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+2));
        BOOST_CHECK_EQUAL(2, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+3));

        // until the end
        BOOST_CHECK_EQUAL(8, bmp.get_fill_count(::nbbytes(bpp), pmin, pmax, bmp.data()+8));

    }

    // test MIX COUNT
    {
        int bpp = 8;
        uint8_t data[0] = {};
        Bitmap bmp(bpp, &palette332, 0, 4, data, 0);
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;

        BOOST_CHECK_EQUAL(0, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data(), white));
    }

    // test MIX COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0xFF, 0xFF, 0xFF, 0xFF,
            0x01, 0x05, 0x01, 0x05,
            0xFE, 0xFA, 0xFE, 0x01,
            0x01, 0x05, 0x01, 0x05};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;

        // Line above first line is black
        BOOST_CHECK_EQUAL(4, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data(), white));
        BOOST_CHECK_EQUAL(3, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+1, white));

        // 3rd line, compared to 2nd line
        BOOST_CHECK_EQUAL(3, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+8, white));
    }

    // test MIX COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0xFF, 0x01, 0xFF,
            0xFE, 0x05, 0x01, 0x01,
            0x01, 0xFA, 0xFE, 0xFE,
            0xFE, 0x05, 0x01, 0x01};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;

        // Line above first line is black
        BOOST_CHECK_EQUAL(0, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data(), white));
        BOOST_CHECK_EQUAL(1, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+1, white));
        BOOST_CHECK_EQUAL(0, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+2, white));
        BOOST_CHECK_EQUAL(2, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+3, white));

        // until the end
        BOOST_CHECK_EQUAL(8, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, bmp.data()+8, white));
    }

    // test FILL OR MIX COUNT
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0x03, 0xFB, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x02, 0x03, 0x04, 0xFA};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;

        // Line above first line is black
        uint8_t masks[512];
        BOOST_CHECK_EQUAL(0, bmp.get_fom_count(::nbbytes(bpp), pmin, pmax, bmp.data()+15, white));
        BOOST_CHECK_EQUAL(2, bmp.get_fom_count(::nbbytes(bpp), pmin, pmax, bmp.data()+14, white));
        bmp.get_fom_masks(::nbbytes(bpp), pmin, pmin+14, masks, 2);
        BOOST_CHECK_EQUAL(0x01, masks[0]);


        BOOST_CHECK_EQUAL(4, bmp.get_fom_count(::nbbytes(bpp), pmin, pmax, bmp.data()+12, white));
        bmp.get_fom_masks(::nbbytes(bpp), pmin, pmin+12, masks, 4);
        BOOST_CHECK_EQUAL(0x07, masks[0]);

        BOOST_CHECK_EQUAL(5, bmp.get_fom_count(::nbbytes(bpp), pmin, pmax, bmp.data()+11, white));
        BOOST_CHECK_EQUAL(6, bmp.get_fom_count(::nbbytes(bpp), pmin, pmax, bmp.data()+10, white));

        BOOST_CHECK_EQUAL(12, bmp.get_fom_count(::nbbytes(bpp), pmin, pmax, bmp.data()+4, white));
        bmp.get_fom_masks(::nbbytes(bpp), pmin, pmin+4, masks, 12);
        BOOST_CHECK_EQUAL(0xA5, masks[0]);
        BOOST_CHECK_EQUAL(0x07, masks[1]);
    }

    {
        BOOST_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x05, 0x06, 0x07, 0x08,
            0x09, 0x0A, 0x0B, 0x0C,
            0x0D, 0x0E, 0x0F, 0x10};
        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;

        unsigned flags = 0;
        const uint8_t * p = bmp.data()+3;
        unsigned foreground = bmp.get_pixel_above(::nbbytes(bpp), pmin, p) ^ bmp.get_pixel(::nbbytes(bpp), p);
        BOOST_CHECK_EQUAL(0x04, foreground);
        BOOST_CHECK_EQUAL(3, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, p+nbbytes(bpp), foreground));
        foreground = white;
        BOOST_CHECK_EQUAL(4, bmp.get_fom_count_set(::nbbytes(bpp), pmin, pmax, p, foreground, flags));
        BOOST_CHECK_EQUAL(0x04, foreground);
    }


    {
        BOOST_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t multicolor[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x01, 0x01, 0x01, 0x01,
            0x05, 0x06, 0x07, 0x08,
            0x01, 0x01, 0x01, 0x01};

        Bitmap bmp(bpp, &palette332, 4, 4, multicolor, sizeof(multicolor));
        const uint8_t * pmin = bmp.data();
        const uint8_t * pmax = pmin + bmp.bmp_size;
        const uint8_t * p = bmp.data()+3;

        unsigned foreground = bmp.get_pixel_above(::nbbytes(bpp), pmin, p) ^ bmp.get_pixel(::nbbytes(bpp), p);
        BOOST_CHECK_EQUAL(4, foreground);
        BOOST_CHECK_EQUAL(0, bmp.get_mix_count(::nbbytes(bpp), pmin, pmax, p+nbbytes(bpp), foreground));
        foreground = white;
        unsigned flags = 0;
        BOOST_CHECK_EQUAL(2, bmp.get_fom_count_set(::nbbytes(bpp), pmin, pmax, p, foreground, flags));
        BOOST_CHECK_EQUAL(4, foreground);
        BOOST_CHECK_EQUAL(3, flags); // MIX then FILL

    }


}

BOOST_AUTO_TEST_CASE(TestBitmapCompress)
{
    BGRPalette palette332;
    /* rgb332 palette */
    for (int bindex = 0; bindex < 4; bindex++) {
        for (int gindex = 0; gindex < 8; gindex++) {
            for (int rindex = 0; rindex < 8; rindex++) {
                palette332[(rindex << 5) | (gindex << 2) | bindex] =
                (BGRColor)(
                // r1 r2 r2 r1 r2 r3 r1 r2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
                    (((rindex<<5)|(rindex<<2)|(rindex>>1))<<16)
                // 0 0 0 0 0 0 0 0 g1 g2 g3 g1 g2 g3 g1 g2 0 0 0 0 0 0 0 0
                   | (((gindex<<5)|(gindex<<2)|(gindex>>1))<< 8)
                // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 b1 b2 b1 b2 b1 b2 b1 b2
                   | ((bindex<<6)|(bindex<<4)|(bindex<<2)|(bindex)));
            }
        }
    }

    // test COPY
    {
        BOOST_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x06, 0x07, 0x08, 0x09,
            0x0A, 0x0C, 0x0D, 0x0E,
            0x0F, 0x10, 0x12, 0x13};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));

        BStream out(256);
        bmp.compress(out);
        uint8_t expected[] = {
            0x84, 0x01, 0x02, 0x03, 0x04,
            0x8c, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x12, 0x13
        };


        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompress ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");
    }

    // test COPY 16 bits
    {
        int bpp = 16;
        uint8_t data[4*4*2] = {
            0x01, 0, 0x02, 0, 0x03, 0, 0x04, 0,
            0x05, 0, 0x06, 0, 0x07, 0, 0x08, 0,
            0x09, 0, 0x0A, 0, 0x0B, 0, 0x0C, 0,
            0x0D, 0, 0x0E, 0, 0x0F, 0, 0x10, 0};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, NULL, 4, 4, data, sizeof(data));
        BStream out(256);
        bmp.compress(out);
        uint8_t expected[] = {
            0x84, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00,
            0xc3, 0x04, 0x00, // 4 COPY
            0xc4, 0x0c, 0x00, // 4 MIX SET
            0xc4, 0x04, 0x00, // 4 MIX SET
            0x81, 0x10, 0x00, // 1 COPY
        };


        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        // empty set to 0,0,0,0,0,0,...
        Bitmap bmp2(16, NULL, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test COLOR
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        BStream out(256);
        bmp.compress(out);
        uint8_t expected[] = {
            0x84, 0x01, 0x02, 0x03, 0x04, // 4 COPY
            0x6c, 0x01, // 12 COLOR (01)
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

    }

    // test COLOR then COPY
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x0F};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        BStream out(256);
        bmp.compress(out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0xC4, 0x01, // 4 MIX SET (01)
            0x0b, // 11 FILL
            0x81, 0x0f, // 1 COPY
        };

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));
    }

    // test interleaved COLOR and COPY
    {
        BOOST_CHECK_EQUAL(1, 1);
        int bpp = 8;
        uint8_t data[4*4] = {
            0x01, 0x02, 0x03, 0x04,
            0x01, 0x01, 0x01, 0x01,
            0x05, 0x06, 0x07, 0x08,
            0x01, 0x01, 0x01, 0x01};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        BStream out(256);
        bmp.compress(out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0x84, 0x01, 0x02, 0x03, 0x04, // COPY
            0x64, 0x01,                   // COLOR
            0x84, 0x05, 0x06, 0x07, 0x08, // COPY
            0x64, 0x01                    // COLOR
        };

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test BICOLOR
    {
        int bpp = 8;
        uint8_t data[24] = {
            0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02,
            0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02,
            0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02,

        };

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, &palette332, 24, 1, data, sizeof(data));
        BStream out(256);
        bmp.compress(out);
        uint8_t expected[] = {
            0xeC, 0x01, 0x02 // BICOLOR
        };
        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, &palette332, 24, 1, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test FILL
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0x02, 0x03, 0x04, 0x05,
            0x02, 0x03, 0x04, 0x05,
            0x02, 0x03, 0x04, 0x05};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        BStream out(256);
        bmp.compress(out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05, // 4 COPY
            0x0c, // 12 FILL
        };
        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));
    }

    // test MIX
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA};

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        BStream out(256);
        bmp.compress(out);
        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05, // 4 COPY
            0x2c, // 12 MIX
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));
    }


    // test FOM
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0x03, 0xFB, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x03, 0x03, 0x03, 0x03};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        BStream out(256);
        bmp.compress(out);
        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05,
            0x41, 0xa5, // 8 FOM 0b10100101
            0x64, 0x03, // 4 COLOR
        };

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    // test FOM 2
    {
        int bpp = 8;
        uint8_t data[4*4] = {
            0x02, 0x03, 0x04, 0x05,
            0xFD, 0x03, 0xFB, 0x05,
            0xFD, 0xFC, 0xFB, 0xFA,
            0x02, 0xFC, 0x04, 0xFA};

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, &palette332, 4, 4, data, sizeof(data));
        BStream out(256);
        bmp.compress(out);
        uint8_t expected[] = {
            0x84, 0x02, 0x03, 0x04, 0x05, // 4 COPY
            0x40, 0x0b, 0xa5, 0x05, // 11 FILL or MIX
        };
        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, &palette332, 4, 4, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x40, 0x08, 0x33,                               // 9 FOM 9
            0x0f, 0x66, 0xbb,                               // 15 FILL
            0xd6, 0x62, 0x00, 0x00, 0x40, 0x09, 0x99, 0x00, // 48 FOM SET
            0x66, 0xbb,                                     // 6 COLOR
            0xd6, 0xd0, 0x04, 0xbb, 0xd6, 0x0c, 0x81, 0x00, // 48 FOM SET
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(1);
        Bitmap bmp2(bpp, &palette332, 256, 3, compressed, sizeof(compressed), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");
    }


    {
        int bpp = 16;
        uint8_t raw[] = {
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
        };


        uint8_t compressed[] = {
            // BICOLOR 274 pairs = 548 pixels
            0xf8, 0x12, 0x01, 0x10, 0xe5, 0xef, 0x1a,
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(1);
        Bitmap bmp2(bpp, &palette332, 548, 1, compressed, sizeof(compressed), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(raw));
        BOOST_CHECK(0 == memcmp(bmp2.data(), raw, sizeof(raw)));

    }


    {
        uint8_t raw[] = {
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,

            0x10, 0xe5, 0xef, 0x1a, 0x10, 0xe5, 0xef, 0x1a,
        };


        uint8_t compressed[] = {
            // BICOLOR 274 pairs = 548 pixels
            0xf8, 0x12, 0x01, 0x10, 0xe5, 0xef, 0x1a,
        };

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(1);
        Bitmap bmp2(16, &palette332, 548, 1, compressed, sizeof(compressed), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data_co[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(raw));
        BOOST_CHECK(0 == memcmp(bmp2.data(), raw, sizeof(raw)));

    }


    // functional test , 24 bits, various orders with SET variants
    {
        int bpp = 24;
        uint8_t raw[2*16*3] = {
        0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,
        0x07, 0x07, 0x8e,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0xc8, 0x2a, 0x0a,  0xea, 0x31, 0x0c,  0xea, 0x31, 0x0c,

        0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x0c, 0x0c, 0xea,  0x09, 0x09, 0xbe,
        0x00, 0x00, 0x0b,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,  0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,  0x9f, 0x21, 0x08,  0xea, 0x31, 0x0c,  0xea, 0x31, 0x0c
        };


//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(raw); i++){
//            printf("%.2x ", raw[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");


        Bitmap bmp(bpp, &palette332, 16, 2, raw, sizeof(raw));
        BStream out(256);
        bmp.compress(out);

        uint8_t expected[] = {
            0xc4, 0x0c, 0x0c, 0xea,                   // 4 MIX SET 0xea0c0c
            0xd0, 0x08, 0x07, 0x07, 0x8e, 0x01, 0x00, // 9 FOM SET 0x8e0707 0b00000001 0b00000000
            0x81, 0xc8, 0x2a, 0x0a,                   // 1 COPY 0x0a2ac8

//            0xd0, 0x04, 0xea, 0x31, 0x0c, 0x03,       // 5 FOM SET 0x0C31EA 0b00000011
            0xC2, 0xEA, 0x31, 0x0C,                   // 2 MIX SET 0x0C31EA
            0x03,                                     // 3 FILL

            0x81, 0x09, 0x09, 0xbe,                   // 1 COPY 0xbe0909
            0xd0, 0x08, 0x07, 0x07, 0x85, 0x01, 0x00, // 9 FOM SET 0xB0000^0x8e0707 0b00000001 0b00000000
            0xd0, 0x02, 0x57, 0x0b, 0x02, 0x01        // 3 FOM SET 0x08219F 0b00000001
        };

// c2 ea 31 0c 03

        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp2(bpp, &palette332, 16, 2, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(raw));
        BOOST_CHECK(0 == memcmp(bmp2.data(), raw, sizeof(raw)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");
    }


    {
        int bpp = 16;
        uint8_t compressed[] = {
            // FOM SET 16px Mix 0x0842 MASK 0x00, 00
            0xd0, 0x0F, 0x08, 0x42, 0x0F, 0x0F,
            // COPY 4px
            0x81, 0x01, 0x02
        };

        Bitmap bmp(bpp, &palette332, 64, 10, compressed, 9, true);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        uint8_t expected[] = {
            0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x42, 0x08, 0x42, 0x08, 0x42, 0x08, 0x42,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x02
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("%.2x ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


    {
        int bpp = 16;
        uint8_t compressed[] = {
            // 1_COPY 31_FILL 1_MIX 31_FILL
            // the mix is magically inserted because we have 2 back to back FILL
            // on the first scanline (don't ask why. See RDPBCGR 2.2.9.1.1.3.1.2.4
            // Background Run Orders).
            0x82, 0x01, 0x02, 0x03, 0x04, 0x1F, 0x1F,
            0x00, 0x20, // FILL 64
        };

        Bitmap bmp(bpp, &palette332, 64, 2, compressed, sizeof(compressed), true);

        uint8_t expected[64*2*2] = {
            0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

            0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(bmp.bmp_size, sizeof(expected));
        BOOST_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }

    // Test for magic mix pixel on first line
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x02, 0x02
        };

        Bitmap bmp(bpp, &palette332, 4, 1, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0xff, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


    // No magic pixel between first line and followings
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x04, 0x04
        };

        Bitmap bmp(bpp, &palette332, 4, 2, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


    // No magic pixel between first line and followings
    // Magic pixel after first line
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x04, 0x04, 0x04
        };

        Bitmap bmp(bpp, &palette332, 4, 3, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0xFF, 0x00, 0x00, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


    // No magic pixel between first line and followings
    // Magic pixel after first line, not necessarilly at beginning of a line
    {
        int bpp = 8;
        uint8_t compressed[] = {
            0x04, 0x06, 0x02
        };

        Bitmap bmp(bpp, &palette332, 4, 3, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xFF, 0x00,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


    {
        int bpp = 16;
        uint8_t compressed[] = {
            // FOM (24 * 8) pix
            0x58, 0x01, 0x01, 0x01, 0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x0f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0xb0, 0x01, 0x01,
            0x82, 0x01, 0x02, 0x03, 0x04
        };

        Bitmap bmp(bpp, &palette332, 288, 13, compressed, sizeof(compressed), true);

        uint8_t expected[] = {
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x02, 0x03, 0x04,
        };

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp.bmp_size; i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", bmp.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK(0 == memcmp(bmp.data(), expected, sizeof(expected)));
    }


//    {
//        uint8_t compressed[] = {
//            0x22,
//            0x60, 0x20, 0x17, 0xc6,
//            0xc0, 0x30, 0xcd, 0x18, // MIX_SET
//            0xd0, 0x01, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
//            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xf3, 0x40, 0x0d, 0x00, 0x00,
//        };

//        Bitmap bmp(16, &palette332, 64, 54, compressed, sizeof(compressed), true);

//    }

    {
        int bpp = 16;
        BOOST_CHECK(1);




        uint8_t uncompressed[] = {
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,

        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99, 0x1d, 0x99,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x31, 0xa6, 0x39, 0xa6, 0x31, 0xa6, 0x31,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,
        0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6, 0x17, 0xc6,


        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xdb, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,

        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde, 0xda, 0xde,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x4e, 0xe1, 0x22,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x61, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xe2, 0x2b, 0x43, 0x57,
        0xa3, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x43, 0x57,
        0x03, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
        0xc3, 0x56, 0x43, 0x57, 0x03, 0x57, 0x23, 0x4e, 0x62, 0x34, 0x40, 0x09, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x80, 0x11, 0xa2, 0x3c, 0x63, 0x4e, 0x23, 0x57, 0x03, 0x57, 0x03, 0x46, 0x22, 0x34,
        0x60, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x1a, 0xc3, 0x45, 0x23, 0x57,
        0x23, 0x57, 0xe3, 0x45, 0xa1, 0x1a, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa3, 0x45,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x23, 0x57, 0x61, 0x1a, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x23, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x41, 0x2b, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1a, 0x43, 0x57,
        0xa0, 0x08, 0x20, 0x00, 0x20, 0x00, 0x60, 0x11, 0xc2, 0x3c, 0x43, 0x57, 0x63, 0x4e, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x11,
        0x43, 0x57, 0x03, 0x57, 0x61, 0x2b, 0xe0, 0x08, 0x20, 0x00, 0x40, 0x00, 0x60, 0x11, 0x41, 0x2b,
        0xe3, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x4e, 0x43, 0x57, 0x02, 0x2c, 0xa0, 0x08,
        0x00, 0x00, 0xa0, 0x08, 0x01, 0x23, 0xc3, 0x56, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x34, 0x43, 0x57,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x43, 0x57, 0x23, 0x57, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x3d,
        0x43, 0x57, 0x61, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x57, 0x43, 0x57, 0x40, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x1a, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x4e, 0x43, 0x57,
        0x00, 0x00, 0x40, 0x00, 0x40, 0x11, 0xe1, 0x22, 0xe3, 0x45, 0x43, 0x57, 0xc3, 0x45, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x56,
        0x03, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x45, 0x43, 0x57, 0xc2, 0x3c, 0x80, 0x11,
        0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x57, 0x43, 0x57,
        0xc3, 0x56, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x03, 0x57, 0xc0, 0x11, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x11, 0x23, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x83, 0x4e, 0xa3, 0x45, 0x02, 0x34, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x56,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x23, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x09, 0x62, 0x34, 0x23, 0x4e,
        0x03, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x56, 0x43, 0x57,
        0x20, 0x09, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x3d,
        0x43, 0x57, 0x40, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x08, 0x43, 0x57,
        0x43, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x43, 0x57, 0xc3, 0x56, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0xe1, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x40, 0x11, 0x43, 0x57, 0xa3, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x4e, 0x43, 0x57,
        0xe0, 0x08, 0x20, 0x00, 0x20, 0x00, 0x00, 0x09, 0xe1, 0x22, 0xa3, 0x45, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x11,
        0x43, 0x57, 0x63, 0x4e, 0x41, 0x1a, 0x60, 0x00, 0x20, 0x00, 0x60, 0x11, 0x82, 0x45, 0x43, 0x57,
        0x02, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x45, 0x01, 0x23, 0x20, 0x09,
        0x20, 0x00, 0x20, 0x00, 0x20, 0x09, 0xe2, 0x3c, 0x43, 0x57, 0x42, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0xc3, 0x56, 0x01, 0x23, 0x80, 0x00, 0x20, 0x00, 0x60, 0x11,
        0xc3, 0x45, 0x43, 0x57, 0x02, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x34, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xa1, 0x2b, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x23, 0x4e,
        0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0xc3, 0x56, 0x40, 0x11, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x41, 0x23, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x23, 0x57, 0x80, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x1a, 0x43, 0x57,
        0x83, 0x4e, 0x23, 0x57, 0x23, 0x57, 0x43, 0x4e, 0x62, 0x34, 0xa0, 0x11, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x1a, 0x42, 0x3d, 0xc3, 0x56, 0x23, 0x57, 0x63, 0x4e, 0x02, 0x34, 0x60, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x11, 0x22, 0x34, 0x03, 0x4e,
        0x03, 0x57, 0x03, 0x57, 0x43, 0x4e, 0x42, 0x34, 0xe0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x00, 0x00, 0x61, 0x1a, 0xc3, 0x45, 0x23, 0x57, 0x03, 0x57,
        0x82, 0x45, 0xc1, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x4e,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x11,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57,
        0x43, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x57, 0x43, 0x57, 0x43, 0x57, 0x43, 0x4e, 0xe1, 0x22,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };


//        uint8_t compressed[] = {
//0xc0, 0x30, 0x1d, 0x99, 0xf0, 0x40, 0x01, 0x82, 0xa6, 0x31, 0xa6, 0x39, 0xc3, 0xbb, 0xa8, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81,
//0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x23, 0x81, 0xa6, 0x39, 0x22, 0x60, 0x20, 0x17, 0xc6, 0xc0,
//0x30, 0xcd, 0x18, 0xd0, 0x7f, 0x01, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
//0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xf3, 0xcb, 0x06, 0x00, 0x00, 0xc3, 0x43, 0x57, 0x82,
//0x43, 0x4e, 0xe1, 0x22, 0x00, 0x1e, 0x62, 0x43, 0x57, 0x81, 0x61, 0x1a, 0x60, 0x1c, 0x00, 0x00,
//0x84, 0x20, 0x00, 0xe2, 0x2b, 0x43, 0x57, 0xa3, 0x45, 0x60, 0x1d, 0x00, 0x00, 0xd0, 0x01, 0x62,
//0x2b, 0x01, 0x81, 0x03, 0x57, 0x00, 0x0e, 0x86, 0x00, 0x09, 0xc3, 0x56, 0x43, 0x57, 0x03, 0x57,
//0x23, 0x4e, 0x62, 0x34, 0xd0, 0x08, 0x40, 0x09, 0x01, 0x00, 0xd0, 0x01, 0x80, 0x00, 0x01, 0xd0,
//0x08, 0x40, 0x00, 0x01, 0x00, 0x87, 0x80, 0x11, 0xa2, 0x3c, 0x63, 0x4e, 0x23, 0x57, 0x03, 0x57,
//0x03, 0x46, 0x22, 0x34, 0xd0, 0x04, 0x60, 0x11, 0x01, 0x82, 0x81, 0x1a, 0xc3, 0x45, 0xc2, 0x23,
//0x57, 0x83, 0xe3, 0x45, 0xa1, 0x1a, 0x00, 0x00, 0xd0, 0x12, 0x43, 0x57, 0x63, 0x60, 0x00, 0x81,
//0xa3, 0x45, 0x65, 0x43, 0x57, 0x82, 0x23, 0x57, 0x61, 0x1a, 0x11, 0x81, 0x41, 0x23, 0x68, 0x43,
//0x57, 0x03, 0x81, 0x01, 0x23, 0x66, 0x43, 0x57, 0x81, 0x41, 0x2b, 0x12, 0x83, 0x01, 0x1a, 0x43,
//0x57, 0xa0, 0x08, 0xc2, 0x63, 0x57, 0x84, 0x60, 0x11, 0xc2, 0x3c, 0x43, 0x57, 0x63, 0x4e, 0x10,
//0x85, 0xc1, 0x11, 0x43, 0x57, 0x03, 0x57, 0x61, 0x2b, 0xe0, 0x08, 0x21, 0x83, 0x40, 0x00, 0x60,
//0x11, 0x41, 0x2b, 0xd0, 0x03, 0xa0, 0x12, 0x01, 0xd0, 0x01, 0x62, 0x6d, 0x01, 0x86, 0x02, 0x2c,
//0xa0, 0x08, 0x00, 0x00, 0xa0, 0x08, 0x01, 0x23, 0xc3, 0x56, 0x12, 0xd0, 0x01, 0x83, 0x2e, 0x01,
//0x64, 0x00, 0x00, 0xd0, 0x01, 0x42, 0x3c, 0x01, 0x81, 0x23, 0x57, 0x10, 0xd0, 0x01, 0xc3, 0x2c,
//0x01, 0x81, 0x61, 0x1a, 0x6a, 0x00, 0x00, 0xd0, 0x01, 0x40, 0x19, 0x01, 0x81, 0x40, 0x00, 0x64,
//0x00, 0x00, 0x81, 0x61, 0x1a, 0x12, 0xd0, 0x02, 0xa1, 0x7a, 0x01, 0x86, 0x40, 0x00, 0x40, 0x11,
//0xe1, 0x22, 0xe3, 0x45, 0x43, 0x57, 0xc3, 0x45, 0x10, 0x82, 0xc3, 0x56, 0x03, 0x57, 0x6b, 0x00,
//0x00, 0xd0, 0x01, 0xc0, 0x12, 0x01, 0x82, 0xc2, 0x3c, 0x80, 0x11, 0xd0, 0x02, 0x40, 0x00, 0x01,
//0x81, 0x20, 0x00, 0x12, 0xd0, 0x01, 0x20, 0x19, 0x01, 0x81, 0xc3, 0x56, 0x64, 0x43, 0x57, 0x82,
//0x03, 0x57, 0xc0, 0x11, 0x10, 0x81, 0x23, 0x57, 0x69, 0x43, 0x57, 0x03, 0x82, 0xe1, 0x11, 0x23,
//0x57, 0x68, 0x43, 0x57, 0x10, 0x64, 0x43, 0x57, 0x84, 0x83, 0x4e, 0xa3, 0x45, 0x02, 0x34, 0x00,
//0x09, 0x69, 0x00, 0x00, 0x08, 0xd0, 0x08, 0xe0, 0x01, 0x01, 0x00, 0xd0, 0x03, 0x60, 0x00, 0x01,
//0x85, 0x00, 0x00, 0x20, 0x09, 0x62, 0x34, 0x23, 0x4e, 0x03, 0x57, 0x0a, 0x81, 0x80, 0x00, 0x0a,
//0xd0, 0x01, 0xa0, 0x01, 0x01, 0x82, 0x20, 0x09, 0x20, 0x00, 0x6d, 0x00, 0x00, 0x08, 0xd0, 0x01,
//0xe1, 0x6b, 0x01, 0x81, 0x40, 0x11, 0xc4, 0x43, 0x57, 0xd0, 0x01, 0x83, 0x5f, 0x01, 0xd0, 0x04,
//0x60, 0x19, 0x01, 0x66, 0x00, 0x00, 0xd0, 0x01, 0x23, 0x57, 0x01, 0xd0, 0x05, 0x80, 0x01, 0x01,
//0xd0, 0x04, 0x61, 0x22, 0x01, 0xd0, 0x01, 0x40, 0x11, 0x01, 0xd0, 0x03, 0xe0, 0x19, 0x01, 0xd0,
//0x01, 0xc0, 0x18, 0x01, 0xd0, 0x01, 0xc0, 0x01, 0x01, 0x84, 0x20, 0x00, 0x00, 0x09, 0xe1, 0x22,
//0xa3, 0x45, 0x11, 0xd0, 0x01, 0xc3, 0x2c, 0x01, 0x87, 0x63, 0x4e, 0x41, 0x1a, 0x60, 0x00, 0x20,
//0x00, 0x60, 0x11, 0x82, 0x45, 0x43, 0x57, 0xd0, 0x04, 0x41, 0x62, 0x01, 0x83, 0xc3, 0x45, 0x01,
//0x23, 0x20, 0x09, 0xc2, 0x20, 0x00, 0x83, 0x20, 0x09, 0xe2, 0x3c, 0x43, 0x57, 0xd0, 0x05, 0x81,
//0x6b, 0x01, 0x87, 0xc3, 0x56, 0x01, 0x23, 0x80, 0x00, 0x20, 0x00, 0x60, 0x11, 0xc3, 0x45, 0x43,
//0x57, 0xd0, 0x03, 0xa1, 0x73, 0x01, 0xd0, 0x01, 0x81, 0x7a, 0x01, 0x66, 0x43, 0x57, 0x06, 0xd0,
//0x0a, 0x43, 0x57, 0x07, 0x00, 0x82, 0x00, 0x00, 0xa1, 0x2b, 0x66, 0x43, 0x57, 0x81, 0x23, 0x4e,
//0xd0, 0x04, 0x62, 0x2c, 0x01, 0x67, 0x43, 0x57, 0x81, 0xc3, 0x56, 0xd0, 0x05, 0x02, 0x2c, 0x01,
//0x81, 0x41, 0x23, 0x65, 0x43, 0x57, 0x81, 0x23, 0x57, 0xd0, 0x03, 0x82, 0x2c, 0x01, 0xd0, 0x01,
//0xe3, 0x2e, 0x01, 0x81, 0x83, 0x4e, 0xc2, 0x60, 0x00, 0x83, 0x43, 0x4e, 0x62, 0x34, 0xa0, 0x11,
//0x12, 0x84, 0x00, 0x00, 0x01, 0x1a, 0x42, 0x3d, 0xc3, 0x56, 0x21, 0x83, 0x63, 0x4e, 0x02, 0x34,
//0x60, 0x00, 0x40, 0x04, 0x01, 0x83, 0x80, 0x11, 0x22, 0x34, 0x03, 0x4e, 0xc2, 0x40, 0x00, 0x83,
//0x43, 0x4e, 0x42, 0x34, 0xe0, 0x08, 0xd0, 0x05, 0x40, 0x11, 0x01, 0x87, 0x00, 0x00, 0x61, 0x1a,
//0xc3, 0x45, 0x23, 0x57, 0x03, 0x57, 0x82, 0x45, 0xc1, 0x11, 0x65, 0x00, 0x00, 0x81, 0x23, 0x4e,
//0x60, 0x1f, 0x00, 0x00, 0x81, 0x80, 0x11, 0x60, 0x6f, 0x00, 0x00, 0xc2, 0x43, 0x57, 0x00, 0x5e,
//0xf3, 0x3c, 0x01, 0x00, 0x00, 0x23, 0x82, 0x43, 0x4e, 0xe1, 0x22, 0x00, 0x10,
//        };


        Bitmap bmp(bpp, &palette332, 64, 64, uncompressed, sizeof(uncompressed));

        BStream out(8192);
        bmp.compress(out);

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data) ; i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");


        BOOST_CHECK(2);

        Bitmap bmp2(bpp, &palette332, 64, 64, out.data, (out.p - out.data), true);

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < 8192 ; i++){
//            if (i % 16 == 0) printf("\n");
//            printf("0x%.2x, ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

        BOOST_CHECK_EQUAL(0, memcmp(bmp2.data(), bmp.data(), 8192));


    }


    //------- Decompressed ---------


    //----------------------------

    {
        int bpp = 24;
        uint8_t data[64*64*3] = {
            /* line 63 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 62 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 61 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 60 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 59 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 58 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 57 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 56 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 55 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,


            /* line 54 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 53 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 52 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 51 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 50 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 49 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 48 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 47 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 46 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 45 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 44 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 43 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 42 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 41 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 40 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 39 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 38 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 37 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 36 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 35 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 34 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 33 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 32 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 31 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 30 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 29 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 28 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 27 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 26 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 25 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 24 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 23 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 22 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 21 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 20 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 19 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 18 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 17 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 16 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 15 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 14 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 13 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 12 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 11 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 10 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 09 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 08 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 07 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 06 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 05 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 04 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 03 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 02 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 01 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,

            /* line 00 */
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
            0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,  0xFF, 0x00, 0x00,
        };

//        printf("------- Raw pixels ---------\n");
//        for (int i = 0; i < sizeof(data); i++){
//            printf("%.2x ", data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        Bitmap bmp(bpp, NULL, 64, 64, data, sizeof(data));
        BStream out(12288);
        bmp.compress(out);
        // 64x64 24 bits RED Block
        uint8_t expected[] = {
            0xc0, 0x30, 0xff, 0x00, 0x00, 0xf0, 0xc0, 0x0f,
        };


        BOOST_CHECK_EQUAL(sizeof(expected), out.p - out.data);
        BOOST_CHECK(0 == memcmp(out.data, expected, sizeof(expected)));

//        printf("------- Compressed ---------\n");
//        for (int i = 0; i < (out.p - out.data); i++){
//            printf("0x%.2x, ", out.data[i]);
//        }
//        printf("\n");
//        printf("\n----------------------------\n");
//        printf("\n");

        // empty set to 0,0,0,0,0,0,...
        Bitmap bmp2(bpp, NULL, 64, 64, out.data, out.p - out.data, true);
        BOOST_CHECK_EQUAL(bmp2.bmp_size, sizeof(data));
        BOOST_CHECK(0 == memcmp(bmp2.data(), data, sizeof(data)));

//        printf("------- Decompressed ---------\n");
//        for (int i = 0; i < bmp2.bmp_size; i++){
//            printf("%.2x ", bmp2.data()[i]);
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

    }

    {
        uint8_t bpp = 8;

        uint8_t compressed[] ={
// DUMP OUPUT: cx=192 cy=18 line_width=192 bmp_size=3456
// MIX SET 189 000007
0xc0, 0xad, 0x07,
// LINE 17
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// COPY 3
0x83, 0x00, 0x00, 0x00,
// NEW                                                                               0x00, 0x00, 0x00,

// FILL 578
0xf0, 0x42, 0x02,
// LINE 13
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 15

// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 14

// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 13

// NEW 0x07, 0x07,

// FOM SET 312 000248 [0f] 1111 0000 [3e] 0111 1100 [84] 0010 0001 [c7] 1110 0011 [60] 0000 0110 [7c] 0011 1110 [86] 0110 0001 [07] 1110 0000 [f8] 0001 1111 [3c] 0011 1100 [e0] 0000 0111 [78] 0001 1110 [1c] 0011 1000 [c7] 1110 0011 [3c] 0011 1100 [66] 0110 0110 [c0] 0000 0011 [18] 0001 1000 [66] 0110 0110 [c6] 0110 0011 [e7] 1110 0111 [21] 1000 0100 [c2] 0100 0011 [81] 1000 0001 [16] 0110 1000 [0d] 1011 0000 [4a] 0101 0010 [0b] 1101 0000 [50] 0000 1010 [1a] 0101 1000 [40] 0000 0010 [0b] 1101 0000 [34] 0010 1100 [5a] 0101 1010 [50] 0000 1010 [b5] 1010 1101 [aa] 0101 0101 [0a] 0101 0000 [5a] 0101 1010
0xf7, 0x38, 0x01, 0xf8, 0x0f, 0x3e, 0x84, 0xc7, 0x60, 0x7c, 0x86, 0x07, 0xf8, 0x3c, 0xe0, 0x78, 0x1c, 0xc7, 0x3c, 0x66, 0xc0, 0x18, 0x66, 0xc6, 0xe7, 0x21, 0xc2, 0x81, 0x16, 0x0d, 0x4a, 0x0b, 0x50, 0x1a, 0x40, 0x0b, 0x34, 0x5a, 0x50, 0xb5, 0xaa, 0x0a, 0x5a,
// NEW             0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff,
// NEW 0x07, 0x07, 0x07, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 12

// NEW 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,

// FILL 37
0x00, 0x05,
// NEW                                                             0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,

// FOM 64 [8d] 1011 0001 [96] 0110 1001 [2a] 0101 0100 [15] 1010 1000 [4a] 0101 0010 [01] 1000 0000 [00] 0000 0000 [60] 0000 0110
0x48, 0x8d, 0x96, 0x2a, 0x15, 0x4a, 0x01, 0x00, 0x60,
// NEW                                                                                           0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
// LINE 11

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07,

// FILL 29
0x1d,
// NEW                                                                                           0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,

// COLOR 8 000007
0x68, 0x07,
// NEW                                                                         0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07,

// FILL 11
0x0b,
// NEW                         0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,

// COLOR 10 000007
0x6a, 0x07,
// NEW                                                                                           0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// FILL 7
0x07,
// NEW                                                       0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,

// COLOR 6 000007
0x66, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// FOM 16 [18] 0001 1000 [00] 0000 0000
0x42, 0x18, 0x00,
// NEW                                     0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,

// FILL 20
0x14,
// NEW                                     0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff,

// SPECIAL_FGBG_1 8 [07] 1110 0000
0xfa,
// NEW                                                             0xff, 0xff, 0xff, 0xff, 0xff, 0x07,
// NEW 0x07, 0x07,

// FILL 37
0x00, 0x05,
// NEW             0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07,

// FOM 40 [03] 1100 0000 [00] 0000 0000 [00] 0000 0000 [a8] 0001 0101 [78] 0001 1110
0x45, 0x03, 0x00, 0x00, 0xa8, 0x78,
// NEW                                           0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
// LINE 10

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07,

// FILL 27
0x1b,
// NEW                                                                                           0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,

// FOM 88 [0f] 1111 0000 [00] 0000 0000 [78] 0001 1110 [60] 0000 0110 [f1] 1000 1111 [2c] 0011 0100 [0b] 1101 0000 [00] 0000 0000 [00] 0000 0000 [80] 0000 0001 [08] 0001 0000
0x4b, 0x0f, 0x00, 0x78, 0x60, 0xf1, 0x2c, 0x0b, 0x00, 0x00, 0x80, 0x08,
// NEW                                                             0xff, 0xff, 0xff, 0xff, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff,
// NEW 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0xff, 0x07,
// NEW 0x07, 0x07,

// FILL 27
0x1b,
// NEW             0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,

// FOM 16 [45] 1010 0010 [59] 1001 1010
0x42, 0x45, 0x59,
// NEW                                                                               0xff, 0xff, 0x07,
// NEW 0xff, 0x07, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07,

// FILL 29
0x1d,
// NEW                                                                               0x00, 0x00, 0x00,
// LINE 9

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff,

// SPECIAL_FGBG_2 8 [03] 1100 0000
0xf9,
// NEW                                                             0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff,

// FILL 24
0x18,
// NEW             0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff,

// FOM 88 [03] 1100 0000 [00] 0000 0000 [18] 0001 1000 [d0] 0000 1011 [30] 0000 1100 [9a] 0101 1001 [06] 0110 0000 [00] 0000 0000 [00] 0000 0000 [20] 0000 0100 [20] 0000 0100
0x4b, 0x03, 0x00, 0x18, 0xd0, 0x30, 0x9a, 0x06, 0x00, 0x00, 0x20, 0x20,
// NEW                                                             0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07,

// FILL 31
0x1f,
// NEW             0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,
// NEW 0xff,

// FILL 6 MAGIC MIX
0x06,
// NEW       0xff, 0xff, 0x07, 0xff, 0xff, 0x07,

// FOM 8 [0d] 1011 0000
0x41, 0x0d,
// NEW                                           0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00,

// FILL 36
0x00, 0x04,
// NEW                                                                                           0x00,
// LINE 8

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07,

// FILL 19 MAGIC MIX
0x13,
// NEW                   0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07,

// FOM 8 [01] 1000 0000
0x41, 0x01,
// NEW                                     0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,

// FILL 27
0x1b,
// NEW                                                                                     0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07,

// FOM 24 [03] 1100 0000 [60] 0000 0110 [18] 0001 1000
0x43, 0x03, 0x60, 0x18,
// NEW                                                       0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0xff,

// FILL 73
0x00, 0x29,
// NEW       0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,
// NEW 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07,

// FOM 400 [03] 1100 0000 [00] 0000 0000 [80] 0000 0001 [6a] 0101 0110 [0b] 1101 0000 [49] 1001 0010 [00] 0000 0000 [48] 0001 0010 [0b] 1101 0000 [34] 0010 1100 [5a] 0101 1010 [50] 0000 1010 [b5] 1010 1101 [aa] 0101 0101 [2a] 0101 0100 [5a] 0101 1010 [5c] 0011 1010 [00] 0000 0000 [02] 0100 0000 [c1] 1000 0011 [a5] 1010 0101 [d1] 1000 1011 [56] 0110 1010 [b5] 1010 1101 [02] 0100 0000 [00] 0000 0000 [b3] 1100 1101 [b1] 1000 1101 [c7] 1110 0011 [4b] 1101 0010 [66] 0110 0110 [9e] 0111 1001 [07] 1110 0000 [38] 0001 1100 [3c] 0011 1100 [e0] 0000 0111 [78] 0001 1110 [1c] 0011 1000 [e7] 1110 0111 [3c] 0011 1100 [3a] 0101 1100 [00] 0000 0000 [00] 0000 0000 [a7] 1110 0101 [c3] 1100 0011 [e1] 1000 0111 [8d] 1011 0001 [d8] 0001 1011 [41] 1000 0010 [29] 1001 0100
0xf2, 0x90, 0x01, 0x03, 0x00, 0x80, 0x6a, 0x0b, 0x49, 0x00, 0x48, 0x0b, 0x34, 0x5a, 0x50, 0xb5, 0xaa, 0x2a, 0x5a, 0x5c, 0x00, 0x02, 0xc1, 0xa5, 0xd1, 0x56, 0xb5, 0x02, 0x00, 0xb3, 0xb1, 0xc7, 0x4b, 0x66, 0x9e, 0x07, 0x38, 0x3c, 0xe0, 0x78, 0x1c, 0xe7, 0x3c, 0x3a, 0x00, 0x00, 0xa7, 0xc3, 0xe1, 0x8d, 0xd8, 0x41, 0x29,
// NEW                                                             0xff, 0xff, 0x07, 0x00, 0x00, 0x00,
// LINE 7

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff,
// NEW 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff,
// NEW 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff,
// NEW 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0xff, 0x07, 0xff, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0x07, 0xff, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x07, 0x07,
// NEW 0x07, 0xff, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 6

// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0xff, 0x07, 0xff, 0x07, 0xff, 0xff,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 5

// NEW 0x07, 0xff, 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,

// FILL 102
0x00, 0x46,
// NEW                                                             0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// FOM 40 [03] 1100 0000 [00] 0000 0000 [40] 0000 0010 [55] 1010 1010 [19] 1001 1000
0x45, 0x03, 0x00, 0x40, 0x55, 0x19,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07,

// FILL 41
0x00, 0x09,
// NEW                                                 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 4

// NEW 0x07,

// FOM 8 [2d] 1011 0100
0x41, 0x2d,
// NEW       0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0x07, 0x07,

// FILL 29
0x1d,
// NEW                                                       0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// COLOR 34 000007
0x60, 0x02, 0x07,
// NEW                                     0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// FILL 122
0x00, 0x5a,
// NEW                                                 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xff,
// NEW 0xff, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0xff, 0xff, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 3

// NEW 0x07, 0x07,

// COLOR 187 000007
0x60, 0x9b, 0x07,
// NEW             0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,

// FILL 579
0xf0, 0x43, 0x02,
// NEW                                                                               0x00, 0x00, 0x00,
// LINE 2

// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 1

// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
// LINE 0

// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
// NEW 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
        };

        Bitmap bmp2(bpp, &palette332, 192, 18, compressed, sizeof(compressed), true);
//        bmp2.dump_decompress(bpp, compressed, sizeof(compressed));

        BOOST_CHECK_EQUAL(1688359122, bmp2.compute_crc());
//        printf("------- Decompressed ---------\n");
//        for (size_t i = 0; i < bmp2.bmp_size ; i++){
//            if (i % 192 == 0) printf("\n");
//            printf("%c", (bmp2.data()[i]==0xFF)?'O':'.');
//        }
//        printf("\n----------------------------\n");
//        printf("\n");

// BOGUS VERSION, BEFORE FIXING SPECIAL_FGBG_1 and FIXING SPECIAL_FGBG_2
//00_.............................................................................................................................................................................................
//01_.............................................................................................................................................................................................
//02_.............................................................................................................................................................................................
//03_.............................................................................................................................................................................................
//04_..OOOO.....................OO...........................................OO......................................OO....................OO....O..OO..OO..............OO........................
//05_.OO..OO....................OO.........OO................................OO......................................OO....................OO....O..OO..OO..............OO........................
//06_OO....OO...................OO.........OO................................OO.............................................................OO.O...OO...................OO........................
//07_OO....OO..OO..OO.OO...OO.OO.....OOOO.OOOO..OO..OO..OOOO..OOOO........OOOOO..OOOO.......OOO...OOOO...OOO...OOO..OOO..OOOO...O.OOO.......OO.O...OO..OOO..O.OOO....OOOOO..OOOO.OO...O...OO.OOO..
//08_OO....OO..OO..OO..OO.OO.OO.O.O..OO.O..OO...OO..OO..OO.O.OO..OO......OO..OO.OO..OO.....OO.OO.OO..OO.OO.OO.OO.OO..OO.OO..OO..OO..OO......OO.OO..OO...OO..OO..OO..OO..OO.OO..OO.OO.OOO.OO.OO.OO.
//09_OO....OO..OO..OO..OO.OO.OO.O.O..OO....OO...OO..OO..OO...OO..OO......OO..OO.OO..OO.....OO....OO..OO.OO....OO.....OO.OO..OO..OO..OO......OO.OO..OO...OO..OO..OO..OO..OO.OO..OO.OO.OOO.OO.OO....
//10_OO....OO..OO..OO..OO.OO.OOOOOO..OO....OO...OO..OO..OO...OOOOOO......OO..OO.OOOOOO......OOO..OOOOOO..OOO...OOO...OO.OO..OO..OO..OO.......O.OO..O....OO..OO..OO..OO..OO.OO..OO.OO.O.O.OO..OOO..
//11_OO....OO..OO..OO...OOO..OO......OO....OO...OO..OO..OO...OO..........OO..OO.OO............OO.OO........OO....OO..OO.OO..OO..OO..OO.......OOOO.OO....OO..OO..OO..OO..OO.OO..OO..OOO.OOO.....OO.
//12_.OO..OO...OO..OO...OOO..OO..OO..OO....OO...OO..OO..OO...OO..OO......OO..OO.OO..OO.....OO.OO.OO..OO.OO.OO.OO.OO..OO.OO..OO..OO..OO.......OO...OO....OO..OO..OO..OO..OO.OO..OO..OOO.OOO..OO.OO.
//13_..OOOO.....OOOOO....O....OOOO...OO.....OO...OOOOO..OO....OOOO........OOOOO..OOOO.......OOO...OOOO...OOO...OOO...OO..OOOO...OO..OO.......OO...OO....OO..OO..OO...OOOOO..OOOO....O...O....OOO..
//14_.............................................................................................................................................................................................
//15_.............................................................................................................................................................................................
//16_.............................................................................................................................................................................................
//17_.............................................................................................................................................................................................

// AFTER FIXING SPECIAL_FGBG_1 and FIXING SPECIAL_FGBG_2
//------- Decompressed ---------
//00_................................................................................................................................................................................................
//01_................................................................................................................................................................................................
//02_................................................................................................................................................................................................
//03_................................................................................................................................................................................................
//04_..OOOO..................................................................OO......................................OO....................OO.......OO..OO..............OO...........................
//05_.OO..OO...............................OO................................OO......................................OO....................OO.......OO..OO..............OO...........................
//06_OO....OO..............................OO................................OO.............................................................OO.O.O.OO...................OO...........................
//07_OO....OO..OO..OO.OO...OO.OOOO...OOOO.OOOO..OO..OO..OOOO..OOOO........OOOOO..OOOO.......OOO...OOOO...OOO...OOO..OOO..OOOO...O.OOO.......OO.O.O.OO..OOO..O.OOO....OOOOO..OOOO.OO...O...OO.OOO.....
//08_OO....OO..OO..OO..OO.OO.OO..OO..OO.O..OO...OO..OO..OO.O.OO..OO......OO..OO.OO..OO.....OO.OO.OO..OO.OO.OO.OO.OO..OO.OO..OO..OO..OO......OO.OOO.OO...OO..OO..OO..OO..OO.OO..OO.OO.OOO.OO.OO.OO....
//09_OO....OO..OO..OO..OO.OO.OO..OO..OO....OO...OO..OO..OO...OO..OO......OO..OO.OO..OO.....OO....OO..OO.OO....OO.....OO.OO..OO..OO..OO......OO.OOO.OO...OO..OO..OO..OO..OO.OO..OO.OO.OOO.OO.OO.......
//10_OO....OO..OO..OO..OO.OO.OOOOOO..OO....OO...OO..OO..OO...OOOOOO......OO..OO.OOOOOO......OOO..OOOOOO..OOO...OOO...OO.OO..OO..OO..OO.......O.OOO.O....OO..OO..OO..OO..OO.OO..OO.OO.O.O.OO..OOO.....
//11_OO....OO..OO..OO...OOO..OO......OO....OO...OO..OO..OO...OO..........OO..OO.OO............OO.OO........OO....OO..OO.OO..OO..OO..OO.......OOOOOOO....OO..OO..OO..OO..OO.OO..OO..OOO.OOO.....OO....
//12_.OO..OO...OO..OO...OOO..OO..OO..OO....OO...OO..OO..OO...OO..OO......OO..OO.OO..OO.....OO.OO.OO..OO.OO.OO.OO.OO..OO.OO..OO..OO..OO.......OO...OO....OO..OO..OO..OO..OO.OO..OO..OOO.OOO..OO.OO....
//13_..OOOO.....OOOOO....O....OOOO...OO.....OO...OOOOO..OO....OOOO........OOOOO..OOOO.......OOO...OOOO...OOO...OOO...OO..OOOO...OO..OO.......OO...OO....OO..OO..OO...OOOOO..OOOO....O...O....OOO.....
//14_................................................................................................................................................................................................
//15_................................................................................................................................................................................................
//16_................................................................................................................................................................................................
//17_................................................................................................................................................................................................

   }

}
