/*
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Product name: redemption, a FLOSS RDP proxy
   Copyright (C) Wallix 2013
   Author(s): Christophe Grosjean, Meng Tan

*/

#define BOOST_AUTO_TEST_MAIN
#define BOOST_TEST_DYN_LINK
#define BOOST_TEST_MODULE TestXXX
#include <boost/test/auto_unit_test.hpp>

#define LOGPRINT
// #define LOGNULL

#include <stdio.h>
#include "system/ssl_sign.hpp"


BOOST_AUTO_TEST_CASE(TestSslHmacSign)
{
    const uint8_t key[] = "key";
    // const uint8_t key[] = "";
    Sign hmac(key, sizeof(key) - 1);

    const uint8_t msg[] = "The quick brown fox jumps over the lazy dog";
    // const uint8_t msg[] = "";
    hmac.update(msg, sizeof(msg) - 1);

    uint8_t sig[16];
    hmac.final(sig, sizeof(sig));
    // hexdump96_c(sig, sizeof(sig));
    BOOST_CHECK_EQUAL(memcmp(sig,
                             "\x10\xfb\x60\x2c\xef\xe7\xe0\x0b"
                             "\x91\xc2\xe2\x12\x39\x80\xe1\x94",
                             sizeof(sig)),
                      0);
}


BOOST_AUTO_TEST_CASE(TestNTLMAUTH)
{
    SslMd4 md4;

    uint8_t password[] = {
        // 0x50, 0x00, 0x61, 0x00, 0x73, 0x00, 0x73, 0x00,
        // 0x77, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x64, 0x00
        0x70, 0x00, 0x61, 0x00, 0x73, 0x00, 0x73, 0x00,
        0x77, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x64, 0x00
    };
    // uint8_t user[] = {
    //     0x75, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00,
    //     0x6e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00
    // };
    uint8_t userUpper[] = {
        // 0x55, 0x00, 0x53, 0x00, 0x45, 0x00, 0x52, 0x00
        0x55, 0x00, 0x53, 0x00, 0x45, 0x00, 0x52, 0x00,
        0x4e, 0x00, 0x41, 0x00, 0x4d, 0x00, 0x45, 0x00
    };
    uint8_t userDomain[] = {
        // 0x44, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x61, 0x00,
        // 0x69, 0x00, 0x6e, 0x00
        0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00
    };


    uint8_t md4password[16] = {};
    md4.update(password, sizeof(password));
    md4.final(md4password, sizeof(md4password));
    // hexdump96_c(md4password, sizeof(md4password));

    SslHMAC_Md5 hmac_md5(md4password, sizeof(md4password));
    hmac_md5.update(userUpper, sizeof(userUpper));
    hmac_md5.update(userDomain, sizeof(userDomain));
    // equivalent: hmac_md5.update(useranddomain, sizeof(useranddomain));

    uint8_t sig[16] = {};
    hmac_md5.final(sig, sizeof(sig));
    // hexdump96_c(sig, sizeof(sig));


    // NTOWFv2(password, user, userdomain) =
    //   HMAC_MD5( MD4(UNICODE(password)),
    //             UNICODE( Concat( Upper(user), userdomain) )
    //           )


    const uint8_t NTOWFv2[] = {
        0xef, 0xc2, 0xc0, 0x9f, 0x06, 0x11, 0x3d, 0x71,
        0x08, 0xd0, 0xd2, 0x29, 0xfa, 0x4d, 0xe6, 0x98
    };

    BOOST_CHECK_EQUAL(memcmp(sig,
                             NTOWFv2,
                             sizeof(sig)),
                      0);



    // CHALLENGE_MESSAGE.TargetInfo.MsvAvTimestamp 8-bytes (little endian)
    // const uint8_t ServerTimeStamp[] = {
    //     0xa9, 0x8d, 0x9b, 0x1a, 0x6c, 0xb0, 0xcb, 0x01
    // };
    // Current time ?
    const uint8_t ClientTimeStamp[] = {
        0xc3, 0x83, 0xa2, 0x1c, 0x6c, 0xb0, 0xcb, 0x01
    };
    // nonce generated by client
    const uint8_t ClientChallenge[] = {
        0x47, 0xa2, 0xe5, 0xcf, 0x27, 0xf7, 0x3c, 0x43
    };

    // CHALLENGE_MESSAGE.AvPairs
    const uint8_t AvPairs[] = {
        0x02, 0x00, 0x08, 0x00, 0x57, 0x00, 0x49, 0x00,
        0x4e, 0x00, 0x37, 0x00, 0x01, 0x00, 0x08, 0x00,
        0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x37, 0x00,
        0x04, 0x00, 0x08, 0x00, 0x77, 0x00, 0x69, 0x00,
        0x6e, 0x00, 0x37, 0x00, 0x03, 0x00, 0x08, 0x00,
        0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00,
        0x07, 0x00, 0x08, 0x00, 0xa9, 0x8d, 0x9b, 0x1a,
        0x6c, 0xb0, 0xcb, 0x01, 0x00, 0x00, 0x00, 0x00
    };
    uint8_t temp[1 + 1 + 6 + 8 + 8 + 4 + sizeof(AvPairs) + 4] = {};

    temp[0] = 0x01;
    temp[1] = 0x01;

    // memcpy(&temp[1+1+6], ServerTimeStamp, sizeof(ServerTimeStamp));
    memcpy(&temp[1+1+6], ClientTimeStamp, sizeof(ClientTimeStamp));
    memcpy(&temp[1+1+6+8], ClientChallenge, sizeof(ClientChallenge));
    memcpy(&temp[1+1+6+8+8+4], AvPairs, sizeof(AvPairs));

    // temp = { 0x01, 0x01, Z(6), Time, ClientChallenge, Z(4), ServerName , Z(4) }
    // Z(n) = { 0x00, ... , 0x00 } n times
    // ServerName = AvPairs received in Challenge message

    // CHALLENGE_MESSAGE.ServerChallenge 8-bytes
    const uint8_t ServerChallenge[] = {
        // 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef
        0x26, 0x6e, 0xcd, 0x75, 0xaa, 0x41, 0xe7, 0x6f
    };
    // hexdump_c(temp, sizeof(temp));

    uint8_t computed_NtProofStr[16] = {};
    SslHMAC_Md5 hmac_md5resp(NTOWFv2, sizeof(NTOWFv2));
    hmac_md5resp.update(ServerChallenge, sizeof(ServerChallenge));
    hmac_md5resp.update(temp, sizeof(temp));
    hmac_md5resp.final(computed_NtProofStr, sizeof(computed_NtProofStr));
    // hexdump96_c(computed_NtProofStr, sizeof(computed_NtProofStr));

    // NtProofStr = HMAC_MD5(NTOWFv2(password, user, userdomain),
    //                       Concat(ServerChallenge, temp))

    // NTLMv2 Response (NtProofStr)
    const uint8_t NtProofStr[] = {
        0x01, 0x4a, 0xd0, 0x8c, 0x24, 0xb4, 0x90, 0x74,
        0x39, 0x68, 0xe8, 0xbd, 0x0d, 0x2b, 0x70, 0x10
    };
    BOOST_CHECK_EQUAL(memcmp(computed_NtProofStr,
                             NtProofStr,
                             sizeof(computed_NtProofStr)),
                      0);

    // NtChallengeResponse = Concat(NtProofStr, temp)

    // LmChallengeResponse.Response = HMAC_MD5(NTOWFv2(password, user, userdomain),
    //                                         Concat(ServerChallenge, ClientChallenge))
    // hmac_md5resp = SslHMAC_Md5(NTOWFv2, sizeof(NTOWFv2));
    SslHMAC_Md5 hmac_md5lmresp(NTOWFv2, sizeof(NTOWFv2));
    hmac_md5lmresp.update(ServerChallenge, sizeof(ServerChallenge));
    hmac_md5lmresp.update(ClientChallenge, sizeof(ClientChallenge));
    uint8_t LmChallengeResponse[16] = {};
    hmac_md5lmresp.final(LmChallengeResponse, sizeof(LmChallengeResponse));
    // hexdump96_c(LmChallengeResponse, sizeof(LmChallengeResponse));

    // LmChallengeResponse.ChallengeFromClient = ClientChallenge

    uint8_t LmChallengeResp[sizeof(LmChallengeResponse) + sizeof(ClientChallenge)] = {};
    memcpy(LmChallengeResp, LmChallengeResponse, sizeof(LmChallengeResponse));
    memcpy(&LmChallengeResp[sizeof(LmChallengeResponse)], ClientChallenge, sizeof(ClientChallenge));

    uint8_t LmChallengeRespExpected[] = {
        0xa0, 0x98, 0x01, 0x10, 0x19, 0xbb, 0x5d, 0x00,
        0xf6, 0xbe, 0x00, 0x33, 0x90, 0x20, 0x34, 0xb3,
        0x47, 0xa2, 0xe5, 0xcf, 0x27, 0xf7, 0x3c, 0x43
    };
    BOOST_CHECK_EQUAL(memcmp(LmChallengeResp,
                             LmChallengeRespExpected,
                             sizeof(LmChallengeResp)),
                      0);

    // SessionBaseKey = HMAC_MD5(NTOWFv2(password, user, userdomain),
    //                           NtProofStr)
    uint8_t SessionBaseKey[16] = {};
    SslHMAC_Md5 hmac_md5seskey(NTOWFv2, sizeof(NTOWFv2));
    hmac_md5seskey.update(NtProofStr, sizeof(NtProofStr));
    hmac_md5seskey.final(SessionBaseKey, sizeof(SessionBaseKey));
    // hexdump96_c(SessionBaseKey, sizeof(SessionBaseKey));

    // EncryptedRandomSessionKey = RC4K(KeyExchangeKey, ExportedSessionKey)
    // ExportedSessionKey = NONCE(16) (random 16bytes number)
    // KeyExchangeKey = SessionBaseKey
    // EncryptedRandomSessionKey = RC4K(SessionBaseKey, NONCE(16))
    SslRC4 rc4;
    rc4.set_key(SessionBaseKey, sizeof(SessionBaseKey));
    uint8_t EncryptedRandomSessionKey[16] = {};
    uint8_t ExportedSessionKey[16] = {
        0x89, 0x90, 0x0d, 0x5d, 0x2c, 0x53, 0x2b, 0x36,
        0x31, 0xcc, 0x1a, 0x46, 0xce, 0xa9, 0x34, 0xf1
    };
    rc4.crypt(sizeof(EncryptedRandomSessionKey), ExportedSessionKey, EncryptedRandomSessionKey);
    // hexdump96_c(EncryptedRandomSessionKey, sizeof(EncryptedRandomSessionKey));

    uint8_t EncryptedRandomSessionKeyExpected[16] = {
        0xb1, 0xd2, 0x45, 0x42, 0x0f, 0x37, 0x9a, 0x0e,
        0xe0, 0xce, 0x77, 0x40, 0x10, 0x8a, 0xda, 0xba
    };
    BOOST_CHECK_EQUAL(memcmp(EncryptedRandomSessionKeyExpected,
                             EncryptedRandomSessionKey,
                             sizeof(ExportedSessionKey)),
                      0);


    static const uint8_t client_sign_magic[] = "session key to client-to-server signing key magic constant";
    static const uint8_t server_sign_magic[] = "session key to server-to-client signing key magic constant";
    static const uint8_t client_seal_magic[] = "session key to client-to-server sealing key magic constant";
    static const uint8_t server_seal_magic[] = "session key to server-to-client sealing key magic constant";
    // ClientSignKey = MD5(Concat(ExportedSessionKey,
    //                            "session key to client-to-server signing key magic constant"))

    uint8_t ClientSignKey[16] = {};
    SslMd5 md5clientsign;
    md5clientsign.update(ExportedSessionKey, sizeof(ExportedSessionKey));
    md5clientsign.update(client_sign_magic, sizeof(client_sign_magic));
    md5clientsign.final(ClientSignKey, sizeof(ClientSignKey));
    // hexdump_d(ClientSignKey, sizeof(ClientSignKey));
    uint8_t ClientSignKeyExpected[16] = {
        0xbf, 0x5e, 0x42, 0x76, 0x55, 0x68, 0x38, 0x97,
        0x45, 0xd3, 0xb4, 0x9f, 0x5e, 0x2f, 0xbc, 0x89
    };
    BOOST_CHECK_EQUAL(memcmp(ClientSignKeyExpected,
                             ClientSignKey,
                             sizeof(ClientSignKey)),
                      0);

    // ServerSignKey = MD5(Concat(ExportedSessionKey,
    //                            "session key to server-to-client signing key magic constant"))
    uint8_t ServerSignKey[16] = {};
    SslMd5 md5serversign;
    md5serversign.update(ExportedSessionKey, sizeof(ExportedSessionKey));
    md5serversign.update(server_sign_magic, sizeof(server_sign_magic));
    md5serversign.final(ServerSignKey, sizeof(ServerSignKey));
    // hexdump_d(ServerSignKey, sizeof(ServerSignKey));
    uint8_t ServerSignKeyExpected[16] = {
        0x9b, 0x3b, 0x64, 0x89, 0xda, 0x84, 0x52, 0x17,
        0xd5, 0xc2, 0x6e, 0x90, 0x16, 0x3b, 0x42, 0x11
    };
    BOOST_CHECK_EQUAL(memcmp(ServerSignKeyExpected,
                             ServerSignKey,
                             sizeof(ServerSignKey)),
                      0);

    // ClientSealKey = MD5(Concat(ExportedSessionKey,
    //                            "session key to client-to-server sealing key magic constant"))
    uint8_t ClientSealKey[16] = {};
    SslMd5 md5clientseal;
    md5clientseal.update(ExportedSessionKey, sizeof(ExportedSessionKey));
    md5clientseal.update(client_seal_magic, sizeof(client_seal_magic));
    md5clientseal.final(ClientSealKey, sizeof(ClientSealKey));
    // hexdump_d(ClientSealKey, sizeof(ClientSealKey));
    uint8_t ClientSealKeyExpected[16] = {
        0xca, 0x41, 0xcd, 0x08, 0x48, 0x07, 0x22, 0x6e,
        0x0d, 0x84, 0xc3, 0x88, 0xa5, 0x07, 0xa9, 0x73
    };
    BOOST_CHECK_EQUAL(memcmp(ClientSealKeyExpected,
                             ClientSealKey,
                             sizeof(ClientSealKey)),
                      0);


    // ServerSealKey = MD5(Concat(ExportedSessionKey,
    //                            "session key to server-to-client sealing key magic constant"))
    uint8_t ServerSealKey[16] = {};
    SslMd5 md5serverseal;
    md5serverseal.update(ExportedSessionKey, sizeof(ExportedSessionKey));
    md5serverseal.update(server_seal_magic, sizeof(server_seal_magic));
    md5serverseal.final(ServerSealKey, sizeof(ServerSealKey));
    // hexdump_d(ServerSealKey, sizeof(ServerSealKey));
    uint8_t ServerSealKeyExpected[16] = {
        0x14, 0xb7, 0x1d, 0x06, 0x2c, 0x68, 0x2e, 0xad,
        0x4b, 0x0e, 0x95, 0x23, 0x70, 0x91, 0x98, 0x90
    };
    BOOST_CHECK_EQUAL(memcmp(ServerSealKeyExpected,
                             ServerSealKey,
                             sizeof(ServerSealKey)),
                      0);

}

BOOST_AUTO_TEST_CASE(TestAES)
{
    SslAES aes;

    uint8_t key24[] = "clef très très secrete";
    uint8_t iv[] = "vecteur d'initialisation pas secret du tout";
    uint8_t iv2[] = "vecteur d'initialisation pas secret du tout";

    uint8_t inbuf[1024]= "secret très confidentiel\x00\x00\x00\x00\x00\x00\x00\x00";
    uint8_t outbuf[1024] = {};
    uint8_t decrypted[1024] = {};


    aes.set_key(key24, 24);

    aes.crypt_cbc(32, iv, inbuf, outbuf);

    aes.decrypt_cbc(32, iv2, outbuf, decrypted);

    BOOST_CHECK_EQUAL(memcmp(inbuf,
                             decrypted,
                             32),
                      0);

}

