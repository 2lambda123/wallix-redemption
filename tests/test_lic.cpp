/*
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Product name : redemption, a FLOSS RDP proxy
   Copyright (C) Wallix 2012
   Author(s) : Christophe Grosjean

   RDP Licence Layer Unit Tests

*/

#define BOOST_AUTO_TEST_MAIN
#define BOOST_TEST_DYN_LINK
#define BOOST_TEST_MODULE TestLic
#include <boost/test/auto_unit_test.hpp>

#define LOGPRINT
#include "log.hpp"

#include "stream.hpp"
#include "RDP/lic.hpp"

BOOST_AUTO_TEST_CASE(Test_lic_new_licence)
{
    const char indata[] = 
/* 00000000 */ "\x03\x03\x07\x08\x09\x00\xef\x07\xdb\xa3\x13\x30\x79\xa3\xcd\x9e"
/* 00000010 */ "\x48\xf4\x8f\x06\x37\x1b\x45\xdd\x60\xa9\x2e\x29\x26\xbf\xc1\x96"
/* 00000020 */ "\x5e\x07\x93\x9d\xf2\x2d\x3e\xa3\x3a\xff\xd5\x6d\xf5\x85\x30\x28"
/* 00000030 */ "\xe1\x46\xfd\x56\xd1\x20\x41\x33\x94\x88\x0c\x27\x23\xa0\x61\x38"
/* 00000040 */ "\x60\xdb\x86\xd6\xce\x2c\xcd\x40\x39\x55\x23\x39\x12\xb9\xfd\xc2"
/* 00000050 */ "\x8d\x58\x0a\x37\x33\x42\x5c\x61\xd7\xc8\xa0\x11\x66\xe2\x45\xba"
/* 00000060 */ "\x41\x39\xea\x85\x2a\x6e\x7a\xb3\xe7\x27\x75\xfc\x4d\xc0\xfb\x0d"
/* 00000070 */ "\xe8\x67\x90\xb3\x3a\x40\xf0\x15\x8a\x15\x8e\x2c\x99\x0f\x1c\xbd"
/* 00000080 */ "\xd2\x08\x66\x51\x9e\x6a\xe6\x2c\xf7\x1f\xd0\xc0\x8e\x89\x76\x64"
/* 00000090 */ "\x18\x58\xa1\x94\xbd\xce\xb1\x2d\x96\xab\x53\xcf\xf8\xbf\xd0\xc9"
/* 000000A0 */ "\xc0\x2e\xe6\xa4\x0b\x50\x31\x4a\x4e\xd8\x47\x4b\xaf\xb8\x21\x78"
/* 000000B0 */ "\xbf\x09\xac\x7f\x2d\x2d\x88\xf6\xd8\xc7\x45\x33\x9f\xac\x69\xf5"
/* 000000C0 */ "\x88\x9d\x5c\x6e\xc9\xd0\xca\x8c\xbc\xa9\xd6\x07\x36\xed\x40\x95"
/* 000000D0 */ "\x8a\xc1\x3f\x04\x41\xb3\xc9\xb3\x18\x9d\x33\x1b\x04\x55\xcd\x41"
/* 000000E0 */ "\xdf\x19\xe1\xcd\xa0\xa4\x35\x6e\xb7\x0a\xf3\xec\x48\x10\x4f\x28"
/* 000000F0 */ "\xc6\x35\xf3\x9b\xa2\xd5\xf7\x58\x03\x4d\x9a\x16\x34\xfb\x96\x0c"
/* 00000100 */ "\xd5\x3a\xae\x52\x1b\x2f\x1f\x1f\x31\xb2\xd9\x14\x3b\x73\x0f\xe3"
/* 00000110 */ "\x04\xe0\xa5\x52\x89\x68\xba\x0f\x99\x9d\x24\xa6\xf3\xe8\x9f\xcc"
/* 00000120 */ "\xd2\x44\x9f\x08\x8b\x0a\x24\x89\xf7\xc9\x07\x0d\x25\x07\xed\x3e"
/* 00000130 */ "\x75\x21\x19\x65\xdc\x98\x41\x9d\x05\x12\x18\x88\x86\x16\x43\x49"
/* 00000140 */ "\x29\xf2\xe8\x26\x16\x1e\xce\xcd\x32\xe7\x36\x74\x51\x27\xfd\xa2"
/* 00000150 */ "\xa9\x62\x57\x60\x28\xe4\x64\x02\x06\x6b\xff\x01\xab\xc5\x1c\x25"
/* 00000160 */ "\x98\x07\xe1\x40\xad\x19\xb7\x68\x66\x12\x4e\x80\xbc\x83\xd2\xde"
/* 00000170 */ "\xcb\x7e\xc2\x32\xc7\xb8\x4d\xd6\x7d\xdd\x63\xa9\x95\x45\xc1\x90"
/* 00000180 */ "\xc7\x99\x3c\x0a\x24\x62\xfc\x24\x15\xdb\xd3\xd2\x9b\x5d\x78\x04"
/* 00000190 */ "\x78\xd5\x40\x1d\xe3\x4e\xe8\x30\x9f\x56\x91\x71\x00\x86\x2c\x6a"
/* 000001A0 */ "\xb2\x78\xec\x70\xd9\x71\xe6\xaa\xb1\xad\x18\xf9\xa6\x84\xb7\x4b"
/* 000001B0 */ "\x5f\x32\xb8\xe3\xc7\x84\xef\x37\xfe\xae\x99\xb5\xf2\x34\x84\x82"
/* 000001C0 */ "\x4a\xb3\xd0\x7c\x5e\x25\x71\x89\x8b\x7d\x6f\x5f\x96\x7a\x1d\x84"
/* 000001D0 */ "\x96\x56\x34\x30\xce\x09\xd5\x00\xa8\xac\x15\x72\x21\xc4\x71\x57"
/* 000001E0 */ "\xe5\x2a\x3d\xdf\x82\xb8\xb8\x63\xdc\x3f\x2e\x99\x6c\xc3\xe3\xfd"
/* 000001F0 */ "\x92\xe0\x26\xe1\x27\xb8\x04\x71\xb0\xa8\xd1\xdf\x7e\x24\x23\xb9"
/* 00000200 */ "\x82\x01\x77\xdc\x8f\x77\x54\xe6\x93\xc8\x6c\x66\x87\xb7\xaa\x9d"
/* 00000210 */ "\x66\xd4\xc6\x2f\x5e\x9e\xe1\xcf\xdb\xb2\x74\x0e\xea\xa5\xe0\xf7"
/* 00000220 */ "\x00\xf1\x76\xf7\x45\x2c\xf8\xa9\x3b\xd9\x81\x59\x52\x0f\xfe\xd9"
/* 00000230 */ "\x28\x02\x59\x82\x39\x51\x6e\xb9\xac\xf9\x6a\x48\x73\x6f\x2c\x4d"
/* 00000240 */ "\x7b\xc0\xbf\xbe\x69\xae\x0e\xdc\x8b\xe6\xd8\x9f\x66\x30\x1e\x45"
/* 00000250 */ "\x1d\x85\x23\xeb\xa8\x02\xb5\xba\xc2\xfd\xa1\xff\xc5\x55\x2b\xa0"
/* 00000260 */ "\xf7\x5b\x24\xee\x81\xd8\xe1\xb8\x02\x06\x85\x6e\x41\x5a\xb8\x07"
/* 00000270 */ "\xff\x65\xdb\xb4\x59\x89\x71\x95\xd5\x0c\x2a\x67\x4d\x57\xfd\x4a"
/* 00000280 */ "\xe8\x07\x02\x42\x20\xd9\xf1\xc6\xd5\x4c\x53\xb0\x32\x68\xc0\xdc"
/* 00000290 */ "\xd7\x5d\x8f\xec\x24\x29\x00\x4f\x46\x8d\xd2\x99\xb2\xf4\x06\x99"
/* 000002A0 */ "\x9a\xa6\x31\xf1\x49\x16\xfe\x94\xbb\x8e\x15\x55\x06\x93\x16\xa3"
/* 000002B0 */ "\x2d\x10\xb7\xb1\xcf\x61\x78\xaf\x93\x66\x5a\x75\x5e\x97\xc0\x97"
/* 000002C0 */ "\x4c\xba\xa9\x50\xac\x1b\xd6\x92\x2a\xac\x0a\x21\x12\x9e\x4a\xf0"
/* 000002D0 */ "\x40\x39\x4b\xe5\x78\x88\x86\x17\xb9\xeb\xa0\x33\x8a\x9a\xfc\x7c"
/* 000002E0 */ "\x91\x16\xd7\x52\xec\x05\x7e\x4e\x90\x78\x5e\x45\x4a\xdd\xf6\xf4"
/* 000002F0 */ "\x2e\x68\xf7\x8e\xfc\x60\x95\xaa\x6a\x07\x9c\xea\xce\xc1\xd9\x55"
/* 00000300 */ "\x3a\x78\x54\x9a\x2a\x5f\x47\x87\x18\x4a\x8c\x6c\x34\xf5\xb8\xe2"
/* 00000310 */ "\x84\x36\xef\x0d\x2e\x9d\x42\xd9\xff\x56\xe2\x87\x0b\x2f\x4d\x0e"
/* 00000320 */ "\xc0\x60\x35\x06\x9f\x61\x9e\x4e\x7b\x49\x41\xb4\xfa\x04\x10\xbd"
/* 00000330 */ "\xf6\xad\x02\xd9\x7c\xba\x06\x68\xbb\xa7\xa6\x8a\xab\xab\xb1\x2d"
/* 00000340 */ "\x69\x2a\xf1\xc6\x7b\x1b\x71\xb9\xd0\x91\x82\x6f\xa8\x3c\xe1\xa3"
/* 00000350 */ "\x23\x3d\x4e\x48\x74\xe5\xc9\xc5\x95\x31\xad\xe7\xa9\xdb\x35\xcd"
/* 00000360 */ "\x02\x08\x2c\x29\x5f\xf9\x17\x86\x69\x8f\x13\xd1\xca\x83\xfc\xac"
/* 00000370 */ "\x55\xcf\x5a\xe6\x45\xaf\xe5\xbb\xe7\xb5\x53\x4e\xf0\x63\xfc\x9a"
/* 00000380 */ "\x49\xf6\x45\x93\xc6\xbf\xd5\xb3\x25\xe2\x93\xb0\xa6\xa7\x14\x80"
/* 00000390 */ "\x6d\xb2\x03\x15\x6a\xad\xe8\x25\xf1\x80\xd4\xba\x9a\x88\xbc\x56"
/* 000003A0 */ "\x14\x7a\x4d\xad\xc3\x24\x3f\x4d\x35\x8b\xf6\x59\x5b\xfd\xc9\x32"
/* 000003B0 */ "\x1d\xf5\xa5\x53\xb5\xfb\xba\x83\x29\x0b\x9c\x62\x9b\x56\x4b\x44"
/* 000003C0 */ "\xbc\xcc\x19\x59\x7c\x0b\x74\xd9\x04\x28\xb3\x67\xab\x82\x36\x39"
/* 000003D0 */ "\x55\x5f\x7c\xed\x84\xc1\x16\xd3\x9e\x9c\x90\x9d\x55\xbc\x3e\xb9"
/* 000003E0 */ "\x63\x12\xf2\x26\x6d\xd7\xcc\x4f\x01\xa2\x0b\xd9\x66\x60\xad\xed"
/* 000003F0 */ "\x2e\xbd\xbe\x28\x5f\x4a\x33\xc8\xe8\xd4\xa6\x23\x8a\xfd\x66\xf5"
/* 00000400 */ "\x28\x90\x81\x27\xa9\x44\x93\x68\x57\x44\x5e\xba\x90\x12\x03\x15"
/* 00000410 */ "\x2f\x69\x80\x55\xe8\x32\x63\x88\x30\x85\x50\x9b\xb6\xbc\xbb\xc6"
/* 00000420 */ "\xfe\xa2\xe7\x32\x9d\x3d\x7d\xe2\x31\x93\xa6\x4e\xa0\xdc\x11\x44"
/* 00000430 */ "\xd2\x93\x32\x94\x1e\xc6\x4c\x28\xde\xa2\xa6\x0d\x14\x02\x74\x8a"
/* 00000440 */ "\x84\x2a\x03\x67\x35\x1d\x66\x3e\xe9\x68\x4a\xb2\x92\x1a\x69\x48"
/* 00000450 */ "\xbd\x23\xfd\x70\x5a\xfd\xfe\x74\x39\xc5\xfa\x11\xac\x04\xc9\x94"
/* 00000460 */ "\xfc\x12\x2e\x06\x04\x61\x8e\x32\xf4\xf8\x3b\xd1\xd8\x09\xb3\xe4"
/* 00000470 */ "\xac\x0f\x3e\x92\xf7\x75\x0b\x32\x9b\xd4\x8a\x13\x99\x6a\x26\x77"
/* 00000480 */ "\x9f\x34\x08\xa8\xeb\xb3\x3e\x2a\x5b\x4a\x44\xf9\x21\x89\x2a\x09"
/* 00000490 */ "\x9c\xc7\x0d\x2a\xd8\xd6\x27\x30\x25\x39\x84\x14\x11\x47\xff\x60"
/* 000004A0 */ "\xe4\x7c\xc3\x41\xfd\xd5\x34\xdd\xb1\x1c\xf2\xeb\xb1\x67\x04\xfa"
/* 000004B0 */ "\xfd\x65\x5b\x20\x6e\x28\x75\xa9\x74\x8e\xc4\x2f\xf7\xb2\xf5\x9f"
/* 000004C0 */ "\x13\x44\xff\xb0\xf0\x68\xb0\x69\x15\xa6\x16\xa8\xac\xc3\x06\x14"
/* 000004D0 */ "\x8e\x51\x99\xa9\x4c\x19\xd1\x25\x34\xb5\x79\xc2\xa7\xbf\xd8\x3d"
/* 000004E0 */ "\x2d\x4c\x33\xac\x1b\x6c\xaf\x10\x42\x41\x14\x02\xe6\x87\x2b\xe9"
/* 000004F0 */ "\xec\xc6\xb1\xeb\x97\xd4\x35\x49\x97\xfc\xe2\x73\xf9\x98\x46\x7c"
/* 00000500 */ "\xf6\x17\x2d\xb5\x43\x07\x8b\x19\x95\x9b\x65\xd3\x05\x7e\xb0\x68"
/* 00000510 */ "\x0d\x6e\x4b\x60\xad\x5c\x47\x6e\x37\xfd\x3f\x60\x43\xda\xb2\x34"
/* 00000520 */ "\x00\xd6\x9c\x6d\x46\x7f\x41\xe2\xc1\x1a\xd0\x53\x72\x81\x0b\x3f"
/* 00000530 */ "\x77\xe1\xbc\xcc\x09\x0f\xa1\x1d\x73\x8c\xac\xa4\x48\x90\x80\xa8"
/* 00000540 */ "\x50\x63\x6a\xb7\x76\x91\x91\x2f\x1a\x5e\x83\x80\xe6\xae\x66\x77"
/* 00000550 */ "\x44\xe0\x0f\x14\x70\xc9\xd3\x91\xe8\xd2\xc4\x89\xa8\x45\xc0\x3d"
/* 00000560 */ "\xbd\x09\x58\xe0\xcd\xe6\x5c\x9e\x02\x94\xd2\xbe\xdf\x94\x35\xf7"
/* 00000570 */ "\x67\x96\x75\x88\x08\x59\xd9\x19\x21\xda\xd0\xa2\x74\x2d\x22\x87"
/* 00000580 */ "\x37\x27\x6e\x58\xdc\x8e\x9f\x50\xd5\x62\xf3\x4a\xa4\xb2\xfb\xf9"
/* 00000590 */ "\x3e\xd5\xda\x57\x56\x5c\xcb\x0e\xd1\x62\x4f\xea\x42\x4a\x62\xb2"
/* 000005A0 */ "\x4e\x1c\xd1\xcc\x24\x1b\xdc\xac\xd4\xb0\x2f\x5d\x62\x87\x56\x3d"
/* 000005B0 */ "\xe4\x03\xae\x4a\x7e\x7d\x05\xfe\x85\x33\xda\x5f\x36\xcb\x56\xa1"
/* 000005C0 */ "\x14\x80\x63\x26\x75\x3a\xc2\x1f\x9c\xdd\x8a\xd6\xf8\xa9\x1a\xf6"
/* 000005D0 */ "\xc2\x57\xe0\x7b\x80\x55\xd5\x12\xf1\xb4\xe7\x1d\x95\x68\x02\xf1"
/* 000005E0 */ "\x19\xff\x74\x72\x32\xdb\x6c\xc9\xa0\x2d\x69\xfc\xc0\xe8\x27\x11"
/* 000005F0 */ "\xb8\xe0\xf5\x83\x60\x3f\xb4\x94\xe5\x9d\xb8\xfd\xc5\x9e\x50\x76"
/* 00000600 */ "\x92\xc7\x33\x6b\xe0\x7e\x9b\x2c\x3b\x27\xd8\xa6\xda\xb3\xa1\x45"
/* 00000610 */ "\xef\x3b\x3d\x76\x1d\x5a\x43\xa4\xe1\x82\x5f\x7d\x0b\x10\x28\x1c"
/* 00000620 */ "\xb9\x8f\x2b\xcd\xf9\xc5\x93\xe3\x65\xa5\x5b\x50\xa9\x07\x16\xb3"
/* 00000630 */ "\x45\x4a\x69\xfc\x58\x12\x7b\x58\x34\x9f\x6f\x5e\x7a\xc2\x9f\x7b"
/* 00000640 */ "\xcf\x62\x62\x6c\x1e\x7d\xd9\x72\xca\x98\x1e\xd4\xe5\xc7\x98\x27"
/* 00000650 */ "\xe3\x9f\xc5\x3c\x90\x9e\x26\xed\x7e\x38\x2b\xcf\xc4\x99\xf5\xb4"
/* 00000660 */ "\x78\x48\x7c\x08\x99\xbc\x80\x47\xb1\xc5\x58\x60\x17\x84\x11\xf8"
/* 00000670 */ "\x70\xa1\x26\x95\x94\x77\xf4\x8d\x1d\x47\x96\xdf\x95\x1d\x97\x37"
/* 00000680 */ "\x5a\x12\xfb\x3f\xcd\xa0\xfb\xac\x61\x62\x1f\xee\xdc\x6d\x2c\x45"
/* 00000690 */ "\x5f\xc0\x80\x7d\x99\x62\x38\xf7\x6d\x88\xd5\xe2\x24\x9d\xed\xa7"
/* 000006A0 */ "\xd5\xe7\x1c\x8a\x75\x9b\x67\x0c\x64\xfe\xe7\xe2\xe9\xa0\x94\x60"
/* 000006B0 */ "\x26\x46\xd8\xc9\x59\x43\x17\x85\x07\x32\x8b\x0c\x5a\x1e\x35\x48"
/* 000006C0 */ "\x46\xe5\x44\x5b\xc7\x07\xcd\x30\x97\x80\xfa\xf9\xeb\x0d\xaf\xaf"
/* 000006D0 */ "\x3e\xbe\x27\x43\x8e\x4a\xf2\x60\xeb\x2b\x4d\x11\x9a\xe1\xd7\x59"
/* 000006E0 */ "\x78\x29\x26\x3e\x9b\xda\x61\x15\xab\xe8\x6f\x81\x73\xac\x9f\x43"
/* 000006F0 */ "\xc6\xb1\x81\x73\x36\x4a\x1e\x57\x2b\xd9\x7a\x06\x4f\xb6\x37\x11"
/* 00000700 */ "\xe6\xc6\x90\x41\xa4\xa6\xb7\x3a\x7e\xc9\xce\x50\x2f\x8c\x07\xdb"
/* 00000710 */ "\x9a\x19\x38\x51\x35\x50\xf3\x09\x33\x20\x62\x36\xa8\x6c\x8e\xf2"
/* 00000720 */ "\x56\x8c\x82\xd3\xfa\x16\xb5\x3d\x74\x28\xdc\x2a\xe5\xae\xab\x77"
/* 00000730 */ "\xe5\x22\x3d\x69\x92\xb8\x56\xc5\x06\x6b\x8b\xda\x46\x18\xaf\x93"
/* 00000740 */ "\xa2\x0c\xb5\xd3\xd6\x94\x4a\x29\xfd\x4b\x48\x48\xa1\x73\xbc\xde"
/* 00000750 */ "\xcb\x3a\x35\x27\xd5\x40\x3a\x1d\x5b\xe3\x62\xa5\x22\xa2\x7b\xb5"
/* 00000760 */ "\x6a\xf0\x5e\x0a\x96\x5c\xe8\x3b\x41\x58\xa1\xd5\x11\x2c\x36\x9e"
/* 00000770 */ "\xe5\x2b\xc9\xfb\x1b\x37\xd0\x8e\xcf\xc2\x01\x6f\xb6\x21\x96\x9c"
/* 00000780 */ "\x14\x2f\x76\x19\xb0\x6a\x9d\xef\x69\xfd\xd0\x03\xd9\xeb\xb7\x86"
/* 00000790 */ "\x76\x20\xd3\x20\x6a\xd8\xcb\xc8\x9e\xb7\x82\x28\xb2\x25\xa7\xa2"
/* 000007A0 */ "\x6b\xfd\x60\xb0\x11\x09\x53\x5f\x79\x6b\x72\xd7\x1b\x21\x73\xf7"
/* 000007B0 */ "\x21\xd5\x5c\xc4\xe5\x52\x82\x73\x1f\x9c\x95\xe1\x21\xbf\x12\x67"
/* 000007C0 */ "\xc9\x41\xe5\x64\xc4\xd4\xf9\xa2\x9b\x29\xdf\xe5\xa4\xf3\xb4\x69"
/* 000007D0 */ "\x6d\x2c\xb0\x42\xe3\xe6\x25\xa7\x8f\xf5\x12\x99\x8c\xbf\xbb\xd8"
/* 000007E0 */ "\xa8\x23\xdb\x8e\xec\x37\xb0\x8e\x4f\xed\x67\xaa\x3e\xf6\x24\x56"
/* 000007F0 */ "\x96\xe3\xd4\xbc\x25\x0b\x56\xed\xe8\xbf\xd6\x13\xa0\xf5\x80\x4a"
/* 00000800 */ "\xe5\xff\x85\x16\xfa\xcb\x1f"
    ;

    BStream stream(2048);
    memcpy(stream.data, indata, sizeof(indata) - 1);
    stream.end += sizeof(indata);

    uint8_t license_key[] = {};
    LIC::NewLicense_Recv lic(stream, license_key);
    BOOST_CHECK_EQUAL((uint8_t)LIC::NEW_LICENSE, (uint8_t)lic.wMsgType);
    BOOST_CHECK_EQUAL((uint8_t)3, (uint8_t)lic.bVersion);
    BOOST_CHECK_EQUAL((uint16_t)2055, (uint16_t)lic.wMsgSize);

    BOOST_CHECK_EQUAL((uint32_t)9, lic.licenseInfo.wBlobType);
    BOOST_CHECK_EQUAL((uint32_t)2031, lic.licenseInfo.wBlobLen);

//    unsigned char source[16] = {0xdb, 0xa3, 0x13, 0x30, 0x79, 0xa3, 0xcd, 0x9e, 0x48, 0xf4, 0x8f, 0x06, 0x37, 0x1b, 0x45, 0xdd};
//    unsigned char expected_target[16] = {0x00, 0x00, 0x06, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66};
//    unsigned char target[16] = {};
//    unsigned char key[16] = {};

//    RC4_KEY crypt_key;
//    RC4_set_key(&crypt_key, 16, key);
//    RC4(&crypt_key, 16, source, target);

//    printf("key    = [%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x]\n",
//        key[0], key[1], key[2], key[3], key[4], key[5], key[6], key[7], key[8],
//        key[9], key[10], key[11], key[12], key[13], key[14], key[15]);

//    printf("source = [%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x]\n",
//        source[0], source[1], source[2], source[3], source[4], source[5], source[6], source[7], source[8],
//        source[9], source[10], source[11], source[12], source[13], source[14], source[15]);

//    printf("target = [%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x]\n",
//        target[0], target[1], target[2], target[3], target[4], target[5], target[6], target[7], target[8],
//        target[9], target[10], target[11], target[12], target[13], target[14], target[15]);

//    printf("expected_target = [%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x]\n",
//        expected_target[0], expected_target[1], expected_target[2], expected_target[3],
//        expected_target[4], expected_target[5], expected_target[6], expected_target[7],
//        expected_target[8], expected_target[9], expected_target[10], expected_target[11],
//        expected_target[12], expected_target[13], expected_target[14], expected_target[15]);

//    BOOST_CHECK_EQUAL((uint32_t)2031, (lic.licenseInfo.dwVersion >> 16) & 0xFFFF); // major
//    BOOST_CHECK_EQUAL((uint32_t)9, lic.licenseInfo.dwVersion & 0xFFFF);         // minor
//    BOOST_CHECK_EQUAL((uint32_t)0, lic.licenseInfo.cbScope);
//    BOOST_CHECK_EQUAL(0, memcmp("", lic.licenseInfo.pbScope, lic.licenseInfo.cbScope));
//    BOOST_CHECK_EQUAL((uint32_t)0, lic.licenseInfo.cbCompanyName);
//    BOOST_CHECK_EQUAL(0, memcmp("", lic.licenseInfo.pbCompanyName, lic.licenseInfo.cbCompanyName));
//    BOOST_CHECK_EQUAL((uint32_t)0, lic.licenseInfo.cbProductId);
//    BOOST_CHECK_EQUAL(0, memcmp("", lic.licenseInfo.pbProductId, lic.licenseInfo.cbProductId));
//    BOOST_CHECK_EQUAL((uint32_t)0, lic.licenseInfo.cbLicenseInfo);
//    BOOST_CHECK_EQUAL(0, memcmp("", lic.licenseInfo.pbLicenseInfo, lic.licenseInfo.cbLicenseInfo));
}


