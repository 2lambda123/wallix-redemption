#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; tab-width 4; indent-width 4; replace-tabs on; eol unix;

import socket
import argparse
import os


#Entry data
host      = "127.0.0.1"
localhost = "127.0.1.1"
port      = 1344
file_path = ""


#Parsing
parser = argparse.ArgumentParser(description='Parameters for icap_client:')

parser.add_argument('--file', '-f', dest='file_path', type=str, required=True,
                    help='set file path to scan ')
parser.add_argument('--host', '-s', dest='host', type=str, required=False,
                    help='set host')
parser.add_argument('--local', '-l', dest='localhost', type=str, required=False,
                    help='set localhost')

args = parser.parse_args()

if args.host:
    host = args.host
if args.localhost:
    localhost = args.localhost


#Get file data
file_path = args.file_path
file_path_list = file_path.split("/")
filename  = file_path_list[len(file_path_list)-1]
req_body = len(localhost) + len(filename) + 102
f = open(file_path, "rb")
size_to_read = os.path.getsize(file_path)
#if size_to_read > 1024:
#   size_to_read = 1024



#Socket connection
socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.connect((host, port))
print "Connection on {}".format(host+":"+str(port))


#Write request
httpRequest   = "GET http://"+localhost+"/"+filename+" HTTP/1.1\r\n"
httpRequest  += "Host: "+localhost+"\r\n" 
httpRequest  += "\r\n"

httpResponse  = "HTTP/1.1 200 OK\r\n"
httpResponse += "Transfer-Encoding: chunked\r\n"
httpResponse += "Content-Length: "+str(size_to_read)+"\r\n"
httpResponse += "\r\n"

icapRequest   = "RESPMOD icap://"+host+":"+str(port)+"/avscan ICAP/1.0\r\n"
icapRequest  += "Allow: 204\r\n"   
icapRequest  += "Connection: close\r\n"
icapRequest  += "Host: "+host+"\r\n"
icapRequest  += "Encapsulated: req-hdr=0, res-hdr="+str(len(httpRequest))+", res-body="+str(len(httpRequest) + (len(httpResponse)))+"\r\n" # 
icapRequest  += "\r\n"

request = icapRequest + httpRequest + httpResponse

print ""
print "send:"
request_lines = request.split("\r\n");
for line in request_lines:
    print("    "+line)
print ""


#Send request and chunk
socket.send(request.encode("utf-8"))

if size_to_read < 4096:
    size_to_read = 4096

content    = b""
chunklen   = "400\r\n"
chunk_end  = "\r\n\r\n0\r\n\r\n"

while size_to_read > 1024:
    size_to_read -= 1024
    content = f.read(1024)
    socket.send(chunklen+content+"\r\n")

endchunklen = str(hex(size_to_read).split('x')[-1])+"\r\n"
content = b""
content = f.read(size_to_read)
socket.send(endchunklen+content+"\r\n")

socket.send(chunk_end.encode("utf-8"))


# Receive response
msg_recu = b""
response = b""
step = 0

while msg_recu != b"0\r\n\r\n" and step < 50:
    msg_recu = socket.recv(1024)
    step += 1

    if msg_recu != b"":    
       response += msg_recu

if response:
    print("rcv:")
    response_lines = response.split("\r\n");
    for line in response_lines:
        print("    "+line)

#Socket disconnection
print "Close connection to {}".format(host+":"+str(port))
socket.close()


