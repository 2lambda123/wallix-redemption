#!/usr/bin/python
# -*- coding: utf-8 -*-
# kate: space-indent on; tab-width 4; indent-width 4; replace-tabs on; eol unix;

import socket
import argparse


#Entry data
host      = "127.0.0.1"
localhost = "127.0.0.1"
port      = 1344
file_path = ""


#Parsing
parser = argparse.ArgumentParser(description='Parameters for icap_client:')

parser.add_argument('--file', '-f', dest='file_path', type=str, required=True,
                    help='set file path to scan ')
parser.add_argument('--host', '-s', dest='host', type=str, required=False,
                    help='set host')
parser.add_argument('--local', '-l', dest='localhost', type=str, required=False,
                    help='set localhost')

args = parser.parse_args()

if args.host:
    host = args.host
if args.localhost:
    localhost = args.localhost


#Get file data
file_path = args.file_path
file_path_list = file_path.split("/")
filename  = file_path_list[len(file_path_list)-1]
req_body = len(localhost) + len(filename) + 103
f = open(file_path, "rb")
content = b""
content = f.read(128)


#Socket connection
socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.connect((host, port))
print "Connection on {}".format(host+":"+str(port))


#Write request
head_line = "REQMOD icap://"+host+":"+str(port)+"/avscan ICAP/1.0\r\n" 
Host_line = "Host: "+host+":"+str(port)+"\r\n"
Conn_line = "Connection: close\r\n"
encp_line = "Encapsulated: req-hdr=0, req-body="+str(req_body)+"\r\n\r\n"

POST_line = "POST "+filename+" HTTP/1.1\r\n"
loch_line = "Host: "+localhost+"\r\n"
acpt_line = "Accept: text/html, text/plain\r\n"
AEnc_line = "Accept-Encoding: compress\r\n"
prag_line = "Pragma: no-cache\r\n\r\n"

chuk_line = "80\r\n\r\n"

request = head_line + Host_line + Conn_line + encp_line + POST_line + loch_line + acpt_line + AEnc_line + prag_line + chuk_line + content + "\r\n\r\n0\r\n\r\n"

print ""
print "send:"
request_lines = request.split("\r\n");
for line in request_lines:
    print("    "+line)
print ""


#Send request and receive response
socket.send(request.encode("utf-8"))

msg_recu = b""
response = b""
step = 0

while msg_recu != b"0\r\n\r\n" and step < 5:

    msg_recu = socket.recv(1024)
    step += 1
    
    if msg_recu != b"":
        response += msg_recu

if response:
    print("rcv:")
    response_lines = response.split("\r\n");
    for line in response_lines:
        print("    "+line)

#Disconnection
print "Close connection to {}".format(host+":"+str(port))
socket.close()


