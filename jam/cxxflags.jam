# https://boostorg.github.io/build/manual/develop/index.html

REDEMPTION_CXXFLAGS +=
    <cxxflags>-std=c++17
    <cxxflags>-msse3

    <cxx-linker-default>gold
    <cxx-color-default>always
    <variant>debug:<cxx-stl-debug-default>allow-broken-abi

    <toolset>clang:<cxxflags>-Wno-overlength-strings
    <toolset>clang:<cxxflags>-Wno-disabled-macro-expansion
    <toolset>clang:<cxxflags>-Wno-documentation-unknown-command

    <cxxflags>-Werror=return-type
    <toolset>gcc:<cxxflags>-Werror=suggest-override

    <define>_FILE_OFFSET_BITS=64
    <define>_LARGEFILE64_SOURCE

    <conditional>@flags
;

# ./compiler-options.lua -f -stl_fix,exceptions,sanitizers_extra,pie,rtti,coverage generators/bjam.lua cxx- >> cxxflags.jam
# remove:
#   else if $(toolset) = msvc
# replace:
#   cxx_flags by flags
#
# https://boostorg.github.io/build/manual/develop/index.html

import feature : feature ;
import modules ;

CXX_BJAM_YEAR_VERSION = [ modules.peek : JAMVERSION ] ;

feature <cxx-color> : _ default auto never always : propagated ;
feature <cxx-control-flow> : _ default off on : incidental ;
feature <cxx-cpu> : _ default generic native : incidental ;
feature <cxx-debug> : _ default off on line-tables-only gdb lldb sce : incidental ;
feature <cxx-diagnostics-format> : _ default fixits patch print-source-range-info : propagated ;
feature <cxx-diagnostics-show-template-tree> : _ default off on : propagated ;
feature <cxx-elide-type> : _ default off on : propagated ;
feature <cxx-linker> : _ default bfd gold lld : propagated ;
feature <cxx-lto> : _ default off on fat linker-plugin : incidental ;
feature <cxx-narrowing-error> : _ on default off : incidental ;
feature <cxx-optimize> : _ default off debugoptimized minsize release fast : incidental ;
feature <cxx-pedantic> : _ on default off as-error : incidental ;
feature <cxx-relro> : _ default off on full : incidental ;
feature <cxx-reproducible-build-warnings> : _ default off on : propagated ;
feature <cxx-sanitizers> : _ default off on : incidental ;
feature <cxx-shadow-warnings> : _ off default on local compatible-local all : propagated ;
feature <cxx-stack-protector> : _ default off on strong all : incidental ;
feature <cxx-stl-debug> : _ default off on allow-broken-abi assert-as-exception : incidental ;
feature <cxx-suggests> : _ default off on : propagated ;
feature <cxx-warnings> : _ on default off strict very-strict : propagated ;
feature <cxx-whole-program> : _ default off on strip-all : incidental ;

feature <cxx-control-flow-incidental> : _ default off on : incidental ;
feature <cxx-cpu-incidental> : _ default generic native : incidental ;
feature <cxx-debug-incidental> : _ default off on line-tables-only gdb lldb sce : incidental ;
feature <cxx-lto-incidental> : _ default off on fat linker-plugin : incidental ;
feature <cxx-narrowing-error-incidental> : _ on default off : incidental ;
feature <cxx-optimize-incidental> : _ default off debugoptimized minsize release fast : incidental ;
feature <cxx-pedantic-incidental> : _ on default off as-error : incidental ;
feature <cxx-relro-incidental> : _ default off on full : incidental ;
feature <cxx-sanitizers-incidental> : _ default off on : incidental ;
feature <cxx-stack-protector-incidental> : _ default off on strong all : incidental ;
feature <cxx-stl-debug-incidental> : _ default off on allow-broken-abi assert-as-exception : incidental ;
feature <cxx-whole-program-incidental> : _ default off on strip-all : incidental ;

feature <cxx-color-default> : default auto never always : incidental ;
feature <cxx-control-flow-default> : default off on : incidental ;
feature <cxx-cpu-default> : default generic native : incidental ;
feature <cxx-debug-default> : default off on line-tables-only gdb lldb sce : incidental ;
feature <cxx-diagnostics-format-default> : default fixits patch print-source-range-info : incidental ;
feature <cxx-diagnostics-show-template-tree-default> : default off on : incidental ;
feature <cxx-elide-type-default> : default off on : incidental ;
feature <cxx-linker-default> : default bfd gold lld : incidental ;
feature <cxx-lto-default> : default off on fat linker-plugin : incidental ;
feature <cxx-narrowing-error-default> : on default off : incidental ;
feature <cxx-optimize-default> : default off debugoptimized minsize release fast : incidental ;
feature <cxx-pedantic-default> : on default off as-error : incidental ;
feature <cxx-relro-default> : default off on full : incidental ;
feature <cxx-reproducible-build-warnings-default> : default off on : incidental ;
feature <cxx-sanitizers-default> : default off on : incidental ;
feature <cxx-shadow-warnings-default> : off default on local compatible-local all : incidental ;
feature <cxx-stack-protector-default> : default off on strong all : incidental ;
feature <cxx-stl-debug-default> : default off on allow-broken-abi assert-as-exception : incidental ;
feature <cxx-suggests-default> : default off on : incidental ;
feature <cxx-warnings-default> : on default off strict very-strict : incidental ;
feature <cxx-whole-program-default> : default off on strip-all : incidental ;


import os ;

rule jln-get-env ( env : values * )
{
  local x = [ os.environ $(env) ] ;
  if $(x)
  {
    if $(x) in $(values)
    {
      return $(x) ;
    }
    else
    {
      EXIT "Unknown '$(x)' for $(env)" : 7 ;
    }
  }
  else
  {
    return "" ;
  }
}

constant jln_env_color : [ jln-get-env cxx_color : default auto never always ] ;
constant jln_env_control_flow : [ jln-get-env cxx_control_flow : default off on ] ;
constant jln_env_cpu : [ jln-get-env cxx_cpu : default generic native ] ;
constant jln_env_debug : [ jln-get-env cxx_debug : default off on line-tables-only gdb lldb sce ] ;
constant jln_env_diagnostics_format : [ jln-get-env cxx_diagnostics_format : default fixits patch print-source-range-info ] ;
constant jln_env_diagnostics_show_template_tree : [ jln-get-env cxx_diagnostics_show_template_tree : default off on ] ;
constant jln_env_elide_type : [ jln-get-env cxx_elide_type : default off on ] ;
constant jln_env_linker : [ jln-get-env cxx_linker : default bfd gold lld ] ;
constant jln_env_lto : [ jln-get-env cxx_lto : default off on fat linker-plugin ] ;
constant jln_env_narrowing_error : [ jln-get-env cxx_narrowing_error : on default off ] ;
constant jln_env_optimize : [ jln-get-env cxx_optimize : default off debugoptimized minsize release fast ] ;
constant jln_env_pedantic : [ jln-get-env cxx_pedantic : on default off as-error ] ;
constant jln_env_relro : [ jln-get-env cxx_relro : default off on full ] ;
constant jln_env_reproducible_build_warnings : [ jln-get-env cxx_reproducible_build_warnings : default off on ] ;
constant jln_env_sanitizers : [ jln-get-env cxx_sanitizers : default off on ] ;
constant jln_env_shadow_warnings : [ jln-get-env cxx_shadow_warnings : off default on local compatible-local all ] ;
constant jln_env_stack_protector : [ jln-get-env cxx_stack_protector : default off on strong all ] ;
constant jln_env_stl_debug : [ jln-get-env cxx_stl_debug : default off on allow-broken-abi assert-as-exception ] ;
constant jln_env_suggests : [ jln-get-env cxx_suggests : default off on ] ;
constant jln_env_warnings : [ jln-get-env cxx_warnings : on default off strict very-strict ] ;
constant jln_env_whole_program : [ jln-get-env cxx_whole_program : default off on strip-all ] ;

if $(CXX_BJAM_YEAR_VERSION) < 2016.00
{
  import toolset ;
  toolset.flags cxx-control-flow CXX_CONTROL_FLOW : <cxx-control-flow> ;
  toolset.flags cxx-control-flow-incidental CXX_CONTROL_FLOW_INCIDENTAL : <cxx-control-flow-incidental> ;
  toolset.flags cxx-cpu CXX_CPU : <cxx-cpu> ;
  toolset.flags cxx-cpu-incidental CXX_CPU_INCIDENTAL : <cxx-cpu-incidental> ;
  toolset.flags cxx-debug CXX_DEBUG : <cxx-debug> ;
  toolset.flags cxx-debug-incidental CXX_DEBUG_INCIDENTAL : <cxx-debug-incidental> ;
  toolset.flags cxx-lto CXX_LTO : <cxx-lto> ;
  toolset.flags cxx-lto-incidental CXX_LTO_INCIDENTAL : <cxx-lto-incidental> ;
  toolset.flags cxx-narrowing-error CXX_NARROWING_ERROR : <cxx-narrowing-error> ;
  toolset.flags cxx-narrowing-error-incidental CXX_NARROWING_ERROR_INCIDENTAL : <cxx-narrowing-error-incidental> ;
  toolset.flags cxx-optimize CXX_OPTIMIZE : <cxx-optimize> ;
  toolset.flags cxx-optimize-incidental CXX_OPTIMIZE_INCIDENTAL : <cxx-optimize-incidental> ;
  toolset.flags cxx-pedantic CXX_PEDANTIC : <cxx-pedantic> ;
  toolset.flags cxx-pedantic-incidental CXX_PEDANTIC_INCIDENTAL : <cxx-pedantic-incidental> ;
  toolset.flags cxx-relro CXX_RELRO : <cxx-relro> ;
  toolset.flags cxx-relro-incidental CXX_RELRO_INCIDENTAL : <cxx-relro-incidental> ;
  toolset.flags cxx-sanitizers CXX_SANITIZERS : <cxx-sanitizers> ;
  toolset.flags cxx-sanitizers-incidental CXX_SANITIZERS_INCIDENTAL : <cxx-sanitizers-incidental> ;
  toolset.flags cxx-stack-protector CXX_STACK_PROTECTOR : <cxx-stack-protector> ;
  toolset.flags cxx-stack-protector-incidental CXX_STACK_PROTECTOR_INCIDENTAL : <cxx-stack-protector-incidental> ;
  toolset.flags cxx-stl-debug CXX_STL_DEBUG : <cxx-stl-debug> ;
  toolset.flags cxx-stl-debug-incidental CXX_STL_DEBUG_INCIDENTAL : <cxx-stl-debug-incidental> ;
  toolset.flags cxx-whole-program CXX_WHOLE_PROGRAM : <cxx-whole-program> ;
  toolset.flags cxx-whole-program-incidental CXX_WHOLE_PROGRAM_INCIDENTAL : <cxx-whole-program-incidental> ;

}
import property-set ;
import string ;

local ORIGINAL_TOOLSET = 0 ;
local COMP_VERSION = 00.00 ;

rule jln-get-normalized-compiler-version ( toolset : version )
{
  # TODO `version` is not the real version. For toolset=gcc-5, version is 5 ; for clang-scan, version is ''
  # define PP_CAT_I(a,b) a##b
  # define PP_CAT(a,b) PP_CAT_I(a,b)
  # g++ -x c++ -E - <<<'PP_CAT(__GNUC__, PP_CAT(__GNUC_MINOR__, __GNUC_PATCHLEVEL__))'
  # clang++ -x c++ -E - <<<'PP_CAT(__clang_major__, PP_CAT(__clang_minor__, __clang_patchlevel__))'
  if $(ORIGINAL_TOOLSET) != $(toolset)
  {
    local version = [ MATCH "^[^0-9]*(.*)$" : $(version) ] ;
    if ! $(version) {
      # if $(toolset) = gcc {
      #   version = [ SHELL "$(toolset) -dumpfullversion" ] ;
      # }
      # else {
        version = [ MATCH ".*(\\d+\\.\\d+\\.\\d+).*" : [ SHELL "$(toolset) --version" ] ] ;
      # }
    }
    local match = [ MATCH "^([0-9]+)(\\.([0-9]+))?" : $(version) ] ;
    local major = [ MATCH "(..)$" : [ string.join 00 $(match[1]) ] ] ;
    local minor = [ MATCH "(..)$" : [ string.join 00 $(match[3]) ] ] ;
    COMP_VERSION = $(major).$(minor) ;
    ORIGINAL_TOOLSET = $(toolset) ;
  }
  return $(COMP_VERSION) ;
}

rule jln-get-value ( ps : opt : env )
{
  local x = [ $(ps).get <$(opt)> ] ;
  if $(x) = "_"
  {
    x = $(env) ;
    if $(x) = ""
    {
      x = [ $(ps).get <$(opt)-default> ] ;
    }
  }
  return $(x) ;
}

rule jln-get-value2 ( ps : opt : iopt : env )
{
  local x = [ $(ps).get <$(opt)> ] ;
  if $(x) = "_"
  {
    x = [ $(ps).get <$(iopt)> ] ;
    if $(x) = "_"
    {
      x = $(env) ;
      if $(x) = ""
      {
        x = [ $(ps).get <$(opt)-default> ] ;
      }
    }
  }
  return $(x) ;
}

rule flags ( properties * )
{
  local ps = [ property-set.create $(properties) ] ;
  local toolset = [ $(ps).get <toolset> ] ;
  local version = [ jln-get-normalized-compiler-version $(toolset)
                  : [ $(ps).get <toolset-$(toolset):version> ] ] ;

  local flags = ;
  if $(CXX_BJAM_YEAR_VERSION) >= 2016.00
  {
    flags += 
      <relevant>cxx-control-flow
      <relevant>cxx-cpu
      <relevant>cxx-debug
      <relevant>cxx-lto
      <relevant>cxx-narrowing-error
      <relevant>cxx-optimize
      <relevant>cxx-pedantic
      <relevant>cxx-relro
      <relevant>cxx-sanitizers
      <relevant>cxx-stack-protector
      <relevant>cxx-stl-debug
      <relevant>cxx-whole-program
    ;
  }

  local x_color = [ jln-get-value $(ps) : cxx-color : $(jln_env_color) ] ;
  local x_control_flow = [ jln-get-value2 $(ps) : cxx-control-flow : cxx-control-flow-incidental : $(jln_env_control_flow) ] ;
  local x_cpu = [ jln-get-value2 $(ps) : cxx-cpu : cxx-cpu-incidental : $(jln_env_cpu) ] ;
  local x_debug = [ jln-get-value2 $(ps) : cxx-debug : cxx-debug-incidental : $(jln_env_debug) ] ;
  local x_diagnostics_format = [ jln-get-value $(ps) : cxx-diagnostics-format : $(jln_env_diagnostics_format) ] ;
  local x_diagnostics_show_template_tree = [ jln-get-value $(ps) : cxx-diagnostics-show-template-tree : $(jln_env_diagnostics_show_template_tree) ] ;
  local x_elide_type = [ jln-get-value $(ps) : cxx-elide-type : $(jln_env_elide_type) ] ;
  local x_linker = [ jln-get-value $(ps) : cxx-linker : $(jln_env_linker) ] ;
  local x_lto = [ jln-get-value2 $(ps) : cxx-lto : cxx-lto-incidental : $(jln_env_lto) ] ;
  local x_narrowing_error = [ jln-get-value2 $(ps) : cxx-narrowing-error : cxx-narrowing-error-incidental : $(jln_env_narrowing_error) ] ;
  local x_optimize = [ jln-get-value2 $(ps) : cxx-optimize : cxx-optimize-incidental : $(jln_env_optimize) ] ;
  local x_pedantic = [ jln-get-value2 $(ps) : cxx-pedantic : cxx-pedantic-incidental : $(jln_env_pedantic) ] ;
  local x_relro = [ jln-get-value2 $(ps) : cxx-relro : cxx-relro-incidental : $(jln_env_relro) ] ;
  local x_reproducible_build_warnings = [ jln-get-value $(ps) : cxx-reproducible-build-warnings : $(jln_env_reproducible_build_warnings) ] ;
  local x_sanitizers = [ jln-get-value2 $(ps) : cxx-sanitizers : cxx-sanitizers-incidental : $(jln_env_sanitizers) ] ;
  local x_shadow_warnings = [ jln-get-value $(ps) : cxx-shadow-warnings : $(jln_env_shadow_warnings) ] ;
  local x_stack_protector = [ jln-get-value2 $(ps) : cxx-stack-protector : cxx-stack-protector-incidental : $(jln_env_stack_protector) ] ;
  local x_stl_debug = [ jln-get-value2 $(ps) : cxx-stl-debug : cxx-stl-debug-incidental : $(jln_env_stl_debug) ] ;
  local x_suggests = [ jln-get-value $(ps) : cxx-suggests : $(jln_env_suggests) ] ;
  local x_warnings = [ jln-get-value $(ps) : cxx-warnings : $(jln_env_warnings) ] ;
  local x_whole_program = [ jln-get-value2 $(ps) : cxx-whole-program : cxx-whole-program-incidental : $(jln_env_whole_program) ] ;

  if (  $(toolset) = "gcc" || $(toolset) = "clang"  )
  {
    if ( $(x_narrowing_error) != "default" )
    {
      if ( $(x_narrowing_error) = "on" )
      {
        if (  $(toolset) = "gcc" && ! (  $(version) < "04.07"  )  )
        {
          flags +=
            <cxxflags>"-Werror=narrowing"
          ;
        }
      }
      else if $(toolset) = "clang"
      {
        flags +=
          <cxxflags>"-Wno-error=c++11-narrowing"
        ;
      }
    }
    if ( $(x_debug) != "default" )
    {
      if ( $(x_debug) = "off" )
      {
        flags +=
          <cxxflags>"-g0"
        ;
      }
      else if ( $(x_debug) = "gdb" )
      {
        flags +=
          <cxxflags>"-ggdb"
        ;
      }
      else if $(toolset) = "clang"
      {
        if ( $(x_debug) = "line-tables-only" )
        {
          flags +=
            <cxxflags>"-gline-tables-only"
          ;
        }
        if ( $(x_debug) = "lldb" )
        {
          flags +=
            <cxxflags>"-glldb"
          ;
        }
        else if ( $(x_debug) = "sce" )
        {
          flags +=
            <cxxflags>"-gsce"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-g"
          ;
        }
      }
      else
      {
        flags +=
          <cxxflags>"-g"
        ;
      }
    }
    if ( $(x_linker) != "default" )
    {
      if ( $(x_linker) = "bfd" )
      {
        flags +=
          <linkflags>"-fuse-ld=bfd"
        ;
      }
      else if (  ( $(x_linker) = "gold" ) || $(toolset) = "gcc"  )
      {
        flags +=
          <linkflags>"-fuse-ld=gold"
        ;
      }
      else
      {
        flags +=
          <linkflags>"-fuse-ld=lld"
        ;
      }
    }
    if ( $(x_lto) != "default" )
    {
      if ( $(x_lto) = "off" )
      {
        flags +=
          <cxxflags>"-fno-lto"
          <linkflags>"-fno-lto"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-flto"
          <linkflags>"-flto"
        ;
        if (  $(toolset) = "gcc" && ! (  $(version) < "05.00"  )  )
        {
          if ( $(x_warnings) != "default" )
          {
            if ! ( $(x_warnings) = "off" )
            {
              flags +=
                <cxxflags>"-flto-odr-type-merging"
                <linkflags>"-flto-odr-type-merging"
              ;
            }
          }
          if ( $(x_lto) = "fat" )
          {
            flags +=
              <cxxflags>"-ffat-lto-objects"
            ;
          }
          if ( $(x_lto) = "linker-plugin" )
          {
            flags +=
              <linkflags>"-fuse-linker-plugin"
            ;
          }
        }
      }
    }
    if ( $(x_optimize) != "default" )
    {
      if ( $(x_optimize) = "off" )
      {
        flags +=
          <cxxflags>"-O0"
          <linkflags>"-O0"
        ;
      }
      else if ( $(x_optimize) = "debugoptimized" )
      {
        flags +=
          <cxxflags>"-Og"
          <linkflags>"-Og"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-DNDEBUG"
        ;
        if ( $(x_optimize) = "minsize" )
        {
          flags +=
            <cxxflags>"-Os"
            <linkflags>"-Os"
          ;
        }
        else if ( $(x_optimize) = "fast" )
        {
          flags +=
            <cxxflags>"-Ofast"
            <linkflags>"-Ofast"
          ;
        }
        else if ( $(x_optimize) = "release" )
        {
          flags +=
            <cxxflags>"-O3"
            <linkflags>"-O3"
          ;
        }
      }
    }
    if ( $(x_cpu) != "default" )
    {
      if ( $(x_cpu) = "generic" )
      {
        flags +=
          <cxxflags>"-mtune=generic"
          <linkflags>"-mtune=generic"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-march=native"
          <cxxflags>"-mtune=native"
          <linkflags>"-march=native"
          <linkflags>"-mtune=native"
        ;
      }
    }
    if ( $(x_whole_program) != "default" )
    {
      if ( $(x_whole_program) = "off" )
      {
        flags +=
          <cxxflags>"-fno-whole-program"
        ;
        if (  $(toolset) = "clang" && ! (  $(version) < "03.09"  )  )
        {
          flags +=
            <cxxflags>"-fno-whole-program-vtables"
            <linkflags>"-fno-whole-program-vtables"
          ;
        }
      }
      else
      {
        flags +=
          <linkflags>"-s"
        ;
        if ( $(x_whole_program) = "strip-all" )
        {
          flags +=
            <linkflags>"-Wl,--gc-sections"
            <linkflags>"-Wl,--strip-all"
          ;
        }
        if $(toolset) = "gcc"
        {
          flags +=
            <cxxflags>"-fwhole-program"
            <linkflags>"-fwhole-program"
          ;
        }
        else
        {
          if (  $(toolset) = "clang" && ! (  $(version) < "03.09"  )  )
          {
            if ( $(x_lto) != "default" )
            {
              if ! ( $(x_lto) = "off" )
              {
                flags +=
                  <cxxflags>"-fwhole-program-vtables"
                  <linkflags>"-fwhole-program-vtables"
                ;
              }
            }
            if ! (  $(version) < "07.00"  )
            {
              flags +=
                <cxxflags>"-fforce-emit-vtables"
                <linkflags>"-fforce-emit-vtables"
              ;
            }
          }
        }
      }
    }
    if ( $(x_pedantic) != "default" )
    {
      if ! ( $(x_pedantic) = "off" )
      {
        flags +=
          <cxxflags>"-pedantic"
        ;
        if ( $(x_pedantic) = "as-error" )
        {
          flags +=
            <cxxflags>"-pedantic-errors"
          ;
        }
      }
    }
    if ( $(x_stack_protector) != "default" )
    {
      if ( $(x_stack_protector) = "off" )
      {
        flags +=
          <cxxflags>"-Wno-stack-protector"
          <cxxflags>"-U_FORTIFY_SOURCE"
          <linkflags>"-Wno-stack-protector"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-D_FORTIFY_SOURCE=2"
          <cxxflags>"-Wstack-protector"
        ;
        if ( $(x_stack_protector) = "strong" )
        {
          if (  $(toolset) = "gcc" && ! (  $(version) < "04.09"  )  )
          {
            flags +=
              <cxxflags>"-fstack-protector-strong"
              <linkflags>"-fstack-protector-strong"
            ;
          }
          else if $(toolset) = "clang"
          {
            flags +=
              <cxxflags>"-fstack-protector-strong"
              <cxxflags>"-fsanitize=safe-stack"
              <linkflags>"-fstack-protector-strong"
              <linkflags>"-fsanitize=safe-stack"
            ;
          }
        }
        else if ( $(x_stack_protector) = "all" )
        {
          flags +=
            <cxxflags>"-fstack-protector-all"
            <linkflags>"-fstack-protector-all"
          ;
          if $(toolset) = "clang"
          {
            flags +=
              <cxxflags>"-fsanitize=safe-stack"
              <linkflags>"-fsanitize=safe-stack"
            ;
          }
        }
        else
        {
          flags +=
            <cxxflags>"-fstack-protector"
            <linkflags>"-fstack-protector"
          ;
        }
      }
    }
    if ( $(x_relro) != "default" )
    {
      if ( $(x_relro) = "off" )
      {
        flags +=
          <linkflags>"-Wl,-z,norelro"
        ;
      }
      else if ( $(x_relro) = "on" )
      {
        flags +=
          <linkflags>"-Wl,-z,relro"
        ;
      }
      else if ( $(x_relro) = "full" )
      {
        flags +=
          <linkflags>"-Wl,-z,relro,-z,now"
        ;
      }
    }
    if ( $(x_suggests) != "default" )
    {
      if ! ( $(x_suggests) = "off" )
      {
        if $(toolset) = "gcc"
        {
          flags +=
            <cxxflags>"-Wsuggest-attribute=pure"
            <cxxflags>"-Wsuggest-attribute=const"
          ;
          if ! (  $(version) < "05.00"  )
          {
            flags +=
              <cxxflags>"-Wsuggest-final-types"
              <cxxflags>"-Wsuggest-final-methods"
            ;
            if ! (  $(version) < "05.01"  )
            {
              flags +=
                <cxxflags>"-Wnoexcept"
              ;
            }
          }
        }
      }
    }
    if ( $(x_stl_debug) != "default" )
    {
      if ! ( $(x_stl_debug) = "off" )
      {
        # flags +=
        #   <cxxflags>"-D_LIBCPP_DEBUG=1"
        # ;
        if ( $(x_stl_debug) = "assert-as-exception" )
        {
          flags +=
            <cxxflags>"-D_LIBCPP_DEBUG_USE_EXCEPTIONS"
          ;
        }
        if ( $(x_stl_debug) = "allow-broken-abi" )
        {
          flags +=
            <cxxflags>"-D_GLIBCXX_DEBUG"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-D_GLIBCXX_ASSERTIONS"
          ;
        }
        if ( $(x_pedantic) != "default" )
        {
          if ! ( $(x_pedantic) = "off" )
          {
            flags +=
              <cxxflags>"-D_GLIBCXX_DEBUG_PEDANTIC"
            ;
          }
        }
      }
    }
    if ( $(x_shadow_warnings) != "default" )
    {
      if ( $(x_shadow_warnings) = "off" )
      {
        flags +=
          <cxxflags>"-Wno-shadow"
        ;
      }
      else if ( $(x_shadow_warnings) = "on" )
      {
        flags +=
          <cxxflags>"-Wshadow"
        ;
      }
      else if ( $(x_shadow_warnings) = "all" )
      {
        if $(toolset) = "clang"
        {
          flags +=
            <cxxflags>"-Wshadow-all"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wshadow"
          ;
        }
      }
      else if (  $(toolset) = "gcc" && ! (  $(version) < "07.01"  )  )
      {
        if ( $(x_shadow_warnings) = "local" )
        {
          flags +=
            <cxxflags>"-Wshadow=local"
          ;
        }
        else if ( $(x_shadow_warnings) = "compatible-local" )
        {
          flags +=
            <cxxflags>"-Wshadow=compatible-local"
          ;
        }
      }
    }
    if ( $(x_warnings) != "default" )
    {
      if ( $(x_warnings) = "off" )
      {
        flags +=
          <cxxflags>"-w"
        ;
      }
      else
      {
        if $(toolset) = "gcc"
        {
          flags +=
            <cxxflags>"-Wall"
            <cxxflags>"-Wextra"
            <cxxflags>"-Wcast-align"
            <cxxflags>"-Wcast-qual"
            <cxxflags>"-Wdisabled-optimization"
            <cxxflags>"-Wfloat-equal"
            <cxxflags>"-Wformat-security"
            <cxxflags>"-Wformat=2"
            <cxxflags>"-Wmissing-declarations"
            <cxxflags>"-Wmissing-include-dirs"
            <cxxflags>"-Wnon-virtual-dtor"
            <cxxflags>"-Wold-style-cast"
            <cxxflags>"-Woverloaded-virtual"
            <cxxflags>"-Wpacked"
            <cxxflags>"-Wredundant-decls"
            <cxxflags>"-Wundef"
            <cxxflags>"-Wunused-macros"
          ;
          if ! (  $(version) < "04.07"  )
          {
            flags +=
              <cxxflags>"-Wsuggest-attribute=noreturn"
              <cxxflags>"-Wzero-as-null-pointer-constant"
              <cxxflags>"-Wlogical-op"
              <cxxflags>"-Wvector-operation-performance"
              <cxxflags>"-Wdouble-promotion"
              <cxxflags>"-Wtrampolines"
            ;
            if ! (  $(version) < "04.08"  )
            {
              flags +=
                <cxxflags>"-Wuseless-cast"
              ;
              if ! (  $(version) < "04.09"  )
              {
                flags +=
                  <cxxflags>"-Wconditionally-supported"
                  <cxxflags>"-Wfloat-conversion"
                ;
                if ! (  $(version) < "05.01"  )
                {
                  flags +=
                    <cxxflags>"-Wformat-signedness"
                    <cxxflags>"-Warray-bounds=2"
                    <cxxflags>"-Wconditionally-supported"
                    <cxxflags>"-Wstrict-null-sentinel"
                    <cxxflags>"-Wsuggest-override"
                  ;
                  if ! (  $(version) < "06.01"  )
                  {
                    flags +=
                      <cxxflags>"-Wduplicated-cond"
                      <cxxflags>"-Wnull-dereference"
                    ;
                    if ! (  $(version) < "07.00"  )
                    {
                      flags +=
                        <cxxflags>"-Waligned-new"
                      ;
                      if ! (  $(version) < "07.01"  )
                      {
                        flags +=
                          <cxxflags>"-Walloc-zero"
                          <cxxflags>"-Walloca"
                          <cxxflags>"-Wformat-overflow=2"
                          <cxxflags>"-Wduplicated-branches"
                        ;
                        if ! (  $(version) < "08.00"  )
                        {
                          flags +=
                            <cxxflags>"-Wclass-memaccess"
                          ;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else if $(toolset) = "clang"
        {
          flags +=
            <cxxflags>"-Weverything"
            <cxxflags>"-Wno-c++98-compat"
            <cxxflags>"-Wno-c++98-compat-pedantic"
            <cxxflags>"-Wno-mismatched-tags"
            <cxxflags>"-Wno-padded"
            <cxxflags>"-Wno-global-constructors"
            <cxxflags>"-Wno-weak-vtables"
            <cxxflags>"-Wno-exit-time-destructors"
            <cxxflags>"-Wno-covered-switch-default"
            <cxxflags>"-Wno-switch-default"
            <cxxflags>"-Wno-switch-enum"
          ;
          if ! (  $(version) < "03.09"  )
          {
            flags +=
              <cxxflags>"-Wno-undefined-var-template"
            ;
          }
          if ! (  $(version) < "05.00"  )
          {
            flags +=
              <cxxflags>"-Wno-inconsistent-missing-destructor-override"
            ;
          }
        }
        if (  ( $(x_warnings) = "strict" ) || ( $(x_warnings) = "very-strict" )  )
        {
          flags +=
            <cxxflags>"-Wconversion"
          ;
          if (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  )
          {
            flags +=
              <cxxflags>"-Wcast-align=strict"
            ;
          }
        }
        else if $(toolset) = "clang"
        {
          flags +=
            <cxxflags>"-Wno-conversion"
            <cxxflags>"-Wno-sign-conversion"
          ;
        }
      }
    }
    if ( $(x_sanitizers) != "default" )
    {
      if ( $(x_sanitizers) = "off" )
      {
        flags +=
          <cxxflags>"-fno-sanitize=all"
          <linkflags>"-fno-sanitize=all"
        ;
      }
      else
      {
        if $(toolset) = "clang"
        {
          if ! (  $(version) < "03.01"  )
          {
            flags +=
              <cxxflags>"-fsanitize=undefined"
              <cxxflags>"-fsanitize=address"
              <cxxflags>"-fsanitize-address-use-after-scope"
              <cxxflags>"-fno-omit-frame-pointer"
              <cxxflags>"-fno-optimize-sibling-calls"
              <linkflags>"-fsanitize=undefined"
              <linkflags>"-fsanitize=address"
            ;
            if ! (  $(version) < "03.04"  )
            {
              flags +=
                <cxxflags>"-fsanitize=leak"
                <linkflags>"-fsanitize=leak"
              ;
              if ! (  $(version) < "06.00"  )
              {
                flags +=
                  <cxxflags>"-fsanitize=bounds"
                  <linkflags>"-fsanitize=bounds"
                ;
              }
            }
          }
        }
        else
        {
          if ! (  $(version) < "04.08"  )
          {
            flags +=
              <cxxflags>"-fsanitize=address"
              <cxxflags>"-fno-omit-frame-pointer"
              <cxxflags>"-fno-optimize-sibling-calls"
              <linkflags>"-fsanitize=address"
            ;
            if ! (  $(version) < "04.09"  )
            {
              flags +=
                <cxxflags>"-fsanitize=undefined"
                <cxxflags>"-fsanitize=leak"
                <linkflags>"-fsanitize=undefined"
                <linkflags>"-fsanitize=leak"
              ;
              if ! (  $(version) < "06.00"  )
              {
                flags +=
                  <cxxflags>"-fsanitize=bounds"
                  <cxxflags>"-fsanitize=bounds-strict"
                ;
              }
            }
          }
        }
      }
    }
    if ( $(x_control_flow) != "default" )
    {
      if ( $(x_control_flow) = "off" )
      {
        if (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  )
        {
          flags +=
            <cxxflags>"-fcf-protection=none"
          ;
        }
        if $(toolset) = "clang"
        {
          flags +=
            <cxxflags>"-fno-sanitize=cfi"
            <linkflags>"-fno-sanitize=cfi"
          ;
        }
      }
      else
      {
        if (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  )
        {
          flags +=
            <cxxflags>"-fcf-protection=full"
          ;
        }
        if $(toolset) = "clang"
        {
          flags +=
            <cxxflags>"-fsanitize=cfi"
            <cxxflags>"-fvisibility=hidden"
            <cxxflags>"-flto"
            <linkflags>"-fsanitize=cfi"
            <linkflags>"-flto"
          ;
        }
      }
    }
    if ( $(x_reproducible_build_warnings) != "default" )
    {
      if (  $(toolset) = "gcc" && ! (  $(version) < "04.09"  )  )
      {
        if ( $(x_reproducible_build_warnings) = "on" )
        {
          flags +=
            <cxxflags>"-Wdate-time"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-date-time"
          ;
        }
      }
    }
    if ( $(x_color) != "default" )
    {
      if (  (  $(toolset) = "gcc" && ! (  $(version) < "04.09"  )  ) || $(toolset) = "clang"  )
      {
        if ( $(x_color) = "auto" )
        {
          flags +=
            <cxxflags>"-fdiagnostics-color=auto"
          ;
        }
        else if ( $(x_color) = "never" )
        {
          flags +=
            <cxxflags>"-fdiagnostics-color=never"
          ;
        }
        else if ( $(x_color) = "always" )
        {
          flags +=
            <cxxflags>"-fdiagnostics-color=always"
          ;
        }
      }
    }
    if ( $(x_elide_type) != "default" )
    {
      if (  (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  ) || (  $(toolset) = "clang" && ! (  $(version) < "03.04"  )  )  )
      {
        if ( $(x_elide_type) = "on" )
        {
          flags +=
            <cxxflags>"-felide-type"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-elide-type"
          ;
        }
      }
    }
    if ( $(x_diagnostics_show_template_tree) != "default" )
    {
      if (  (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  ) || $(toolset) = "clang"  )
      {
        if ( $(x_diagnostics_show_template_tree) = "on" )
        {
          flags +=
            <cxxflags>"-fdiagnostics-show-template-tree"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-diagnostics-show-template-tree"
          ;
        }
      }
    }
    if ( $(x_diagnostics_format) != "default" )
    {
      if ( $(x_diagnostics_format) = "fixits" )
      {
        if (  (  $(toolset) = "gcc" && ! (  $(version) < "07.00"  )  ) || (  $(toolset) = "clang" && ! (  $(version) < "05.00"  )  )  )
        {
          flags +=
            <cxxflags>"-fdiagnostics-parseable-fixits"
          ;
        }
      }
      else if ( $(x_diagnostics_format) = "patch" )
      {
        if (  $(toolset) = "gcc" && ! (  $(version) < "07.00"  )  )
        {
          flags +=
            <cxxflags>"-fdiagnostics-generate-patch"
          ;
        }
      }
      else if ( $(x_diagnostics_format) = "print-source-range-info" )
      {
        if $(toolset) = "clang"
        {
          flags +=
            <cxxflags>"-fdiagnostics-print-source-range-info"
          ;
        }
      }
    }
  }

  return $(flags) ;
}
