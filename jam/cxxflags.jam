variant san : debug : ;

import property-set ;
import feature ;
import toolset ;

# http://www.boost.org/build/doc/html/index.html
# http://www.boost.org/build/doc/html/bbv2/reference/definitions.html#bbv2.reference.features.attributes

feature.feature <warn-mode> : normal none strict : incidental ;
toolset.flags warn-mode WARN_MODE : <warn-mode> ;

# feature.feature <lto> : off on : incidental ;
feature.feature <lto> : off on : propagated ;
toolset.flags lto LTO : <lto> ;

# feature.feature <san> : off on : symmetric ;
feature.feature <san> : off on : ;
toolset.flags san SAN : <san> ;

feature.feature <suggest> : off on : incidental ;
toolset.flags suggest SUGGEST : <suggest> ;

feature.feature <pedantic> : on off : incidental ;
toolset.flags pedantic PEDANTIC : <pedantic> ;

# feature.feature <stack-protector> : off on strong all : incidental ;
feature.feature <stack-protector> : off on strong all : propagated ;
toolset.flags stack-protector STACK_PROTECTOR : <stack-protector> ;

# feature.feature <canary> : tls global : ; # depends to fstack-protector
# toolset.flags canary CANARY : <canary> ;

# feature.feature <relro> : off on all : incidental ;
feature.feature <relro> : off on all : propagated ;
toolset.flags relro RELRO : <relro> ;

# feature.feature <security> : off on strong all : incidental ; # set stack-property and relro
feature.feature <security> : off on strong all : propagated ; # set stack-property and relro
toolset.flags security SECURITY : <security> ;

# http://www.boost.org/build/tutorial.html#feature_reference
# http://www.boost.org/doc/libs/1_63_0/doc/html/bbv2/reference.html
# warnings-as-errors off, on
# warnings        on, all, off
# optimization    off, speed, space
# profiling       off, on
# toolset         gcc, msvc, intel-linux, intel-win, acc, borland, como-linux, cw, dmc, hp_cxx, sun
# rtti            on, off

GLIBCXX_ALLOW_BROKEN_ABI = 1 ; # for _GLIBCXX_DEBUG or _GLIBCXX_ASSERTIONS

local ORIGINAL_TOOLSET = 0 ;
local COMP_VERSION = 000.000 ;

import string ;

rule get-normalized-compiler-version ( toolset : ps )
{
    if $(ORIGINAL_TOOLSET) != $(toolset)
    {
        local version = [ MATCH ^[^0-9]*(.*)$ : [ $(ps).get <toolset-$(toolset):version> ] ] ;
        local match = [ MATCH ^([0-9]+)(\\.([0-9]+))? : $(version) ] ;
        local major = [ MATCH (..)$ : [ string.join 00 $(match[1]) ] ] ;
        local minor = [ MATCH (..)$ : [ string.join 00 $(match[3]) ] ] ;
        COMP_VERSION = $(major).$(minor) ;
        ORIGINAL_TOOLSET = $(toolset) ;
    }
    return $(COMP_VERSION) ;
}

rule flags ( properties * )
{
    local ps = [ property-set.create $(properties) ] ;
    local toolset = [ $(ps).get <toolset> ] ;
    # TODO is not the real version. For toolset=gcc-5, version is 5 ; for clang-scan, version is ''
    # define PP_CAT_I(a,b) a##b
    # define PP_CAT(a,b) PP_CAT_I(a,b)
    # g++ -x c++ -E - <<<'PP_CAT(__GNUC__, PP_CAT(__GNUC_MINOR__, __GNUC_PATCHLEVEL__))'
    # clang++ -x c++ -E - <<<'PP_CAT(__clang_major__, PP_CAT(__clang_minor__, __clang_patchlevel__))'
    local version = [ get-normalized-compiler-version $(toolset) : $(ps) ] ;

    local flags ;

    if $(toolset) != gcc && $(toolset) != clang
    {
        return $(flags) ;
    }

    flags +=
        <cxxflags>-Wno-switch-enum&&-Wswitch # -Wno-switch-enum followed by -Wswitch
    ;

    ## Optimizations
    # g++ -Q --help=optimizers -O3
    #if <optimization>speed in $(properties)
    #{
    #    flags +=
    #        # -O3 # by default
    #        # -march=native
    #        # -funroll-loops # not included in -O3
    #        # -fpeel-loops # not included in -O3
    #        # -ffast-math
    #        # -ffat-lto-objects
    #        # -flto
    #    ;
    #}

    ## LTO (Link Time Optimization)
    if <lto>on in $(properties)
    {
        flags +=
            <cxxflags>-flto
            <linkflags>-flto
        ;
        if $(toolset) = gcc || $(version) >= 05.00
        {
            flags +=
                <cxxflags>-flto-odr-type-merging
                <linkflags>-flto-odr-type-merging
            ;
        }
    }

    ## Pedantic
    if ! <pedantic>off in $(properties)
    {
        flags +=
            <cxxflags>-pedantic
            <cxxflags>-pedantic-errors
        ;
    }

    ## Security
    ## @{
    if ! <stack-protector>off in $(properties)
    || ! <security>off in $(properties)
    {
        flags +=
            <define>_FORTIFY_SOURCE=2
            <cxxflags>-Wstack-protector
            <cxxflags>-fstack-protector
            <linkflags>-fstack-protector
        ;

        if <stack-protector>strong in $(properties)
        || <security>strong in $(properties)
        {
            if $(toolset) != gcc || $(version) >= 04.09
            {
                flags +=
                    <cxxflags>-fstack-protector-strong
                    <linkflags>-fstack-protector-strong
                ;
            }
        }

        if <stack-protector>all in $(properties)
        || <security>all in $(properties)
        {
            flags +=
                <cxxflags>-fstack-protector-all
                <linkflags>-fstack-protector-all
            ;
        }
    }

    if <relro>on in $(properties)
    || <security>on in $(properties)
    || <security>strong in $(properties)
    {
        flags += <linkflags>-Wl,-z,relro ;
    }
    else if <relro>all in $(properties)
         || <security>all in $(properties)
    {
        flags += <linkflags>-Wl,-z,relro,-z,now ;
    }
    ## @}

    ## Warning mode
    ##@{
    if <warn-mode>none in $(properties)
    {
        return $(flags) ;
    }

    if <warn-mode>strict in $(properties)
    {
        flags +=
            <cxxflags>-Wconversion # imply -Wsign-conversion -Wfloat-conversion
            # <cxxflags>-Wsign-conversion
        ;
    }
    else if $(toolset) = clang
    {
        flags +=
            <cxxflags>-Wno-conversion
        ;
    }
    ##@}

    ## Suggest attributes
    if $(toolset) = gcc && <suggest>on in $(properties)
    {
        flags +=
            <cxxflags>-Wsuggest-attribute=pure
            <cxxflags>-Wsuggest-attribute=const
        ;
        if $(version) >= 05.00
        {
            flags +=
                <cxxflags>-Wsuggest-final-types
                <cxxflags>-Wsuggest-final-methods
                #<cxxflags>-Wsuggest-attribute=format
            ;
        }
    }

    ## libstdc++ debugging
    if <variant>debug in $(properties)
    || <variant>san in $(properties)
    || <san>on in $(properties)
    {
        if $(GLIBCXX_ALLOW_BROKEN_ABI) = 1
        {
            flags += <define>_GLIBCXX_DEBUG ;
        }
        else
        {
            flags += <define>_GLIBCXX_ASSERTIONS ;
        }

        if ! <pedantic>off in $(properties)
        {
            flags += <define>_GLIBCXX_DEBUG_PEDANTIC ;
        }
    }

    ## Warnings
    # g++ -Q --help=warnings -Wall -Wextra
    if $(toolset) = gcc
    {
        flags +=
            <cxxflags>-Wall
            <cxxflags>-Wextra
            #<cxxflags>-Warray-bounds # -Wall
            <cxxflags>-Wcast-align
            <cxxflags>-Wcast-qual
            <cxxflags>-Wdisabled-optimization
            <cxxflags>-Wfloat-equal
            <cxxflags>-Wformat-security
            <cxxflags>-Wformat=2
            <cxxflags>-Wmissing-declarations
            #<cxxflags>-Wmissing-format-attribute
            <cxxflags>-Wmissing-include-dirs
            <cxxflags>-Wnon-virtual-dtor
            <cxxflags>-Wold-style-cast
            <cxxflags>-Woverloaded-virtual
            <cxxflags>-Wpacked
            <cxxflags>-Wredundant-decls
            #<cxxflags>-Wstrict-overflow=1 # -Wall
            #<cxxflags>-Wstrict-overflow=2
            #<cxxflags>-Wstrict-overflow=3
            #<cxxflags>-Wstrict-overflow=4
            #<cxxflags>-Wstrict-overflow=5
            #<cxxflags>-Wstrict-default # bad idea
            <cxxflags>-Wundef
            <cxxflags>-Wuninitialized
            <cxxflags>-Wunused-macros
            <cxxflags>-Wvla
            #<cxxflags>-Winline # perf

            #<cxxflags>-Wconversion
            #<cxxflags>-Wsign-conversion # -Wconversion
            #<cxxflags>-Wfloat-conversion # -Wconversion
            #<cxxflags>-Werror # warnings-as-errors=on
        ;

        if $(version) >= 07.01
        {
            flags +=
                <cxxflags>-Wrestrict
                <cxxflags>-Wduplicated-branches
                <cxxflags>-Walloc-zero
                <cxxflags>-Walloca
                <cxxflags>-Wformat-overflow #=level
                #<cxxflags>-Wformat-truncation=level #-Wall
                #<cxxflags>-Wshadow=local
                #<cxxflags>-Wshadow=compatible-local
            ;
        }
        if $(version) >= 07.00
        {
            flags +=
                <cxxflags>-Waligned-new
                #<cxxflags>-Wregister # pedantic warning and register is removed in c++17
            ;
        }
        if $(version) >= 06.01
        {
            flags +=
                <cxxflags>-Wduplicated-cond
                <cxxflags>-Wnull-dereference # This option is only active when -fdelete-null-pointer-checks is active, which is enabled by optimizations in most targets
            ;
        }
        if $(version) >= 05.01
        {
            flags +=
                <cxxflags>-fsized-deallocation
                <cxxflags>-Warray-bounds=2
                <cxxflags>-Wconditionally-supported
                #<cxxflags>-Wctor-dtor-privacy
                # <cxxflags>-Wnoexcept TODO gcc-7.2 -Wnoexcept everything... -_-
                <cxxflags>-Wsized-deallocation
                <cxxflags>-Wstrict-null-sentinel
                <cxxflags>-Wsuggest-override
                <cxxflags>-Wformat-signedness
            ;
        }
        if $(version) >= 04.09
        {
            flags +=
                <cxxflags>-Wconditionally-supported
                <cxxflags>-Wfloat-conversion
                <cxxflags>-Wopenmp-simd
            ;
        }
        if $(version) >= 04.08
        {
            flags +=
                <cxxflags>-Wuseless-cast
            ;
        }
        if $(version) >= 04.07
        {
            flags +=
                <cxxflags>-Wsuggest-attribute=noreturn
                <cxxflags>-Wzero-as-null-pointer-constant
                <cxxflags>-Wlogical-op
                #<cxxflags>-Wno-aggressive-loop-optimizations
                #<cxxflags>-Wnormalized=nfc ?
                <cxxflags>-Wvector-operation-performance
                <cxxflags>-Wdouble-promotion
                <cxxflags>-Wtrampolines
            ;
        }
    }

    if $(toolset) = clang
    {
        flags +=
            <cxxflags>-Weverything
            <cxxflags>-Wno-documentation-unknown-command
            #<cxxflags>-Wno-range-loop-analysis
            #<cxxflags>-Wno-disabled-macro-expansion
            <cxxflags>-Wno-c++98-compat
            <cxxflags>-Wno-c++98-compat-pedantic
            <cxxflags>-Wno-mismatched-tags
            <cxxflags>-Wno-padded
            <cxxflags>-Wno-shadow
            <cxxflags>-Wno-global-constructors
            <cxxflags>-Wno-weak-vtables
            <cxxflags>-Wno-exit-time-destructors

            <cxxflags>-Wno-overlength-strings
            <cxxflags>-Wno-disabled-macro-expansion
            <cxxflags>-Wno-covered-switch-default
            #<cxxflags>-Wno-conversion

            #<cxxflags>-Qunused-arguments
        ;

        if $(version) >= 05.00
        {
            flags +=
                <cxxflags>-Wno-inconsistent-missing-destructor-override
            ;
        }
    }

    ## Sanitizers
    if <variant>san in $(properties) && ! <target-os>windows in $(properties)
    {
        if $(version) >= 06.01
        {
            flags +=
                <cxxflags>-fsanitize=bounds-strict
                <linkflags>-fsanitize=bounds-strict
            ;
        }
        if $(toolset) != gcc || $(version) >= 05.00
        {
            flags +=
                <cxxflags>-fsanitize=bounds
                <linkflags>-fsanitize=bounds
            ;
        }
        if $(toolset) != gcc || $(version) >= 04.09
        {
            flags +=
                <cxxflags>-fsanitize=address
                <linkflags>-fsanitize=address

                <cxxflags>-fsanitize=undefined
                <linkflags>-fsanitize=undefined

                <linkflags>-fsanitize=leak
                <cxxflags>-fsanitize=leak

                <cxxflags>-fno-omit-frame-pointer
            ;
        }
    }

    return $(flags) ;
}
